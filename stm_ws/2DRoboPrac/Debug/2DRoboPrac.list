
2DRoboPrac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d048  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001574  0801d248  0801d248  0002d248  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e7bc  0801e7bc  000304d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e7bc  0801e7bc  0002e7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e7c4  0801e7c4  000304d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801e7c4  0801e7c4  0002e7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e7d4  0801e7d4  0002e7d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d8  20000000  0801e7d8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012728  200004d8  0801ecb0  000304d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20012c00  0801ecb0  00032c00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000304d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  00030506  2**0
                  CONTENTS, READONLY
 13 .debug_info   00028c54  00000000  00000000  0003057c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005dcc  00000000  00000000  000591d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e00  00000000  00000000  0005efa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016fd  00000000  00000000  00060da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00030c3f  00000000  00000000  0006249d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028604  00000000  00000000  000930dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00115c50  00000000  00000000  000bb6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008a64  00000000  00000000  001d1330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001d9d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200004d8 	.word	0x200004d8
 800021c:	00000000 	.word	0x00000000
 8000220:	0801d230 	.word	0x0801d230

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200004dc 	.word	0x200004dc
 800023c:	0801d230 	.word	0x0801d230

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b8:	f00b f960 	bl	800b97c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006bc:	4b5b      	ldr	r3, [pc, #364]	; (800082c <pvPortMallocMicroROS+0x180>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006c4:	f000 f98a 	bl	80009dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c8:	4b59      	ldr	r3, [pc, #356]	; (8000830 <pvPortMallocMicroROS+0x184>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f040 8092 	bne.w	80007fa <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01f      	beq.n	800071c <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80006dc:	2208      	movs	r2, #8
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d016      	beq.n	800071c <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 0307 	bic.w	r3, r3, #7
 80006f4:	3308      	adds	r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00c      	beq.n	800071c <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000706:	b672      	cpsid	i
 8000708:	f383 8811 	msr	BASEPRI, r3
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	f3bf 8f4f 	dsb	sy
 8000714:	b662      	cpsie	i
 8000716:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000718:	bf00      	nop
 800071a:	e7fe      	b.n	800071a <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d06b      	beq.n	80007fa <pvPortMallocMicroROS+0x14e>
 8000722:	4b44      	ldr	r3, [pc, #272]	; (8000834 <pvPortMallocMicroROS+0x188>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d866      	bhi.n	80007fa <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800072c:	4b42      	ldr	r3, [pc, #264]	; (8000838 <pvPortMallocMicroROS+0x18c>)
 800072e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <pvPortMallocMicroROS+0x18c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000736:	e004      	b.n	8000742 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	d903      	bls.n	8000754 <pvPortMallocMicroROS+0xa8>
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f1      	bne.n	8000738 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <pvPortMallocMicroROS+0x180>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075a:	429a      	cmp	r2, r3
 800075c:	d04d      	beq.n	80007fa <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2208      	movs	r2, #8
 8000764:	4413      	add	r3, r2
 8000766:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1ad2      	subs	r2, r2, r3
 8000778:	2308      	movs	r3, #8
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	429a      	cmp	r2, r3
 800077e:	d921      	bls.n	80007c4 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00c      	beq.n	80007ac <pvPortMallocMicroROS+0x100>
	__asm volatile
 8000792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000796:	b672      	cpsid	i
 8000798:	f383 8811 	msr	BASEPRI, r3
 800079c:	f3bf 8f6f 	isb	sy
 80007a0:	f3bf 8f4f 	dsb	sy
 80007a4:	b662      	cpsie	i
 80007a6:	613b      	str	r3, [r7, #16]
}
 80007a8:	bf00      	nop
 80007aa:	e7fe      	b.n	80007aa <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	1ad2      	subs	r2, r2, r3
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007be:	69b8      	ldr	r0, [r7, #24]
 80007c0:	f000 f96e 	bl	8000aa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <pvPortMallocMicroROS+0x190>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d203      	bcs.n	80007e6 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <pvPortMallocMicroROS+0x190>)
 80007e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <pvPortMallocMicroROS+0x184>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	431a      	orrs	r2, r3
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007fa:	f00b f8cd 	bl	800b998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00c      	beq.n	8000822 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8000808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800080c:	b672      	cpsid	i
 800080e:	f383 8811 	msr	BASEPRI, r3
 8000812:	f3bf 8f6f 	isb	sy
 8000816:	f3bf 8f4f 	dsb	sy
 800081a:	b662      	cpsie	i
 800081c:	60fb      	str	r3, [r7, #12]
}
 800081e:	bf00      	nop
 8000820:	e7fe      	b.n	8000820 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8000822:	69fb      	ldr	r3, [r7, #28]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	200040fc 	.word	0x200040fc
 8000830:	20004108 	.word	0x20004108
 8000834:	20004100 	.word	0x20004100
 8000838:	200040f4 	.word	0x200040f4
 800083c:	20004104 	.word	0x20004104

08000840 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d04c      	beq.n	80008ec <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000852:	2308      	movs	r3, #8
 8000854:	425b      	negs	r3, r3
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4013      	ands	r3, r2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10c      	bne.n	8000888 <vPortFreeMicroROS+0x48>
	__asm volatile
 800086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000872:	b672      	cpsid	i
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	b662      	cpsie	i
 8000882:	60fb      	str	r3, [r7, #12]
}
 8000884:	bf00      	nop
 8000886:	e7fe      	b.n	8000886 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00c      	beq.n	80008aa <vPortFreeMicroROS+0x6a>
	__asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000894:	b672      	cpsid	i
 8000896:	f383 8811 	msr	BASEPRI, r3
 800089a:	f3bf 8f6f 	isb	sy
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	b662      	cpsie	i
 80008a4:	60bb      	str	r3, [r7, #8]
}
 80008a6:	bf00      	nop
 80008a8:	e7fe      	b.n	80008a8 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d019      	beq.n	80008ec <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d115      	bne.n	80008ec <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008d0:	f00b f854 	bl	800b97c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <vPortFreeMicroROS+0xb8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <vPortFreeMicroROS+0xb8>)
 80008e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f000 f8dc 	bl	8000aa0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e8:	f00b f856 	bl	800b998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20004108 	.word	0x20004108
 80008f8:	20004100 	.word	0x20004100

080008fc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000908:	2308      	movs	r3, #8
 800090a:	425b      	negs	r3, r3
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4413      	add	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <getBlockSize+0x38>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	43db      	mvns	r3, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	return count;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20004108 	.word	0x20004108

08000938 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000942:	f00b f81b 	bl	800b97c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f7ff feb0 	bl	80006ac <pvPortMallocMicroROS>
 800094c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d017      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d014      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffce 	bl	80008fc <getBlockSize>
 8000960:	4603      	mov	r3, r0
 8000962:	2208      	movs	r2, #8
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d201      	bcs.n	8000974 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	68b8      	ldr	r0, [r7, #8]
 800097a:	f01b fe10 	bl	801c59e <memcpy>

		vPortFreeMicroROS(pv);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff5e 	bl	8000840 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000984:	f00b f808 	bl	800b998 <xTaskResumeAll>

	return newmem;
 8000988:	68bb      	ldr	r3, [r7, #8]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800099c:	f00a ffee 	bl	800b97c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff fe7e 	bl	80006ac <pvPortMallocMicroROS>
 80009b0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009b6:	e004      	b.n	80009c2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	613a      	str	r2, [r7, #16]
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f5      	bne.n	80009b8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009cc:	f00a ffe4 	bl	800b998 <xTaskResumeAll>
  	return mem;
 80009d0:	68fb      	ldr	r3, [r7, #12]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <prvHeapInit+0xac>)
 80009ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00c      	beq.n	8000a10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3307      	adds	r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 0307 	bic.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <prvHeapInit+0xac>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <prvHeapInit+0xb0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <prvHeapInit+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 0307 	bic.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <prvHeapInit+0xb4>)
 8000a3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <prvHeapInit+0xb4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <prvHeapInit+0xb4>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <prvHeapInit+0xb8>)
 8000a6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <prvHeapInit+0xbc>)
 8000a72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <prvHeapInit+0xc0>)
 8000a76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	200004f4 	.word	0x200004f4
 8000a8c:	200040f4 	.word	0x200040f4
 8000a90:	200040fc 	.word	0x200040fc
 8000a94:	20004104 	.word	0x20004104
 8000a98:	20004100 	.word	0x20004100
 8000a9c:	20004108 	.word	0x20004108

08000aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <prvInsertBlockIntoFreeList+0xac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e002      	b.n	8000ab4 <prvInsertBlockIntoFreeList+0x14>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d8f7      	bhi.n	8000aae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d108      	bne.n	8000ae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	441a      	add	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	441a      	add	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d118      	bne.n	8000b28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d00d      	beq.n	8000b1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e003      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d002      	beq.n	8000b3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	200040f4 	.word	0x200040f4
 8000b50:	200040fc 	.word	0x200040fc

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	200c      	movs	r0, #12
 8000b78:	f001 f91a 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f001 f933 	bl	8001de8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 f912 	bl	8001db0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 f92b 	bl	8001de8 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bae:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	4904      	ldr	r1, [pc, #16]	; (8000bc8 <cubemx_transport_open+0x28>)
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f004 fe90 	bl	80058dc <HAL_UART_Receive_DMA>
    return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000410c 	.word	0x2000410c

08000bcc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f004 fec1 	bl	8005964 <HAL_UART_DMAStop>
    return true;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c00:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c06:	2b20      	cmp	r3, #32
 8000c08:	d11a      	bne.n	8000c40 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f004 fde6 	bl	80057e4 <HAL_UART_Transmit_DMA>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c1c:	e002      	b.n	8000c24 <cubemx_transport_write+0x38>
            osDelay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f009 fe42 	bl	800a8a8 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <cubemx_transport_write+0x46>
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d1f5      	bne.n	8000c1e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c32:	7cfb      	ldrb	r3, [r7, #19]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <cubemx_transport_write+0x50>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e002      	b.n	8000c42 <cubemx_transport_write+0x56>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e000      	b.n	8000c42 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c40:	2300      	movs	r3, #0
    }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c60:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c66:	b672      	cpsid	i
}
 8000c68:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c7a:	b662      	cpsie	i
}
 8000c7c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f009 fe0f 	bl	800a8a8 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <cubemx_transport_read+0xa0>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d103      	bne.n	8000c9e <cubemx_transport_read+0x52>
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe3      	blt.n	8000c66 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000ca2:	e011      	b.n	8000cc8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <cubemx_transport_read+0xa0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	440b      	add	r3, r1
 8000cae:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <cubemx_transport_read+0xa4>)
 8000cb0:	5c8a      	ldrb	r2, [r1, r2]
 8000cb2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cc0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d003      	beq.n	8000cdc <cubemx_transport_read+0x90>
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3e3      	bcc.n	8000ca4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20004910 	.word	0x20004910
 8000cec:	2000490c 	.word	0x2000490c
 8000cf0:	2000410c 	.word	0x2000410c

08000cf4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <MX_FREERTOS_Init+0x18>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_FREERTOS_Init+0x1c>)
 8000cfe:	f009 fd2d 	bl	800a75c <osThreadNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <MX_FREERTOS_Init+0x20>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	0801d3c8 	.word	0x0801d3c8
 8000d10:	08000dd1 	.word	0x08000dd1
 8000d14:	20004978 	.word	0x20004978

08000d18 <service_callback>:
  * @param  argument: Not used
  * @retval None
  */
// サービスのコールバック関数を定義
void service_callback(const void *request, void *response)
{
 8000d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d1c:	b084      	sub	sp, #16
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
	// リクエストとレスポンスを適切な型にキャスト
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	60bb      	str	r3, [r7, #8]
	// 1秒スリープ（重い処理の代わり）
	osDelay(1000);
 8000d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d30:	f009 fdba 	bl	800a8a8 <osDelay>
	// レスポンスに合計値をセット
	_res->sum = _req->a + _req->b + _req->c;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d40:	1884      	adds	r4, r0, r2
 8000d42:	eb41 0503 	adc.w	r5, r1, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000d4c:	eb14 0802 	adds.w	r8, r4, r2
 8000d50:	eb45 0903 	adc.w	r9, r5, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	e9c3 8900 	strd	r8, r9, [r3]
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000d64 <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8000d64:	b5b0      	push	{r4, r5, r7, lr}
 8000d66:	b08a      	sub	sp, #40	; 0x28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const drive_msgs__msg__DiffDrive * sub = (const drive_msgs__msg__DiffDrive *)msgin;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24

	  char hearing[] = "I'm hearing from f7";
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <subscription_callback+0x58>)
 8000d72:	f107 040c 	add.w	r4, r7, #12
 8000d76:	461d      	mov	r5, r3
 8000d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d7c:	682b      	ldr	r3, [r5, #0]
 8000d7e:	6023      	str	r3, [r4, #0]
	  rosidl_runtime_c__String__assignn(&pub.data, hearing, sizeof(hearing));
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2214      	movs	r2, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	480d      	ldr	r0, [pc, #52]	; (8000dc0 <subscription_callback+0x5c>)
 8000d8a:	f012 fcdd 	bl	8013748 <rosidl_runtime_c__String__assignn>

	  //データのpublish
	  RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8000d8e:	2200      	movs	r2, #0
 8000d90:	490b      	ldr	r1, [pc, #44]	; (8000dc0 <subscription_callback+0x5c>)
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <subscription_callback+0x60>)
 8000d94:	f00f f8f4 	bl	800ff80 <rcl_publish>
 8000d98:	6238      	str	r0, [r7, #32]
 8000d9a:	6a3b      	ldr	r3, [r7, #32]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d004      	beq.n	8000daa <subscription_callback+0x46>
 8000da0:	6a3a      	ldr	r2, [r7, #32]
 8000da2:	21ab      	movs	r1, #171	; 0xab
 8000da4:	4808      	ldr	r0, [pc, #32]	; (8000dc8 <subscription_callback+0x64>)
 8000da6:	f01b f901 	bl	801bfac <iprintf>

	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	2180      	movs	r1, #128	; 0x80
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <subscription_callback+0x68>)
 8000db0:	f001 fdea 	bl	8002988 <HAL_GPIO_WritePin>
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bdb0      	pop	{r4, r5, r7, pc}
 8000dbc:	0801d280 	.word	0x0801d280
 8000dc0:	20004968 	.word	0x20004968
 8000dc4:	20004974 	.word	0x20004974
 8000dc8:	0801d254 	.word	0x0801d254
 8000dcc:	40020400 	.word	0x40020400

08000dd0 <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000dd0:	b5b0      	push	{r4, r5, r7, lr}
 8000dd2:	b0ec      	sub	sp, #432	; 0x1b0
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000dda:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8000dde:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000de0:	f00c fa44 	bl	800d26c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの初期化
  	printf("start default task");
 8000de4:	48b8      	ldr	r0, [pc, #736]	; (80010c8 <StartDefaultTask+0x2f8>)
 8000de6:	f01b f8e1 	bl	801bfac <iprintf>
  	rmw_uros_set_custom_transport(
 8000dea:	4bb8      	ldr	r3, [pc, #736]	; (80010cc <StartDefaultTask+0x2fc>)
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	4bb8      	ldr	r3, [pc, #736]	; (80010d0 <StartDefaultTask+0x300>)
 8000df0:	9300      	str	r3, [sp, #0]
 8000df2:	4bb8      	ldr	r3, [pc, #736]	; (80010d4 <StartDefaultTask+0x304>)
 8000df4:	4ab8      	ldr	r2, [pc, #736]	; (80010d8 <StartDefaultTask+0x308>)
 8000df6:	49b9      	ldr	r1, [pc, #740]	; (80010dc <StartDefaultTask+0x30c>)
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f010 fe7b 	bl	8011af4 <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000dfe:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000e02:	4618      	mov	r0, r3
 8000e04:	f010 fb0c 	bl	8011420 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8000e08:	4bb5      	ldr	r3, [pc, #724]	; (80010e0 <StartDefaultTask+0x310>)
 8000e0a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  	freeRTOS_allocator.deallocate = microros_deallocate;
 8000e0e:	4bb5      	ldr	r3, [pc, #724]	; (80010e4 <StartDefaultTask+0x314>)
 8000e10:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	freeRTOS_allocator.reallocate = microros_reallocate;
 8000e14:	4bb4      	ldr	r3, [pc, #720]	; (80010e8 <StartDefaultTask+0x318>)
 8000e16:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000e1a:	4bb4      	ldr	r3, [pc, #720]	; (80010ec <StartDefaultTask+0x31c>)
 8000e1c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000e20:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000e24:	4618      	mov	r0, r3
 8000e26:	f010 fb09 	bl	801143c <rcutils_set_default_allocator>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	f083 0301 	eor.w	r3, r3, #1
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <StartDefaultTask+0x6e>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8000e36:	21c5      	movs	r1, #197	; 0xc5
 8000e38:	48ad      	ldr	r0, [pc, #692]	; (80010f0 <StartDefaultTask+0x320>)
 8000e3a:	f01b f8b7 	bl	801bfac <iprintf>
  	}

      // ここからサービスサーバの実装
  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 8000e3e:	4bad      	ldr	r3, [pc, #692]	; (80010f4 <StartDefaultTask+0x324>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6898      	ldr	r0, [r3, #8]
 8000e44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e48:	2202      	movs	r2, #2
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f01b f8c0 	bl	801bfd0 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 8000e50:	f00e fd16 	bl	800f880 <rcl_get_zero_initialized_init_options>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8000e5a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f010 fb0a 	bl	8011478 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8000e64:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f00e fe11 	bl	800fa90 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 8000e6e:	f00f f8cd 	bl	801000c <rcl_get_zero_initialized_service>
 8000e72:	4603      	mov	r3, r0
 8000e74:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	publisher = rcl_get_zero_initialized_publisher();
 8000e78:	f00e ffb4 	bl	800fde4 <rcl_get_zero_initialized_publisher>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	4a9e      	ldr	r2, [pc, #632]	; (80010f8 <StartDefaultTask+0x328>)
 8000e80:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 8000e82:	f00f f9e7 	bl	8010254 <rcl_get_zero_initialized_subscription>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8000e8c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000e90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000e94:	4618      	mov	r0, r3
 8000e96:	f00f fe6d 	bl	8010b74 <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 8000e9a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000e9e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f00e ff6e 	bl	800fd84 <rcl_node_get_default_options>

  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 8000ea8:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 8000eac:	466a      	mov	r2, sp
 8000eae:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8000eb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000eb6:	e882 0003 	stmia.w	r2, {r0, r1}
 8000eba:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f00e fcdf 	bl	800f884 <rcl_init_options_init>
 8000ec6:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 8000eca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d005      	beq.n	8000ede <StartDefaultTask+0x10e>
 8000ed2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8000ed6:	21d4      	movs	r1, #212	; 0xd4
 8000ed8:	4888      	ldr	r0, [pc, #544]	; (80010fc <StartDefaultTask+0x32c>)
 8000eda:	f01b f867 	bl	801bfac <iprintf>
      // ROS_DOMAIN_IDの設定。
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 8000ede:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f00e fdcb 	bl	800fa80 <rcl_init_options_set_domain_id>
 8000eea:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 8000eee:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <StartDefaultTask+0x132>
 8000ef6:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8000efa:	21d6      	movs	r1, #214	; 0xd6
 8000efc:	487f      	ldr	r0, [pc, #508]	; (80010fc <StartDefaultTask+0x32c>)
 8000efe:	f01b f855 	bl	801bfac <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8000f02:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8000f06:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8000f0a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4613      	mov	r3, r2
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	f010 f95b 	bl	80111d0 <rclc_support_init_with_options>
      // ノードの作成
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 8000f1a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000f1e:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	4a75      	ldr	r2, [pc, #468]	; (8001100 <StartDefaultTask+0x330>)
 8000f2c:	4975      	ldr	r1, [pc, #468]	; (8001104 <StartDefaultTask+0x334>)
 8000f2e:	f010 f985 	bl	801123c <rclc_node_init_with_options>
 8000f32:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8000f36:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d005      	beq.n	8000f4a <StartDefaultTask+0x17a>
 8000f3e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f42:	21d9      	movs	r1, #217	; 0xd9
 8000f44:	486d      	ldr	r0, [pc, #436]	; (80010fc <StartDefaultTask+0x32c>)
 8000f46:	f01b f831 	bl	801bfac <iprintf>
      // サービスの作成
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 8000f4a:	f00c feef 	bl	800dd2c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000f54:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000f58:	4b6b      	ldr	r3, [pc, #428]	; (8001108 <StartDefaultTask+0x338>)
 8000f5a:	f010 f9e5 	bl	8011328 <rclc_service_init_default>
 8000f5e:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 8000f62:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d005      	beq.n	8000f76 <StartDefaultTask+0x1a6>
 8000f6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f6e:	21db      	movs	r1, #219	; 0xdb
 8000f70:	4862      	ldr	r0, [pc, #392]	; (80010fc <StartDefaultTask+0x32c>)
 8000f72:	f01b f81b 	bl	801bfac <iprintf>

  	 //publisherの作成
	RCCHECK(rclc_publisher_init_default(
 8000f76:	f012 fc77 	bl	8013868 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000f80:	4b62      	ldr	r3, [pc, #392]	; (800110c <StartDefaultTask+0x33c>)
 8000f82:	485d      	ldr	r0, [pc, #372]	; (80010f8 <StartDefaultTask+0x328>)
 8000f84:	f010 f996 	bl	80112b4 <rclc_publisher_init_default>
 8000f88:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8000f8c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <StartDefaultTask+0x1d0>
 8000f94:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000f98:	21de      	movs	r1, #222	; 0xde
 8000f9a:	4858      	ldr	r0, [pc, #352]	; (80010fc <StartDefaultTask+0x32c>)
 8000f9c:	f01b f806 	bl	801bfac <iprintf>
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

	 //subscriberの作成
		RCCHECK(rclc_subscription_init_default(
 8000fa0:	f00c ffdc 	bl	800df5c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000faa:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8000fae:	4b58      	ldr	r3, [pc, #352]	; (8001110 <StartDefaultTask+0x340>)
 8000fb0:	f010 f9f4 	bl	801139c <rclc_subscription_init_default>
 8000fb4:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 8000fb8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d005      	beq.n	8000fcc <StartDefaultTask+0x1fc>
 8000fc0:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8000fc4:	21e5      	movs	r1, #229	; 0xe5
 8000fc6:	484d      	ldr	r0, [pc, #308]	; (80010fc <StartDefaultTask+0x32c>)
 8000fc8:	f01a fff0 	bl	801bfac <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, DiffDrive),
		  "/cmd_ras"));
      // エグゼキューターの作成。三番目の引数はextecuterに登録するコールバック関数の数。
  	RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 8000fcc:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000fd0:	f507 7190 	add.w	r1, r7, #288	; 0x120
 8000fd4:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8000fd8:	2202      	movs	r2, #2
 8000fda:	f00f fdd5 	bl	8010b88 <rclc_executor_init>
 8000fde:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 8000fe2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <StartDefaultTask+0x226>
 8000fea:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8000fee:	21eb      	movs	r1, #235	; 0xeb
 8000ff0:	4842      	ldr	r0, [pc, #264]	; (80010fc <StartDefaultTask+0x32c>)
 8000ff2:	f01a ffdb 	bl	801bfac <iprintf>

      // エグゼキューターにサービスを追加
  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8000ff6:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8000ffa:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8000ffe:	4b45      	ldr	r3, [pc, #276]	; (8001114 <StartDefaultTask+0x344>)
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	4b45      	ldr	r3, [pc, #276]	; (8001118 <StartDefaultTask+0x348>)
 8001004:	4a45      	ldr	r2, [pc, #276]	; (800111c <StartDefaultTask+0x34c>)
 8001006:	f00f fe79 	bl	8010cfc <rclc_executor_add_service>
 800100a:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 800100e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001012:	2b00      	cmp	r3, #0
 8001014:	d005      	beq.n	8001022 <StartDefaultTask+0x252>
 8001016:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 800101a:	21ee      	movs	r1, #238	; 0xee
 800101c:	4837      	ldr	r0, [pc, #220]	; (80010fc <StartDefaultTask+0x32c>)
 800101e:	f01a ffc5 	bl	801bfac <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 8001022:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001026:	f107 0088 	add.w	r0, r7, #136	; 0x88
 800102a:	2300      	movs	r3, #0
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	4b3c      	ldr	r3, [pc, #240]	; (8001120 <StartDefaultTask+0x350>)
 8001030:	4a3c      	ldr	r2, [pc, #240]	; (8001124 <StartDefaultTask+0x354>)
 8001032:	f00f fe25 	bl	8010c80 <rclc_executor_add_subscription>
 8001036:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 800103a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800103e:	2b00      	cmp	r3, #0
 8001040:	d005      	beq.n	800104e <StartDefaultTask+0x27e>
 8001042:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001046:	21ef      	movs	r1, #239	; 0xef
 8001048:	482c      	ldr	r0, [pc, #176]	; (80010fc <StartDefaultTask+0x32c>)
 800104a:	f01a ffaf 	bl	801bfac <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 800104e:	4836      	ldr	r0, [pc, #216]	; (8001128 <StartDefaultTask+0x358>)
 8001050:	f012 fb1c 	bl	801368c <rosidl_runtime_c__String__init>
    char hello[] = "Hello world from f7";
 8001054:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001058:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800105c:	4a33      	ldr	r2, [pc, #204]	; (800112c <StartDefaultTask+0x35c>)
 800105e:	461c      	mov	r4, r3
 8001060:	4615      	mov	r5, r2
 8001062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001066:	682b      	ldr	r3, [r5, #0]
 8001068:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	2214      	movs	r2, #20
 8001070:	4619      	mov	r1, r3
 8001072:	482d      	ldr	r0, [pc, #180]	; (8001128 <StartDefaultTask+0x358>)
 8001074:	f012 fb68 	bl	8013748 <rosidl_runtime_c__String__assignn>

    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8001078:	2200      	movs	r2, #0
 800107a:	492b      	ldr	r1, [pc, #172]	; (8001128 <StartDefaultTask+0x358>)
 800107c:	481e      	ldr	r0, [pc, #120]	; (80010f8 <StartDefaultTask+0x328>)
 800107e:	f00e ff7f 	bl	800ff80 <rcl_publish>
 8001082:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8001086:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800108a:	2b00      	cmp	r3, #0
 800108c:	d005      	beq.n	800109a <StartDefaultTask+0x2ca>
 800108e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001092:	21f8      	movs	r1, #248	; 0xf8
 8001094:	4826      	ldr	r0, [pc, #152]	; (8001130 <StartDefaultTask+0x360>)
 8001096:	f01a ff89 	bl	801bfac <iprintf>

    //初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2180      	movs	r1, #128	; 0x80
 800109e:	4825      	ldr	r0, [pc, #148]	; (8001134 <StartDefaultTask+0x364>)
 80010a0:	f001 fc72 	bl	8002988 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80010a4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80010a8:	a305      	add	r3, pc, #20	; (adr r3, 80010c0 <StartDefaultTask+0x2f0>)
 80010aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ae:	4608      	mov	r0, r1
 80010b0:	f010 f854 	bl	801115c <rclc_executor_spin_some>

	  osDelay(100);
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f009 fbf7 	bl	800a8a8 <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80010ba:	e7f3      	b.n	80010a4 <StartDefaultTask+0x2d4>
 80010bc:	f3af 8000 	nop.w
 80010c0:	05f5e100 	.word	0x05f5e100
 80010c4:	00000000 	.word	0x00000000
 80010c8:	0801d294 	.word	0x0801d294
 80010cc:	08000c4d 	.word	0x08000c4d
 80010d0:	08000bed 	.word	0x08000bed
 80010d4:	08000bcd 	.word	0x08000bcd
 80010d8:	08000ba1 	.word	0x08000ba1
 80010dc:	20007914 	.word	0x20007914
 80010e0:	0800130d 	.word	0x0800130d
 80010e4:	08001351 	.word	0x08001351
 80010e8:	08001389 	.word	0x08001389
 80010ec:	080013f5 	.word	0x080013f5
 80010f0:	0801d2a8 	.word	0x0801d2a8
 80010f4:	200004d4 	.word	0x200004d4
 80010f8:	20004974 	.word	0x20004974
 80010fc:	0801d2d0 	.word	0x0801d2d0
 8001100:	0801d2fc 	.word	0x0801d2fc
 8001104:	0801d300 	.word	0x0801d300
 8001108:	0801d308 	.word	0x0801d308
 800110c:	0801d318 	.word	0x0801d318
 8001110:	0801d328 	.word	0x0801d328
 8001114:	08000d19 	.word	0x08000d19
 8001118:	20004930 	.word	0x20004930
 800111c:	20004918 	.word	0x20004918
 8001120:	08000d65 	.word	0x08000d65
 8001124:	20004938 	.word	0x20004938
 8001128:	20004968 	.word	0x20004968
 800112c:	0801d334 	.word	0x0801d334
 8001130:	0801d254 	.word	0x0801d254
 8001134:	40020400 	.word	0x40020400

08001138 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <MX_GPIO_Init+0xa4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a22      	ldr	r2, [pc, #136]	; (80011dc <MX_GPIO_Init+0xa4>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <MX_GPIO_Init+0xa4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001162:	613b      	str	r3, [r7, #16]
 8001164:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001166:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_GPIO_Init+0xa4>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a1c      	ldr	r2, [pc, #112]	; (80011dc <MX_GPIO_Init+0xa4>)
 800116c:	f043 0308 	orr.w	r3, r3, #8
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_GPIO_Init+0xa4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0308 	and.w	r3, r3, #8
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_GPIO_Init+0xa4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a16      	ldr	r2, [pc, #88]	; (80011dc <MX_GPIO_Init+0xa4>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_GPIO_Init+0xa4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_GPIO_Init+0xa4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a10      	ldr	r2, [pc, #64]	; (80011dc <MX_GPIO_Init+0xa4>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_GPIO_Init+0xa4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	480b      	ldr	r0, [pc, #44]	; (80011e0 <MX_GPIO_Init+0xa8>)
 80011b4:	f001 fbe8 	bl	8002988 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011b8:	2380      	movs	r3, #128	; 0x80
 80011ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	2301      	movs	r3, #1
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f107 0314 	add.w	r3, r7, #20
 80011cc:	4619      	mov	r1, r3
 80011ce:	4804      	ldr	r0, [pc, #16]	; (80011e0 <MX_GPIO_Init+0xa8>)
 80011d0:	f001 fa2e 	bl	8002630 <HAL_GPIO_Init>

}
 80011d4:	bf00      	nop
 80011d6:	3728      	adds	r7, #40	; 0x28
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020400 	.word	0x40020400

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e8:	f000 fcd9 	bl	8001b9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f80e 	bl	800120c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f7ff ffa2 	bl	8001138 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f4:	f7ff fcae 	bl	8000b54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011f8:	f000 fba8 	bl	800194c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80011fc:	f009 fa44 	bl	800a688 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001200:	f7ff fd78 	bl	8000cf4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001204:	f009 fa74 	bl	800a6f0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001208:	e7fe      	b.n	8001208 <main+0x24>
	...

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	; 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	2234      	movs	r2, #52	; 0x34
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f01b f8f6 	bl	801c40c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	f107 0308 	add.w	r3, r7, #8
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	4b28      	ldr	r3, [pc, #160]	; (80012d4 <SystemClock_Config+0xc8>)
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <SystemClock_Config+0xc8>)
 8001236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800123a:	6413      	str	r3, [r2, #64]	; 0x40
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <SystemClock_Config+0xc8>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <SystemClock_Config+0xcc>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <SystemClock_Config+0xcc>)
 800124e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <SystemClock_Config+0xcc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800125c:	603b      	str	r3, [r7, #0]
 800125e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001260:	2301      	movs	r3, #1
 8001262:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001264:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001268:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800126a:	2302      	movs	r3, #2
 800126c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800126e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001274:	2308      	movs	r3, #8
 8001276:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001278:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800127c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127e:	2302      	movs	r3, #2
 8001280:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001282:	2302      	movs	r3, #2
 8001284:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001286:	2302      	movs	r3, #2
 8001288:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	4618      	mov	r0, r3
 8001290:	f002 fe4c 	bl	8003f2c <HAL_RCC_OscConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800129a:	f000 f831 	bl	8001300 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129e:	230f      	movs	r3, #15
 80012a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a2:	2302      	movs	r3, #2
 80012a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012b6:	f107 0308 	add.w	r3, r7, #8
 80012ba:	2105      	movs	r1, #5
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 f8e3 	bl	8004488 <HAL_RCC_ClockConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012c8:	f000 f81a 	bl	8001300 <Error_Handler>
  }
}
 80012cc:	bf00      	nop
 80012ce:	3750      	adds	r7, #80	; 0x50
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40007000 	.word	0x40007000

080012dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d101      	bne.n	80012f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012ee:	f000 fc63 	bl	8001bb8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40010000 	.word	0x40010000

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001304:	b672      	cpsid	i
}
 8001306:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001308:	e7fe      	b.n	8001308 <Error_Handler+0x8>
	...

0800130c <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <microros_allocate+0x3c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4413      	add	r3, r2
 8001320:	461a      	mov	r2, r3
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <microros_allocate+0x3c>)
 8001324:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001326:	4b09      	ldr	r3, [pc, #36]	; (800134c <microros_allocate+0x40>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4413      	add	r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4b06      	ldr	r3, [pc, #24]	; (800134c <microros_allocate+0x40>)
 8001334:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff f9b8 	bl	80006ac <pvPortMallocMicroROS>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200078b8 	.word	0x200078b8
 800134c:	200078bc 	.word	0x200078bc

08001350 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00c      	beq.n	800137a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff facb 	bl	80008fc <getBlockSize>
 8001366:	4603      	mov	r3, r0
 8001368:	4a06      	ldr	r2, [pc, #24]	; (8001384 <microros_deallocate+0x34>)
 800136a:	6812      	ldr	r2, [r2, #0]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	461a      	mov	r2, r3
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <microros_deallocate+0x34>)
 8001372:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fa63 	bl	8000840 <vPortFreeMicroROS>
  }
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200078bc 	.word	0x200078bc

08001388 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001394:	4b15      	ldr	r3, [pc, #84]	; (80013ec <microros_reallocate+0x64>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	4413      	add	r3, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <microros_reallocate+0x64>)
 80013a2:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <microros_reallocate+0x68>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	461a      	mov	r2, r3
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	4413      	add	r3, r2
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <microros_reallocate+0x68>)
 80013b2:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d104      	bne.n	80013c4 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80013ba:	68b8      	ldr	r0, [r7, #8]
 80013bc:	f7ff f976 	bl	80006ac <pvPortMallocMicroROS>
 80013c0:	4603      	mov	r3, r0
 80013c2:	e00e      	b.n	80013e2 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7ff fa99 	bl	80008fc <getBlockSize>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <microros_reallocate+0x68>)
 80013ce:	6812      	ldr	r2, [r2, #0]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <microros_reallocate+0x68>)
 80013d6:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80013d8:	68b9      	ldr	r1, [r7, #8]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff faac 	bl	8000938 <pvPortReallocMicroROS>
 80013e0:	4603      	mov	r3, r0
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200078b8 	.word	0x200078b8
 80013f0:	200078bc 	.word	0x200078bc

080013f4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <microros_zero_allocate+0x48>)
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	4413      	add	r3, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4b0a      	ldr	r3, [pc, #40]	; (800143c <microros_zero_allocate+0x48>)
 8001412:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	fb02 f303 	mul.w	r3, r2, r3
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <microros_zero_allocate+0x4c>)
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	4413      	add	r3, r2
 8001422:	461a      	mov	r2, r3
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <microros_zero_allocate+0x4c>)
 8001426:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f7ff fab1 	bl	8000992 <pvPortCallocMicroROS>
 8001430:	4603      	mov	r3, r0
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200078b8 	.word	0x200078b8
 8001440:	200078bc 	.word	0x200078bc
 8001444:	00000000 	.word	0x00000000

08001448 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001448:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800145a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800145e:	a320      	add	r3, pc, #128	; (adr r3, 80014e0 <UTILS_NanosecondsToTimespec+0x98>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7fe ff54 	bl	8000310 <__aeabi_ldivmod>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	6879      	ldr	r1, [r7, #4]
 800146e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001476:	a31a      	add	r3, pc, #104	; (adr r3, 80014e0 <UTILS_NanosecondsToTimespec+0x98>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7fe ff48 	bl	8000310 <__aeabi_ldivmod>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	2b00      	cmp	r3, #0
 800148a:	da20      	bge.n	80014ce <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <UTILS_NanosecondsToTimespec+0x90>)
 8001492:	fb82 1203 	smull	r1, r2, r2, r3
 8001496:	1712      	asrs	r2, r2, #28
 8001498:	17db      	asrs	r3, r3, #31
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	6979      	ldr	r1, [r7, #20]
 80014a8:	17c8      	asrs	r0, r1, #31
 80014aa:	460c      	mov	r4, r1
 80014ac:	4605      	mov	r5, r0
 80014ae:	ebb2 0804 	subs.w	r8, r2, r4
 80014b2:	eb63 0905 	sbc.w	r9, r3, r5
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	4906      	ldr	r1, [pc, #24]	; (80014dc <UTILS_NanosecondsToTimespec+0x94>)
 80014c4:	fb01 f303 	mul.w	r3, r1, r3
 80014c8:	441a      	add	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	609a      	str	r2, [r3, #8]
    }
}
 80014ce:	bf00      	nop
 80014d0:	3718      	adds	r7, #24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80014d8:	44b82fa1 	.word	0x44b82fa1
 80014dc:	3b9aca00 	.word	0x3b9aca00
 80014e0:	3b9aca00 	.word	0x3b9aca00
 80014e4:	00000000 	.word	0x00000000

080014e8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80014e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014ec:	b08e      	sub	sp, #56	; 0x38
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6278      	str	r0, [r7, #36]	; 0x24
 80014f2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80014f4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014f8:	2300      	movs	r3, #0
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 800150a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150e:	4618      	mov	r0, r3
 8001510:	f00a fcc8 	bl	800bea4 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001516:	17da      	asrs	r2, r3, #31
 8001518:	61bb      	str	r3, [r7, #24]
 800151a:	61fa      	str	r2, [r7, #28]
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	69b9      	ldr	r1, [r7, #24]
 8001526:	000b      	movs	r3, r1
 8001528:	2200      	movs	r2, #0
 800152a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 800152e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001530:	2200      	movs	r2, #0
 8001532:	461c      	mov	r4, r3
 8001534:	4615      	mov	r5, r2
 8001536:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800153a:	1911      	adds	r1, r2, r4
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	416b      	adcs	r3, r5
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001546:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 800154a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	f04f 0400 	mov.w	r4, #0
 8001556:	f04f 0500 	mov.w	r5, #0
 800155a:	015d      	lsls	r5, r3, #5
 800155c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001560:	0154      	lsls	r4, r2, #5
 8001562:	4622      	mov	r2, r4
 8001564:	462b      	mov	r3, r5
 8001566:	ebb2 0800 	subs.w	r8, r2, r0
 800156a:	eb63 0901 	sbc.w	r9, r3, r1
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800157a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800157e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001582:	4690      	mov	r8, r2
 8001584:	4699      	mov	r9, r3
 8001586:	eb18 0a00 	adds.w	sl, r8, r0
 800158a:	eb49 0b01 	adc.w	fp, r9, r1
 800158e:	f04f 0200 	mov.w	r2, #0
 8001592:	f04f 0300 	mov.w	r3, #0
 8001596:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800159a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800159e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015a2:	ebb2 040a 	subs.w	r4, r2, sl
 80015a6:	603c      	str	r4, [r7, #0]
 80015a8:	eb63 030b 	sbc.w	r3, r3, fp
 80015ac:	607b      	str	r3, [r7, #4]
 80015ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015b2:	4623      	mov	r3, r4
 80015b4:	181b      	adds	r3, r3, r0
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	462b      	mov	r3, r5
 80015ba:	eb41 0303 	adc.w	r3, r1, r3
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	6a3a      	ldr	r2, [r7, #32]
 80015c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80015c6:	f7ff ff3f 	bl	8001448 <UTILS_NanosecondsToTimespec>

    return 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	3738      	adds	r7, #56	; 0x38
 80015d0:	46bd      	mov	sp, r7
 80015d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080015d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_MspInit+0x4c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_MspInit+0x4c>)
 80015fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001600:	6453      	str	r3, [r2, #68]	; 0x44
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <HAL_MspInit+0x4c>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800160e:	2200      	movs	r2, #0
 8001610:	210f      	movs	r1, #15
 8001612:	f06f 0001 	mvn.w	r0, #1
 8001616:	f000 fbcb 	bl	8001db0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <HAL_InitTick+0xd0>)
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	4a2e      	ldr	r2, [pc, #184]	; (80016f8 <HAL_InitTick+0xd0>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6453      	str	r3, [r2, #68]	; 0x44
 8001644:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <HAL_InitTick+0xd0>)
 8001646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001650:	f107 020c 	add.w	r2, r7, #12
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f93a 	bl	80048d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001660:	f003 f924 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8001664:	4603      	mov	r3, r0
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	4a23      	ldr	r2, [pc, #140]	; (80016fc <HAL_InitTick+0xd4>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	0c9b      	lsrs	r3, r3, #18
 8001674:	3b01      	subs	r3, #1
 8001676:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001678:	4b21      	ldr	r3, [pc, #132]	; (8001700 <HAL_InitTick+0xd8>)
 800167a:	4a22      	ldr	r2, [pc, #136]	; (8001704 <HAL_InitTick+0xdc>)
 800167c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800167e:	4b20      	ldr	r3, [pc, #128]	; (8001700 <HAL_InitTick+0xd8>)
 8001680:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001684:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001686:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <HAL_InitTick+0xd8>)
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800168c:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <HAL_InitTick+0xd8>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_InitTick+0xd8>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001698:	4b19      	ldr	r3, [pc, #100]	; (8001700 <HAL_InitTick+0xd8>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800169e:	4818      	ldr	r0, [pc, #96]	; (8001700 <HAL_InitTick+0xd8>)
 80016a0:	f003 fd72 	bl	8005188 <HAL_TIM_Base_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80016aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d11b      	bne.n	80016ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80016b2:	4813      	ldr	r0, [pc, #76]	; (8001700 <HAL_InitTick+0xd8>)
 80016b4:	f003 fdca 	bl	800524c <HAL_TIM_Base_Start_IT>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80016be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d111      	bne.n	80016ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80016c6:	2019      	movs	r0, #25
 80016c8:	f000 fb8e 	bl	8001de8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	d808      	bhi.n	80016e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80016d2:	2200      	movs	r2, #0
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	2019      	movs	r0, #25
 80016d8:	f000 fb6a 	bl	8001db0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_InitTick+0xe0>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e002      	b.n	80016ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80016ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3730      	adds	r7, #48	; 0x30
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40023800 	.word	0x40023800
 80016fc:	431bde83 	.word	0x431bde83
 8001700:	200078c0 	.word	0x200078c0
 8001704:	40010000 	.word	0x40010000
 8001708:	20000008 	.word	0x20000008

0800170c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001710:	e7fe      	b.n	8001710 <NMI_Handler+0x4>

08001712 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001716:	e7fe      	b.n	8001716 <HardFault_Handler+0x4>

08001718 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800171c:	e7fe      	b.n	800171c <MemManage_Handler+0x4>

0800171e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001722:	e7fe      	b.n	8001722 <BusFault_Handler+0x4>

08001724 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <UsageFault_Handler+0x4>

0800172a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA1_Stream1_IRQHandler+0x10>)
 800173e:	f000 fd01 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000799c 	.word	0x2000799c

0800174c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <DMA1_Stream3_IRQHandler+0x10>)
 8001752:	f000 fcf7 	bl	8002144 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200079fc 	.word	0x200079fc

08001760 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001764:	4802      	ldr	r0, [pc, #8]	; (8001770 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001766:	f003 fde9 	bl	800533c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200078c0 	.word	0x200078c0

08001774 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <USART3_IRQHandler+0x10>)
 800177a:	f004 f985 	bl	8005a88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20007914 	.word	0x20007914

08001788 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <OTG_FS_IRQHandler+0x10>)
 800178e:	f001 fa5a 	bl	8002c46 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	2000d888 	.word	0x2000d888

0800179c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_kill>:

int _kill(int pid, int sig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017b6:	f01a febd 	bl	801c534 <__errno>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2216      	movs	r2, #22
 80017be:	601a      	str	r2, [r3, #0]
  return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_exit>:

void _exit (int status)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80017de:	e7fe      	b.n	80017de <_exit+0x12>

080017e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e00a      	b.n	8001808 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017f2:	f3af 8000 	nop.w
 80017f6:	4601      	mov	r1, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf0      	blt.n	80017f2 <_read+0x12>
  }

  return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e009      	b.n	8001840 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbf1      	blt.n	800182c <_write+0x12>
  }
  return len;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_close>:

int _close(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187a:	605a      	str	r2, [r3, #4]
  return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_isatty>:

int _isatty(int file)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f01a fe22 	bl	801c534 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20080000 	.word	0x20080000
 800191c:	00000400 	.word	0x00000400
 8001920:	20007910 	.word	0x20007910
 8001924:	20012c00 	.word	0x20012c00

08001928 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <SystemInit+0x20>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <SystemInit+0x20>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001952:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <MX_USART3_UART_Init+0x5c>)
 8001954:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800195c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART3_UART_Init+0x58>)
 8001990:	f003 feda 	bl	8005748 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800199a:	f7ff fcb1 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20007914 	.word	0x20007914
 80019a8:	40004800 	.word	0x40004800

080019ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b0ae      	sub	sp, #184	; 0xb8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2290      	movs	r2, #144	; 0x90
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f01a fd1d 	bl	801c40c <memset>
  if(uartHandle->Instance==USART3)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a56      	ldr	r2, [pc, #344]	; (8001b30 <HAL_UART_MspInit+0x184>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	f040 80a4 	bne.w	8001b26 <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019e2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 ffa3 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80019f8:	f7ff fc82 	bl	8001300 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <HAL_UART_MspInit+0x188>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <HAL_UART_MspInit+0x188>)
 8001a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a06:	6413      	str	r3, [r2, #64]	; 0x40
 8001a08:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_UART_MspInit+0x188>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a14:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_UART_MspInit+0x188>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	4a46      	ldr	r2, [pc, #280]	; (8001b34 <HAL_UART_MspInit+0x188>)
 8001a1a:	f043 0308 	orr.w	r3, r3, #8
 8001a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a20:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_UART_MspInit+0x188>)
 8001a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a46:	2307      	movs	r3, #7
 8001a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a50:	4619      	mov	r1, r3
 8001a52:	4839      	ldr	r0, [pc, #228]	; (8001b38 <HAL_UART_MspInit+0x18c>)
 8001a54:	f000 fdec 	bl	8002630 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001a58:	4b38      	ldr	r3, [pc, #224]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a5a:	4a39      	ldr	r2, [pc, #228]	; (8001b40 <HAL_UART_MspInit+0x194>)
 8001a5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001a5e:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a64:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a66:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a6c:	4b33      	ldr	r3, [pc, #204]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a78:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a7a:	4b30      	ldr	r3, [pc, #192]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a8c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a90:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a94:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a96:	4b29      	ldr	r3, [pc, #164]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001a9c:	4827      	ldr	r0, [pc, #156]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001a9e:	f000 f9b1 	bl	8001e04 <HAL_DMA_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001aa8:	f7ff fc2a 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a23      	ldr	r2, [pc, #140]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001ab0:	675a      	str	r2, [r3, #116]	; 0x74
 8001ab2:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_UART_MspInit+0x190>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001ab8:	4b22      	ldr	r3, [pc, #136]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001aba:	4a23      	ldr	r2, [pc, #140]	; (8001b48 <HAL_UART_MspInit+0x19c>)
 8001abc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001ac0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ac4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ac6:	4b1f      	ldr	r3, [pc, #124]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001ac8:	2240      	movs	r2, #64	; 0x40
 8001aca:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001acc:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ad2:	4b1c      	ldr	r3, [pc, #112]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ada:	4b1a      	ldr	r3, [pc, #104]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001aee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001af2:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001afa:	4812      	ldr	r0, [pc, #72]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001afc:	f000 f982 	bl	8001e04 <HAL_DMA_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001b06:	f7ff fbfb 	bl	8001300 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001b0e:	671a      	str	r2, [r3, #112]	; 0x70
 8001b10:	4a0c      	ldr	r2, [pc, #48]	; (8001b44 <HAL_UART_MspInit+0x198>)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2105      	movs	r1, #5
 8001b1a:	2027      	movs	r0, #39	; 0x27
 8001b1c:	f000 f948 	bl	8001db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b20:	2027      	movs	r0, #39	; 0x27
 8001b22:	f000 f961 	bl	8001de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	37b8      	adds	r7, #184	; 0xb8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40004800 	.word	0x40004800
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40020c00 	.word	0x40020c00
 8001b3c:	2000799c 	.word	0x2000799c
 8001b40:	40026028 	.word	0x40026028
 8001b44:	200079fc 	.word	0x200079fc
 8001b48:	40026058 	.word	0x40026058

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b50:	480d      	ldr	r0, [pc, #52]	; (8001b88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b54:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b58:	e002      	b.n	8001b60 <LoopCopyDataInit>

08001b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b5e:	3304      	adds	r3, #4

08001b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b64:	d3f9      	bcc.n	8001b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b66:	4a0b      	ldr	r2, [pc, #44]	; (8001b94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b68:	4c0b      	ldr	r4, [pc, #44]	; (8001b98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b6c:	e001      	b.n	8001b72 <LoopFillZerobss>

08001b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b70:	3204      	adds	r2, #4

08001b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b74:	d3fb      	bcc.n	8001b6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b76:	f7ff fed7 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f01a fce1 	bl	801c540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7ff fb31 	bl	80011e4 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b84:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	200004d8 	.word	0x200004d8
  ldr r2, =_sidata
 8001b90:	0801e7d8 	.word	0x0801e7d8
  ldr r2, =_sbss
 8001b94:	200004d8 	.word	0x200004d8
  ldr r4, =_ebss
 8001b98:	20012c00 	.word	0x20012c00

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>

08001b9e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba2:	2003      	movs	r0, #3
 8001ba4:	f000 f8f9 	bl	8001d9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ba8:	200f      	movs	r0, #15
 8001baa:	f7ff fd3d 	bl	8001628 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bae:	f7ff fd13 	bl	80015d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x20>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x24>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	4a04      	ldr	r2, [pc, #16]	; (8001bdc <HAL_IncTick+0x24>)
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	2000000c 	.word	0x2000000c
 8001bdc:	20007a5c 	.word	0x20007a5c

08001be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <HAL_GetTick+0x14>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	20007a5c 	.word	0x20007a5c

08001bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c00:	f7ff ffee 	bl	8001be0 <HAL_GetTick>
 8001c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c10:	d005      	beq.n	8001c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_Delay+0x44>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	461a      	mov	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1e:	bf00      	nop
 8001c20:	f7ff ffde 	bl	8001be0 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d8f7      	bhi.n	8001c20 <HAL_Delay+0x28>
  {
  }
}
 8001c30:	bf00      	nop
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	2000000c 	.word	0x2000000c

08001c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c50:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <__NVIC_SetPriorityGrouping+0x40>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x40>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00
 8001c84:	05fa0000 	.word	0x05fa0000

08001c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c8c:	4b04      	ldr	r3, [pc, #16]	; (8001ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	0a1b      	lsrs	r3, r3, #8
 8001c92:	f003 0307 	and.w	r3, r3, #7
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0b      	blt.n	8001cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f003 021f 	and.w	r2, r3, #31
 8001cbc:	4907      	ldr	r1, [pc, #28]	; (8001cdc <__NVIC_EnableIRQ+0x38>)
 8001cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc2:	095b      	lsrs	r3, r3, #5
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8001cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100

08001ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	db0a      	blt.n	8001d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	490c      	ldr	r1, [pc, #48]	; (8001d2c <__NVIC_SetPriority+0x4c>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	0112      	lsls	r2, r2, #4
 8001d00:	b2d2      	uxtb	r2, r2
 8001d02:	440b      	add	r3, r1
 8001d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d08:	e00a      	b.n	8001d20 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4908      	ldr	r1, [pc, #32]	; (8001d30 <__NVIC_SetPriority+0x50>)
 8001d10:	79fb      	ldrb	r3, [r7, #7]
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	3b04      	subs	r3, #4
 8001d18:	0112      	lsls	r2, r2, #4
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	761a      	strb	r2, [r3, #24]
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e100 	.word	0xe000e100
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	; 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f1c3 0307 	rsb	r3, r3, #7
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	bf28      	it	cs
 8001d52:	2304      	movcs	r3, #4
 8001d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	3304      	adds	r3, #4
 8001d5a:	2b06      	cmp	r3, #6
 8001d5c:	d902      	bls.n	8001d64 <NVIC_EncodePriority+0x30>
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3b03      	subs	r3, #3
 8001d62:	e000      	b.n	8001d66 <NVIC_EncodePriority+0x32>
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43da      	mvns	r2, r3
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	401a      	ands	r2, r3
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa01 f303 	lsl.w	r3, r1, r3
 8001d86:	43d9      	mvns	r1, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d8c:	4313      	orrs	r3, r2
         );
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3724      	adds	r7, #36	; 0x24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff4c 	bl	8001c40 <__NVIC_SetPriorityGrouping>
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	4603      	mov	r3, r0
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc2:	f7ff ff61 	bl	8001c88 <__NVIC_GetPriorityGrouping>
 8001dc6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	68b9      	ldr	r1, [r7, #8]
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f7ff ffb1 	bl	8001d34 <NVIC_EncodePriority>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd8:	4611      	mov	r1, r2
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff ff80 	bl	8001ce0 <__NVIC_SetPriority>
}
 8001de0:	bf00      	nop
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff54 	bl	8001ca4 <__NVIC_EnableIRQ>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e10:	f7ff fee6 	bl	8001be0 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e099      	b.n	8001f54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0201 	bic.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e40:	e00f      	b.n	8001e62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e42:	f7ff fecd 	bl	8001be0 <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b05      	cmp	r3, #5
 8001e4e:	d908      	bls.n	8001e62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2220      	movs	r2, #32
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2203      	movs	r2, #3
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e078      	b.n	8001f54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e8      	bne.n	8001e42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	4b38      	ldr	r3, [pc, #224]	; (8001f5c <HAL_DMA_Init+0x158>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ea6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a1b      	ldr	r3, [r3, #32]
 8001eac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	2b04      	cmp	r3, #4
 8001eba:	d107      	bne.n	8001ecc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f023 0307 	bic.w	r3, r3, #7
 8001ee2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d117      	bne.n	8001f26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00e      	beq.n	8001f26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fb15 	bl	8002538 <DMA_CheckFifoParam>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2240      	movs	r2, #64	; 0x40
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f22:	2301      	movs	r3, #1
 8001f24:	e016      	b.n	8001f54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 facc 	bl	80024cc <DMA_CalcBaseAndBitshift>
 8001f34:	4603      	mov	r3, r0
 8001f36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	223f      	movs	r2, #63	; 0x3f
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	e010803f 	.word	0xe010803f

08001f60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_DMA_Start_IT+0x26>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e048      	b.n	8002018 <HAL_DMA_Start_IT+0xb8>
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d137      	bne.n	800200a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fa5e 	bl	8002470 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fb8:	223f      	movs	r2, #63	; 0x3f
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0216 	orr.w	r2, r2, #22
 8001fce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	695a      	ldr	r2, [r3, #20]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fde:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0208 	orr.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0201 	orr.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	e005      	b.n	8002016 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002012:	2302      	movs	r3, #2
 8002014:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002016:	7dfb      	ldrb	r3, [r7, #23]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800202e:	f7ff fdd7 	bl	8001be0 <HAL_GetTick>
 8002032:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d008      	beq.n	8002052 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2280      	movs	r2, #128	; 0x80
 8002044:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e052      	b.n	80020f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0216 	bic.w	r2, r2, #22
 8002060:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695a      	ldr	r2, [r3, #20]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002070:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d103      	bne.n	8002082 <HAL_DMA_Abort+0x62>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207e:	2b00      	cmp	r3, #0
 8002080:	d007      	beq.n	8002092 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0208 	bic.w	r2, r2, #8
 8002090:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0201 	bic.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020a2:	e013      	b.n	80020cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020a4:	f7ff fd9c 	bl	8001be0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b05      	cmp	r3, #5
 80020b0:	d90c      	bls.n	80020cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2220      	movs	r2, #32
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2203      	movs	r2, #3
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e015      	b.n	80020f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1e4      	bne.n	80020a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020de:	223f      	movs	r2, #63	; 0x3f
 80020e0:	409a      	lsls	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d004      	beq.n	800211e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2280      	movs	r2, #128	; 0x80
 8002118:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e00c      	b.n	8002138 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2205      	movs	r2, #5
 8002122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f022 0201 	bic.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002150:	4b8e      	ldr	r3, [pc, #568]	; (800238c <HAL_DMA_IRQHandler+0x248>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a8e      	ldr	r2, [pc, #568]	; (8002390 <HAL_DMA_IRQHandler+0x24c>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	0a9b      	lsrs	r3, r3, #10
 800215c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	2208      	movs	r2, #8
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4013      	ands	r3, r2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01a      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0304 	and.w	r3, r3, #4
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0204 	bic.w	r2, r2, #4
 8002196:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800219c:	2208      	movs	r2, #8
 800219e:	409a      	lsls	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b4:	2201      	movs	r2, #1
 80021b6:	409a      	lsls	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	4013      	ands	r3, r2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d012      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00b      	beq.n	80021e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d2:	2201      	movs	r2, #1
 80021d4:	409a      	lsls	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021de:	f043 0202 	orr.w	r2, r3, #2
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2204      	movs	r2, #4
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d012      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00b      	beq.n	800221c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002208:	2204      	movs	r2, #4
 800220a:	409a      	lsls	r2, r3
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	f043 0204 	orr.w	r2, r3, #4
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	2210      	movs	r2, #16
 8002222:	409a      	lsls	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4013      	ands	r3, r2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d043      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03c      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	2210      	movs	r2, #16
 8002240:	409a      	lsls	r2, r3
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d018      	beq.n	8002286 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d108      	bne.n	8002274 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	2b00      	cmp	r3, #0
 8002268:	d024      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	4798      	blx	r3
 8002272:	e01f      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01b      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	4798      	blx	r3
 8002284:	e016      	b.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d107      	bne.n	80022a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0208 	bic.w	r2, r2, #8
 80022a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d003      	beq.n	80022b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	2220      	movs	r2, #32
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4013      	ands	r3, r2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 808f 	beq.w	80023e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8087 	beq.w	80023e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2220      	movs	r2, #32
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d136      	bne.n	800235c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0216 	bic.w	r2, r2, #22
 80022fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800230c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_DMA_IRQHandler+0x1da>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800231a:	2b00      	cmp	r3, #0
 800231c:	d007      	beq.n	800232e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0208 	bic.w	r2, r2, #8
 800232c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002332:	223f      	movs	r2, #63	; 0x3f
 8002334:	409a      	lsls	r2, r3
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	2b00      	cmp	r3, #0
 8002350:	d07e      	beq.n	8002450 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	4798      	blx	r3
        }
        return;
 800235a:	e079      	b.n	8002450 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d01d      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10d      	bne.n	8002394 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	2b00      	cmp	r3, #0
 800237e:	d031      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	4798      	blx	r3
 8002388:	e02c      	b.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
 800238a:	bf00      	nop
 800238c:	20000004 	.word	0x20000004
 8002390:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002398:	2b00      	cmp	r3, #0
 800239a:	d023      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e01e      	b.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10f      	bne.n	80023d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0210 	bic.w	r2, r2, #16
 80023c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d003      	beq.n	80023e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d032      	beq.n	8002452 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d022      	beq.n	800243e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2205      	movs	r2, #5
 80023fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	3301      	adds	r3, #1
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	d307      	bcc.n	800242c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f2      	bne.n	8002410 <HAL_DMA_IRQHandler+0x2cc>
 800242a:	e000      	b.n	800242e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800242c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
 800244e:	e000      	b.n	8002452 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002450:	bf00      	nop
    }
  }
}
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002464:	4618      	mov	r0, r3
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800248c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	d108      	bne.n	80024b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024ae:	e007      	b.n	80024c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	60da      	str	r2, [r3, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	3b10      	subs	r3, #16
 80024dc:	4a13      	ldr	r2, [pc, #76]	; (800252c <DMA_CalcBaseAndBitshift+0x60>)
 80024de:	fba2 2303 	umull	r2, r3, r2, r3
 80024e2:	091b      	lsrs	r3, r3, #4
 80024e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024e6:	4a12      	ldr	r2, [pc, #72]	; (8002530 <DMA_CalcBaseAndBitshift+0x64>)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4413      	add	r3, r2
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d908      	bls.n	800250c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <DMA_CalcBaseAndBitshift+0x68>)
 8002502:	4013      	ands	r3, r2
 8002504:	1d1a      	adds	r2, r3, #4
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	659a      	str	r2, [r3, #88]	; 0x58
 800250a:	e006      	b.n	800251a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <DMA_CalcBaseAndBitshift+0x68>)
 8002514:	4013      	ands	r3, r2
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	aaaaaaab 	.word	0xaaaaaaab
 8002530:	0801d404 	.word	0x0801d404
 8002534:	fffffc00 	.word	0xfffffc00

08002538 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d11f      	bne.n	8002592 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2b03      	cmp	r3, #3
 8002556:	d856      	bhi.n	8002606 <DMA_CheckFifoParam+0xce>
 8002558:	a201      	add	r2, pc, #4	; (adr r2, 8002560 <DMA_CheckFifoParam+0x28>)
 800255a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255e:	bf00      	nop
 8002560:	08002571 	.word	0x08002571
 8002564:	08002583 	.word	0x08002583
 8002568:	08002571 	.word	0x08002571
 800256c:	08002607 	.word	0x08002607
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d046      	beq.n	800260a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002580:	e043      	b.n	800260a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800258a:	d140      	bne.n	800260e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002590:	e03d      	b.n	800260e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259a:	d121      	bne.n	80025e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d837      	bhi.n	8002612 <DMA_CheckFifoParam+0xda>
 80025a2:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <DMA_CheckFifoParam+0x70>)
 80025a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025bf 	.word	0x080025bf
 80025b0:	080025b9 	.word	0x080025b9
 80025b4:	080025d1 	.word	0x080025d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	73fb      	strb	r3, [r7, #15]
      break;
 80025bc:	e030      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d025      	beq.n	8002616 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025ca:	2301      	movs	r3, #1
 80025cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ce:	e022      	b.n	8002616 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025d8:	d11f      	bne.n	800261a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025de:	e01c      	b.n	800261a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d903      	bls.n	80025ee <DMA_CheckFifoParam+0xb6>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d003      	beq.n	80025f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025ec:	e018      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	73fb      	strb	r3, [r7, #15]
      break;
 80025f2:	e015      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00e      	beq.n	800261e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	73fb      	strb	r3, [r7, #15]
      break;
 8002604:	e00b      	b.n	800261e <DMA_CheckFifoParam+0xe6>
      break;
 8002606:	bf00      	nop
 8002608:	e00a      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 800260a:	bf00      	nop
 800260c:	e008      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 800260e:	bf00      	nop
 8002610:	e006      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 8002612:	bf00      	nop
 8002614:	e004      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 8002616:	bf00      	nop
 8002618:	e002      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;   
 800261a:	bf00      	nop
 800261c:	e000      	b.n	8002620 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
    }
  } 
  
  return status; 
 8002620:	7bfb      	ldrb	r3, [r7, #15]
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop

08002630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e175      	b.n	800293c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002650:	2201      	movs	r2, #1
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	fa02 f303 	lsl.w	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002664:	693a      	ldr	r2, [r7, #16]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	429a      	cmp	r2, r3
 800266a:	f040 8164 	bne.w	8002936 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b01      	cmp	r3, #1
 8002678:	d005      	beq.n	8002686 <HAL_GPIO_Init+0x56>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d130      	bne.n	80026e8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	2203      	movs	r2, #3
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4013      	ands	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	fa02 f303 	lsl.w	r3, r2, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026bc:	2201      	movs	r2, #1
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	091b      	lsrs	r3, r3, #4
 80026d2:	f003 0201 	and.w	r2, r3, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	4313      	orrs	r3, r2
 80026e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d017      	beq.n	8002724 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	69ba      	ldr	r2, [r7, #24]
 800271a:	4313      	orrs	r3, r2
 800271c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d123      	bne.n	8002778 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	08da      	lsrs	r2, r3, #3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3208      	adds	r2, #8
 8002738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f003 0307 	and.w	r3, r3, #7
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	691a      	ldr	r2, [r3, #16]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	08da      	lsrs	r2, r3, #3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3208      	adds	r2, #8
 8002772:	69b9      	ldr	r1, [r7, #24]
 8002774:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	2203      	movs	r2, #3
 8002784:	fa02 f303 	lsl.w	r3, r2, r3
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f003 0203 	and.w	r2, r3, #3
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	69ba      	ldr	r2, [r7, #24]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 80be 	beq.w	8002936 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	4b66      	ldr	r3, [pc, #408]	; (8002954 <HAL_GPIO_Init+0x324>)
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4a65      	ldr	r2, [pc, #404]	; (8002954 <HAL_GPIO_Init+0x324>)
 80027c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027c4:	6453      	str	r3, [r2, #68]	; 0x44
 80027c6:	4b63      	ldr	r3, [pc, #396]	; (8002954 <HAL_GPIO_Init+0x324>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027d2:	4a61      	ldr	r2, [pc, #388]	; (8002958 <HAL_GPIO_Init+0x328>)
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	089b      	lsrs	r3, r3, #2
 80027d8:	3302      	adds	r3, #2
 80027da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027de:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 0303 	and.w	r3, r3, #3
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	220f      	movs	r2, #15
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43db      	mvns	r3, r3
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4013      	ands	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a58      	ldr	r2, [pc, #352]	; (800295c <HAL_GPIO_Init+0x32c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d037      	beq.n	800286e <HAL_GPIO_Init+0x23e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a57      	ldr	r2, [pc, #348]	; (8002960 <HAL_GPIO_Init+0x330>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d031      	beq.n	800286a <HAL_GPIO_Init+0x23a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a56      	ldr	r2, [pc, #344]	; (8002964 <HAL_GPIO_Init+0x334>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d02b      	beq.n	8002866 <HAL_GPIO_Init+0x236>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a55      	ldr	r2, [pc, #340]	; (8002968 <HAL_GPIO_Init+0x338>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d025      	beq.n	8002862 <HAL_GPIO_Init+0x232>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a54      	ldr	r2, [pc, #336]	; (800296c <HAL_GPIO_Init+0x33c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01f      	beq.n	800285e <HAL_GPIO_Init+0x22e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a53      	ldr	r2, [pc, #332]	; (8002970 <HAL_GPIO_Init+0x340>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d019      	beq.n	800285a <HAL_GPIO_Init+0x22a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a52      	ldr	r2, [pc, #328]	; (8002974 <HAL_GPIO_Init+0x344>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_GPIO_Init+0x226>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a51      	ldr	r2, [pc, #324]	; (8002978 <HAL_GPIO_Init+0x348>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00d      	beq.n	8002852 <HAL_GPIO_Init+0x222>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_GPIO_Init+0x34c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <HAL_GPIO_Init+0x21e>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a4f      	ldr	r2, [pc, #316]	; (8002980 <HAL_GPIO_Init+0x350>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d101      	bne.n	800284a <HAL_GPIO_Init+0x21a>
 8002846:	2309      	movs	r3, #9
 8002848:	e012      	b.n	8002870 <HAL_GPIO_Init+0x240>
 800284a:	230a      	movs	r3, #10
 800284c:	e010      	b.n	8002870 <HAL_GPIO_Init+0x240>
 800284e:	2308      	movs	r3, #8
 8002850:	e00e      	b.n	8002870 <HAL_GPIO_Init+0x240>
 8002852:	2307      	movs	r3, #7
 8002854:	e00c      	b.n	8002870 <HAL_GPIO_Init+0x240>
 8002856:	2306      	movs	r3, #6
 8002858:	e00a      	b.n	8002870 <HAL_GPIO_Init+0x240>
 800285a:	2305      	movs	r3, #5
 800285c:	e008      	b.n	8002870 <HAL_GPIO_Init+0x240>
 800285e:	2304      	movs	r3, #4
 8002860:	e006      	b.n	8002870 <HAL_GPIO_Init+0x240>
 8002862:	2303      	movs	r3, #3
 8002864:	e004      	b.n	8002870 <HAL_GPIO_Init+0x240>
 8002866:	2302      	movs	r3, #2
 8002868:	e002      	b.n	8002870 <HAL_GPIO_Init+0x240>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <HAL_GPIO_Init+0x240>
 800286e:	2300      	movs	r3, #0
 8002870:	69fa      	ldr	r2, [r7, #28]
 8002872:	f002 0203 	and.w	r2, r2, #3
 8002876:	0092      	lsls	r2, r2, #2
 8002878:	4093      	lsls	r3, r2
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002880:	4935      	ldr	r1, [pc, #212]	; (8002958 <HAL_GPIO_Init+0x328>)
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	089b      	lsrs	r3, r3, #2
 8002886:	3302      	adds	r3, #2
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288e:	4b3d      	ldr	r3, [pc, #244]	; (8002984 <HAL_GPIO_Init+0x354>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	43db      	mvns	r3, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4013      	ands	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028b2:	4a34      	ldr	r2, [pc, #208]	; (8002984 <HAL_GPIO_Init+0x354>)
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b8:	4b32      	ldr	r3, [pc, #200]	; (8002984 <HAL_GPIO_Init+0x354>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028dc:	4a29      	ldr	r2, [pc, #164]	; (8002984 <HAL_GPIO_Init+0x354>)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028e2:	4b28      	ldr	r3, [pc, #160]	; (8002984 <HAL_GPIO_Init+0x354>)
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002906:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <HAL_GPIO_Init+0x354>)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_GPIO_Init+0x354>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	43db      	mvns	r3, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4013      	ands	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <HAL_GPIO_Init+0x354>)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	3301      	adds	r3, #1
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	2b0f      	cmp	r3, #15
 8002940:	f67f ae86 	bls.w	8002650 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3724      	adds	r7, #36	; 0x24
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40013800 	.word	0x40013800
 800295c:	40020000 	.word	0x40020000
 8002960:	40020400 	.word	0x40020400
 8002964:	40020800 	.word	0x40020800
 8002968:	40020c00 	.word	0x40020c00
 800296c:	40021000 	.word	0x40021000
 8002970:	40021400 	.word	0x40021400
 8002974:	40021800 	.word	0x40021800
 8002978:	40021c00 	.word	0x40021c00
 800297c:	40022000 	.word	0x40022000
 8002980:	40022400 	.word	0x40022400
 8002984:	40013c00 	.word	0x40013c00

08002988 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	807b      	strh	r3, [r7, #2]
 8002994:	4613      	mov	r3, r2
 8002996:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002998:	787b      	ldrb	r3, [r7, #1]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800299e:	887a      	ldrh	r2, [r7, #2]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029a4:	e003      	b.n	80029ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	041a      	lsls	r2, r3, #16
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	619a      	str	r2, [r3, #24]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029bc:	b08f      	sub	sp, #60	; 0x3c
 80029be:	af0a      	add	r7, sp, #40	; 0x28
 80029c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e116      	b.n	8002bfa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f00a fe32 	bl	800d650 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2203      	movs	r2, #3
 80029f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f004 fb47 	bl	800709e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	687e      	ldr	r6, [r7, #4]
 8002a18:	466d      	mov	r5, sp
 8002a1a:	f106 0410 	add.w	r4, r6, #16
 8002a1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a2e:	1d33      	adds	r3, r6, #4
 8002a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a32:	6838      	ldr	r0, [r7, #0]
 8002a34:	f004 fa28 	bl	8006e88 <USB_CoreInit>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0d7      	b.n	8002bfa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4618      	mov	r0, r3
 8002a52:	f004 fb35 	bl	80070c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a56:	2300      	movs	r3, #0
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e04a      	b.n	8002af2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	333d      	adds	r3, #61	; 0x3d
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a70:	7bfa      	ldrb	r2, [r7, #15]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	333c      	adds	r3, #60	; 0x3c
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a84:	7bfa      	ldrb	r2, [r7, #15]
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	b298      	uxth	r0, r3
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	3344      	adds	r3, #68	; 0x44
 8002a98:	4602      	mov	r2, r0
 8002a9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a9c:	7bfa      	ldrb	r2, [r7, #15]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3340      	adds	r3, #64	; 0x40
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ab0:	7bfa      	ldrb	r2, [r7, #15]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	4413      	add	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	3348      	adds	r3, #72	; 0x48
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	334c      	adds	r3, #76	; 0x4c
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	4413      	add	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3354      	adds	r3, #84	; 0x54
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	3301      	adds	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
 8002af2:	7bfa      	ldrb	r2, [r7, #15]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d3af      	bcc.n	8002a5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
 8002b00:	e044      	b.n	8002b8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b14:	2200      	movs	r2, #0
 8002b16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b2e:	7bfa      	ldrb	r2, [r7, #15]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b44:	7bfa      	ldrb	r2, [r7, #15]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b5a:	7bfa      	ldrb	r2, [r7, #15]
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b70:	7bfa      	ldrb	r2, [r7, #15]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	4413      	add	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
 8002b8c:	7bfa      	ldrb	r2, [r7, #15]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3b5      	bcc.n	8002b02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	687e      	ldr	r6, [r7, #4]
 8002b9e:	466d      	mov	r5, sp
 8002ba0:	f106 0410 	add.w	r4, r6, #16
 8002ba4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bb4:	1d33      	adds	r3, r6, #4
 8002bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb8:	6838      	ldr	r0, [r7, #0]
 8002bba:	f004 facd 	bl	8007158 <USB_DevInit>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e014      	b.n	8002bfa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d102      	bne.n	8002bee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f001 f97b 	bl	8003ee4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f005 fc1b 	bl	800842e <USB_DevDisconnect>

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3714      	adds	r7, #20
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_PCD_Start+0x16>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e012      	b.n	8002c3e <HAL_PCD_Start+0x3c>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 fa29 	bl	800707c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f005 fbdc 	bl	80083ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c46:	b590      	push	{r4, r7, lr}
 8002c48:	b08d      	sub	sp, #52	; 0x34
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	6a3b      	ldr	r3, [r7, #32]
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f005 fc9a 	bl	8008596 <USB_GetMode>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f040 84b7 	bne.w	80035d8 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f005 fbfe 	bl	8008470 <USB_ReadInterrupts>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 84ad 	beq.w	80035d6 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f005 fbeb 	bl	8008470 <USB_ReadInterrupts>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d107      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f002 0202 	and.w	r2, r2, #2
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 fbd9 	bl	8008470 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b10      	cmp	r3, #16
 8002cc6:	d161      	bne.n	8002d8c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0210 	bic.w	r2, r2, #16
 8002cd6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002cd8:	6a3b      	ldr	r3, [r7, #32]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	f003 020f 	and.w	r2, r3, #15
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3304      	adds	r3, #4
 8002cf6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	0c5b      	lsrs	r3, r3, #17
 8002cfc:	f003 030f 	and.w	r3, r3, #15
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d124      	bne.n	8002d4e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d035      	beq.n	8002d7c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	6a38      	ldr	r0, [r7, #32]
 8002d24:	f005 fa10 	bl	8008148 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d34:	441a      	add	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d46:	441a      	add	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	621a      	str	r2, [r3, #32]
 8002d4c:	e016      	b.n	8002d7c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002d4e:	69bb      	ldr	r3, [r7, #24]
 8002d50:	0c5b      	lsrs	r3, r3, #17
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d110      	bne.n	8002d7c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d60:	2208      	movs	r2, #8
 8002d62:	4619      	mov	r1, r3
 8002d64:	6a38      	ldr	r0, [r7, #32]
 8002d66:	f005 f9ef 	bl	8008148 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	6a1a      	ldr	r2, [r3, #32]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d76:	441a      	add	r2, r3
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	699a      	ldr	r2, [r3, #24]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0210 	orr.w	r2, r2, #16
 8002d8a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f005 fb6d 	bl	8008470 <USB_ReadInterrupts>
 8002d96:	4603      	mov	r3, r0
 8002d98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d9c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002da0:	f040 80a7 	bne.w	8002ef2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f005 fb72 	bl	8008496 <USB_ReadDevAllOutEpInterrupt>
 8002db2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002db4:	e099      	b.n	8002eea <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 808e 	beq.w	8002ede <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	4611      	mov	r1, r2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f005 fb96 	bl	80084fe <USB_ReadDevOutEPInterrupt>
 8002dd2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f003 0301 	and.w	r3, r3, #1
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dea:	461a      	mov	r2, r3
 8002dec:	2301      	movs	r3, #1
 8002dee:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fef0 	bl	8003bd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00c      	beq.n	8002e1c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2308      	movs	r3, #8
 8002e12:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 ffc6 	bl	8003da8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	f003 0310 	and.w	r3, r3, #16
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	015a      	lsls	r2, r3, #5
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e32:	461a      	mov	r2, r3
 8002e34:	2310      	movs	r3, #16
 8002e36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d030      	beq.n	8002ea4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e4a:	2b80      	cmp	r3, #128	; 0x80
 8002e4c:	d109      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e60:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4413      	add	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	78db      	ldrb	r3, [r3, #3]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d108      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f00a fd03 	bl	800d898 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	015a      	lsls	r2, r3, #5
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	4413      	add	r3, r2
 8002e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	461a      	mov	r2, r3
 8002ebc:	2320      	movs	r3, #32
 8002ebe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002edc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f47f af62 	bne.w	8002db6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f005 faba 	bl	8008470 <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f06:	f040 80db 	bne.w	80030c0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f005 fadb 	bl	80084ca <USB_ReadDevAllInEpInterrupt>
 8002f14:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002f1a:	e0cd      	b.n	80030b8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80c2 	beq.w	80030ac <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f005 fb01 	bl	800853a <USB_ReadDevInEPInterrupt>
 8002f38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d057      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69f9      	ldr	r1, [r7, #28]
 8002f60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f64:	4013      	ands	r3, r2
 8002f66:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f74:	461a      	mov	r2, r3
 8002f76:	2301      	movs	r3, #1
 8002f78:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d132      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	4613      	mov	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	4413      	add	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	334c      	adds	r3, #76	; 0x4c
 8002f92:	6819      	ldr	r1, [r3, #0]
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f98:	4613      	mov	r3, r2
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4403      	add	r3, r0
 8002fa2:	3348      	adds	r3, #72	; 0x48
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4419      	add	r1, r3
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4403      	add	r3, r0
 8002fb6:	334c      	adds	r3, #76	; 0x4c
 8002fb8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d113      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x3a2>
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	4413      	add	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	3354      	adds	r3, #84	; 0x54
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d108      	bne.n	8002fe8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6818      	ldr	r0, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	f005 fb0a 	bl	80085fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	4619      	mov	r1, r3
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f00a fbcd 	bl	800d78e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	015a      	lsls	r2, r3, #5
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4413      	add	r3, r2
 8003006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300a:	461a      	mov	r2, r3
 800300c:	2308      	movs	r3, #8
 800300e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d008      	beq.n	800302c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	2310      	movs	r3, #16
 800302a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d008      	beq.n	8003048 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	4413      	add	r3, r2
 800303e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003042:	461a      	mov	r2, r3
 8003044:	2340      	movs	r3, #64	; 0x40
 8003046:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d023      	beq.n	800309a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003052:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003054:	6a38      	ldr	r0, [r7, #32]
 8003056:	f004 f9dd 	bl	8007414 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800305a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305c:	4613      	mov	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	4413      	add	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	3338      	adds	r3, #56	; 0x38
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	3304      	adds	r3, #4
 800306c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	78db      	ldrb	r3, [r3, #3]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d108      	bne.n	8003088 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	2200      	movs	r2, #0
 800307a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307e:	b2db      	uxtb	r3, r3
 8003080:	4619      	mov	r1, r3
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f00a fc1a 	bl	800d8bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003094:	461a      	mov	r2, r3
 8003096:	2302      	movs	r3, #2
 8003098:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80030a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 fd08 	bl	8003abc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ae:	3301      	adds	r3, #1
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f47f af2e 	bne.w	8002f1c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f005 f9d3 	bl	8008470 <USB_ReadInterrupts>
 80030ca:	4603      	mov	r3, r0
 80030cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030d4:	d122      	bne.n	800311c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e4:	f023 0301 	bic.w	r3, r3, #1
 80030e8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d108      	bne.n	8003106 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80030fc:	2100      	movs	r1, #0
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f00a fd94 	bl	800dc2c <HAL_PCDEx_LPM_Callback>
 8003104:	e002      	b.n	800310c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f00a fbb8 	bl	800d87c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800311a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4618      	mov	r0, r3
 8003122:	f005 f9a5 	bl	8008470 <USB_ReadInterrupts>
 8003126:	4603      	mov	r3, r0
 8003128:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800312c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003130:	d112      	bne.n	8003158 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d102      	bne.n	8003148 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f00a fb74 	bl	800d830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003156:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f005 f987 	bl	8008470 <USB_ReadInterrupts>
 8003162:	4603      	mov	r3, r0
 8003164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800316c:	d121      	bne.n	80031b2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695a      	ldr	r2, [r3, #20]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800317c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003184:	2b00      	cmp	r3, #0
 8003186:	d111      	bne.n	80031ac <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003196:	089b      	lsrs	r3, r3, #2
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80031a2:	2101      	movs	r1, #1
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f00a fd41 	bl	800dc2c <HAL_PCDEx_LPM_Callback>
 80031aa:	e002      	b.n	80031b2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f00a fb3f 	bl	800d830 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f005 f95a 	bl	8008470 <USB_ReadInterrupts>
 80031bc:	4603      	mov	r3, r0
 80031be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c6:	f040 80b7 	bne.w	8003338 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	69fa      	ldr	r2, [r7, #28]
 80031d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031d8:	f023 0301 	bic.w	r3, r3, #1
 80031dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2110      	movs	r1, #16
 80031e4:	4618      	mov	r0, r3
 80031e6:	f004 f915 	bl	8007414 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031ea:	2300      	movs	r3, #0
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031ee:	e046      	b.n	800327e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80031f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f2:	015a      	lsls	r2, r3, #5
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	4413      	add	r3, r2
 80031f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fc:	461a      	mov	r2, r3
 80031fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003202:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003214:	0151      	lsls	r1, r2, #5
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	440a      	add	r2, r1
 800321a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800321e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003222:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	4413      	add	r3, r2
 800322c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003230:	461a      	mov	r2, r3
 8003232:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003236:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003248:	0151      	lsls	r1, r2, #5
 800324a:	69fa      	ldr	r2, [r7, #28]
 800324c:	440a      	add	r2, r1
 800324e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003252:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003256:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	015a      	lsls	r2, r3, #5
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4413      	add	r3, r2
 8003260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003268:	0151      	lsls	r1, r2, #5
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	440a      	add	r2, r1
 800326e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003272:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003276:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327a:	3301      	adds	r3, #1
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003284:	429a      	cmp	r2, r3
 8003286:	d3b3      	bcc.n	80031f0 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	69fa      	ldr	r2, [r7, #28]
 8003292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003296:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800329a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d016      	beq.n	80032d2 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b4:	f043 030b 	orr.w	r3, r3, #11
 80032b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ca:	f043 030b 	orr.w	r3, r3, #11
 80032ce:	6453      	str	r3, [r2, #68]	; 0x44
 80032d0:	e015      	b.n	80032fe <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e0:	4619      	mov	r1, r3
 80032e2:	f242 032b 	movw	r3, #8235	; 0x202b
 80032e6:	4313      	orrs	r3, r2
 80032e8:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	69fa      	ldr	r2, [r7, #28]
 80032f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032f8:	f043 030b 	orr.w	r3, r3, #11
 80032fc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003310:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003322:	461a      	mov	r2, r3
 8003324:	f005 f96a 	bl	80085fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695a      	ldr	r2, [r3, #20]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f005 f897 	bl	8008470 <USB_ReadInterrupts>
 8003342:	4603      	mov	r3, r0
 8003344:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334c:	d124      	bne.n	8003398 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f005 f92e 	bl	80085b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f004 f8d6 	bl	800750e <USB_GetDevSpeed>
 8003362:	4603      	mov	r3, r0
 8003364:	461a      	mov	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681c      	ldr	r4, [r3, #0]
 800336e:	f001 fa7d 	bl	800486c <HAL_RCC_GetHCLKFreq>
 8003372:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
 800337c:	4620      	mov	r0, r4
 800337e:	f003 fddb 	bl	8006f38 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f00a fa2b 	bl	800d7de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	695a      	ldr	r2, [r3, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003396:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f005 f867 	bl	8008470 <USB_ReadInterrupts>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d10a      	bne.n	80033c2 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f00a fa08 	bl	800d7c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f002 0208 	and.w	r2, r2, #8
 80033c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 f852 	bl	8008470 <USB_ReadInterrupts>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d122      	bne.n	800341c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80033d6:	6a3b      	ldr	r3, [r7, #32]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80033e2:	2301      	movs	r3, #1
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	e014      	b.n	8003412 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d105      	bne.n	800340c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	b2db      	uxtb	r3, r3
 8003404:	4619      	mov	r1, r3
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fb27 	bl	8003a5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	3301      	adds	r3, #1
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003418:	429a      	cmp	r2, r3
 800341a:	d3e5      	bcc.n	80033e8 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f005 f825 	bl	8008470 <USB_ReadInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003430:	d13b      	bne.n	80034aa <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003432:	2301      	movs	r3, #1
 8003434:	627b      	str	r3, [r7, #36]	; 0x24
 8003436:	e02b      	b.n	8003490 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	015a      	lsls	r2, r3, #5
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003448:	6879      	ldr	r1, [r7, #4]
 800344a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3340      	adds	r3, #64	; 0x40
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d115      	bne.n	800348a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800345e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003460:	2b00      	cmp	r3, #0
 8003462:	da12      	bge.n	800348a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003468:	4613      	mov	r3, r2
 800346a:	00db      	lsls	r3, r3, #3
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	333f      	adds	r3, #63	; 0x3f
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003480:	b2db      	uxtb	r3, r3
 8003482:	4619      	mov	r1, r3
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fae8 	bl	8003a5a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	3301      	adds	r3, #1
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	429a      	cmp	r2, r3
 8003498:	d3ce      	bcc.n	8003438 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695a      	ldr	r2, [r3, #20]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f004 ffde 	bl	8008470 <USB_ReadInterrupts>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034be:	d155      	bne.n	800356c <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c0:	2301      	movs	r3, #1
 80034c2:	627b      	str	r3, [r7, #36]	; 0x24
 80034c4:	e045      	b.n	8003552 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	015a      	lsls	r2, r3, #5
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	4413      	add	r3, r2
 80034ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d12e      	bne.n	800354c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80034ee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da2b      	bge.n	800354c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003500:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003504:	429a      	cmp	r2, r3
 8003506:	d121      	bne.n	800354c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d10a      	bne.n	800354c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003548:	6053      	str	r3, [r2, #4]
            break;
 800354a:	e007      	b.n	800355c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	3301      	adds	r3, #1
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	429a      	cmp	r2, r3
 800355a:	d3b4      	bcc.n	80034c6 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800356a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f004 ff7d 	bl	8008470 <USB_ReadInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003580:	d10a      	bne.n	8003598 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f00a f9ac 	bl	800d8e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695a      	ldr	r2, [r3, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4618      	mov	r0, r3
 800359e:	f004 ff67 	bl	8008470 <USB_ReadInterrupts>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d115      	bne.n	80035d8 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f00a f99c 	bl	800d8fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6859      	ldr	r1, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
 80035d4:	e000      	b.n	80035d8 <HAL_PCD_IRQHandler+0x992>
      return;
 80035d6:	bf00      	nop
    }
  }
}
 80035d8:	3734      	adds	r7, #52	; 0x34
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}

080035de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
 80035e6:	460b      	mov	r3, r1
 80035e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_PCD_SetAddress+0x1a>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e013      	b.n	8003620 <HAL_PCD_SetAddress+0x42>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f004 fec5 	bl	80083a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	4608      	mov	r0, r1
 8003632:	4611      	mov	r1, r2
 8003634:	461a      	mov	r2, r3
 8003636:	4603      	mov	r3, r0
 8003638:	70fb      	strb	r3, [r7, #3]
 800363a:	460b      	mov	r3, r1
 800363c:	803b      	strh	r3, [r7, #0]
 800363e:	4613      	mov	r3, r2
 8003640:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003642:	2300      	movs	r3, #0
 8003644:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003646:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800364a:	2b00      	cmp	r3, #0
 800364c:	da0f      	bge.n	800366e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800364e:	78fb      	ldrb	r3, [r7, #3]
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	4613      	mov	r3, r2
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	3338      	adds	r3, #56	; 0x38
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	3304      	adds	r3, #4
 8003664:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	705a      	strb	r2, [r3, #1]
 800366c:	e00f      	b.n	800368e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	f003 020f 	and.w	r2, r3, #15
 8003674:	4613      	mov	r3, r2
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4413      	add	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	4413      	add	r3, r2
 8003684:	3304      	adds	r3, #4
 8003686:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	f003 030f 	and.w	r3, r3, #15
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800369a:	883a      	ldrh	r2, [r7, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	78ba      	ldrb	r2, [r7, #2]
 80036a4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	785b      	ldrb	r3, [r3, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d004      	beq.n	80036b8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036b8:	78bb      	ldrb	r3, [r7, #2]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d102      	bne.n	80036c4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_PCD_EP_Open+0xaa>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e00e      	b.n	80036f0 <HAL_PCD_EP_Open+0xc8>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 ff39 	bl	8007558 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80036ee:	7afb      	ldrb	r3, [r7, #11]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003704:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003708:	2b00      	cmp	r3, #0
 800370a:	da0f      	bge.n	800372c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370c:	78fb      	ldrb	r3, [r7, #3]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	4613      	mov	r3, r2
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	3338      	adds	r3, #56	; 0x38
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	4413      	add	r3, r2
 8003720:	3304      	adds	r3, #4
 8003722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	705a      	strb	r2, [r3, #1]
 800372a:	e00f      	b.n	800374c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	f003 020f 	and.w	r2, r3, #15
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	4413      	add	r3, r2
 8003742:	3304      	adds	r3, #4
 8003744:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800374c:	78fb      	ldrb	r3, [r7, #3]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	b2da      	uxtb	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_PCD_EP_Close+0x6e>
 8003762:	2302      	movs	r3, #2
 8003764:	e00e      	b.n	8003784 <HAL_PCD_EP_Close+0x8c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68f9      	ldr	r1, [r7, #12]
 8003774:	4618      	mov	r0, r3
 8003776:	f003 ff77 	bl	8007668 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3710      	adds	r7, #16
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	603b      	str	r3, [r7, #0]
 8003798:	460b      	mov	r3, r1
 800379a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800379c:	7afb      	ldrb	r3, [r7, #11]
 800379e:	f003 020f 	and.w	r2, r3, #15
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	4413      	add	r3, r2
 80037b2:	3304      	adds	r3, #4
 80037b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2200      	movs	r2, #0
 80037c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	2200      	movs	r2, #0
 80037cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037ce:	7afb      	ldrb	r3, [r7, #11]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d102      	bne.n	80037e8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037e8:	7afb      	ldrb	r3, [r7, #11]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d109      	bne.n	8003806 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	6979      	ldr	r1, [r7, #20]
 8003800:	f004 fa5e 	bl	8007cc0 <USB_EP0StartXfer>
 8003804:	e008      	b.n	8003818 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6818      	ldr	r0, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	461a      	mov	r2, r3
 8003812:	6979      	ldr	r1, [r7, #20]
 8003814:	f004 f804 	bl	8007820 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	f003 020f 	and.w	r2, r3, #15
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003844:	681b      	ldr	r3, [r3, #0]
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	460b      	mov	r3, r1
 8003860:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003862:	7afb      	ldrb	r3, [r7, #11]
 8003864:	f003 020f 	and.w	r2, r3, #15
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	3338      	adds	r3, #56	; 0x38
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	4413      	add	r3, r2
 8003876:	3304      	adds	r3, #4
 8003878:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2200      	movs	r2, #0
 800388a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2201      	movs	r2, #1
 8003890:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	f003 030f 	and.w	r3, r3, #15
 8003898:	b2da      	uxtb	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d102      	bne.n	80038ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038ac:	7afb      	ldrb	r3, [r7, #11]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	6979      	ldr	r1, [r7, #20]
 80038c4:	f004 f9fc 	bl	8007cc0 <USB_EP0StartXfer>
 80038c8:	e008      	b.n	80038dc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	6979      	ldr	r1, [r7, #20]
 80038d8:	f003 ffa2 	bl	8007820 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}

080038e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038e6:	b580      	push	{r7, lr}
 80038e8:	b084      	sub	sp, #16
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
 80038ee:	460b      	mov	r3, r1
 80038f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	f003 020f 	and.w	r2, r3, #15
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d901      	bls.n	8003904 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e050      	b.n	80039a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003908:	2b00      	cmp	r3, #0
 800390a:	da0f      	bge.n	800392c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800390c:	78fb      	ldrb	r3, [r7, #3]
 800390e:	f003 020f 	and.w	r2, r3, #15
 8003912:	4613      	mov	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4413      	add	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	3338      	adds	r3, #56	; 0x38
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4413      	add	r3, r2
 8003920:	3304      	adds	r3, #4
 8003922:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	705a      	strb	r2, [r3, #1]
 800392a:	e00d      	b.n	8003948 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	3304      	adds	r3, #4
 8003940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2201      	movs	r2, #1
 800394c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394e:	78fb      	ldrb	r3, [r7, #3]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	b2da      	uxtb	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_PCD_EP_SetStall+0x82>
 8003964:	2302      	movs	r3, #2
 8003966:	e01e      	b.n	80039a6 <HAL_PCD_EP_SetStall+0xc0>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68f9      	ldr	r1, [r7, #12]
 8003976:	4618      	mov	r0, r3
 8003978:	f004 fc3e 	bl	80081f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10a      	bne.n	800399c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	b2d9      	uxtb	r1, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003996:	461a      	mov	r2, r3
 8003998:	f004 fe30 	bl	80085fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	f003 020f 	and.w	r2, r3, #15
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d901      	bls.n	80039cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e042      	b.n	8003a52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	da0f      	bge.n	80039f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 020f 	and.w	r2, r3, #15
 80039da:	4613      	mov	r3, r2
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	3338      	adds	r3, #56	; 0x38
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	4413      	add	r3, r2
 80039e8:	3304      	adds	r3, #4
 80039ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2201      	movs	r2, #1
 80039f0:	705a      	strb	r2, [r3, #1]
 80039f2:	e00f      	b.n	8003a14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039f4:	78fb      	ldrb	r3, [r7, #3]
 80039f6:	f003 020f 	and.w	r2, r3, #15
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_PCD_EP_ClrStall+0x86>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e00e      	b.n	8003a52 <HAL_PCD_EP_ClrStall+0xa4>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68f9      	ldr	r1, [r7, #12]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f004 fc46 	bl	80082d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
 8003a62:	460b      	mov	r3, r1
 8003a64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da0c      	bge.n	8003a88 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a6e:	78fb      	ldrb	r3, [r7, #3]
 8003a70:	f003 020f 	and.w	r2, r3, #15
 8003a74:	4613      	mov	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	4413      	add	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	3338      	adds	r3, #56	; 0x38
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e00c      	b.n	8003aa2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68f9      	ldr	r1, [r7, #12]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f004 fa65 	bl	8007f78 <USB_EPStopXfer>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ab2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08a      	sub	sp, #40	; 0x28
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	3338      	adds	r3, #56	; 0x38
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	4413      	add	r3, r2
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d901      	bls.n	8003af4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e06c      	b.n	8003bce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	69fa      	ldr	r2, [r7, #28]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d902      	bls.n	8003b10 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3303      	adds	r3, #3
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b18:	e02b      	b.n	8003b72 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699a      	ldr	r2, [r3, #24]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d902      	bls.n	8003b36 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3303      	adds	r3, #3
 8003b3a:	089b      	lsrs	r3, r3, #2
 8003b3c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6919      	ldr	r1, [r3, #16]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	4603      	mov	r3, r0
 8003b54:	6978      	ldr	r0, [r7, #20]
 8003b56:	f004 fab9 	bl	80080cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	441a      	add	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1a      	ldr	r2, [r3, #32]
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d809      	bhi.n	8003b9c <PCD_WriteEmptyTxFifo+0xe0>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a1a      	ldr	r2, [r3, #32]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d203      	bcs.n	8003b9c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1be      	bne.n	8003b1a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d811      	bhi.n	8003bcc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	f003 030f 	and.w	r3, r3, #15
 8003bae:	2201      	movs	r2, #1
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	6939      	ldr	r1, [r7, #16]
 8003bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bc8:	4013      	ands	r3, r2
 8003bca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3720      	adds	r7, #32
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	333c      	adds	r3, #60	; 0x3c
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d17b      	bne.n	8003d06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	4a61      	ldr	r2, [pc, #388]	; (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	f240 80b9 	bls.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80b3 	beq.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c40:	6093      	str	r3, [r2, #8]
 8003c42:	e0a7      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f003 0320 	and.w	r3, r3, #32
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d009      	beq.n	8003c62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	6093      	str	r3, [r2, #8]
 8003c60:	e098      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f040 8093 	bne.w	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	4a4b      	ldr	r2, [pc, #300]	; (8003da0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d90f      	bls.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c92:	6093      	str	r3, [r2, #8]
 8003c94:	e07e      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	4413      	add	r3, r2
 8003ca8:	3304      	adds	r3, #4
 8003caa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	0159      	lsls	r1, r3, #5
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	440b      	add	r3, r1
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cc2:	1ad2      	subs	r2, r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d114      	bne.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	2101      	movs	r1, #1
 8003ce4:	f004 fc8a 	bl	80085fc <USB_EP0_OutStart>
 8003ce8:	e006      	b.n	8003cf8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	441a      	add	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f009 fd2a 	bl	800d758 <HAL_PCD_DataOutStageCallback>
 8003d04:	e046      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d124      	bne.n	8003d58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d24:	461a      	mov	r2, r3
 8003d26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	e032      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f003 0320 	and.w	r3, r3, #32
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	461a      	mov	r2, r3
 8003d46:	2320      	movs	r3, #32
 8003d48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4619      	mov	r1, r3
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f009 fd01 	bl	800d758 <HAL_PCD_DataOutStageCallback>
 8003d56:	e01d      	b.n	8003d94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d114      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d108      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d80:	461a      	mov	r2, r3
 8003d82:	2100      	movs	r1, #0
 8003d84:	f004 fc3a 	bl	80085fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f009 fce2 	bl	800d758 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	4f54300a 	.word	0x4f54300a
 8003da4:	4f54310a 	.word	0x4f54310a

08003da8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	333c      	adds	r3, #60	; 0x3c
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	4a15      	ldr	r2, [pc, #84]	; (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d90e      	bls.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d009      	beq.n	8003dfc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	461a      	mov	r2, r3
 8003df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dfa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f009 fc99 	bl	800d734 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a0a      	ldr	r2, [pc, #40]	; (8003e30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d90c      	bls.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d108      	bne.n	8003e24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2101      	movs	r1, #1
 8003e20:	f004 fbec 	bl	80085fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	4f54300a 	.word	0x4f54300a

08003e34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	70fb      	strb	r3, [r7, #3]
 8003e40:	4613      	mov	r3, r2
 8003e42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d107      	bne.n	8003e62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e52:	883b      	ldrh	r3, [r7, #0]
 8003e54:	0419      	lsls	r1, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e60:	e028      	b.n	8003eb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
 8003e74:	e00d      	b.n	8003e92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	3340      	adds	r3, #64	; 0x40
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4413      	add	r3, r2
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	0c1b      	lsrs	r3, r3, #16
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
 8003e92:	7bfa      	ldrb	r2, [r7, #15]
 8003e94:	78fb      	ldrb	r3, [r7, #3]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3ec      	bcc.n	8003e76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e9c:	883b      	ldrh	r3, [r7, #0]
 8003e9e:	0418      	lsls	r0, r3, #16
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	3b01      	subs	r3, #1
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4302      	orrs	r2, r0
 8003eac:	3340      	adds	r3, #64	; 0x40
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	887a      	ldrh	r2, [r7, #2]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_PCDEx_ActivateLPM+0x44>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	10000003 	.word	0x10000003

08003f2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e29b      	b.n	800447a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 8087 	beq.w	800405e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f50:	4b96      	ldr	r3, [pc, #600]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 030c 	and.w	r3, r3, #12
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d00c      	beq.n	8003f76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5c:	4b93      	ldr	r3, [pc, #588]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f003 030c 	and.w	r3, r3, #12
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d112      	bne.n	8003f8e <HAL_RCC_OscConfig+0x62>
 8003f68:	4b90      	ldr	r3, [pc, #576]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f74:	d10b      	bne.n	8003f8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f76:	4b8d      	ldr	r3, [pc, #564]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d06c      	beq.n	800405c <HAL_RCC_OscConfig+0x130>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d168      	bne.n	800405c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e275      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f96:	d106      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x7a>
 8003f98:	4b84      	ldr	r3, [pc, #528]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a83      	ldr	r2, [pc, #524]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e02e      	b.n	8004004 <HAL_RCC_OscConfig+0xd8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x9c>
 8003fae:	4b7f      	ldr	r3, [pc, #508]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a7e      	ldr	r2, [pc, #504]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b7c      	ldr	r3, [pc, #496]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a7b      	ldr	r2, [pc, #492]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e01d      	b.n	8004004 <HAL_RCC_OscConfig+0xd8>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0xc0>
 8003fd2:	4b76      	ldr	r3, [pc, #472]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a75      	ldr	r2, [pc, #468]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b73      	ldr	r3, [pc, #460]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a72      	ldr	r2, [pc, #456]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0xd8>
 8003fec:	4b6f      	ldr	r3, [pc, #444]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a6e      	ldr	r2, [pc, #440]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b6c      	ldr	r3, [pc, #432]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a6b      	ldr	r2, [pc, #428]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400c:	f7fd fde8 	bl	8001be0 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004014:	f7fd fde4 	bl	8001be0 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e229      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b61      	ldr	r3, [pc, #388]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0xe8>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004034:	f7fd fdd4 	bl	8001be0 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800403c:	f7fd fdd0 	bl	8001be0 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e215      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	4b57      	ldr	r3, [pc, #348]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x110>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d069      	beq.n	800413e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800406a:	4b50      	ldr	r3, [pc, #320]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004076:	4b4d      	ldr	r3, [pc, #308]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b08      	cmp	r3, #8
 8004080:	d11c      	bne.n	80040bc <HAL_RCC_OscConfig+0x190>
 8004082:	4b4a      	ldr	r3, [pc, #296]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d116      	bne.n	80040bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	4b47      	ldr	r3, [pc, #284]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_RCC_OscConfig+0x17a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e1e9      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a6:	4b41      	ldr	r3, [pc, #260]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	493d      	ldr	r1, [pc, #244]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	e040      	b.n	800413e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d023      	beq.n	800410c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c4:	4b39      	ldr	r3, [pc, #228]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a38      	ldr	r2, [pc, #224]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd fd86 	bl	8001be0 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040d8:	f7fd fd82 	bl	8001be0 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e1c7      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ea:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0f0      	beq.n	80040d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f6:	4b2d      	ldr	r3, [pc, #180]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	00db      	lsls	r3, r3, #3
 8004104:	4929      	ldr	r1, [pc, #164]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004106:	4313      	orrs	r3, r2
 8004108:	600b      	str	r3, [r1, #0]
 800410a:	e018      	b.n	800413e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800410c:	4b27      	ldr	r3, [pc, #156]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a26      	ldr	r2, [pc, #152]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004112:	f023 0301 	bic.w	r3, r3, #1
 8004116:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004118:	f7fd fd62 	bl	8001be0 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004120:	f7fd fd5e 	bl	8001be0 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e1a3      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	4b1e      	ldr	r3, [pc, #120]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d038      	beq.n	80041bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d019      	beq.n	8004186 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004152:	4b16      	ldr	r3, [pc, #88]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004156:	4a15      	ldr	r2, [pc, #84]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004158:	f043 0301 	orr.w	r3, r3, #1
 800415c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415e:	f7fd fd3f 	bl	8001be0 <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004166:	f7fd fd3b 	bl	8001be0 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e180      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004178:	4b0c      	ldr	r3, [pc, #48]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 800417a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0f0      	beq.n	8004166 <HAL_RCC_OscConfig+0x23a>
 8004184:	e01a      	b.n	80041bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 8004188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418a:	4a08      	ldr	r2, [pc, #32]	; (80041ac <HAL_RCC_OscConfig+0x280>)
 800418c:	f023 0301 	bic.w	r3, r3, #1
 8004190:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004192:	f7fd fd25 	bl	8001be0 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800419a:	f7fd fd21 	bl	8001be0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d903      	bls.n	80041b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e166      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
 80041ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	4b92      	ldr	r3, [pc, #584]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80041b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1ee      	bne.n	800419a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 80a4 	beq.w	8004312 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ca:	4b8c      	ldr	r3, [pc, #560]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10d      	bne.n	80041f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	4b89      	ldr	r3, [pc, #548]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80041d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041da:	4a88      	ldr	r2, [pc, #544]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6413      	str	r3, [r2, #64]	; 0x40
 80041e2:	4b86      	ldr	r3, [pc, #536]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	60bb      	str	r3, [r7, #8]
 80041ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	4b83      	ldr	r3, [pc, #524]	; (8004400 <HAL_RCC_OscConfig+0x4d4>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d118      	bne.n	8004230 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80041fe:	4b80      	ldr	r3, [pc, #512]	; (8004400 <HAL_RCC_OscConfig+0x4d4>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a7f      	ldr	r2, [pc, #508]	; (8004400 <HAL_RCC_OscConfig+0x4d4>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420a:	f7fd fce9 	bl	8001be0 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004212:	f7fd fce5 	bl	8001be0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b64      	cmp	r3, #100	; 0x64
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e12a      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004224:	4b76      	ldr	r3, [pc, #472]	; (8004400 <HAL_RCC_OscConfig+0x4d4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d106      	bne.n	8004246 <HAL_RCC_OscConfig+0x31a>
 8004238:	4b70      	ldr	r3, [pc, #448]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4a6f      	ldr	r2, [pc, #444]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 800423e:	f043 0301 	orr.w	r3, r3, #1
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
 8004244:	e02d      	b.n	80042a2 <HAL_RCC_OscConfig+0x376>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10c      	bne.n	8004268 <HAL_RCC_OscConfig+0x33c>
 800424e:	4b6b      	ldr	r3, [pc, #428]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a6a      	ldr	r2, [pc, #424]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	4b68      	ldr	r3, [pc, #416]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 800425c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800425e:	4a67      	ldr	r2, [pc, #412]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004260:	f023 0304 	bic.w	r3, r3, #4
 8004264:	6713      	str	r3, [r2, #112]	; 0x70
 8004266:	e01c      	b.n	80042a2 <HAL_RCC_OscConfig+0x376>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	2b05      	cmp	r3, #5
 800426e:	d10c      	bne.n	800428a <HAL_RCC_OscConfig+0x35e>
 8004270:	4b62      	ldr	r3, [pc, #392]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a61      	ldr	r2, [pc, #388]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004276:	f043 0304 	orr.w	r3, r3, #4
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	4b5f      	ldr	r3, [pc, #380]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a5e      	ldr	r2, [pc, #376]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
 8004288:	e00b      	b.n	80042a2 <HAL_RCC_OscConfig+0x376>
 800428a:	4b5c      	ldr	r3, [pc, #368]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a5b      	ldr	r2, [pc, #364]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004290:	f023 0301 	bic.w	r3, r3, #1
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
 8004296:	4b59      	ldr	r3, [pc, #356]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429a:	4a58      	ldr	r2, [pc, #352]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 800429c:	f023 0304 	bic.w	r3, r3, #4
 80042a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d015      	beq.n	80042d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042aa:	f7fd fc99 	bl	8001be0 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b0:	e00a      	b.n	80042c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b2:	f7fd fc95 	bl	8001be0 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e0d8      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c8:	4b4c      	ldr	r3, [pc, #304]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0ee      	beq.n	80042b2 <HAL_RCC_OscConfig+0x386>
 80042d4:	e014      	b.n	8004300 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d6:	f7fd fc83 	bl	8001be0 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042dc:	e00a      	b.n	80042f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042de:	f7fd fc7f 	bl	8001be0 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0c2      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f4:	4b41      	ldr	r3, [pc, #260]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80042f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d1ee      	bne.n	80042de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	2b01      	cmp	r3, #1
 8004304:	d105      	bne.n	8004312 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004306:	4b3d      	ldr	r3, [pc, #244]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	4a3c      	ldr	r2, [pc, #240]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 800430c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004310:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80ae 	beq.w	8004478 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800431c:	4b37      	ldr	r3, [pc, #220]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f003 030c 	and.w	r3, r3, #12
 8004324:	2b08      	cmp	r3, #8
 8004326:	d06d      	beq.n	8004404 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	2b02      	cmp	r3, #2
 800432e:	d14b      	bne.n	80043c8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004330:	4b32      	ldr	r3, [pc, #200]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a31      	ldr	r2, [pc, #196]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004336:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800433a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fd fc50 	bl	8001be0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd fc4c 	bl	8001be0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e091      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004356:	4b29      	ldr	r3, [pc, #164]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69da      	ldr	r2, [r3, #28]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	019b      	lsls	r3, r3, #6
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	3b01      	subs	r3, #1
 800437c:	041b      	lsls	r3, r3, #16
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	071b      	lsls	r3, r3, #28
 800438e:	491b      	ldr	r1, [pc, #108]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a18      	ldr	r2, [pc, #96]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 800439a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a0:	f7fd fc1e 	bl	8001be0 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a8:	f7fd fc1a 	bl	8001be0 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e05f      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x47c>
 80043c6:	e057      	b.n	8004478 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c8:	4b0c      	ldr	r3, [pc, #48]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a0b      	ldr	r2, [pc, #44]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80043ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d4:	f7fd fc04 	bl	8001be0 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043dc:	f7fd fc00 	bl	8001be0 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e045      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_RCC_OscConfig+0x4d0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x4b0>
 80043fa:	e03d      	b.n	8004478 <HAL_RCC_OscConfig+0x54c>
 80043fc:	40023800 	.word	0x40023800
 8004400:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004404:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <HAL_RCC_OscConfig+0x558>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2b01      	cmp	r3, #1
 8004410:	d030      	beq.n	8004474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d129      	bne.n	8004474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	429a      	cmp	r2, r3
 800442c:	d122      	bne.n	8004474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004434:	4013      	ands	r3, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800443a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800443c:	4293      	cmp	r3, r2
 800443e:	d119      	bne.n	8004474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444a:	085b      	lsrs	r3, r3, #1
 800444c:	3b01      	subs	r3, #1
 800444e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004450:	429a      	cmp	r2, r3
 8004452:	d10f      	bne.n	8004474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004460:	429a      	cmp	r2, r3
 8004462:	d107      	bne.n	8004474 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004470:	429a      	cmp	r2, r3
 8004472:	d001      	beq.n	8004478 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800

08004488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0d0      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044a0:	4b6a      	ldr	r3, [pc, #424]	; (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d910      	bls.n	80044d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ae:	4b67      	ldr	r3, [pc, #412]	; (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 020f 	bic.w	r2, r3, #15
 80044b6:	4965      	ldr	r1, [pc, #404]	; (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044be:	4b63      	ldr	r3, [pc, #396]	; (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d001      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e0b8      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d020      	beq.n	800451e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d005      	beq.n	80044f4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e8:	4b59      	ldr	r3, [pc, #356]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	4a58      	ldr	r2, [pc, #352]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 80044ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004500:	4b53      	ldr	r3, [pc, #332]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a52      	ldr	r2, [pc, #328]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 8004506:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800450a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800450c:	4b50      	ldr	r3, [pc, #320]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	494d      	ldr	r1, [pc, #308]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 800451a:	4313      	orrs	r3, r2
 800451c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d040      	beq.n	80045ac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d107      	bne.n	8004542 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004532:	4b47      	ldr	r3, [pc, #284]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d115      	bne.n	800456a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e07f      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454a:	4b41      	ldr	r3, [pc, #260]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e073      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455a:	4b3d      	ldr	r3, [pc, #244]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e06b      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800456a:	4b39      	ldr	r3, [pc, #228]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f023 0203 	bic.w	r2, r3, #3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4936      	ldr	r1, [pc, #216]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 8004578:	4313      	orrs	r3, r2
 800457a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800457c:	f7fd fb30 	bl	8001be0 <HAL_GetTick>
 8004580:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004582:	e00a      	b.n	800459a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004584:	f7fd fb2c 	bl	8001be0 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004592:	4293      	cmp	r3, r2
 8004594:	d901      	bls.n	800459a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e053      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459a:	4b2d      	ldr	r3, [pc, #180]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	f003 020c 	and.w	r2, r3, #12
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d1eb      	bne.n	8004584 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d210      	bcs.n	80045dc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 020f 	bic.w	r2, r3, #15
 80045c2:	4922      	ldr	r1, [pc, #136]	; (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b20      	ldr	r3, [pc, #128]	; (800464c <HAL_RCC_ClockConfig+0x1c4>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e032      	b.n	8004642 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d008      	beq.n	80045fa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e8:	4b19      	ldr	r3, [pc, #100]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4916      	ldr	r1, [pc, #88]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d009      	beq.n	800461a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004606:	4b12      	ldr	r3, [pc, #72]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	490e      	ldr	r1, [pc, #56]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 8004616:	4313      	orrs	r3, r2
 8004618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800461a:	f000 f821 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 800461e:	4602      	mov	r2, r0
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	091b      	lsrs	r3, r3, #4
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	490a      	ldr	r1, [pc, #40]	; (8004654 <HAL_RCC_ClockConfig+0x1cc>)
 800462c:	5ccb      	ldrb	r3, [r1, r3]
 800462e:	fa22 f303 	lsr.w	r3, r2, r3
 8004632:	4a09      	ldr	r2, [pc, #36]	; (8004658 <HAL_RCC_ClockConfig+0x1d0>)
 8004634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004636:	4b09      	ldr	r3, [pc, #36]	; (800465c <HAL_RCC_ClockConfig+0x1d4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fc fff4 	bl	8001628 <HAL_InitTick>

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40023c00 	.word	0x40023c00
 8004650:	40023800 	.word	0x40023800
 8004654:	0801d3ec 	.word	0x0801d3ec
 8004658:	20000004 	.word	0x20000004
 800465c:	20000008 	.word	0x20000008

08004660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004664:	b094      	sub	sp, #80	; 0x50
 8004666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004668:	2300      	movs	r3, #0
 800466a:	647b      	str	r3, [r7, #68]	; 0x44
 800466c:	2300      	movs	r3, #0
 800466e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004670:	2300      	movs	r3, #0
 8004672:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004678:	4b79      	ldr	r3, [pc, #484]	; (8004860 <HAL_RCC_GetSysClockFreq+0x200>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 030c 	and.w	r3, r3, #12
 8004680:	2b08      	cmp	r3, #8
 8004682:	d00d      	beq.n	80046a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004684:	2b08      	cmp	r3, #8
 8004686:	f200 80e1 	bhi.w	800484c <HAL_RCC_GetSysClockFreq+0x1ec>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <HAL_RCC_GetSysClockFreq+0x34>
 800468e:	2b04      	cmp	r3, #4
 8004690:	d003      	beq.n	800469a <HAL_RCC_GetSysClockFreq+0x3a>
 8004692:	e0db      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004694:	4b73      	ldr	r3, [pc, #460]	; (8004864 <HAL_RCC_GetSysClockFreq+0x204>)
 8004696:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004698:	e0db      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800469a:	4b73      	ldr	r3, [pc, #460]	; (8004868 <HAL_RCC_GetSysClockFreq+0x208>)
 800469c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800469e:	e0d8      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046a0:	4b6f      	ldr	r3, [pc, #444]	; (8004860 <HAL_RCC_GetSysClockFreq+0x200>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046aa:	4b6d      	ldr	r3, [pc, #436]	; (8004860 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d063      	beq.n	800477e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b6:	4b6a      	ldr	r3, [pc, #424]	; (8004860 <HAL_RCC_GetSysClockFreq+0x200>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	099b      	lsrs	r3, r3, #6
 80046bc:	2200      	movs	r2, #0
 80046be:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
 80046ca:	2300      	movs	r3, #0
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
 80046ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046d2:	4622      	mov	r2, r4
 80046d4:	462b      	mov	r3, r5
 80046d6:	f04f 0000 	mov.w	r0, #0
 80046da:	f04f 0100 	mov.w	r1, #0
 80046de:	0159      	lsls	r1, r3, #5
 80046e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e4:	0150      	lsls	r0, r2, #5
 80046e6:	4602      	mov	r2, r0
 80046e8:	460b      	mov	r3, r1
 80046ea:	4621      	mov	r1, r4
 80046ec:	1a51      	subs	r1, r2, r1
 80046ee:	6139      	str	r1, [r7, #16]
 80046f0:	4629      	mov	r1, r5
 80046f2:	eb63 0301 	sbc.w	r3, r3, r1
 80046f6:	617b      	str	r3, [r7, #20]
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004704:	4659      	mov	r1, fp
 8004706:	018b      	lsls	r3, r1, #6
 8004708:	4651      	mov	r1, sl
 800470a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800470e:	4651      	mov	r1, sl
 8004710:	018a      	lsls	r2, r1, #6
 8004712:	4651      	mov	r1, sl
 8004714:	ebb2 0801 	subs.w	r8, r2, r1
 8004718:	4659      	mov	r1, fp
 800471a:	eb63 0901 	sbc.w	r9, r3, r1
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800472a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800472e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004732:	4690      	mov	r8, r2
 8004734:	4699      	mov	r9, r3
 8004736:	4623      	mov	r3, r4
 8004738:	eb18 0303 	adds.w	r3, r8, r3
 800473c:	60bb      	str	r3, [r7, #8]
 800473e:	462b      	mov	r3, r5
 8004740:	eb49 0303 	adc.w	r3, r9, r3
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004752:	4629      	mov	r1, r5
 8004754:	024b      	lsls	r3, r1, #9
 8004756:	4621      	mov	r1, r4
 8004758:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800475c:	4621      	mov	r1, r4
 800475e:	024a      	lsls	r2, r1, #9
 8004760:	4610      	mov	r0, r2
 8004762:	4619      	mov	r1, r3
 8004764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004766:	2200      	movs	r2, #0
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
 800476a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800476c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004770:	f7fb fe1e 	bl	80003b0 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4613      	mov	r3, r2
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477c:	e058      	b.n	8004830 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800477e:	4b38      	ldr	r3, [pc, #224]	; (8004860 <HAL_RCC_GetSysClockFreq+0x200>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	099b      	lsrs	r3, r3, #6
 8004784:	2200      	movs	r2, #0
 8004786:	4618      	mov	r0, r3
 8004788:	4611      	mov	r1, r2
 800478a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	2300      	movs	r3, #0
 8004792:	627b      	str	r3, [r7, #36]	; 0x24
 8004794:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004798:	4642      	mov	r2, r8
 800479a:	464b      	mov	r3, r9
 800479c:	f04f 0000 	mov.w	r0, #0
 80047a0:	f04f 0100 	mov.w	r1, #0
 80047a4:	0159      	lsls	r1, r3, #5
 80047a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047aa:	0150      	lsls	r0, r2, #5
 80047ac:	4602      	mov	r2, r0
 80047ae:	460b      	mov	r3, r1
 80047b0:	4641      	mov	r1, r8
 80047b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80047b6:	4649      	mov	r1, r9
 80047b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80047bc:	f04f 0200 	mov.w	r2, #0
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047d0:	ebb2 040a 	subs.w	r4, r2, sl
 80047d4:	eb63 050b 	sbc.w	r5, r3, fp
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	00eb      	lsls	r3, r5, #3
 80047e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047e6:	00e2      	lsls	r2, r4, #3
 80047e8:	4614      	mov	r4, r2
 80047ea:	461d      	mov	r5, r3
 80047ec:	4643      	mov	r3, r8
 80047ee:	18e3      	adds	r3, r4, r3
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	464b      	mov	r3, r9
 80047f4:	eb45 0303 	adc.w	r3, r5, r3
 80047f8:	607b      	str	r3, [r7, #4]
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004806:	4629      	mov	r1, r5
 8004808:	028b      	lsls	r3, r1, #10
 800480a:	4621      	mov	r1, r4
 800480c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004810:	4621      	mov	r1, r4
 8004812:	028a      	lsls	r2, r1, #10
 8004814:	4610      	mov	r0, r2
 8004816:	4619      	mov	r1, r3
 8004818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800481a:	2200      	movs	r2, #0
 800481c:	61bb      	str	r3, [r7, #24]
 800481e:	61fa      	str	r2, [r7, #28]
 8004820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004824:	f7fb fdc4 	bl	80003b0 <__aeabi_uldivmod>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4613      	mov	r3, r2
 800482e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <HAL_RCC_GetSysClockFreq+0x200>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	3301      	adds	r3, #1
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004842:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004844:	fbb2 f3f3 	udiv	r3, r2, r3
 8004848:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800484a:	e002      	b.n	8004852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_RCC_GetSysClockFreq+0x204>)
 800484e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004854:	4618      	mov	r0, r3
 8004856:	3750      	adds	r7, #80	; 0x50
 8004858:	46bd      	mov	sp, r7
 800485a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800485e:	bf00      	nop
 8004860:	40023800 	.word	0x40023800
 8004864:	00f42400 	.word	0x00f42400
 8004868:	007a1200 	.word	0x007a1200

0800486c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004870:	4b03      	ldr	r3, [pc, #12]	; (8004880 <HAL_RCC_GetHCLKFreq+0x14>)
 8004872:	681b      	ldr	r3, [r3, #0]
}
 8004874:	4618      	mov	r0, r3
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000004 	.word	0x20000004

08004884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004888:	f7ff fff0 	bl	800486c <HAL_RCC_GetHCLKFreq>
 800488c:	4602      	mov	r2, r0
 800488e:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	0a9b      	lsrs	r3, r3, #10
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	4903      	ldr	r1, [pc, #12]	; (80048a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800489a:	5ccb      	ldrb	r3, [r1, r3]
 800489c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40023800 	.word	0x40023800
 80048a8:	0801d3fc 	.word	0x0801d3fc

080048ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048b0:	f7ff ffdc 	bl	800486c <HAL_RCC_GetHCLKFreq>
 80048b4:	4602      	mov	r2, r0
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	0b5b      	lsrs	r3, r3, #13
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	4903      	ldr	r1, [pc, #12]	; (80048d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048c2:	5ccb      	ldrb	r3, [r1, r3]
 80048c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	40023800 	.word	0x40023800
 80048d0:	0801d3fc 	.word	0x0801d3fc

080048d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	220f      	movs	r2, #15
 80048e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_RCC_GetClockConfig+0x5c>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	f003 0203 	and.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048f0:	4b0f      	ldr	r3, [pc, #60]	; (8004930 <HAL_RCC_GetClockConfig+0x5c>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048fc:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <HAL_RCC_GetClockConfig+0x5c>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004908:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCC_GetClockConfig+0x5c>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	08db      	lsrs	r3, r3, #3
 800490e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004916:	4b07      	ldr	r3, [pc, #28]	; (8004934 <HAL_RCC_GetClockConfig+0x60>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 020f 	and.w	r2, r3, #15
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	601a      	str	r2, [r3, #0]
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800
 8004934:	40023c00 	.word	0x40023c00

08004938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004944:	2300      	movs	r3, #0
 8004946:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800494c:	2300      	movs	r3, #0
 800494e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004950:	2300      	movs	r3, #0
 8004952:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d012      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004960:	4b69      	ldr	r3, [pc, #420]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	4a68      	ldr	r2, [pc, #416]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004966:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800496a:	6093      	str	r3, [r2, #8]
 800496c:	4b66      	ldr	r3, [pc, #408]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	4964      	ldr	r1, [pc, #400]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004982:	2301      	movs	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d017      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004992:	4b5d      	ldr	r3, [pc, #372]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a0:	4959      	ldr	r1, [pc, #356]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b0:	d101      	bne.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049b2:	2301      	movs	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d017      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049ce:	4b4e      	ldr	r3, [pc, #312]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	494a      	ldr	r1, [pc, #296]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049ec:	d101      	bne.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80049ee:	2301      	movs	r3, #1
 80049f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80049fa:	2301      	movs	r3, #1
 80049fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	f000 808b 	beq.w	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a1c:	4b3a      	ldr	r3, [pc, #232]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	4a39      	ldr	r2, [pc, #228]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a26:	6413      	str	r3, [r2, #64]	; 0x40
 8004a28:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a30:	60bb      	str	r3, [r7, #8]
 8004a32:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a34:	4b35      	ldr	r3, [pc, #212]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a34      	ldr	r2, [pc, #208]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fd f8ce 	bl	8001be0 <HAL_GetTick>
 8004a44:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a46:	e008      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a48:	f7fd f8ca 	bl	8001be0 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b64      	cmp	r3, #100	; 0x64
 8004a54:	d901      	bls.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e38f      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a5a:	4b2c      	ldr	r3, [pc, #176]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d0f0      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a66:	4b28      	ldr	r3, [pc, #160]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a6e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d035      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d02e      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a84:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a8c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a8e:	4b1e      	ldr	r3, [pc, #120]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a1d      	ldr	r2, [pc, #116]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a1a      	ldr	r2, [pc, #104]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004aa6:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aac:	4b16      	ldr	r3, [pc, #88]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d114      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab8:	f7fd f892 	bl	8001be0 <HAL_GetTick>
 8004abc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004abe:	e00a      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac0:	f7fd f88e 	bl	8001be0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e351      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d0ee      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004aee:	d111      	bne.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004af0:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004afc:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004afe:	400b      	ands	r3, r1
 8004b00:	4901      	ldr	r1, [pc, #4]	; (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	608b      	str	r3, [r1, #8]
 8004b06:	e00b      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40007000 	.word	0x40007000
 8004b10:	0ffffcff 	.word	0x0ffffcff
 8004b14:	4bac      	ldr	r3, [pc, #688]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	4aab      	ldr	r2, [pc, #684]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b1e:	6093      	str	r3, [r2, #8]
 8004b20:	4ba9      	ldr	r3, [pc, #676]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2c:	49a6      	ldr	r1, [pc, #664]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d010      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b3e:	4ba2      	ldr	r3, [pc, #648]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b44:	4aa0      	ldr	r2, [pc, #640]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b4e:	4b9e      	ldr	r3, [pc, #632]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b58:	499b      	ldr	r1, [pc, #620]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b6c:	4b96      	ldr	r3, [pc, #600]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b7a:	4993      	ldr	r1, [pc, #588]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b8e:	4b8e      	ldr	r3, [pc, #568]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b9c:	498a      	ldr	r1, [pc, #552]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00a      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bb0:	4b85      	ldr	r3, [pc, #532]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bbe:	4982      	ldr	r1, [pc, #520]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00a      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bd2:	4b7d      	ldr	r3, [pc, #500]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be0:	4979      	ldr	r1, [pc, #484]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bf4:	4b74      	ldr	r3, [pc, #464]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bfa:	f023 0203 	bic.w	r2, r3, #3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	4971      	ldr	r1, [pc, #452]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c04:	4313      	orrs	r3, r2
 8004c06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c16:	4b6c      	ldr	r3, [pc, #432]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1c:	f023 020c 	bic.w	r2, r3, #12
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c24:	4968      	ldr	r1, [pc, #416]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00a      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c38:	4b63      	ldr	r3, [pc, #396]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	4960      	ldr	r1, [pc, #384]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00a      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c5a:	4b5b      	ldr	r3, [pc, #364]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c68:	4957      	ldr	r1, [pc, #348]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c7c:	4b52      	ldr	r3, [pc, #328]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8a:	494f      	ldr	r1, [pc, #316]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cac:	4946      	ldr	r1, [pc, #280]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cc0:	4b41      	ldr	r3, [pc, #260]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	493e      	ldr	r1, [pc, #248]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ce2:	4b39      	ldr	r3, [pc, #228]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ce8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf0:	4935      	ldr	r1, [pc, #212]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d04:	4b30      	ldr	r3, [pc, #192]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d12:	492d      	ldr	r1, [pc, #180]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d011      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d26:	4b28      	ldr	r3, [pc, #160]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d34:	4924      	ldr	r1, [pc, #144]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d44:	d101      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d46:	2301      	movs	r3, #1
 8004d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d56:	2301      	movs	r3, #1
 8004d58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d66:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d74:	4914      	ldr	r1, [pc, #80]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d00b      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d88:	4b0f      	ldr	r3, [pc, #60]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d98:	490b      	ldr	r1, [pc, #44]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00f      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004dac:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dbc:	4902      	ldr	r1, [pc, #8]	; (8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004dc4:	e002      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004dc6:	bf00      	nop
 8004dc8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dd8:	4b8a      	ldr	r3, [pc, #552]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004dde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de8:	4986      	ldr	r1, [pc, #536]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00b      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004dfc:	4b81      	ldr	r3, [pc, #516]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e0c:	497d      	ldr	r1, [pc, #500]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d006      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80d6 	beq.w	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e28:	4b76      	ldr	r3, [pc, #472]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a75      	ldr	r2, [pc, #468]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e34:	f7fc fed4 	bl	8001be0 <HAL_GetTick>
 8004e38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e3c:	f7fc fed0 	bl	8001be0 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	; 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e195      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e4e:	4b6d      	ldr	r3, [pc, #436]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1f0      	bne.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d021      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11d      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e6e:	4b65      	ldr	r3, [pc, #404]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e74:	0c1b      	lsrs	r3, r3, #16
 8004e76:	f003 0303 	and.w	r3, r3, #3
 8004e7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e7c:	4b61      	ldr	r3, [pc, #388]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e82:	0e1b      	lsrs	r3, r3, #24
 8004e84:	f003 030f 	and.w	r3, r3, #15
 8004e88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	019a      	lsls	r2, r3, #6
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	041b      	lsls	r3, r3, #16
 8004e94:	431a      	orrs	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	071b      	lsls	r3, r3, #28
 8004ea2:	4958      	ldr	r1, [pc, #352]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d004      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d02e      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ed4:	d129      	bne.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004ed6:	4b4b      	ldr	r3, [pc, #300]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004edc:	0c1b      	lsrs	r3, r3, #16
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ee4:	4b47      	ldr	r3, [pc, #284]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eea:	0f1b      	lsrs	r3, r3, #28
 8004eec:	f003 0307 	and.w	r3, r3, #7
 8004ef0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	019a      	lsls	r2, r3, #6
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	431a      	orrs	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	061b      	lsls	r3, r3, #24
 8004f04:	431a      	orrs	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	071b      	lsls	r3, r3, #28
 8004f0a:	493e      	ldr	r1, [pc, #248]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f12:	4b3c      	ldr	r3, [pc, #240]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f18:	f023 021f 	bic.w	r2, r3, #31
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f20:	3b01      	subs	r3, #1
 8004f22:	4938      	ldr	r1, [pc, #224]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d01d      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f36:	4b33      	ldr	r3, [pc, #204]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f3c:	0e1b      	lsrs	r3, r3, #24
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f44:	4b2f      	ldr	r3, [pc, #188]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f4a:	0f1b      	lsrs	r3, r3, #28
 8004f4c:	f003 0307 	and.w	r3, r3, #7
 8004f50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	019a      	lsls	r2, r3, #6
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	041b      	lsls	r3, r3, #16
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	061b      	lsls	r3, r3, #24
 8004f64:	431a      	orrs	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	071b      	lsls	r3, r3, #28
 8004f6a:	4926      	ldr	r1, [pc, #152]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d011      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	019a      	lsls	r2, r3, #6
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	691b      	ldr	r3, [r3, #16]
 8004f88:	041b      	lsls	r3, r3, #16
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	061b      	lsls	r3, r3, #24
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	071b      	lsls	r3, r3, #28
 8004f9a:	491a      	ldr	r1, [pc, #104]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fa2:	4b18      	ldr	r3, [pc, #96]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a17      	ldr	r2, [pc, #92]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fae:	f7fc fe17 	bl	8001be0 <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fb6:	f7fc fe13 	bl	8001be0 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b64      	cmp	r3, #100	; 0x64
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e0d8      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fc8:	4b0e      	ldr	r3, [pc, #56]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0f0      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	f040 80ce 	bne.w	8005178 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fdc:	4b09      	ldr	r3, [pc, #36]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a08      	ldr	r2, [pc, #32]	; (8005004 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe8:	f7fc fdfa 	bl	8001be0 <HAL_GetTick>
 8004fec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fee:	e00b      	b.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ff0:	f7fc fdf6 	bl	8001be0 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b64      	cmp	r3, #100	; 0x64
 8004ffc:	d904      	bls.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e0bb      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005002:	bf00      	nop
 8005004:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005008:	4b5e      	ldr	r3, [pc, #376]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005014:	d0ec      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d009      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005032:	2b00      	cmp	r3, #0
 8005034:	d02e      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	d12a      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800503e:	4b51      	ldr	r3, [pc, #324]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005044:	0c1b      	lsrs	r3, r3, #16
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800504c:	4b4d      	ldr	r3, [pc, #308]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800504e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005052:	0f1b      	lsrs	r3, r3, #28
 8005054:	f003 0307 	and.w	r3, r3, #7
 8005058:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	019a      	lsls	r2, r3, #6
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	061b      	lsls	r3, r3, #24
 800506c:	431a      	orrs	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	071b      	lsls	r3, r3, #28
 8005072:	4944      	ldr	r1, [pc, #272]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800507a:	4b42      	ldr	r3, [pc, #264]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800507c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005080:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	3b01      	subs	r3, #1
 800508a:	021b      	lsls	r3, r3, #8
 800508c:	493d      	ldr	r1, [pc, #244]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d022      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050a8:	d11d      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050aa:	4b36      	ldr	r3, [pc, #216]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b0:	0e1b      	lsrs	r3, r3, #24
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050b8:	4b32      	ldr	r3, [pc, #200]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050be:	0f1b      	lsrs	r3, r3, #28
 80050c0:	f003 0307 	and.w	r3, r3, #7
 80050c4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	019a      	lsls	r2, r3, #6
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a1b      	ldr	r3, [r3, #32]
 80050d0:	041b      	lsls	r3, r3, #16
 80050d2:	431a      	orrs	r2, r3
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	061b      	lsls	r3, r3, #24
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	071b      	lsls	r3, r3, #28
 80050de:	4929      	ldr	r1, [pc, #164]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d028      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	0e1b      	lsrs	r3, r3, #24
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005100:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005106:	0c1b      	lsrs	r3, r3, #16
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	019a      	lsls	r2, r3, #6
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	041b      	lsls	r3, r3, #16
 8005118:	431a      	orrs	r2, r3
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	061b      	lsls	r3, r3, #24
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	69db      	ldr	r3, [r3, #28]
 8005124:	071b      	lsls	r3, r3, #28
 8005126:	4917      	ldr	r1, [pc, #92]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800512e:	4b15      	ldr	r3, [pc, #84]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005134:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513c:	4911      	ldr	r1, [pc, #68]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005144:	4b0f      	ldr	r3, [pc, #60]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a0e      	ldr	r2, [pc, #56]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800514a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800514e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005150:	f7fc fd46 	bl	8001be0 <HAL_GetTick>
 8005154:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005156:	e008      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005158:	f7fc fd42 	bl	8001be0 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b64      	cmp	r3, #100	; 0x64
 8005164:	d901      	bls.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e007      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800516a:	4b06      	ldr	r3, [pc, #24]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005176:	d1ef      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3720      	adds	r7, #32
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40023800 	.word	0x40023800

08005188 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e049      	b.n	800522e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 f841 	bl	8005236 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2202      	movs	r2, #2
 80051b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f000 fa00 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
	...

0800524c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d001      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e054      	b.n	800530e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a26      	ldr	r2, [pc, #152]	; (800531c <HAL_TIM_Base_Start_IT+0xd0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d022      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x80>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528e:	d01d      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x80>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a22      	ldr	r2, [pc, #136]	; (8005320 <HAL_TIM_Base_Start_IT+0xd4>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d018      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x80>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a21      	ldr	r2, [pc, #132]	; (8005324 <HAL_TIM_Base_Start_IT+0xd8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d013      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x80>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1f      	ldr	r2, [pc, #124]	; (8005328 <HAL_TIM_Base_Start_IT+0xdc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d00e      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x80>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1e      	ldr	r2, [pc, #120]	; (800532c <HAL_TIM_Base_Start_IT+0xe0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d009      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x80>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1c      	ldr	r2, [pc, #112]	; (8005330 <HAL_TIM_Base_Start_IT+0xe4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_TIM_Base_Start_IT+0x80>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <HAL_TIM_Base_Start_IT+0xe8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d115      	bne.n	80052f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_TIM_Base_Start_IT+0xec>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b06      	cmp	r3, #6
 80052dc:	d015      	beq.n	800530a <HAL_TIM_Base_Start_IT+0xbe>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e4:	d011      	beq.n	800530a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f042 0201 	orr.w	r2, r2, #1
 80052f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	e008      	b.n	800530a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e000      	b.n	800530c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	40010000 	.word	0x40010000
 8005320:	40000400 	.word	0x40000400
 8005324:	40000800 	.word	0x40000800
 8005328:	40000c00 	.word	0x40000c00
 800532c:	40010400 	.word	0x40010400
 8005330:	40014000 	.word	0x40014000
 8005334:	40001800 	.word	0x40001800
 8005338:	00010007 	.word	0x00010007

0800533c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b02      	cmp	r3, #2
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b02      	cmp	r3, #2
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0202 	mvn.w	r2, #2
 8005368:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f905 	bl	800558e <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f8f7 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f908 	bl	80055a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0204 	mvn.w	r2, #4
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2202      	movs	r2, #2
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f8db 	bl	800558e <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8cd 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f8de 	bl	80055a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0308 	and.w	r3, r3, #8
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b08      	cmp	r3, #8
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0208 	mvn.w	r2, #8
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f003 0303 	and.w	r3, r3, #3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f8b1 	bl	800558e <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f8a3 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f8b4 	bl	80055a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	2b10      	cmp	r3, #16
 800544c:	d122      	bne.n	8005494 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0310 	and.w	r3, r3, #16
 8005458:	2b10      	cmp	r3, #16
 800545a:	d11b      	bne.n	8005494 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0210 	mvn.w	r2, #16
 8005464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2208      	movs	r2, #8
 800546a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f887 	bl	800558e <HAL_TIM_IC_CaptureCallback>
 8005480:	e005      	b.n	800548e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f879 	bl	800557a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f88a 	bl	80055a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0201 	mvn.w	r2, #1
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7fb ff0e 	bl	80012dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b80      	cmp	r3, #128	; 0x80
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d8:	2b80      	cmp	r3, #128	; 0x80
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f91a 	bl	8005720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054fa:	d10e      	bne.n	800551a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005506:	2b80      	cmp	r3, #128	; 0x80
 8005508:	d107      	bne.n	800551a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f90d 	bl	8005734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	691b      	ldr	r3, [r3, #16]
 8005520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005524:	2b40      	cmp	r3, #64	; 0x40
 8005526:	d10e      	bne.n	8005546 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b40      	cmp	r3, #64	; 0x40
 8005534:	d107      	bne.n	8005546 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f838 	bl	80055b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b20      	cmp	r3, #32
 8005552:	d10e      	bne.n	8005572 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b20      	cmp	r3, #32
 8005560:	d107      	bne.n	8005572 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f06f 0220 	mvn.w	r2, #32
 800556a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f8cd 	bl	800570c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800558e:	b480      	push	{r7}
 8005590:	b083      	sub	sp, #12
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005596:	bf00      	nop
 8005598:	370c      	adds	r7, #12
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr

080055a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a40      	ldr	r2, [pc, #256]	; (80056e0 <TIM_Base_SetConfig+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ea:	d00f      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a3d      	ldr	r2, [pc, #244]	; (80056e4 <TIM_Base_SetConfig+0x118>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a3c      	ldr	r2, [pc, #240]	; (80056e8 <TIM_Base_SetConfig+0x11c>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a3b      	ldr	r2, [pc, #236]	; (80056ec <TIM_Base_SetConfig+0x120>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a3a      	ldr	r2, [pc, #232]	; (80056f0 <TIM_Base_SetConfig+0x124>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2f      	ldr	r2, [pc, #188]	; (80056e0 <TIM_Base_SetConfig+0x114>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d02b      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562c:	d027      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2c      	ldr	r2, [pc, #176]	; (80056e4 <TIM_Base_SetConfig+0x118>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d023      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2b      	ldr	r2, [pc, #172]	; (80056e8 <TIM_Base_SetConfig+0x11c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d01f      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a2a      	ldr	r2, [pc, #168]	; (80056ec <TIM_Base_SetConfig+0x120>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01b      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a29      	ldr	r2, [pc, #164]	; (80056f0 <TIM_Base_SetConfig+0x124>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d017      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a28      	ldr	r2, [pc, #160]	; (80056f4 <TIM_Base_SetConfig+0x128>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a27      	ldr	r2, [pc, #156]	; (80056f8 <TIM_Base_SetConfig+0x12c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00f      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a26      	ldr	r2, [pc, #152]	; (80056fc <TIM_Base_SetConfig+0x130>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00b      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a25      	ldr	r2, [pc, #148]	; (8005700 <TIM_Base_SetConfig+0x134>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d007      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a24      	ldr	r2, [pc, #144]	; (8005704 <TIM_Base_SetConfig+0x138>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a23      	ldr	r2, [pc, #140]	; (8005708 <TIM_Base_SetConfig+0x13c>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d108      	bne.n	8005690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a0a      	ldr	r2, [pc, #40]	; (80056e0 <TIM_Base_SetConfig+0x114>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_Base_SetConfig+0xf8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a0c      	ldr	r2, [pc, #48]	; (80056f0 <TIM_Base_SetConfig+0x124>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d103      	bne.n	80056cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	615a      	str	r2, [r3, #20]
}
 80056d2:	bf00      	nop
 80056d4:	3714      	adds	r7, #20
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000
 80056e4:	40000400 	.word	0x40000400
 80056e8:	40000800 	.word	0x40000800
 80056ec:	40000c00 	.word	0x40000c00
 80056f0:	40010400 	.word	0x40010400
 80056f4:	40014000 	.word	0x40014000
 80056f8:	40014400 	.word	0x40014400
 80056fc:	40014800 	.word	0x40014800
 8005700:	40001800 	.word	0x40001800
 8005704:	40001c00 	.word	0x40001c00
 8005708:	40002000 	.word	0x40002000

0800570c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005714:	bf00      	nop
 8005716:	370c      	adds	r7, #12
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e040      	b.n	80057dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7fc f91e 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2224      	movs	r2, #36	; 0x24
 8005774:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 0201 	bic.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fcae 	bl	80060e8 <UART_SetConfig>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e022      	b.n	80057dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 ff06 	bl	80065b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685a      	ldr	r2, [r3, #4]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689a      	ldr	r2, [r3, #8]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0201 	orr.w	r2, r2, #1
 80057d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 ff8d 	bl	80066f4 <UART_CheckIdleState>
 80057da:	4603      	mov	r3, r0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b08a      	sub	sp, #40	; 0x28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	4613      	mov	r3, r2
 80057f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d165      	bne.n	80058c6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_UART_Transmit_DMA+0x22>
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d101      	bne.n	800580a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e05e      	b.n	80058c8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68ba      	ldr	r2, [r7, #8]
 800580e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	88fa      	ldrh	r2, [r7, #6]
 8005814:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	88fa      	ldrh	r2, [r7, #6]
 800581c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2221      	movs	r2, #33	; 0x21
 800582c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005832:	2b00      	cmp	r3, #0
 8005834:	d027      	beq.n	8005886 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	4a25      	ldr	r2, [pc, #148]	; (80058d0 <HAL_UART_Transmit_DMA+0xec>)
 800583c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	4a24      	ldr	r2, [pc, #144]	; (80058d4 <HAL_UART_Transmit_DMA+0xf0>)
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	4a23      	ldr	r2, [pc, #140]	; (80058d8 <HAL_UART_Transmit_DMA+0xf4>)
 800584c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	2200      	movs	r2, #0
 8005854:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800585e:	4619      	mov	r1, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	3328      	adds	r3, #40	; 0x28
 8005866:	461a      	mov	r2, r3
 8005868:	88fb      	ldrh	r3, [r7, #6]
 800586a:	f7fc fb79 	bl	8001f60 <HAL_DMA_Start_IT>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2210      	movs	r2, #16
 8005878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e020      	b.n	80058c8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2240      	movs	r2, #64	; 0x40
 800588c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3308      	adds	r3, #8
 8005894:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	613b      	str	r3, [r7, #16]
   return(result);
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a4:	627b      	str	r3, [r7, #36]	; 0x24
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	3308      	adds	r3, #8
 80058ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ae:	623a      	str	r2, [r7, #32]
 80058b0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b2:	69f9      	ldr	r1, [r7, #28]
 80058b4:	6a3a      	ldr	r2, [r7, #32]
 80058b6:	e841 2300 	strex	r3, r2, [r1]
 80058ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1e5      	bne.n	800588e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	e000      	b.n	80058c8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80058c6:	2302      	movs	r3, #2
  }
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3728      	adds	r7, #40	; 0x28
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	08006b71 	.word	0x08006b71
 80058d4:	08006c07 	.word	0x08006c07
 80058d8:	08006d89 	.word	0x08006d89

080058dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08a      	sub	sp, #40	; 0x28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	4613      	mov	r3, r2
 80058e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058f0:	2b20      	cmp	r3, #32
 80058f2:	d132      	bne.n	800595a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <HAL_UART_Receive_DMA+0x24>
 80058fa:	88fb      	ldrh	r3, [r7, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	e02b      	b.n	800595c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2200      	movs	r2, #0
 8005908:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d018      	beq.n	800594a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	e853 3f00 	ldrex	r3, [r3]
 8005924:	613b      	str	r3, [r7, #16]
   return(result);
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	623b      	str	r3, [r7, #32]
 8005938:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	69f9      	ldr	r1, [r7, #28]
 800593c:	6a3a      	ldr	r2, [r7, #32]
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	61bb      	str	r3, [r7, #24]
   return(result);
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e6      	bne.n	8005918 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	461a      	mov	r2, r3
 800594e:	68b9      	ldr	r1, [r7, #8]
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f000 ffe3 	bl	800691c <UART_Start_Receive_DMA>
 8005956:	4603      	mov	r3, r0
 8005958:	e000      	b.n	800595c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
  }
}
 800595c:	4618      	mov	r0, r3
 800595e:	3728      	adds	r7, #40	; 0x28
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b090      	sub	sp, #64	; 0x40
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005978:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d139      	bne.n	80059fc <HAL_UART_DMAStop+0x98>
 8005988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800598a:	2b21      	cmp	r3, #33	; 0x21
 800598c:	d136      	bne.n	80059fc <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3308      	adds	r3, #8
 8005994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	61fb      	str	r3, [r7, #28]
   return(result);
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	3308      	adds	r3, #8
 80059ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b6:	e841 2300 	strex	r3, r2, [r1]
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d1e5      	bne.n	800598e <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d015      	beq.n	80059f6 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7fc fb26 	bl	8002020 <HAL_DMA_Abort>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00d      	beq.n	80059f6 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059de:	4618      	mov	r0, r3
 80059e0:	f7fc fd3a 	bl	8002458 <HAL_DMA_GetError>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d105      	bne.n	80059f6 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2210      	movs	r2, #16
 80059ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80059f2:	2303      	movs	r3, #3
 80059f4:	e044      	b.n	8005a80 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 f830 	bl	8006a5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d139      	bne.n	8005a7e <HAL_UART_DMAStop+0x11a>
 8005a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0c:	2b22      	cmp	r3, #34	; 0x22
 8005a0e:	d136      	bne.n	8005a7e <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3308      	adds	r3, #8
 8005a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a30:	61ba      	str	r2, [r7, #24]
 8005a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a34:	6979      	ldr	r1, [r7, #20]
 8005a36:	69ba      	ldr	r2, [r7, #24]
 8005a38:	e841 2300 	strex	r3, r2, [r1]
 8005a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1e5      	bne.n	8005a10 <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fc fae5 	bl	8002020 <HAL_DMA_Abort>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fc fcf9 	bl	8002458 <HAL_DMA_GetError>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b20      	cmp	r3, #32
 8005a6a:	d105      	bne.n	8005a78 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2210      	movs	r2, #16
 8005a70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e003      	b.n	8005a80 <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f001 f815 	bl	8006aa8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3740      	adds	r7, #64	; 0x40
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b0ba      	sub	sp, #232	; 0xe8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	69db      	ldr	r3, [r3, #28]
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ab2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d115      	bne.n	8005af0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac8:	f003 0320 	and.w	r3, r3, #32
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d00f      	beq.n	8005af0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d009      	beq.n	8005af0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 82ac 	beq.w	800603e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	4798      	blx	r3
      }
      return;
 8005aee:	e2a6      	b.n	800603e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005af0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 8117 	beq.w	8005d28 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b0a:	4b85      	ldr	r3, [pc, #532]	; (8005d20 <HAL_UART_IRQHandler+0x298>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 810a 	beq.w	8005d28 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d011      	beq.n	8005b44 <HAL_UART_IRQHandler+0xbc>
 8005b20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00b      	beq.n	8005b44 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2201      	movs	r2, #1
 8005b32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3a:	f043 0201 	orr.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d011      	beq.n	8005b74 <HAL_UART_IRQHandler+0xec>
 8005b50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d00b      	beq.n	8005b74 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2202      	movs	r2, #2
 8005b62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6a:	f043 0204 	orr.w	r2, r3, #4
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b78:	f003 0304 	and.w	r3, r3, #4
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d011      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x11c>
 8005b80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00b      	beq.n	8005ba4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2204      	movs	r2, #4
 8005b92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b9a:	f043 0202 	orr.w	r2, r3, #2
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba8:	f003 0308 	and.w	r3, r3, #8
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d017      	beq.n	8005be0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2208      	movs	r2, #8
 8005bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd6:	f043 0208 	orr.w	r2, r3, #8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d012      	beq.n	8005c12 <HAL_UART_IRQHandler+0x18a>
 8005bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00c      	beq.n	8005c12 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c08:	f043 0220 	orr.w	r2, r3, #32
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 8212 	beq.w	8006042 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00d      	beq.n	8005c46 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2e:	f003 0320 	and.w	r3, r3, #32
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d007      	beq.n	8005c46 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5a:	2b40      	cmp	r3, #64	; 0x40
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d04f      	beq.n	8005d0a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 ff1c 	bl	8006aa8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c7a:	2b40      	cmp	r3, #64	; 0x40
 8005c7c:	d141      	bne.n	8005d02 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	3308      	adds	r3, #8
 8005c84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c8c:	e853 3f00 	ldrex	r3, [r3]
 8005c90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3308      	adds	r3, #8
 8005ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005caa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cba:	e841 2300 	strex	r3, r2, [r1]
 8005cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1d9      	bne.n	8005c7e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d013      	beq.n	8005cfa <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd6:	4a13      	ldr	r2, [pc, #76]	; (8005d24 <HAL_UART_IRQHandler+0x29c>)
 8005cd8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fc fa0e 	bl	8002100 <HAL_DMA_Abort_IT>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d017      	beq.n	8005d1a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cf8:	e00f      	b.n	8005d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f9d4 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d00:	e00b      	b.n	8005d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f000 f9d0 	bl	80060a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d08:	e007      	b.n	8005d1a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f9cc 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005d18:	e193      	b.n	8006042 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d1a:	bf00      	nop
    return;
 8005d1c:	e191      	b.n	8006042 <HAL_UART_IRQHandler+0x5ba>
 8005d1e:	bf00      	nop
 8005d20:	04000120 	.word	0x04000120
 8005d24:	08006e07 	.word	0x08006e07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	f040 814c 	bne.w	8005fca <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f003 0310 	and.w	r3, r3, #16
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8145 	beq.w	8005fca <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 813e 	beq.w	8005fca <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2210      	movs	r2, #16
 8005d54:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	f040 80b6 	bne.w	8005ed2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d72:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8165 	beq.w	8006046 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d86:	429a      	cmp	r2, r3
 8005d88:	f080 815d 	bcs.w	8006046 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da0:	f000 8086 	beq.w	8005eb0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005db0:	e853 3f00 	ldrex	r3, [r3]
 8005db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005dce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005dde:	e841 2300 	strex	r3, r2, [r1]
 8005de2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1da      	bne.n	8005da4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	3308      	adds	r3, #8
 8005df4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e00:	f023 0301 	bic.w	r3, r3, #1
 8005e04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3308      	adds	r3, #8
 8005e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e16:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1e1      	bne.n	8005dee <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3308      	adds	r3, #8
 8005e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e4e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e50:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e54:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e3      	bne.n	8005e2a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e78:	e853 3f00 	ldrex	r3, [r3]
 8005e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e80:	f023 0310 	bic.w	r3, r3, #16
 8005e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e92:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e94:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e96:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e9a:	e841 2300 	strex	r3, r2, [r1]
 8005e9e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1e4      	bne.n	8005e70 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f7fc f8b8 	bl	8002020 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	4619      	mov	r1, r3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f8f6 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ed0:	e0b9      	b.n	8006046 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80ab 	beq.w	800604a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8005ef4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 80a6 	beq.w	800604a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f06:	e853 3f00 	ldrex	r3, [r3]
 8005f0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f20:	647b      	str	r3, [r7, #68]	; 0x44
 8005f22:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e4      	bne.n	8005efe <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	3308      	adds	r3, #8
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	623b      	str	r3, [r7, #32]
   return(result);
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	f023 0301 	bic.w	r3, r3, #1
 8005f4a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f58:	633a      	str	r2, [r7, #48]	; 0x30
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e3      	bne.n	8005f34 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2220      	movs	r2, #32
 8005f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f023 0310 	bic.w	r3, r3, #16
 8005f94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	69b9      	ldr	r1, [r7, #24]
 8005fa8:	69fa      	ldr	r2, [r7, #28]
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	617b      	str	r3, [r7, #20]
   return(result);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e4      	bne.n	8005f80 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f87a 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005fc8:	e03f      	b.n	800604a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x56c>
 8005fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d008      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005fea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f871 	bl	80060d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ff2:	e02d      	b.n	8006050 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00e      	beq.n	800601e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01c      	beq.n	800604e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	4798      	blx	r3
    }
    return;
 800601c:	e017      	b.n	800604e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800601e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b00      	cmp	r3, #0
 8006028:	d012      	beq.n	8006050 <HAL_UART_IRQHandler+0x5c8>
 800602a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00c      	beq.n	8006050 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fefb 	bl	8006e32 <UART_EndTransmit_IT>
    return;
 800603c:	e008      	b.n	8006050 <HAL_UART_IRQHandler+0x5c8>
      return;
 800603e:	bf00      	nop
 8006040:	e006      	b.n	8006050 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006042:	bf00      	nop
 8006044:	e004      	b.n	8006050 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006046:	bf00      	nop
 8006048:	e002      	b.n	8006050 <HAL_UART_IRQHandler+0x5c8>
      return;
 800604a:	bf00      	nop
 800604c:	e000      	b.n	8006050 <HAL_UART_IRQHandler+0x5c8>
    return;
 800604e:	bf00      	nop
  }

}
 8006050:	37e8      	adds	r7, #232	; 0xe8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop

08006058 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	4ba6      	ldr	r3, [pc, #664]	; (80063ac <UART_SetConfig+0x2c4>)
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	6979      	ldr	r1, [r7, #20]
 800611c:	430b      	orrs	r3, r1
 800611e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	430a      	orrs	r2, r1
 8006134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	4313      	orrs	r3, r2
 8006144:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	697a      	ldr	r2, [r7, #20]
 8006156:	430a      	orrs	r2, r1
 8006158:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a94      	ldr	r2, [pc, #592]	; (80063b0 <UART_SetConfig+0x2c8>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d120      	bne.n	80061a6 <UART_SetConfig+0xbe>
 8006164:	4b93      	ldr	r3, [pc, #588]	; (80063b4 <UART_SetConfig+0x2cc>)
 8006166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616a:	f003 0303 	and.w	r3, r3, #3
 800616e:	2b03      	cmp	r3, #3
 8006170:	d816      	bhi.n	80061a0 <UART_SetConfig+0xb8>
 8006172:	a201      	add	r2, pc, #4	; (adr r2, 8006178 <UART_SetConfig+0x90>)
 8006174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006178:	08006189 	.word	0x08006189
 800617c:	08006195 	.word	0x08006195
 8006180:	0800618f 	.word	0x0800618f
 8006184:	0800619b 	.word	0x0800619b
 8006188:	2301      	movs	r3, #1
 800618a:	77fb      	strb	r3, [r7, #31]
 800618c:	e150      	b.n	8006430 <UART_SetConfig+0x348>
 800618e:	2302      	movs	r3, #2
 8006190:	77fb      	strb	r3, [r7, #31]
 8006192:	e14d      	b.n	8006430 <UART_SetConfig+0x348>
 8006194:	2304      	movs	r3, #4
 8006196:	77fb      	strb	r3, [r7, #31]
 8006198:	e14a      	b.n	8006430 <UART_SetConfig+0x348>
 800619a:	2308      	movs	r3, #8
 800619c:	77fb      	strb	r3, [r7, #31]
 800619e:	e147      	b.n	8006430 <UART_SetConfig+0x348>
 80061a0:	2310      	movs	r3, #16
 80061a2:	77fb      	strb	r3, [r7, #31]
 80061a4:	e144      	b.n	8006430 <UART_SetConfig+0x348>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a83      	ldr	r2, [pc, #524]	; (80063b8 <UART_SetConfig+0x2d0>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d132      	bne.n	8006216 <UART_SetConfig+0x12e>
 80061b0:	4b80      	ldr	r3, [pc, #512]	; (80063b4 <UART_SetConfig+0x2cc>)
 80061b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b6:	f003 030c 	and.w	r3, r3, #12
 80061ba:	2b0c      	cmp	r3, #12
 80061bc:	d828      	bhi.n	8006210 <UART_SetConfig+0x128>
 80061be:	a201      	add	r2, pc, #4	; (adr r2, 80061c4 <UART_SetConfig+0xdc>)
 80061c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c4:	080061f9 	.word	0x080061f9
 80061c8:	08006211 	.word	0x08006211
 80061cc:	08006211 	.word	0x08006211
 80061d0:	08006211 	.word	0x08006211
 80061d4:	08006205 	.word	0x08006205
 80061d8:	08006211 	.word	0x08006211
 80061dc:	08006211 	.word	0x08006211
 80061e0:	08006211 	.word	0x08006211
 80061e4:	080061ff 	.word	0x080061ff
 80061e8:	08006211 	.word	0x08006211
 80061ec:	08006211 	.word	0x08006211
 80061f0:	08006211 	.word	0x08006211
 80061f4:	0800620b 	.word	0x0800620b
 80061f8:	2300      	movs	r3, #0
 80061fa:	77fb      	strb	r3, [r7, #31]
 80061fc:	e118      	b.n	8006430 <UART_SetConfig+0x348>
 80061fe:	2302      	movs	r3, #2
 8006200:	77fb      	strb	r3, [r7, #31]
 8006202:	e115      	b.n	8006430 <UART_SetConfig+0x348>
 8006204:	2304      	movs	r3, #4
 8006206:	77fb      	strb	r3, [r7, #31]
 8006208:	e112      	b.n	8006430 <UART_SetConfig+0x348>
 800620a:	2308      	movs	r3, #8
 800620c:	77fb      	strb	r3, [r7, #31]
 800620e:	e10f      	b.n	8006430 <UART_SetConfig+0x348>
 8006210:	2310      	movs	r3, #16
 8006212:	77fb      	strb	r3, [r7, #31]
 8006214:	e10c      	b.n	8006430 <UART_SetConfig+0x348>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a68      	ldr	r2, [pc, #416]	; (80063bc <UART_SetConfig+0x2d4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d120      	bne.n	8006262 <UART_SetConfig+0x17a>
 8006220:	4b64      	ldr	r3, [pc, #400]	; (80063b4 <UART_SetConfig+0x2cc>)
 8006222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006226:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800622a:	2b30      	cmp	r3, #48	; 0x30
 800622c:	d013      	beq.n	8006256 <UART_SetConfig+0x16e>
 800622e:	2b30      	cmp	r3, #48	; 0x30
 8006230:	d814      	bhi.n	800625c <UART_SetConfig+0x174>
 8006232:	2b20      	cmp	r3, #32
 8006234:	d009      	beq.n	800624a <UART_SetConfig+0x162>
 8006236:	2b20      	cmp	r3, #32
 8006238:	d810      	bhi.n	800625c <UART_SetConfig+0x174>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d002      	beq.n	8006244 <UART_SetConfig+0x15c>
 800623e:	2b10      	cmp	r3, #16
 8006240:	d006      	beq.n	8006250 <UART_SetConfig+0x168>
 8006242:	e00b      	b.n	800625c <UART_SetConfig+0x174>
 8006244:	2300      	movs	r3, #0
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e0f2      	b.n	8006430 <UART_SetConfig+0x348>
 800624a:	2302      	movs	r3, #2
 800624c:	77fb      	strb	r3, [r7, #31]
 800624e:	e0ef      	b.n	8006430 <UART_SetConfig+0x348>
 8006250:	2304      	movs	r3, #4
 8006252:	77fb      	strb	r3, [r7, #31]
 8006254:	e0ec      	b.n	8006430 <UART_SetConfig+0x348>
 8006256:	2308      	movs	r3, #8
 8006258:	77fb      	strb	r3, [r7, #31]
 800625a:	e0e9      	b.n	8006430 <UART_SetConfig+0x348>
 800625c:	2310      	movs	r3, #16
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	e0e6      	b.n	8006430 <UART_SetConfig+0x348>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a56      	ldr	r2, [pc, #344]	; (80063c0 <UART_SetConfig+0x2d8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d120      	bne.n	80062ae <UART_SetConfig+0x1c6>
 800626c:	4b51      	ldr	r3, [pc, #324]	; (80063b4 <UART_SetConfig+0x2cc>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006276:	2bc0      	cmp	r3, #192	; 0xc0
 8006278:	d013      	beq.n	80062a2 <UART_SetConfig+0x1ba>
 800627a:	2bc0      	cmp	r3, #192	; 0xc0
 800627c:	d814      	bhi.n	80062a8 <UART_SetConfig+0x1c0>
 800627e:	2b80      	cmp	r3, #128	; 0x80
 8006280:	d009      	beq.n	8006296 <UART_SetConfig+0x1ae>
 8006282:	2b80      	cmp	r3, #128	; 0x80
 8006284:	d810      	bhi.n	80062a8 <UART_SetConfig+0x1c0>
 8006286:	2b00      	cmp	r3, #0
 8006288:	d002      	beq.n	8006290 <UART_SetConfig+0x1a8>
 800628a:	2b40      	cmp	r3, #64	; 0x40
 800628c:	d006      	beq.n	800629c <UART_SetConfig+0x1b4>
 800628e:	e00b      	b.n	80062a8 <UART_SetConfig+0x1c0>
 8006290:	2300      	movs	r3, #0
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e0cc      	b.n	8006430 <UART_SetConfig+0x348>
 8006296:	2302      	movs	r3, #2
 8006298:	77fb      	strb	r3, [r7, #31]
 800629a:	e0c9      	b.n	8006430 <UART_SetConfig+0x348>
 800629c:	2304      	movs	r3, #4
 800629e:	77fb      	strb	r3, [r7, #31]
 80062a0:	e0c6      	b.n	8006430 <UART_SetConfig+0x348>
 80062a2:	2308      	movs	r3, #8
 80062a4:	77fb      	strb	r3, [r7, #31]
 80062a6:	e0c3      	b.n	8006430 <UART_SetConfig+0x348>
 80062a8:	2310      	movs	r3, #16
 80062aa:	77fb      	strb	r3, [r7, #31]
 80062ac:	e0c0      	b.n	8006430 <UART_SetConfig+0x348>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a44      	ldr	r2, [pc, #272]	; (80063c4 <UART_SetConfig+0x2dc>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d125      	bne.n	8006304 <UART_SetConfig+0x21c>
 80062b8:	4b3e      	ldr	r3, [pc, #248]	; (80063b4 <UART_SetConfig+0x2cc>)
 80062ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062c6:	d017      	beq.n	80062f8 <UART_SetConfig+0x210>
 80062c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062cc:	d817      	bhi.n	80062fe <UART_SetConfig+0x216>
 80062ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d2:	d00b      	beq.n	80062ec <UART_SetConfig+0x204>
 80062d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062d8:	d811      	bhi.n	80062fe <UART_SetConfig+0x216>
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <UART_SetConfig+0x1fe>
 80062de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062e2:	d006      	beq.n	80062f2 <UART_SetConfig+0x20a>
 80062e4:	e00b      	b.n	80062fe <UART_SetConfig+0x216>
 80062e6:	2300      	movs	r3, #0
 80062e8:	77fb      	strb	r3, [r7, #31]
 80062ea:	e0a1      	b.n	8006430 <UART_SetConfig+0x348>
 80062ec:	2302      	movs	r3, #2
 80062ee:	77fb      	strb	r3, [r7, #31]
 80062f0:	e09e      	b.n	8006430 <UART_SetConfig+0x348>
 80062f2:	2304      	movs	r3, #4
 80062f4:	77fb      	strb	r3, [r7, #31]
 80062f6:	e09b      	b.n	8006430 <UART_SetConfig+0x348>
 80062f8:	2308      	movs	r3, #8
 80062fa:	77fb      	strb	r3, [r7, #31]
 80062fc:	e098      	b.n	8006430 <UART_SetConfig+0x348>
 80062fe:	2310      	movs	r3, #16
 8006300:	77fb      	strb	r3, [r7, #31]
 8006302:	e095      	b.n	8006430 <UART_SetConfig+0x348>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a2f      	ldr	r2, [pc, #188]	; (80063c8 <UART_SetConfig+0x2e0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d125      	bne.n	800635a <UART_SetConfig+0x272>
 800630e:	4b29      	ldr	r3, [pc, #164]	; (80063b4 <UART_SetConfig+0x2cc>)
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006314:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800631c:	d017      	beq.n	800634e <UART_SetConfig+0x266>
 800631e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006322:	d817      	bhi.n	8006354 <UART_SetConfig+0x26c>
 8006324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006328:	d00b      	beq.n	8006342 <UART_SetConfig+0x25a>
 800632a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632e:	d811      	bhi.n	8006354 <UART_SetConfig+0x26c>
 8006330:	2b00      	cmp	r3, #0
 8006332:	d003      	beq.n	800633c <UART_SetConfig+0x254>
 8006334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006338:	d006      	beq.n	8006348 <UART_SetConfig+0x260>
 800633a:	e00b      	b.n	8006354 <UART_SetConfig+0x26c>
 800633c:	2301      	movs	r3, #1
 800633e:	77fb      	strb	r3, [r7, #31]
 8006340:	e076      	b.n	8006430 <UART_SetConfig+0x348>
 8006342:	2302      	movs	r3, #2
 8006344:	77fb      	strb	r3, [r7, #31]
 8006346:	e073      	b.n	8006430 <UART_SetConfig+0x348>
 8006348:	2304      	movs	r3, #4
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	e070      	b.n	8006430 <UART_SetConfig+0x348>
 800634e:	2308      	movs	r3, #8
 8006350:	77fb      	strb	r3, [r7, #31]
 8006352:	e06d      	b.n	8006430 <UART_SetConfig+0x348>
 8006354:	2310      	movs	r3, #16
 8006356:	77fb      	strb	r3, [r7, #31]
 8006358:	e06a      	b.n	8006430 <UART_SetConfig+0x348>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <UART_SetConfig+0x2e4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d138      	bne.n	80063d6 <UART_SetConfig+0x2ee>
 8006364:	4b13      	ldr	r3, [pc, #76]	; (80063b4 <UART_SetConfig+0x2cc>)
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800636a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800636e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006372:	d017      	beq.n	80063a4 <UART_SetConfig+0x2bc>
 8006374:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006378:	d82a      	bhi.n	80063d0 <UART_SetConfig+0x2e8>
 800637a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800637e:	d00b      	beq.n	8006398 <UART_SetConfig+0x2b0>
 8006380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006384:	d824      	bhi.n	80063d0 <UART_SetConfig+0x2e8>
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <UART_SetConfig+0x2aa>
 800638a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800638e:	d006      	beq.n	800639e <UART_SetConfig+0x2b6>
 8006390:	e01e      	b.n	80063d0 <UART_SetConfig+0x2e8>
 8006392:	2300      	movs	r3, #0
 8006394:	77fb      	strb	r3, [r7, #31]
 8006396:	e04b      	b.n	8006430 <UART_SetConfig+0x348>
 8006398:	2302      	movs	r3, #2
 800639a:	77fb      	strb	r3, [r7, #31]
 800639c:	e048      	b.n	8006430 <UART_SetConfig+0x348>
 800639e:	2304      	movs	r3, #4
 80063a0:	77fb      	strb	r3, [r7, #31]
 80063a2:	e045      	b.n	8006430 <UART_SetConfig+0x348>
 80063a4:	2308      	movs	r3, #8
 80063a6:	77fb      	strb	r3, [r7, #31]
 80063a8:	e042      	b.n	8006430 <UART_SetConfig+0x348>
 80063aa:	bf00      	nop
 80063ac:	efff69f3 	.word	0xefff69f3
 80063b0:	40011000 	.word	0x40011000
 80063b4:	40023800 	.word	0x40023800
 80063b8:	40004400 	.word	0x40004400
 80063bc:	40004800 	.word	0x40004800
 80063c0:	40004c00 	.word	0x40004c00
 80063c4:	40005000 	.word	0x40005000
 80063c8:	40011400 	.word	0x40011400
 80063cc:	40007800 	.word	0x40007800
 80063d0:	2310      	movs	r3, #16
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e02c      	b.n	8006430 <UART_SetConfig+0x348>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a72      	ldr	r2, [pc, #456]	; (80065a4 <UART_SetConfig+0x4bc>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d125      	bne.n	800642c <UART_SetConfig+0x344>
 80063e0:	4b71      	ldr	r3, [pc, #452]	; (80065a8 <UART_SetConfig+0x4c0>)
 80063e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80063ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063ee:	d017      	beq.n	8006420 <UART_SetConfig+0x338>
 80063f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063f4:	d817      	bhi.n	8006426 <UART_SetConfig+0x33e>
 80063f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fa:	d00b      	beq.n	8006414 <UART_SetConfig+0x32c>
 80063fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006400:	d811      	bhi.n	8006426 <UART_SetConfig+0x33e>
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <UART_SetConfig+0x326>
 8006406:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800640a:	d006      	beq.n	800641a <UART_SetConfig+0x332>
 800640c:	e00b      	b.n	8006426 <UART_SetConfig+0x33e>
 800640e:	2300      	movs	r3, #0
 8006410:	77fb      	strb	r3, [r7, #31]
 8006412:	e00d      	b.n	8006430 <UART_SetConfig+0x348>
 8006414:	2302      	movs	r3, #2
 8006416:	77fb      	strb	r3, [r7, #31]
 8006418:	e00a      	b.n	8006430 <UART_SetConfig+0x348>
 800641a:	2304      	movs	r3, #4
 800641c:	77fb      	strb	r3, [r7, #31]
 800641e:	e007      	b.n	8006430 <UART_SetConfig+0x348>
 8006420:	2308      	movs	r3, #8
 8006422:	77fb      	strb	r3, [r7, #31]
 8006424:	e004      	b.n	8006430 <UART_SetConfig+0x348>
 8006426:	2310      	movs	r3, #16
 8006428:	77fb      	strb	r3, [r7, #31]
 800642a:	e001      	b.n	8006430 <UART_SetConfig+0x348>
 800642c:	2310      	movs	r3, #16
 800642e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006438:	d15b      	bne.n	80064f2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800643a:	7ffb      	ldrb	r3, [r7, #31]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d828      	bhi.n	8006492 <UART_SetConfig+0x3aa>
 8006440:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <UART_SetConfig+0x360>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	0800646d 	.word	0x0800646d
 800644c:	08006475 	.word	0x08006475
 8006450:	0800647d 	.word	0x0800647d
 8006454:	08006493 	.word	0x08006493
 8006458:	08006483 	.word	0x08006483
 800645c:	08006493 	.word	0x08006493
 8006460:	08006493 	.word	0x08006493
 8006464:	08006493 	.word	0x08006493
 8006468:	0800648b 	.word	0x0800648b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800646c:	f7fe fa0a 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006470:	61b8      	str	r0, [r7, #24]
        break;
 8006472:	e013      	b.n	800649c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006474:	f7fe fa1a 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8006478:	61b8      	str	r0, [r7, #24]
        break;
 800647a:	e00f      	b.n	800649c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800647c:	4b4b      	ldr	r3, [pc, #300]	; (80065ac <UART_SetConfig+0x4c4>)
 800647e:	61bb      	str	r3, [r7, #24]
        break;
 8006480:	e00c      	b.n	800649c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006482:	f7fe f8ed 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 8006486:	61b8      	str	r0, [r7, #24]
        break;
 8006488:	e008      	b.n	800649c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800648a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648e:	61bb      	str	r3, [r7, #24]
        break;
 8006490:	e004      	b.n	800649c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	77bb      	strb	r3, [r7, #30]
        break;
 800649a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d074      	beq.n	800658c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	005a      	lsls	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	085b      	lsrs	r3, r3, #1
 80064ac:	441a      	add	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	2b0f      	cmp	r3, #15
 80064bc:	d916      	bls.n	80064ec <UART_SetConfig+0x404>
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c4:	d212      	bcs.n	80064ec <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f023 030f 	bic.w	r3, r3, #15
 80064ce:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	b29a      	uxth	r2, r3
 80064dc:	89fb      	ldrh	r3, [r7, #14]
 80064de:	4313      	orrs	r3, r2
 80064e0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	89fa      	ldrh	r2, [r7, #14]
 80064e8:	60da      	str	r2, [r3, #12]
 80064ea:	e04f      	b.n	800658c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	77bb      	strb	r3, [r7, #30]
 80064f0:	e04c      	b.n	800658c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064f2:	7ffb      	ldrb	r3, [r7, #31]
 80064f4:	2b08      	cmp	r3, #8
 80064f6:	d828      	bhi.n	800654a <UART_SetConfig+0x462>
 80064f8:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <UART_SetConfig+0x418>)
 80064fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fe:	bf00      	nop
 8006500:	08006525 	.word	0x08006525
 8006504:	0800652d 	.word	0x0800652d
 8006508:	08006535 	.word	0x08006535
 800650c:	0800654b 	.word	0x0800654b
 8006510:	0800653b 	.word	0x0800653b
 8006514:	0800654b 	.word	0x0800654b
 8006518:	0800654b 	.word	0x0800654b
 800651c:	0800654b 	.word	0x0800654b
 8006520:	08006543 	.word	0x08006543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006524:	f7fe f9ae 	bl	8004884 <HAL_RCC_GetPCLK1Freq>
 8006528:	61b8      	str	r0, [r7, #24]
        break;
 800652a:	e013      	b.n	8006554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800652c:	f7fe f9be 	bl	80048ac <HAL_RCC_GetPCLK2Freq>
 8006530:	61b8      	str	r0, [r7, #24]
        break;
 8006532:	e00f      	b.n	8006554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <UART_SetConfig+0x4c4>)
 8006536:	61bb      	str	r3, [r7, #24]
        break;
 8006538:	e00c      	b.n	8006554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800653a:	f7fe f891 	bl	8004660 <HAL_RCC_GetSysClockFreq>
 800653e:	61b8      	str	r0, [r7, #24]
        break;
 8006540:	e008      	b.n	8006554 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006546:	61bb      	str	r3, [r7, #24]
        break;
 8006548:	e004      	b.n	8006554 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	77bb      	strb	r3, [r7, #30]
        break;
 8006552:	bf00      	nop
    }

    if (pclk != 0U)
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d018      	beq.n	800658c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	085a      	lsrs	r2, r3, #1
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	441a      	add	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	fbb2 f3f3 	udiv	r3, r2, r3
 800656c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	2b0f      	cmp	r3, #15
 8006572:	d909      	bls.n	8006588 <UART_SetConfig+0x4a0>
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657a:	d205      	bcs.n	8006588 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	60da      	str	r2, [r3, #12]
 8006586:	e001      	b.n	800658c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006598:	7fbb      	ldrb	r3, [r7, #30]
}
 800659a:	4618      	mov	r0, r3
 800659c:	3720      	adds	r7, #32
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
 80065a2:	bf00      	nop
 80065a4:	40007c00 	.word	0x40007c00
 80065a8:	40023800 	.word	0x40023800
 80065ac:	00f42400 	.word	0x00f42400

080065b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ae:	d10a      	bne.n	80066c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006704:	f7fb fa6c 	bl	8001be0 <HAL_GetTick>
 8006708:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d10e      	bne.n	8006736 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f831 	bl	800678e <UART_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e027      	b.n	8006786 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b04      	cmp	r3, #4
 8006742:	d10e      	bne.n	8006762 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f81b 	bl	800678e <UART_WaitOnFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e011      	b.n	8006786 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b09c      	sub	sp, #112	; 0x70
 8006792:	af00      	add	r7, sp, #0
 8006794:	60f8      	str	r0, [r7, #12]
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	603b      	str	r3, [r7, #0]
 800679a:	4613      	mov	r3, r2
 800679c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679e:	e0a7      	b.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a6:	f000 80a3 	beq.w	80068f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067aa:	f7fb fa19 	bl	8001be0 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d302      	bcc.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80067ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d13f      	bne.n	8006840 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c8:	e853 3f00 	ldrex	r3, [r3]
 80067cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067d4:	667b      	str	r3, [r7, #100]	; 0x64
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067e6:	e841 2300 	strex	r3, r2, [r1]
 80067ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d1e6      	bne.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3308      	adds	r3, #8
 80067f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067fc:	e853 3f00 	ldrex	r3, [r3]
 8006800:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006804:	f023 0301 	bic.w	r3, r3, #1
 8006808:	663b      	str	r3, [r7, #96]	; 0x60
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	3308      	adds	r3, #8
 8006810:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006812:	64ba      	str	r2, [r7, #72]	; 0x48
 8006814:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006816:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800681a:	e841 2300 	strex	r3, r2, [r1]
 800681e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006822:	2b00      	cmp	r3, #0
 8006824:	d1e5      	bne.n	80067f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2220      	movs	r2, #32
 800682a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2220      	movs	r2, #32
 8006830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2200      	movs	r2, #0
 8006838:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e068      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d050      	beq.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	69db      	ldr	r3, [r3, #28]
 8006854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800685c:	d148      	bne.n	80068f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006866:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	e853 3f00 	ldrex	r3, [r3]
 8006874:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800687c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	461a      	mov	r2, r3
 8006884:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006886:	637b      	str	r3, [r7, #52]	; 0x34
 8006888:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800688c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800688e:	e841 2300 	strex	r3, r2, [r1]
 8006892:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1e6      	bne.n	8006868 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	613b      	str	r3, [r7, #16]
   return(result);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f023 0301 	bic.w	r3, r3, #1
 80068b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3308      	adds	r3, #8
 80068b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068ba:	623a      	str	r2, [r7, #32]
 80068bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	69f9      	ldr	r1, [r7, #28]
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e5      	bne.n	800689a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2220      	movs	r2, #32
 80068d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2220      	movs	r2, #32
 80068e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e010      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69da      	ldr	r2, [r3, #28]
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	4013      	ands	r3, r2
 80068fa:	68ba      	ldr	r2, [r7, #8]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	bf0c      	ite	eq
 8006900:	2301      	moveq	r3, #1
 8006902:	2300      	movne	r3, #0
 8006904:	b2db      	uxtb	r3, r3
 8006906:	461a      	mov	r2, r3
 8006908:	79fb      	ldrb	r3, [r7, #7]
 800690a:	429a      	cmp	r2, r3
 800690c:	f43f af48 	beq.w	80067a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006910:	2300      	movs	r3, #0
}
 8006912:	4618      	mov	r0, r3
 8006914:	3770      	adds	r7, #112	; 0x70
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
	...

0800691c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b096      	sub	sp, #88	; 0x58
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2222      	movs	r2, #34	; 0x22
 8006944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800694c:	2b00      	cmp	r3, #0
 800694e:	d028      	beq.n	80069a2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006954:	4a3e      	ldr	r2, [pc, #248]	; (8006a50 <UART_Start_Receive_DMA+0x134>)
 8006956:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800695c:	4a3d      	ldr	r2, [pc, #244]	; (8006a54 <UART_Start_Receive_DMA+0x138>)
 800695e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006964:	4a3c      	ldr	r2, [pc, #240]	; (8006a58 <UART_Start_Receive_DMA+0x13c>)
 8006966:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800696c:	2200      	movs	r2, #0
 800696e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3324      	adds	r3, #36	; 0x24
 800697a:	4619      	mov	r1, r3
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006980:	461a      	mov	r2, r3
 8006982:	88fb      	ldrh	r3, [r7, #6]
 8006984:	f7fb faec 	bl	8001f60 <HAL_DMA_Start_IT>
 8006988:	4603      	mov	r3, r0
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2210      	movs	r2, #16
 8006992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e051      	b.n	8006a46 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d018      	beq.n	80069dc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069be:	657b      	str	r3, [r7, #84]	; 0x54
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ca:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e6      	bne.n	80069aa <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	3308      	adds	r3, #8
 80069e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	f043 0301 	orr.w	r3, r3, #1
 80069f2:	653b      	str	r3, [r7, #80]	; 0x50
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069fc:	637a      	str	r2, [r7, #52]	; 0x34
 80069fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e5      	bne.n	80069dc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a30:	623a      	str	r2, [r7, #32]
 8006a32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	69f9      	ldr	r1, [r7, #28]
 8006a36:	6a3a      	ldr	r2, [r7, #32]
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e5      	bne.n	8006a10 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3758      	adds	r7, #88	; 0x58
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	08006c23 	.word	0x08006c23
 8006a54:	08006d4b 	.word	0x08006d4b
 8006a58:	08006d89 	.word	0x08006d89

08006a5c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b089      	sub	sp, #36	; 0x24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	e853 3f00 	ldrex	r3, [r3]
 8006a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	61bb      	str	r3, [r7, #24]
 8006a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a86:	6979      	ldr	r1, [r7, #20]
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	e841 2300 	strex	r3, r2, [r1]
 8006a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1e6      	bne.n	8006a64 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006a9c:	bf00      	nop
 8006a9e:	3724      	adds	r7, #36	; 0x24
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b095      	sub	sp, #84	; 0x54
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab8:	e853 3f00 	ldrex	r3, [r3]
 8006abc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	461a      	mov	r2, r3
 8006acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ace:	643b      	str	r3, [r7, #64]	; 0x40
 8006ad0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ad4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ad6:	e841 2300 	strex	r3, r2, [r1]
 8006ada:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1e6      	bne.n	8006ab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6a3b      	ldr	r3, [r7, #32]
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b0a:	e841 2300 	strex	r3, r2, [r1]
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d1e5      	bne.n	8006ae2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d118      	bne.n	8006b50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	e853 3f00 	ldrex	r3, [r3]
 8006b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f023 0310 	bic.w	r3, r3, #16
 8006b32:	647b      	str	r3, [r7, #68]	; 0x44
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b40:	6979      	ldr	r1, [r7, #20]
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	e841 2300 	strex	r3, r2, [r1]
 8006b48:	613b      	str	r3, [r7, #16]
   return(result);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1e6      	bne.n	8006b1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b64:	bf00      	nop
 8006b66:	3754      	adds	r7, #84	; 0x54
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b090      	sub	sp, #64	; 0x40
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b86:	d037      	beq.n	8006bf8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3308      	adds	r3, #8
 8006bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bb0:	633a      	str	r2, [r7, #48]	; 0x30
 8006bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006bb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb8:	e841 2300 	strex	r3, r2, [r1]
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1e5      	bne.n	8006b90 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	e853 3f00 	ldrex	r3, [r3]
 8006bd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8006bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	461a      	mov	r2, r3
 8006be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	69b9      	ldr	r1, [r7, #24]
 8006be8:	69fa      	ldr	r2, [r7, #28]
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	617b      	str	r3, [r7, #20]
   return(result);
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e6      	bne.n	8006bc4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bf6:	e002      	b.n	8006bfe <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006bf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006bfa:	f7ff fa2d 	bl	8006058 <HAL_UART_TxCpltCallback>
}
 8006bfe:	bf00      	nop
 8006c00:	3740      	adds	r7, #64	; 0x40
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}

08006c06 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff fa29 	bl	800606c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b09c      	sub	sp, #112	; 0x70
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c38:	d071      	beq.n	8006d1e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8006c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c60:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c62:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e6      	bne.n	8006c42 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3308      	adds	r3, #8
 8006c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c86:	f023 0301 	bic.w	r3, r3, #1
 8006c8a:	667b      	str	r3, [r7, #100]	; 0x64
 8006c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	3308      	adds	r3, #8
 8006c92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006c94:	647a      	str	r2, [r7, #68]	; 0x44
 8006c96:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e5      	bne.n	8006c74 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3308      	adds	r3, #8
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8006cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3308      	adds	r3, #8
 8006cc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cc8:	633a      	str	r2, [r7, #48]	; 0x30
 8006cca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e5      	bne.n	8006ca8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cde:	2220      	movs	r2, #32
 8006ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce8:	2b01      	cmp	r3, #1
 8006cea:	d118      	bne.n	8006d1e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	e853 3f00 	ldrex	r3, [r3]
 8006cf8:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 0310 	bic.w	r3, r3, #16
 8006d00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	461a      	mov	r2, r3
 8006d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	69b9      	ldr	r1, [r7, #24]
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	617b      	str	r3, [r7, #20]
   return(result);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e6      	bne.n	8006cec <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d20:	2200      	movs	r2, #0
 8006d22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d107      	bne.n	8006d3c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d32:	4619      	mov	r1, r3
 8006d34:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d36:	f7ff f9c1 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d3a:	e002      	b.n	8006d42 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8006d3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006d3e:	f7ff f99f 	bl	8006080 <HAL_UART_RxCpltCallback>
}
 8006d42:	bf00      	nop
 8006d44:	3770      	adds	r7, #112	; 0x70
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d109      	bne.n	8006d7a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d6c:	085b      	lsrs	r3, r3, #1
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	4619      	mov	r1, r3
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7ff f9a2 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d78:	e002      	b.n	8006d80 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d7a:	68f8      	ldr	r0, [r7, #12]
 8006d7c:	f7ff f98a 	bl	8006094 <HAL_UART_RxHalfCpltCallback>
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d94:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d9a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dae:	2b80      	cmp	r3, #128	; 0x80
 8006db0:	d109      	bne.n	8006dc6 <UART_DMAError+0x3e>
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b21      	cmp	r3, #33	; 0x21
 8006db6:	d106      	bne.n	8006dc6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006dc0:	6978      	ldr	r0, [r7, #20]
 8006dc2:	f7ff fe4b 	bl	8006a5c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd0:	2b40      	cmp	r3, #64	; 0x40
 8006dd2:	d109      	bne.n	8006de8 <UART_DMAError+0x60>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2b22      	cmp	r3, #34	; 0x22
 8006dd8:	d106      	bne.n	8006de8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006de2:	6978      	ldr	r0, [r7, #20]
 8006de4:	f7ff fe60 	bl	8006aa8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dee:	f043 0210 	orr.w	r2, r3, #16
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006df8:	6978      	ldr	r0, [r7, #20]
 8006dfa:	f7ff f955 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dfe:	bf00      	nop
 8006e00:	3718      	adds	r7, #24
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff f93f 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e2a:	bf00      	nop
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b088      	sub	sp, #32
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	e853 3f00 	ldrex	r3, [r3]
 8006e46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	461a      	mov	r2, r3
 8006e56:	69fb      	ldr	r3, [r7, #28]
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	613b      	str	r3, [r7, #16]
   return(result);
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e6      	bne.n	8006e3a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2220      	movs	r2, #32
 8006e70:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f7ff f8ed 	bl	8006058 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e7e:	bf00      	nop
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
	...

08006e88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e88:	b084      	sub	sp, #16
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	f107 001c 	add.w	r0, r7, #28
 8006e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d120      	bne.n	8006ee2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	4b20      	ldr	r3, [pc, #128]	; (8006f34 <USB_CoreInit+0xac>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d105      	bne.n	8006ed6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fbee 	bl	80086b8 <USB_CoreReset>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]
 8006ee0:	e010      	b.n	8006f04 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f001 fbe2 	bl	80086b8 <USB_CoreReset>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006efc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d10b      	bne.n	8006f22 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f043 0206 	orr.w	r2, r3, #6
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f043 0220 	orr.w	r2, r3, #32
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f2e:	b004      	add	sp, #16
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	ffbdffbf 	.word	0xffbdffbf

08006f38 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b087      	sub	sp, #28
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	4613      	mov	r3, r2
 8006f44:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006f46:	79fb      	ldrb	r3, [r7, #7]
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d165      	bne.n	8007018 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	4a41      	ldr	r2, [pc, #260]	; (8007054 <USB_SetTurnaroundTime+0x11c>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d906      	bls.n	8006f62 <USB_SetTurnaroundTime+0x2a>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	4a40      	ldr	r2, [pc, #256]	; (8007058 <USB_SetTurnaroundTime+0x120>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d202      	bcs.n	8006f62 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006f5c:	230f      	movs	r3, #15
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e062      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	4a3c      	ldr	r2, [pc, #240]	; (8007058 <USB_SetTurnaroundTime+0x120>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d306      	bcc.n	8006f78 <USB_SetTurnaroundTime+0x40>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	4a3b      	ldr	r2, [pc, #236]	; (800705c <USB_SetTurnaroundTime+0x124>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d202      	bcs.n	8006f78 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006f72:	230e      	movs	r3, #14
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	e057      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	4a38      	ldr	r2, [pc, #224]	; (800705c <USB_SetTurnaroundTime+0x124>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d306      	bcc.n	8006f8e <USB_SetTurnaroundTime+0x56>
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	4a37      	ldr	r2, [pc, #220]	; (8007060 <USB_SetTurnaroundTime+0x128>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d202      	bcs.n	8006f8e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006f88:	230d      	movs	r3, #13
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e04c      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	4a33      	ldr	r2, [pc, #204]	; (8007060 <USB_SetTurnaroundTime+0x128>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d306      	bcc.n	8006fa4 <USB_SetTurnaroundTime+0x6c>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4a32      	ldr	r2, [pc, #200]	; (8007064 <USB_SetTurnaroundTime+0x12c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d802      	bhi.n	8006fa4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	617b      	str	r3, [r7, #20]
 8006fa2:	e041      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	4a2f      	ldr	r2, [pc, #188]	; (8007064 <USB_SetTurnaroundTime+0x12c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d906      	bls.n	8006fba <USB_SetTurnaroundTime+0x82>
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4a2e      	ldr	r2, [pc, #184]	; (8007068 <USB_SetTurnaroundTime+0x130>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d802      	bhi.n	8006fba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006fb4:	230b      	movs	r3, #11
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e036      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4a2a      	ldr	r2, [pc, #168]	; (8007068 <USB_SetTurnaroundTime+0x130>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d906      	bls.n	8006fd0 <USB_SetTurnaroundTime+0x98>
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	4a29      	ldr	r2, [pc, #164]	; (800706c <USB_SetTurnaroundTime+0x134>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d802      	bhi.n	8006fd0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006fca:	230a      	movs	r3, #10
 8006fcc:	617b      	str	r3, [r7, #20]
 8006fce:	e02b      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4a26      	ldr	r2, [pc, #152]	; (800706c <USB_SetTurnaroundTime+0x134>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d906      	bls.n	8006fe6 <USB_SetTurnaroundTime+0xae>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4a25      	ldr	r2, [pc, #148]	; (8007070 <USB_SetTurnaroundTime+0x138>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d202      	bcs.n	8006fe6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006fe0:	2309      	movs	r3, #9
 8006fe2:	617b      	str	r3, [r7, #20]
 8006fe4:	e020      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4a21      	ldr	r2, [pc, #132]	; (8007070 <USB_SetTurnaroundTime+0x138>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d306      	bcc.n	8006ffc <USB_SetTurnaroundTime+0xc4>
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	4a20      	ldr	r2, [pc, #128]	; (8007074 <USB_SetTurnaroundTime+0x13c>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d802      	bhi.n	8006ffc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006ff6:	2308      	movs	r3, #8
 8006ff8:	617b      	str	r3, [r7, #20]
 8006ffa:	e015      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <USB_SetTurnaroundTime+0x13c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d906      	bls.n	8007012 <USB_SetTurnaroundTime+0xda>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <USB_SetTurnaroundTime+0x140>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d202      	bcs.n	8007012 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800700c:	2307      	movs	r3, #7
 800700e:	617b      	str	r3, [r7, #20]
 8007010:	e00a      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007012:	2306      	movs	r3, #6
 8007014:	617b      	str	r3, [r7, #20]
 8007016:	e007      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d102      	bne.n	8007024 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800701e:	2309      	movs	r3, #9
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	e001      	b.n	8007028 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007024:	2309      	movs	r3, #9
 8007026:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	029b      	lsls	r3, r3, #10
 800703c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007040:	431a      	orrs	r2, r3
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007046:	2300      	movs	r3, #0
}
 8007048:	4618      	mov	r0, r3
 800704a:	371c      	adds	r7, #28
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr
 8007054:	00d8acbf 	.word	0x00d8acbf
 8007058:	00e4e1c0 	.word	0x00e4e1c0
 800705c:	00f42400 	.word	0x00f42400
 8007060:	01067380 	.word	0x01067380
 8007064:	011a499f 	.word	0x011a499f
 8007068:	01312cff 	.word	0x01312cff
 800706c:	014ca43f 	.word	0x014ca43f
 8007070:	016e3600 	.word	0x016e3600
 8007074:	01a6ab1f 	.word	0x01a6ab1f
 8007078:	01e84800 	.word	0x01e84800

0800707c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f043 0201 	orr.w	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f023 0201 	bic.w	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070dc:	78fb      	ldrb	r3, [r7, #3]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d115      	bne.n	800710e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80070ee:	2001      	movs	r0, #1
 80070f0:	f7fa fd82 	bl	8001bf8 <HAL_Delay>
      ms++;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fa4b 	bl	8008596 <USB_GetMode>
 8007100:	4603      	mov	r3, r0
 8007102:	2b01      	cmp	r3, #1
 8007104:	d01e      	beq.n	8007144 <USB_SetCurrentMode+0x84>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b31      	cmp	r3, #49	; 0x31
 800710a:	d9f0      	bls.n	80070ee <USB_SetCurrentMode+0x2e>
 800710c:	e01a      	b.n	8007144 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d115      	bne.n	8007140 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007120:	2001      	movs	r0, #1
 8007122:	f7fa fd69 	bl	8001bf8 <HAL_Delay>
      ms++;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3301      	adds	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 fa32 	bl	8008596 <USB_GetMode>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <USB_SetCurrentMode+0x84>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2b31      	cmp	r3, #49	; 0x31
 800713c:	d9f0      	bls.n	8007120 <USB_SetCurrentMode+0x60>
 800713e:	e001      	b.n	8007144 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e005      	b.n	8007150 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2b32      	cmp	r3, #50	; 0x32
 8007148:	d101      	bne.n	800714e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e000      	b.n	8007150 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007158:	b084      	sub	sp, #16
 800715a:	b580      	push	{r7, lr}
 800715c:	b086      	sub	sp, #24
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007166:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007172:	2300      	movs	r3, #0
 8007174:	613b      	str	r3, [r7, #16]
 8007176:	e009      	b.n	800718c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	3340      	adds	r3, #64	; 0x40
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4413      	add	r3, r2
 8007182:	2200      	movs	r2, #0
 8007184:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3301      	adds	r3, #1
 800718a:	613b      	str	r3, [r7, #16]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	2b0e      	cmp	r3, #14
 8007190:	d9f2      	bls.n	8007178 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007194:	2b00      	cmp	r3, #0
 8007196:	d11c      	bne.n	80071d2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	68fa      	ldr	r2, [r7, #12]
 80071a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071a6:	f043 0302 	orr.w	r3, r3, #2
 80071aa:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	e005      	b.n	80071de <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80071e4:	461a      	mov	r2, r3
 80071e6:	2300      	movs	r3, #0
 80071e8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f0:	4619      	mov	r1, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f8:	461a      	mov	r2, r3
 80071fa:	680b      	ldr	r3, [r1, #0]
 80071fc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	2b01      	cmp	r3, #1
 8007202:	d10c      	bne.n	800721e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007206:	2b00      	cmp	r3, #0
 8007208:	d104      	bne.n	8007214 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800720a:	2100      	movs	r1, #0
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f965 	bl	80074dc <USB_SetDevSpeed>
 8007212:	e008      	b.n	8007226 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007214:	2101      	movs	r1, #1
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f960 	bl	80074dc <USB_SetDevSpeed>
 800721c:	e003      	b.n	8007226 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800721e:	2103      	movs	r1, #3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f95b 	bl	80074dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007226:	2110      	movs	r1, #16
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f8f3 	bl	8007414 <USB_FlushTxFifo>
 800722e:	4603      	mov	r3, r0
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f91f 	bl	800747c <USB_FlushRxFifo>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d001      	beq.n	8007248 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724e:	461a      	mov	r2, r3
 8007250:	2300      	movs	r3, #0
 8007252:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800725a:	461a      	mov	r2, r3
 800725c:	2300      	movs	r3, #0
 800725e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007266:	461a      	mov	r2, r3
 8007268:	2300      	movs	r3, #0
 800726a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800726c:	2300      	movs	r3, #0
 800726e:	613b      	str	r3, [r7, #16]
 8007270:	e043      	b.n	80072fa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007284:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007288:	d118      	bne.n	80072bc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800729c:	461a      	mov	r2, r3
 800729e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80072a2:	6013      	str	r3, [r2, #0]
 80072a4:	e013      	b.n	80072ce <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b2:	461a      	mov	r2, r3
 80072b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80072b8:	6013      	str	r3, [r2, #0]
 80072ba:	e008      	b.n	80072ce <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	015a      	lsls	r2, r3, #5
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4413      	add	r3, r2
 80072c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c8:	461a      	mov	r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	015a      	lsls	r2, r3, #5
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	4413      	add	r3, r2
 80072d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072da:	461a      	mov	r2, r3
 80072dc:	2300      	movs	r3, #0
 80072de:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	015a      	lsls	r2, r3, #5
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ec:	461a      	mov	r2, r3
 80072ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	3301      	adds	r3, #1
 80072f8:	613b      	str	r3, [r7, #16]
 80072fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fc:	693a      	ldr	r2, [r7, #16]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d3b7      	bcc.n	8007272 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007302:	2300      	movs	r3, #0
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	e043      	b.n	8007390 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800731a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800731e:	d118      	bne.n	8007352 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007332:	461a      	mov	r2, r3
 8007334:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	e013      	b.n	8007364 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007348:	461a      	mov	r2, r3
 800734a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	e008      	b.n	8007364 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800735e:	461a      	mov	r2, r3
 8007360:	2300      	movs	r3, #0
 8007362:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4413      	add	r3, r2
 800736c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007370:	461a      	mov	r2, r3
 8007372:	2300      	movs	r3, #0
 8007374:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	4413      	add	r3, r2
 800737e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007382:	461a      	mov	r2, r3
 8007384:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007388:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	3301      	adds	r3, #1
 800738e:	613b      	str	r3, [r7, #16]
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	429a      	cmp	r2, r3
 8007396:	d3b7      	bcc.n	8007308 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800739e:	691b      	ldr	r3, [r3, #16]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073a6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073aa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80073b8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d105      	bne.n	80073cc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f043 0210 	orr.w	r2, r3, #16
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	4b0e      	ldr	r3, [pc, #56]	; (800740c <USB_DevInit+0x2b4>)
 80073d2:	4313      	orrs	r3, r2
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80073d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d005      	beq.n	80073ea <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	f043 0208 	orr.w	r2, r3, #8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80073ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d105      	bne.n	80073fc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699a      	ldr	r2, [r3, #24]
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <USB_DevInit+0x2b8>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3718      	adds	r7, #24
 8007402:	46bd      	mov	sp, r7
 8007404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007408:	b004      	add	sp, #16
 800740a:	4770      	bx	lr
 800740c:	803c3800 	.word	0x803c3800
 8007410:	40000004 	.word	0x40000004

08007414 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	4a13      	ldr	r2, [pc, #76]	; (8007478 <USB_FlushTxFifo+0x64>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d901      	bls.n	8007434 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007430:	2303      	movs	r3, #3
 8007432:	e01b      	b.n	800746c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	daf2      	bge.n	8007422 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	019b      	lsls	r3, r3, #6
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	3301      	adds	r3, #1
 8007450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4a08      	ldr	r2, [pc, #32]	; (8007478 <USB_FlushTxFifo+0x64>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d901      	bls.n	800745e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800745a:	2303      	movs	r3, #3
 800745c:	e006      	b.n	800746c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b20      	cmp	r3, #32
 8007468:	d0f0      	beq.n	800744c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	00030d40 	.word	0x00030d40

0800747c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007484:	2300      	movs	r3, #0
 8007486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	3301      	adds	r3, #1
 800748c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4a11      	ldr	r2, [pc, #68]	; (80074d8 <USB_FlushRxFifo+0x5c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d901      	bls.n	800749a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e018      	b.n	80074cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	daf2      	bge.n	8007488 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2210      	movs	r2, #16
 80074aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3301      	adds	r3, #1
 80074b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	4a08      	ldr	r2, [pc, #32]	; (80074d8 <USB_FlushRxFifo+0x5c>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d901      	bls.n	80074be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e006      	b.n	80074cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d0f0      	beq.n	80074ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	00030d40 	.word	0x00030d40

080074dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	68f9      	ldr	r1, [r7, #12]
 80074f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074fc:	4313      	orrs	r3, r2
 80074fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3714      	adds	r7, #20
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800750e:	b480      	push	{r7}
 8007510:	b087      	sub	sp, #28
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f003 0306 	and.w	r3, r3, #6
 8007526:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d102      	bne.n	8007534 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800752e:	2300      	movs	r3, #0
 8007530:	75fb      	strb	r3, [r7, #23]
 8007532:	e00a      	b.n	800754a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d002      	beq.n	8007540 <USB_GetDevSpeed+0x32>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b06      	cmp	r3, #6
 800753e:	d102      	bne.n	8007546 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007540:	2302      	movs	r3, #2
 8007542:	75fb      	strb	r3, [r7, #23]
 8007544:	e001      	b.n	800754a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007546:	230f      	movs	r3, #15
 8007548:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800754a:	7dfb      	ldrb	r3, [r7, #23]
}
 800754c:	4618      	mov	r0, r3
 800754e:	371c      	adds	r7, #28
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d139      	bne.n	80075e8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	2101      	movs	r1, #1
 8007586:	fa01 f303 	lsl.w	r3, r1, r3
 800758a:	b29b      	uxth	r3, r3
 800758c:	68f9      	ldr	r1, [r7, #12]
 800758e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007592:	4313      	orrs	r3, r2
 8007594:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d153      	bne.n	8007654 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	791b      	ldrb	r3, [r3, #4]
 80075c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	059b      	lsls	r3, r3, #22
 80075ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	0159      	lsls	r1, r3, #5
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	440b      	add	r3, r1
 80075da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075de:	4619      	mov	r1, r3
 80075e0:	4b20      	ldr	r3, [pc, #128]	; (8007664 <USB_ActivateEndpoint+0x10c>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	600b      	str	r3, [r1, #0]
 80075e6:	e035      	b.n	8007654 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075ee:	69da      	ldr	r2, [r3, #28]
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	f003 030f 	and.w	r3, r3, #15
 80075f8:	2101      	movs	r1, #1
 80075fa:	fa01 f303 	lsl.w	r3, r1, r3
 80075fe:	041b      	lsls	r3, r3, #16
 8007600:	68f9      	ldr	r1, [r7, #12]
 8007602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007606:	4313      	orrs	r3, r2
 8007608:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d119      	bne.n	8007654 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	791b      	ldrb	r3, [r3, #4]
 800763a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800763c:	430b      	orrs	r3, r1
 800763e:	431a      	orrs	r2, r3
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	0159      	lsls	r1, r3, #5
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	440b      	add	r3, r1
 8007648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764c:	4619      	mov	r1, r3
 800764e:	4b05      	ldr	r3, [pc, #20]	; (8007664 <USB_ActivateEndpoint+0x10c>)
 8007650:	4313      	orrs	r3, r2
 8007652:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3714      	adds	r7, #20
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	10008000 	.word	0x10008000

08007668 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	2b01      	cmp	r3, #1
 8007682:	d161      	bne.n	8007748 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007696:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800769a:	d11f      	bne.n	80076dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	2101      	movs	r1, #1
 80076ee:	fa01 f303 	lsl.w	r3, r1, r3
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	43db      	mvns	r3, r3
 80076f6:	68f9      	ldr	r1, [r7, #12]
 80076f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076fc:	4013      	ands	r3, r2
 80076fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	f003 030f 	and.w	r3, r3, #15
 8007710:	2101      	movs	r1, #1
 8007712:	fa01 f303 	lsl.w	r3, r1, r3
 8007716:	b29b      	uxth	r3, r3
 8007718:	43db      	mvns	r3, r3
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007720:	4013      	ands	r3, r2
 8007722:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	0159      	lsls	r1, r3, #5
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	440b      	add	r3, r1
 800773a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773e:	4619      	mov	r1, r3
 8007740:	4b35      	ldr	r3, [pc, #212]	; (8007818 <USB_DeactivateEndpoint+0x1b0>)
 8007742:	4013      	ands	r3, r2
 8007744:	600b      	str	r3, [r1, #0]
 8007746:	e060      	b.n	800780a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800775a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800775e:	d11f      	bne.n	80077a0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	0151      	lsls	r1, r2, #5
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	440a      	add	r2, r1
 8007776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800777a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800777e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	015a      	lsls	r2, r3, #5
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68ba      	ldr	r2, [r7, #8]
 8007790:	0151      	lsls	r1, r2, #5
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	440a      	add	r2, r1
 8007796:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800779a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800779e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	f003 030f 	and.w	r3, r3, #15
 80077b0:	2101      	movs	r1, #1
 80077b2:	fa01 f303 	lsl.w	r3, r1, r3
 80077b6:	041b      	lsls	r3, r3, #16
 80077b8:	43db      	mvns	r3, r3
 80077ba:	68f9      	ldr	r1, [r7, #12]
 80077bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077c0:	4013      	ands	r3, r2
 80077c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	f003 030f 	and.w	r3, r3, #15
 80077d4:	2101      	movs	r1, #1
 80077d6:	fa01 f303 	lsl.w	r3, r1, r3
 80077da:	041b      	lsls	r3, r3, #16
 80077dc:	43db      	mvns	r3, r3
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077e4:	4013      	ands	r3, r2
 80077e6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	0159      	lsls	r1, r3, #5
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	440b      	add	r3, r1
 80077fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007802:	4619      	mov	r1, r3
 8007804:	4b05      	ldr	r3, [pc, #20]	; (800781c <USB_DeactivateEndpoint+0x1b4>)
 8007806:	4013      	ands	r3, r2
 8007808:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	ec337800 	.word	0xec337800
 800781c:	eff37800 	.word	0xeff37800

08007820 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af02      	add	r7, sp, #8
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4613      	mov	r3, r2
 800782c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	785b      	ldrb	r3, [r3, #1]
 800783c:	2b01      	cmp	r3, #1
 800783e:	f040 8163 	bne.w	8007b08 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d132      	bne.n	80078b0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	015a      	lsls	r2, r3, #5
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	4413      	add	r3, r2
 8007852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	0159      	lsls	r1, r3, #5
 800785c:	69fb      	ldr	r3, [r7, #28]
 800785e:	440b      	add	r3, r1
 8007860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007864:	4619      	mov	r1, r3
 8007866:	4ba5      	ldr	r3, [pc, #660]	; (8007afc <USB_EPStartXfer+0x2dc>)
 8007868:	4013      	ands	r3, r2
 800786a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	69ba      	ldr	r2, [r7, #24]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	69fa      	ldr	r2, [r7, #28]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800788a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	0159      	lsls	r1, r3, #5
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	440b      	add	r3, r1
 80078a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a6:	4619      	mov	r1, r3
 80078a8:	4b95      	ldr	r3, [pc, #596]	; (8007b00 <USB_EPStartXfer+0x2e0>)
 80078aa:	4013      	ands	r3, r2
 80078ac:	610b      	str	r3, [r1, #16]
 80078ae:	e074      	b.n	800799a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	691a      	ldr	r2, [r3, #16]
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	0159      	lsls	r1, r3, #5
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	440b      	add	r3, r1
 80078c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ca:	4619      	mov	r1, r3
 80078cc:	4b8c      	ldr	r3, [pc, #560]	; (8007b00 <USB_EPStartXfer+0x2e0>)
 80078ce:	4013      	ands	r3, r2
 80078d0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	0159      	lsls	r1, r3, #5
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	440b      	add	r3, r1
 80078e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ec:	4619      	mov	r1, r3
 80078ee:	4b83      	ldr	r3, [pc, #524]	; (8007afc <USB_EPStartXfer+0x2dc>)
 80078f0:	4013      	ands	r3, r2
 80078f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80078f4:	69bb      	ldr	r3, [r7, #24]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007900:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	6999      	ldr	r1, [r3, #24]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	440b      	add	r3, r1
 800790c:	1e59      	subs	r1, r3, #1
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	fbb1 f3f3 	udiv	r3, r1, r3
 8007916:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007918:	4b7a      	ldr	r3, [pc, #488]	; (8007b04 <USB_EPStartXfer+0x2e4>)
 800791a:	400b      	ands	r3, r1
 800791c:	69b9      	ldr	r1, [r7, #24]
 800791e:	0148      	lsls	r0, r1, #5
 8007920:	69f9      	ldr	r1, [r7, #28]
 8007922:	4401      	add	r1, r0
 8007924:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007928:	4313      	orrs	r3, r2
 800792a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007938:	691a      	ldr	r2, [r3, #16]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	699b      	ldr	r3, [r3, #24]
 800793e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007942:	69b9      	ldr	r1, [r7, #24]
 8007944:	0148      	lsls	r0, r1, #5
 8007946:	69f9      	ldr	r1, [r7, #28]
 8007948:	4401      	add	r1, r0
 800794a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800794e:	4313      	orrs	r3, r2
 8007950:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	791b      	ldrb	r3, [r3, #4]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d11f      	bne.n	800799a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	015a      	lsls	r2, r3, #5
 800795e:	69fb      	ldr	r3, [r7, #28]
 8007960:	4413      	add	r3, r2
 8007962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	69ba      	ldr	r2, [r7, #24]
 800796a:	0151      	lsls	r1, r2, #5
 800796c:	69fa      	ldr	r2, [r7, #28]
 800796e:	440a      	add	r2, r1
 8007970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007974:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007978:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	015a      	lsls	r2, r3, #5
 800797e:	69fb      	ldr	r3, [r7, #28]
 8007980:	4413      	add	r3, r2
 8007982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	0151      	lsls	r1, r2, #5
 800798c:	69fa      	ldr	r2, [r7, #28]
 800798e:	440a      	add	r2, r1
 8007990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007998:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d14b      	bne.n	8007a38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d009      	beq.n	80079bc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079b4:	461a      	mov	r2, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	791b      	ldrb	r3, [r3, #4]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d128      	bne.n	8007a16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d110      	bne.n	80079f6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	e00f      	b.n	8007a16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079f6:	69bb      	ldr	r3, [r7, #24]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	0151      	lsls	r1, r2, #5
 8007a08:	69fa      	ldr	r2, [r7, #28]
 8007a0a:	440a      	add	r2, r1
 8007a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	0151      	lsls	r1, r2, #5
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	440a      	add	r2, r1
 8007a2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a34:	6013      	str	r3, [r2, #0]
 8007a36:	e137      	b.n	8007ca8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a38:	69bb      	ldr	r3, [r7, #24]
 8007a3a:	015a      	lsls	r2, r3, #5
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	4413      	add	r3, r2
 8007a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	0151      	lsls	r1, r2, #5
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	440a      	add	r2, r1
 8007a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	791b      	ldrb	r3, [r3, #4]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d015      	beq.n	8007a8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 811f 	beq.w	8007ca8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	781b      	ldrb	r3, [r3, #0]
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007a80:	69f9      	ldr	r1, [r7, #28]
 8007a82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a86:	4313      	orrs	r3, r2
 8007a88:	634b      	str	r3, [r1, #52]	; 0x34
 8007a8a:	e10d      	b.n	8007ca8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d110      	bne.n	8007abe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	e00f      	b.n	8007ade <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007adc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6919      	ldr	r1, [r3, #16]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	781a      	ldrb	r2, [r3, #0]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	b298      	uxth	r0, r3
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	4603      	mov	r3, r0
 8007af2:	68f8      	ldr	r0, [r7, #12]
 8007af4:	f000 faea 	bl	80080cc <USB_WritePacket>
 8007af8:	e0d6      	b.n	8007ca8 <USB_EPStartXfer+0x488>
 8007afa:	bf00      	nop
 8007afc:	e007ffff 	.word	0xe007ffff
 8007b00:	fff80000 	.word	0xfff80000
 8007b04:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b14:	691a      	ldr	r2, [r3, #16]
 8007b16:	69bb      	ldr	r3, [r7, #24]
 8007b18:	0159      	lsls	r1, r3, #5
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	440b      	add	r3, r1
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	4619      	mov	r1, r3
 8007b24:	4b63      	ldr	r3, [pc, #396]	; (8007cb4 <USB_EPStartXfer+0x494>)
 8007b26:	4013      	ands	r3, r2
 8007b28:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	015a      	lsls	r2, r3, #5
 8007b2e:	69fb      	ldr	r3, [r7, #28]
 8007b30:	4413      	add	r3, r2
 8007b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b36:	691a      	ldr	r2, [r3, #16]
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	0159      	lsls	r1, r3, #5
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	440b      	add	r3, r1
 8007b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b44:	4619      	mov	r1, r3
 8007b46:	4b5c      	ldr	r3, [pc, #368]	; (8007cb8 <USB_EPStartXfer+0x498>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d123      	bne.n	8007b9c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	015a      	lsls	r2, r3, #5
 8007b58:	69fb      	ldr	r3, [r7, #28]
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b60:	691a      	ldr	r2, [r3, #16]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b6a:	69b9      	ldr	r1, [r7, #24]
 8007b6c:	0148      	lsls	r0, r1, #5
 8007b6e:	69f9      	ldr	r1, [r7, #28]
 8007b70:	4401      	add	r1, r0
 8007b72:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b76:	4313      	orrs	r3, r2
 8007b78:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	69ba      	ldr	r2, [r7, #24]
 8007b8a:	0151      	lsls	r1, r2, #5
 8007b8c:	69fa      	ldr	r2, [r7, #28]
 8007b8e:	440a      	add	r2, r1
 8007b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b98:	6113      	str	r3, [r2, #16]
 8007b9a:	e037      	b.n	8007c0c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	699a      	ldr	r2, [r3, #24]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	1e5a      	subs	r2, r3, #1
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	8afa      	ldrh	r2, [r7, #22]
 8007bb8:	fb03 f202 	mul.w	r2, r3, r2
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bcc:	691a      	ldr	r2, [r3, #16]
 8007bce:	8afb      	ldrh	r3, [r7, #22]
 8007bd0:	04d9      	lsls	r1, r3, #19
 8007bd2:	4b3a      	ldr	r3, [pc, #232]	; (8007cbc <USB_EPStartXfer+0x49c>)
 8007bd4:	400b      	ands	r3, r1
 8007bd6:	69b9      	ldr	r1, [r7, #24]
 8007bd8:	0148      	lsls	r0, r1, #5
 8007bda:	69f9      	ldr	r1, [r7, #28]
 8007bdc:	4401      	add	r1, r0
 8007bde:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007be2:	4313      	orrs	r3, r2
 8007be4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007be6:	69bb      	ldr	r3, [r7, #24]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	69fb      	ldr	r3, [r7, #28]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf2:	691a      	ldr	r2, [r3, #16]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bfc:	69b9      	ldr	r1, [r7, #24]
 8007bfe:	0148      	lsls	r0, r1, #5
 8007c00:	69f9      	ldr	r1, [r7, #28]
 8007c02:	4401      	add	r1, r0
 8007c04:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d10d      	bne.n	8007c2e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d009      	beq.n	8007c2e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6919      	ldr	r1, [r3, #16]
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	015a      	lsls	r2, r3, #5
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	4413      	add	r3, r2
 8007c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2a:	460a      	mov	r2, r1
 8007c2c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	791b      	ldrb	r3, [r3, #4]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d128      	bne.n	8007c88 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d110      	bne.n	8007c68 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c64:	6013      	str	r3, [r2, #0]
 8007c66:	e00f      	b.n	8007c88 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	0151      	lsls	r1, r2, #5
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c86:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ca6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3720      	adds	r7, #32
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	fff80000 	.word	0xfff80000
 8007cb8:	e007ffff 	.word	0xe007ffff
 8007cbc:	1ff80000 	.word	0x1ff80000

08007cc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	785b      	ldrb	r3, [r3, #1]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	f040 80ce 	bne.w	8007e7e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d132      	bne.n	8007d50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	015a      	lsls	r2, r3, #5
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	4413      	add	r3, r2
 8007cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	0159      	lsls	r1, r3, #5
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	440b      	add	r3, r1
 8007d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d04:	4619      	mov	r1, r3
 8007d06:	4b9a      	ldr	r3, [pc, #616]	; (8007f70 <USB_EP0StartXfer+0x2b0>)
 8007d08:	4013      	ands	r3, r2
 8007d0a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	691b      	ldr	r3, [r3, #16]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	0151      	lsls	r1, r2, #5
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	440a      	add	r2, r1
 8007d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007d2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	0159      	lsls	r1, r3, #5
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	440b      	add	r3, r1
 8007d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d46:	4619      	mov	r1, r3
 8007d48:	4b8a      	ldr	r3, [pc, #552]	; (8007f74 <USB_EP0StartXfer+0x2b4>)
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	610b      	str	r3, [r1, #16]
 8007d4e:	e04e      	b.n	8007dee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d5c:	691a      	ldr	r2, [r3, #16]
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	0159      	lsls	r1, r3, #5
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	440b      	add	r3, r1
 8007d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4b81      	ldr	r3, [pc, #516]	; (8007f74 <USB_EP0StartXfer+0x2b4>)
 8007d6e:	4013      	ands	r3, r2
 8007d70:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	015a      	lsls	r2, r3, #5
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	0159      	lsls	r1, r3, #5
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	440b      	add	r3, r1
 8007d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	4b78      	ldr	r3, [pc, #480]	; (8007f70 <USB_EP0StartXfer+0x2b0>)
 8007d90:	4013      	ands	r3, r2
 8007d92:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	699a      	ldr	r2, [r3, #24]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	68db      	ldr	r3, [r3, #12]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d903      	bls.n	8007da8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	68da      	ldr	r2, [r3, #12]
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	0151      	lsls	r1, r2, #5
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	440a      	add	r2, r1
 8007dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd4:	691a      	ldr	r2, [r3, #16]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dde:	6939      	ldr	r1, [r7, #16]
 8007de0:	0148      	lsls	r0, r1, #5
 8007de2:	6979      	ldr	r1, [r7, #20]
 8007de4:	4401      	add	r1, r0
 8007de6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007dea:	4313      	orrs	r3, r2
 8007dec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007dee:	79fb      	ldrb	r3, [r7, #7]
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d11e      	bne.n	8007e32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d009      	beq.n	8007e10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e08:	461a      	mov	r2, r3
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	695b      	ldr	r3, [r3, #20]
 8007e0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	015a      	lsls	r2, r3, #5
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	0151      	lsls	r1, r2, #5
 8007e22:	697a      	ldr	r2, [r7, #20]
 8007e24:	440a      	add	r2, r1
 8007e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e2e:	6013      	str	r3, [r2, #0]
 8007e30:	e097      	b.n	8007f62 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	693a      	ldr	r2, [r7, #16]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	699b      	ldr	r3, [r3, #24]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 8083 	beq.w	8007f62 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	f003 030f 	and.w	r3, r3, #15
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e72:	6979      	ldr	r1, [r7, #20]
 8007e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	634b      	str	r3, [r1, #52]	; 0x34
 8007e7c:	e071      	b.n	8007f62 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8a:	691a      	ldr	r2, [r3, #16]
 8007e8c:	693b      	ldr	r3, [r7, #16]
 8007e8e:	0159      	lsls	r1, r3, #5
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	440b      	add	r3, r1
 8007e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e98:	4619      	mov	r1, r3
 8007e9a:	4b36      	ldr	r3, [pc, #216]	; (8007f74 <USB_EP0StartXfer+0x2b4>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	0159      	lsls	r1, r3, #5
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	440b      	add	r3, r1
 8007eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4b2c      	ldr	r3, [pc, #176]	; (8007f70 <USB_EP0StartXfer+0x2b0>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d003      	beq.n	8007ed2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	68da      	ldr	r2, [r3, #12]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	68da      	ldr	r2, [r3, #12]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	015a      	lsls	r2, r3, #5
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	0151      	lsls	r1, r2, #5
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	440a      	add	r2, r1
 8007ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	015a      	lsls	r2, r3, #5
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	4413      	add	r3, r2
 8007f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f06:	691a      	ldr	r2, [r3, #16]
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f10:	6939      	ldr	r1, [r7, #16]
 8007f12:	0148      	lsls	r0, r1, #5
 8007f14:	6979      	ldr	r1, [r7, #20]
 8007f16:	4401      	add	r1, r0
 8007f18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007f20:	79fb      	ldrb	r3, [r7, #7]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d10d      	bne.n	8007f42 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	691b      	ldr	r3, [r3, #16]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d009      	beq.n	8007f42 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	6919      	ldr	r1, [r3, #16]
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3e:	460a      	mov	r2, r1
 8007f40:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	015a      	lsls	r2, r3, #5
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	4413      	add	r3, r2
 8007f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	693a      	ldr	r2, [r7, #16]
 8007f52:	0151      	lsls	r1, r2, #5
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	440a      	add	r2, r1
 8007f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007f60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	e007ffff 	.word	0xe007ffff
 8007f74:	fff80000 	.word	0xfff80000

08007f78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	785b      	ldrb	r3, [r3, #1]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d14a      	bne.n	800802c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007faa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fae:	f040 8086 	bne.w	80080be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	7812      	ldrb	r2, [r2, #0]
 8007fc6:	0151      	lsls	r1, r2, #5
 8007fc8:	693a      	ldr	r2, [r7, #16]
 8007fca:	440a      	add	r2, r1
 8007fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007fd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	015a      	lsls	r2, r3, #5
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	4413      	add	r3, r2
 8007fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	7812      	ldrb	r2, [r2, #0]
 8007fea:	0151      	lsls	r1, r2, #5
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	440a      	add	r2, r1
 8007ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ff8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f242 7210 	movw	r2, #10000	; 0x2710
 8008006:	4293      	cmp	r3, r2
 8008008:	d902      	bls.n	8008010 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800800a:	2301      	movs	r3, #1
 800800c:	75fb      	strb	r3, [r7, #23]
          break;
 800800e:	e056      	b.n	80080be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008028:	d0e7      	beq.n	8007ffa <USB_EPStopXfer+0x82>
 800802a:	e048      	b.n	80080be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008040:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008044:	d13b      	bne.n	80080be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	7812      	ldrb	r2, [r2, #0]
 800805a:	0151      	lsls	r1, r2, #5
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	440a      	add	r2, r1
 8008060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008064:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008068:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	7812      	ldrb	r2, [r2, #0]
 800807e:	0151      	lsls	r1, r2, #5
 8008080:	693a      	ldr	r2, [r7, #16]
 8008082:	440a      	add	r2, r1
 8008084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008088:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800808c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3301      	adds	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f242 7210 	movw	r2, #10000	; 0x2710
 800809a:	4293      	cmp	r3, r2
 800809c:	d902      	bls.n	80080a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	75fb      	strb	r3, [r7, #23]
          break;
 80080a2:	e00c      	b.n	80080be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80080b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080bc:	d0e7      	beq.n	800808e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	371c      	adds	r7, #28
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr

080080cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b089      	sub	sp, #36	; 0x24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4611      	mov	r1, r2
 80080d8:	461a      	mov	r2, r3
 80080da:	460b      	mov	r3, r1
 80080dc:	71fb      	strb	r3, [r7, #7]
 80080de:	4613      	mov	r3, r2
 80080e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d123      	bne.n	800813a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080f2:	88bb      	ldrh	r3, [r7, #4]
 80080f4:	3303      	adds	r3, #3
 80080f6:	089b      	lsrs	r3, r3, #2
 80080f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080fa:	2300      	movs	r3, #0
 80080fc:	61bb      	str	r3, [r7, #24]
 80080fe:	e018      	b.n	8008132 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008100:	79fb      	ldrb	r3, [r7, #7]
 8008102:	031a      	lsls	r2, r3, #12
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	4413      	add	r3, r2
 8008108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800810c:	461a      	mov	r2, r3
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	3301      	adds	r3, #1
 8008118:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	3301      	adds	r3, #1
 800811e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	3301      	adds	r3, #1
 8008124:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	3301      	adds	r3, #1
 800812a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	3301      	adds	r3, #1
 8008130:	61bb      	str	r3, [r7, #24]
 8008132:	69ba      	ldr	r2, [r7, #24]
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	429a      	cmp	r2, r3
 8008138:	d3e2      	bcc.n	8008100 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3724      	adds	r7, #36	; 0x24
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008148:	b480      	push	{r7}
 800814a:	b08b      	sub	sp, #44	; 0x2c
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	4613      	mov	r3, r2
 8008154:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800815e:	88fb      	ldrh	r3, [r7, #6]
 8008160:	089b      	lsrs	r3, r3, #2
 8008162:	b29b      	uxth	r3, r3
 8008164:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008166:	88fb      	ldrh	r3, [r7, #6]
 8008168:	f003 0303 	and.w	r3, r3, #3
 800816c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800816e:	2300      	movs	r3, #0
 8008170:	623b      	str	r3, [r7, #32]
 8008172:	e014      	b.n	800819e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	3301      	adds	r3, #1
 8008184:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	3301      	adds	r3, #1
 800818a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800818c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818e:	3301      	adds	r3, #1
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	3301      	adds	r3, #1
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008198:	6a3b      	ldr	r3, [r7, #32]
 800819a:	3301      	adds	r3, #1
 800819c:	623b      	str	r3, [r7, #32]
 800819e:	6a3a      	ldr	r2, [r7, #32]
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d3e6      	bcc.n	8008174 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80081a6:	8bfb      	ldrh	r3, [r7, #30]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01e      	beq.n	80081ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081b6:	461a      	mov	r2, r3
 80081b8:	f107 0310 	add.w	r3, r7, #16
 80081bc:	6812      	ldr	r2, [r2, #0]
 80081be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	6a3b      	ldr	r3, [r7, #32]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	fa22 f303 	lsr.w	r3, r2, r3
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	701a      	strb	r2, [r3, #0]
      i++;
 80081d2:	6a3b      	ldr	r3, [r7, #32]
 80081d4:	3301      	adds	r3, #1
 80081d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	3301      	adds	r3, #1
 80081dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081de:	8bfb      	ldrh	r3, [r7, #30]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081e4:	8bfb      	ldrh	r3, [r7, #30]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d1ea      	bne.n	80081c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	372c      	adds	r7, #44	; 0x2c
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	785b      	ldrb	r3, [r3, #1]
 8008210:	2b01      	cmp	r3, #1
 8008212:	d12c      	bne.n	800826e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	4413      	add	r3, r2
 800821c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	2b00      	cmp	r3, #0
 8008224:	db12      	blt.n	800824c <USB_EPSetStall+0x54>
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00f      	beq.n	800824c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	015a      	lsls	r2, r3, #5
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4413      	add	r3, r2
 8008234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	0151      	lsls	r1, r2, #5
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	440a      	add	r2, r1
 8008242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008246:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800824a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	0151      	lsls	r1, r2, #5
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	440a      	add	r2, r1
 8008262:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800826a:	6013      	str	r3, [r2, #0]
 800826c:	e02b      	b.n	80082c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	015a      	lsls	r2, r3, #5
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	4413      	add	r3, r2
 8008276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	db12      	blt.n	80082a6 <USB_EPSetStall+0xae>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00f      	beq.n	80082a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	4413      	add	r3, r2
 800828e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68ba      	ldr	r2, [r7, #8]
 8008296:	0151      	lsls	r1, r2, #5
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	440a      	add	r2, r1
 800829c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80082a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	0151      	lsls	r1, r2, #5
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	440a      	add	r2, r1
 80082bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80082c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3714      	adds	r7, #20
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	785b      	ldrb	r3, [r3, #1]
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d128      	bne.n	8008342 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	015a      	lsls	r2, r3, #5
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	4413      	add	r3, r2
 80082f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	0151      	lsls	r1, r2, #5
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	440a      	add	r2, r1
 8008306:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800830a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800830e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	791b      	ldrb	r3, [r3, #4]
 8008314:	2b03      	cmp	r3, #3
 8008316:	d003      	beq.n	8008320 <USB_EPClearStall+0x4c>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	791b      	ldrb	r3, [r3, #4]
 800831c:	2b02      	cmp	r3, #2
 800831e:	d138      	bne.n	8008392 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	68ba      	ldr	r2, [r7, #8]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	440a      	add	r2, r1
 8008336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	e027      	b.n	8008392 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	0151      	lsls	r1, r2, #5
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	440a      	add	r2, r1
 8008358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800835c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008360:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	791b      	ldrb	r3, [r3, #4]
 8008366:	2b03      	cmp	r3, #3
 8008368:	d003      	beq.n	8008372 <USB_EPClearStall+0x9e>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	791b      	ldrb	r3, [r3, #4]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d10f      	bne.n	8008392 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	015a      	lsls	r2, r3, #5
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	4413      	add	r3, r2
 800837a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	0151      	lsls	r1, r2, #5
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	440a      	add	r2, r1
 8008388:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800838c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008390:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr

080083a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68fa      	ldr	r2, [r7, #12]
 80083ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80083c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	78fb      	ldrb	r3, [r7, #3]
 80083ce:	011b      	lsls	r3, r3, #4
 80083d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80083d4:	68f9      	ldr	r1, [r7, #12]
 80083d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083da:	4313      	orrs	r3, r2
 80083dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008406:	f023 0303 	bic.w	r3, r3, #3
 800840a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800841a:	f023 0302 	bic.w	r3, r3, #2
 800841e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3714      	adds	r7, #20
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800842e:	b480      	push	{r7}
 8008430:	b085      	sub	sp, #20
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008448:	f023 0303 	bic.w	r3, r3, #3
 800844c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800845c:	f043 0302 	orr.w	r3, r3, #2
 8008460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	4013      	ands	r3, r2
 8008486:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008488:	68fb      	ldr	r3, [r7, #12]
}
 800848a:	4618      	mov	r0, r3
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008496:	b480      	push	{r7}
 8008498:	b085      	sub	sp, #20
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b2:	69db      	ldr	r3, [r3, #28]
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	4013      	ands	r3, r2
 80084b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	0c1b      	lsrs	r3, r3, #16
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b085      	sub	sp, #20
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084dc:	699b      	ldr	r3, [r3, #24]
 80084de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	4013      	ands	r3, r2
 80084ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	b29b      	uxth	r3, r3
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3714      	adds	r7, #20
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80084fe:	b480      	push	{r7}
 8008500:	b085      	sub	sp, #20
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800850e:	78fb      	ldrb	r3, [r7, #3]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008524:	695b      	ldr	r3, [r3, #20]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	4013      	ands	r3, r2
 800852a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800852c:	68bb      	ldr	r3, [r7, #8]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008538:	4770      	bx	lr

0800853a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800853a:	b480      	push	{r7}
 800853c:	b087      	sub	sp, #28
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	460b      	mov	r3, r1
 8008544:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008550:	691b      	ldr	r3, [r3, #16]
 8008552:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800855e:	78fb      	ldrb	r3, [r7, #3]
 8008560:	f003 030f 	and.w	r3, r3, #15
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	fa22 f303 	lsr.w	r3, r2, r3
 800856a:	01db      	lsls	r3, r3, #7
 800856c:	b2db      	uxtb	r3, r3
 800856e:	693a      	ldr	r2, [r7, #16]
 8008570:	4313      	orrs	r3, r2
 8008572:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008574:	78fb      	ldrb	r3, [r7, #3]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	693a      	ldr	r2, [r7, #16]
 8008584:	4013      	ands	r3, r2
 8008586:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008588:	68bb      	ldr	r3, [r7, #8]
}
 800858a:	4618      	mov	r0, r3
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr

08008596 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008596:	b480      	push	{r7}
 8008598:	b083      	sub	sp, #12
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	695b      	ldr	r3, [r3, #20]
 80085a2:	f003 0301 	and.w	r3, r3, #1
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	370c      	adds	r7, #12
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ce:	4619      	mov	r1, r3
 80085d0:	4b09      	ldr	r3, [pc, #36]	; (80085f8 <USB_ActivateSetup+0x44>)
 80085d2:	4013      	ands	r3, r2
 80085d4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr
 80085f8:	fffff800 	.word	0xfffff800

080085fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b087      	sub	sp, #28
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	460b      	mov	r3, r1
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	333c      	adds	r3, #60	; 0x3c
 8008612:	3304      	adds	r3, #4
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	4a26      	ldr	r2, [pc, #152]	; (80086b4 <USB_EP0_OutStart+0xb8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d90a      	bls.n	8008636 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800862c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008630:	d101      	bne.n	8008636 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e037      	b.n	80086a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800863c:	461a      	mov	r2, r3
 800863e:	2300      	movs	r3, #0
 8008640:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008648:	691b      	ldr	r3, [r3, #16]
 800864a:	697a      	ldr	r2, [r7, #20]
 800864c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008654:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008664:	f043 0318 	orr.w	r3, r3, #24
 8008668:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008678:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800867c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800867e:	7afb      	ldrb	r3, [r7, #11]
 8008680:	2b01      	cmp	r3, #1
 8008682:	d10f      	bne.n	80086a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800869e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80086a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	371c      	adds	r7, #28
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	4f54300a 	.word	0x4f54300a

080086b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086c0:	2300      	movs	r3, #0
 80086c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3301      	adds	r3, #1
 80086c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4a13      	ldr	r2, [pc, #76]	; (800871c <USB_CoreReset+0x64>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d901      	bls.n	80086d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80086d2:	2303      	movs	r3, #3
 80086d4:	e01b      	b.n	800870e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	daf2      	bge.n	80086c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	f043 0201 	orr.w	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3301      	adds	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4a09      	ldr	r2, [pc, #36]	; (800871c <USB_CoreReset+0x64>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d901      	bls.n	8008700 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e006      	b.n	800870e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b01      	cmp	r3, #1
 800870a:	d0f0      	beq.n	80086ee <USB_CoreReset+0x36>

  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	00030d40 	.word	0x00030d40

08008720 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	460b      	mov	r3, r1
 800872a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800872c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008730:	f013 f944 	bl	801b9bc <malloc>
 8008734:	4603      	mov	r3, r0
 8008736:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d109      	bne.n	8008752 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	32b0      	adds	r2, #176	; 0xb0
 8008748:	2100      	movs	r1, #0
 800874a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800874e:	2302      	movs	r3, #2
 8008750:	e0d4      	b.n	80088fc <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008752:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008756:	2100      	movs	r1, #0
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f013 fe57 	bl	801c40c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	32b0      	adds	r2, #176	; 0xb0
 8008768:	68f9      	ldr	r1, [r7, #12]
 800876a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	32b0      	adds	r2, #176	; 0xb0
 8008778:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	7c1b      	ldrb	r3, [r3, #16]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d138      	bne.n	80087fc <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800878a:	4b5e      	ldr	r3, [pc, #376]	; (8008904 <USBD_CDC_Init+0x1e4>)
 800878c:	7819      	ldrb	r1, [r3, #0]
 800878e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008792:	2202      	movs	r2, #2
 8008794:	6878      	ldr	r0, [r7, #4]
 8008796:	f005 f926 	bl	800d9e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800879a:	4b5a      	ldr	r3, [pc, #360]	; (8008904 <USBD_CDC_Init+0x1e4>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	f003 020f 	and.w	r2, r3, #15
 80087a2:	6879      	ldr	r1, [r7, #4]
 80087a4:	4613      	mov	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	440b      	add	r3, r1
 80087ae:	3324      	adds	r3, #36	; 0x24
 80087b0:	2201      	movs	r2, #1
 80087b2:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80087b4:	4b54      	ldr	r3, [pc, #336]	; (8008908 <USBD_CDC_Init+0x1e8>)
 80087b6:	7819      	ldrb	r1, [r3, #0]
 80087b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087bc:	2202      	movs	r2, #2
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f005 f911 	bl	800d9e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80087c4:	4b50      	ldr	r3, [pc, #320]	; (8008908 <USBD_CDC_Init+0x1e8>)
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	f003 020f 	and.w	r2, r3, #15
 80087cc:	6879      	ldr	r1, [r7, #4]
 80087ce:	4613      	mov	r3, r2
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	4413      	add	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	440b      	add	r3, r1
 80087d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087dc:	2201      	movs	r2, #1
 80087de:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80087e0:	4b4a      	ldr	r3, [pc, #296]	; (800890c <USBD_CDC_Init+0x1ec>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	f003 020f 	and.w	r2, r3, #15
 80087e8:	6879      	ldr	r1, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	440b      	add	r3, r1
 80087f4:	3326      	adds	r3, #38	; 0x26
 80087f6:	2210      	movs	r2, #16
 80087f8:	801a      	strh	r2, [r3, #0]
 80087fa:	e035      	b.n	8008868 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087fc:	4b41      	ldr	r3, [pc, #260]	; (8008904 <USBD_CDC_Init+0x1e4>)
 80087fe:	7819      	ldrb	r1, [r3, #0]
 8008800:	2340      	movs	r3, #64	; 0x40
 8008802:	2202      	movs	r2, #2
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f005 f8ee 	bl	800d9e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800880a:	4b3e      	ldr	r3, [pc, #248]	; (8008904 <USBD_CDC_Init+0x1e4>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f003 020f 	and.w	r2, r3, #15
 8008812:	6879      	ldr	r1, [r7, #4]
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	440b      	add	r3, r1
 800881e:	3324      	adds	r3, #36	; 0x24
 8008820:	2201      	movs	r2, #1
 8008822:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008824:	4b38      	ldr	r3, [pc, #224]	; (8008908 <USBD_CDC_Init+0x1e8>)
 8008826:	7819      	ldrb	r1, [r3, #0]
 8008828:	2340      	movs	r3, #64	; 0x40
 800882a:	2202      	movs	r2, #2
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f005 f8da 	bl	800d9e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008832:	4b35      	ldr	r3, [pc, #212]	; (8008908 <USBD_CDC_Init+0x1e8>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800884a:	2201      	movs	r2, #1
 800884c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800884e:	4b2f      	ldr	r3, [pc, #188]	; (800890c <USBD_CDC_Init+0x1ec>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	f003 020f 	and.w	r2, r3, #15
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	3326      	adds	r3, #38	; 0x26
 8008864:	2210      	movs	r2, #16
 8008866:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008868:	4b28      	ldr	r3, [pc, #160]	; (800890c <USBD_CDC_Init+0x1ec>)
 800886a:	7819      	ldrb	r1, [r3, #0]
 800886c:	2308      	movs	r3, #8
 800886e:	2203      	movs	r2, #3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f005 f8b8 	bl	800d9e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008876:	4b25      	ldr	r3, [pc, #148]	; (800890c <USBD_CDC_Init+0x1ec>)
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	f003 020f 	and.w	r2, r3, #15
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	4613      	mov	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4413      	add	r3, r2
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	440b      	add	r3, r1
 800888a:	3324      	adds	r3, #36	; 0x24
 800888c:	2201      	movs	r2, #1
 800888e:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	33b0      	adds	r3, #176	; 0xb0
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 80088c6:	2302      	movs	r3, #2
 80088c8:	e018      	b.n	80088fc <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	7c1b      	ldrb	r3, [r3, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d10a      	bne.n	80088e8 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088d2:	4b0d      	ldr	r3, [pc, #52]	; (8008908 <USBD_CDC_Init+0x1e8>)
 80088d4:	7819      	ldrb	r1, [r3, #0]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f005 f96f 	bl	800dbc4 <USBD_LL_PrepareReceive>
 80088e6:	e008      	b.n	80088fa <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80088e8:	4b07      	ldr	r3, [pc, #28]	; (8008908 <USBD_CDC_Init+0x1e8>)
 80088ea:	7819      	ldrb	r1, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80088f2:	2340      	movs	r3, #64	; 0x40
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f005 f965 	bl	800dbc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20000097 	.word	0x20000097
 8008908:	20000098 	.word	0x20000098
 800890c:	20000099 	.word	0x20000099

08008910 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	460b      	mov	r3, r1
 800891a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800891c:	4b3a      	ldr	r3, [pc, #232]	; (8008a08 <USBD_CDC_DeInit+0xf8>)
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f005 f885 	bl	800da32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008928:	4b37      	ldr	r3, [pc, #220]	; (8008a08 <USBD_CDC_DeInit+0xf8>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	f003 020f 	and.w	r2, r3, #15
 8008930:	6879      	ldr	r1, [r7, #4]
 8008932:	4613      	mov	r3, r2
 8008934:	009b      	lsls	r3, r3, #2
 8008936:	4413      	add	r3, r2
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	440b      	add	r3, r1
 800893c:	3324      	adds	r3, #36	; 0x24
 800893e:	2200      	movs	r2, #0
 8008940:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008942:	4b32      	ldr	r3, [pc, #200]	; (8008a0c <USBD_CDC_DeInit+0xfc>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f005 f872 	bl	800da32 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800894e:	4b2f      	ldr	r3, [pc, #188]	; (8008a0c <USBD_CDC_DeInit+0xfc>)
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	f003 020f 	and.w	r2, r3, #15
 8008956:	6879      	ldr	r1, [r7, #4]
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008966:	2200      	movs	r2, #0
 8008968:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800896a:	4b29      	ldr	r3, [pc, #164]	; (8008a10 <USBD_CDC_DeInit+0x100>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f005 f85e 	bl	800da32 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008976:	4b26      	ldr	r3, [pc, #152]	; (8008a10 <USBD_CDC_DeInit+0x100>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	f003 020f 	and.w	r2, r3, #15
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	3324      	adds	r3, #36	; 0x24
 800898c:	2200      	movs	r2, #0
 800898e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008990:	4b1f      	ldr	r3, [pc, #124]	; (8008a10 <USBD_CDC_DeInit+0x100>)
 8008992:	781b      	ldrb	r3, [r3, #0]
 8008994:	f003 020f 	and.w	r2, r3, #15
 8008998:	6879      	ldr	r1, [r7, #4]
 800899a:	4613      	mov	r3, r2
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4413      	add	r3, r2
 80089a0:	009b      	lsls	r3, r3, #2
 80089a2:	440b      	add	r3, r1
 80089a4:	3326      	adds	r3, #38	; 0x26
 80089a6:	2200      	movs	r2, #0
 80089a8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	32b0      	adds	r2, #176	; 0xb0
 80089b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01f      	beq.n	80089fc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	33b0      	adds	r3, #176	; 0xb0
 80089c6:	009b      	lsls	r3, r3, #2
 80089c8:	4413      	add	r3, r2
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	32b0      	adds	r2, #176	; 0xb0
 80089da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089de:	4618      	mov	r0, r3
 80089e0:	f012 fff4 	bl	801b9cc <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	32b0      	adds	r2, #176	; 0xb0
 80089ee:	2100      	movs	r1, #0
 80089f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3708      	adds	r7, #8
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20000097 	.word	0x20000097
 8008a0c:	20000098 	.word	0x20000098
 8008a10:	20000099 	.word	0x20000099

08008a14 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b086      	sub	sp, #24
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	32b0      	adds	r2, #176	; 0xb0
 8008a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008a32:	2300      	movs	r3, #0
 8008a34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a36:	2300      	movs	r3, #0
 8008a38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e0bf      	b.n	8008bc4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d050      	beq.n	8008af2 <USBD_CDC_Setup+0xde>
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	f040 80af 	bne.w	8008bb4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	88db      	ldrh	r3, [r3, #6]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d03a      	beq.n	8008ad4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	b25b      	sxtb	r3, r3
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da1b      	bge.n	8008aa0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	33b0      	adds	r3, #176	; 0xb0
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	685b      	ldr	r3, [r3, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	683a      	ldr	r2, [r7, #0]
 8008a7c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008a7e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008a80:	683a      	ldr	r2, [r7, #0]
 8008a82:	88d2      	ldrh	r2, [r2, #6]
 8008a84:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	88db      	ldrh	r3, [r3, #6]
 8008a8a:	2b07      	cmp	r3, #7
 8008a8c:	bf28      	it	cs
 8008a8e:	2307      	movcs	r3, #7
 8008a90:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	89fa      	ldrh	r2, [r7, #14]
 8008a96:	4619      	mov	r1, r3
 8008a98:	6878      	ldr	r0, [r7, #4]
 8008a9a:	f001 fd6d 	bl	800a578 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008a9e:	e090      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	785a      	ldrb	r2, [r3, #1]
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	88db      	ldrh	r3, [r3, #6]
 8008aae:	2b3f      	cmp	r3, #63	; 0x3f
 8008ab0:	d803      	bhi.n	8008aba <USBD_CDC_Setup+0xa6>
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	88db      	ldrh	r3, [r3, #6]
 8008ab6:	b2da      	uxtb	r2, r3
 8008ab8:	e000      	b.n	8008abc <USBD_CDC_Setup+0xa8>
 8008aba:	2240      	movs	r2, #64	; 0x40
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008ac2:	6939      	ldr	r1, [r7, #16]
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008aca:	461a      	mov	r2, r3
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f001 fd7f 	bl	800a5d0 <USBD_CtlPrepareRx>
      break;
 8008ad2:	e076      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	33b0      	adds	r3, #176	; 0xb0
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	4413      	add	r3, r2
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	683a      	ldr	r2, [r7, #0]
 8008ae8:	7850      	ldrb	r0, [r2, #1]
 8008aea:	2200      	movs	r2, #0
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	4798      	blx	r3
      break;
 8008af0:	e067      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	2b0b      	cmp	r3, #11
 8008af8:	d851      	bhi.n	8008b9e <USBD_CDC_Setup+0x18a>
 8008afa:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <USBD_CDC_Setup+0xec>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b31 	.word	0x08008b31
 8008b04:	08008bad 	.word	0x08008bad
 8008b08:	08008b9f 	.word	0x08008b9f
 8008b0c:	08008b9f 	.word	0x08008b9f
 8008b10:	08008b9f 	.word	0x08008b9f
 8008b14:	08008b9f 	.word	0x08008b9f
 8008b18:	08008b9f 	.word	0x08008b9f
 8008b1c:	08008b9f 	.word	0x08008b9f
 8008b20:	08008b9f 	.word	0x08008b9f
 8008b24:	08008b9f 	.word	0x08008b9f
 8008b28:	08008b5b 	.word	0x08008b5b
 8008b2c:	08008b85 	.word	0x08008b85
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d107      	bne.n	8008b4c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008b3c:	f107 030a 	add.w	r3, r7, #10
 8008b40:	2202      	movs	r2, #2
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 fd17 	bl	800a578 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b4a:	e032      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b4c:	6839      	ldr	r1, [r7, #0]
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 fca1 	bl	800a496 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b54:	2303      	movs	r3, #3
 8008b56:	75fb      	strb	r3, [r7, #23]
          break;
 8008b58:	e02b      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d107      	bne.n	8008b76 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008b66:	f107 030d 	add.w	r3, r7, #13
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f001 fd02 	bl	800a578 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008b74:	e01d      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008b76:	6839      	ldr	r1, [r7, #0]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f001 fc8c 	bl	800a496 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b7e:	2303      	movs	r3, #3
 8008b80:	75fb      	strb	r3, [r7, #23]
          break;
 8008b82:	e016      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	d00f      	beq.n	8008bb0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008b90:	6839      	ldr	r1, [r7, #0]
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f001 fc7f 	bl	800a496 <USBD_CtlError>
            ret = USBD_FAIL;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008b9c:	e008      	b.n	8008bb0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f001 fc78 	bl	800a496 <USBD_CtlError>
          ret = USBD_FAIL;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	75fb      	strb	r3, [r7, #23]
          break;
 8008baa:	e002      	b.n	8008bb2 <USBD_CDC_Setup+0x19e>
          break;
 8008bac:	bf00      	nop
 8008bae:	e008      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>
          break;
 8008bb0:	bf00      	nop
      }
      break;
 8008bb2:	e006      	b.n	8008bc2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f001 fc6d 	bl	800a496 <USBD_CtlError>
      ret = USBD_FAIL;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc0:	bf00      	nop
  }

  return (uint8_t)ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3718      	adds	r7, #24
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008bde:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	32b0      	adds	r2, #176	; 0xb0
 8008bea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d101      	bne.n	8008bf6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e065      	b.n	8008cc2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	32b0      	adds	r2, #176	; 0xb0
 8008c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c04:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	f003 020f 	and.w	r2, r3, #15
 8008c0c:	6879      	ldr	r1, [r7, #4]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	009b      	lsls	r3, r3, #2
 8008c16:	440b      	add	r3, r1
 8008c18:	3318      	adds	r3, #24
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d02f      	beq.n	8008c80 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 020f 	and.w	r2, r3, #15
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	009b      	lsls	r3, r3, #2
 8008c30:	440b      	add	r3, r1
 8008c32:	3318      	adds	r3, #24
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	78fb      	ldrb	r3, [r7, #3]
 8008c38:	f003 010f 	and.w	r1, r3, #15
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	00db      	lsls	r3, r3, #3
 8008c42:	440b      	add	r3, r1
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4403      	add	r3, r0
 8008c48:	3348      	adds	r3, #72	; 0x48
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	fbb2 f1f3 	udiv	r1, r2, r3
 8008c50:	fb01 f303 	mul.w	r3, r1, r3
 8008c54:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d112      	bne.n	8008c80 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008c5a:	78fb      	ldrb	r3, [r7, #3]
 8008c5c:	f003 020f 	and.w	r2, r3, #15
 8008c60:	6879      	ldr	r1, [r7, #4]
 8008c62:	4613      	mov	r3, r2
 8008c64:	009b      	lsls	r3, r3, #2
 8008c66:	4413      	add	r3, r2
 8008c68:	009b      	lsls	r3, r3, #2
 8008c6a:	440b      	add	r3, r1
 8008c6c:	3318      	adds	r3, #24
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008c72:	78f9      	ldrb	r1, [r7, #3]
 8008c74:	2300      	movs	r3, #0
 8008c76:	2200      	movs	r2, #0
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f004 ff82 	bl	800db82 <USBD_LL_Transmit>
 8008c7e:	e01f      	b.n	8008cc0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	2200      	movs	r2, #0
 8008c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	33b0      	adds	r3, #176	; 0xb0
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d010      	beq.n	8008cc0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	33b0      	adds	r3, #176	; 0xb0
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	4413      	add	r3, r2
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	691b      	ldr	r3, [r3, #16]
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008cbc:	78fa      	ldrb	r2, [r7, #3]
 8008cbe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008cc0:	2300      	movs	r3, #0
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	32b0      	adds	r2, #176	; 0xb0
 8008ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	32b0      	adds	r2, #176	; 0xb0
 8008cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	e01a      	b.n	8008d32 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008cfc:	78fb      	ldrb	r3, [r7, #3]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f004 ff80 	bl	800dc06 <USBD_LL_GetRxDataSize>
 8008d06:	4602      	mov	r2, r0
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	33b0      	adds	r3, #176	; 0xb0
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	68fa      	ldr	r2, [r7, #12]
 8008d22:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008d26:	68fa      	ldr	r2, [r7, #12]
 8008d28:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	32b0      	adds	r2, #176	; 0xb0
 8008d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d101      	bne.n	8008d5c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	e025      	b.n	8008da8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	33b0      	adds	r3, #176	; 0xb0
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d01a      	beq.n	8008da6 <USBD_CDC_EP0_RxReady+0x6c>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d76:	2bff      	cmp	r3, #255	; 0xff
 8008d78:	d015      	beq.n	8008da6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	33b0      	adds	r3, #176	; 0xb0
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008d92:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008d9a:	b292      	uxth	r2, r2
 8008d9c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	22ff      	movs	r2, #255	; 0xff
 8008da2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008da6:	2300      	movs	r3, #0
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008db8:	2182      	movs	r1, #130	; 0x82
 8008dba:	4818      	ldr	r0, [pc, #96]	; (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dbc:	f000 fd09 	bl	80097d2 <USBD_GetEpDesc>
 8008dc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008dc2:	2101      	movs	r1, #1
 8008dc4:	4815      	ldr	r0, [pc, #84]	; (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dc6:	f000 fd04 	bl	80097d2 <USBD_GetEpDesc>
 8008dca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008dcc:	2181      	movs	r1, #129	; 0x81
 8008dce:	4813      	ldr	r0, [pc, #76]	; (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008dd0:	f000 fcff 	bl	80097d2 <USBD_GetEpDesc>
 8008dd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d002      	beq.n	8008de2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2210      	movs	r2, #16
 8008de0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d006      	beq.n	8008df6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2200      	movs	r2, #0
 8008dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008df0:	711a      	strb	r2, [r3, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d006      	beq.n	8008e0a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e04:	711a      	strb	r2, [r3, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2243      	movs	r2, #67	; 0x43
 8008e0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e10:	4b02      	ldr	r3, [pc, #8]	; (8008e1c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	20000054 	.word	0x20000054

08008e20 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e28:	2182      	movs	r1, #130	; 0x82
 8008e2a:	4818      	ldr	r0, [pc, #96]	; (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e2c:	f000 fcd1 	bl	80097d2 <USBD_GetEpDesc>
 8008e30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e32:	2101      	movs	r1, #1
 8008e34:	4815      	ldr	r0, [pc, #84]	; (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e36:	f000 fccc 	bl	80097d2 <USBD_GetEpDesc>
 8008e3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e3c:	2181      	movs	r1, #129	; 0x81
 8008e3e:	4813      	ldr	r0, [pc, #76]	; (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e40:	f000 fcc7 	bl	80097d2 <USBD_GetEpDesc>
 8008e44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	711a      	strb	r2, [r3, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f042 0202 	orr.w	r2, r2, #2
 8008e64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	711a      	strb	r2, [r3, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f042 0202 	orr.w	r2, r2, #2
 8008e78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2243      	movs	r2, #67	; 0x43
 8008e7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e80:	4b02      	ldr	r3, [pc, #8]	; (8008e8c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000054 	.word	0x20000054

08008e90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e98:	2182      	movs	r1, #130	; 0x82
 8008e9a:	4818      	ldr	r0, [pc, #96]	; (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008e9c:	f000 fc99 	bl	80097d2 <USBD_GetEpDesc>
 8008ea0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	4815      	ldr	r0, [pc, #84]	; (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008ea6:	f000 fc94 	bl	80097d2 <USBD_GetEpDesc>
 8008eaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008eac:	2181      	movs	r1, #129	; 0x81
 8008eae:	4813      	ldr	r0, [pc, #76]	; (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008eb0:	f000 fc8f 	bl	80097d2 <USBD_GetEpDesc>
 8008eb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2210      	movs	r2, #16
 8008ec0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d006      	beq.n	8008ed6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ed0:	711a      	strb	r2, [r3, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d006      	beq.n	8008eea <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ee4:	711a      	strb	r2, [r3, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2243      	movs	r2, #67	; 0x43
 8008eee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ef0:	4b02      	ldr	r3, [pc, #8]	; (8008efc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000054 	.word	0x20000054

08008f00 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b083      	sub	sp, #12
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	220a      	movs	r2, #10
 8008f0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f0e:	4b03      	ldr	r3, [pc, #12]	; (8008f1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr
 8008f1c:	20000010 	.word	0x20000010

08008f20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d101      	bne.n	8008f34 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e009      	b.n	8008f48 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	33b0      	adds	r3, #176	; 0xb0
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr

08008f54 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b087      	sub	sp, #28
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	32b0      	adds	r2, #176	; 0xb0
 8008f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f6e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d101      	bne.n	8008f7a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e008      	b.n	8008f8c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	687a      	ldr	r2, [r7, #4]
 8008f86:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008f8a:	2300      	movs	r3, #0
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	371c      	adds	r7, #28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	32b0      	adds	r2, #176	; 0xb0
 8008fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fb0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e004      	b.n	8008fc6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3714      	adds	r7, #20
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
	...

08008fd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	32b0      	adds	r2, #176	; 0xb0
 8008fe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	32b0      	adds	r2, #176	; 0xb0
 8008ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d101      	bne.n	8009002 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008ffe:	2303      	movs	r3, #3
 8009000:	e018      	b.n	8009034 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	7c1b      	ldrb	r3, [r3, #16]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10a      	bne.n	8009020 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800900a:	4b0c      	ldr	r3, [pc, #48]	; (800903c <USBD_CDC_ReceivePacket+0x68>)
 800900c:	7819      	ldrb	r1, [r3, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009014:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f004 fdd3 	bl	800dbc4 <USBD_LL_PrepareReceive>
 800901e:	e008      	b.n	8009032 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009020:	4b06      	ldr	r3, [pc, #24]	; (800903c <USBD_CDC_ReceivePacket+0x68>)
 8009022:	7819      	ldrb	r1, [r3, #0]
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f004 fdc9 	bl	800dbc4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	20000098 	.word	0x20000098

08009040 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	60f8      	str	r0, [r7, #12]
 8009048:	60b9      	str	r1, [r7, #8]
 800904a:	4613      	mov	r3, r2
 800904c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009054:	2303      	movs	r3, #3
 8009056:	e01f      	b.n	8009098 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	2200      	movs	r2, #0
 800906c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d003      	beq.n	800907e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	68ba      	ldr	r2, [r7, #8]
 800907a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	79fa      	ldrb	r2, [r7, #7]
 800908a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f004 fc43 	bl	800d918 <USBD_LL_Init>
 8009092:	4603      	mov	r3, r0
 8009094:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009096:	7dfb      	ldrb	r3, [r7, #23]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3718      	adds	r7, #24
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d101      	bne.n	80090b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e025      	b.n	8009104 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	683a      	ldr	r2, [r7, #0]
 80090bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	32ae      	adds	r2, #174	; 0xae
 80090ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00f      	beq.n	80090f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	32ae      	adds	r2, #174	; 0xae
 80090de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e4:	f107 020e 	add.w	r2, r7, #14
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	4602      	mov	r2, r0
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f004 fc4b 	bl	800d9b0 <USBD_LL_Start>
 800911a:	4603      	mov	r3, r0
}
 800911c:	4618      	mov	r0, r3
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800912c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	460b      	mov	r3, r1
 8009144:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009146:	2300      	movs	r3, #0
 8009148:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009150:	2b00      	cmp	r3, #0
 8009152:	d009      	beq.n	8009168 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	78fa      	ldrb	r2, [r7, #3]
 800915e:	4611      	mov	r1, r2
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	4798      	blx	r3
 8009164:	4603      	mov	r3, r0
 8009166:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009168:	7bfb      	ldrb	r3, [r7, #15]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b084      	sub	sp, #16
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	4611      	mov	r1, r2
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	4798      	blx	r3
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d001      	beq.n	800919c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009198:	2303      	movs	r3, #3
 800919a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800919c:	7bfb      	ldrb	r3, [r7, #15]
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091b6:	6839      	ldr	r1, [r7, #0]
 80091b8:	4618      	mov	r0, r3
 80091ba:	f001 f932 	bl	800a422 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2201      	movs	r2, #1
 80091c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80091cc:	461a      	mov	r2, r3
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80091da:	f003 031f 	and.w	r3, r3, #31
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d01a      	beq.n	8009218 <USBD_LL_SetupStage+0x72>
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d822      	bhi.n	800922c <USBD_LL_SetupStage+0x86>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d002      	beq.n	80091f0 <USBD_LL_SetupStage+0x4a>
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d00a      	beq.n	8009204 <USBD_LL_SetupStage+0x5e>
 80091ee:	e01d      	b.n	800922c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fb5f 	bl	80098bc <USBD_StdDevReq>
 80091fe:	4603      	mov	r3, r0
 8009200:	73fb      	strb	r3, [r7, #15]
      break;
 8009202:	e020      	b.n	8009246 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800920a:	4619      	mov	r1, r3
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f000 fbc7 	bl	80099a0 <USBD_StdItfReq>
 8009212:	4603      	mov	r3, r0
 8009214:	73fb      	strb	r3, [r7, #15]
      break;
 8009216:	e016      	b.n	8009246 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800921e:	4619      	mov	r1, r3
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fc29 	bl	8009a78 <USBD_StdEPReq>
 8009226:	4603      	mov	r3, r0
 8009228:	73fb      	strb	r3, [r7, #15]
      break;
 800922a:	e00c      	b.n	8009246 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009232:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009236:	b2db      	uxtb	r3, r3
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f004 fc18 	bl	800da70 <USBD_LL_StallEP>
 8009240:	4603      	mov	r3, r0
 8009242:	73fb      	strb	r3, [r7, #15]
      break;
 8009244:	bf00      	nop
  }

  return ret;
 8009246:	7bfb      	ldrb	r3, [r7, #15]
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}

08009250 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b086      	sub	sp, #24
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	460b      	mov	r3, r1
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d16e      	bne.n	8009346 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800926e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009276:	2b03      	cmp	r3, #3
 8009278:	f040 8098 	bne.w	80093ac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	689a      	ldr	r2, [r3, #8]
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	429a      	cmp	r2, r3
 8009286:	d913      	bls.n	80092b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	689a      	ldr	r2, [r3, #8]
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	1ad2      	subs	r2, r2, r3
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009296:	693b      	ldr	r3, [r7, #16]
 8009298:	68da      	ldr	r2, [r3, #12]
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	4293      	cmp	r3, r2
 80092a0:	bf28      	it	cs
 80092a2:	4613      	movcs	r3, r2
 80092a4:	461a      	mov	r2, r3
 80092a6:	6879      	ldr	r1, [r7, #4]
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f001 f9ae 	bl	800a60a <USBD_CtlContinueRx>
 80092ae:	e07d      	b.n	80093ac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80092b6:	f003 031f 	and.w	r3, r3, #31
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d014      	beq.n	80092e8 <USBD_LL_DataOutStage+0x98>
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d81d      	bhi.n	80092fe <USBD_LL_DataOutStage+0xae>
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d002      	beq.n	80092cc <USBD_LL_DataOutStage+0x7c>
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d003      	beq.n	80092d2 <USBD_LL_DataOutStage+0x82>
 80092ca:	e018      	b.n	80092fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	75bb      	strb	r3, [r7, #22]
            break;
 80092d0:	e018      	b.n	8009304 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	4619      	mov	r1, r3
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 fa5e 	bl	800979e <USBD_CoreFindIF>
 80092e2:	4603      	mov	r3, r0
 80092e4:	75bb      	strb	r3, [r7, #22]
            break;
 80092e6:	e00d      	b.n	8009304 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	4619      	mov	r1, r3
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 fa60 	bl	80097b8 <USBD_CoreFindEP>
 80092f8:	4603      	mov	r3, r0
 80092fa:	75bb      	strb	r3, [r7, #22]
            break;
 80092fc:	e002      	b.n	8009304 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	75bb      	strb	r3, [r7, #22]
            break;
 8009302:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009304:	7dbb      	ldrb	r3, [r7, #22]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d119      	bne.n	800933e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b03      	cmp	r3, #3
 8009314:	d113      	bne.n	800933e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009316:	7dba      	ldrb	r2, [r7, #22]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	32ae      	adds	r2, #174	; 0xae
 800931c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d00b      	beq.n	800933e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009326:	7dba      	ldrb	r2, [r7, #22]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800932e:	7dba      	ldrb	r2, [r7, #22]
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	32ae      	adds	r2, #174	; 0xae
 8009334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009338:	691b      	ldr	r3, [r3, #16]
 800933a:	68f8      	ldr	r0, [r7, #12]
 800933c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f001 f974 	bl	800a62c <USBD_CtlSendStatus>
 8009344:	e032      	b.n	80093ac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009346:	7afb      	ldrb	r3, [r7, #11]
 8009348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800934c:	b2db      	uxtb	r3, r3
 800934e:	4619      	mov	r1, r3
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 fa31 	bl	80097b8 <USBD_CoreFindEP>
 8009356:	4603      	mov	r3, r0
 8009358:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800935a:	7dbb      	ldrb	r3, [r7, #22]
 800935c:	2bff      	cmp	r3, #255	; 0xff
 800935e:	d025      	beq.n	80093ac <USBD_LL_DataOutStage+0x15c>
 8009360:	7dbb      	ldrb	r3, [r7, #22]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d122      	bne.n	80093ac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b03      	cmp	r3, #3
 8009370:	d117      	bne.n	80093a2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009372:	7dba      	ldrb	r2, [r7, #22]
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	32ae      	adds	r2, #174	; 0xae
 8009378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800937c:	699b      	ldr	r3, [r3, #24]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d00f      	beq.n	80093a2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009382:	7dba      	ldrb	r2, [r7, #22]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800938a:	7dba      	ldrb	r2, [r7, #22]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	32ae      	adds	r2, #174	; 0xae
 8009390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009394:	699b      	ldr	r3, [r3, #24]
 8009396:	7afa      	ldrb	r2, [r7, #11]
 8009398:	4611      	mov	r1, r2
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	4798      	blx	r3
 800939e:	4603      	mov	r3, r0
 80093a0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80093a2:	7dfb      	ldrb	r3, [r7, #23]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d001      	beq.n	80093ac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	e000      	b.n	80093ae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3718      	adds	r7, #24
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b086      	sub	sp, #24
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	60f8      	str	r0, [r7, #12]
 80093be:	460b      	mov	r3, r1
 80093c0:	607a      	str	r2, [r7, #4]
 80093c2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80093c4:	7afb      	ldrb	r3, [r7, #11]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d16f      	bne.n	80094aa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3314      	adds	r3, #20
 80093ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80093d6:	2b02      	cmp	r3, #2
 80093d8:	d15a      	bne.n	8009490 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	689a      	ldr	r2, [r3, #8]
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d914      	bls.n	8009410 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	689a      	ldr	r2, [r3, #8]
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	68db      	ldr	r3, [r3, #12]
 80093ee:	1ad2      	subs	r2, r2, r3
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	461a      	mov	r2, r3
 80093fa:	6879      	ldr	r1, [r7, #4]
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f001 f8d6 	bl	800a5ae <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009402:	2300      	movs	r3, #0
 8009404:	2200      	movs	r2, #0
 8009406:	2100      	movs	r1, #0
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f004 fbdb 	bl	800dbc4 <USBD_LL_PrepareReceive>
 800940e:	e03f      	b.n	8009490 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	68da      	ldr	r2, [r3, #12]
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	429a      	cmp	r2, r3
 800941a:	d11c      	bne.n	8009456 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	685a      	ldr	r2, [r3, #4]
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009424:	429a      	cmp	r2, r3
 8009426:	d316      	bcc.n	8009456 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009432:	429a      	cmp	r2, r3
 8009434:	d20f      	bcs.n	8009456 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009436:	2200      	movs	r2, #0
 8009438:	2100      	movs	r1, #0
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f001 f8b7 	bl	800a5ae <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009448:	2300      	movs	r3, #0
 800944a:	2200      	movs	r2, #0
 800944c:	2100      	movs	r1, #0
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f004 fbb8 	bl	800dbc4 <USBD_LL_PrepareReceive>
 8009454:	e01c      	b.n	8009490 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800945c:	b2db      	uxtb	r3, r3
 800945e:	2b03      	cmp	r3, #3
 8009460:	d10f      	bne.n	8009482 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009468:	68db      	ldr	r3, [r3, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d009      	beq.n	8009482 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	68f8      	ldr	r0, [r7, #12]
 8009480:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009482:	2180      	movs	r1, #128	; 0x80
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f004 faf3 	bl	800da70 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f001 f8e1 	bl	800a652 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d03a      	beq.n	8009510 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7ff fe42 	bl	8009124 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80094a8:	e032      	b.n	8009510 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80094aa:	7afb      	ldrb	r3, [r7, #11]
 80094ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	4619      	mov	r1, r3
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f97f 	bl	80097b8 <USBD_CoreFindEP>
 80094ba:	4603      	mov	r3, r0
 80094bc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094be:	7dfb      	ldrb	r3, [r7, #23]
 80094c0:	2bff      	cmp	r3, #255	; 0xff
 80094c2:	d025      	beq.n	8009510 <USBD_LL_DataInStage+0x15a>
 80094c4:	7dfb      	ldrb	r3, [r7, #23]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d122      	bne.n	8009510 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d11c      	bne.n	8009510 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80094d6:	7dfa      	ldrb	r2, [r7, #23]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	32ae      	adds	r2, #174	; 0xae
 80094dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e0:	695b      	ldr	r3, [r3, #20]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d014      	beq.n	8009510 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80094e6:	7dfa      	ldrb	r2, [r7, #23]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80094ee:	7dfa      	ldrb	r2, [r7, #23]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	32ae      	adds	r2, #174	; 0xae
 80094f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f8:	695b      	ldr	r3, [r3, #20]
 80094fa:	7afa      	ldrb	r2, [r7, #11]
 80094fc:	4611      	mov	r1, r2
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	4798      	blx	r3
 8009502:	4603      	mov	r3, r0
 8009504:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009506:	7dbb      	ldrb	r3, [r7, #22]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d001      	beq.n	8009510 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800950c:	7dbb      	ldrb	r3, [r7, #22]
 800950e:	e000      	b.n	8009512 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3718      	adds	r7, #24
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}

0800951a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800951a:	b580      	push	{r7, lr}
 800951c:	b084      	sub	sp, #16
 800951e:	af00      	add	r7, sp, #0
 8009520:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2201      	movs	r2, #1
 800952a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009552:	2b00      	cmp	r3, #0
 8009554:	d014      	beq.n	8009580 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00e      	beq.n	8009580 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6852      	ldr	r2, [r2, #4]
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	4611      	mov	r1, r2
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	4798      	blx	r3
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800957c:	2303      	movs	r3, #3
 800957e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009580:	2340      	movs	r3, #64	; 0x40
 8009582:	2200      	movs	r2, #0
 8009584:	2100      	movs	r1, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f004 fa2d 	bl	800d9e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2240      	movs	r2, #64	; 0x40
 8009598:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800959c:	2340      	movs	r3, #64	; 0x40
 800959e:	2200      	movs	r2, #0
 80095a0:	2180      	movs	r1, #128	; 0x80
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f004 fa1f 	bl	800d9e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2201      	movs	r2, #1
 80095ac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2240      	movs	r2, #64	; 0x40
 80095b2:	621a      	str	r2, [r3, #32]

  return ret;
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}

080095be <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80095be:	b480      	push	{r7}
 80095c0:	b083      	sub	sp, #12
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
 80095c6:	460b      	mov	r3, r1
 80095c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	78fa      	ldrb	r2, [r7, #3]
 80095ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80095de:	b480      	push	{r7}
 80095e0:	b083      	sub	sp, #12
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095ec:	b2da      	uxtb	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2204      	movs	r2, #4
 80095f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	370c      	adds	r7, #12
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800960a:	b480      	push	{r7}
 800960c:	b083      	sub	sp, #12
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b04      	cmp	r3, #4
 800961c:	d106      	bne.n	800962c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009624:	b2da      	uxtb	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009648:	b2db      	uxtb	r3, r3
 800964a:	2b03      	cmp	r3, #3
 800964c:	d110      	bne.n	8009670 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00b      	beq.n	8009670 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800965e:	69db      	ldr	r3, [r3, #28]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	460b      	mov	r3, r1
 8009684:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	32ae      	adds	r2, #174	; 0xae
 8009690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009698:	2303      	movs	r3, #3
 800969a:	e01c      	b.n	80096d6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d115      	bne.n	80096d4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	32ae      	adds	r2, #174	; 0xae
 80096b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00b      	beq.n	80096d4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	32ae      	adds	r2, #174	; 0xae
 80096c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096ca:	6a1b      	ldr	r3, [r3, #32]
 80096cc:	78fa      	ldrb	r2, [r7, #3]
 80096ce:	4611      	mov	r1, r2
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	460b      	mov	r3, r1
 80096e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	32ae      	adds	r2, #174	; 0xae
 80096f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e01c      	b.n	800973a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009706:	b2db      	uxtb	r3, r3
 8009708:	2b03      	cmp	r3, #3
 800970a:	d115      	bne.n	8009738 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	32ae      	adds	r2, #174	; 0xae
 8009716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971c:	2b00      	cmp	r3, #0
 800971e:	d00b      	beq.n	8009738 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	32ae      	adds	r2, #174	; 0xae
 800972a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009730:	78fa      	ldrb	r2, [r7, #3]
 8009732:	4611      	mov	r1, r2
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009742:	b480      	push	{r7}
 8009744:	b083      	sub	sp, #12
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800974a:	2300      	movs	r3, #0
}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00e      	beq.n	8009794 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	6852      	ldr	r2, [r2, #4]
 8009782:	b2d2      	uxtb	r2, r2
 8009784:	4611      	mov	r1, r2
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
 800978a:	4603      	mov	r3, r0
 800978c:	2b00      	cmp	r3, #0
 800978e:	d001      	beq.n	8009794 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009790:	2303      	movs	r3, #3
 8009792:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009794:	7bfb      	ldrb	r3, [r7, #15]
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}

0800979e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800979e:	b480      	push	{r7}
 80097a0:	b083      	sub	sp, #12
 80097a2:	af00      	add	r7, sp, #0
 80097a4:	6078      	str	r0, [r7, #4]
 80097a6:	460b      	mov	r3, r1
 80097a8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80097aa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	460b      	mov	r3, r1
 80097c2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80097c4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b086      	sub	sp, #24
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	460b      	mov	r3, r1
 80097dc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	885b      	ldrh	r3, [r3, #2]
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d920      	bls.n	800983c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009802:	e013      	b.n	800982c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009804:	f107 030a 	add.w	r3, r7, #10
 8009808:	4619      	mov	r1, r3
 800980a:	6978      	ldr	r0, [r7, #20]
 800980c:	f000 f81b 	bl	8009846 <USBD_GetNextDesc>
 8009810:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	785b      	ldrb	r3, [r3, #1]
 8009816:	2b05      	cmp	r3, #5
 8009818:	d108      	bne.n	800982c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800981e:	693b      	ldr	r3, [r7, #16]
 8009820:	789b      	ldrb	r3, [r3, #2]
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	429a      	cmp	r2, r3
 8009826:	d008      	beq.n	800983a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009828:	2300      	movs	r3, #0
 800982a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	885b      	ldrh	r3, [r3, #2]
 8009830:	b29a      	uxth	r2, r3
 8009832:	897b      	ldrh	r3, [r7, #10]
 8009834:	429a      	cmp	r2, r3
 8009836:	d8e5      	bhi.n	8009804 <USBD_GetEpDesc+0x32>
 8009838:	e000      	b.n	800983c <USBD_GetEpDesc+0x6a>
          break;
 800983a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800983c:	693b      	ldr	r3, [r7, #16]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3718      	adds	r7, #24
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009846:	b480      	push	{r7}
 8009848:	b085      	sub	sp, #20
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	881a      	ldrh	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	b29b      	uxth	r3, r3
 800985e:	4413      	add	r3, r2
 8009860:	b29a      	uxth	r2, r3
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	461a      	mov	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	4413      	add	r3, r2
 8009870:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009872:	68fb      	ldr	r3, [r7, #12]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3714      	adds	r7, #20
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	781b      	ldrb	r3, [r3, #0]
 8009890:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	3301      	adds	r3, #1
 8009896:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	781b      	ldrb	r3, [r3, #0]
 800989c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800989e:	8a3b      	ldrh	r3, [r7, #16]
 80098a0:	021b      	lsls	r3, r3, #8
 80098a2:	b21a      	sxth	r2, r3
 80098a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	b21b      	sxth	r3, r3
 80098ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80098ae:	89fb      	ldrh	r3, [r7, #14]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	371c      	adds	r7, #28
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b084      	sub	sp, #16
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098c6:	2300      	movs	r3, #0
 80098c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80098d2:	2b40      	cmp	r3, #64	; 0x40
 80098d4:	d005      	beq.n	80098e2 <USBD_StdDevReq+0x26>
 80098d6:	2b40      	cmp	r3, #64	; 0x40
 80098d8:	d857      	bhi.n	800998a <USBD_StdDevReq+0xce>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00f      	beq.n	80098fe <USBD_StdDevReq+0x42>
 80098de:	2b20      	cmp	r3, #32
 80098e0:	d153      	bne.n	800998a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	32ae      	adds	r2, #174	; 0xae
 80098ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	6839      	ldr	r1, [r7, #0]
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	4798      	blx	r3
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]
      break;
 80098fc:	e04a      	b.n	8009994 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	785b      	ldrb	r3, [r3, #1]
 8009902:	2b09      	cmp	r3, #9
 8009904:	d83b      	bhi.n	800997e <USBD_StdDevReq+0xc2>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <USBD_StdDevReq+0x50>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	08009961 	.word	0x08009961
 8009910:	08009975 	.word	0x08009975
 8009914:	0800997f 	.word	0x0800997f
 8009918:	0800996b 	.word	0x0800996b
 800991c:	0800997f 	.word	0x0800997f
 8009920:	0800993f 	.word	0x0800993f
 8009924:	08009935 	.word	0x08009935
 8009928:	0800997f 	.word	0x0800997f
 800992c:	08009957 	.word	0x08009957
 8009930:	08009949 	.word	0x08009949
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009934:	6839      	ldr	r1, [r7, #0]
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 fa3c 	bl	8009db4 <USBD_GetDescriptor>
          break;
 800993c:	e024      	b.n	8009988 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fbcb 	bl	800a0dc <USBD_SetAddress>
          break;
 8009946:	e01f      	b.n	8009988 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fc0a 	bl	800a164 <USBD_SetConfig>
 8009950:	4603      	mov	r3, r0
 8009952:	73fb      	strb	r3, [r7, #15]
          break;
 8009954:	e018      	b.n	8009988 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009956:	6839      	ldr	r1, [r7, #0]
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 fcad 	bl	800a2b8 <USBD_GetConfig>
          break;
 800995e:	e013      	b.n	8009988 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009960:	6839      	ldr	r1, [r7, #0]
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 fcde 	bl	800a324 <USBD_GetStatus>
          break;
 8009968:	e00e      	b.n	8009988 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fd0d 	bl	800a38c <USBD_SetFeature>
          break;
 8009972:	e009      	b.n	8009988 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f000 fd31 	bl	800a3de <USBD_ClrFeature>
          break;
 800997c:	e004      	b.n	8009988 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800997e:	6839      	ldr	r1, [r7, #0]
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 fd88 	bl	800a496 <USBD_CtlError>
          break;
 8009986:	bf00      	nop
      }
      break;
 8009988:	e004      	b.n	8009994 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 fd82 	bl	800a496 <USBD_CtlError>
      break;
 8009992:	bf00      	nop
  }

  return ret;
 8009994:	7bfb      	ldrb	r3, [r7, #15]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop

080099a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	781b      	ldrb	r3, [r3, #0]
 80099b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	d005      	beq.n	80099c6 <USBD_StdItfReq+0x26>
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	d852      	bhi.n	8009a64 <USBD_StdItfReq+0xc4>
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <USBD_StdItfReq+0x26>
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d14e      	bne.n	8009a64 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	3b01      	subs	r3, #1
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d840      	bhi.n	8009a56 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	889b      	ldrh	r3, [r3, #4]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d836      	bhi.n	8009a4c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	889b      	ldrh	r3, [r3, #4]
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	4619      	mov	r1, r3
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7ff fed9 	bl	800979e <USBD_CoreFindIF>
 80099ec:	4603      	mov	r3, r0
 80099ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099f0:	7bbb      	ldrb	r3, [r7, #14]
 80099f2:	2bff      	cmp	r3, #255	; 0xff
 80099f4:	d01d      	beq.n	8009a32 <USBD_StdItfReq+0x92>
 80099f6:	7bbb      	ldrb	r3, [r7, #14]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d11a      	bne.n	8009a32 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80099fc:	7bba      	ldrb	r2, [r7, #14]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	32ae      	adds	r2, #174	; 0xae
 8009a02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00f      	beq.n	8009a2c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a0c:	7bba      	ldrb	r2, [r7, #14]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a14:	7bba      	ldrb	r2, [r7, #14]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	32ae      	adds	r2, #174	; 0xae
 8009a1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	6839      	ldr	r1, [r7, #0]
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a2a:	e004      	b.n	8009a36 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009a30:	e001      	b.n	8009a36 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009a32:	2303      	movs	r3, #3
 8009a34:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	88db      	ldrh	r3, [r3, #6]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d110      	bne.n	8009a60 <USBD_StdItfReq+0xc0>
 8009a3e:	7bfb      	ldrb	r3, [r7, #15]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10d      	bne.n	8009a60 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fdf1 	bl	800a62c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009a4a:	e009      	b.n	8009a60 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009a4c:	6839      	ldr	r1, [r7, #0]
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fd21 	bl	800a496 <USBD_CtlError>
          break;
 8009a54:	e004      	b.n	8009a60 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009a56:	6839      	ldr	r1, [r7, #0]
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f000 fd1c 	bl	800a496 <USBD_CtlError>
          break;
 8009a5e:	e000      	b.n	8009a62 <USBD_StdItfReq+0xc2>
          break;
 8009a60:	bf00      	nop
      }
      break;
 8009a62:	e004      	b.n	8009a6e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009a64:	6839      	ldr	r1, [r7, #0]
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fd15 	bl	800a496 <USBD_CtlError>
      break;
 8009a6c:	bf00      	nop
  }

  return ret;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3710      	adds	r7, #16
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	889b      	ldrh	r3, [r3, #4]
 8009a8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009a94:	2b40      	cmp	r3, #64	; 0x40
 8009a96:	d007      	beq.n	8009aa8 <USBD_StdEPReq+0x30>
 8009a98:	2b40      	cmp	r3, #64	; 0x40
 8009a9a:	f200 817f 	bhi.w	8009d9c <USBD_StdEPReq+0x324>
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d02a      	beq.n	8009af8 <USBD_StdEPReq+0x80>
 8009aa2:	2b20      	cmp	r3, #32
 8009aa4:	f040 817a 	bne.w	8009d9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009aa8:	7bbb      	ldrb	r3, [r7, #14]
 8009aaa:	4619      	mov	r1, r3
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7ff fe83 	bl	80097b8 <USBD_CoreFindEP>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ab6:	7b7b      	ldrb	r3, [r7, #13]
 8009ab8:	2bff      	cmp	r3, #255	; 0xff
 8009aba:	f000 8174 	beq.w	8009da6 <USBD_StdEPReq+0x32e>
 8009abe:	7b7b      	ldrb	r3, [r7, #13]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f040 8170 	bne.w	8009da6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009ac6:	7b7a      	ldrb	r2, [r7, #13]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009ace:	7b7a      	ldrb	r2, [r7, #13]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	32ae      	adds	r2, #174	; 0xae
 8009ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f000 8163 	beq.w	8009da6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009ae0:	7b7a      	ldrb	r2, [r7, #13]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	32ae      	adds	r2, #174	; 0xae
 8009ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	4798      	blx	r3
 8009af2:	4603      	mov	r3, r0
 8009af4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009af6:	e156      	b.n	8009da6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	785b      	ldrb	r3, [r3, #1]
 8009afc:	2b03      	cmp	r3, #3
 8009afe:	d008      	beq.n	8009b12 <USBD_StdEPReq+0x9a>
 8009b00:	2b03      	cmp	r3, #3
 8009b02:	f300 8145 	bgt.w	8009d90 <USBD_StdEPReq+0x318>
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 809b 	beq.w	8009c42 <USBD_StdEPReq+0x1ca>
 8009b0c:	2b01      	cmp	r3, #1
 8009b0e:	d03c      	beq.n	8009b8a <USBD_StdEPReq+0x112>
 8009b10:	e13e      	b.n	8009d90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d002      	beq.n	8009b24 <USBD_StdEPReq+0xac>
 8009b1e:	2b03      	cmp	r3, #3
 8009b20:	d016      	beq.n	8009b50 <USBD_StdEPReq+0xd8>
 8009b22:	e02c      	b.n	8009b7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b24:	7bbb      	ldrb	r3, [r7, #14]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00d      	beq.n	8009b46 <USBD_StdEPReq+0xce>
 8009b2a:	7bbb      	ldrb	r3, [r7, #14]
 8009b2c:	2b80      	cmp	r3, #128	; 0x80
 8009b2e:	d00a      	beq.n	8009b46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b30:	7bbb      	ldrb	r3, [r7, #14]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f003 ff9b 	bl	800da70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009b3a:	2180      	movs	r1, #128	; 0x80
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f003 ff97 	bl	800da70 <USBD_LL_StallEP>
 8009b42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009b44:	e020      	b.n	8009b88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009b46:	6839      	ldr	r1, [r7, #0]
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fca4 	bl	800a496 <USBD_CtlError>
              break;
 8009b4e:	e01b      	b.n	8009b88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	885b      	ldrh	r3, [r3, #2]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10e      	bne.n	8009b76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009b58:	7bbb      	ldrb	r3, [r7, #14]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00b      	beq.n	8009b76 <USBD_StdEPReq+0xfe>
 8009b5e:	7bbb      	ldrb	r3, [r7, #14]
 8009b60:	2b80      	cmp	r3, #128	; 0x80
 8009b62:	d008      	beq.n	8009b76 <USBD_StdEPReq+0xfe>
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	88db      	ldrh	r3, [r3, #6]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d104      	bne.n	8009b76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009b6c:	7bbb      	ldrb	r3, [r7, #14]
 8009b6e:	4619      	mov	r1, r3
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f003 ff7d 	bl	800da70 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fd58 	bl	800a62c <USBD_CtlSendStatus>

              break;
 8009b7c:	e004      	b.n	8009b88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009b7e:	6839      	ldr	r1, [r7, #0]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 fc88 	bl	800a496 <USBD_CtlError>
              break;
 8009b86:	bf00      	nop
          }
          break;
 8009b88:	e107      	b.n	8009d9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d002      	beq.n	8009b9c <USBD_StdEPReq+0x124>
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d016      	beq.n	8009bc8 <USBD_StdEPReq+0x150>
 8009b9a:	e04b      	b.n	8009c34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00d      	beq.n	8009bbe <USBD_StdEPReq+0x146>
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	2b80      	cmp	r3, #128	; 0x80
 8009ba6:	d00a      	beq.n	8009bbe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f003 ff5f 	bl	800da70 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bb2:	2180      	movs	r1, #128	; 0x80
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f003 ff5b 	bl	800da70 <USBD_LL_StallEP>
 8009bba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bbc:	e040      	b.n	8009c40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fc68 	bl	800a496 <USBD_CtlError>
              break;
 8009bc6:	e03b      	b.n	8009c40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	885b      	ldrh	r3, [r3, #2]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d136      	bne.n	8009c3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009bda:	7bbb      	ldrb	r3, [r7, #14]
 8009bdc:	4619      	mov	r1, r3
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f003 ff65 	bl	800daae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 fd21 	bl	800a62c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009bea:	7bbb      	ldrb	r3, [r7, #14]
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7ff fde2 	bl	80097b8 <USBD_CoreFindEP>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009bf8:	7b7b      	ldrb	r3, [r7, #13]
 8009bfa:	2bff      	cmp	r3, #255	; 0xff
 8009bfc:	d01f      	beq.n	8009c3e <USBD_StdEPReq+0x1c6>
 8009bfe:	7b7b      	ldrb	r3, [r7, #13]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d11c      	bne.n	8009c3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c04:	7b7a      	ldrb	r2, [r7, #13]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c0c:	7b7a      	ldrb	r2, [r7, #13]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	32ae      	adds	r2, #174	; 0xae
 8009c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d010      	beq.n	8009c3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c1c:	7b7a      	ldrb	r2, [r7, #13]
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	32ae      	adds	r2, #174	; 0xae
 8009c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	4798      	blx	r3
 8009c2e:	4603      	mov	r3, r0
 8009c30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009c32:	e004      	b.n	8009c3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009c34:	6839      	ldr	r1, [r7, #0]
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f000 fc2d 	bl	800a496 <USBD_CtlError>
              break;
 8009c3c:	e000      	b.n	8009c40 <USBD_StdEPReq+0x1c8>
              break;
 8009c3e:	bf00      	nop
          }
          break;
 8009c40:	e0ab      	b.n	8009d9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d002      	beq.n	8009c54 <USBD_StdEPReq+0x1dc>
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	d032      	beq.n	8009cb8 <USBD_StdEPReq+0x240>
 8009c52:	e097      	b.n	8009d84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c54:	7bbb      	ldrb	r3, [r7, #14]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <USBD_StdEPReq+0x1f2>
 8009c5a:	7bbb      	ldrb	r3, [r7, #14]
 8009c5c:	2b80      	cmp	r3, #128	; 0x80
 8009c5e:	d004      	beq.n	8009c6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fc17 	bl	800a496 <USBD_CtlError>
                break;
 8009c68:	e091      	b.n	8009d8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	da0b      	bge.n	8009c8a <USBD_StdEPReq+0x212>
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	3310      	adds	r3, #16
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	4413      	add	r3, r2
 8009c86:	3304      	adds	r3, #4
 8009c88:	e00b      	b.n	8009ca2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009c8a:	7bbb      	ldrb	r3, [r7, #14]
 8009c8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009c90:	4613      	mov	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	4413      	add	r3, r2
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	2202      	movs	r2, #2
 8009cae:	4619      	mov	r1, r3
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fc61 	bl	800a578 <USBD_CtlSendData>
              break;
 8009cb6:	e06a      	b.n	8009d8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009cb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	da11      	bge.n	8009ce4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009cc0:	7bbb      	ldrb	r3, [r7, #14]
 8009cc2:	f003 020f 	and.w	r2, r3, #15
 8009cc6:	6879      	ldr	r1, [r7, #4]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	440b      	add	r3, r1
 8009cd2:	3324      	adds	r3, #36	; 0x24
 8009cd4:	881b      	ldrh	r3, [r3, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d117      	bne.n	8009d0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fbda 	bl	800a496 <USBD_CtlError>
                  break;
 8009ce2:	e054      	b.n	8009d8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ce4:	7bbb      	ldrb	r3, [r7, #14]
 8009ce6:	f003 020f 	and.w	r2, r3, #15
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	4613      	mov	r3, r2
 8009cee:	009b      	lsls	r3, r3, #2
 8009cf0:	4413      	add	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	440b      	add	r3, r1
 8009cf6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d00:	6839      	ldr	r1, [r7, #0]
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fbc7 	bl	800a496 <USBD_CtlError>
                  break;
 8009d08:	e041      	b.n	8009d8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da0b      	bge.n	8009d2a <USBD_StdEPReq+0x2b2>
 8009d12:	7bbb      	ldrb	r3, [r7, #14]
 8009d14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009d18:	4613      	mov	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	3310      	adds	r3, #16
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	4413      	add	r3, r2
 8009d26:	3304      	adds	r3, #4
 8009d28:	e00b      	b.n	8009d42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d2a:	7bbb      	ldrb	r3, [r7, #14]
 8009d2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	4413      	add	r3, r2
 8009d40:	3304      	adds	r3, #4
 8009d42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d002      	beq.n	8009d50 <USBD_StdEPReq+0x2d8>
 8009d4a:	7bbb      	ldrb	r3, [r7, #14]
 8009d4c:	2b80      	cmp	r3, #128	; 0x80
 8009d4e:	d103      	bne.n	8009d58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	e00e      	b.n	8009d76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009d58:	7bbb      	ldrb	r3, [r7, #14]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f003 fec5 	bl	800daec <USBD_LL_IsStallEP>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d003      	beq.n	8009d70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2201      	movs	r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	e002      	b.n	8009d76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	2200      	movs	r2, #0
 8009d74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	2202      	movs	r2, #2
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fbfb 	bl	800a578 <USBD_CtlSendData>
              break;
 8009d82:	e004      	b.n	8009d8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f000 fb85 	bl	800a496 <USBD_CtlError>
              break;
 8009d8c:	bf00      	nop
          }
          break;
 8009d8e:	e004      	b.n	8009d9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009d90:	6839      	ldr	r1, [r7, #0]
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fb7f 	bl	800a496 <USBD_CtlError>
          break;
 8009d98:	bf00      	nop
      }
      break;
 8009d9a:	e005      	b.n	8009da8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fb79 	bl	800a496 <USBD_CtlError>
      break;
 8009da4:	e000      	b.n	8009da8 <USBD_StdEPReq+0x330>
      break;
 8009da6:	bf00      	nop
  }

  return ret;
 8009da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	885b      	ldrh	r3, [r3, #2]
 8009dce:	0a1b      	lsrs	r3, r3, #8
 8009dd0:	b29b      	uxth	r3, r3
 8009dd2:	3b01      	subs	r3, #1
 8009dd4:	2b0e      	cmp	r3, #14
 8009dd6:	f200 8152 	bhi.w	800a07e <USBD_GetDescriptor+0x2ca>
 8009dda:	a201      	add	r2, pc, #4	; (adr r2, 8009de0 <USBD_GetDescriptor+0x2c>)
 8009ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de0:	08009e51 	.word	0x08009e51
 8009de4:	08009e69 	.word	0x08009e69
 8009de8:	08009ea9 	.word	0x08009ea9
 8009dec:	0800a07f 	.word	0x0800a07f
 8009df0:	0800a07f 	.word	0x0800a07f
 8009df4:	0800a01f 	.word	0x0800a01f
 8009df8:	0800a04b 	.word	0x0800a04b
 8009dfc:	0800a07f 	.word	0x0800a07f
 8009e00:	0800a07f 	.word	0x0800a07f
 8009e04:	0800a07f 	.word	0x0800a07f
 8009e08:	0800a07f 	.word	0x0800a07f
 8009e0c:	0800a07f 	.word	0x0800a07f
 8009e10:	0800a07f 	.word	0x0800a07f
 8009e14:	0800a07f 	.word	0x0800a07f
 8009e18:	08009e1d 	.word	0x08009e1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e22:	69db      	ldr	r3, [r3, #28]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d00b      	beq.n	8009e40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e2e:	69db      	ldr	r3, [r3, #28]
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	7c12      	ldrb	r2, [r2, #16]
 8009e34:	f107 0108 	add.w	r1, r7, #8
 8009e38:	4610      	mov	r0, r2
 8009e3a:	4798      	blx	r3
 8009e3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009e3e:	e126      	b.n	800a08e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fb27 	bl	800a496 <USBD_CtlError>
        err++;
 8009e48:	7afb      	ldrb	r3, [r7, #11]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	72fb      	strb	r3, [r7, #11]
      break;
 8009e4e:	e11e      	b.n	800a08e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	7c12      	ldrb	r2, [r2, #16]
 8009e5c:	f107 0108 	add.w	r1, r7, #8
 8009e60:	4610      	mov	r0, r2
 8009e62:	4798      	blx	r3
 8009e64:	60f8      	str	r0, [r7, #12]
      break;
 8009e66:	e112      	b.n	800a08e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	7c1b      	ldrb	r3, [r3, #16]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d10d      	bne.n	8009e8c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e78:	f107 0208 	add.w	r2, r7, #8
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4798      	blx	r3
 8009e80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3301      	adds	r3, #1
 8009e86:	2202      	movs	r2, #2
 8009e88:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009e8a:	e100      	b.n	800a08e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	f107 0208 	add.w	r2, r7, #8
 8009e98:	4610      	mov	r0, r2
 8009e9a:	4798      	blx	r3
 8009e9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	2202      	movs	r2, #2
 8009ea4:	701a      	strb	r2, [r3, #0]
      break;
 8009ea6:	e0f2      	b.n	800a08e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	885b      	ldrh	r3, [r3, #2]
 8009eac:	b2db      	uxtb	r3, r3
 8009eae:	2b05      	cmp	r3, #5
 8009eb0:	f200 80ac 	bhi.w	800a00c <USBD_GetDescriptor+0x258>
 8009eb4:	a201      	add	r2, pc, #4	; (adr r2, 8009ebc <USBD_GetDescriptor+0x108>)
 8009eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eba:	bf00      	nop
 8009ebc:	08009ed5 	.word	0x08009ed5
 8009ec0:	08009f09 	.word	0x08009f09
 8009ec4:	08009f3d 	.word	0x08009f3d
 8009ec8:	08009f71 	.word	0x08009f71
 8009ecc:	08009fa5 	.word	0x08009fa5
 8009ed0:	08009fd9 	.word	0x08009fd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	7c12      	ldrb	r2, [r2, #16]
 8009eec:	f107 0108 	add.w	r1, r7, #8
 8009ef0:	4610      	mov	r0, r2
 8009ef2:	4798      	blx	r3
 8009ef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ef6:	e091      	b.n	800a01c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ef8:	6839      	ldr	r1, [r7, #0]
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f000 facb 	bl	800a496 <USBD_CtlError>
            err++;
 8009f00:	7afb      	ldrb	r3, [r7, #11]
 8009f02:	3301      	adds	r3, #1
 8009f04:	72fb      	strb	r3, [r7, #11]
          break;
 8009f06:	e089      	b.n	800a01c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d00b      	beq.n	8009f2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	687a      	ldr	r2, [r7, #4]
 8009f1e:	7c12      	ldrb	r2, [r2, #16]
 8009f20:	f107 0108 	add.w	r1, r7, #8
 8009f24:	4610      	mov	r0, r2
 8009f26:	4798      	blx	r3
 8009f28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f2a:	e077      	b.n	800a01c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fab1 	bl	800a496 <USBD_CtlError>
            err++;
 8009f34:	7afb      	ldrb	r3, [r7, #11]
 8009f36:	3301      	adds	r3, #1
 8009f38:	72fb      	strb	r3, [r7, #11]
          break;
 8009f3a:	e06f      	b.n	800a01c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00b      	beq.n	8009f60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4e:	68db      	ldr	r3, [r3, #12]
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	7c12      	ldrb	r2, [r2, #16]
 8009f54:	f107 0108 	add.w	r1, r7, #8
 8009f58:	4610      	mov	r0, r2
 8009f5a:	4798      	blx	r3
 8009f5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f5e:	e05d      	b.n	800a01c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f000 fa97 	bl	800a496 <USBD_CtlError>
            err++;
 8009f68:	7afb      	ldrb	r3, [r7, #11]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f6e:	e055      	b.n	800a01c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00b      	beq.n	8009f94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	7c12      	ldrb	r2, [r2, #16]
 8009f88:	f107 0108 	add.w	r1, r7, #8
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4798      	blx	r3
 8009f90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f92:	e043      	b.n	800a01c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fa7d 	bl	800a496 <USBD_CtlError>
            err++;
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	72fb      	strb	r3, [r7, #11]
          break;
 8009fa2:	e03b      	b.n	800a01c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009faa:	695b      	ldr	r3, [r3, #20]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00b      	beq.n	8009fc8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fb6:	695b      	ldr	r3, [r3, #20]
 8009fb8:	687a      	ldr	r2, [r7, #4]
 8009fba:	7c12      	ldrb	r2, [r2, #16]
 8009fbc:	f107 0108 	add.w	r1, r7, #8
 8009fc0:	4610      	mov	r0, r2
 8009fc2:	4798      	blx	r3
 8009fc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fc6:	e029      	b.n	800a01c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009fc8:	6839      	ldr	r1, [r7, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fa63 	bl	800a496 <USBD_CtlError>
            err++;
 8009fd0:	7afb      	ldrb	r3, [r7, #11]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fd6:	e021      	b.n	800a01c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fde:	699b      	ldr	r3, [r3, #24]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00b      	beq.n	8009ffc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fea:	699b      	ldr	r3, [r3, #24]
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	7c12      	ldrb	r2, [r2, #16]
 8009ff0:	f107 0108 	add.w	r1, r7, #8
 8009ff4:	4610      	mov	r0, r2
 8009ff6:	4798      	blx	r3
 8009ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ffa:	e00f      	b.n	800a01c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ffc:	6839      	ldr	r1, [r7, #0]
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 fa49 	bl	800a496 <USBD_CtlError>
            err++;
 800a004:	7afb      	ldrb	r3, [r7, #11]
 800a006:	3301      	adds	r3, #1
 800a008:	72fb      	strb	r3, [r7, #11]
          break;
 800a00a:	e007      	b.n	800a01c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a00c:	6839      	ldr	r1, [r7, #0]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fa41 	bl	800a496 <USBD_CtlError>
          err++;
 800a014:	7afb      	ldrb	r3, [r7, #11]
 800a016:	3301      	adds	r3, #1
 800a018:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a01a:	bf00      	nop
      }
      break;
 800a01c:	e037      	b.n	800a08e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	7c1b      	ldrb	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d109      	bne.n	800a03a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a02e:	f107 0208 	add.w	r2, r7, #8
 800a032:	4610      	mov	r0, r2
 800a034:	4798      	blx	r3
 800a036:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a038:	e029      	b.n	800a08e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fa2a 	bl	800a496 <USBD_CtlError>
        err++;
 800a042:	7afb      	ldrb	r3, [r7, #11]
 800a044:	3301      	adds	r3, #1
 800a046:	72fb      	strb	r3, [r7, #11]
      break;
 800a048:	e021      	b.n	800a08e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	7c1b      	ldrb	r3, [r3, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10d      	bne.n	800a06e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	f107 0208 	add.w	r2, r7, #8
 800a05e:	4610      	mov	r0, r2
 800a060:	4798      	blx	r3
 800a062:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	3301      	adds	r3, #1
 800a068:	2207      	movs	r2, #7
 800a06a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a06c:	e00f      	b.n	800a08e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a06e:	6839      	ldr	r1, [r7, #0]
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fa10 	bl	800a496 <USBD_CtlError>
        err++;
 800a076:	7afb      	ldrb	r3, [r7, #11]
 800a078:	3301      	adds	r3, #1
 800a07a:	72fb      	strb	r3, [r7, #11]
      break;
 800a07c:	e007      	b.n	800a08e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a07e:	6839      	ldr	r1, [r7, #0]
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fa08 	bl	800a496 <USBD_CtlError>
      err++;
 800a086:	7afb      	ldrb	r3, [r7, #11]
 800a088:	3301      	adds	r3, #1
 800a08a:	72fb      	strb	r3, [r7, #11]
      break;
 800a08c:	bf00      	nop
  }

  if (err != 0U)
 800a08e:	7afb      	ldrb	r3, [r7, #11]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d11e      	bne.n	800a0d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	88db      	ldrh	r3, [r3, #6]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d016      	beq.n	800a0ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a09c:	893b      	ldrh	r3, [r7, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00e      	beq.n	800a0c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	88da      	ldrh	r2, [r3, #6]
 800a0a6:	893b      	ldrh	r3, [r7, #8]
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	bf28      	it	cs
 800a0ac:	4613      	movcs	r3, r2
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0b2:	893b      	ldrh	r3, [r7, #8]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	68f9      	ldr	r1, [r7, #12]
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 fa5d 	bl	800a578 <USBD_CtlSendData>
 800a0be:	e009      	b.n	800a0d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f9e7 	bl	800a496 <USBD_CtlError>
 800a0c8:	e004      	b.n	800a0d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 faae 	bl	800a62c <USBD_CtlSendStatus>
 800a0d0:	e000      	b.n	800a0d4 <USBD_GetDescriptor+0x320>
    return;
 800a0d2:	bf00      	nop
  }
}
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop

0800a0dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	889b      	ldrh	r3, [r3, #4]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d131      	bne.n	800a152 <USBD_SetAddress+0x76>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	88db      	ldrh	r3, [r3, #6]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d12d      	bne.n	800a152 <USBD_SetAddress+0x76>
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	885b      	ldrh	r3, [r3, #2]
 800a0fa:	2b7f      	cmp	r3, #127	; 0x7f
 800a0fc:	d829      	bhi.n	800a152 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	885b      	ldrh	r3, [r3, #2]
 800a102:	b2db      	uxtb	r3, r3
 800a104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a108:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b03      	cmp	r3, #3
 800a114:	d104      	bne.n	800a120 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a116:	6839      	ldr	r1, [r7, #0]
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f9bc 	bl	800a496 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a11e:	e01d      	b.n	800a15c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	7bfa      	ldrb	r2, [r7, #15]
 800a124:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f003 fd09 	bl	800db44 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 fa7a 	bl	800a62c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a138:	7bfb      	ldrb	r3, [r7, #15]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d004      	beq.n	800a148 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2202      	movs	r2, #2
 800a142:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a146:	e009      	b.n	800a15c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a150:	e004      	b.n	800a15c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a152:	6839      	ldr	r1, [r7, #0]
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f99e 	bl	800a496 <USBD_CtlError>
  }
}
 800a15a:	bf00      	nop
 800a15c:	bf00      	nop
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a16e:	2300      	movs	r3, #0
 800a170:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	885b      	ldrh	r3, [r3, #2]
 800a176:	b2da      	uxtb	r2, r3
 800a178:	4b4e      	ldr	r3, [pc, #312]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a17a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a17c:	4b4d      	ldr	r3, [pc, #308]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d905      	bls.n	800a190 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a184:	6839      	ldr	r1, [r7, #0]
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f985 	bl	800a496 <USBD_CtlError>
    return USBD_FAIL;
 800a18c:	2303      	movs	r3, #3
 800a18e:	e08c      	b.n	800a2aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a196:	b2db      	uxtb	r3, r3
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d002      	beq.n	800a1a2 <USBD_SetConfig+0x3e>
 800a19c:	2b03      	cmp	r3, #3
 800a19e:	d029      	beq.n	800a1f4 <USBD_SetConfig+0x90>
 800a1a0:	e075      	b.n	800a28e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a1a2:	4b44      	ldr	r3, [pc, #272]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d020      	beq.n	800a1ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a1aa:	4b42      	ldr	r3, [pc, #264]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1b4:	4b3f      	ldr	r3, [pc, #252]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f7fe ffbd 	bl	800913a <USBD_SetClassConfig>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1c4:	7bfb      	ldrb	r3, [r7, #15]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d008      	beq.n	800a1dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a1ca:	6839      	ldr	r1, [r7, #0]
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f962 	bl	800a496 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1da:	e065      	b.n	800a2a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 fa25 	bl	800a62c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2203      	movs	r2, #3
 800a1e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a1ea:	e05d      	b.n	800a2a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a1ec:	6878      	ldr	r0, [r7, #4]
 800a1ee:	f000 fa1d 	bl	800a62c <USBD_CtlSendStatus>
      break;
 800a1f2:	e059      	b.n	800a2a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a1f4:	4b2f      	ldr	r3, [pc, #188]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d112      	bne.n	800a222 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2202      	movs	r2, #2
 800a200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a204:	4b2b      	ldr	r3, [pc, #172]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	461a      	mov	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a20e:	4b29      	ldr	r3, [pc, #164]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f7fe ffac 	bl	8009172 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 fa06 	bl	800a62c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a220:	e042      	b.n	800a2a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a222:	4b24      	ldr	r3, [pc, #144]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a224:	781b      	ldrb	r3, [r3, #0]
 800a226:	461a      	mov	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d02a      	beq.n	800a286 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	b2db      	uxtb	r3, r3
 800a236:	4619      	mov	r1, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7fe ff9a 	bl	8009172 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a23e:	4b1d      	ldr	r3, [pc, #116]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	461a      	mov	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a248:	4b1a      	ldr	r3, [pc, #104]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	4619      	mov	r1, r3
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f7fe ff73 	bl	800913a <USBD_SetClassConfig>
 800a254:	4603      	mov	r3, r0
 800a256:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a258:	7bfb      	ldrb	r3, [r7, #15]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00f      	beq.n	800a27e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a25e:	6839      	ldr	r1, [r7, #0]
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 f918 	bl	800a496 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	4619      	mov	r1, r3
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f7fe ff7f 	bl	8009172 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2202      	movs	r2, #2
 800a278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a27c:	e014      	b.n	800a2a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f9d4 	bl	800a62c <USBD_CtlSendStatus>
      break;
 800a284:	e010      	b.n	800a2a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f9d0 	bl	800a62c <USBD_CtlSendStatus>
      break;
 800a28c:	e00c      	b.n	800a2a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a28e:	6839      	ldr	r1, [r7, #0]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f900 	bl	800a496 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a296:	4b07      	ldr	r3, [pc, #28]	; (800a2b4 <USBD_SetConfig+0x150>)
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	4619      	mov	r1, r3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f7fe ff68 	bl	8009172 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a2a6:	bf00      	nop
  }

  return ret;
 800a2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3710      	adds	r7, #16
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}
 800a2b2:	bf00      	nop
 800a2b4:	20007a60 	.word	0x20007a60

0800a2b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	88db      	ldrh	r3, [r3, #6]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d004      	beq.n	800a2d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2ca:	6839      	ldr	r1, [r7, #0]
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 f8e2 	bl	800a496 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2d2:	e023      	b.n	800a31c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b02      	cmp	r3, #2
 800a2de:	dc02      	bgt.n	800a2e6 <USBD_GetConfig+0x2e>
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	dc03      	bgt.n	800a2ec <USBD_GetConfig+0x34>
 800a2e4:	e015      	b.n	800a312 <USBD_GetConfig+0x5a>
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d00b      	beq.n	800a302 <USBD_GetConfig+0x4a>
 800a2ea:	e012      	b.n	800a312 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f000 f93c 	bl	800a578 <USBD_CtlSendData>
        break;
 800a300:	e00c      	b.n	800a31c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	3304      	adds	r3, #4
 800a306:	2201      	movs	r2, #1
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f934 	bl	800a578 <USBD_CtlSendData>
        break;
 800a310:	e004      	b.n	800a31c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a312:	6839      	ldr	r1, [r7, #0]
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	f000 f8be 	bl	800a496 <USBD_CtlError>
        break;
 800a31a:	bf00      	nop
}
 800a31c:	bf00      	nop
 800a31e:	3708      	adds	r7, #8
 800a320:	46bd      	mov	sp, r7
 800a322:	bd80      	pop	{r7, pc}

0800a324 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b082      	sub	sp, #8
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a334:	b2db      	uxtb	r3, r3
 800a336:	3b01      	subs	r3, #1
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d81e      	bhi.n	800a37a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	88db      	ldrh	r3, [r3, #6]
 800a340:	2b02      	cmp	r3, #2
 800a342:	d004      	beq.n	800a34e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a344:	6839      	ldr	r1, [r7, #0]
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 f8a5 	bl	800a496 <USBD_CtlError>
        break;
 800a34c:	e01a      	b.n	800a384 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2201      	movs	r2, #1
 800a352:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d005      	beq.n	800a36a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	f043 0202 	orr.w	r2, r3, #2
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	330c      	adds	r3, #12
 800a36e:	2202      	movs	r2, #2
 800a370:	4619      	mov	r1, r3
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 f900 	bl	800a578 <USBD_CtlSendData>
      break;
 800a378:	e004      	b.n	800a384 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 f88a 	bl	800a496 <USBD_CtlError>
      break;
 800a382:	bf00      	nop
  }
}
 800a384:	bf00      	nop
 800a386:	3708      	adds	r7, #8
 800a388:	46bd      	mov	sp, r7
 800a38a:	bd80      	pop	{r7, pc}

0800a38c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b082      	sub	sp, #8
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	885b      	ldrh	r3, [r3, #2]
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d107      	bne.n	800a3ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f940 	bl	800a62c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a3ac:	e013      	b.n	800a3d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	885b      	ldrh	r3, [r3, #2]
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d10b      	bne.n	800a3ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	889b      	ldrh	r3, [r3, #4]
 800a3ba:	0a1b      	lsrs	r3, r3, #8
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f000 f930 	bl	800a62c <USBD_CtlSendStatus>
}
 800a3cc:	e003      	b.n	800a3d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a3ce:	6839      	ldr	r1, [r7, #0]
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f860 	bl	800a496 <USBD_CtlError>
}
 800a3d6:	bf00      	nop
 800a3d8:	3708      	adds	r7, #8
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b082      	sub	sp, #8
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	2b02      	cmp	r3, #2
 800a3f4:	d80b      	bhi.n	800a40e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	885b      	ldrh	r3, [r3, #2]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d10c      	bne.n	800a418 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f910 	bl	800a62c <USBD_CtlSendStatus>
      }
      break;
 800a40c:	e004      	b.n	800a418 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f840 	bl	800a496 <USBD_CtlError>
      break;
 800a416:	e000      	b.n	800a41a <USBD_ClrFeature+0x3c>
      break;
 800a418:	bf00      	nop
  }
}
 800a41a:	bf00      	nop
 800a41c:	3708      	adds	r7, #8
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b084      	sub	sp, #16
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	781a      	ldrb	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3301      	adds	r3, #1
 800a43c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	781a      	ldrb	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3301      	adds	r3, #1
 800a44a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f7ff fa17 	bl	8009880 <SWAPBYTE>
 800a452:	4603      	mov	r3, r0
 800a454:	461a      	mov	r2, r3
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3301      	adds	r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	3301      	adds	r3, #1
 800a464:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a466:	68f8      	ldr	r0, [r7, #12]
 800a468:	f7ff fa0a 	bl	8009880 <SWAPBYTE>
 800a46c:	4603      	mov	r3, r0
 800a46e:	461a      	mov	r2, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	3301      	adds	r3, #1
 800a478:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	3301      	adds	r3, #1
 800a47e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a480:	68f8      	ldr	r0, [r7, #12]
 800a482:	f7ff f9fd 	bl	8009880 <SWAPBYTE>
 800a486:	4603      	mov	r3, r0
 800a488:	461a      	mov	r2, r3
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	80da      	strh	r2, [r3, #6]
}
 800a48e:	bf00      	nop
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}

0800a496 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a496:	b580      	push	{r7, lr}
 800a498:	b082      	sub	sp, #8
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4a0:	2180      	movs	r1, #128	; 0x80
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f003 fae4 	bl	800da70 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4a8:	2100      	movs	r1, #0
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f003 fae0 	bl	800da70 <USBD_LL_StallEP>
}
 800a4b0:	bf00      	nop
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d036      	beq.n	800a53c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a4d2:	6938      	ldr	r0, [r7, #16]
 800a4d4:	f000 f836 	bl	800a544 <USBD_GetLen>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	3301      	adds	r3, #1
 800a4dc:	b29b      	uxth	r3, r3
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	b29a      	uxth	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a4e6:	7dfb      	ldrb	r3, [r7, #23]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	687a      	ldr	r2, [r7, #4]
 800a4ee:	7812      	ldrb	r2, [r2, #0]
 800a4f0:	701a      	strb	r2, [r3, #0]
  idx++;
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a4f8:	7dfb      	ldrb	r3, [r7, #23]
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	4413      	add	r3, r2
 800a4fe:	2203      	movs	r2, #3
 800a500:	701a      	strb	r2, [r3, #0]
  idx++;
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	3301      	adds	r3, #1
 800a506:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a508:	e013      	b.n	800a532 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a50a:	7dfb      	ldrb	r3, [r7, #23]
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	4413      	add	r3, r2
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	7812      	ldrb	r2, [r2, #0]
 800a514:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	3301      	adds	r3, #1
 800a51a:	613b      	str	r3, [r7, #16]
    idx++;
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
 800a51e:	3301      	adds	r3, #1
 800a520:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	4413      	add	r3, r2
 800a528:	2200      	movs	r2, #0
 800a52a:	701a      	strb	r2, [r3, #0]
    idx++;
 800a52c:	7dfb      	ldrb	r3, [r7, #23]
 800a52e:	3301      	adds	r3, #1
 800a530:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1e7      	bne.n	800a50a <USBD_GetString+0x52>
 800a53a:	e000      	b.n	800a53e <USBD_GetString+0x86>
    return;
 800a53c:	bf00      	nop
  }
}
 800a53e:	3718      	adds	r7, #24
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a54c:	2300      	movs	r3, #0
 800a54e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a554:	e005      	b.n	800a562 <USBD_GetLen+0x1e>
  {
    len++;
 800a556:	7bfb      	ldrb	r3, [r7, #15]
 800a558:	3301      	adds	r3, #1
 800a55a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	3301      	adds	r3, #1
 800a560:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d1f5      	bne.n	800a556 <USBD_GetLen+0x12>
  }

  return len;
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2202      	movs	r2, #2
 800a588:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	687a      	ldr	r2, [r7, #4]
 800a596:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	2100      	movs	r1, #0
 800a59e:	68f8      	ldr	r0, [r7, #12]
 800a5a0:	f003 faef 	bl	800db82 <USBD_LL_Transmit>

  return USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3710      	adds	r7, #16
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b084      	sub	sp, #16
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	60f8      	str	r0, [r7, #12]
 800a5b6:	60b9      	str	r1, [r7, #8]
 800a5b8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	68ba      	ldr	r2, [r7, #8]
 800a5be:	2100      	movs	r1, #0
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	f003 fade 	bl	800db82 <USBD_LL_Transmit>

  return USBD_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b084      	sub	sp, #16
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2203      	movs	r2, #3
 800a5e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	2100      	movs	r1, #0
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f003 fae2 	bl	800dbc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a600:	2300      	movs	r3, #0
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b084      	sub	sp, #16
 800a60e:	af00      	add	r7, sp, #0
 800a610:	60f8      	str	r0, [r7, #12]
 800a612:	60b9      	str	r1, [r7, #8]
 800a614:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68ba      	ldr	r2, [r7, #8]
 800a61a:	2100      	movs	r1, #0
 800a61c:	68f8      	ldr	r0, [r7, #12]
 800a61e:	f003 fad1 	bl	800dbc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}

0800a62c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2204      	movs	r2, #4
 800a638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a63c:	2300      	movs	r3, #0
 800a63e:	2200      	movs	r2, #0
 800a640:	2100      	movs	r1, #0
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f003 fa9d 	bl	800db82 <USBD_LL_Transmit>

  return USBD_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2205      	movs	r2, #5
 800a65e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a662:	2300      	movs	r3, #0
 800a664:	2200      	movs	r2, #0
 800a666:	2100      	movs	r1, #0
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f003 faab 	bl	800dbc4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a678:	b480      	push	{r7}
 800a67a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a67c:	bf00      	nop
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr
	...

0800a688 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a68e:	f3ef 8305 	mrs	r3, IPSR
 800a692:	60bb      	str	r3, [r7, #8]
  return(result);
 800a694:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10f      	bne.n	800a6ba <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a69a:	f3ef 8310 	mrs	r3, PRIMASK
 800a69e:	607b      	str	r3, [r7, #4]
  return(result);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d105      	bne.n	800a6b2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6a6:	f3ef 8311 	mrs	r3, BASEPRI
 800a6aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a6ac:	683b      	ldr	r3, [r7, #0]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d007      	beq.n	800a6c2 <osKernelInitialize+0x3a>
 800a6b2:	4b0e      	ldr	r3, [pc, #56]	; (800a6ec <osKernelInitialize+0x64>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b02      	cmp	r3, #2
 800a6b8:	d103      	bne.n	800a6c2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a6ba:	f06f 0305 	mvn.w	r3, #5
 800a6be:	60fb      	str	r3, [r7, #12]
 800a6c0:	e00c      	b.n	800a6dc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a6c2:	4b0a      	ldr	r3, [pc, #40]	; (800a6ec <osKernelInitialize+0x64>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d105      	bne.n	800a6d6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a6ca:	4b08      	ldr	r3, [pc, #32]	; (800a6ec <osKernelInitialize+0x64>)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	e002      	b.n	800a6dc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a6d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a6da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3714      	adds	r7, #20
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr
 800a6ea:	bf00      	nop
 800a6ec:	20007a64 	.word	0x20007a64

0800a6f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b084      	sub	sp, #16
 800a6f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6f6:	f3ef 8305 	mrs	r3, IPSR
 800a6fa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a6fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10f      	bne.n	800a722 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a702:	f3ef 8310 	mrs	r3, PRIMASK
 800a706:	607b      	str	r3, [r7, #4]
  return(result);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d105      	bne.n	800a71a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a70e:	f3ef 8311 	mrs	r3, BASEPRI
 800a712:	603b      	str	r3, [r7, #0]
  return(result);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d007      	beq.n	800a72a <osKernelStart+0x3a>
 800a71a:	4b0f      	ldr	r3, [pc, #60]	; (800a758 <osKernelStart+0x68>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d103      	bne.n	800a72a <osKernelStart+0x3a>
    stat = osErrorISR;
 800a722:	f06f 0305 	mvn.w	r3, #5
 800a726:	60fb      	str	r3, [r7, #12]
 800a728:	e010      	b.n	800a74c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a72a:	4b0b      	ldr	r3, [pc, #44]	; (800a758 <osKernelStart+0x68>)
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d109      	bne.n	800a746 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a732:	f7ff ffa1 	bl	800a678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a736:	4b08      	ldr	r3, [pc, #32]	; (800a758 <osKernelStart+0x68>)
 800a738:	2202      	movs	r2, #2
 800a73a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a73c:	f001 f8b4 	bl	800b8a8 <vTaskStartScheduler>
      stat = osOK;
 800a740:	2300      	movs	r3, #0
 800a742:	60fb      	str	r3, [r7, #12]
 800a744:	e002      	b.n	800a74c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a74a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a74c:	68fb      	ldr	r3, [r7, #12]
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20007a64 	.word	0x20007a64

0800a75c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b090      	sub	sp, #64	; 0x40
 800a760:	af04      	add	r7, sp, #16
 800a762:	60f8      	str	r0, [r7, #12]
 800a764:	60b9      	str	r1, [r7, #8]
 800a766:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a768:	2300      	movs	r3, #0
 800a76a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a76c:	f3ef 8305 	mrs	r3, IPSR
 800a770:	61fb      	str	r3, [r7, #28]
  return(result);
 800a772:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a774:	2b00      	cmp	r3, #0
 800a776:	f040 808f 	bne.w	800a898 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a77a:	f3ef 8310 	mrs	r3, PRIMASK
 800a77e:	61bb      	str	r3, [r7, #24]
  return(result);
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d105      	bne.n	800a792 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a786:	f3ef 8311 	mrs	r3, BASEPRI
 800a78a:	617b      	str	r3, [r7, #20]
  return(result);
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <osThreadNew+0x3e>
 800a792:	4b44      	ldr	r3, [pc, #272]	; (800a8a4 <osThreadNew+0x148>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b02      	cmp	r3, #2
 800a798:	d07e      	beq.n	800a898 <osThreadNew+0x13c>
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d07b      	beq.n	800a898 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a7a0:	2380      	movs	r3, #128	; 0x80
 800a7a2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a7a4:	2318      	movs	r3, #24
 800a7a6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a7ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d045      	beq.n	800a844 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d002      	beq.n	800a7c6 <osThreadNew+0x6a>
        name = attr->name;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	699b      	ldr	r3, [r3, #24]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d002      	beq.n	800a7d4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d008      	beq.n	800a7ec <osThreadNew+0x90>
 800a7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7dc:	2b38      	cmp	r3, #56	; 0x38
 800a7de:	d805      	bhi.n	800a7ec <osThreadNew+0x90>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	f003 0301 	and.w	r3, r3, #1
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <osThreadNew+0x94>
        return (NULL);
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	e054      	b.n	800a89a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	695b      	ldr	r3, [r3, #20]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d003      	beq.n	800a800 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	089b      	lsrs	r3, r3, #2
 800a7fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d00e      	beq.n	800a826 <osThreadNew+0xca>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	2b5b      	cmp	r3, #91	; 0x5b
 800a80e:	d90a      	bls.n	800a826 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a814:	2b00      	cmp	r3, #0
 800a816:	d006      	beq.n	800a826 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	695b      	ldr	r3, [r3, #20]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <osThreadNew+0xca>
        mem = 1;
 800a820:	2301      	movs	r3, #1
 800a822:	623b      	str	r3, [r7, #32]
 800a824:	e010      	b.n	800a848 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	689b      	ldr	r3, [r3, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10c      	bne.n	800a848 <osThreadNew+0xec>
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d108      	bne.n	800a848 <osThreadNew+0xec>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d104      	bne.n	800a848 <osThreadNew+0xec>
          mem = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	623b      	str	r3, [r7, #32]
 800a842:	e001      	b.n	800a848 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a848:	6a3b      	ldr	r3, [r7, #32]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d110      	bne.n	800a870 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a852:	687a      	ldr	r2, [r7, #4]
 800a854:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a856:	9202      	str	r2, [sp, #8]
 800a858:	9301      	str	r3, [sp, #4]
 800a85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85c:	9300      	str	r3, [sp, #0]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 fe3f 	bl	800b4e8 <xTaskCreateStatic>
 800a86a:	4603      	mov	r3, r0
 800a86c:	613b      	str	r3, [r7, #16]
 800a86e:	e013      	b.n	800a898 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a870:	6a3b      	ldr	r3, [r7, #32]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d110      	bne.n	800a898 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a878:	b29a      	uxth	r2, r3
 800a87a:	f107 0310 	add.w	r3, r7, #16
 800a87e:	9301      	str	r3, [sp, #4]
 800a880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a882:	9300      	str	r3, [sp, #0]
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	f000 fe90 	bl	800b5ae <xTaskCreate>
 800a88e:	4603      	mov	r3, r0
 800a890:	2b01      	cmp	r3, #1
 800a892:	d001      	beq.n	800a898 <osThreadNew+0x13c>
          hTask = NULL;
 800a894:	2300      	movs	r3, #0
 800a896:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a898:	693b      	ldr	r3, [r7, #16]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3730      	adds	r7, #48	; 0x30
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}
 800a8a2:	bf00      	nop
 800a8a4:	20007a64 	.word	0x20007a64

0800a8a8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b086      	sub	sp, #24
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8b0:	f3ef 8305 	mrs	r3, IPSR
 800a8b4:	613b      	str	r3, [r7, #16]
  return(result);
 800a8b6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10f      	bne.n	800a8dc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8bc:	f3ef 8310 	mrs	r3, PRIMASK
 800a8c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d105      	bne.n	800a8d4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a8c8:	f3ef 8311 	mrs	r3, BASEPRI
 800a8cc:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d007      	beq.n	800a8e4 <osDelay+0x3c>
 800a8d4:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <osDelay+0x58>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d103      	bne.n	800a8e4 <osDelay+0x3c>
    stat = osErrorISR;
 800a8dc:	f06f 0305 	mvn.w	r3, #5
 800a8e0:	617b      	str	r3, [r7, #20]
 800a8e2:	e007      	b.n	800a8f4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d002      	beq.n	800a8f4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 ffa4 	bl	800b83c <vTaskDelay>
    }
  }

  return (stat);
 800a8f4:	697b      	ldr	r3, [r7, #20]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3718      	adds	r7, #24
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	20007a64 	.word	0x20007a64

0800a904 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4a07      	ldr	r2, [pc, #28]	; (800a930 <vApplicationGetIdleTaskMemory+0x2c>)
 800a914:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	4a06      	ldr	r2, [pc, #24]	; (800a934 <vApplicationGetIdleTaskMemory+0x30>)
 800a91a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2280      	movs	r2, #128	; 0x80
 800a920:	601a      	str	r2, [r3, #0]
}
 800a922:	bf00      	nop
 800a924:	3714      	adds	r7, #20
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	20007a68 	.word	0x20007a68
 800a934:	20007ac4 	.word	0x20007ac4

0800a938 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4a07      	ldr	r2, [pc, #28]	; (800a964 <vApplicationGetTimerTaskMemory+0x2c>)
 800a948:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	4a06      	ldr	r2, [pc, #24]	; (800a968 <vApplicationGetTimerTaskMemory+0x30>)
 800a94e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a956:	601a      	str	r2, [r3, #0]
}
 800a958:	bf00      	nop
 800a95a:	3714      	adds	r7, #20
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr
 800a964:	20007cc4 	.word	0x20007cc4
 800a968:	20007d20 	.word	0x20007d20

0800a96c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f103 0208 	add.w	r2, r3, #8
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a984:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f103 0208 	add.w	r2, r3, #8
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f103 0208 	add.w	r2, r3, #8
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a9a0:	bf00      	nop
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr

0800a9c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9c6:	b480      	push	{r7}
 800a9c8:	b085      	sub	sp, #20
 800a9ca:	af00      	add	r7, sp, #0
 800a9cc:	6078      	str	r0, [r7, #4]
 800a9ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	689a      	ldr	r2, [r3, #8]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	683a      	ldr	r2, [r7, #0]
 800a9ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	601a      	str	r2, [r3, #0]
}
 800aa02:	bf00      	nop
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b085      	sub	sp, #20
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa24:	d103      	bne.n	800aa2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	e00c      	b.n	800aa48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	3308      	adds	r3, #8
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	e002      	b.n	800aa3c <vListInsert+0x2e>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	60fb      	str	r3, [r7, #12]
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	68ba      	ldr	r2, [r7, #8]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d2f6      	bcs.n	800aa36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	685a      	ldr	r2, [r3, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	683a      	ldr	r2, [r7, #0]
 800aa56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	687a      	ldr	r2, [r7, #4]
 800aa68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	1c5a      	adds	r2, r3, #1
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	601a      	str	r2, [r3, #0]
}
 800aa74:	bf00      	nop
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	685b      	ldr	r3, [r3, #4]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	6892      	ldr	r2, [r2, #8]
 800aa96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	6852      	ldr	r2, [r2, #4]
 800aaa0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	d103      	bne.n	800aab4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	689a      	ldr	r2, [r3, #8]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	1e5a      	subs	r2, r3, #1
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10c      	bne.n	800ab02 <xQueueGenericReset+0x2e>
	__asm volatile
 800aae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaec:	b672      	cpsid	i
 800aaee:	f383 8811 	msr	BASEPRI, r3
 800aaf2:	f3bf 8f6f 	isb	sy
 800aaf6:	f3bf 8f4f 	dsb	sy
 800aafa:	b662      	cpsie	i
 800aafc:	60bb      	str	r3, [r7, #8]
}
 800aafe:	bf00      	nop
 800ab00:	e7fe      	b.n	800ab00 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ab02:	f002 f8a3 	bl	800cc4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab0e:	68f9      	ldr	r1, [r7, #12]
 800ab10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	441a      	add	r2, r3
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab32:	3b01      	subs	r3, #1
 800ab34:	68f9      	ldr	r1, [r7, #12]
 800ab36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ab38:	fb01 f303 	mul.w	r3, r1, r3
 800ab3c:	441a      	add	r2, r3
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	22ff      	movs	r2, #255	; 0xff
 800ab46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	22ff      	movs	r2, #255	; 0xff
 800ab4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d114      	bne.n	800ab82 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d01a      	beq.n	800ab96 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	3310      	adds	r3, #16
 800ab64:	4618      	mov	r0, r3
 800ab66:	f001 f937 	bl	800bdd8 <xTaskRemoveFromEventList>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d012      	beq.n	800ab96 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab70:	4b0c      	ldr	r3, [pc, #48]	; (800aba4 <xQueueGenericReset+0xd0>)
 800ab72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab76:	601a      	str	r2, [r3, #0]
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	f3bf 8f6f 	isb	sy
 800ab80:	e009      	b.n	800ab96 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3310      	adds	r3, #16
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7ff fef0 	bl	800a96c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	3324      	adds	r3, #36	; 0x24
 800ab90:	4618      	mov	r0, r3
 800ab92:	f7ff feeb 	bl	800a96c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab96:	f002 f88d 	bl	800ccb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab9a:	2301      	movs	r3, #1
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3710      	adds	r7, #16
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	e000ed04 	.word	0xe000ed04

0800aba8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b08e      	sub	sp, #56	; 0x38
 800abac:	af02      	add	r7, sp, #8
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10c      	bne.n	800abd6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	b672      	cpsid	i
 800abc2:	f383 8811 	msr	BASEPRI, r3
 800abc6:	f3bf 8f6f 	isb	sy
 800abca:	f3bf 8f4f 	dsb	sy
 800abce:	b662      	cpsie	i
 800abd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10c      	bne.n	800abf6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	b672      	cpsid	i
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	b662      	cpsie	i
 800abf0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abf2:	bf00      	nop
 800abf4:	e7fe      	b.n	800abf4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <xQueueGenericCreateStatic+0x5a>
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <xQueueGenericCreateStatic+0x5e>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e000      	b.n	800ac08 <xQueueGenericCreateStatic+0x60>
 800ac06:	2300      	movs	r3, #0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10c      	bne.n	800ac26 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	b672      	cpsid	i
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	b662      	cpsie	i
 800ac20:	623b      	str	r3, [r7, #32]
}
 800ac22:	bf00      	nop
 800ac24:	e7fe      	b.n	800ac24 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d102      	bne.n	800ac32 <xQueueGenericCreateStatic+0x8a>
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d101      	bne.n	800ac36 <xQueueGenericCreateStatic+0x8e>
 800ac32:	2301      	movs	r3, #1
 800ac34:	e000      	b.n	800ac38 <xQueueGenericCreateStatic+0x90>
 800ac36:	2300      	movs	r3, #0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10c      	bne.n	800ac56 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	b672      	cpsid	i
 800ac42:	f383 8811 	msr	BASEPRI, r3
 800ac46:	f3bf 8f6f 	isb	sy
 800ac4a:	f3bf 8f4f 	dsb	sy
 800ac4e:	b662      	cpsie	i
 800ac50:	61fb      	str	r3, [r7, #28]
}
 800ac52:	bf00      	nop
 800ac54:	e7fe      	b.n	800ac54 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac56:	2350      	movs	r3, #80	; 0x50
 800ac58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	2b50      	cmp	r3, #80	; 0x50
 800ac5e:	d00c      	beq.n	800ac7a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ac60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac64:	b672      	cpsid	i
 800ac66:	f383 8811 	msr	BASEPRI, r3
 800ac6a:	f3bf 8f6f 	isb	sy
 800ac6e:	f3bf 8f4f 	dsb	sy
 800ac72:	b662      	cpsie	i
 800ac74:	61bb      	str	r3, [r7, #24]
}
 800ac76:	bf00      	nop
 800ac78:	e7fe      	b.n	800ac78 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ac80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d00d      	beq.n	800aca2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ac92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	4613      	mov	r3, r2
 800ac98:	687a      	ldr	r2, [r7, #4]
 800ac9a:	68b9      	ldr	r1, [r7, #8]
 800ac9c:	68f8      	ldr	r0, [r7, #12]
 800ac9e:	f000 f805 	bl	800acac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3730      	adds	r7, #48	; 0x30
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	60f8      	str	r0, [r7, #12]
 800acb4:	60b9      	str	r1, [r7, #8]
 800acb6:	607a      	str	r2, [r7, #4]
 800acb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d103      	bne.n	800acc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	69ba      	ldr	r2, [r7, #24]
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	e002      	b.n	800acce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acd4:	69bb      	ldr	r3, [r7, #24]
 800acd6:	68ba      	ldr	r2, [r7, #8]
 800acd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acda:	2101      	movs	r1, #1
 800acdc:	69b8      	ldr	r0, [r7, #24]
 800acde:	f7ff fef9 	bl	800aad4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	78fa      	ldrb	r2, [r7, #3]
 800ace6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acea:	bf00      	nop
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
	...

0800acf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b08e      	sub	sp, #56	; 0x38
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad02:	2300      	movs	r3, #0
 800ad04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10c      	bne.n	800ad2a <xQueueGenericSend+0x36>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad14:	b672      	cpsid	i
 800ad16:	f383 8811 	msr	BASEPRI, r3
 800ad1a:	f3bf 8f6f 	isb	sy
 800ad1e:	f3bf 8f4f 	dsb	sy
 800ad22:	b662      	cpsie	i
 800ad24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad26:	bf00      	nop
 800ad28:	e7fe      	b.n	800ad28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d103      	bne.n	800ad38 <xQueueGenericSend+0x44>
 800ad30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <xQueueGenericSend+0x48>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e000      	b.n	800ad3e <xQueueGenericSend+0x4a>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10c      	bne.n	800ad5c <xQueueGenericSend+0x68>
	__asm volatile
 800ad42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad46:	b672      	cpsid	i
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	b662      	cpsie	i
 800ad56:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad58:	bf00      	nop
 800ad5a:	e7fe      	b.n	800ad5a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	2b02      	cmp	r3, #2
 800ad60:	d103      	bne.n	800ad6a <xQueueGenericSend+0x76>
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	d101      	bne.n	800ad6e <xQueueGenericSend+0x7a>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e000      	b.n	800ad70 <xQueueGenericSend+0x7c>
 800ad6e:	2300      	movs	r3, #0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10c      	bne.n	800ad8e <xQueueGenericSend+0x9a>
	__asm volatile
 800ad74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad78:	b672      	cpsid	i
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	b662      	cpsie	i
 800ad88:	623b      	str	r3, [r7, #32]
}
 800ad8a:	bf00      	nop
 800ad8c:	e7fe      	b.n	800ad8c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad8e:	f001 fa11 	bl	800c1b4 <xTaskGetSchedulerState>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d102      	bne.n	800ad9e <xQueueGenericSend+0xaa>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d101      	bne.n	800ada2 <xQueueGenericSend+0xae>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e000      	b.n	800ada4 <xQueueGenericSend+0xb0>
 800ada2:	2300      	movs	r3, #0
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10c      	bne.n	800adc2 <xQueueGenericSend+0xce>
	__asm volatile
 800ada8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adac:	b672      	cpsid	i
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	b662      	cpsie	i
 800adbc:	61fb      	str	r3, [r7, #28]
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adc2:	f001 ff43 	bl	800cc4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adce:	429a      	cmp	r2, r3
 800add0:	d302      	bcc.n	800add8 <xQueueGenericSend+0xe4>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d129      	bne.n	800ae2c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800add8:	683a      	ldr	r2, [r7, #0]
 800adda:	68b9      	ldr	r1, [r7, #8]
 800addc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adde:	f000 fa15 	bl	800b20c <prvCopyDataToQueue>
 800ade2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ade4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d010      	beq.n	800ae0e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adee:	3324      	adds	r3, #36	; 0x24
 800adf0:	4618      	mov	r0, r3
 800adf2:	f000 fff1 	bl	800bdd8 <xTaskRemoveFromEventList>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d013      	beq.n	800ae24 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800adfc:	4b3f      	ldr	r3, [pc, #252]	; (800aefc <xQueueGenericSend+0x208>)
 800adfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	f3bf 8f4f 	dsb	sy
 800ae08:	f3bf 8f6f 	isb	sy
 800ae0c:	e00a      	b.n	800ae24 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d007      	beq.n	800ae24 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae14:	4b39      	ldr	r3, [pc, #228]	; (800aefc <xQueueGenericSend+0x208>)
 800ae16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae24:	f001 ff46 	bl	800ccb4 <vPortExitCritical>
				return pdPASS;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e063      	b.n	800aef4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d103      	bne.n	800ae3a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae32:	f001 ff3f 	bl	800ccb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae36:	2300      	movs	r3, #0
 800ae38:	e05c      	b.n	800aef4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d106      	bne.n	800ae4e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae40:	f107 0314 	add.w	r3, r7, #20
 800ae44:	4618      	mov	r0, r3
 800ae46:	f001 f855 	bl	800bef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae4a:	2301      	movs	r3, #1
 800ae4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae4e:	f001 ff31 	bl	800ccb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae52:	f000 fd93 	bl	800b97c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae56:	f001 fef9 	bl	800cc4c <vPortEnterCritical>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae60:	b25b      	sxtb	r3, r3
 800ae62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae66:	d103      	bne.n	800ae70 <xQueueGenericSend+0x17c>
 800ae68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae76:	b25b      	sxtb	r3, r3
 800ae78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae7c:	d103      	bne.n	800ae86 <xQueueGenericSend+0x192>
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae86:	f001 ff15 	bl	800ccb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae8a:	1d3a      	adds	r2, r7, #4
 800ae8c:	f107 0314 	add.w	r3, r7, #20
 800ae90:	4611      	mov	r1, r2
 800ae92:	4618      	mov	r0, r3
 800ae94:	f001 f844 	bl	800bf20 <xTaskCheckForTimeOut>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d124      	bne.n	800aee8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aea0:	f000 faac 	bl	800b3fc <prvIsQueueFull>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d018      	beq.n	800aedc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeac:	3310      	adds	r3, #16
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	4611      	mov	r1, r2
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f000 ff3c 	bl	800bd30 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aeb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeba:	f000 fa37 	bl	800b32c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aebe:	f000 fd6b 	bl	800b998 <xTaskResumeAll>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	f47f af7c 	bne.w	800adc2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800aeca:	4b0c      	ldr	r3, [pc, #48]	; (800aefc <xQueueGenericSend+0x208>)
 800aecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	e772      	b.n	800adc2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aedc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aede:	f000 fa25 	bl	800b32c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aee2:	f000 fd59 	bl	800b998 <xTaskResumeAll>
 800aee6:	e76c      	b.n	800adc2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aeea:	f000 fa1f 	bl	800b32c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aeee:	f000 fd53 	bl	800b998 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aef2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3738      	adds	r7, #56	; 0x38
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	e000ed04 	.word	0xe000ed04

0800af00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b08e      	sub	sp, #56	; 0x38
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
 800af0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10c      	bne.n	800af32 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af1c:	b672      	cpsid	i
 800af1e:	f383 8811 	msr	BASEPRI, r3
 800af22:	f3bf 8f6f 	isb	sy
 800af26:	f3bf 8f4f 	dsb	sy
 800af2a:	b662      	cpsie	i
 800af2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af2e:	bf00      	nop
 800af30:	e7fe      	b.n	800af30 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d103      	bne.n	800af40 <xQueueGenericSendFromISR+0x40>
 800af38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d101      	bne.n	800af44 <xQueueGenericSendFromISR+0x44>
 800af40:	2301      	movs	r3, #1
 800af42:	e000      	b.n	800af46 <xQueueGenericSendFromISR+0x46>
 800af44:	2300      	movs	r3, #0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10c      	bne.n	800af64 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	b672      	cpsid	i
 800af50:	f383 8811 	msr	BASEPRI, r3
 800af54:	f3bf 8f6f 	isb	sy
 800af58:	f3bf 8f4f 	dsb	sy
 800af5c:	b662      	cpsie	i
 800af5e:	623b      	str	r3, [r7, #32]
}
 800af60:	bf00      	nop
 800af62:	e7fe      	b.n	800af62 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	2b02      	cmp	r3, #2
 800af68:	d103      	bne.n	800af72 <xQueueGenericSendFromISR+0x72>
 800af6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d101      	bne.n	800af76 <xQueueGenericSendFromISR+0x76>
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <xQueueGenericSendFromISR+0x78>
 800af76:	2300      	movs	r3, #0
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d10c      	bne.n	800af96 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800af7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af80:	b672      	cpsid	i
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	b662      	cpsie	i
 800af90:	61fb      	str	r3, [r7, #28]
}
 800af92:	bf00      	nop
 800af94:	e7fe      	b.n	800af94 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af96:	f001 ff41 	bl	800ce1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af9a:	f3ef 8211 	mrs	r2, BASEPRI
 800af9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa2:	b672      	cpsid	i
 800afa4:	f383 8811 	msr	BASEPRI, r3
 800afa8:	f3bf 8f6f 	isb	sy
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	b662      	cpsie	i
 800afb2:	61ba      	str	r2, [r7, #24]
 800afb4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afb6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d302      	bcc.n	800afcc <xQueueGenericSendFromISR+0xcc>
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d12c      	bne.n	800b026 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	68b9      	ldr	r1, [r7, #8]
 800afda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afdc:	f000 f916 	bl	800b20c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afe0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800afe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afe8:	d112      	bne.n	800b010 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d016      	beq.n	800b020 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff4:	3324      	adds	r3, #36	; 0x24
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 feee 	bl	800bdd8 <xTaskRemoveFromEventList>
 800affc:	4603      	mov	r3, r0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00e      	beq.n	800b020 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00b      	beq.n	800b020 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2201      	movs	r2, #1
 800b00c:	601a      	str	r2, [r3, #0]
 800b00e:	e007      	b.n	800b020 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b014:	3301      	adds	r3, #1
 800b016:	b2db      	uxtb	r3, r3
 800b018:	b25a      	sxtb	r2, r3
 800b01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b020:	2301      	movs	r3, #1
 800b022:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b024:	e001      	b.n	800b02a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b026:	2300      	movs	r3, #0
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
 800b02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b02c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b034:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3738      	adds	r7, #56	; 0x38
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08c      	sub	sp, #48	; 0x30
 800b044:	af00      	add	r7, sp, #0
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b04c:	2300      	movs	r3, #0
 800b04e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10c      	bne.n	800b074 <xQueueReceive+0x34>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	b672      	cpsid	i
 800b060:	f383 8811 	msr	BASEPRI, r3
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	f3bf 8f4f 	dsb	sy
 800b06c:	b662      	cpsie	i
 800b06e:	623b      	str	r3, [r7, #32]
}
 800b070:	bf00      	nop
 800b072:	e7fe      	b.n	800b072 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d103      	bne.n	800b082 <xQueueReceive+0x42>
 800b07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d101      	bne.n	800b086 <xQueueReceive+0x46>
 800b082:	2301      	movs	r3, #1
 800b084:	e000      	b.n	800b088 <xQueueReceive+0x48>
 800b086:	2300      	movs	r3, #0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10c      	bne.n	800b0a6 <xQueueReceive+0x66>
	__asm volatile
 800b08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b090:	b672      	cpsid	i
 800b092:	f383 8811 	msr	BASEPRI, r3
 800b096:	f3bf 8f6f 	isb	sy
 800b09a:	f3bf 8f4f 	dsb	sy
 800b09e:	b662      	cpsie	i
 800b0a0:	61fb      	str	r3, [r7, #28]
}
 800b0a2:	bf00      	nop
 800b0a4:	e7fe      	b.n	800b0a4 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b0a6:	f001 f885 	bl	800c1b4 <xTaskGetSchedulerState>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d102      	bne.n	800b0b6 <xQueueReceive+0x76>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <xQueueReceive+0x7a>
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e000      	b.n	800b0bc <xQueueReceive+0x7c>
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d10c      	bne.n	800b0da <xQueueReceive+0x9a>
	__asm volatile
 800b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c4:	b672      	cpsid	i
 800b0c6:	f383 8811 	msr	BASEPRI, r3
 800b0ca:	f3bf 8f6f 	isb	sy
 800b0ce:	f3bf 8f4f 	dsb	sy
 800b0d2:	b662      	cpsie	i
 800b0d4:	61bb      	str	r3, [r7, #24]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0da:	f001 fdb7 	bl	800cc4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d01f      	beq.n	800b12a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0ea:	68b9      	ldr	r1, [r7, #8]
 800b0ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0ee:	f000 f8f7 	bl	800b2e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	1e5a      	subs	r2, r3, #1
 800b0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d00f      	beq.n	800b122 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b104:	3310      	adds	r3, #16
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fe66 	bl	800bdd8 <xTaskRemoveFromEventList>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d007      	beq.n	800b122 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b112:	4b3d      	ldr	r3, [pc, #244]	; (800b208 <xQueueReceive+0x1c8>)
 800b114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b122:	f001 fdc7 	bl	800ccb4 <vPortExitCritical>
				return pdPASS;
 800b126:	2301      	movs	r3, #1
 800b128:	e069      	b.n	800b1fe <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d103      	bne.n	800b138 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b130:	f001 fdc0 	bl	800ccb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b134:	2300      	movs	r3, #0
 800b136:	e062      	b.n	800b1fe <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d106      	bne.n	800b14c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b13e:	f107 0310 	add.w	r3, r7, #16
 800b142:	4618      	mov	r0, r3
 800b144:	f000 fed6 	bl	800bef4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b148:	2301      	movs	r3, #1
 800b14a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b14c:	f001 fdb2 	bl	800ccb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b150:	f000 fc14 	bl	800b97c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b154:	f001 fd7a 	bl	800cc4c <vPortEnterCritical>
 800b158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b15e:	b25b      	sxtb	r3, r3
 800b160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b164:	d103      	bne.n	800b16e <xQueueReceive+0x12e>
 800b166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b174:	b25b      	sxtb	r3, r3
 800b176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b17a:	d103      	bne.n	800b184 <xQueueReceive+0x144>
 800b17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b184:	f001 fd96 	bl	800ccb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b188:	1d3a      	adds	r2, r7, #4
 800b18a:	f107 0310 	add.w	r3, r7, #16
 800b18e:	4611      	mov	r1, r2
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fec5 	bl	800bf20 <xTaskCheckForTimeOut>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d123      	bne.n	800b1e4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b19c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b19e:	f000 f917 	bl	800b3d0 <prvIsQueueEmpty>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d017      	beq.n	800b1d8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1aa:	3324      	adds	r3, #36	; 0x24
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	4611      	mov	r1, r2
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 fdbd 	bl	800bd30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b1b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1b8:	f000 f8b8 	bl	800b32c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b1bc:	f000 fbec 	bl	800b998 <xTaskResumeAll>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d189      	bne.n	800b0da <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b1c6:	4b10      	ldr	r3, [pc, #64]	; (800b208 <xQueueReceive+0x1c8>)
 800b1c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	e780      	b.n	800b0da <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1da:	f000 f8a7 	bl	800b32c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1de:	f000 fbdb 	bl	800b998 <xTaskResumeAll>
 800b1e2:	e77a      	b.n	800b0da <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1e6:	f000 f8a1 	bl	800b32c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1ea:	f000 fbd5 	bl	800b998 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f0:	f000 f8ee 	bl	800b3d0 <prvIsQueueEmpty>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	f43f af6f 	beq.w	800b0da <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1fe:	4618      	mov	r0, r3
 800b200:	3730      	adds	r7, #48	; 0x30
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	e000ed04 	.word	0xe000ed04

0800b20c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b218:	2300      	movs	r3, #0
 800b21a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b220:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d10d      	bne.n	800b246 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d14d      	bne.n	800b2ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	4618      	mov	r0, r3
 800b238:	f000 ffda 	bl	800c1f0 <xTaskPriorityDisinherit>
 800b23c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	609a      	str	r2, [r3, #8]
 800b244:	e043      	b.n	800b2ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d119      	bne.n	800b280 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6858      	ldr	r0, [r3, #4]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b254:	461a      	mov	r2, r3
 800b256:	68b9      	ldr	r1, [r7, #8]
 800b258:	f011 f9a1 	bl	801c59e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	685a      	ldr	r2, [r3, #4]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b264:	441a      	add	r2, r3
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	429a      	cmp	r2, r3
 800b274:	d32b      	bcc.n	800b2ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681a      	ldr	r2, [r3, #0]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	605a      	str	r2, [r3, #4]
 800b27e:	e026      	b.n	800b2ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	68d8      	ldr	r0, [r3, #12]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b288:	461a      	mov	r2, r3
 800b28a:	68b9      	ldr	r1, [r7, #8]
 800b28c:	f011 f987 	bl	801c59e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	68da      	ldr	r2, [r3, #12]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b298:	425b      	negs	r3, r3
 800b29a:	441a      	add	r2, r3
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	68da      	ldr	r2, [r3, #12]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d207      	bcs.n	800b2bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2b4:	425b      	negs	r3, r3
 800b2b6:	441a      	add	r2, r3
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	d105      	bne.n	800b2ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	1c5a      	adds	r2, r3, #1
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b2d6:	697b      	ldr	r3, [r7, #20]
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3718      	adds	r7, #24
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d018      	beq.n	800b324 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68da      	ldr	r2, [r3, #12]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fa:	441a      	add	r2, r3
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	68da      	ldr	r2, [r3, #12]
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	689b      	ldr	r3, [r3, #8]
 800b308:	429a      	cmp	r2, r3
 800b30a:	d303      	bcc.n	800b314 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68d9      	ldr	r1, [r3, #12]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b31c:	461a      	mov	r2, r3
 800b31e:	6838      	ldr	r0, [r7, #0]
 800b320:	f011 f93d 	bl	801c59e <memcpy>
	}
}
 800b324:	bf00      	nop
 800b326:	3708      	adds	r7, #8
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b334:	f001 fc8a 	bl	800cc4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b33e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b340:	e011      	b.n	800b366 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b346:	2b00      	cmp	r3, #0
 800b348:	d012      	beq.n	800b370 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	3324      	adds	r3, #36	; 0x24
 800b34e:	4618      	mov	r0, r3
 800b350:	f000 fd42 	bl	800bdd8 <xTaskRemoveFromEventList>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b35a:	f000 fe47 	bl	800bfec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
 800b360:	3b01      	subs	r3, #1
 800b362:	b2db      	uxtb	r3, r3
 800b364:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	dce9      	bgt.n	800b342 <prvUnlockQueue+0x16>
 800b36e:	e000      	b.n	800b372 <prvUnlockQueue+0x46>
					break;
 800b370:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	22ff      	movs	r2, #255	; 0xff
 800b376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b37a:	f001 fc9b 	bl	800ccb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b37e:	f001 fc65 	bl	800cc4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b388:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b38a:	e011      	b.n	800b3b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d012      	beq.n	800b3ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	3310      	adds	r3, #16
 800b398:	4618      	mov	r0, r3
 800b39a:	f000 fd1d 	bl	800bdd8 <xTaskRemoveFromEventList>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d001      	beq.n	800b3a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b3a4:	f000 fe22 	bl	800bfec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b3a8:	7bbb      	ldrb	r3, [r7, #14]
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b3b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	dce9      	bgt.n	800b38c <prvUnlockQueue+0x60>
 800b3b8:	e000      	b.n	800b3bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b3ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	22ff      	movs	r2, #255	; 0xff
 800b3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b3c4:	f001 fc76 	bl	800ccb4 <vPortExitCritical>
}
 800b3c8:	bf00      	nop
 800b3ca:	3710      	adds	r7, #16
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b084      	sub	sp, #16
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3d8:	f001 fc38 	bl	800cc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d102      	bne.n	800b3ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	60fb      	str	r3, [r7, #12]
 800b3e8:	e001      	b.n	800b3ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3ee:	f001 fc61 	bl	800ccb4 <vPortExitCritical>

	return xReturn;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3710      	adds	r7, #16
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b404:	f001 fc22 	bl	800cc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b410:	429a      	cmp	r2, r3
 800b412:	d102      	bne.n	800b41a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b414:	2301      	movs	r3, #1
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	e001      	b.n	800b41e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b41e:	f001 fc49 	bl	800ccb4 <vPortExitCritical>

	return xReturn;
 800b422:	68fb      	ldr	r3, [r7, #12]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}

0800b42c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b42c:	b480      	push	{r7}
 800b42e:	b085      	sub	sp, #20
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b436:	2300      	movs	r3, #0
 800b438:	60fb      	str	r3, [r7, #12]
 800b43a:	e014      	b.n	800b466 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b43c:	4a0f      	ldr	r2, [pc, #60]	; (800b47c <vQueueAddToRegistry+0x50>)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d10b      	bne.n	800b460 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b448:	490c      	ldr	r1, [pc, #48]	; (800b47c <vQueueAddToRegistry+0x50>)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b452:	4a0a      	ldr	r2, [pc, #40]	; (800b47c <vQueueAddToRegistry+0x50>)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	00db      	lsls	r3, r3, #3
 800b458:	4413      	add	r3, r2
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b45e:	e006      	b.n	800b46e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	3301      	adds	r3, #1
 800b464:	60fb      	str	r3, [r7, #12]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b07      	cmp	r3, #7
 800b46a:	d9e7      	bls.n	800b43c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b46c:	bf00      	nop
 800b46e:	bf00      	nop
 800b470:	3714      	adds	r7, #20
 800b472:	46bd      	mov	sp, r7
 800b474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b478:	4770      	bx	lr
 800b47a:	bf00      	nop
 800b47c:	20008120 	.word	0x20008120

0800b480 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b480:	b580      	push	{r7, lr}
 800b482:	b086      	sub	sp, #24
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b490:	f001 fbdc 	bl	800cc4c <vPortEnterCritical>
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b49a:	b25b      	sxtb	r3, r3
 800b49c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4a0:	d103      	bne.n	800b4aa <vQueueWaitForMessageRestricted+0x2a>
 800b4a2:	697b      	ldr	r3, [r7, #20]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4b0:	b25b      	sxtb	r3, r3
 800b4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4b6:	d103      	bne.n	800b4c0 <vQueueWaitForMessageRestricted+0x40>
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4c0:	f001 fbf8 	bl	800ccb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d106      	bne.n	800b4da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	3324      	adds	r3, #36	; 0x24
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	68b9      	ldr	r1, [r7, #8]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fc51 	bl	800bd7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4da:	6978      	ldr	r0, [r7, #20]
 800b4dc:	f7ff ff26 	bl	800b32c <prvUnlockQueue>
	}
 800b4e0:	bf00      	nop
 800b4e2:	3718      	adds	r7, #24
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b08e      	sub	sp, #56	; 0x38
 800b4ec:	af04      	add	r7, sp, #16
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	607a      	str	r2, [r7, #4]
 800b4f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d10c      	bne.n	800b516 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b500:	b672      	cpsid	i
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	b662      	cpsie	i
 800b510:	623b      	str	r3, [r7, #32]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d10c      	bne.n	800b536 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b520:	b672      	cpsid	i
 800b522:	f383 8811 	msr	BASEPRI, r3
 800b526:	f3bf 8f6f 	isb	sy
 800b52a:	f3bf 8f4f 	dsb	sy
 800b52e:	b662      	cpsie	i
 800b530:	61fb      	str	r3, [r7, #28]
}
 800b532:	bf00      	nop
 800b534:	e7fe      	b.n	800b534 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b536:	235c      	movs	r3, #92	; 0x5c
 800b538:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	2b5c      	cmp	r3, #92	; 0x5c
 800b53e:	d00c      	beq.n	800b55a <xTaskCreateStatic+0x72>
	__asm volatile
 800b540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b544:	b672      	cpsid	i
 800b546:	f383 8811 	msr	BASEPRI, r3
 800b54a:	f3bf 8f6f 	isb	sy
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	b662      	cpsie	i
 800b554:	61bb      	str	r3, [r7, #24]
}
 800b556:	bf00      	nop
 800b558:	e7fe      	b.n	800b558 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b55a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d01e      	beq.n	800b5a0 <xTaskCreateStatic+0xb8>
 800b562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b564:	2b00      	cmp	r3, #0
 800b566:	d01b      	beq.n	800b5a0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b570:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b574:	2202      	movs	r2, #2
 800b576:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b57a:	2300      	movs	r3, #0
 800b57c:	9303      	str	r3, [sp, #12]
 800b57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b580:	9302      	str	r3, [sp, #8]
 800b582:	f107 0314 	add.w	r3, r7, #20
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58a:	9300      	str	r3, [sp, #0]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	687a      	ldr	r2, [r7, #4]
 800b590:	68b9      	ldr	r1, [r7, #8]
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f000 f850 	bl	800b638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b59a:	f000 f8df 	bl	800b75c <prvAddNewTaskToReadyList>
 800b59e:	e001      	b.n	800b5a4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b5a4:	697b      	ldr	r3, [r7, #20]
	}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3728      	adds	r7, #40	; 0x28
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b08c      	sub	sp, #48	; 0x30
 800b5b2:	af04      	add	r7, sp, #16
 800b5b4:	60f8      	str	r0, [r7, #12]
 800b5b6:	60b9      	str	r1, [r7, #8]
 800b5b8:	603b      	str	r3, [r7, #0]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b5be:	88fb      	ldrh	r3, [r7, #6]
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f001 fc6e 	bl	800cea4 <pvPortMalloc>
 800b5c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d00e      	beq.n	800b5ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5d0:	205c      	movs	r0, #92	; 0x5c
 800b5d2:	f001 fc67 	bl	800cea4 <pvPortMalloc>
 800b5d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d003      	beq.n	800b5e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5de:	69fb      	ldr	r3, [r7, #28]
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	631a      	str	r2, [r3, #48]	; 0x30
 800b5e4:	e005      	b.n	800b5f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5e6:	6978      	ldr	r0, [r7, #20]
 800b5e8:	f001 fd26 	bl	800d038 <vPortFree>
 800b5ec:	e001      	b.n	800b5f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d017      	beq.n	800b628 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5f8:	69fb      	ldr	r3, [r7, #28]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b600:	88fa      	ldrh	r2, [r7, #6]
 800b602:	2300      	movs	r3, #0
 800b604:	9303      	str	r3, [sp, #12]
 800b606:	69fb      	ldr	r3, [r7, #28]
 800b608:	9302      	str	r3, [sp, #8]
 800b60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	68b9      	ldr	r1, [r7, #8]
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f000 f80e 	bl	800b638 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b61c:	69f8      	ldr	r0, [r7, #28]
 800b61e:	f000 f89d 	bl	800b75c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b622:	2301      	movs	r3, #1
 800b624:	61bb      	str	r3, [r7, #24]
 800b626:	e002      	b.n	800b62e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b62c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b62e:	69bb      	ldr	r3, [r7, #24]
	}
 800b630:	4618      	mov	r0, r3
 800b632:	3720      	adds	r7, #32
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b088      	sub	sp, #32
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	607a      	str	r2, [r7, #4]
 800b644:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b648:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	461a      	mov	r2, r3
 800b650:	21a5      	movs	r1, #165	; 0xa5
 800b652:	f010 fedb 	bl	801c40c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b65a:	6879      	ldr	r1, [r7, #4]
 800b65c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b660:	440b      	add	r3, r1
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	4413      	add	r3, r2
 800b666:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b668:	69bb      	ldr	r3, [r7, #24]
 800b66a:	f023 0307 	bic.w	r3, r3, #7
 800b66e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	f003 0307 	and.w	r3, r3, #7
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00c      	beq.n	800b694 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b67a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b67e:	b672      	cpsid	i
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	b662      	cpsie	i
 800b68e:	617b      	str	r3, [r7, #20]
}
 800b690:	bf00      	nop
 800b692:	e7fe      	b.n	800b692 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d01f      	beq.n	800b6da <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b69a:	2300      	movs	r3, #0
 800b69c:	61fb      	str	r3, [r7, #28]
 800b69e:	e012      	b.n	800b6c6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b6a0:	68ba      	ldr	r2, [r7, #8]
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	7819      	ldrb	r1, [r3, #0]
 800b6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	3334      	adds	r3, #52	; 0x34
 800b6b0:	460a      	mov	r2, r1
 800b6b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b6b4:	68ba      	ldr	r2, [r7, #8]
 800b6b6:	69fb      	ldr	r3, [r7, #28]
 800b6b8:	4413      	add	r3, r2
 800b6ba:	781b      	ldrb	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d006      	beq.n	800b6ce <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	61fb      	str	r3, [r7, #28]
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	2b0f      	cmp	r3, #15
 800b6ca:	d9e9      	bls.n	800b6a0 <prvInitialiseNewTask+0x68>
 800b6cc:	e000      	b.n	800b6d0 <prvInitialiseNewTask+0x98>
			{
				break;
 800b6ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6d8:	e003      	b.n	800b6e2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e4:	2b37      	cmp	r3, #55	; 0x37
 800b6e6:	d901      	bls.n	800b6ec <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6e8:	2337      	movs	r3, #55	; 0x37
 800b6ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b700:	3304      	adds	r3, #4
 800b702:	4618      	mov	r0, r3
 800b704:	f7ff f952 	bl	800a9ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b70a:	3318      	adds	r3, #24
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff f94d 	bl	800a9ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b716:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b720:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b724:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b726:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	2200      	movs	r2, #0
 800b72c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	68f9      	ldr	r1, [r7, #12]
 800b73a:	69b8      	ldr	r0, [r7, #24]
 800b73c:	f001 f97a 	bl	800ca34 <pxPortInitialiseStack>
 800b740:	4602      	mov	r2, r0
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d002      	beq.n	800b752 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b74e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b750:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b752:	bf00      	nop
 800b754:	3720      	adds	r7, #32
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
	...

0800b75c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b764:	f001 fa72 	bl	800cc4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b768:	4b2d      	ldr	r3, [pc, #180]	; (800b820 <prvAddNewTaskToReadyList+0xc4>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3301      	adds	r3, #1
 800b76e:	4a2c      	ldr	r2, [pc, #176]	; (800b820 <prvAddNewTaskToReadyList+0xc4>)
 800b770:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b772:	4b2c      	ldr	r3, [pc, #176]	; (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d109      	bne.n	800b78e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b77a:	4a2a      	ldr	r2, [pc, #168]	; (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b780:	4b27      	ldr	r3, [pc, #156]	; (800b820 <prvAddNewTaskToReadyList+0xc4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d110      	bne.n	800b7aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b788:	f000 fc54 	bl	800c034 <prvInitialiseTaskLists>
 800b78c:	e00d      	b.n	800b7aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b78e:	4b26      	ldr	r3, [pc, #152]	; (800b828 <prvAddNewTaskToReadyList+0xcc>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d109      	bne.n	800b7aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b796:	4b23      	ldr	r3, [pc, #140]	; (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d802      	bhi.n	800b7aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7a4:	4a1f      	ldr	r2, [pc, #124]	; (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7aa:	4b20      	ldr	r3, [pc, #128]	; (800b82c <prvAddNewTaskToReadyList+0xd0>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	4a1e      	ldr	r2, [pc, #120]	; (800b82c <prvAddNewTaskToReadyList+0xd0>)
 800b7b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7b4:	4b1d      	ldr	r3, [pc, #116]	; (800b82c <prvAddNewTaskToReadyList+0xd0>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c0:	4b1b      	ldr	r3, [pc, #108]	; (800b830 <prvAddNewTaskToReadyList+0xd4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d903      	bls.n	800b7d0 <prvAddNewTaskToReadyList+0x74>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	4a18      	ldr	r2, [pc, #96]	; (800b830 <prvAddNewTaskToReadyList+0xd4>)
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4a15      	ldr	r2, [pc, #84]	; (800b834 <prvAddNewTaskToReadyList+0xd8>)
 800b7de:	441a      	add	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	f7ff f8ed 	bl	800a9c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7ec:	f001 fa62 	bl	800ccb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7f0:	4b0d      	ldr	r3, [pc, #52]	; (800b828 <prvAddNewTaskToReadyList+0xcc>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00e      	beq.n	800b816 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7f8:	4b0a      	ldr	r3, [pc, #40]	; (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b802:	429a      	cmp	r2, r3
 800b804:	d207      	bcs.n	800b816 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b806:	4b0c      	ldr	r3, [pc, #48]	; (800b838 <prvAddNewTaskToReadyList+0xdc>)
 800b808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20008634 	.word	0x20008634
 800b824:	20008160 	.word	0x20008160
 800b828:	20008640 	.word	0x20008640
 800b82c:	20008650 	.word	0x20008650
 800b830:	2000863c 	.word	0x2000863c
 800b834:	20008164 	.word	0x20008164
 800b838:	e000ed04 	.word	0xe000ed04

0800b83c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b844:	2300      	movs	r3, #0
 800b846:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d019      	beq.n	800b882 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b84e:	4b14      	ldr	r3, [pc, #80]	; (800b8a0 <vTaskDelay+0x64>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00c      	beq.n	800b870 <vTaskDelay+0x34>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b85a:	b672      	cpsid	i
 800b85c:	f383 8811 	msr	BASEPRI, r3
 800b860:	f3bf 8f6f 	isb	sy
 800b864:	f3bf 8f4f 	dsb	sy
 800b868:	b662      	cpsie	i
 800b86a:	60bb      	str	r3, [r7, #8]
}
 800b86c:	bf00      	nop
 800b86e:	e7fe      	b.n	800b86e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b870:	f000 f884 	bl	800b97c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b874:	2100      	movs	r1, #0
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 fd2c 	bl	800c2d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b87c:	f000 f88c 	bl	800b998 <xTaskResumeAll>
 800b880:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d107      	bne.n	800b898 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b888:	4b06      	ldr	r3, [pc, #24]	; (800b8a4 <vTaskDelay+0x68>)
 800b88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b88e:	601a      	str	r2, [r3, #0]
 800b890:	f3bf 8f4f 	dsb	sy
 800b894:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b898:	bf00      	nop
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	2000865c 	.word	0x2000865c
 800b8a4:	e000ed04 	.word	0xe000ed04

0800b8a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08a      	sub	sp, #40	; 0x28
 800b8ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8b6:	463a      	mov	r2, r7
 800b8b8:	1d39      	adds	r1, r7, #4
 800b8ba:	f107 0308 	add.w	r3, r7, #8
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff f820 	bl	800a904 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	9202      	str	r2, [sp, #8]
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	460a      	mov	r2, r1
 800b8d6:	4923      	ldr	r1, [pc, #140]	; (800b964 <vTaskStartScheduler+0xbc>)
 800b8d8:	4823      	ldr	r0, [pc, #140]	; (800b968 <vTaskStartScheduler+0xc0>)
 800b8da:	f7ff fe05 	bl	800b4e8 <xTaskCreateStatic>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4a22      	ldr	r2, [pc, #136]	; (800b96c <vTaskStartScheduler+0xc4>)
 800b8e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8e4:	4b21      	ldr	r3, [pc, #132]	; (800b96c <vTaskStartScheduler+0xc4>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	617b      	str	r3, [r7, #20]
 800b8f0:	e001      	b.n	800b8f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d102      	bne.n	800b902 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8fc:	f000 fd3e 	bl	800c37c <xTimerCreateTimerTask>
 800b900:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d118      	bne.n	800b93a <vTaskStartScheduler+0x92>
	__asm volatile
 800b908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b90c:	b672      	cpsid	i
 800b90e:	f383 8811 	msr	BASEPRI, r3
 800b912:	f3bf 8f6f 	isb	sy
 800b916:	f3bf 8f4f 	dsb	sy
 800b91a:	b662      	cpsie	i
 800b91c:	613b      	str	r3, [r7, #16]
}
 800b91e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b920:	4b13      	ldr	r3, [pc, #76]	; (800b970 <vTaskStartScheduler+0xc8>)
 800b922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b926:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b928:	4b12      	ldr	r3, [pc, #72]	; (800b974 <vTaskStartScheduler+0xcc>)
 800b92a:	2201      	movs	r2, #1
 800b92c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b92e:	4b12      	ldr	r3, [pc, #72]	; (800b978 <vTaskStartScheduler+0xd0>)
 800b930:	2200      	movs	r2, #0
 800b932:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b934:	f001 f90c 	bl	800cb50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b938:	e010      	b.n	800b95c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b940:	d10c      	bne.n	800b95c <vTaskStartScheduler+0xb4>
	__asm volatile
 800b942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b946:	b672      	cpsid	i
 800b948:	f383 8811 	msr	BASEPRI, r3
 800b94c:	f3bf 8f6f 	isb	sy
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	b662      	cpsie	i
 800b956:	60fb      	str	r3, [r7, #12]
}
 800b958:	bf00      	nop
 800b95a:	e7fe      	b.n	800b95a <vTaskStartScheduler+0xb2>
}
 800b95c:	bf00      	nop
 800b95e:	3718      	adds	r7, #24
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	0801d348 	.word	0x0801d348
 800b968:	0800c005 	.word	0x0800c005
 800b96c:	20008658 	.word	0x20008658
 800b970:	20008654 	.word	0x20008654
 800b974:	20008640 	.word	0x20008640
 800b978:	20008638 	.word	0x20008638

0800b97c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b980:	4b04      	ldr	r3, [pc, #16]	; (800b994 <vTaskSuspendAll+0x18>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3301      	adds	r3, #1
 800b986:	4a03      	ldr	r2, [pc, #12]	; (800b994 <vTaskSuspendAll+0x18>)
 800b988:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b98a:	bf00      	nop
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	2000865c 	.word	0x2000865c

0800b998 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9a6:	4b43      	ldr	r3, [pc, #268]	; (800bab4 <xTaskResumeAll+0x11c>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d10c      	bne.n	800b9c8 <xTaskResumeAll+0x30>
	__asm volatile
 800b9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b2:	b672      	cpsid	i
 800b9b4:	f383 8811 	msr	BASEPRI, r3
 800b9b8:	f3bf 8f6f 	isb	sy
 800b9bc:	f3bf 8f4f 	dsb	sy
 800b9c0:	b662      	cpsie	i
 800b9c2:	603b      	str	r3, [r7, #0]
}
 800b9c4:	bf00      	nop
 800b9c6:	e7fe      	b.n	800b9c6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9c8:	f001 f940 	bl	800cc4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9cc:	4b39      	ldr	r3, [pc, #228]	; (800bab4 <xTaskResumeAll+0x11c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	4a38      	ldr	r2, [pc, #224]	; (800bab4 <xTaskResumeAll+0x11c>)
 800b9d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9d6:	4b37      	ldr	r3, [pc, #220]	; (800bab4 <xTaskResumeAll+0x11c>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d162      	bne.n	800baa4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9de:	4b36      	ldr	r3, [pc, #216]	; (800bab8 <xTaskResumeAll+0x120>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d05e      	beq.n	800baa4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9e6:	e02f      	b.n	800ba48 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9e8:	4b34      	ldr	r3, [pc, #208]	; (800babc <xTaskResumeAll+0x124>)
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	3318      	adds	r3, #24
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f7ff f843 	bl	800aa80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7ff f83e 	bl	800aa80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba08:	4b2d      	ldr	r3, [pc, #180]	; (800bac0 <xTaskResumeAll+0x128>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	429a      	cmp	r2, r3
 800ba0e:	d903      	bls.n	800ba18 <xTaskResumeAll+0x80>
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba14:	4a2a      	ldr	r2, [pc, #168]	; (800bac0 <xTaskResumeAll+0x128>)
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba1c:	4613      	mov	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	4413      	add	r3, r2
 800ba22:	009b      	lsls	r3, r3, #2
 800ba24:	4a27      	ldr	r2, [pc, #156]	; (800bac4 <xTaskResumeAll+0x12c>)
 800ba26:	441a      	add	r2, r3
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4610      	mov	r0, r2
 800ba30:	f7fe ffc9 	bl	800a9c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba38:	4b23      	ldr	r3, [pc, #140]	; (800bac8 <xTaskResumeAll+0x130>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d302      	bcc.n	800ba48 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800ba42:	4b22      	ldr	r3, [pc, #136]	; (800bacc <xTaskResumeAll+0x134>)
 800ba44:	2201      	movs	r2, #1
 800ba46:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba48:	4b1c      	ldr	r3, [pc, #112]	; (800babc <xTaskResumeAll+0x124>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1cb      	bne.n	800b9e8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba56:	f000 fb8d 	bl	800c174 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ba5a:	4b1d      	ldr	r3, [pc, #116]	; (800bad0 <xTaskResumeAll+0x138>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d010      	beq.n	800ba88 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba66:	f000 f847 	bl	800baf8 <xTaskIncrementTick>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800ba70:	4b16      	ldr	r3, [pc, #88]	; (800bacc <xTaskResumeAll+0x134>)
 800ba72:	2201      	movs	r2, #1
 800ba74:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	3b01      	subs	r3, #1
 800ba7a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1f1      	bne.n	800ba66 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800ba82:	4b13      	ldr	r3, [pc, #76]	; (800bad0 <xTaskResumeAll+0x138>)
 800ba84:	2200      	movs	r2, #0
 800ba86:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba88:	4b10      	ldr	r3, [pc, #64]	; (800bacc <xTaskResumeAll+0x134>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d009      	beq.n	800baa4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba90:	2301      	movs	r3, #1
 800ba92:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba94:	4b0f      	ldr	r3, [pc, #60]	; (800bad4 <xTaskResumeAll+0x13c>)
 800ba96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba9a:	601a      	str	r2, [r3, #0]
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baa4:	f001 f906 	bl	800ccb4 <vPortExitCritical>

	return xAlreadyYielded;
 800baa8:	68bb      	ldr	r3, [r7, #8]
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3710      	adds	r7, #16
 800baae:	46bd      	mov	sp, r7
 800bab0:	bd80      	pop	{r7, pc}
 800bab2:	bf00      	nop
 800bab4:	2000865c 	.word	0x2000865c
 800bab8:	20008634 	.word	0x20008634
 800babc:	200085f4 	.word	0x200085f4
 800bac0:	2000863c 	.word	0x2000863c
 800bac4:	20008164 	.word	0x20008164
 800bac8:	20008160 	.word	0x20008160
 800bacc:	20008648 	.word	0x20008648
 800bad0:	20008644 	.word	0x20008644
 800bad4:	e000ed04 	.word	0xe000ed04

0800bad8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bade:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <xTaskGetTickCount+0x1c>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bae4:	687b      	ldr	r3, [r7, #4]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	370c      	adds	r7, #12
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr
 800baf2:	bf00      	nop
 800baf4:	20008638 	.word	0x20008638

0800baf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b086      	sub	sp, #24
 800bafc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bafe:	2300      	movs	r3, #0
 800bb00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb02:	4b50      	ldr	r3, [pc, #320]	; (800bc44 <xTaskIncrementTick+0x14c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	f040 808b 	bne.w	800bc22 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb0c:	4b4e      	ldr	r3, [pc, #312]	; (800bc48 <xTaskIncrementTick+0x150>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	3301      	adds	r3, #1
 800bb12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb14:	4a4c      	ldr	r2, [pc, #304]	; (800bc48 <xTaskIncrementTick+0x150>)
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d122      	bne.n	800bb66 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb20:	4b4a      	ldr	r3, [pc, #296]	; (800bc4c <xTaskIncrementTick+0x154>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00c      	beq.n	800bb44 <xTaskIncrementTick+0x4c>
	__asm volatile
 800bb2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb2e:	b672      	cpsid	i
 800bb30:	f383 8811 	msr	BASEPRI, r3
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	b662      	cpsie	i
 800bb3e:	603b      	str	r3, [r7, #0]
}
 800bb40:	bf00      	nop
 800bb42:	e7fe      	b.n	800bb42 <xTaskIncrementTick+0x4a>
 800bb44:	4b41      	ldr	r3, [pc, #260]	; (800bc4c <xTaskIncrementTick+0x154>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	60fb      	str	r3, [r7, #12]
 800bb4a:	4b41      	ldr	r3, [pc, #260]	; (800bc50 <xTaskIncrementTick+0x158>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a3f      	ldr	r2, [pc, #252]	; (800bc4c <xTaskIncrementTick+0x154>)
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	4a3f      	ldr	r2, [pc, #252]	; (800bc50 <xTaskIncrementTick+0x158>)
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6013      	str	r3, [r2, #0]
 800bb58:	4b3e      	ldr	r3, [pc, #248]	; (800bc54 <xTaskIncrementTick+0x15c>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	4a3d      	ldr	r2, [pc, #244]	; (800bc54 <xTaskIncrementTick+0x15c>)
 800bb60:	6013      	str	r3, [r2, #0]
 800bb62:	f000 fb07 	bl	800c174 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bb66:	4b3c      	ldr	r3, [pc, #240]	; (800bc58 <xTaskIncrementTick+0x160>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	d349      	bcc.n	800bc04 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb70:	4b36      	ldr	r3, [pc, #216]	; (800bc4c <xTaskIncrementTick+0x154>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d104      	bne.n	800bb84 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb7a:	4b37      	ldr	r3, [pc, #220]	; (800bc58 <xTaskIncrementTick+0x160>)
 800bb7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb80:	601a      	str	r2, [r3, #0]
					break;
 800bb82:	e03f      	b.n	800bc04 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb84:	4b31      	ldr	r3, [pc, #196]	; (800bc4c <xTaskIncrementTick+0x154>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bb94:	693a      	ldr	r2, [r7, #16]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d203      	bcs.n	800bba4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bb9c:	4a2e      	ldr	r2, [pc, #184]	; (800bc58 <xTaskIncrementTick+0x160>)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bba2:	e02f      	b.n	800bc04 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	3304      	adds	r3, #4
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fe ff69 	bl	800aa80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d004      	beq.n	800bbc0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	3318      	adds	r3, #24
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7fe ff60 	bl	800aa80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbc4:	4b25      	ldr	r3, [pc, #148]	; (800bc5c <xTaskIncrementTick+0x164>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d903      	bls.n	800bbd4 <xTaskIncrementTick+0xdc>
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd0:	4a22      	ldr	r2, [pc, #136]	; (800bc5c <xTaskIncrementTick+0x164>)
 800bbd2:	6013      	str	r3, [r2, #0]
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbd8:	4613      	mov	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	4a1f      	ldr	r2, [pc, #124]	; (800bc60 <xTaskIncrementTick+0x168>)
 800bbe2:	441a      	add	r2, r3
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f7fe feeb 	bl	800a9c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf4:	4b1b      	ldr	r3, [pc, #108]	; (800bc64 <xTaskIncrementTick+0x16c>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d3b8      	bcc.n	800bb70 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc02:	e7b5      	b.n	800bb70 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc04:	4b17      	ldr	r3, [pc, #92]	; (800bc64 <xTaskIncrementTick+0x16c>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc0a:	4915      	ldr	r1, [pc, #84]	; (800bc60 <xTaskIncrementTick+0x168>)
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	4413      	add	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	440b      	add	r3, r1
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d907      	bls.n	800bc2c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	e004      	b.n	800bc2c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800bc22:	4b11      	ldr	r3, [pc, #68]	; (800bc68 <xTaskIncrementTick+0x170>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	3301      	adds	r3, #1
 800bc28:	4a0f      	ldr	r2, [pc, #60]	; (800bc68 <xTaskIncrementTick+0x170>)
 800bc2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800bc2c:	4b0f      	ldr	r3, [pc, #60]	; (800bc6c <xTaskIncrementTick+0x174>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d001      	beq.n	800bc38 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800bc34:	2301      	movs	r3, #1
 800bc36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800bc38:	697b      	ldr	r3, [r7, #20]
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	2000865c 	.word	0x2000865c
 800bc48:	20008638 	.word	0x20008638
 800bc4c:	200085ec 	.word	0x200085ec
 800bc50:	200085f0 	.word	0x200085f0
 800bc54:	2000864c 	.word	0x2000864c
 800bc58:	20008654 	.word	0x20008654
 800bc5c:	2000863c 	.word	0x2000863c
 800bc60:	20008164 	.word	0x20008164
 800bc64:	20008160 	.word	0x20008160
 800bc68:	20008644 	.word	0x20008644
 800bc6c:	20008648 	.word	0x20008648

0800bc70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bc76:	4b29      	ldr	r3, [pc, #164]	; (800bd1c <vTaskSwitchContext+0xac>)
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d003      	beq.n	800bc86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bc7e:	4b28      	ldr	r3, [pc, #160]	; (800bd20 <vTaskSwitchContext+0xb0>)
 800bc80:	2201      	movs	r2, #1
 800bc82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bc84:	e043      	b.n	800bd0e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800bc86:	4b26      	ldr	r3, [pc, #152]	; (800bd20 <vTaskSwitchContext+0xb0>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc8c:	4b25      	ldr	r3, [pc, #148]	; (800bd24 <vTaskSwitchContext+0xb4>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	60fb      	str	r3, [r7, #12]
 800bc92:	e012      	b.n	800bcba <vTaskSwitchContext+0x4a>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d10c      	bne.n	800bcb4 <vTaskSwitchContext+0x44>
	__asm volatile
 800bc9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc9e:	b672      	cpsid	i
 800bca0:	f383 8811 	msr	BASEPRI, r3
 800bca4:	f3bf 8f6f 	isb	sy
 800bca8:	f3bf 8f4f 	dsb	sy
 800bcac:	b662      	cpsie	i
 800bcae:	607b      	str	r3, [r7, #4]
}
 800bcb0:	bf00      	nop
 800bcb2:	e7fe      	b.n	800bcb2 <vTaskSwitchContext+0x42>
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3b01      	subs	r3, #1
 800bcb8:	60fb      	str	r3, [r7, #12]
 800bcba:	491b      	ldr	r1, [pc, #108]	; (800bd28 <vTaskSwitchContext+0xb8>)
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4413      	add	r3, r2
 800bcc4:	009b      	lsls	r3, r3, #2
 800bcc6:	440b      	add	r3, r1
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d0e2      	beq.n	800bc94 <vTaskSwitchContext+0x24>
 800bcce:	68fa      	ldr	r2, [r7, #12]
 800bcd0:	4613      	mov	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4413      	add	r3, r2
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4a13      	ldr	r2, [pc, #76]	; (800bd28 <vTaskSwitchContext+0xb8>)
 800bcda:	4413      	add	r3, r2
 800bcdc:	60bb      	str	r3, [r7, #8]
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	685a      	ldr	r2, [r3, #4]
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	605a      	str	r2, [r3, #4]
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	3308      	adds	r3, #8
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d104      	bne.n	800bcfe <vTaskSwitchContext+0x8e>
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	685a      	ldr	r2, [r3, #4]
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	605a      	str	r2, [r3, #4]
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	4a09      	ldr	r2, [pc, #36]	; (800bd2c <vTaskSwitchContext+0xbc>)
 800bd06:	6013      	str	r3, [r2, #0]
 800bd08:	4a06      	ldr	r2, [pc, #24]	; (800bd24 <vTaskSwitchContext+0xb4>)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	6013      	str	r3, [r2, #0]
}
 800bd0e:	bf00      	nop
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	2000865c 	.word	0x2000865c
 800bd20:	20008648 	.word	0x20008648
 800bd24:	2000863c 	.word	0x2000863c
 800bd28:	20008164 	.word	0x20008164
 800bd2c:	20008160 	.word	0x20008160

0800bd30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10c      	bne.n	800bd5a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800bd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd44:	b672      	cpsid	i
 800bd46:	f383 8811 	msr	BASEPRI, r3
 800bd4a:	f3bf 8f6f 	isb	sy
 800bd4e:	f3bf 8f4f 	dsb	sy
 800bd52:	b662      	cpsie	i
 800bd54:	60fb      	str	r3, [r7, #12]
}
 800bd56:	bf00      	nop
 800bd58:	e7fe      	b.n	800bd58 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bd5a:	4b07      	ldr	r3, [pc, #28]	; (800bd78 <vTaskPlaceOnEventList+0x48>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	3318      	adds	r3, #24
 800bd60:	4619      	mov	r1, r3
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f7fe fe53 	bl	800aa0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bd68:	2101      	movs	r1, #1
 800bd6a:	6838      	ldr	r0, [r7, #0]
 800bd6c:	f000 fab2 	bl	800c2d4 <prvAddCurrentTaskToDelayedList>
}
 800bd70:	bf00      	nop
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	20008160 	.word	0x20008160

0800bd7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d10c      	bne.n	800bda8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	b672      	cpsid	i
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	b662      	cpsie	i
 800bda2:	617b      	str	r3, [r7, #20]
}
 800bda4:	bf00      	nop
 800bda6:	e7fe      	b.n	800bda6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bda8:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <vTaskPlaceOnEventListRestricted+0x58>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	3318      	adds	r3, #24
 800bdae:	4619      	mov	r1, r3
 800bdb0:	68f8      	ldr	r0, [r7, #12]
 800bdb2:	f7fe fe08 	bl	800a9c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d002      	beq.n	800bdc2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800bdbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bdc0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bdc2:	6879      	ldr	r1, [r7, #4]
 800bdc4:	68b8      	ldr	r0, [r7, #8]
 800bdc6:	f000 fa85 	bl	800c2d4 <prvAddCurrentTaskToDelayedList>
	}
 800bdca:	bf00      	nop
 800bdcc:	3718      	adds	r7, #24
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	20008160 	.word	0x20008160

0800bdd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b086      	sub	sp, #24
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	68db      	ldr	r3, [r3, #12]
 800bde6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d10c      	bne.n	800be08 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf2:	b672      	cpsid	i
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	b662      	cpsie	i
 800be02:	60fb      	str	r3, [r7, #12]
}
 800be04:	bf00      	nop
 800be06:	e7fe      	b.n	800be06 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	3318      	adds	r3, #24
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7fe fe37 	bl	800aa80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be12:	4b1e      	ldr	r3, [pc, #120]	; (800be8c <xTaskRemoveFromEventList+0xb4>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d11d      	bne.n	800be56 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	3304      	adds	r3, #4
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fe fe2e 	bl	800aa80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be28:	4b19      	ldr	r3, [pc, #100]	; (800be90 <xTaskRemoveFromEventList+0xb8>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d903      	bls.n	800be38 <xTaskRemoveFromEventList+0x60>
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be34:	4a16      	ldr	r2, [pc, #88]	; (800be90 <xTaskRemoveFromEventList+0xb8>)
 800be36:	6013      	str	r3, [r2, #0]
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3c:	4613      	mov	r3, r2
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4413      	add	r3, r2
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	4a13      	ldr	r2, [pc, #76]	; (800be94 <xTaskRemoveFromEventList+0xbc>)
 800be46:	441a      	add	r2, r3
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	3304      	adds	r3, #4
 800be4c:	4619      	mov	r1, r3
 800be4e:	4610      	mov	r0, r2
 800be50:	f7fe fdb9 	bl	800a9c6 <vListInsertEnd>
 800be54:	e005      	b.n	800be62 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	3318      	adds	r3, #24
 800be5a:	4619      	mov	r1, r3
 800be5c:	480e      	ldr	r0, [pc, #56]	; (800be98 <xTaskRemoveFromEventList+0xc0>)
 800be5e:	f7fe fdb2 	bl	800a9c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be66:	4b0d      	ldr	r3, [pc, #52]	; (800be9c <xTaskRemoveFromEventList+0xc4>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d905      	bls.n	800be7c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800be70:	2301      	movs	r3, #1
 800be72:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800be74:	4b0a      	ldr	r3, [pc, #40]	; (800bea0 <xTaskRemoveFromEventList+0xc8>)
 800be76:	2201      	movs	r2, #1
 800be78:	601a      	str	r2, [r3, #0]
 800be7a:	e001      	b.n	800be80 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800be7c:	2300      	movs	r3, #0
 800be7e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800be80:	697b      	ldr	r3, [r7, #20]
}
 800be82:	4618      	mov	r0, r3
 800be84:	3718      	adds	r7, #24
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	2000865c 	.word	0x2000865c
 800be90:	2000863c 	.word	0x2000863c
 800be94:	20008164 	.word	0x20008164
 800be98:	200085f4 	.word	0x200085f4
 800be9c:	20008160 	.word	0x20008160
 800bea0:	20008648 	.word	0x20008648

0800bea4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10c      	bne.n	800becc <vTaskSetTimeOutState+0x28>
	__asm volatile
 800beb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb6:	b672      	cpsid	i
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	b662      	cpsie	i
 800bec6:	60fb      	str	r3, [r7, #12]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800becc:	f000 febe 	bl	800cc4c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bed0:	4b06      	ldr	r3, [pc, #24]	; (800beec <vTaskSetTimeOutState+0x48>)
 800bed2:	681a      	ldr	r2, [r3, #0]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800bed8:	4b05      	ldr	r3, [pc, #20]	; (800bef0 <vTaskSetTimeOutState+0x4c>)
 800beda:	681a      	ldr	r2, [r3, #0]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800bee0:	f000 fee8 	bl	800ccb4 <vPortExitCritical>
}
 800bee4:	bf00      	nop
 800bee6:	3710      	adds	r7, #16
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	2000864c 	.word	0x2000864c
 800bef0:	20008638 	.word	0x20008638

0800bef4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800befc:	4b06      	ldr	r3, [pc, #24]	; (800bf18 <vTaskInternalSetTimeOutState+0x24>)
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bf04:	4b05      	ldr	r3, [pc, #20]	; (800bf1c <vTaskInternalSetTimeOutState+0x28>)
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	605a      	str	r2, [r3, #4]
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	2000864c 	.word	0x2000864c
 800bf1c:	20008638 	.word	0x20008638

0800bf20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b088      	sub	sp, #32
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d10c      	bne.n	800bf4a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800bf30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf34:	b672      	cpsid	i
 800bf36:	f383 8811 	msr	BASEPRI, r3
 800bf3a:	f3bf 8f6f 	isb	sy
 800bf3e:	f3bf 8f4f 	dsb	sy
 800bf42:	b662      	cpsie	i
 800bf44:	613b      	str	r3, [r7, #16]
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10c      	bne.n	800bf6a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bf50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf54:	b672      	cpsid	i
 800bf56:	f383 8811 	msr	BASEPRI, r3
 800bf5a:	f3bf 8f6f 	isb	sy
 800bf5e:	f3bf 8f4f 	dsb	sy
 800bf62:	b662      	cpsie	i
 800bf64:	60fb      	str	r3, [r7, #12]
}
 800bf66:	bf00      	nop
 800bf68:	e7fe      	b.n	800bf68 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bf6a:	f000 fe6f 	bl	800cc4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf6e:	4b1d      	ldr	r3, [pc, #116]	; (800bfe4 <xTaskCheckForTimeOut+0xc4>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	69ba      	ldr	r2, [r7, #24]
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf86:	d102      	bne.n	800bf8e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	61fb      	str	r3, [r7, #28]
 800bf8c:	e023      	b.n	800bfd6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	4b15      	ldr	r3, [pc, #84]	; (800bfe8 <xTaskCheckForTimeOut+0xc8>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d007      	beq.n	800bfaa <xTaskCheckForTimeOut+0x8a>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d302      	bcc.n	800bfaa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	61fb      	str	r3, [r7, #28]
 800bfa8:	e015      	b.n	800bfd6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	697a      	ldr	r2, [r7, #20]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d20b      	bcs.n	800bfcc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bfb4:	683b      	ldr	r3, [r7, #0]
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	1ad2      	subs	r2, r2, r3
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f7ff ff97 	bl	800bef4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	61fb      	str	r3, [r7, #28]
 800bfca:	e004      	b.n	800bfd6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	2200      	movs	r2, #0
 800bfd0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bfd6:	f000 fe6d 	bl	800ccb4 <vPortExitCritical>

	return xReturn;
 800bfda:	69fb      	ldr	r3, [r7, #28]
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3720      	adds	r7, #32
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}
 800bfe4:	20008638 	.word	0x20008638
 800bfe8:	2000864c 	.word	0x2000864c

0800bfec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bfec:	b480      	push	{r7}
 800bfee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bff0:	4b03      	ldr	r3, [pc, #12]	; (800c000 <vTaskMissedYield+0x14>)
 800bff2:	2201      	movs	r2, #1
 800bff4:	601a      	str	r2, [r3, #0]
}
 800bff6:	bf00      	nop
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr
 800c000:	20008648 	.word	0x20008648

0800c004 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b082      	sub	sp, #8
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c00c:	f000 f852 	bl	800c0b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c010:	4b06      	ldr	r3, [pc, #24]	; (800c02c <prvIdleTask+0x28>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d9f9      	bls.n	800c00c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c018:	4b05      	ldr	r3, [pc, #20]	; (800c030 <prvIdleTask+0x2c>)
 800c01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c01e:	601a      	str	r2, [r3, #0]
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c028:	e7f0      	b.n	800c00c <prvIdleTask+0x8>
 800c02a:	bf00      	nop
 800c02c:	20008164 	.word	0x20008164
 800c030:	e000ed04 	.word	0xe000ed04

0800c034 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b082      	sub	sp, #8
 800c038:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c03a:	2300      	movs	r3, #0
 800c03c:	607b      	str	r3, [r7, #4]
 800c03e:	e00c      	b.n	800c05a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c040:	687a      	ldr	r2, [r7, #4]
 800c042:	4613      	mov	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4413      	add	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	4a12      	ldr	r2, [pc, #72]	; (800c094 <prvInitialiseTaskLists+0x60>)
 800c04c:	4413      	add	r3, r2
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fe fc8c 	bl	800a96c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	3301      	adds	r3, #1
 800c058:	607b      	str	r3, [r7, #4]
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2b37      	cmp	r3, #55	; 0x37
 800c05e:	d9ef      	bls.n	800c040 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c060:	480d      	ldr	r0, [pc, #52]	; (800c098 <prvInitialiseTaskLists+0x64>)
 800c062:	f7fe fc83 	bl	800a96c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c066:	480d      	ldr	r0, [pc, #52]	; (800c09c <prvInitialiseTaskLists+0x68>)
 800c068:	f7fe fc80 	bl	800a96c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c06c:	480c      	ldr	r0, [pc, #48]	; (800c0a0 <prvInitialiseTaskLists+0x6c>)
 800c06e:	f7fe fc7d 	bl	800a96c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c072:	480c      	ldr	r0, [pc, #48]	; (800c0a4 <prvInitialiseTaskLists+0x70>)
 800c074:	f7fe fc7a 	bl	800a96c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c078:	480b      	ldr	r0, [pc, #44]	; (800c0a8 <prvInitialiseTaskLists+0x74>)
 800c07a:	f7fe fc77 	bl	800a96c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c07e:	4b0b      	ldr	r3, [pc, #44]	; (800c0ac <prvInitialiseTaskLists+0x78>)
 800c080:	4a05      	ldr	r2, [pc, #20]	; (800c098 <prvInitialiseTaskLists+0x64>)
 800c082:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c084:	4b0a      	ldr	r3, [pc, #40]	; (800c0b0 <prvInitialiseTaskLists+0x7c>)
 800c086:	4a05      	ldr	r2, [pc, #20]	; (800c09c <prvInitialiseTaskLists+0x68>)
 800c088:	601a      	str	r2, [r3, #0]
}
 800c08a:	bf00      	nop
 800c08c:	3708      	adds	r7, #8
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	20008164 	.word	0x20008164
 800c098:	200085c4 	.word	0x200085c4
 800c09c:	200085d8 	.word	0x200085d8
 800c0a0:	200085f4 	.word	0x200085f4
 800c0a4:	20008608 	.word	0x20008608
 800c0a8:	20008620 	.word	0x20008620
 800c0ac:	200085ec 	.word	0x200085ec
 800c0b0:	200085f0 	.word	0x200085f0

0800c0b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0ba:	e019      	b.n	800c0f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0bc:	f000 fdc6 	bl	800cc4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c0:	4b10      	ldr	r3, [pc, #64]	; (800c104 <prvCheckTasksWaitingTermination+0x50>)
 800c0c2:	68db      	ldr	r3, [r3, #12]
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	3304      	adds	r3, #4
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fe fcd7 	bl	800aa80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0d2:	4b0d      	ldr	r3, [pc, #52]	; (800c108 <prvCheckTasksWaitingTermination+0x54>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	4a0b      	ldr	r2, [pc, #44]	; (800c108 <prvCheckTasksWaitingTermination+0x54>)
 800c0da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0dc:	4b0b      	ldr	r3, [pc, #44]	; (800c10c <prvCheckTasksWaitingTermination+0x58>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	3b01      	subs	r3, #1
 800c0e2:	4a0a      	ldr	r2, [pc, #40]	; (800c10c <prvCheckTasksWaitingTermination+0x58>)
 800c0e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0e6:	f000 fde5 	bl	800ccb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f810 	bl	800c110 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0f0:	4b06      	ldr	r3, [pc, #24]	; (800c10c <prvCheckTasksWaitingTermination+0x58>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d1e1      	bne.n	800c0bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c0f8:	bf00      	nop
 800c0fa:	bf00      	nop
 800c0fc:	3708      	adds	r7, #8
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	20008608 	.word	0x20008608
 800c108:	20008634 	.word	0x20008634
 800c10c:	2000861c 	.word	0x2000861c

0800c110 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d108      	bne.n	800c134 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c126:	4618      	mov	r0, r3
 800c128:	f000 ff86 	bl	800d038 <vPortFree>
				vPortFree( pxTCB );
 800c12c:	6878      	ldr	r0, [r7, #4]
 800c12e:	f000 ff83 	bl	800d038 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c132:	e01a      	b.n	800c16a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d103      	bne.n	800c146 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 ff7a 	bl	800d038 <vPortFree>
	}
 800c144:	e011      	b.n	800c16a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d00c      	beq.n	800c16a <prvDeleteTCB+0x5a>
	__asm volatile
 800c150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c154:	b672      	cpsid	i
 800c156:	f383 8811 	msr	BASEPRI, r3
 800c15a:	f3bf 8f6f 	isb	sy
 800c15e:	f3bf 8f4f 	dsb	sy
 800c162:	b662      	cpsie	i
 800c164:	60fb      	str	r3, [r7, #12]
}
 800c166:	bf00      	nop
 800c168:	e7fe      	b.n	800c168 <prvDeleteTCB+0x58>
	}
 800c16a:	bf00      	nop
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
	...

0800c174 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c17a:	4b0c      	ldr	r3, [pc, #48]	; (800c1ac <prvResetNextTaskUnblockTime+0x38>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d104      	bne.n	800c18e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c184:	4b0a      	ldr	r3, [pc, #40]	; (800c1b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c18a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c18c:	e008      	b.n	800c1a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c18e:	4b07      	ldr	r3, [pc, #28]	; (800c1ac <prvResetNextTaskUnblockTime+0x38>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	68db      	ldr	r3, [r3, #12]
 800c196:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	4a04      	ldr	r2, [pc, #16]	; (800c1b0 <prvResetNextTaskUnblockTime+0x3c>)
 800c19e:	6013      	str	r3, [r2, #0]
}
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	200085ec 	.word	0x200085ec
 800c1b0:	20008654 	.word	0x20008654

0800c1b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c1ba:	4b0b      	ldr	r3, [pc, #44]	; (800c1e8 <xTaskGetSchedulerState+0x34>)
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d102      	bne.n	800c1c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	607b      	str	r3, [r7, #4]
 800c1c6:	e008      	b.n	800c1da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1c8:	4b08      	ldr	r3, [pc, #32]	; (800c1ec <xTaskGetSchedulerState+0x38>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d102      	bne.n	800c1d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c1d0:	2302      	movs	r3, #2
 800c1d2:	607b      	str	r3, [r7, #4]
 800c1d4:	e001      	b.n	800c1da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1da:	687b      	ldr	r3, [r7, #4]
	}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	370c      	adds	r7, #12
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	20008640 	.word	0x20008640
 800c1ec:	2000865c 	.word	0x2000865c

0800c1f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b086      	sub	sp, #24
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d05a      	beq.n	800c2bc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c206:	4b30      	ldr	r3, [pc, #192]	; (800c2c8 <xTaskPriorityDisinherit+0xd8>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d00c      	beq.n	800c22a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	b672      	cpsid	i
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	b662      	cpsie	i
 800c224:	60fb      	str	r3, [r7, #12]
}
 800c226:	bf00      	nop
 800c228:	e7fe      	b.n	800c228 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10c      	bne.n	800c24c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800c232:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c236:	b672      	cpsid	i
 800c238:	f383 8811 	msr	BASEPRI, r3
 800c23c:	f3bf 8f6f 	isb	sy
 800c240:	f3bf 8f4f 	dsb	sy
 800c244:	b662      	cpsie	i
 800c246:	60bb      	str	r3, [r7, #8]
}
 800c248:	bf00      	nop
 800c24a:	e7fe      	b.n	800c24a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c250:	1e5a      	subs	r2, r3, #1
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c25e:	429a      	cmp	r2, r3
 800c260:	d02c      	beq.n	800c2bc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c262:	693b      	ldr	r3, [r7, #16]
 800c264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c266:	2b00      	cmp	r3, #0
 800c268:	d128      	bne.n	800c2bc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	3304      	adds	r3, #4
 800c26e:	4618      	mov	r0, r3
 800c270:	f7fe fc06 	bl	800aa80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c280:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28c:	4b0f      	ldr	r3, [pc, #60]	; (800c2cc <xTaskPriorityDisinherit+0xdc>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	429a      	cmp	r2, r3
 800c292:	d903      	bls.n	800c29c <xTaskPriorityDisinherit+0xac>
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c298:	4a0c      	ldr	r2, [pc, #48]	; (800c2cc <xTaskPriorityDisinherit+0xdc>)
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	693b      	ldr	r3, [r7, #16]
 800c29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4413      	add	r3, r2
 800c2a6:	009b      	lsls	r3, r3, #2
 800c2a8:	4a09      	ldr	r2, [pc, #36]	; (800c2d0 <xTaskPriorityDisinherit+0xe0>)
 800c2aa:	441a      	add	r2, r3
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	4610      	mov	r0, r2
 800c2b4:	f7fe fb87 	bl	800a9c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c2bc:	697b      	ldr	r3, [r7, #20]
	}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3718      	adds	r7, #24
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	20008160 	.word	0x20008160
 800c2cc:	2000863c 	.word	0x2000863c
 800c2d0:	20008164 	.word	0x20008164

0800c2d4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2de:	4b21      	ldr	r3, [pc, #132]	; (800c364 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2e4:	4b20      	ldr	r3, [pc, #128]	; (800c368 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7fe fbc8 	bl	800aa80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2f6:	d10a      	bne.n	800c30e <prvAddCurrentTaskToDelayedList+0x3a>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d007      	beq.n	800c30e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2fe:	4b1a      	ldr	r3, [pc, #104]	; (800c368 <prvAddCurrentTaskToDelayedList+0x94>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	3304      	adds	r3, #4
 800c304:	4619      	mov	r1, r3
 800c306:	4819      	ldr	r0, [pc, #100]	; (800c36c <prvAddCurrentTaskToDelayedList+0x98>)
 800c308:	f7fe fb5d 	bl	800a9c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c30c:	e026      	b.n	800c35c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c30e:	68fa      	ldr	r2, [r7, #12]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	4413      	add	r3, r2
 800c314:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c316:	4b14      	ldr	r3, [pc, #80]	; (800c368 <prvAddCurrentTaskToDelayedList+0x94>)
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	68ba      	ldr	r2, [r7, #8]
 800c31c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	429a      	cmp	r2, r3
 800c324:	d209      	bcs.n	800c33a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c326:	4b12      	ldr	r3, [pc, #72]	; (800c370 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	4b0f      	ldr	r3, [pc, #60]	; (800c368 <prvAddCurrentTaskToDelayedList+0x94>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	3304      	adds	r3, #4
 800c330:	4619      	mov	r1, r3
 800c332:	4610      	mov	r0, r2
 800c334:	f7fe fb6b 	bl	800aa0e <vListInsert>
}
 800c338:	e010      	b.n	800c35c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c33a:	4b0e      	ldr	r3, [pc, #56]	; (800c374 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	4b0a      	ldr	r3, [pc, #40]	; (800c368 <prvAddCurrentTaskToDelayedList+0x94>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3304      	adds	r3, #4
 800c344:	4619      	mov	r1, r3
 800c346:	4610      	mov	r0, r2
 800c348:	f7fe fb61 	bl	800aa0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c34c:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	429a      	cmp	r2, r3
 800c354:	d202      	bcs.n	800c35c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c356:	4a08      	ldr	r2, [pc, #32]	; (800c378 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	6013      	str	r3, [r2, #0]
}
 800c35c:	bf00      	nop
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}
 800c364:	20008638 	.word	0x20008638
 800c368:	20008160 	.word	0x20008160
 800c36c:	20008620 	.word	0x20008620
 800c370:	200085f0 	.word	0x200085f0
 800c374:	200085ec 	.word	0x200085ec
 800c378:	20008654 	.word	0x20008654

0800c37c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b08a      	sub	sp, #40	; 0x28
 800c380:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c382:	2300      	movs	r3, #0
 800c384:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c386:	f000 fb15 	bl	800c9b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c38a:	4b1d      	ldr	r3, [pc, #116]	; (800c400 <xTimerCreateTimerTask+0x84>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d021      	beq.n	800c3d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c396:	2300      	movs	r3, #0
 800c398:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c39a:	1d3a      	adds	r2, r7, #4
 800c39c:	f107 0108 	add.w	r1, r7, #8
 800c3a0:	f107 030c 	add.w	r3, r7, #12
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f7fe fac7 	bl	800a938 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c3aa:	6879      	ldr	r1, [r7, #4]
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	9202      	str	r2, [sp, #8]
 800c3b2:	9301      	str	r3, [sp, #4]
 800c3b4:	2302      	movs	r3, #2
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	460a      	mov	r2, r1
 800c3bc:	4911      	ldr	r1, [pc, #68]	; (800c404 <xTimerCreateTimerTask+0x88>)
 800c3be:	4812      	ldr	r0, [pc, #72]	; (800c408 <xTimerCreateTimerTask+0x8c>)
 800c3c0:	f7ff f892 	bl	800b4e8 <xTaskCreateStatic>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	4a11      	ldr	r2, [pc, #68]	; (800c40c <xTimerCreateTimerTask+0x90>)
 800c3c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c3ca:	4b10      	ldr	r3, [pc, #64]	; (800c40c <xTimerCreateTimerTask+0x90>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d001      	beq.n	800c3d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10c      	bne.n	800c3f6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	b672      	cpsid	i
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	b662      	cpsie	i
 800c3f0:	613b      	str	r3, [r7, #16]
}
 800c3f2:	bf00      	nop
 800c3f4:	e7fe      	b.n	800c3f4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c3f6:	697b      	ldr	r3, [r7, #20]
}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3718      	adds	r7, #24
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20008690 	.word	0x20008690
 800c404:	0801d350 	.word	0x0801d350
 800c408:	0800c54d 	.word	0x0800c54d
 800c40c:	20008694 	.word	0x20008694

0800c410 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b08a      	sub	sp, #40	; 0x28
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
 800c41c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c41e:	2300      	movs	r3, #0
 800c420:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d10c      	bne.n	800c442 <xTimerGenericCommand+0x32>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c42c:	b672      	cpsid	i
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	b662      	cpsie	i
 800c43c:	623b      	str	r3, [r7, #32]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c442:	4b1a      	ldr	r3, [pc, #104]	; (800c4ac <xTimerGenericCommand+0x9c>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d02a      	beq.n	800c4a0 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c456:	68bb      	ldr	r3, [r7, #8]
 800c458:	2b05      	cmp	r3, #5
 800c45a:	dc18      	bgt.n	800c48e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c45c:	f7ff feaa 	bl	800c1b4 <xTaskGetSchedulerState>
 800c460:	4603      	mov	r3, r0
 800c462:	2b02      	cmp	r3, #2
 800c464:	d109      	bne.n	800c47a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c466:	4b11      	ldr	r3, [pc, #68]	; (800c4ac <xTimerGenericCommand+0x9c>)
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	f107 0110 	add.w	r1, r7, #16
 800c46e:	2300      	movs	r3, #0
 800c470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c472:	f7fe fc3f 	bl	800acf4 <xQueueGenericSend>
 800c476:	6278      	str	r0, [r7, #36]	; 0x24
 800c478:	e012      	b.n	800c4a0 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c47a:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <xTimerGenericCommand+0x9c>)
 800c47c:	6818      	ldr	r0, [r3, #0]
 800c47e:	f107 0110 	add.w	r1, r7, #16
 800c482:	2300      	movs	r3, #0
 800c484:	2200      	movs	r2, #0
 800c486:	f7fe fc35 	bl	800acf4 <xQueueGenericSend>
 800c48a:	6278      	str	r0, [r7, #36]	; 0x24
 800c48c:	e008      	b.n	800c4a0 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c48e:	4b07      	ldr	r3, [pc, #28]	; (800c4ac <xTimerGenericCommand+0x9c>)
 800c490:	6818      	ldr	r0, [r3, #0]
 800c492:	f107 0110 	add.w	r1, r7, #16
 800c496:	2300      	movs	r3, #0
 800c498:	683a      	ldr	r2, [r7, #0]
 800c49a:	f7fe fd31 	bl	800af00 <xQueueGenericSendFromISR>
 800c49e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3728      	adds	r7, #40	; 0x28
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20008690 	.word	0x20008690

0800c4b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b088      	sub	sp, #32
 800c4b4:	af02      	add	r7, sp, #8
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ba:	4b23      	ldr	r3, [pc, #140]	; (800c548 <prvProcessExpiredTimer+0x98>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	f7fe fad9 	bl	800aa80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4d4:	f003 0304 	and.w	r3, r3, #4
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d024      	beq.n	800c526 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	699a      	ldr	r2, [r3, #24]
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	18d1      	adds	r1, r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	6978      	ldr	r0, [r7, #20]
 800c4ea:	f000 f8d3 	bl	800c694 <prvInsertTimerInActiveList>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d021      	beq.n	800c538 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	9300      	str	r3, [sp, #0]
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	6978      	ldr	r0, [r7, #20]
 800c500:	f7ff ff86 	bl	800c410 <xTimerGenericCommand>
 800c504:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d115      	bne.n	800c538 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c510:	b672      	cpsid	i
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	b662      	cpsie	i
 800c520:	60fb      	str	r3, [r7, #12]
}
 800c522:	bf00      	nop
 800c524:	e7fe      	b.n	800c524 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c52c:	f023 0301 	bic.w	r3, r3, #1
 800c530:	b2da      	uxtb	r2, r3
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	6a1b      	ldr	r3, [r3, #32]
 800c53c:	6978      	ldr	r0, [r7, #20]
 800c53e:	4798      	blx	r3
}
 800c540:	bf00      	nop
 800c542:	3718      	adds	r7, #24
 800c544:	46bd      	mov	sp, r7
 800c546:	bd80      	pop	{r7, pc}
 800c548:	20008688 	.word	0x20008688

0800c54c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c554:	f107 0308 	add.w	r3, r7, #8
 800c558:	4618      	mov	r0, r3
 800c55a:	f000 f857 	bl	800c60c <prvGetNextExpireTime>
 800c55e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	4619      	mov	r1, r3
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f000 f803 	bl	800c570 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c56a:	f000 f8d5 	bl	800c718 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c56e:	e7f1      	b.n	800c554 <prvTimerTask+0x8>

0800c570 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b084      	sub	sp, #16
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c57a:	f7ff f9ff 	bl	800b97c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c57e:	f107 0308 	add.w	r3, r7, #8
 800c582:	4618      	mov	r0, r3
 800c584:	f000 f866 	bl	800c654 <prvSampleTimeNow>
 800c588:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d130      	bne.n	800c5f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d10a      	bne.n	800c5ac <prvProcessTimerOrBlockTask+0x3c>
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d806      	bhi.n	800c5ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c59e:	f7ff f9fb 	bl	800b998 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5a2:	68f9      	ldr	r1, [r7, #12]
 800c5a4:	6878      	ldr	r0, [r7, #4]
 800c5a6:	f7ff ff83 	bl	800c4b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c5aa:	e024      	b.n	800c5f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d008      	beq.n	800c5c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5b2:	4b13      	ldr	r3, [pc, #76]	; (800c600 <prvProcessTimerOrBlockTask+0x90>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d101      	bne.n	800c5c0 <prvProcessTimerOrBlockTask+0x50>
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e000      	b.n	800c5c2 <prvProcessTimerOrBlockTask+0x52>
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c5c4:	4b0f      	ldr	r3, [pc, #60]	; (800c604 <prvProcessTimerOrBlockTask+0x94>)
 800c5c6:	6818      	ldr	r0, [r3, #0]
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	1ad3      	subs	r3, r2, r3
 800c5ce:	683a      	ldr	r2, [r7, #0]
 800c5d0:	4619      	mov	r1, r3
 800c5d2:	f7fe ff55 	bl	800b480 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c5d6:	f7ff f9df 	bl	800b998 <xTaskResumeAll>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d10a      	bne.n	800c5f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5e0:	4b09      	ldr	r3, [pc, #36]	; (800c608 <prvProcessTimerOrBlockTask+0x98>)
 800c5e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5e6:	601a      	str	r2, [r3, #0]
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	f3bf 8f6f 	isb	sy
}
 800c5f0:	e001      	b.n	800c5f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5f2:	f7ff f9d1 	bl	800b998 <xTaskResumeAll>
}
 800c5f6:	bf00      	nop
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	2000868c 	.word	0x2000868c
 800c604:	20008690 	.word	0x20008690
 800c608:	e000ed04 	.word	0xe000ed04

0800c60c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c614:	4b0e      	ldr	r3, [pc, #56]	; (800c650 <prvGetNextExpireTime+0x44>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <prvGetNextExpireTime+0x16>
 800c61e:	2201      	movs	r2, #1
 800c620:	e000      	b.n	800c624 <prvGetNextExpireTime+0x18>
 800c622:	2200      	movs	r2, #0
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d105      	bne.n	800c63c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c630:	4b07      	ldr	r3, [pc, #28]	; (800c650 <prvGetNextExpireTime+0x44>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	60fb      	str	r3, [r7, #12]
 800c63a:	e001      	b.n	800c640 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c63c:	2300      	movs	r3, #0
 800c63e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c640:	68fb      	ldr	r3, [r7, #12]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3714      	adds	r7, #20
 800c646:	46bd      	mov	sp, r7
 800c648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64c:	4770      	bx	lr
 800c64e:	bf00      	nop
 800c650:	20008688 	.word	0x20008688

0800c654 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c65c:	f7ff fa3c 	bl	800bad8 <xTaskGetTickCount>
 800c660:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c662:	4b0b      	ldr	r3, [pc, #44]	; (800c690 <prvSampleTimeNow+0x3c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68fa      	ldr	r2, [r7, #12]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d205      	bcs.n	800c678 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c66c:	f000 f93c 	bl	800c8e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	601a      	str	r2, [r3, #0]
 800c676:	e002      	b.n	800c67e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c67e:	4a04      	ldr	r2, [pc, #16]	; (800c690 <prvSampleTimeNow+0x3c>)
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c684:	68fb      	ldr	r3, [r7, #12]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3710      	adds	r7, #16
 800c68a:	46bd      	mov	sp, r7
 800c68c:	bd80      	pop	{r7, pc}
 800c68e:	bf00      	nop
 800c690:	20008698 	.word	0x20008698

0800c694 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	68ba      	ldr	r2, [r7, #8]
 800c6aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	68fa      	ldr	r2, [r7, #12]
 800c6b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d812      	bhi.n	800c6e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6ba:	687a      	ldr	r2, [r7, #4]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	1ad2      	subs	r2, r2, r3
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	699b      	ldr	r3, [r3, #24]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d302      	bcc.n	800c6ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	617b      	str	r3, [r7, #20]
 800c6cc:	e01b      	b.n	800c706 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c6ce:	4b10      	ldr	r3, [pc, #64]	; (800c710 <prvInsertTimerInActiveList+0x7c>)
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	4610      	mov	r0, r2
 800c6da:	f7fe f998 	bl	800aa0e <vListInsert>
 800c6de:	e012      	b.n	800c706 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d206      	bcs.n	800c6f6 <prvInsertTimerInActiveList+0x62>
 800c6e8:	68ba      	ldr	r2, [r7, #8]
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	429a      	cmp	r2, r3
 800c6ee:	d302      	bcc.n	800c6f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	617b      	str	r3, [r7, #20]
 800c6f4:	e007      	b.n	800c706 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6f6:	4b07      	ldr	r3, [pc, #28]	; (800c714 <prvInsertTimerInActiveList+0x80>)
 800c6f8:	681a      	ldr	r2, [r3, #0]
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	4619      	mov	r1, r3
 800c700:	4610      	mov	r0, r2
 800c702:	f7fe f984 	bl	800aa0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c706:	697b      	ldr	r3, [r7, #20]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3718      	adds	r7, #24
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	2000868c 	.word	0x2000868c
 800c714:	20008688 	.word	0x20008688

0800c718 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b08e      	sub	sp, #56	; 0x38
 800c71c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c71e:	e0d0      	b.n	800c8c2 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	da1a      	bge.n	800c75c <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c726:	1d3b      	adds	r3, r7, #4
 800c728:	3304      	adds	r3, #4
 800c72a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d10c      	bne.n	800c74c <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c736:	b672      	cpsid	i
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
 800c744:	b662      	cpsie	i
 800c746:	61fb      	str	r3, [r7, #28]
}
 800c748:	bf00      	nop
 800c74a:	e7fe      	b.n	800c74a <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c752:	6850      	ldr	r0, [r2, #4]
 800c754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c756:	6892      	ldr	r2, [r2, #8]
 800c758:	4611      	mov	r1, r2
 800c75a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	f2c0 80af 	blt.w	800c8c2 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c76a:	695b      	ldr	r3, [r3, #20]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d004      	beq.n	800c77a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c772:	3304      	adds	r3, #4
 800c774:	4618      	mov	r0, r3
 800c776:	f7fe f983 	bl	800aa80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c77a:	463b      	mov	r3, r7
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7ff ff69 	bl	800c654 <prvSampleTimeNow>
 800c782:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2b09      	cmp	r3, #9
 800c788:	f200 809a 	bhi.w	800c8c0 <prvProcessReceivedCommands+0x1a8>
 800c78c:	a201      	add	r2, pc, #4	; (adr r2, 800c794 <prvProcessReceivedCommands+0x7c>)
 800c78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c792:	bf00      	nop
 800c794:	0800c7bd 	.word	0x0800c7bd
 800c798:	0800c7bd 	.word	0x0800c7bd
 800c79c:	0800c7bd 	.word	0x0800c7bd
 800c7a0:	0800c835 	.word	0x0800c835
 800c7a4:	0800c849 	.word	0x0800c849
 800c7a8:	0800c897 	.word	0x0800c897
 800c7ac:	0800c7bd 	.word	0x0800c7bd
 800c7b0:	0800c7bd 	.word	0x0800c7bd
 800c7b4:	0800c835 	.word	0x0800c835
 800c7b8:	0800c849 	.word	0x0800c849
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7c2:	f043 0301 	orr.w	r3, r3, #1
 800c7c6:	b2da      	uxtb	r2, r3
 800c7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c7ce:	68ba      	ldr	r2, [r7, #8]
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	18d1      	adds	r1, r2, r3
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7dc:	f7ff ff5a 	bl	800c694 <prvInsertTimerInActiveList>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d06d      	beq.n	800c8c2 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	6a1b      	ldr	r3, [r3, #32]
 800c7ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7f4:	f003 0304 	and.w	r3, r3, #4
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d062      	beq.n	800c8c2 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c800:	699b      	ldr	r3, [r3, #24]
 800c802:	441a      	add	r2, r3
 800c804:	2300      	movs	r3, #0
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	2300      	movs	r3, #0
 800c80a:	2100      	movs	r1, #0
 800c80c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c80e:	f7ff fdff 	bl	800c410 <xTimerGenericCommand>
 800c812:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c814:	6a3b      	ldr	r3, [r7, #32]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d153      	bne.n	800c8c2 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81e:	b672      	cpsid	i
 800c820:	f383 8811 	msr	BASEPRI, r3
 800c824:	f3bf 8f6f 	isb	sy
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	b662      	cpsie	i
 800c82e:	61bb      	str	r3, [r7, #24]
}
 800c830:	bf00      	nop
 800c832:	e7fe      	b.n	800c832 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c83a:	f023 0301 	bic.w	r3, r3, #1
 800c83e:	b2da      	uxtb	r2, r3
 800c840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c846:	e03c      	b.n	800c8c2 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c84e:	f043 0301 	orr.w	r3, r3, #1
 800c852:	b2da      	uxtb	r2, r3
 800c854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c856:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c85a:	68ba      	ldr	r2, [r7, #8]
 800c85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c862:	699b      	ldr	r3, [r3, #24]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d10c      	bne.n	800c882 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c86c:	b672      	cpsid	i
 800c86e:	f383 8811 	msr	BASEPRI, r3
 800c872:	f3bf 8f6f 	isb	sy
 800c876:	f3bf 8f4f 	dsb	sy
 800c87a:	b662      	cpsie	i
 800c87c:	617b      	str	r3, [r7, #20]
}
 800c87e:	bf00      	nop
 800c880:	e7fe      	b.n	800c880 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c884:	699a      	ldr	r2, [r3, #24]
 800c886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c888:	18d1      	adds	r1, r2, r3
 800c88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c88c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c88e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c890:	f7ff ff00 	bl	800c694 <prvInsertTimerInActiveList>
					break;
 800c894:	e015      	b.n	800c8c2 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c89c:	f003 0302 	and.w	r3, r3, #2
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d103      	bne.n	800c8ac <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8a6:	f000 fbc7 	bl	800d038 <vPortFree>
 800c8aa:	e00a      	b.n	800c8c2 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8b2:	f023 0301 	bic.w	r3, r3, #1
 800c8b6:	b2da      	uxtb	r2, r3
 800c8b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8be:	e000      	b.n	800c8c2 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800c8c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8c2:	4b08      	ldr	r3, [pc, #32]	; (800c8e4 <prvProcessReceivedCommands+0x1cc>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	1d39      	adds	r1, r7, #4
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7fe fbb8 	bl	800b040 <xQueueReceive>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	f47f af24 	bne.w	800c720 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c8d8:	bf00      	nop
 800c8da:	bf00      	nop
 800c8dc:	3730      	adds	r7, #48	; 0x30
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd80      	pop	{r7, pc}
 800c8e2:	bf00      	nop
 800c8e4:	20008690 	.word	0x20008690

0800c8e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b088      	sub	sp, #32
 800c8ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8ee:	e04a      	b.n	800c986 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8f0:	4b2e      	ldr	r3, [pc, #184]	; (800c9ac <prvSwitchTimerLists+0xc4>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68db      	ldr	r3, [r3, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8fa:	4b2c      	ldr	r3, [pc, #176]	; (800c9ac <prvSwitchTimerLists+0xc4>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68db      	ldr	r3, [r3, #12]
 800c900:	68db      	ldr	r3, [r3, #12]
 800c902:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	3304      	adds	r3, #4
 800c908:	4618      	mov	r0, r3
 800c90a:	f7fe f8b9 	bl	800aa80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	6a1b      	ldr	r3, [r3, #32]
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c91c:	f003 0304 	and.w	r3, r3, #4
 800c920:	2b00      	cmp	r3, #0
 800c922:	d030      	beq.n	800c986 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	693a      	ldr	r2, [r7, #16]
 800c92a:	4413      	add	r3, r2
 800c92c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c92e:	68ba      	ldr	r2, [r7, #8]
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	429a      	cmp	r2, r3
 800c934:	d90e      	bls.n	800c954 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	68fa      	ldr	r2, [r7, #12]
 800c940:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c942:	4b1a      	ldr	r3, [pc, #104]	; (800c9ac <prvSwitchTimerLists+0xc4>)
 800c944:	681a      	ldr	r2, [r3, #0]
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	3304      	adds	r3, #4
 800c94a:	4619      	mov	r1, r3
 800c94c:	4610      	mov	r0, r2
 800c94e:	f7fe f85e 	bl	800aa0e <vListInsert>
 800c952:	e018      	b.n	800c986 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c954:	2300      	movs	r3, #0
 800c956:	9300      	str	r3, [sp, #0]
 800c958:	2300      	movs	r3, #0
 800c95a:	693a      	ldr	r2, [r7, #16]
 800c95c:	2100      	movs	r1, #0
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f7ff fd56 	bl	800c410 <xTimerGenericCommand>
 800c964:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10c      	bne.n	800c986 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	b672      	cpsid	i
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	b662      	cpsie	i
 800c980:	603b      	str	r3, [r7, #0]
}
 800c982:	bf00      	nop
 800c984:	e7fe      	b.n	800c984 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c986:	4b09      	ldr	r3, [pc, #36]	; (800c9ac <prvSwitchTimerLists+0xc4>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d1af      	bne.n	800c8f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c990:	4b06      	ldr	r3, [pc, #24]	; (800c9ac <prvSwitchTimerLists+0xc4>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c996:	4b06      	ldr	r3, [pc, #24]	; (800c9b0 <prvSwitchTimerLists+0xc8>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a04      	ldr	r2, [pc, #16]	; (800c9ac <prvSwitchTimerLists+0xc4>)
 800c99c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c99e:	4a04      	ldr	r2, [pc, #16]	; (800c9b0 <prvSwitchTimerLists+0xc8>)
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	6013      	str	r3, [r2, #0]
}
 800c9a4:	bf00      	nop
 800c9a6:	3718      	adds	r7, #24
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}
 800c9ac:	20008688 	.word	0x20008688
 800c9b0:	2000868c 	.word	0x2000868c

0800c9b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b082      	sub	sp, #8
 800c9b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c9ba:	f000 f947 	bl	800cc4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c9be:	4b15      	ldr	r3, [pc, #84]	; (800ca14 <prvCheckForValidListAndQueue+0x60>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d120      	bne.n	800ca08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9c6:	4814      	ldr	r0, [pc, #80]	; (800ca18 <prvCheckForValidListAndQueue+0x64>)
 800c9c8:	f7fd ffd0 	bl	800a96c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c9cc:	4813      	ldr	r0, [pc, #76]	; (800ca1c <prvCheckForValidListAndQueue+0x68>)
 800c9ce:	f7fd ffcd 	bl	800a96c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c9d2:	4b13      	ldr	r3, [pc, #76]	; (800ca20 <prvCheckForValidListAndQueue+0x6c>)
 800c9d4:	4a10      	ldr	r2, [pc, #64]	; (800ca18 <prvCheckForValidListAndQueue+0x64>)
 800c9d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c9d8:	4b12      	ldr	r3, [pc, #72]	; (800ca24 <prvCheckForValidListAndQueue+0x70>)
 800c9da:	4a10      	ldr	r2, [pc, #64]	; (800ca1c <prvCheckForValidListAndQueue+0x68>)
 800c9dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9de:	2300      	movs	r3, #0
 800c9e0:	9300      	str	r3, [sp, #0]
 800c9e2:	4b11      	ldr	r3, [pc, #68]	; (800ca28 <prvCheckForValidListAndQueue+0x74>)
 800c9e4:	4a11      	ldr	r2, [pc, #68]	; (800ca2c <prvCheckForValidListAndQueue+0x78>)
 800c9e6:	2110      	movs	r1, #16
 800c9e8:	200a      	movs	r0, #10
 800c9ea:	f7fe f8dd 	bl	800aba8 <xQueueGenericCreateStatic>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	4a08      	ldr	r2, [pc, #32]	; (800ca14 <prvCheckForValidListAndQueue+0x60>)
 800c9f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9f4:	4b07      	ldr	r3, [pc, #28]	; (800ca14 <prvCheckForValidListAndQueue+0x60>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d005      	beq.n	800ca08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9fc:	4b05      	ldr	r3, [pc, #20]	; (800ca14 <prvCheckForValidListAndQueue+0x60>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	490b      	ldr	r1, [pc, #44]	; (800ca30 <prvCheckForValidListAndQueue+0x7c>)
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7fe fd12 	bl	800b42c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca08:	f000 f954 	bl	800ccb4 <vPortExitCritical>
}
 800ca0c:	bf00      	nop
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	20008690 	.word	0x20008690
 800ca18:	20008660 	.word	0x20008660
 800ca1c:	20008674 	.word	0x20008674
 800ca20:	20008688 	.word	0x20008688
 800ca24:	2000868c 	.word	0x2000868c
 800ca28:	2000873c 	.word	0x2000873c
 800ca2c:	2000869c 	.word	0x2000869c
 800ca30:	0801d358 	.word	0x0801d358

0800ca34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3b04      	subs	r3, #4
 800ca44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3b04      	subs	r3, #4
 800ca52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f023 0201 	bic.w	r2, r3, #1
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3b04      	subs	r3, #4
 800ca62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca64:	4a0c      	ldr	r2, [pc, #48]	; (800ca98 <pxPortInitialiseStack+0x64>)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	3b14      	subs	r3, #20
 800ca6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ca70:	687a      	ldr	r2, [r7, #4]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	3b04      	subs	r3, #4
 800ca7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	f06f 0202 	mvn.w	r2, #2
 800ca82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	3b20      	subs	r3, #32
 800ca88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	0800ca9d 	.word	0x0800ca9d

0800ca9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800caa6:	4b14      	ldr	r3, [pc, #80]	; (800caf8 <prvTaskExitError+0x5c>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caae:	d00c      	beq.n	800caca <prvTaskExitError+0x2e>
	__asm volatile
 800cab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cab4:	b672      	cpsid	i
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	b662      	cpsie	i
 800cac4:	60fb      	str	r3, [r7, #12]
}
 800cac6:	bf00      	nop
 800cac8:	e7fe      	b.n	800cac8 <prvTaskExitError+0x2c>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cace:	b672      	cpsid	i
 800cad0:	f383 8811 	msr	BASEPRI, r3
 800cad4:	f3bf 8f6f 	isb	sy
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	b662      	cpsie	i
 800cade:	60bb      	str	r3, [r7, #8]
}
 800cae0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cae2:	bf00      	nop
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d0fc      	beq.n	800cae4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800caea:	bf00      	nop
 800caec:	bf00      	nop
 800caee:	3714      	adds	r7, #20
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr
 800caf8:	2000009c 	.word	0x2000009c
 800cafc:	00000000 	.word	0x00000000

0800cb00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb00:	4b07      	ldr	r3, [pc, #28]	; (800cb20 <pxCurrentTCBConst2>)
 800cb02:	6819      	ldr	r1, [r3, #0]
 800cb04:	6808      	ldr	r0, [r1, #0]
 800cb06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0a:	f380 8809 	msr	PSP, r0
 800cb0e:	f3bf 8f6f 	isb	sy
 800cb12:	f04f 0000 	mov.w	r0, #0
 800cb16:	f380 8811 	msr	BASEPRI, r0
 800cb1a:	4770      	bx	lr
 800cb1c:	f3af 8000 	nop.w

0800cb20 <pxCurrentTCBConst2>:
 800cb20:	20008160 	.word	0x20008160
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb24:	bf00      	nop
 800cb26:	bf00      	nop

0800cb28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb28:	4808      	ldr	r0, [pc, #32]	; (800cb4c <prvPortStartFirstTask+0x24>)
 800cb2a:	6800      	ldr	r0, [r0, #0]
 800cb2c:	6800      	ldr	r0, [r0, #0]
 800cb2e:	f380 8808 	msr	MSP, r0
 800cb32:	f04f 0000 	mov.w	r0, #0
 800cb36:	f380 8814 	msr	CONTROL, r0
 800cb3a:	b662      	cpsie	i
 800cb3c:	b661      	cpsie	f
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	f3bf 8f6f 	isb	sy
 800cb46:	df00      	svc	0
 800cb48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb4a:	bf00      	nop
 800cb4c:	e000ed08 	.word	0xe000ed08

0800cb50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b084      	sub	sp, #16
 800cb54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cb56:	4b37      	ldr	r3, [pc, #220]	; (800cc34 <xPortStartScheduler+0xe4>)
 800cb58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	b2db      	uxtb	r3, r3
 800cb60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	22ff      	movs	r2, #255	; 0xff
 800cb66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	b2db      	uxtb	r3, r3
 800cb6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cb70:	78fb      	ldrb	r3, [r7, #3]
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	4b2f      	ldr	r3, [pc, #188]	; (800cc38 <xPortStartScheduler+0xe8>)
 800cb7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cb7e:	4b2f      	ldr	r3, [pc, #188]	; (800cc3c <xPortStartScheduler+0xec>)
 800cb80:	2207      	movs	r2, #7
 800cb82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb84:	e009      	b.n	800cb9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800cb86:	4b2d      	ldr	r3, [pc, #180]	; (800cc3c <xPortStartScheduler+0xec>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	4a2b      	ldr	r2, [pc, #172]	; (800cc3c <xPortStartScheduler+0xec>)
 800cb8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cb90:	78fb      	ldrb	r3, [r7, #3]
 800cb92:	b2db      	uxtb	r3, r3
 800cb94:	005b      	lsls	r3, r3, #1
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cb9a:	78fb      	ldrb	r3, [r7, #3]
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cba2:	2b80      	cmp	r3, #128	; 0x80
 800cba4:	d0ef      	beq.n	800cb86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cba6:	4b25      	ldr	r3, [pc, #148]	; (800cc3c <xPortStartScheduler+0xec>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	f1c3 0307 	rsb	r3, r3, #7
 800cbae:	2b04      	cmp	r3, #4
 800cbb0:	d00c      	beq.n	800cbcc <xPortStartScheduler+0x7c>
	__asm volatile
 800cbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb6:	b672      	cpsid	i
 800cbb8:	f383 8811 	msr	BASEPRI, r3
 800cbbc:	f3bf 8f6f 	isb	sy
 800cbc0:	f3bf 8f4f 	dsb	sy
 800cbc4:	b662      	cpsie	i
 800cbc6:	60bb      	str	r3, [r7, #8]
}
 800cbc8:	bf00      	nop
 800cbca:	e7fe      	b.n	800cbca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cbcc:	4b1b      	ldr	r3, [pc, #108]	; (800cc3c <xPortStartScheduler+0xec>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	021b      	lsls	r3, r3, #8
 800cbd2:	4a1a      	ldr	r2, [pc, #104]	; (800cc3c <xPortStartScheduler+0xec>)
 800cbd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cbd6:	4b19      	ldr	r3, [pc, #100]	; (800cc3c <xPortStartScheduler+0xec>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cbde:	4a17      	ldr	r2, [pc, #92]	; (800cc3c <xPortStartScheduler+0xec>)
 800cbe0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	b2da      	uxtb	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cbea:	4b15      	ldr	r3, [pc, #84]	; (800cc40 <xPortStartScheduler+0xf0>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a14      	ldr	r2, [pc, #80]	; (800cc40 <xPortStartScheduler+0xf0>)
 800cbf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cbf4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cbf6:	4b12      	ldr	r3, [pc, #72]	; (800cc40 <xPortStartScheduler+0xf0>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	4a11      	ldr	r2, [pc, #68]	; (800cc40 <xPortStartScheduler+0xf0>)
 800cbfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc02:	f000 f8dd 	bl	800cdc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc06:	4b0f      	ldr	r3, [pc, #60]	; (800cc44 <xPortStartScheduler+0xf4>)
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc0c:	f000 f8fc 	bl	800ce08 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc10:	4b0d      	ldr	r3, [pc, #52]	; (800cc48 <xPortStartScheduler+0xf8>)
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	4a0c      	ldr	r2, [pc, #48]	; (800cc48 <xPortStartScheduler+0xf8>)
 800cc16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc1c:	f7ff ff84 	bl	800cb28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc20:	f7ff f826 	bl	800bc70 <vTaskSwitchContext>
	prvTaskExitError();
 800cc24:	f7ff ff3a 	bl	800ca9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}
 800cc32:	bf00      	nop
 800cc34:	e000e400 	.word	0xe000e400
 800cc38:	2000878c 	.word	0x2000878c
 800cc3c:	20008790 	.word	0x20008790
 800cc40:	e000ed20 	.word	0xe000ed20
 800cc44:	2000009c 	.word	0x2000009c
 800cc48:	e000ef34 	.word	0xe000ef34

0800cc4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b083      	sub	sp, #12
 800cc50:	af00      	add	r7, sp, #0
	__asm volatile
 800cc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc56:	b672      	cpsid	i
 800cc58:	f383 8811 	msr	BASEPRI, r3
 800cc5c:	f3bf 8f6f 	isb	sy
 800cc60:	f3bf 8f4f 	dsb	sy
 800cc64:	b662      	cpsie	i
 800cc66:	607b      	str	r3, [r7, #4]
}
 800cc68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cc6a:	4b10      	ldr	r3, [pc, #64]	; (800ccac <vPortEnterCritical+0x60>)
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3301      	adds	r3, #1
 800cc70:	4a0e      	ldr	r2, [pc, #56]	; (800ccac <vPortEnterCritical+0x60>)
 800cc72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cc74:	4b0d      	ldr	r3, [pc, #52]	; (800ccac <vPortEnterCritical+0x60>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d111      	bne.n	800cca0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <vPortEnterCritical+0x64>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d00c      	beq.n	800cca0 <vPortEnterCritical+0x54>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc8a:	b672      	cpsid	i
 800cc8c:	f383 8811 	msr	BASEPRI, r3
 800cc90:	f3bf 8f6f 	isb	sy
 800cc94:	f3bf 8f4f 	dsb	sy
 800cc98:	b662      	cpsie	i
 800cc9a:	603b      	str	r3, [r7, #0]
}
 800cc9c:	bf00      	nop
 800cc9e:	e7fe      	b.n	800cc9e <vPortEnterCritical+0x52>
	}
}
 800cca0:	bf00      	nop
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	2000009c 	.word	0x2000009c
 800ccb0:	e000ed04 	.word	0xe000ed04

0800ccb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ccba:	4b13      	ldr	r3, [pc, #76]	; (800cd08 <vPortExitCritical+0x54>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10c      	bne.n	800ccdc <vPortExitCritical+0x28>
	__asm volatile
 800ccc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccc6:	b672      	cpsid	i
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	b662      	cpsie	i
 800ccd6:	607b      	str	r3, [r7, #4]
}
 800ccd8:	bf00      	nop
 800ccda:	e7fe      	b.n	800ccda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800ccdc:	4b0a      	ldr	r3, [pc, #40]	; (800cd08 <vPortExitCritical+0x54>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	4a09      	ldr	r2, [pc, #36]	; (800cd08 <vPortExitCritical+0x54>)
 800cce4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cce6:	4b08      	ldr	r3, [pc, #32]	; (800cd08 <vPortExitCritical+0x54>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d105      	bne.n	800ccfa <vPortExitCritical+0x46>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	f383 8811 	msr	BASEPRI, r3
}
 800ccf8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ccfa:	bf00      	nop
 800ccfc:	370c      	adds	r7, #12
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	2000009c 	.word	0x2000009c
 800cd0c:	00000000 	.word	0x00000000

0800cd10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd10:	f3ef 8009 	mrs	r0, PSP
 800cd14:	f3bf 8f6f 	isb	sy
 800cd18:	4b15      	ldr	r3, [pc, #84]	; (800cd70 <pxCurrentTCBConst>)
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	f01e 0f10 	tst.w	lr, #16
 800cd20:	bf08      	it	eq
 800cd22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2a:	6010      	str	r0, [r2, #0]
 800cd2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cd30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cd34:	b672      	cpsid	i
 800cd36:	f380 8811 	msr	BASEPRI, r0
 800cd3a:	f3bf 8f4f 	dsb	sy
 800cd3e:	f3bf 8f6f 	isb	sy
 800cd42:	b662      	cpsie	i
 800cd44:	f7fe ff94 	bl	800bc70 <vTaskSwitchContext>
 800cd48:	f04f 0000 	mov.w	r0, #0
 800cd4c:	f380 8811 	msr	BASEPRI, r0
 800cd50:	bc09      	pop	{r0, r3}
 800cd52:	6819      	ldr	r1, [r3, #0]
 800cd54:	6808      	ldr	r0, [r1, #0]
 800cd56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5a:	f01e 0f10 	tst.w	lr, #16
 800cd5e:	bf08      	it	eq
 800cd60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cd64:	f380 8809 	msr	PSP, r0
 800cd68:	f3bf 8f6f 	isb	sy
 800cd6c:	4770      	bx	lr
 800cd6e:	bf00      	nop

0800cd70 <pxCurrentTCBConst>:
 800cd70:	20008160 	.word	0x20008160
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cd74:	bf00      	nop
 800cd76:	bf00      	nop

0800cd78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b082      	sub	sp, #8
 800cd7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd82:	b672      	cpsid	i
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	b662      	cpsie	i
 800cd92:	607b      	str	r3, [r7, #4]
}
 800cd94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cd96:	f7fe feaf 	bl	800baf8 <xTaskIncrementTick>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d003      	beq.n	800cda8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cda0:	4b06      	ldr	r3, [pc, #24]	; (800cdbc <SysTick_Handler+0x44>)
 800cda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cda6:	601a      	str	r2, [r3, #0]
 800cda8:	2300      	movs	r3, #0
 800cdaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	f383 8811 	msr	BASEPRI, r3
}
 800cdb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cdb4:	bf00      	nop
 800cdb6:	3708      	adds	r7, #8
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	e000ed04 	.word	0xe000ed04

0800cdc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cdc4:	4b0b      	ldr	r3, [pc, #44]	; (800cdf4 <vPortSetupTimerInterrupt+0x34>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cdca:	4b0b      	ldr	r3, [pc, #44]	; (800cdf8 <vPortSetupTimerInterrupt+0x38>)
 800cdcc:	2200      	movs	r2, #0
 800cdce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cdd0:	4b0a      	ldr	r3, [pc, #40]	; (800cdfc <vPortSetupTimerInterrupt+0x3c>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a0a      	ldr	r2, [pc, #40]	; (800ce00 <vPortSetupTimerInterrupt+0x40>)
 800cdd6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdda:	099b      	lsrs	r3, r3, #6
 800cddc:	4a09      	ldr	r2, [pc, #36]	; (800ce04 <vPortSetupTimerInterrupt+0x44>)
 800cdde:	3b01      	subs	r3, #1
 800cde0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cde2:	4b04      	ldr	r3, [pc, #16]	; (800cdf4 <vPortSetupTimerInterrupt+0x34>)
 800cde4:	2207      	movs	r2, #7
 800cde6:	601a      	str	r2, [r3, #0]
}
 800cde8:	bf00      	nop
 800cdea:	46bd      	mov	sp, r7
 800cdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf0:	4770      	bx	lr
 800cdf2:	bf00      	nop
 800cdf4:	e000e010 	.word	0xe000e010
 800cdf8:	e000e018 	.word	0xe000e018
 800cdfc:	20000004 	.word	0x20000004
 800ce00:	10624dd3 	.word	0x10624dd3
 800ce04:	e000e014 	.word	0xe000e014

0800ce08 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce08:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce18 <vPortEnableVFP+0x10>
 800ce0c:	6801      	ldr	r1, [r0, #0]
 800ce0e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce12:	6001      	str	r1, [r0, #0]
 800ce14:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce16:	bf00      	nop
 800ce18:	e000ed88 	.word	0xe000ed88

0800ce1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce22:	f3ef 8305 	mrs	r3, IPSR
 800ce26:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	2b0f      	cmp	r3, #15
 800ce2c:	d916      	bls.n	800ce5c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce2e:	4a19      	ldr	r2, [pc, #100]	; (800ce94 <vPortValidateInterruptPriority+0x78>)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4413      	add	r3, r2
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ce38:	4b17      	ldr	r3, [pc, #92]	; (800ce98 <vPortValidateInterruptPriority+0x7c>)
 800ce3a:	781b      	ldrb	r3, [r3, #0]
 800ce3c:	7afa      	ldrb	r2, [r7, #11]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d20c      	bcs.n	800ce5c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800ce42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce46:	b672      	cpsid	i
 800ce48:	f383 8811 	msr	BASEPRI, r3
 800ce4c:	f3bf 8f6f 	isb	sy
 800ce50:	f3bf 8f4f 	dsb	sy
 800ce54:	b662      	cpsie	i
 800ce56:	607b      	str	r3, [r7, #4]
}
 800ce58:	bf00      	nop
 800ce5a:	e7fe      	b.n	800ce5a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ce5c:	4b0f      	ldr	r3, [pc, #60]	; (800ce9c <vPortValidateInterruptPriority+0x80>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ce64:	4b0e      	ldr	r3, [pc, #56]	; (800cea0 <vPortValidateInterruptPriority+0x84>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d90c      	bls.n	800ce86 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800ce6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce70:	b672      	cpsid	i
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	b662      	cpsie	i
 800ce80:	603b      	str	r3, [r7, #0]
}
 800ce82:	bf00      	nop
 800ce84:	e7fe      	b.n	800ce84 <vPortValidateInterruptPriority+0x68>
	}
 800ce86:	bf00      	nop
 800ce88:	3714      	adds	r7, #20
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce90:	4770      	bx	lr
 800ce92:	bf00      	nop
 800ce94:	e000e3f0 	.word	0xe000e3f0
 800ce98:	2000878c 	.word	0x2000878c
 800ce9c:	e000ed0c 	.word	0xe000ed0c
 800cea0:	20008790 	.word	0x20008790

0800cea4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b08a      	sub	sp, #40	; 0x28
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ceac:	2300      	movs	r3, #0
 800ceae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ceb0:	f7fe fd64 	bl	800b97c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ceb4:	4b5b      	ldr	r3, [pc, #364]	; (800d024 <pvPortMalloc+0x180>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d101      	bne.n	800cec0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cebc:	f000 f91a 	bl	800d0f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cec0:	4b59      	ldr	r3, [pc, #356]	; (800d028 <pvPortMalloc+0x184>)
 800cec2:	681a      	ldr	r2, [r3, #0]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	4013      	ands	r3, r2
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f040 8092 	bne.w	800cff2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d01f      	beq.n	800cf14 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ced4:	2208      	movs	r2, #8
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	4413      	add	r3, r2
 800ceda:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f003 0307 	and.w	r3, r3, #7
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d016      	beq.n	800cf14 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f023 0307 	bic.w	r3, r3, #7
 800ceec:	3308      	adds	r3, #8
 800ceee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f003 0307 	and.w	r3, r3, #7
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00c      	beq.n	800cf14 <pvPortMalloc+0x70>
	__asm volatile
 800cefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefe:	b672      	cpsid	i
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
 800cf0c:	b662      	cpsie	i
 800cf0e:	617b      	str	r3, [r7, #20]
}
 800cf10:	bf00      	nop
 800cf12:	e7fe      	b.n	800cf12 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d06b      	beq.n	800cff2 <pvPortMalloc+0x14e>
 800cf1a:	4b44      	ldr	r3, [pc, #272]	; (800d02c <pvPortMalloc+0x188>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	687a      	ldr	r2, [r7, #4]
 800cf20:	429a      	cmp	r2, r3
 800cf22:	d866      	bhi.n	800cff2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf24:	4b42      	ldr	r3, [pc, #264]	; (800d030 <pvPortMalloc+0x18c>)
 800cf26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf28:	4b41      	ldr	r3, [pc, #260]	; (800d030 <pvPortMalloc+0x18c>)
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf2e:	e004      	b.n	800cf3a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cf30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf3c:	685b      	ldr	r3, [r3, #4]
 800cf3e:	687a      	ldr	r2, [r7, #4]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d903      	bls.n	800cf4c <pvPortMalloc+0xa8>
 800cf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1f1      	bne.n	800cf30 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cf4c:	4b35      	ldr	r3, [pc, #212]	; (800d024 <pvPortMalloc+0x180>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d04d      	beq.n	800cff2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cf56:	6a3b      	ldr	r3, [r7, #32]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	2208      	movs	r2, #8
 800cf5c:	4413      	add	r3, r2
 800cf5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cf60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	6a3b      	ldr	r3, [r7, #32]
 800cf66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6a:	685a      	ldr	r2, [r3, #4]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	1ad2      	subs	r2, r2, r3
 800cf70:	2308      	movs	r3, #8
 800cf72:	005b      	lsls	r3, r3, #1
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d921      	bls.n	800cfbc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cf78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	f003 0307 	and.w	r3, r3, #7
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d00c      	beq.n	800cfa4 <pvPortMalloc+0x100>
	__asm volatile
 800cf8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8e:	b672      	cpsid	i
 800cf90:	f383 8811 	msr	BASEPRI, r3
 800cf94:	f3bf 8f6f 	isb	sy
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	b662      	cpsie	i
 800cf9e:	613b      	str	r3, [r7, #16]
}
 800cfa0:	bf00      	nop
 800cfa2:	e7fe      	b.n	800cfa2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	685a      	ldr	r2, [r3, #4]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	1ad2      	subs	r2, r2, r3
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cfb6:	69b8      	ldr	r0, [r7, #24]
 800cfb8:	f000 f8fe 	bl	800d1b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cfbc:	4b1b      	ldr	r3, [pc, #108]	; (800d02c <pvPortMalloc+0x188>)
 800cfbe:	681a      	ldr	r2, [r3, #0]
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	685b      	ldr	r3, [r3, #4]
 800cfc4:	1ad3      	subs	r3, r2, r3
 800cfc6:	4a19      	ldr	r2, [pc, #100]	; (800d02c <pvPortMalloc+0x188>)
 800cfc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cfca:	4b18      	ldr	r3, [pc, #96]	; (800d02c <pvPortMalloc+0x188>)
 800cfcc:	681a      	ldr	r2, [r3, #0]
 800cfce:	4b19      	ldr	r3, [pc, #100]	; (800d034 <pvPortMalloc+0x190>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d203      	bcs.n	800cfde <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cfd6:	4b15      	ldr	r3, [pc, #84]	; (800d02c <pvPortMalloc+0x188>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	4a16      	ldr	r2, [pc, #88]	; (800d034 <pvPortMalloc+0x190>)
 800cfdc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cfde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe0:	685a      	ldr	r2, [r3, #4]
 800cfe2:	4b11      	ldr	r3, [pc, #68]	; (800d028 <pvPortMalloc+0x184>)
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	431a      	orrs	r2, r3
 800cfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfee:	2200      	movs	r2, #0
 800cff0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cff2:	f7fe fcd1 	bl	800b998 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	f003 0307 	and.w	r3, r3, #7
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00c      	beq.n	800d01a <pvPortMalloc+0x176>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	b672      	cpsid	i
 800d006:	f383 8811 	msr	BASEPRI, r3
 800d00a:	f3bf 8f6f 	isb	sy
 800d00e:	f3bf 8f4f 	dsb	sy
 800d012:	b662      	cpsie	i
 800d014:	60fb      	str	r3, [r7, #12]
}
 800d016:	bf00      	nop
 800d018:	e7fe      	b.n	800d018 <pvPortMalloc+0x174>
	return pvReturn;
 800d01a:	69fb      	ldr	r3, [r7, #28]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3728      	adds	r7, #40	; 0x28
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	2000c39c 	.word	0x2000c39c
 800d028:	2000c3a8 	.word	0x2000c3a8
 800d02c:	2000c3a0 	.word	0x2000c3a0
 800d030:	2000c394 	.word	0x2000c394
 800d034:	2000c3a4 	.word	0x2000c3a4

0800d038 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d04c      	beq.n	800d0e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d04a:	2308      	movs	r3, #8
 800d04c:	425b      	negs	r3, r3
 800d04e:	697a      	ldr	r2, [r7, #20]
 800d050:	4413      	add	r3, r2
 800d052:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d054:	697b      	ldr	r3, [r7, #20]
 800d056:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d058:	693b      	ldr	r3, [r7, #16]
 800d05a:	685a      	ldr	r2, [r3, #4]
 800d05c:	4b23      	ldr	r3, [pc, #140]	; (800d0ec <vPortFree+0xb4>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4013      	ands	r3, r2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10c      	bne.n	800d080 <vPortFree+0x48>
	__asm volatile
 800d066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06a:	b672      	cpsid	i
 800d06c:	f383 8811 	msr	BASEPRI, r3
 800d070:	f3bf 8f6f 	isb	sy
 800d074:	f3bf 8f4f 	dsb	sy
 800d078:	b662      	cpsie	i
 800d07a:	60fb      	str	r3, [r7, #12]
}
 800d07c:	bf00      	nop
 800d07e:	e7fe      	b.n	800d07e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00c      	beq.n	800d0a2 <vPortFree+0x6a>
	__asm volatile
 800d088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08c:	b672      	cpsid	i
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	b662      	cpsie	i
 800d09c:	60bb      	str	r3, [r7, #8]
}
 800d09e:	bf00      	nop
 800d0a0:	e7fe      	b.n	800d0a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	685a      	ldr	r2, [r3, #4]
 800d0a6:	4b11      	ldr	r3, [pc, #68]	; (800d0ec <vPortFree+0xb4>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4013      	ands	r3, r2
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d019      	beq.n	800d0e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d115      	bne.n	800d0e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	685a      	ldr	r2, [r3, #4]
 800d0bc:	4b0b      	ldr	r3, [pc, #44]	; (800d0ec <vPortFree+0xb4>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	43db      	mvns	r3, r3
 800d0c2:	401a      	ands	r2, r3
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d0c8:	f7fe fc58 	bl	800b97c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	685a      	ldr	r2, [r3, #4]
 800d0d0:	4b07      	ldr	r3, [pc, #28]	; (800d0f0 <vPortFree+0xb8>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	4a06      	ldr	r2, [pc, #24]	; (800d0f0 <vPortFree+0xb8>)
 800d0d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d0da:	6938      	ldr	r0, [r7, #16]
 800d0dc:	f000 f86c 	bl	800d1b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d0e0:	f7fe fc5a 	bl	800b998 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d0e4:	bf00      	nop
 800d0e6:	3718      	adds	r7, #24
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	2000c3a8 	.word	0x2000c3a8
 800d0f0:	2000c3a0 	.word	0x2000c3a0

0800d0f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d0fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d0fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d100:	4b27      	ldr	r3, [pc, #156]	; (800d1a0 <prvHeapInit+0xac>)
 800d102:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f003 0307 	and.w	r3, r3, #7
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d00c      	beq.n	800d128 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	3307      	adds	r3, #7
 800d112:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f023 0307 	bic.w	r3, r3, #7
 800d11a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d11c:	68ba      	ldr	r2, [r7, #8]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	1ad3      	subs	r3, r2, r3
 800d122:	4a1f      	ldr	r2, [pc, #124]	; (800d1a0 <prvHeapInit+0xac>)
 800d124:	4413      	add	r3, r2
 800d126:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d12c:	4a1d      	ldr	r2, [pc, #116]	; (800d1a4 <prvHeapInit+0xb0>)
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d132:	4b1c      	ldr	r3, [pc, #112]	; (800d1a4 <prvHeapInit+0xb0>)
 800d134:	2200      	movs	r2, #0
 800d136:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	4413      	add	r3, r2
 800d13e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d140:	2208      	movs	r2, #8
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	1a9b      	subs	r3, r3, r2
 800d146:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f023 0307 	bic.w	r3, r3, #7
 800d14e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4a15      	ldr	r2, [pc, #84]	; (800d1a8 <prvHeapInit+0xb4>)
 800d154:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d156:	4b14      	ldr	r3, [pc, #80]	; (800d1a8 <prvHeapInit+0xb4>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2200      	movs	r2, #0
 800d15c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d15e:	4b12      	ldr	r3, [pc, #72]	; (800d1a8 <prvHeapInit+0xb4>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	68fa      	ldr	r2, [r7, #12]
 800d16e:	1ad2      	subs	r2, r2, r3
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d174:	4b0c      	ldr	r3, [pc, #48]	; (800d1a8 <prvHeapInit+0xb4>)
 800d176:	681a      	ldr	r2, [r3, #0]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	685b      	ldr	r3, [r3, #4]
 800d180:	4a0a      	ldr	r2, [pc, #40]	; (800d1ac <prvHeapInit+0xb8>)
 800d182:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	4a09      	ldr	r2, [pc, #36]	; (800d1b0 <prvHeapInit+0xbc>)
 800d18a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d18c:	4b09      	ldr	r3, [pc, #36]	; (800d1b4 <prvHeapInit+0xc0>)
 800d18e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d192:	601a      	str	r2, [r3, #0]
}
 800d194:	bf00      	nop
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr
 800d1a0:	20008794 	.word	0x20008794
 800d1a4:	2000c394 	.word	0x2000c394
 800d1a8:	2000c39c 	.word	0x2000c39c
 800d1ac:	2000c3a4 	.word	0x2000c3a4
 800d1b0:	2000c3a0 	.word	0x2000c3a0
 800d1b4:	2000c3a8 	.word	0x2000c3a8

0800d1b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b085      	sub	sp, #20
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d1c0:	4b28      	ldr	r3, [pc, #160]	; (800d264 <prvInsertBlockIntoFreeList+0xac>)
 800d1c2:	60fb      	str	r3, [r7, #12]
 800d1c4:	e002      	b.n	800d1cc <prvInsertBlockIntoFreeList+0x14>
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	60fb      	str	r3, [r7, #12]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d8f7      	bhi.n	800d1c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	68ba      	ldr	r2, [r7, #8]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d108      	bne.n	800d1fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	441a      	add	r2, r3
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	68ba      	ldr	r2, [r7, #8]
 800d204:	441a      	add	r2, r3
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	429a      	cmp	r2, r3
 800d20c:	d118      	bne.n	800d240 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681a      	ldr	r2, [r3, #0]
 800d212:	4b15      	ldr	r3, [pc, #84]	; (800d268 <prvInsertBlockIntoFreeList+0xb0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	429a      	cmp	r2, r3
 800d218:	d00d      	beq.n	800d236 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	685a      	ldr	r2, [r3, #4]
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	685b      	ldr	r3, [r3, #4]
 800d224:	441a      	add	r2, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	681a      	ldr	r2, [r3, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	e008      	b.n	800d248 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d236:	4b0c      	ldr	r3, [pc, #48]	; (800d268 <prvInsertBlockIntoFreeList+0xb0>)
 800d238:	681a      	ldr	r2, [r3, #0]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	e003      	b.n	800d248 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d002      	beq.n	800d256 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d256:	bf00      	nop
 800d258:	3714      	adds	r7, #20
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	2000c394 	.word	0x2000c394
 800d268:	2000c39c 	.word	0x2000c39c

0800d26c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d26c:	b580      	push	{r7, lr}
 800d26e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d270:	2200      	movs	r2, #0
 800d272:	4912      	ldr	r1, [pc, #72]	; (800d2bc <MX_USB_DEVICE_Init+0x50>)
 800d274:	4812      	ldr	r0, [pc, #72]	; (800d2c0 <MX_USB_DEVICE_Init+0x54>)
 800d276:	f7fb fee3 	bl	8009040 <USBD_Init>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d001      	beq.n	800d284 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d280:	f7f4 f83e 	bl	8001300 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d284:	490f      	ldr	r1, [pc, #60]	; (800d2c4 <MX_USB_DEVICE_Init+0x58>)
 800d286:	480e      	ldr	r0, [pc, #56]	; (800d2c0 <MX_USB_DEVICE_Init+0x54>)
 800d288:	f7fb ff0a 	bl	80090a0 <USBD_RegisterClass>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d001      	beq.n	800d296 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d292:	f7f4 f835 	bl	8001300 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d296:	490c      	ldr	r1, [pc, #48]	; (800d2c8 <MX_USB_DEVICE_Init+0x5c>)
 800d298:	4809      	ldr	r0, [pc, #36]	; (800d2c0 <MX_USB_DEVICE_Init+0x54>)
 800d29a:	f7fb fe41 	bl	8008f20 <USBD_CDC_RegisterInterface>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d2a4:	f7f4 f82c 	bl	8001300 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d2a8:	4805      	ldr	r0, [pc, #20]	; (800d2c0 <MX_USB_DEVICE_Init+0x54>)
 800d2aa:	f7fb ff2f 	bl	800910c <USBD_Start>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d001      	beq.n	800d2b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d2b4:	f7f4 f824 	bl	8001300 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d2b8:	bf00      	nop
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	200000b4 	.word	0x200000b4
 800d2c0:	2000c3ac 	.word	0x2000c3ac
 800d2c4:	2000001c 	.word	0x2000001c
 800d2c8:	200000a0 	.word	0x200000a0

0800d2cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	4905      	ldr	r1, [pc, #20]	; (800d2e8 <CDC_Init_FS+0x1c>)
 800d2d4:	4805      	ldr	r0, [pc, #20]	; (800d2ec <CDC_Init_FS+0x20>)
 800d2d6:	f7fb fe3d 	bl	8008f54 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d2da:	4905      	ldr	r1, [pc, #20]	; (800d2f0 <CDC_Init_FS+0x24>)
 800d2dc:	4803      	ldr	r0, [pc, #12]	; (800d2ec <CDC_Init_FS+0x20>)
 800d2de:	f7fb fe5b 	bl	8008f98 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d2e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	2000ce88 	.word	0x2000ce88
 800d2ec:	2000c3ac 	.word	0x2000c3ac
 800d2f0:	2000c688 	.word	0x2000c688

0800d2f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d2f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	4603      	mov	r3, r0
 800d30c:	6039      	str	r1, [r7, #0]
 800d30e:	71fb      	strb	r3, [r7, #7]
 800d310:	4613      	mov	r3, r2
 800d312:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d314:	79fb      	ldrb	r3, [r7, #7]
 800d316:	2b23      	cmp	r3, #35	; 0x23
 800d318:	d84a      	bhi.n	800d3b0 <CDC_Control_FS+0xac>
 800d31a:	a201      	add	r2, pc, #4	; (adr r2, 800d320 <CDC_Control_FS+0x1c>)
 800d31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d320:	0800d3b1 	.word	0x0800d3b1
 800d324:	0800d3b1 	.word	0x0800d3b1
 800d328:	0800d3b1 	.word	0x0800d3b1
 800d32c:	0800d3b1 	.word	0x0800d3b1
 800d330:	0800d3b1 	.word	0x0800d3b1
 800d334:	0800d3b1 	.word	0x0800d3b1
 800d338:	0800d3b1 	.word	0x0800d3b1
 800d33c:	0800d3b1 	.word	0x0800d3b1
 800d340:	0800d3b1 	.word	0x0800d3b1
 800d344:	0800d3b1 	.word	0x0800d3b1
 800d348:	0800d3b1 	.word	0x0800d3b1
 800d34c:	0800d3b1 	.word	0x0800d3b1
 800d350:	0800d3b1 	.word	0x0800d3b1
 800d354:	0800d3b1 	.word	0x0800d3b1
 800d358:	0800d3b1 	.word	0x0800d3b1
 800d35c:	0800d3b1 	.word	0x0800d3b1
 800d360:	0800d3b1 	.word	0x0800d3b1
 800d364:	0800d3b1 	.word	0x0800d3b1
 800d368:	0800d3b1 	.word	0x0800d3b1
 800d36c:	0800d3b1 	.word	0x0800d3b1
 800d370:	0800d3b1 	.word	0x0800d3b1
 800d374:	0800d3b1 	.word	0x0800d3b1
 800d378:	0800d3b1 	.word	0x0800d3b1
 800d37c:	0800d3b1 	.word	0x0800d3b1
 800d380:	0800d3b1 	.word	0x0800d3b1
 800d384:	0800d3b1 	.word	0x0800d3b1
 800d388:	0800d3b1 	.word	0x0800d3b1
 800d38c:	0800d3b1 	.word	0x0800d3b1
 800d390:	0800d3b1 	.word	0x0800d3b1
 800d394:	0800d3b1 	.word	0x0800d3b1
 800d398:	0800d3b1 	.word	0x0800d3b1
 800d39c:	0800d3b1 	.word	0x0800d3b1
 800d3a0:	0800d3b1 	.word	0x0800d3b1
 800d3a4:	0800d3b1 	.word	0x0800d3b1
 800d3a8:	0800d3b1 	.word	0x0800d3b1
 800d3ac:	0800d3b1 	.word	0x0800d3b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d3b0:	bf00      	nop
  }

  return (USBD_OK);
 800d3b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d3ca:	6879      	ldr	r1, [r7, #4]
 800d3cc:	4805      	ldr	r0, [pc, #20]	; (800d3e4 <CDC_Receive_FS+0x24>)
 800d3ce:	f7fb fde3 	bl	8008f98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d3d2:	4804      	ldr	r0, [pc, #16]	; (800d3e4 <CDC_Receive_FS+0x24>)
 800d3d4:	f7fb fdfe 	bl	8008fd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d3d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3708      	adds	r7, #8
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	2000c3ac 	.word	0x2000c3ac

0800d3e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b087      	sub	sp, #28
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	4613      	mov	r3, r2
 800d3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d3fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	371c      	adds	r7, #28
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
	...

0800d40c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	4603      	mov	r3, r0
 800d414:	6039      	str	r1, [r7, #0]
 800d416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d418:	683b      	ldr	r3, [r7, #0]
 800d41a:	2212      	movs	r2, #18
 800d41c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d41e:	4b03      	ldr	r3, [pc, #12]	; (800d42c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr
 800d42c:	200000d4 	.word	0x200000d4

0800d430 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d430:	b480      	push	{r7}
 800d432:	b083      	sub	sp, #12
 800d434:	af00      	add	r7, sp, #0
 800d436:	4603      	mov	r3, r0
 800d438:	6039      	str	r1, [r7, #0]
 800d43a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	2204      	movs	r2, #4
 800d440:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d442:	4b03      	ldr	r3, [pc, #12]	; (800d450 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d444:	4618      	mov	r0, r3
 800d446:	370c      	adds	r7, #12
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr
 800d450:	200000f4 	.word	0x200000f4

0800d454 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b082      	sub	sp, #8
 800d458:	af00      	add	r7, sp, #0
 800d45a:	4603      	mov	r3, r0
 800d45c:	6039      	str	r1, [r7, #0]
 800d45e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d460:	79fb      	ldrb	r3, [r7, #7]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d105      	bne.n	800d472 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d466:	683a      	ldr	r2, [r7, #0]
 800d468:	4907      	ldr	r1, [pc, #28]	; (800d488 <USBD_FS_ProductStrDescriptor+0x34>)
 800d46a:	4808      	ldr	r0, [pc, #32]	; (800d48c <USBD_FS_ProductStrDescriptor+0x38>)
 800d46c:	f7fd f824 	bl	800a4b8 <USBD_GetString>
 800d470:	e004      	b.n	800d47c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d472:	683a      	ldr	r2, [r7, #0]
 800d474:	4904      	ldr	r1, [pc, #16]	; (800d488 <USBD_FS_ProductStrDescriptor+0x34>)
 800d476:	4805      	ldr	r0, [pc, #20]	; (800d48c <USBD_FS_ProductStrDescriptor+0x38>)
 800d478:	f7fd f81e 	bl	800a4b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d47c:	4b02      	ldr	r3, [pc, #8]	; (800d488 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}
 800d486:	bf00      	nop
 800d488:	2000d688 	.word	0x2000d688
 800d48c:	0801d360 	.word	0x0801d360

0800d490 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b082      	sub	sp, #8
 800d494:	af00      	add	r7, sp, #0
 800d496:	4603      	mov	r3, r0
 800d498:	6039      	str	r1, [r7, #0]
 800d49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d49c:	683a      	ldr	r2, [r7, #0]
 800d49e:	4904      	ldr	r1, [pc, #16]	; (800d4b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d4a0:	4804      	ldr	r0, [pc, #16]	; (800d4b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d4a2:	f7fd f809 	bl	800a4b8 <USBD_GetString>
  return USBD_StrDesc;
 800d4a6:	4b02      	ldr	r3, [pc, #8]	; (800d4b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}
 800d4b0:	2000d688 	.word	0x2000d688
 800d4b4:	0801d378 	.word	0x0801d378

0800d4b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	4603      	mov	r3, r0
 800d4c0:	6039      	str	r1, [r7, #0]
 800d4c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	221a      	movs	r2, #26
 800d4c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d4ca:	f000 f855 	bl	800d578 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d4ce:	4b02      	ldr	r3, [pc, #8]	; (800d4d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}
 800d4d8:	200000f8 	.word	0x200000f8

0800d4dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	6039      	str	r1, [r7, #0]
 800d4e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d4e8:	79fb      	ldrb	r3, [r7, #7]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d105      	bne.n	800d4fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	4907      	ldr	r1, [pc, #28]	; (800d510 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4f2:	4808      	ldr	r0, [pc, #32]	; (800d514 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d4f4:	f7fc ffe0 	bl	800a4b8 <USBD_GetString>
 800d4f8:	e004      	b.n	800d504 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	4904      	ldr	r1, [pc, #16]	; (800d510 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d4fe:	4805      	ldr	r0, [pc, #20]	; (800d514 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d500:	f7fc ffda 	bl	800a4b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d504:	4b02      	ldr	r3, [pc, #8]	; (800d510 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d506:	4618      	mov	r0, r3
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	2000d688 	.word	0x2000d688
 800d514:	0801d38c 	.word	0x0801d38c

0800d518 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	6039      	str	r1, [r7, #0]
 800d522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d524:	79fb      	ldrb	r3, [r7, #7]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d105      	bne.n	800d536 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d52a:	683a      	ldr	r2, [r7, #0]
 800d52c:	4907      	ldr	r1, [pc, #28]	; (800d54c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d52e:	4808      	ldr	r0, [pc, #32]	; (800d550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d530:	f7fc ffc2 	bl	800a4b8 <USBD_GetString>
 800d534:	e004      	b.n	800d540 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	4904      	ldr	r1, [pc, #16]	; (800d54c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d53a:	4805      	ldr	r0, [pc, #20]	; (800d550 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d53c:	f7fc ffbc 	bl	800a4b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d540:	4b02      	ldr	r3, [pc, #8]	; (800d54c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d542:	4618      	mov	r0, r3
 800d544:	3708      	adds	r7, #8
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}
 800d54a:	bf00      	nop
 800d54c:	2000d688 	.word	0x2000d688
 800d550:	0801d398 	.word	0x0801d398

0800d554 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	4603      	mov	r3, r0
 800d55c:	6039      	str	r1, [r7, #0]
 800d55e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	220c      	movs	r2, #12
 800d564:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d566:	4b03      	ldr	r3, [pc, #12]	; (800d574 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d568:	4618      	mov	r0, r3
 800d56a:	370c      	adds	r7, #12
 800d56c:	46bd      	mov	sp, r7
 800d56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d572:	4770      	bx	lr
 800d574:	200000e8 	.word	0x200000e8

0800d578 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d57e:	4b0f      	ldr	r3, [pc, #60]	; (800d5bc <Get_SerialNum+0x44>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d584:	4b0e      	ldr	r3, [pc, #56]	; (800d5c0 <Get_SerialNum+0x48>)
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d58a:	4b0e      	ldr	r3, [pc, #56]	; (800d5c4 <Get_SerialNum+0x4c>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d590:	68fa      	ldr	r2, [r7, #12]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	4413      	add	r3, r2
 800d596:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d009      	beq.n	800d5b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d59e:	2208      	movs	r2, #8
 800d5a0:	4909      	ldr	r1, [pc, #36]	; (800d5c8 <Get_SerialNum+0x50>)
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f000 f814 	bl	800d5d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d5a8:	2204      	movs	r2, #4
 800d5aa:	4908      	ldr	r1, [pc, #32]	; (800d5cc <Get_SerialNum+0x54>)
 800d5ac:	68b8      	ldr	r0, [r7, #8]
 800d5ae:	f000 f80f 	bl	800d5d0 <IntToUnicode>
  }
}
 800d5b2:	bf00      	nop
 800d5b4:	3710      	adds	r7, #16
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	bd80      	pop	{r7, pc}
 800d5ba:	bf00      	nop
 800d5bc:	1ff0f420 	.word	0x1ff0f420
 800d5c0:	1ff0f424 	.word	0x1ff0f424
 800d5c4:	1ff0f428 	.word	0x1ff0f428
 800d5c8:	200000fa 	.word	0x200000fa
 800d5cc:	2000010a 	.word	0x2000010a

0800d5d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	4613      	mov	r3, r2
 800d5dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	75fb      	strb	r3, [r7, #23]
 800d5e6:	e027      	b.n	800d638 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	0f1b      	lsrs	r3, r3, #28
 800d5ec:	2b09      	cmp	r3, #9
 800d5ee:	d80b      	bhi.n	800d608 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	0f1b      	lsrs	r3, r3, #28
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	7dfb      	ldrb	r3, [r7, #23]
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	440b      	add	r3, r1
 800d600:	3230      	adds	r2, #48	; 0x30
 800d602:	b2d2      	uxtb	r2, r2
 800d604:	701a      	strb	r2, [r3, #0]
 800d606:	e00a      	b.n	800d61e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	0f1b      	lsrs	r3, r3, #28
 800d60c:	b2da      	uxtb	r2, r3
 800d60e:	7dfb      	ldrb	r3, [r7, #23]
 800d610:	005b      	lsls	r3, r3, #1
 800d612:	4619      	mov	r1, r3
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	440b      	add	r3, r1
 800d618:	3237      	adds	r2, #55	; 0x37
 800d61a:	b2d2      	uxtb	r2, r2
 800d61c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	011b      	lsls	r3, r3, #4
 800d622:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d624:	7dfb      	ldrb	r3, [r7, #23]
 800d626:	005b      	lsls	r3, r3, #1
 800d628:	3301      	adds	r3, #1
 800d62a:	68ba      	ldr	r2, [r7, #8]
 800d62c:	4413      	add	r3, r2
 800d62e:	2200      	movs	r2, #0
 800d630:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d632:	7dfb      	ldrb	r3, [r7, #23]
 800d634:	3301      	adds	r3, #1
 800d636:	75fb      	strb	r3, [r7, #23]
 800d638:	7dfa      	ldrb	r2, [r7, #23]
 800d63a:	79fb      	ldrb	r3, [r7, #7]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d3d3      	bcc.n	800d5e8 <IntToUnicode+0x18>
  }
}
 800d640:	bf00      	nop
 800d642:	bf00      	nop
 800d644:	371c      	adds	r7, #28
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
	...

0800d650 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b0ae      	sub	sp, #184	; 0xb8
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d658:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d65c:	2200      	movs	r2, #0
 800d65e:	601a      	str	r2, [r3, #0]
 800d660:	605a      	str	r2, [r3, #4]
 800d662:	609a      	str	r2, [r3, #8]
 800d664:	60da      	str	r2, [r3, #12]
 800d666:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800d668:	f107 0314 	add.w	r3, r7, #20
 800d66c:	2290      	movs	r2, #144	; 0x90
 800d66e:	2100      	movs	r1, #0
 800d670:	4618      	mov	r0, r3
 800d672:	f00e fecb 	bl	801c40c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d67e:	d151      	bne.n	800d724 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800d680:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d684:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800d686:	2300      	movs	r3, #0
 800d688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800d68c:	f107 0314 	add.w	r3, r7, #20
 800d690:	4618      	mov	r0, r3
 800d692:	f7f7 f951 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 800d696:	4603      	mov	r3, r0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d001      	beq.n	800d6a0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800d69c:	f7f3 fe30 	bl	8001300 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d6a0:	4b22      	ldr	r3, [pc, #136]	; (800d72c <HAL_PCD_MspInit+0xdc>)
 800d6a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6a4:	4a21      	ldr	r2, [pc, #132]	; (800d72c <HAL_PCD_MspInit+0xdc>)
 800d6a6:	f043 0301 	orr.w	r3, r3, #1
 800d6aa:	6313      	str	r3, [r2, #48]	; 0x30
 800d6ac:	4b1f      	ldr	r3, [pc, #124]	; (800d72c <HAL_PCD_MspInit+0xdc>)
 800d6ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6b0:	f003 0301 	and.w	r3, r3, #1
 800d6b4:	613b      	str	r3, [r7, #16]
 800d6b6:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d6b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d6bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d6cc:	2303      	movs	r3, #3
 800d6ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d6d2:	230a      	movs	r3, #10
 800d6d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d6d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800d6dc:	4619      	mov	r1, r3
 800d6de:	4814      	ldr	r0, [pc, #80]	; (800d730 <HAL_PCD_MspInit+0xe0>)
 800d6e0:	f7f4 ffa6 	bl	8002630 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d6e4:	4b11      	ldr	r3, [pc, #68]	; (800d72c <HAL_PCD_MspInit+0xdc>)
 800d6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e8:	4a10      	ldr	r2, [pc, #64]	; (800d72c <HAL_PCD_MspInit+0xdc>)
 800d6ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6ee:	6353      	str	r3, [r2, #52]	; 0x34
 800d6f0:	4b0e      	ldr	r3, [pc, #56]	; (800d72c <HAL_PCD_MspInit+0xdc>)
 800d6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6f8:	60fb      	str	r3, [r7, #12]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	4b0b      	ldr	r3, [pc, #44]	; (800d72c <HAL_PCD_MspInit+0xdc>)
 800d6fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d700:	4a0a      	ldr	r2, [pc, #40]	; (800d72c <HAL_PCD_MspInit+0xdc>)
 800d702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d706:	6453      	str	r3, [r2, #68]	; 0x44
 800d708:	4b08      	ldr	r3, [pc, #32]	; (800d72c <HAL_PCD_MspInit+0xdc>)
 800d70a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d70c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d710:	60bb      	str	r3, [r7, #8]
 800d712:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d714:	2200      	movs	r2, #0
 800d716:	2105      	movs	r1, #5
 800d718:	2043      	movs	r0, #67	; 0x43
 800d71a:	f7f4 fb49 	bl	8001db0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d71e:	2043      	movs	r0, #67	; 0x43
 800d720:	f7f4 fb62 	bl	8001de8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d724:	bf00      	nop
 800d726:	37b8      	adds	r7, #184	; 0xb8
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}
 800d72c:	40023800 	.word	0x40023800
 800d730:	40020000 	.word	0x40020000

0800d734 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d748:	4619      	mov	r1, r3
 800d74a:	4610      	mov	r0, r2
 800d74c:	f7fb fd2b 	bl	80091a6 <USBD_LL_SetupStage>
}
 800d750:	bf00      	nop
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d76a:	78fa      	ldrb	r2, [r7, #3]
 800d76c:	6879      	ldr	r1, [r7, #4]
 800d76e:	4613      	mov	r3, r2
 800d770:	00db      	lsls	r3, r3, #3
 800d772:	4413      	add	r3, r2
 800d774:	009b      	lsls	r3, r3, #2
 800d776:	440b      	add	r3, r1
 800d778:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	78fb      	ldrb	r3, [r7, #3]
 800d780:	4619      	mov	r1, r3
 800d782:	f7fb fd65 	bl	8009250 <USBD_LL_DataOutStage>
}
 800d786:	bf00      	nop
 800d788:	3708      	adds	r7, #8
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}

0800d78e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b082      	sub	sp, #8
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
 800d796:	460b      	mov	r3, r1
 800d798:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800d7a0:	78fa      	ldrb	r2, [r7, #3]
 800d7a2:	6879      	ldr	r1, [r7, #4]
 800d7a4:	4613      	mov	r3, r2
 800d7a6:	00db      	lsls	r3, r3, #3
 800d7a8:	4413      	add	r3, r2
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	440b      	add	r3, r1
 800d7ae:	334c      	adds	r3, #76	; 0x4c
 800d7b0:	681a      	ldr	r2, [r3, #0]
 800d7b2:	78fb      	ldrb	r3, [r7, #3]
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	f7fb fdfe 	bl	80093b6 <USBD_LL_DataInStage>
}
 800d7ba:	bf00      	nop
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7fb ff32 	bl	800963a <USBD_LL_SOF>
}
 800d7d6:	bf00      	nop
 800d7d8:	3708      	adds	r7, #8
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	bd80      	pop	{r7, pc}

0800d7de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d7de:	b580      	push	{r7, lr}
 800d7e0:	b084      	sub	sp, #16
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	68db      	ldr	r3, [r3, #12]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d102      	bne.n	800d7f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	73fb      	strb	r3, [r7, #15]
 800d7f6:	e008      	b.n	800d80a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	68db      	ldr	r3, [r3, #12]
 800d7fc:	2b02      	cmp	r3, #2
 800d7fe:	d102      	bne.n	800d806 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d800:	2301      	movs	r3, #1
 800d802:	73fb      	strb	r3, [r7, #15]
 800d804:	e001      	b.n	800d80a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d806:	f7f3 fd7b 	bl	8001300 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d810:	7bfa      	ldrb	r2, [r7, #15]
 800d812:	4611      	mov	r1, r2
 800d814:	4618      	mov	r0, r3
 800d816:	f7fb fed2 	bl	80095be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d820:	4618      	mov	r0, r3
 800d822:	f7fb fe7a 	bl	800951a <USBD_LL_Reset>
}
 800d826:	bf00      	nop
 800d828:	3710      	adds	r7, #16
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
	...

0800d830 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d83e:	4618      	mov	r0, r3
 800d840:	f7fb fecd 	bl	80095de <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	6812      	ldr	r2, [r2, #0]
 800d852:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d856:	f043 0301 	orr.w	r3, r3, #1
 800d85a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6a1b      	ldr	r3, [r3, #32]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d005      	beq.n	800d870 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d864:	4b04      	ldr	r3, [pc, #16]	; (800d878 <HAL_PCD_SuspendCallback+0x48>)
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	4a03      	ldr	r2, [pc, #12]	; (800d878 <HAL_PCD_SuspendCallback+0x48>)
 800d86a:	f043 0306 	orr.w	r3, r3, #6
 800d86e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	e000ed00 	.word	0xe000ed00

0800d87c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fb febd 	bl	800960a <USBD_LL_Resume>
}
 800d890:	bf00      	nop
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d8aa:	78fa      	ldrb	r2, [r7, #3]
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7fb ff15 	bl	80096de <USBD_LL_IsoOUTIncomplete>
}
 800d8b4:	bf00      	nop
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	460b      	mov	r3, r1
 800d8c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d8ce:	78fa      	ldrb	r2, [r7, #3]
 800d8d0:	4611      	mov	r1, r2
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	f7fb fed1 	bl	800967a <USBD_LL_IsoINIncomplete>
}
 800d8d8:	bf00      	nop
 800d8da:	3708      	adds	r7, #8
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f7fb ff27 	bl	8009742 <USBD_LL_DevConnected>
}
 800d8f4:	bf00      	nop
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fb ff24 	bl	8009758 <USBD_LL_DevDisconnected>
}
 800d910:	bf00      	nop
 800d912:	3708      	adds	r7, #8
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d13c      	bne.n	800d9a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d928:	4a20      	ldr	r2, [pc, #128]	; (800d9ac <USBD_LL_Init+0x94>)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	4a1e      	ldr	r2, [pc, #120]	; (800d9ac <USBD_LL_Init+0x94>)
 800d934:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d938:	4b1c      	ldr	r3, [pc, #112]	; (800d9ac <USBD_LL_Init+0x94>)
 800d93a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d93e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d940:	4b1a      	ldr	r3, [pc, #104]	; (800d9ac <USBD_LL_Init+0x94>)
 800d942:	2206      	movs	r2, #6
 800d944:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d946:	4b19      	ldr	r3, [pc, #100]	; (800d9ac <USBD_LL_Init+0x94>)
 800d948:	2202      	movs	r2, #2
 800d94a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d94c:	4b17      	ldr	r3, [pc, #92]	; (800d9ac <USBD_LL_Init+0x94>)
 800d94e:	2200      	movs	r2, #0
 800d950:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d952:	4b16      	ldr	r3, [pc, #88]	; (800d9ac <USBD_LL_Init+0x94>)
 800d954:	2202      	movs	r2, #2
 800d956:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d958:	4b14      	ldr	r3, [pc, #80]	; (800d9ac <USBD_LL_Init+0x94>)
 800d95a:	2200      	movs	r2, #0
 800d95c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d95e:	4b13      	ldr	r3, [pc, #76]	; (800d9ac <USBD_LL_Init+0x94>)
 800d960:	2200      	movs	r2, #0
 800d962:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d964:	4b11      	ldr	r3, [pc, #68]	; (800d9ac <USBD_LL_Init+0x94>)
 800d966:	2200      	movs	r2, #0
 800d968:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d96a:	4b10      	ldr	r3, [pc, #64]	; (800d9ac <USBD_LL_Init+0x94>)
 800d96c:	2200      	movs	r2, #0
 800d96e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d970:	4b0e      	ldr	r3, [pc, #56]	; (800d9ac <USBD_LL_Init+0x94>)
 800d972:	2200      	movs	r2, #0
 800d974:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d976:	480d      	ldr	r0, [pc, #52]	; (800d9ac <USBD_LL_Init+0x94>)
 800d978:	f7f5 f81f 	bl	80029ba <HAL_PCD_Init>
 800d97c:	4603      	mov	r3, r0
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d982:	f7f3 fcbd 	bl	8001300 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d986:	2180      	movs	r1, #128	; 0x80
 800d988:	4808      	ldr	r0, [pc, #32]	; (800d9ac <USBD_LL_Init+0x94>)
 800d98a:	f7f6 fa9a 	bl	8003ec2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d98e:	2240      	movs	r2, #64	; 0x40
 800d990:	2100      	movs	r1, #0
 800d992:	4806      	ldr	r0, [pc, #24]	; (800d9ac <USBD_LL_Init+0x94>)
 800d994:	f7f6 fa4e 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d998:	2280      	movs	r2, #128	; 0x80
 800d99a:	2101      	movs	r1, #1
 800d99c:	4803      	ldr	r0, [pc, #12]	; (800d9ac <USBD_LL_Init+0x94>)
 800d99e:	f7f6 fa49 	bl	8003e34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	3708      	adds	r7, #8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bd80      	pop	{r7, pc}
 800d9ac:	2000d888 	.word	0x2000d888

0800d9b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b084      	sub	sp, #16
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7f5 f91b 	bl	8002c02 <HAL_PCD_Start>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d9d0:	7bfb      	ldrb	r3, [r7, #15]
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 f97e 	bl	800dcd4 <USBD_Get_USB_Status>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d9dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b084      	sub	sp, #16
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
 800d9ee:	4608      	mov	r0, r1
 800d9f0:	4611      	mov	r1, r2
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	70fb      	strb	r3, [r7, #3]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	70bb      	strb	r3, [r7, #2]
 800d9fc:	4613      	mov	r3, r2
 800d9fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da00:	2300      	movs	r3, #0
 800da02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da04:	2300      	movs	r3, #0
 800da06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800da0e:	78bb      	ldrb	r3, [r7, #2]
 800da10:	883a      	ldrh	r2, [r7, #0]
 800da12:	78f9      	ldrb	r1, [r7, #3]
 800da14:	f7f5 fe08 	bl	8003628 <HAL_PCD_EP_Open>
 800da18:	4603      	mov	r3, r0
 800da1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
 800da1e:	4618      	mov	r0, r3
 800da20:	f000 f958 	bl	800dcd4 <USBD_Get_USB_Status>
 800da24:	4603      	mov	r3, r0
 800da26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da28:	7bbb      	ldrb	r3, [r7, #14]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b084      	sub	sp, #16
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	460b      	mov	r3, r1
 800da3c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da42:	2300      	movs	r3, #0
 800da44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da4c:	78fa      	ldrb	r2, [r7, #3]
 800da4e:	4611      	mov	r1, r2
 800da50:	4618      	mov	r0, r3
 800da52:	f7f5 fe51 	bl	80036f8 <HAL_PCD_EP_Close>
 800da56:	4603      	mov	r3, r0
 800da58:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da5a:	7bfb      	ldrb	r3, [r7, #15]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f000 f939 	bl	800dcd4 <USBD_Get_USB_Status>
 800da62:	4603      	mov	r3, r0
 800da64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da66:	7bbb      	ldrb	r3, [r7, #14]
}
 800da68:	4618      	mov	r0, r3
 800da6a:	3710      	adds	r7, #16
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	460b      	mov	r3, r1
 800da7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800da8a:	78fa      	ldrb	r2, [r7, #3]
 800da8c:	4611      	mov	r1, r2
 800da8e:	4618      	mov	r0, r3
 800da90:	f7f5 ff29 	bl	80038e6 <HAL_PCD_EP_SetStall>
 800da94:	4603      	mov	r3, r0
 800da96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da98:	7bfb      	ldrb	r3, [r7, #15]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 f91a 	bl	800dcd4 <USBD_Get_USB_Status>
 800daa0:	4603      	mov	r3, r0
 800daa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800daa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3710      	adds	r7, #16
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b084      	sub	sp, #16
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800daba:	2300      	movs	r3, #0
 800dabc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dabe:	2300      	movs	r3, #0
 800dac0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dac8:	78fa      	ldrb	r2, [r7, #3]
 800daca:	4611      	mov	r1, r2
 800dacc:	4618      	mov	r0, r3
 800dace:	f7f5 ff6e 	bl	80039ae <HAL_PCD_EP_ClrStall>
 800dad2:	4603      	mov	r3, r0
 800dad4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dad6:	7bfb      	ldrb	r3, [r7, #15]
 800dad8:	4618      	mov	r0, r3
 800dada:	f000 f8fb 	bl	800dcd4 <USBD_Get_USB_Status>
 800dade:	4603      	mov	r3, r0
 800dae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dae2:	7bbb      	ldrb	r3, [r7, #14]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3710      	adds	r7, #16
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}

0800daec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daec:	b480      	push	{r7}
 800daee:	b085      	sub	sp, #20
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	460b      	mov	r3, r1
 800daf6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dafe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800db00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800db04:	2b00      	cmp	r3, #0
 800db06:	da0b      	bge.n	800db20 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800db08:	78fb      	ldrb	r3, [r7, #3]
 800db0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db0e:	68f9      	ldr	r1, [r7, #12]
 800db10:	4613      	mov	r3, r2
 800db12:	00db      	lsls	r3, r3, #3
 800db14:	4413      	add	r3, r2
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	440b      	add	r3, r1
 800db1a:	333e      	adds	r3, #62	; 0x3e
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	e00b      	b.n	800db38 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800db20:	78fb      	ldrb	r3, [r7, #3]
 800db22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db26:	68f9      	ldr	r1, [r7, #12]
 800db28:	4613      	mov	r3, r2
 800db2a:	00db      	lsls	r3, r3, #3
 800db2c:	4413      	add	r3, r2
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	440b      	add	r3, r1
 800db32:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800db36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3714      	adds	r7, #20
 800db3c:	46bd      	mov	sp, r7
 800db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db42:	4770      	bx	lr

0800db44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
 800db4c:	460b      	mov	r3, r1
 800db4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db50:	2300      	movs	r3, #0
 800db52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db54:	2300      	movs	r3, #0
 800db56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db5e:	78fa      	ldrb	r2, [r7, #3]
 800db60:	4611      	mov	r1, r2
 800db62:	4618      	mov	r0, r3
 800db64:	f7f5 fd3b 	bl	80035de <HAL_PCD_SetAddress>
 800db68:	4603      	mov	r3, r0
 800db6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db6c:	7bfb      	ldrb	r3, [r7, #15]
 800db6e:	4618      	mov	r0, r3
 800db70:	f000 f8b0 	bl	800dcd4 <USBD_Get_USB_Status>
 800db74:	4603      	mov	r3, r0
 800db76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db78:	7bbb      	ldrb	r3, [r7, #14]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}

0800db82 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b086      	sub	sp, #24
 800db86:	af00      	add	r7, sp, #0
 800db88:	60f8      	str	r0, [r7, #12]
 800db8a:	607a      	str	r2, [r7, #4]
 800db8c:	603b      	str	r3, [r7, #0]
 800db8e:	460b      	mov	r3, r1
 800db90:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dba0:	7af9      	ldrb	r1, [r7, #11]
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	f7f5 fe54 	bl	8003852 <HAL_PCD_EP_Transmit>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 f88f 	bl	800dcd4 <USBD_Get_USB_Status>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbba:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3718      	adds	r7, #24
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b086      	sub	sp, #24
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	60f8      	str	r0, [r7, #12]
 800dbcc:	607a      	str	r2, [r7, #4]
 800dbce:	603b      	str	r3, [r7, #0]
 800dbd0:	460b      	mov	r3, r1
 800dbd2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dbe2:	7af9      	ldrb	r1, [r7, #11]
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	f7f5 fdd0 	bl	800378c <HAL_PCD_EP_Receive>
 800dbec:	4603      	mov	r3, r0
 800dbee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbf0:	7dfb      	ldrb	r3, [r7, #23]
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 f86e 	bl	800dcd4 <USBD_Get_USB_Status>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dbfc:	7dbb      	ldrb	r3, [r7, #22]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3718      	adds	r7, #24
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b082      	sub	sp, #8
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	460b      	mov	r3, r1
 800dc10:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc18:	78fa      	ldrb	r2, [r7, #3]
 800dc1a:	4611      	mov	r1, r2
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f7f5 fe00 	bl	8003822 <HAL_PCD_EP_GetRxCount>
 800dc22:	4603      	mov	r3, r0
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3708      	adds	r7, #8
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800dc38:	78fb      	ldrb	r3, [r7, #3]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d002      	beq.n	800dc44 <HAL_PCDEx_LPM_Callback+0x18>
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d01f      	beq.n	800dc82 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800dc42:	e03b      	b.n	800dcbc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6a1b      	ldr	r3, [r3, #32]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d007      	beq.n	800dc5c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800dc4c:	f000 f83c 	bl	800dcc8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc50:	4b1c      	ldr	r3, [pc, #112]	; (800dcc4 <HAL_PCDEx_LPM_Callback+0x98>)
 800dc52:	691b      	ldr	r3, [r3, #16]
 800dc54:	4a1b      	ldr	r2, [pc, #108]	; (800dcc4 <HAL_PCDEx_LPM_Callback+0x98>)
 800dc56:	f023 0306 	bic.w	r3, r3, #6
 800dc5a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	6812      	ldr	r2, [r2, #0]
 800dc6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc6e:	f023 0301 	bic.w	r3, r3, #1
 800dc72:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fb fcc5 	bl	800960a <USBD_LL_Resume>
    break;
 800dc80:	e01c      	b.n	800dcbc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	6812      	ldr	r2, [r2, #0]
 800dc90:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc94:	f043 0301 	orr.w	r3, r3, #1
 800dc98:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dca0:	4618      	mov	r0, r3
 800dca2:	f7fb fc9c 	bl	80095de <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6a1b      	ldr	r3, [r3, #32]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d005      	beq.n	800dcba <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dcae:	4b05      	ldr	r3, [pc, #20]	; (800dcc4 <HAL_PCDEx_LPM_Callback+0x98>)
 800dcb0:	691b      	ldr	r3, [r3, #16]
 800dcb2:	4a04      	ldr	r2, [pc, #16]	; (800dcc4 <HAL_PCDEx_LPM_Callback+0x98>)
 800dcb4:	f043 0306 	orr.w	r3, r3, #6
 800dcb8:	6113      	str	r3, [r2, #16]
    break;
 800dcba:	bf00      	nop
}
 800dcbc:	bf00      	nop
 800dcbe:	3708      	adds	r7, #8
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	bd80      	pop	{r7, pc}
 800dcc4:	e000ed00 	.word	0xe000ed00

0800dcc8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800dccc:	f7f3 fa9e 	bl	800120c <SystemClock_Config>
}
 800dcd0:	bf00      	nop
 800dcd2:	bd80      	pop	{r7, pc}

0800dcd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	4603      	mov	r3, r0
 800dcdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcde:	2300      	movs	r3, #0
 800dce0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800dce2:	79fb      	ldrb	r3, [r7, #7]
 800dce4:	2b03      	cmp	r3, #3
 800dce6:	d817      	bhi.n	800dd18 <USBD_Get_USB_Status+0x44>
 800dce8:	a201      	add	r2, pc, #4	; (adr r2, 800dcf0 <USBD_Get_USB_Status+0x1c>)
 800dcea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcee:	bf00      	nop
 800dcf0:	0800dd01 	.word	0x0800dd01
 800dcf4:	0800dd07 	.word	0x0800dd07
 800dcf8:	0800dd0d 	.word	0x0800dd0d
 800dcfc:	0800dd13 	.word	0x0800dd13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dd00:	2300      	movs	r3, #0
 800dd02:	73fb      	strb	r3, [r7, #15]
    break;
 800dd04:	e00b      	b.n	800dd1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dd06:	2303      	movs	r3, #3
 800dd08:	73fb      	strb	r3, [r7, #15]
    break;
 800dd0a:	e008      	b.n	800dd1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dd0c:	2301      	movs	r3, #1
 800dd0e:	73fb      	strb	r3, [r7, #15]
    break;
 800dd10:	e005      	b.n	800dd1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dd12:	2303      	movs	r3, #3
 800dd14:	73fb      	strb	r3, [r7, #15]
    break;
 800dd16:	e002      	b.n	800dd1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800dd18:	2303      	movs	r3, #3
 800dd1a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd1c:	bf00      	nop
  }
  return usb_status;
 800dd1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd20:	4618      	mov	r0, r3
 800dd22:	3714      	adds	r7, #20
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 800dd2c:	4b04      	ldr	r3, [pc, #16]	; (800dd40 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 800dd2e:	681a      	ldr	r2, [r3, #0]
 800dd30:	b10a      	cbz	r2, 800dd36 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 800dd32:	4803      	ldr	r0, [pc, #12]	; (800dd40 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 800dd34:	4770      	bx	lr
 800dd36:	4a03      	ldr	r2, [pc, #12]	; (800dd44 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 800dd38:	4801      	ldr	r0, [pc, #4]	; (800dd40 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 800dd3a:	6812      	ldr	r2, [r2, #0]
 800dd3c:	601a      	str	r2, [r3, #0]
 800dd3e:	4770      	bx	lr
 800dd40:	2000011c 	.word	0x2000011c
 800dd44:	200003f0 	.word	0x200003f0

0800dd48 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 800dd48:	4b04      	ldr	r3, [pc, #16]	; (800dd5c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 800dd4a:	4805      	ldr	r0, [pc, #20]	; (800dd60 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	4905      	ldr	r1, [pc, #20]	; (800dd64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 800dd50:	4a05      	ldr	r2, [pc, #20]	; (800dd68 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 800dd52:	6003      	str	r3, [r0, #0]
 800dd54:	600b      	str	r3, [r1, #0]
 800dd56:	6013      	str	r3, [r2, #0]
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	200003f0 	.word	0x200003f0
 800dd60:	20000138 	.word	0x20000138
 800dd64:	20000144 	.word	0x20000144
 800dd68:	2000011c 	.word	0x2000011c

0800dd6c <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 800dd6c:	f005 be0c 	b.w	8013988 <custom_test_msgs__srv__AddThreeInts_Request__init>

0800dd70 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 800dd70:	f005 be0e 	b.w	8013990 <custom_test_msgs__srv__AddThreeInts_Request__fini>

0800dd74 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 800dd74:	f005 be0e 	b.w	8013994 <custom_test_msgs__srv__AddThreeInts_Response__init>

0800dd78 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 800dd78:	f005 be10 	b.w	801399c <custom_test_msgs__srv__AddThreeInts_Response__fini>

0800dd7c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 800dd7c:	4b04      	ldr	r3, [pc, #16]	; (800dd90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	b10a      	cbz	r2, 800dd86 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 800dd82:	4803      	ldr	r0, [pc, #12]	; (800dd90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 800dd84:	4770      	bx	lr
 800dd86:	4a03      	ldr	r2, [pc, #12]	; (800dd94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 800dd88:	4801      	ldr	r0, [pc, #4]	; (800dd90 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 800dd8a:	6812      	ldr	r2, [r2, #0]
 800dd8c:	601a      	str	r2, [r3, #0]
 800dd8e:	4770      	bx	lr
 800dd90:	20000204 	.word	0x20000204
 800dd94:	200003f4 	.word	0x200003f4

0800dd98 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 800dd98:	4b04      	ldr	r3, [pc, #16]	; (800ddac <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 800dd9a:	681a      	ldr	r2, [r3, #0]
 800dd9c:	b10a      	cbz	r2, 800dda2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 800dd9e:	4803      	ldr	r0, [pc, #12]	; (800ddac <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 800dda0:	4770      	bx	lr
 800dda2:	4a03      	ldr	r2, [pc, #12]	; (800ddb0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 800dda4:	4801      	ldr	r0, [pc, #4]	; (800ddac <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 800dda6:	6812      	ldr	r2, [r2, #0]
 800dda8:	601a      	str	r2, [r3, #0]
 800ddaa:	4770      	bx	lr
 800ddac:	2000024c 	.word	0x2000024c
 800ddb0:	200003f4 	.word	0x200003f4

0800ddb4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 800ddb4:	4b13      	ldr	r3, [pc, #76]	; (800de04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	b132      	cbz	r2, 800ddc8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 800ddba:	685b      	ldr	r3, [r3, #4]
 800ddbc:	689a      	ldr	r2, [r3, #8]
 800ddbe:	b152      	cbz	r2, 800ddd6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 800ddc0:	68da      	ldr	r2, [r3, #12]
 800ddc2:	b182      	cbz	r2, 800dde6 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 800ddc4:	480f      	ldr	r0, [pc, #60]	; (800de04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 800ddc6:	4770      	bx	lr
 800ddc8:	4a0f      	ldr	r2, [pc, #60]	; (800de08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 800ddca:	6812      	ldr	r2, [r2, #0]
 800ddcc:	601a      	str	r2, [r3, #0]
 800ddce:	685b      	ldr	r3, [r3, #4]
 800ddd0:	689a      	ldr	r2, [r3, #8]
 800ddd2:	2a00      	cmp	r2, #0
 800ddd4:	d1f4      	bne.n	800ddc0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 800ddd6:	4a0d      	ldr	r2, [pc, #52]	; (800de0c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 800ddd8:	6811      	ldr	r1, [r2, #0]
 800ddda:	b179      	cbz	r1, 800ddfc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 800dddc:	6852      	ldr	r2, [r2, #4]
 800ddde:	609a      	str	r2, [r3, #8]
 800dde0:	68da      	ldr	r2, [r3, #12]
 800dde2:	2a00      	cmp	r2, #0
 800dde4:	d1ee      	bne.n	800ddc4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 800dde6:	4a0a      	ldr	r2, [pc, #40]	; (800de10 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 800dde8:	6811      	ldr	r1, [r2, #0]
 800ddea:	b119      	cbz	r1, 800ddf4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 800ddec:	6852      	ldr	r2, [r2, #4]
 800ddee:	4805      	ldr	r0, [pc, #20]	; (800de04 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 800ddf0:	60da      	str	r2, [r3, #12]
 800ddf2:	4770      	bx	lr
 800ddf4:	4904      	ldr	r1, [pc, #16]	; (800de08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 800ddf6:	6809      	ldr	r1, [r1, #0]
 800ddf8:	6011      	str	r1, [r2, #0]
 800ddfa:	e7f7      	b.n	800ddec <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 800ddfc:	4902      	ldr	r1, [pc, #8]	; (800de08 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 800ddfe:	6809      	ldr	r1, [r1, #0]
 800de00:	6011      	str	r1, [r2, #0]
 800de02:	e7eb      	b.n	800dddc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 800de04:	20000268 	.word	0x20000268
 800de08:	200003f4 	.word	0x200003f4
 800de0c:	20000204 	.word	0x20000204
 800de10:	2000024c 	.word	0x2000024c

0800de14 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 800de14:	4800      	ldr	r0, [pc, #0]	; (800de18 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 800de16:	4770      	bx	lr
 800de18:	20000290 	.word	0x20000290

0800de1c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 800de1c:	4800      	ldr	r0, [pc, #0]	; (800de20 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 800de1e:	4770      	bx	lr
 800de20:	2000029c 	.word	0x2000029c

0800de24 <_AddThreeInts_Response__max_serialized_size>:
 800de24:	2108      	movs	r1, #8
 800de26:	2000      	movs	r0, #0
 800de28:	b508      	push	{r3, lr}
 800de2a:	f001 fc61 	bl	800f6f0 <ucdr_alignment>
 800de2e:	3008      	adds	r0, #8
 800de30:	bd08      	pop	{r3, pc}
 800de32:	bf00      	nop

0800de34 <_AddThreeInts_Response__cdr_deserialize>:
 800de34:	b109      	cbz	r1, 800de3a <_AddThreeInts_Response__cdr_deserialize+0x6>
 800de36:	f001 b9a7 	b.w	800f188 <ucdr_deserialize_int64_t>
 800de3a:	4608      	mov	r0, r1
 800de3c:	4770      	bx	lr
 800de3e:	bf00      	nop

0800de40 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 800de40:	b1b8      	cbz	r0, 800de72 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 800de42:	b538      	push	{r3, r4, r5, lr}
 800de44:	460d      	mov	r5, r1
 800de46:	2108      	movs	r1, #8
 800de48:	4628      	mov	r0, r5
 800de4a:	f001 fc51 	bl	800f6f0 <ucdr_alignment>
 800de4e:	f105 0308 	add.w	r3, r5, #8
 800de52:	2108      	movs	r1, #8
 800de54:	f1c5 0508 	rsb	r5, r5, #8
 800de58:	181c      	adds	r4, r3, r0
 800de5a:	4620      	mov	r0, r4
 800de5c:	f001 fc48 	bl	800f6f0 <ucdr_alignment>
 800de60:	2108      	movs	r1, #8
 800de62:	4408      	add	r0, r1
 800de64:	4404      	add	r4, r0
 800de66:	4620      	mov	r0, r4
 800de68:	f001 fc42 	bl	800f6f0 <ucdr_alignment>
 800de6c:	4428      	add	r0, r5
 800de6e:	4420      	add	r0, r4
 800de70:	bd38      	pop	{r3, r4, r5, pc}
 800de72:	4770      	bx	lr

0800de74 <_AddThreeInts_Response__get_serialized_size>:
 800de74:	b130      	cbz	r0, 800de84 <_AddThreeInts_Response__get_serialized_size+0x10>
 800de76:	2108      	movs	r1, #8
 800de78:	2000      	movs	r0, #0
 800de7a:	b508      	push	{r3, lr}
 800de7c:	f001 fc38 	bl	800f6f0 <ucdr_alignment>
 800de80:	3008      	adds	r0, #8
 800de82:	bd08      	pop	{r3, pc}
 800de84:	4770      	bx	lr
 800de86:	bf00      	nop

0800de88 <_AddThreeInts_Request__cdr_deserialize>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	460c      	mov	r4, r1
 800de8c:	b171      	cbz	r1, 800deac <_AddThreeInts_Request__cdr_deserialize+0x24>
 800de8e:	4605      	mov	r5, r0
 800de90:	f001 f97a 	bl	800f188 <ucdr_deserialize_int64_t>
 800de94:	f104 0108 	add.w	r1, r4, #8
 800de98:	4628      	mov	r0, r5
 800de9a:	f001 f975 	bl	800f188 <ucdr_deserialize_int64_t>
 800de9e:	f104 0110 	add.w	r1, r4, #16
 800dea2:	4628      	mov	r0, r5
 800dea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dea8:	f001 b96e 	b.w	800f188 <ucdr_deserialize_int64_t>
 800deac:	4608      	mov	r0, r1
 800deae:	bd38      	pop	{r3, r4, r5, pc}

0800deb0 <_AddThreeInts_Request__cdr_serialize>:
 800deb0:	b198      	cbz	r0, 800deda <_AddThreeInts_Request__cdr_serialize+0x2a>
 800deb2:	b570      	push	{r4, r5, r6, lr}
 800deb4:	460d      	mov	r5, r1
 800deb6:	4604      	mov	r4, r0
 800deb8:	e9d0 2300 	ldrd	r2, r3, [r0]
 800debc:	4608      	mov	r0, r1
 800debe:	f001 f893 	bl	800efe8 <ucdr_serialize_int64_t>
 800dec2:	4628      	mov	r0, r5
 800dec4:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800dec8:	f001 f88e 	bl	800efe8 <ucdr_serialize_int64_t>
 800decc:	4628      	mov	r0, r5
 800dece:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800ded2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ded6:	f001 b887 	b.w	800efe8 <ucdr_serialize_int64_t>
 800deda:	4770      	bx	lr

0800dedc <_AddThreeInts_Response__cdr_serialize>:
 800dedc:	b120      	cbz	r0, 800dee8 <_AddThreeInts_Response__cdr_serialize+0xc>
 800dede:	e9d0 2300 	ldrd	r2, r3, [r0]
 800dee2:	4608      	mov	r0, r1
 800dee4:	f001 b880 	b.w	800efe8 <ucdr_serialize_int64_t>
 800dee8:	4770      	bx	lr
 800deea:	bf00      	nop

0800deec <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 800deec:	b138      	cbz	r0, 800defe <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 800deee:	b508      	push	{r3, lr}
 800def0:	460b      	mov	r3, r1
 800def2:	2108      	movs	r1, #8
 800def4:	4618      	mov	r0, r3
 800def6:	f001 fbfb 	bl	800f6f0 <ucdr_alignment>
 800defa:	3008      	adds	r0, #8
 800defc:	bd08      	pop	{r3, pc}
 800defe:	4770      	bx	lr

0800df00 <_AddThreeInts_Request__get_serialized_size>:
 800df00:	b190      	cbz	r0, 800df28 <_AddThreeInts_Request__get_serialized_size+0x28>
 800df02:	2108      	movs	r1, #8
 800df04:	2000      	movs	r0, #0
 800df06:	b510      	push	{r4, lr}
 800df08:	f001 fbf2 	bl	800f6f0 <ucdr_alignment>
 800df0c:	2108      	movs	r1, #8
 800df0e:	1844      	adds	r4, r0, r1
 800df10:	4620      	mov	r0, r4
 800df12:	f001 fbed 	bl	800f6f0 <ucdr_alignment>
 800df16:	2108      	movs	r1, #8
 800df18:	4408      	add	r0, r1
 800df1a:	4404      	add	r4, r0
 800df1c:	4620      	mov	r0, r4
 800df1e:	f001 fbe7 	bl	800f6f0 <ucdr_alignment>
 800df22:	3008      	adds	r0, #8
 800df24:	4420      	add	r0, r4
 800df26:	bd10      	pop	{r4, pc}
 800df28:	4770      	bx	lr
 800df2a:	bf00      	nop

0800df2c <_AddThreeInts_Request__max_serialized_size>:
 800df2c:	b538      	push	{r3, r4, r5, lr}
 800df2e:	2108      	movs	r1, #8
 800df30:	2000      	movs	r0, #0
 800df32:	f001 fbdd 	bl	800f6f0 <ucdr_alignment>
 800df36:	2108      	movs	r1, #8
 800df38:	1845      	adds	r5, r0, r1
 800df3a:	4628      	mov	r0, r5
 800df3c:	f001 fbd8 	bl	800f6f0 <ucdr_alignment>
 800df40:	2108      	movs	r1, #8
 800df42:	1844      	adds	r4, r0, r1
 800df44:	442c      	add	r4, r5
 800df46:	4620      	mov	r0, r4
 800df48:	f001 fbd2 	bl	800f6f0 <ucdr_alignment>
 800df4c:	3008      	adds	r0, #8
 800df4e:	4420      	add	r0, r4
 800df50:	bd38      	pop	{r3, r4, r5, pc}
 800df52:	bf00      	nop

0800df54 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 800df54:	4800      	ldr	r0, [pc, #0]	; (800df58 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 800df56:	4770      	bx	lr
 800df58:	20000284 	.word	0x20000284

0800df5c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>:
 800df5c:	4b04      	ldr	r3, [pc, #16]	; (800df70 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	b10a      	cbz	r2, 800df66 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0xa>
 800df62:	4803      	ldr	r0, [pc, #12]	; (800df70 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800df64:	4770      	bx	lr
 800df66:	4a03      	ldr	r2, [pc, #12]	; (800df74 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x18>)
 800df68:	4801      	ldr	r0, [pc, #4]	; (800df70 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800df6a:	6812      	ldr	r2, [r2, #0]
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	4770      	bx	lr
 800df70:	200002e8 	.word	0x200002e8
 800df74:	200003f0 	.word	0x200003f0

0800df78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>:
 800df78:	4a02      	ldr	r2, [pc, #8]	; (800df84 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0xc>)
 800df7a:	4b03      	ldr	r3, [pc, #12]	; (800df88 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x10>)
 800df7c:	6812      	ldr	r2, [r2, #0]
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	200003f0 	.word	0x200003f0
 800df88:	200002e8 	.word	0x200002e8

0800df8c <drive_msgs__msg__DiffDrive__rosidl_typesupport_introspection_c__DiffDrive_init_function>:
 800df8c:	f005 bd08 	b.w	80139a0 <drive_msgs__msg__DiffDrive__init>

0800df90 <drive_msgs__msg__DiffDrive__rosidl_typesupport_introspection_c__DiffDrive_fini_function>:
 800df90:	f005 bd18 	b.w	80139c4 <drive_msgs__msg__DiffDrive__fini>

0800df94 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>:
 800df94:	4b04      	ldr	r3, [pc, #16]	; (800dfa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	b10a      	cbz	r2, 800df9e <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0xa>
 800df9a:	4803      	ldr	r0, [pc, #12]	; (800dfa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800df9c:	4770      	bx	lr
 800df9e:	4a03      	ldr	r2, [pc, #12]	; (800dfac <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x18>)
 800dfa0:	4801      	ldr	r0, [pc, #4]	; (800dfa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800dfa2:	6812      	ldr	r2, [r2, #0]
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	4770      	bx	lr
 800dfa8:	200003a8 	.word	0x200003a8
 800dfac:	200003f4 	.word	0x200003f4

0800dfb0 <_DiffDrive__cdr_serialize>:
 800dfb0:	b1e0      	cbz	r0, 800dfec <_DiffDrive__cdr_serialize+0x3c>
 800dfb2:	b570      	push	{r4, r5, r6, lr}
 800dfb4:	6806      	ldr	r6, [r0, #0]
 800dfb6:	4604      	mov	r4, r0
 800dfb8:	460d      	mov	r5, r1
 800dfba:	b1a6      	cbz	r6, 800dfe6 <_DiffDrive__cdr_serialize+0x36>
 800dfbc:	4630      	mov	r0, r6
 800dfbe:	f7f2 f949 	bl	8000254 <strlen>
 800dfc2:	1c42      	adds	r2, r0, #1
 800dfc4:	4631      	mov	r1, r6
 800dfc6:	6060      	str	r0, [r4, #4]
 800dfc8:	4628      	mov	r0, r5
 800dfca:	f001 fc01 	bl	800f7d0 <ucdr_serialize_sequence_char>
 800dfce:	4628      	mov	r0, r5
 800dfd0:	ed94 0b04 	vldr	d0, [r4, #16]
 800dfd4:	f001 f99e 	bl	800f314 <ucdr_serialize_double>
 800dfd8:	4628      	mov	r0, r5
 800dfda:	ed94 0b06 	vldr	d0, [r4, #24]
 800dfde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dfe2:	f001 b997 	b.w	800f314 <ucdr_serialize_double>
 800dfe6:	4632      	mov	r2, r6
 800dfe8:	4630      	mov	r0, r6
 800dfea:	e7eb      	b.n	800dfc4 <_DiffDrive__cdr_serialize+0x14>
 800dfec:	4770      	bx	lr
 800dfee:	bf00      	nop

0800dff0 <get_serialized_size_drive_msgs__msg__DiffDrive>:
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	4604      	mov	r4, r0
 800dff4:	b1b0      	cbz	r0, 800e024 <get_serialized_size_drive_msgs__msg__DiffDrive+0x34>
 800dff6:	460d      	mov	r5, r1
 800dff8:	2104      	movs	r1, #4
 800dffa:	4628      	mov	r0, r5
 800dffc:	f001 fb78 	bl	800f6f0 <ucdr_alignment>
 800e000:	6866      	ldr	r6, [r4, #4]
 800e002:	1d6b      	adds	r3, r5, #5
 800e004:	2108      	movs	r1, #8
 800e006:	f1c5 0508 	rsb	r5, r5, #8
 800e00a:	4433      	add	r3, r6
 800e00c:	181e      	adds	r6, r3, r0
 800e00e:	4630      	mov	r0, r6
 800e010:	f001 fb6e 	bl	800f6f0 <ucdr_alignment>
 800e014:	2108      	movs	r1, #8
 800e016:	1844      	adds	r4, r0, r1
 800e018:	4434      	add	r4, r6
 800e01a:	4620      	mov	r0, r4
 800e01c:	f001 fb68 	bl	800f6f0 <ucdr_alignment>
 800e020:	4428      	add	r0, r5
 800e022:	4420      	add	r0, r4
 800e024:	bd70      	pop	{r4, r5, r6, pc}
 800e026:	bf00      	nop

0800e028 <_DiffDrive__cdr_deserialize>:
 800e028:	b570      	push	{r4, r5, r6, lr}
 800e02a:	460c      	mov	r4, r1
 800e02c:	b082      	sub	sp, #8
 800e02e:	b1d9      	cbz	r1, 800e068 <_DiffDrive__cdr_deserialize+0x40>
 800e030:	688e      	ldr	r6, [r1, #8]
 800e032:	ab01      	add	r3, sp, #4
 800e034:	6809      	ldr	r1, [r1, #0]
 800e036:	4605      	mov	r5, r0
 800e038:	4632      	mov	r2, r6
 800e03a:	f001 fbdb 	bl	800f7f4 <ucdr_deserialize_sequence_char>
 800e03e:	9b01      	ldr	r3, [sp, #4]
 800e040:	b970      	cbnz	r0, 800e060 <_DiffDrive__cdr_deserialize+0x38>
 800e042:	429e      	cmp	r6, r3
 800e044:	d313      	bcc.n	800e06e <_DiffDrive__cdr_deserialize+0x46>
 800e046:	f104 0110 	add.w	r1, r4, #16
 800e04a:	4628      	mov	r0, r5
 800e04c:	f001 fa32 	bl	800f4b4 <ucdr_deserialize_double>
 800e050:	f104 0118 	add.w	r1, r4, #24
 800e054:	4628      	mov	r0, r5
 800e056:	b002      	add	sp, #8
 800e058:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e05c:	f001 ba2a 	b.w	800f4b4 <ucdr_deserialize_double>
 800e060:	b103      	cbz	r3, 800e064 <_DiffDrive__cdr_deserialize+0x3c>
 800e062:	3b01      	subs	r3, #1
 800e064:	6063      	str	r3, [r4, #4]
 800e066:	e7ee      	b.n	800e046 <_DiffDrive__cdr_deserialize+0x1e>
 800e068:	4608      	mov	r0, r1
 800e06a:	b002      	add	sp, #8
 800e06c:	bd70      	pop	{r4, r5, r6, pc}
 800e06e:	2101      	movs	r1, #1
 800e070:	75a8      	strb	r0, [r5, #22]
 800e072:	7569      	strb	r1, [r5, #21]
 800e074:	6060      	str	r0, [r4, #4]
 800e076:	4628      	mov	r0, r5
 800e078:	f001 fb52 	bl	800f720 <ucdr_align_to>
 800e07c:	9901      	ldr	r1, [sp, #4]
 800e07e:	4628      	mov	r0, r5
 800e080:	f001 fb86 	bl	800f790 <ucdr_advance_buffer>
 800e084:	e7df      	b.n	800e046 <_DiffDrive__cdr_deserialize+0x1e>
 800e086:	bf00      	nop

0800e088 <_DiffDrive__max_serialized_size>:
 800e088:	b510      	push	{r4, lr}
 800e08a:	2108      	movs	r1, #8
 800e08c:	2000      	movs	r0, #0
 800e08e:	f001 fb2f 	bl	800f6f0 <ucdr_alignment>
 800e092:	2108      	movs	r1, #8
 800e094:	1844      	adds	r4, r0, r1
 800e096:	4620      	mov	r0, r4
 800e098:	f001 fb2a 	bl	800f6f0 <ucdr_alignment>
 800e09c:	3008      	adds	r0, #8
 800e09e:	4420      	add	r0, r4
 800e0a0:	bd10      	pop	{r4, pc}
 800e0a2:	bf00      	nop

0800e0a4 <_DiffDrive__get_serialized_size>:
 800e0a4:	b510      	push	{r4, lr}
 800e0a6:	4604      	mov	r4, r0
 800e0a8:	b190      	cbz	r0, 800e0d0 <_DiffDrive__get_serialized_size+0x2c>
 800e0aa:	2104      	movs	r1, #4
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	f001 fb1f 	bl	800f6f0 <ucdr_alignment>
 800e0b2:	6863      	ldr	r3, [r4, #4]
 800e0b4:	2108      	movs	r1, #8
 800e0b6:	3305      	adds	r3, #5
 800e0b8:	181c      	adds	r4, r3, r0
 800e0ba:	4620      	mov	r0, r4
 800e0bc:	f001 fb18 	bl	800f6f0 <ucdr_alignment>
 800e0c0:	2108      	movs	r1, #8
 800e0c2:	4408      	add	r0, r1
 800e0c4:	4404      	add	r4, r0
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	f001 fb12 	bl	800f6f0 <ucdr_alignment>
 800e0cc:	3008      	adds	r0, #8
 800e0ce:	4420      	add	r0, r4
 800e0d0:	bd10      	pop	{r4, pc}
 800e0d2:	bf00      	nop

0800e0d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>:
 800e0d4:	4800      	ldr	r0, [pc, #0]	; (800e0d8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x4>)
 800e0d6:	4770      	bx	lr
 800e0d8:	200003b4 	.word	0x200003b4

0800e0dc <ucdr_serialize_bool>:
 800e0dc:	b538      	push	{r3, r4, r5, lr}
 800e0de:	460d      	mov	r5, r1
 800e0e0:	2101      	movs	r1, #1
 800e0e2:	4604      	mov	r4, r0
 800e0e4:	f001 fab8 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e0e8:	b148      	cbz	r0, 800e0fe <ucdr_serialize_bool+0x22>
 800e0ea:	68a3      	ldr	r3, [r4, #8]
 800e0ec:	2101      	movs	r1, #1
 800e0ee:	701d      	strb	r5, [r3, #0]
 800e0f0:	68a2      	ldr	r2, [r4, #8]
 800e0f2:	6923      	ldr	r3, [r4, #16]
 800e0f4:	440a      	add	r2, r1
 800e0f6:	7561      	strb	r1, [r4, #21]
 800e0f8:	440b      	add	r3, r1
 800e0fa:	60a2      	str	r2, [r4, #8]
 800e0fc:	6123      	str	r3, [r4, #16]
 800e0fe:	7da0      	ldrb	r0, [r4, #22]
 800e100:	f080 0001 	eor.w	r0, r0, #1
 800e104:	bd38      	pop	{r3, r4, r5, pc}
 800e106:	bf00      	nop

0800e108 <ucdr_deserialize_bool>:
 800e108:	b538      	push	{r3, r4, r5, lr}
 800e10a:	460d      	mov	r5, r1
 800e10c:	2101      	movs	r1, #1
 800e10e:	4604      	mov	r4, r0
 800e110:	f001 faa2 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e114:	b160      	cbz	r0, 800e130 <ucdr_deserialize_bool+0x28>
 800e116:	68a2      	ldr	r2, [r4, #8]
 800e118:	2101      	movs	r1, #1
 800e11a:	6923      	ldr	r3, [r4, #16]
 800e11c:	f812 0b01 	ldrb.w	r0, [r2], #1
 800e120:	440b      	add	r3, r1
 800e122:	3800      	subs	r0, #0
 800e124:	bf18      	it	ne
 800e126:	2001      	movne	r0, #1
 800e128:	7028      	strb	r0, [r5, #0]
 800e12a:	60a2      	str	r2, [r4, #8]
 800e12c:	6123      	str	r3, [r4, #16]
 800e12e:	7561      	strb	r1, [r4, #21]
 800e130:	7da0      	ldrb	r0, [r4, #22]
 800e132:	f080 0001 	eor.w	r0, r0, #1
 800e136:	bd38      	pop	{r3, r4, r5, pc}

0800e138 <ucdr_serialize_uint8_t>:
 800e138:	b538      	push	{r3, r4, r5, lr}
 800e13a:	460d      	mov	r5, r1
 800e13c:	2101      	movs	r1, #1
 800e13e:	4604      	mov	r4, r0
 800e140:	f001 fa8a 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e144:	b148      	cbz	r0, 800e15a <ucdr_serialize_uint8_t+0x22>
 800e146:	68a3      	ldr	r3, [r4, #8]
 800e148:	2101      	movs	r1, #1
 800e14a:	701d      	strb	r5, [r3, #0]
 800e14c:	68a2      	ldr	r2, [r4, #8]
 800e14e:	6923      	ldr	r3, [r4, #16]
 800e150:	440a      	add	r2, r1
 800e152:	7561      	strb	r1, [r4, #21]
 800e154:	440b      	add	r3, r1
 800e156:	60a2      	str	r2, [r4, #8]
 800e158:	6123      	str	r3, [r4, #16]
 800e15a:	7da0      	ldrb	r0, [r4, #22]
 800e15c:	f080 0001 	eor.w	r0, r0, #1
 800e160:	bd38      	pop	{r3, r4, r5, pc}
 800e162:	bf00      	nop

0800e164 <ucdr_deserialize_uint8_t>:
 800e164:	b538      	push	{r3, r4, r5, lr}
 800e166:	460d      	mov	r5, r1
 800e168:	2101      	movs	r1, #1
 800e16a:	4604      	mov	r4, r0
 800e16c:	f001 fa74 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e170:	b150      	cbz	r0, 800e188 <ucdr_deserialize_uint8_t+0x24>
 800e172:	68a3      	ldr	r3, [r4, #8]
 800e174:	2101      	movs	r1, #1
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	702b      	strb	r3, [r5, #0]
 800e17a:	68a2      	ldr	r2, [r4, #8]
 800e17c:	6923      	ldr	r3, [r4, #16]
 800e17e:	440a      	add	r2, r1
 800e180:	7561      	strb	r1, [r4, #21]
 800e182:	440b      	add	r3, r1
 800e184:	60a2      	str	r2, [r4, #8]
 800e186:	6123      	str	r3, [r4, #16]
 800e188:	7da0      	ldrb	r0, [r4, #22]
 800e18a:	f080 0001 	eor.w	r0, r0, #1
 800e18e:	bd38      	pop	{r3, r4, r5, pc}

0800e190 <ucdr_serialize_uint16_t>:
 800e190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e194:	460b      	mov	r3, r1
 800e196:	b082      	sub	sp, #8
 800e198:	4604      	mov	r4, r0
 800e19a:	2102      	movs	r1, #2
 800e19c:	f8ad 3006 	strh.w	r3, [sp, #6]
 800e1a0:	f001 faae 	bl	800f700 <ucdr_buffer_alignment>
 800e1a4:	4601      	mov	r1, r0
 800e1a6:	4620      	mov	r0, r4
 800e1a8:	7d67      	ldrb	r7, [r4, #21]
 800e1aa:	f001 faf1 	bl	800f790 <ucdr_advance_buffer>
 800e1ae:	2102      	movs	r1, #2
 800e1b0:	4620      	mov	r0, r4
 800e1b2:	f001 fa45 	bl	800f640 <ucdr_check_buffer_available_for>
 800e1b6:	bb78      	cbnz	r0, 800e218 <ucdr_serialize_uint16_t+0x88>
 800e1b8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e1bc:	42ab      	cmp	r3, r5
 800e1be:	d926      	bls.n	800e20e <ucdr_serialize_uint16_t+0x7e>
 800e1c0:	1b5e      	subs	r6, r3, r5
 800e1c2:	60a3      	str	r3, [r4, #8]
 800e1c4:	6923      	ldr	r3, [r4, #16]
 800e1c6:	4620      	mov	r0, r4
 800e1c8:	f1c6 0802 	rsb	r8, r6, #2
 800e1cc:	4433      	add	r3, r6
 800e1ce:	4641      	mov	r1, r8
 800e1d0:	6123      	str	r3, [r4, #16]
 800e1d2:	f001 fa41 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e1d6:	2800      	cmp	r0, #0
 800e1d8:	d03b      	beq.n	800e252 <ucdr_serialize_uint16_t+0xc2>
 800e1da:	7d23      	ldrb	r3, [r4, #20]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d04a      	beq.n	800e276 <ucdr_serialize_uint16_t+0xe6>
 800e1e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1e4:	702b      	strb	r3, [r5, #0]
 800e1e6:	2e00      	cmp	r6, #0
 800e1e8:	d040      	beq.n	800e26c <ucdr_serialize_uint16_t+0xdc>
 800e1ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e1ee:	706b      	strb	r3, [r5, #1]
 800e1f0:	6923      	ldr	r3, [r4, #16]
 800e1f2:	2102      	movs	r1, #2
 800e1f4:	68a2      	ldr	r2, [r4, #8]
 800e1f6:	3302      	adds	r3, #2
 800e1f8:	7da0      	ldrb	r0, [r4, #22]
 800e1fa:	4442      	add	r2, r8
 800e1fc:	7561      	strb	r1, [r4, #21]
 800e1fe:	1b9e      	subs	r6, r3, r6
 800e200:	f080 0001 	eor.w	r0, r0, #1
 800e204:	60a2      	str	r2, [r4, #8]
 800e206:	6126      	str	r6, [r4, #16]
 800e208:	b002      	add	sp, #8
 800e20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e20e:	2102      	movs	r1, #2
 800e210:	4620      	mov	r0, r4
 800e212:	f001 fa21 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e216:	b190      	cbz	r0, 800e23e <ucdr_serialize_uint16_t+0xae>
 800e218:	7d23      	ldrb	r3, [r4, #20]
 800e21a:	2b01      	cmp	r3, #1
 800e21c:	68a3      	ldr	r3, [r4, #8]
 800e21e:	d014      	beq.n	800e24a <ucdr_serialize_uint16_t+0xba>
 800e220:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e224:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e228:	7019      	strb	r1, [r3, #0]
 800e22a:	68a3      	ldr	r3, [r4, #8]
 800e22c:	705a      	strb	r2, [r3, #1]
 800e22e:	2102      	movs	r1, #2
 800e230:	68a2      	ldr	r2, [r4, #8]
 800e232:	6923      	ldr	r3, [r4, #16]
 800e234:	440a      	add	r2, r1
 800e236:	7561      	strb	r1, [r4, #21]
 800e238:	440b      	add	r3, r1
 800e23a:	60a2      	str	r2, [r4, #8]
 800e23c:	6123      	str	r3, [r4, #16]
 800e23e:	7da0      	ldrb	r0, [r4, #22]
 800e240:	f080 0001 	eor.w	r0, r0, #1
 800e244:	b002      	add	sp, #8
 800e246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e24a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e24e:	801a      	strh	r2, [r3, #0]
 800e250:	e7ed      	b.n	800e22e <ucdr_serialize_uint16_t+0x9e>
 800e252:	68a2      	ldr	r2, [r4, #8]
 800e254:	6923      	ldr	r3, [r4, #16]
 800e256:	7da0      	ldrb	r0, [r4, #22]
 800e258:	1b92      	subs	r2, r2, r6
 800e25a:	1b9b      	subs	r3, r3, r6
 800e25c:	7567      	strb	r7, [r4, #21]
 800e25e:	f080 0001 	eor.w	r0, r0, #1
 800e262:	60a2      	str	r2, [r4, #8]
 800e264:	6123      	str	r3, [r4, #16]
 800e266:	b002      	add	sp, #8
 800e268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e26c:	68a3      	ldr	r3, [r4, #8]
 800e26e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e272:	701a      	strb	r2, [r3, #0]
 800e274:	e7bc      	b.n	800e1f0 <ucdr_serialize_uint16_t+0x60>
 800e276:	4628      	mov	r0, r5
 800e278:	f10d 0506 	add.w	r5, sp, #6
 800e27c:	4632      	mov	r2, r6
 800e27e:	4629      	mov	r1, r5
 800e280:	f00e f98d 	bl	801c59e <memcpy>
 800e284:	4642      	mov	r2, r8
 800e286:	19a9      	adds	r1, r5, r6
 800e288:	68a0      	ldr	r0, [r4, #8]
 800e28a:	f00e f988 	bl	801c59e <memcpy>
 800e28e:	e7af      	b.n	800e1f0 <ucdr_serialize_uint16_t+0x60>

0800e290 <ucdr_serialize_endian_uint16_t>:
 800e290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e294:	4604      	mov	r4, r0
 800e296:	b083      	sub	sp, #12
 800e298:	460d      	mov	r5, r1
 800e29a:	2102      	movs	r1, #2
 800e29c:	f8ad 2006 	strh.w	r2, [sp, #6]
 800e2a0:	f001 fa2e 	bl	800f700 <ucdr_buffer_alignment>
 800e2a4:	4601      	mov	r1, r0
 800e2a6:	4620      	mov	r0, r4
 800e2a8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e2ac:	f001 fa70 	bl	800f790 <ucdr_advance_buffer>
 800e2b0:	2102      	movs	r1, #2
 800e2b2:	4620      	mov	r0, r4
 800e2b4:	f001 f9c4 	bl	800f640 <ucdr_check_buffer_available_for>
 800e2b8:	bb70      	cbnz	r0, 800e318 <ucdr_serialize_endian_uint16_t+0x88>
 800e2ba:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e2be:	42be      	cmp	r6, r7
 800e2c0:	d925      	bls.n	800e30e <ucdr_serialize_endian_uint16_t+0x7e>
 800e2c2:	6923      	ldr	r3, [r4, #16]
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	60a6      	str	r6, [r4, #8]
 800e2c8:	1bf6      	subs	r6, r6, r7
 800e2ca:	4433      	add	r3, r6
 800e2cc:	f1c6 0902 	rsb	r9, r6, #2
 800e2d0:	6123      	str	r3, [r4, #16]
 800e2d2:	4649      	mov	r1, r9
 800e2d4:	f001 f9c0 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d039      	beq.n	800e350 <ucdr_serialize_endian_uint16_t+0xc0>
 800e2dc:	2d01      	cmp	r5, #1
 800e2de:	d04a      	beq.n	800e376 <ucdr_serialize_endian_uint16_t+0xe6>
 800e2e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e2e4:	703b      	strb	r3, [r7, #0]
 800e2e6:	2e00      	cmp	r6, #0
 800e2e8:	d040      	beq.n	800e36c <ucdr_serialize_endian_uint16_t+0xdc>
 800e2ea:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e2ee:	707b      	strb	r3, [r7, #1]
 800e2f0:	6923      	ldr	r3, [r4, #16]
 800e2f2:	2102      	movs	r1, #2
 800e2f4:	68a2      	ldr	r2, [r4, #8]
 800e2f6:	7da0      	ldrb	r0, [r4, #22]
 800e2f8:	3302      	adds	r3, #2
 800e2fa:	444a      	add	r2, r9
 800e2fc:	7561      	strb	r1, [r4, #21]
 800e2fe:	1b9b      	subs	r3, r3, r6
 800e300:	f080 0001 	eor.w	r0, r0, #1
 800e304:	60a2      	str	r2, [r4, #8]
 800e306:	6123      	str	r3, [r4, #16]
 800e308:	b003      	add	sp, #12
 800e30a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e30e:	2102      	movs	r1, #2
 800e310:	4620      	mov	r0, r4
 800e312:	f001 f9a1 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e316:	b188      	cbz	r0, 800e33c <ucdr_serialize_endian_uint16_t+0xac>
 800e318:	2d01      	cmp	r5, #1
 800e31a:	68a3      	ldr	r3, [r4, #8]
 800e31c:	d014      	beq.n	800e348 <ucdr_serialize_endian_uint16_t+0xb8>
 800e31e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e322:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e326:	7019      	strb	r1, [r3, #0]
 800e328:	68a3      	ldr	r3, [r4, #8]
 800e32a:	705a      	strb	r2, [r3, #1]
 800e32c:	2102      	movs	r1, #2
 800e32e:	68a2      	ldr	r2, [r4, #8]
 800e330:	6923      	ldr	r3, [r4, #16]
 800e332:	440a      	add	r2, r1
 800e334:	7561      	strb	r1, [r4, #21]
 800e336:	440b      	add	r3, r1
 800e338:	60a2      	str	r2, [r4, #8]
 800e33a:	6123      	str	r3, [r4, #16]
 800e33c:	7da0      	ldrb	r0, [r4, #22]
 800e33e:	f080 0001 	eor.w	r0, r0, #1
 800e342:	b003      	add	sp, #12
 800e344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e348:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e34c:	801a      	strh	r2, [r3, #0]
 800e34e:	e7ed      	b.n	800e32c <ucdr_serialize_endian_uint16_t+0x9c>
 800e350:	68a2      	ldr	r2, [r4, #8]
 800e352:	6923      	ldr	r3, [r4, #16]
 800e354:	7da0      	ldrb	r0, [r4, #22]
 800e356:	1b92      	subs	r2, r2, r6
 800e358:	1b9b      	subs	r3, r3, r6
 800e35a:	f884 8015 	strb.w	r8, [r4, #21]
 800e35e:	f080 0001 	eor.w	r0, r0, #1
 800e362:	60a2      	str	r2, [r4, #8]
 800e364:	6123      	str	r3, [r4, #16]
 800e366:	b003      	add	sp, #12
 800e368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e36c:	68a3      	ldr	r3, [r4, #8]
 800e36e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e372:	701a      	strb	r2, [r3, #0]
 800e374:	e7bc      	b.n	800e2f0 <ucdr_serialize_endian_uint16_t+0x60>
 800e376:	f10d 0506 	add.w	r5, sp, #6
 800e37a:	4632      	mov	r2, r6
 800e37c:	4638      	mov	r0, r7
 800e37e:	4629      	mov	r1, r5
 800e380:	f00e f90d 	bl	801c59e <memcpy>
 800e384:	464a      	mov	r2, r9
 800e386:	19a9      	adds	r1, r5, r6
 800e388:	68a0      	ldr	r0, [r4, #8]
 800e38a:	f00e f908 	bl	801c59e <memcpy>
 800e38e:	e7af      	b.n	800e2f0 <ucdr_serialize_endian_uint16_t+0x60>

0800e390 <ucdr_deserialize_uint16_t>:
 800e390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e394:	4604      	mov	r4, r0
 800e396:	460d      	mov	r5, r1
 800e398:	2102      	movs	r1, #2
 800e39a:	f001 f9b1 	bl	800f700 <ucdr_buffer_alignment>
 800e39e:	4601      	mov	r1, r0
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e3a6:	f001 f9f3 	bl	800f790 <ucdr_advance_buffer>
 800e3aa:	2102      	movs	r1, #2
 800e3ac:	4620      	mov	r0, r4
 800e3ae:	f001 f947 	bl	800f640 <ucdr_check_buffer_available_for>
 800e3b2:	bb60      	cbnz	r0, 800e40e <ucdr_deserialize_uint16_t+0x7e>
 800e3b4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e3b8:	42be      	cmp	r6, r7
 800e3ba:	d923      	bls.n	800e404 <ucdr_deserialize_uint16_t+0x74>
 800e3bc:	6923      	ldr	r3, [r4, #16]
 800e3be:	4620      	mov	r0, r4
 800e3c0:	60a6      	str	r6, [r4, #8]
 800e3c2:	1bf6      	subs	r6, r6, r7
 800e3c4:	4433      	add	r3, r6
 800e3c6:	f1c6 0902 	rsb	r9, r6, #2
 800e3ca:	6123      	str	r3, [r4, #16]
 800e3cc:	4649      	mov	r1, r9
 800e3ce:	f001 f943 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d034      	beq.n	800e440 <ucdr_deserialize_uint16_t+0xb0>
 800e3d6:	7d23      	ldrb	r3, [r4, #20]
 800e3d8:	2b01      	cmp	r3, #1
 800e3da:	d042      	beq.n	800e462 <ucdr_deserialize_uint16_t+0xd2>
 800e3dc:	787b      	ldrb	r3, [r7, #1]
 800e3de:	702b      	strb	r3, [r5, #0]
 800e3e0:	2e00      	cmp	r6, #0
 800e3e2:	d03a      	beq.n	800e45a <ucdr_deserialize_uint16_t+0xca>
 800e3e4:	783b      	ldrb	r3, [r7, #0]
 800e3e6:	706b      	strb	r3, [r5, #1]
 800e3e8:	6923      	ldr	r3, [r4, #16]
 800e3ea:	2102      	movs	r1, #2
 800e3ec:	68a2      	ldr	r2, [r4, #8]
 800e3ee:	3302      	adds	r3, #2
 800e3f0:	7da0      	ldrb	r0, [r4, #22]
 800e3f2:	444a      	add	r2, r9
 800e3f4:	7561      	strb	r1, [r4, #21]
 800e3f6:	1b9b      	subs	r3, r3, r6
 800e3f8:	f080 0001 	eor.w	r0, r0, #1
 800e3fc:	60a2      	str	r2, [r4, #8]
 800e3fe:	6123      	str	r3, [r4, #16]
 800e400:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e404:	2102      	movs	r1, #2
 800e406:	4620      	mov	r0, r4
 800e408:	f001 f926 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e40c:	b180      	cbz	r0, 800e430 <ucdr_deserialize_uint16_t+0xa0>
 800e40e:	7d23      	ldrb	r3, [r4, #20]
 800e410:	2b01      	cmp	r3, #1
 800e412:	68a3      	ldr	r3, [r4, #8]
 800e414:	d011      	beq.n	800e43a <ucdr_deserialize_uint16_t+0xaa>
 800e416:	785b      	ldrb	r3, [r3, #1]
 800e418:	702b      	strb	r3, [r5, #0]
 800e41a:	68a3      	ldr	r3, [r4, #8]
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	706b      	strb	r3, [r5, #1]
 800e420:	2102      	movs	r1, #2
 800e422:	68a2      	ldr	r2, [r4, #8]
 800e424:	6923      	ldr	r3, [r4, #16]
 800e426:	440a      	add	r2, r1
 800e428:	7561      	strb	r1, [r4, #21]
 800e42a:	440b      	add	r3, r1
 800e42c:	60a2      	str	r2, [r4, #8]
 800e42e:	6123      	str	r3, [r4, #16]
 800e430:	7da0      	ldrb	r0, [r4, #22]
 800e432:	f080 0001 	eor.w	r0, r0, #1
 800e436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e43a:	881b      	ldrh	r3, [r3, #0]
 800e43c:	802b      	strh	r3, [r5, #0]
 800e43e:	e7ef      	b.n	800e420 <ucdr_deserialize_uint16_t+0x90>
 800e440:	68a2      	ldr	r2, [r4, #8]
 800e442:	6923      	ldr	r3, [r4, #16]
 800e444:	1b92      	subs	r2, r2, r6
 800e446:	7da0      	ldrb	r0, [r4, #22]
 800e448:	1b9b      	subs	r3, r3, r6
 800e44a:	f884 8015 	strb.w	r8, [r4, #21]
 800e44e:	f080 0001 	eor.w	r0, r0, #1
 800e452:	60a2      	str	r2, [r4, #8]
 800e454:	6123      	str	r3, [r4, #16]
 800e456:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e45a:	68a3      	ldr	r3, [r4, #8]
 800e45c:	781b      	ldrb	r3, [r3, #0]
 800e45e:	706b      	strb	r3, [r5, #1]
 800e460:	e7c2      	b.n	800e3e8 <ucdr_deserialize_uint16_t+0x58>
 800e462:	4639      	mov	r1, r7
 800e464:	4632      	mov	r2, r6
 800e466:	4628      	mov	r0, r5
 800e468:	f00e f899 	bl	801c59e <memcpy>
 800e46c:	464a      	mov	r2, r9
 800e46e:	19a8      	adds	r0, r5, r6
 800e470:	68a1      	ldr	r1, [r4, #8]
 800e472:	f00e f894 	bl	801c59e <memcpy>
 800e476:	e7b7      	b.n	800e3e8 <ucdr_deserialize_uint16_t+0x58>

0800e478 <ucdr_deserialize_endian_uint16_t>:
 800e478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e47c:	4604      	mov	r4, r0
 800e47e:	460e      	mov	r6, r1
 800e480:	2102      	movs	r1, #2
 800e482:	4615      	mov	r5, r2
 800e484:	f001 f93c 	bl	800f700 <ucdr_buffer_alignment>
 800e488:	4601      	mov	r1, r0
 800e48a:	4620      	mov	r0, r4
 800e48c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e490:	f001 f97e 	bl	800f790 <ucdr_advance_buffer>
 800e494:	2102      	movs	r1, #2
 800e496:	4620      	mov	r0, r4
 800e498:	f001 f8d2 	bl	800f640 <ucdr_check_buffer_available_for>
 800e49c:	bb70      	cbnz	r0, 800e4fc <ucdr_deserialize_endian_uint16_t+0x84>
 800e49e:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800e4a2:	454f      	cmp	r7, r9
 800e4a4:	d925      	bls.n	800e4f2 <ucdr_deserialize_endian_uint16_t+0x7a>
 800e4a6:	6923      	ldr	r3, [r4, #16]
 800e4a8:	4620      	mov	r0, r4
 800e4aa:	60a7      	str	r7, [r4, #8]
 800e4ac:	eba7 0709 	sub.w	r7, r7, r9
 800e4b0:	443b      	add	r3, r7
 800e4b2:	f1c7 0a02 	rsb	sl, r7, #2
 800e4b6:	6123      	str	r3, [r4, #16]
 800e4b8:	4651      	mov	r1, sl
 800e4ba:	f001 f8cd 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d034      	beq.n	800e52c <ucdr_deserialize_endian_uint16_t+0xb4>
 800e4c2:	2e01      	cmp	r6, #1
 800e4c4:	d043      	beq.n	800e54e <ucdr_deserialize_endian_uint16_t+0xd6>
 800e4c6:	f899 3001 	ldrb.w	r3, [r9, #1]
 800e4ca:	702b      	strb	r3, [r5, #0]
 800e4cc:	2f00      	cmp	r7, #0
 800e4ce:	d03a      	beq.n	800e546 <ucdr_deserialize_endian_uint16_t+0xce>
 800e4d0:	f899 3000 	ldrb.w	r3, [r9]
 800e4d4:	706b      	strb	r3, [r5, #1]
 800e4d6:	6923      	ldr	r3, [r4, #16]
 800e4d8:	2102      	movs	r1, #2
 800e4da:	68a2      	ldr	r2, [r4, #8]
 800e4dc:	3302      	adds	r3, #2
 800e4de:	7da0      	ldrb	r0, [r4, #22]
 800e4e0:	4452      	add	r2, sl
 800e4e2:	7561      	strb	r1, [r4, #21]
 800e4e4:	1bdb      	subs	r3, r3, r7
 800e4e6:	f080 0001 	eor.w	r0, r0, #1
 800e4ea:	60a2      	str	r2, [r4, #8]
 800e4ec:	6123      	str	r3, [r4, #16]
 800e4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4f2:	2102      	movs	r1, #2
 800e4f4:	4620      	mov	r0, r4
 800e4f6:	f001 f8af 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e4fa:	b178      	cbz	r0, 800e51c <ucdr_deserialize_endian_uint16_t+0xa4>
 800e4fc:	2e01      	cmp	r6, #1
 800e4fe:	68a3      	ldr	r3, [r4, #8]
 800e500:	d011      	beq.n	800e526 <ucdr_deserialize_endian_uint16_t+0xae>
 800e502:	785b      	ldrb	r3, [r3, #1]
 800e504:	702b      	strb	r3, [r5, #0]
 800e506:	68a3      	ldr	r3, [r4, #8]
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	706b      	strb	r3, [r5, #1]
 800e50c:	2102      	movs	r1, #2
 800e50e:	68a2      	ldr	r2, [r4, #8]
 800e510:	6923      	ldr	r3, [r4, #16]
 800e512:	440a      	add	r2, r1
 800e514:	7561      	strb	r1, [r4, #21]
 800e516:	440b      	add	r3, r1
 800e518:	60a2      	str	r2, [r4, #8]
 800e51a:	6123      	str	r3, [r4, #16]
 800e51c:	7da0      	ldrb	r0, [r4, #22]
 800e51e:	f080 0001 	eor.w	r0, r0, #1
 800e522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e526:	881b      	ldrh	r3, [r3, #0]
 800e528:	802b      	strh	r3, [r5, #0]
 800e52a:	e7ef      	b.n	800e50c <ucdr_deserialize_endian_uint16_t+0x94>
 800e52c:	68a2      	ldr	r2, [r4, #8]
 800e52e:	6923      	ldr	r3, [r4, #16]
 800e530:	1bd2      	subs	r2, r2, r7
 800e532:	7da0      	ldrb	r0, [r4, #22]
 800e534:	1bdb      	subs	r3, r3, r7
 800e536:	f884 8015 	strb.w	r8, [r4, #21]
 800e53a:	f080 0001 	eor.w	r0, r0, #1
 800e53e:	60a2      	str	r2, [r4, #8]
 800e540:	6123      	str	r3, [r4, #16]
 800e542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	706b      	strb	r3, [r5, #1]
 800e54c:	e7c3      	b.n	800e4d6 <ucdr_deserialize_endian_uint16_t+0x5e>
 800e54e:	4649      	mov	r1, r9
 800e550:	463a      	mov	r2, r7
 800e552:	4628      	mov	r0, r5
 800e554:	f00e f823 	bl	801c59e <memcpy>
 800e558:	4652      	mov	r2, sl
 800e55a:	19e8      	adds	r0, r5, r7
 800e55c:	68a1      	ldr	r1, [r4, #8]
 800e55e:	f00e f81e 	bl	801c59e <memcpy>
 800e562:	e7b8      	b.n	800e4d6 <ucdr_deserialize_endian_uint16_t+0x5e>

0800e564 <ucdr_serialize_uint32_t>:
 800e564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e568:	b082      	sub	sp, #8
 800e56a:	4604      	mov	r4, r0
 800e56c:	9101      	str	r1, [sp, #4]
 800e56e:	2104      	movs	r1, #4
 800e570:	f001 f8c6 	bl	800f700 <ucdr_buffer_alignment>
 800e574:	4601      	mov	r1, r0
 800e576:	4620      	mov	r0, r4
 800e578:	7d67      	ldrb	r7, [r4, #21]
 800e57a:	f001 f909 	bl	800f790 <ucdr_advance_buffer>
 800e57e:	2104      	movs	r1, #4
 800e580:	4620      	mov	r0, r4
 800e582:	f001 f85d 	bl	800f640 <ucdr_check_buffer_available_for>
 800e586:	2800      	cmp	r0, #0
 800e588:	d139      	bne.n	800e5fe <ucdr_serialize_uint32_t+0x9a>
 800e58a:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e58e:	42ab      	cmp	r3, r5
 800e590:	d930      	bls.n	800e5f4 <ucdr_serialize_uint32_t+0x90>
 800e592:	1b5e      	subs	r6, r3, r5
 800e594:	60a3      	str	r3, [r4, #8]
 800e596:	6923      	ldr	r3, [r4, #16]
 800e598:	4620      	mov	r0, r4
 800e59a:	f1c6 0804 	rsb	r8, r6, #4
 800e59e:	4433      	add	r3, r6
 800e5a0:	4641      	mov	r1, r8
 800e5a2:	6123      	str	r3, [r4, #16]
 800e5a4:	f001 f858 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	d04c      	beq.n	800e646 <ucdr_serialize_uint32_t+0xe2>
 800e5ac:	7d23      	ldrb	r3, [r4, #20]
 800e5ae:	2b01      	cmp	r3, #1
 800e5b0:	d063      	beq.n	800e67a <ucdr_serialize_uint32_t+0x116>
 800e5b2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e5b6:	702b      	strb	r3, [r5, #0]
 800e5b8:	2e00      	cmp	r6, #0
 800e5ba:	d051      	beq.n	800e660 <ucdr_serialize_uint32_t+0xfc>
 800e5bc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e5c0:	2e01      	cmp	r6, #1
 800e5c2:	706b      	strb	r3, [r5, #1]
 800e5c4:	d050      	beq.n	800e668 <ucdr_serialize_uint32_t+0x104>
 800e5c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e5ca:	2e02      	cmp	r6, #2
 800e5cc:	70ab      	strb	r3, [r5, #2]
 800e5ce:	d04f      	beq.n	800e670 <ucdr_serialize_uint32_t+0x10c>
 800e5d0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e5d4:	70eb      	strb	r3, [r5, #3]
 800e5d6:	6923      	ldr	r3, [r4, #16]
 800e5d8:	2104      	movs	r1, #4
 800e5da:	68a2      	ldr	r2, [r4, #8]
 800e5dc:	3304      	adds	r3, #4
 800e5de:	7da0      	ldrb	r0, [r4, #22]
 800e5e0:	4442      	add	r2, r8
 800e5e2:	7561      	strb	r1, [r4, #21]
 800e5e4:	1b9e      	subs	r6, r3, r6
 800e5e6:	f080 0001 	eor.w	r0, r0, #1
 800e5ea:	60a2      	str	r2, [r4, #8]
 800e5ec:	6126      	str	r6, [r4, #16]
 800e5ee:	b002      	add	sp, #8
 800e5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e5f4:	2104      	movs	r1, #4
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f001 f82e 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e5fc:	b1d0      	cbz	r0, 800e634 <ucdr_serialize_uint32_t+0xd0>
 800e5fe:	7d23      	ldrb	r3, [r4, #20]
 800e600:	2b01      	cmp	r3, #1
 800e602:	68a3      	ldr	r3, [r4, #8]
 800e604:	d01c      	beq.n	800e640 <ucdr_serialize_uint32_t+0xdc>
 800e606:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e60a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e60e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e612:	7018      	strb	r0, [r3, #0]
 800e614:	68a3      	ldr	r3, [r4, #8]
 800e616:	705a      	strb	r2, [r3, #1]
 800e618:	68a3      	ldr	r3, [r4, #8]
 800e61a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e61e:	7099      	strb	r1, [r3, #2]
 800e620:	68a3      	ldr	r3, [r4, #8]
 800e622:	70da      	strb	r2, [r3, #3]
 800e624:	2104      	movs	r1, #4
 800e626:	68a2      	ldr	r2, [r4, #8]
 800e628:	6923      	ldr	r3, [r4, #16]
 800e62a:	440a      	add	r2, r1
 800e62c:	7561      	strb	r1, [r4, #21]
 800e62e:	440b      	add	r3, r1
 800e630:	60a2      	str	r2, [r4, #8]
 800e632:	6123      	str	r3, [r4, #16]
 800e634:	7da0      	ldrb	r0, [r4, #22]
 800e636:	f080 0001 	eor.w	r0, r0, #1
 800e63a:	b002      	add	sp, #8
 800e63c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e640:	9a01      	ldr	r2, [sp, #4]
 800e642:	601a      	str	r2, [r3, #0]
 800e644:	e7ee      	b.n	800e624 <ucdr_serialize_uint32_t+0xc0>
 800e646:	68a2      	ldr	r2, [r4, #8]
 800e648:	6923      	ldr	r3, [r4, #16]
 800e64a:	7da0      	ldrb	r0, [r4, #22]
 800e64c:	1b92      	subs	r2, r2, r6
 800e64e:	1b9b      	subs	r3, r3, r6
 800e650:	7567      	strb	r7, [r4, #21]
 800e652:	f080 0001 	eor.w	r0, r0, #1
 800e656:	60a2      	str	r2, [r4, #8]
 800e658:	6123      	str	r3, [r4, #16]
 800e65a:	b002      	add	sp, #8
 800e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e660:	68a3      	ldr	r3, [r4, #8]
 800e662:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e666:	701a      	strb	r2, [r3, #0]
 800e668:	68a3      	ldr	r3, [r4, #8]
 800e66a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e66e:	701a      	strb	r2, [r3, #0]
 800e670:	68a3      	ldr	r3, [r4, #8]
 800e672:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e676:	701a      	strb	r2, [r3, #0]
 800e678:	e7ad      	b.n	800e5d6 <ucdr_serialize_uint32_t+0x72>
 800e67a:	4628      	mov	r0, r5
 800e67c:	ad01      	add	r5, sp, #4
 800e67e:	4632      	mov	r2, r6
 800e680:	4629      	mov	r1, r5
 800e682:	f00d ff8c 	bl	801c59e <memcpy>
 800e686:	4642      	mov	r2, r8
 800e688:	19a9      	adds	r1, r5, r6
 800e68a:	68a0      	ldr	r0, [r4, #8]
 800e68c:	f00d ff87 	bl	801c59e <memcpy>
 800e690:	e7a1      	b.n	800e5d6 <ucdr_serialize_uint32_t+0x72>
 800e692:	bf00      	nop

0800e694 <ucdr_serialize_endian_uint32_t>:
 800e694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e698:	4604      	mov	r4, r0
 800e69a:	b083      	sub	sp, #12
 800e69c:	460d      	mov	r5, r1
 800e69e:	2104      	movs	r1, #4
 800e6a0:	9201      	str	r2, [sp, #4]
 800e6a2:	f001 f82d 	bl	800f700 <ucdr_buffer_alignment>
 800e6a6:	4601      	mov	r1, r0
 800e6a8:	4620      	mov	r0, r4
 800e6aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e6ae:	f001 f86f 	bl	800f790 <ucdr_advance_buffer>
 800e6b2:	2104      	movs	r1, #4
 800e6b4:	4620      	mov	r0, r4
 800e6b6:	f000 ffc3 	bl	800f640 <ucdr_check_buffer_available_for>
 800e6ba:	2800      	cmp	r0, #0
 800e6bc:	d138      	bne.n	800e730 <ucdr_serialize_endian_uint32_t+0x9c>
 800e6be:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e6c2:	42b7      	cmp	r7, r6
 800e6c4:	d92f      	bls.n	800e726 <ucdr_serialize_endian_uint32_t+0x92>
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	4620      	mov	r0, r4
 800e6ca:	60a7      	str	r7, [r4, #8]
 800e6cc:	1bbf      	subs	r7, r7, r6
 800e6ce:	443b      	add	r3, r7
 800e6d0:	f1c7 0904 	rsb	r9, r7, #4
 800e6d4:	6123      	str	r3, [r4, #16]
 800e6d6:	4649      	mov	r1, r9
 800e6d8:	f000 ffbe 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d04a      	beq.n	800e776 <ucdr_serialize_endian_uint32_t+0xe2>
 800e6e0:	2d01      	cmp	r5, #1
 800e6e2:	d063      	beq.n	800e7ac <ucdr_serialize_endian_uint32_t+0x118>
 800e6e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e6e8:	7033      	strb	r3, [r6, #0]
 800e6ea:	2f00      	cmp	r7, #0
 800e6ec:	d051      	beq.n	800e792 <ucdr_serialize_endian_uint32_t+0xfe>
 800e6ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e6f2:	2f01      	cmp	r7, #1
 800e6f4:	7073      	strb	r3, [r6, #1]
 800e6f6:	d050      	beq.n	800e79a <ucdr_serialize_endian_uint32_t+0x106>
 800e6f8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e6fc:	2f02      	cmp	r7, #2
 800e6fe:	70b3      	strb	r3, [r6, #2]
 800e700:	d04f      	beq.n	800e7a2 <ucdr_serialize_endian_uint32_t+0x10e>
 800e702:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e706:	70f3      	strb	r3, [r6, #3]
 800e708:	6923      	ldr	r3, [r4, #16]
 800e70a:	2104      	movs	r1, #4
 800e70c:	68a2      	ldr	r2, [r4, #8]
 800e70e:	7da0      	ldrb	r0, [r4, #22]
 800e710:	3304      	adds	r3, #4
 800e712:	444a      	add	r2, r9
 800e714:	7561      	strb	r1, [r4, #21]
 800e716:	1bdb      	subs	r3, r3, r7
 800e718:	f080 0001 	eor.w	r0, r0, #1
 800e71c:	60a2      	str	r2, [r4, #8]
 800e71e:	6123      	str	r3, [r4, #16]
 800e720:	b003      	add	sp, #12
 800e722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e726:	2104      	movs	r1, #4
 800e728:	4620      	mov	r0, r4
 800e72a:	f000 ff95 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e72e:	b1c8      	cbz	r0, 800e764 <ucdr_serialize_endian_uint32_t+0xd0>
 800e730:	2d01      	cmp	r5, #1
 800e732:	68a3      	ldr	r3, [r4, #8]
 800e734:	d01c      	beq.n	800e770 <ucdr_serialize_endian_uint32_t+0xdc>
 800e736:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e73a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e73e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e742:	7018      	strb	r0, [r3, #0]
 800e744:	68a3      	ldr	r3, [r4, #8]
 800e746:	705a      	strb	r2, [r3, #1]
 800e748:	68a3      	ldr	r3, [r4, #8]
 800e74a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e74e:	7099      	strb	r1, [r3, #2]
 800e750:	68a3      	ldr	r3, [r4, #8]
 800e752:	70da      	strb	r2, [r3, #3]
 800e754:	2104      	movs	r1, #4
 800e756:	68a2      	ldr	r2, [r4, #8]
 800e758:	6923      	ldr	r3, [r4, #16]
 800e75a:	440a      	add	r2, r1
 800e75c:	7561      	strb	r1, [r4, #21]
 800e75e:	440b      	add	r3, r1
 800e760:	60a2      	str	r2, [r4, #8]
 800e762:	6123      	str	r3, [r4, #16]
 800e764:	7da0      	ldrb	r0, [r4, #22]
 800e766:	f080 0001 	eor.w	r0, r0, #1
 800e76a:	b003      	add	sp, #12
 800e76c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e770:	9a01      	ldr	r2, [sp, #4]
 800e772:	601a      	str	r2, [r3, #0]
 800e774:	e7ee      	b.n	800e754 <ucdr_serialize_endian_uint32_t+0xc0>
 800e776:	68a2      	ldr	r2, [r4, #8]
 800e778:	6923      	ldr	r3, [r4, #16]
 800e77a:	7da0      	ldrb	r0, [r4, #22]
 800e77c:	1bd2      	subs	r2, r2, r7
 800e77e:	1bdb      	subs	r3, r3, r7
 800e780:	f884 8015 	strb.w	r8, [r4, #21]
 800e784:	f080 0001 	eor.w	r0, r0, #1
 800e788:	60a2      	str	r2, [r4, #8]
 800e78a:	6123      	str	r3, [r4, #16]
 800e78c:	b003      	add	sp, #12
 800e78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e792:	68a3      	ldr	r3, [r4, #8]
 800e794:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e798:	701a      	strb	r2, [r3, #0]
 800e79a:	68a3      	ldr	r3, [r4, #8]
 800e79c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e7a0:	701a      	strb	r2, [r3, #0]
 800e7a2:	68a3      	ldr	r3, [r4, #8]
 800e7a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e7a8:	701a      	strb	r2, [r3, #0]
 800e7aa:	e7ad      	b.n	800e708 <ucdr_serialize_endian_uint32_t+0x74>
 800e7ac:	ad01      	add	r5, sp, #4
 800e7ae:	463a      	mov	r2, r7
 800e7b0:	4630      	mov	r0, r6
 800e7b2:	4629      	mov	r1, r5
 800e7b4:	f00d fef3 	bl	801c59e <memcpy>
 800e7b8:	464a      	mov	r2, r9
 800e7ba:	19e9      	adds	r1, r5, r7
 800e7bc:	68a0      	ldr	r0, [r4, #8]
 800e7be:	f00d feee 	bl	801c59e <memcpy>
 800e7c2:	e7a1      	b.n	800e708 <ucdr_serialize_endian_uint32_t+0x74>

0800e7c4 <ucdr_deserialize_uint32_t>:
 800e7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7c8:	4604      	mov	r4, r0
 800e7ca:	460d      	mov	r5, r1
 800e7cc:	2104      	movs	r1, #4
 800e7ce:	f000 ff97 	bl	800f700 <ucdr_buffer_alignment>
 800e7d2:	4601      	mov	r1, r0
 800e7d4:	4620      	mov	r0, r4
 800e7d6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e7da:	f000 ffd9 	bl	800f790 <ucdr_advance_buffer>
 800e7de:	2104      	movs	r1, #4
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f000 ff2d 	bl	800f640 <ucdr_check_buffer_available_for>
 800e7e6:	2800      	cmp	r0, #0
 800e7e8:	d138      	bne.n	800e85c <ucdr_deserialize_uint32_t+0x98>
 800e7ea:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e7ee:	42b7      	cmp	r7, r6
 800e7f0:	d92f      	bls.n	800e852 <ucdr_deserialize_uint32_t+0x8e>
 800e7f2:	6923      	ldr	r3, [r4, #16]
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	60a7      	str	r7, [r4, #8]
 800e7f8:	1bbf      	subs	r7, r7, r6
 800e7fa:	443b      	add	r3, r7
 800e7fc:	f1c7 0904 	rsb	r9, r7, #4
 800e800:	6123      	str	r3, [r4, #16]
 800e802:	4649      	mov	r1, r9
 800e804:	f000 ff28 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e808:	2800      	cmp	r0, #0
 800e80a:	d046      	beq.n	800e89a <ucdr_deserialize_uint32_t+0xd6>
 800e80c:	7d23      	ldrb	r3, [r4, #20]
 800e80e:	2b01      	cmp	r3, #1
 800e810:	d05c      	beq.n	800e8cc <ucdr_deserialize_uint32_t+0x108>
 800e812:	78f3      	ldrb	r3, [r6, #3]
 800e814:	702b      	strb	r3, [r5, #0]
 800e816:	2f00      	cmp	r7, #0
 800e818:	d04c      	beq.n	800e8b4 <ucdr_deserialize_uint32_t+0xf0>
 800e81a:	78b3      	ldrb	r3, [r6, #2]
 800e81c:	2f01      	cmp	r7, #1
 800e81e:	706b      	strb	r3, [r5, #1]
 800e820:	f105 0302 	add.w	r3, r5, #2
 800e824:	d04a      	beq.n	800e8bc <ucdr_deserialize_uint32_t+0xf8>
 800e826:	7873      	ldrb	r3, [r6, #1]
 800e828:	2f02      	cmp	r7, #2
 800e82a:	70ab      	strb	r3, [r5, #2]
 800e82c:	f105 0303 	add.w	r3, r5, #3
 800e830:	d048      	beq.n	800e8c4 <ucdr_deserialize_uint32_t+0x100>
 800e832:	7833      	ldrb	r3, [r6, #0]
 800e834:	70eb      	strb	r3, [r5, #3]
 800e836:	6923      	ldr	r3, [r4, #16]
 800e838:	2104      	movs	r1, #4
 800e83a:	68a2      	ldr	r2, [r4, #8]
 800e83c:	3304      	adds	r3, #4
 800e83e:	7da0      	ldrb	r0, [r4, #22]
 800e840:	444a      	add	r2, r9
 800e842:	7561      	strb	r1, [r4, #21]
 800e844:	1bdb      	subs	r3, r3, r7
 800e846:	f080 0001 	eor.w	r0, r0, #1
 800e84a:	60a2      	str	r2, [r4, #8]
 800e84c:	6123      	str	r3, [r4, #16]
 800e84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e852:	2104      	movs	r1, #4
 800e854:	4620      	mov	r0, r4
 800e856:	f000 feff 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e85a:	b1b0      	cbz	r0, 800e88a <ucdr_deserialize_uint32_t+0xc6>
 800e85c:	7d23      	ldrb	r3, [r4, #20]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	68a3      	ldr	r3, [r4, #8]
 800e862:	d017      	beq.n	800e894 <ucdr_deserialize_uint32_t+0xd0>
 800e864:	78db      	ldrb	r3, [r3, #3]
 800e866:	702b      	strb	r3, [r5, #0]
 800e868:	68a3      	ldr	r3, [r4, #8]
 800e86a:	789b      	ldrb	r3, [r3, #2]
 800e86c:	706b      	strb	r3, [r5, #1]
 800e86e:	68a3      	ldr	r3, [r4, #8]
 800e870:	785b      	ldrb	r3, [r3, #1]
 800e872:	70ab      	strb	r3, [r5, #2]
 800e874:	68a3      	ldr	r3, [r4, #8]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	70eb      	strb	r3, [r5, #3]
 800e87a:	2104      	movs	r1, #4
 800e87c:	68a2      	ldr	r2, [r4, #8]
 800e87e:	6923      	ldr	r3, [r4, #16]
 800e880:	440a      	add	r2, r1
 800e882:	7561      	strb	r1, [r4, #21]
 800e884:	440b      	add	r3, r1
 800e886:	60a2      	str	r2, [r4, #8]
 800e888:	6123      	str	r3, [r4, #16]
 800e88a:	7da0      	ldrb	r0, [r4, #22]
 800e88c:	f080 0001 	eor.w	r0, r0, #1
 800e890:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	602b      	str	r3, [r5, #0]
 800e898:	e7ef      	b.n	800e87a <ucdr_deserialize_uint32_t+0xb6>
 800e89a:	68a2      	ldr	r2, [r4, #8]
 800e89c:	6923      	ldr	r3, [r4, #16]
 800e89e:	1bd2      	subs	r2, r2, r7
 800e8a0:	7da0      	ldrb	r0, [r4, #22]
 800e8a2:	1bdb      	subs	r3, r3, r7
 800e8a4:	f884 8015 	strb.w	r8, [r4, #21]
 800e8a8:	f080 0001 	eor.w	r0, r0, #1
 800e8ac:	60a2      	str	r2, [r4, #8]
 800e8ae:	6123      	str	r3, [r4, #16]
 800e8b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b4:	68a3      	ldr	r3, [r4, #8]
 800e8b6:	789b      	ldrb	r3, [r3, #2]
 800e8b8:	706b      	strb	r3, [r5, #1]
 800e8ba:	1cab      	adds	r3, r5, #2
 800e8bc:	68a2      	ldr	r2, [r4, #8]
 800e8be:	7852      	ldrb	r2, [r2, #1]
 800e8c0:	f803 2b01 	strb.w	r2, [r3], #1
 800e8c4:	68a2      	ldr	r2, [r4, #8]
 800e8c6:	7812      	ldrb	r2, [r2, #0]
 800e8c8:	701a      	strb	r2, [r3, #0]
 800e8ca:	e7b4      	b.n	800e836 <ucdr_deserialize_uint32_t+0x72>
 800e8cc:	4631      	mov	r1, r6
 800e8ce:	463a      	mov	r2, r7
 800e8d0:	4628      	mov	r0, r5
 800e8d2:	f00d fe64 	bl	801c59e <memcpy>
 800e8d6:	464a      	mov	r2, r9
 800e8d8:	19e8      	adds	r0, r5, r7
 800e8da:	68a1      	ldr	r1, [r4, #8]
 800e8dc:	f00d fe5f 	bl	801c59e <memcpy>
 800e8e0:	e7a9      	b.n	800e836 <ucdr_deserialize_uint32_t+0x72>
 800e8e2:	bf00      	nop

0800e8e4 <ucdr_deserialize_endian_uint32_t>:
 800e8e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e8:	4604      	mov	r4, r0
 800e8ea:	460e      	mov	r6, r1
 800e8ec:	2104      	movs	r1, #4
 800e8ee:	4615      	mov	r5, r2
 800e8f0:	f000 ff06 	bl	800f700 <ucdr_buffer_alignment>
 800e8f4:	4601      	mov	r1, r0
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e8fc:	f000 ff48 	bl	800f790 <ucdr_advance_buffer>
 800e900:	2104      	movs	r1, #4
 800e902:	4620      	mov	r0, r4
 800e904:	f000 fe9c 	bl	800f640 <ucdr_check_buffer_available_for>
 800e908:	2800      	cmp	r0, #0
 800e90a:	d13c      	bne.n	800e986 <ucdr_deserialize_endian_uint32_t+0xa2>
 800e90c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800e910:	42bb      	cmp	r3, r7
 800e912:	d933      	bls.n	800e97c <ucdr_deserialize_endian_uint32_t+0x98>
 800e914:	eba3 0907 	sub.w	r9, r3, r7
 800e918:	60a3      	str	r3, [r4, #8]
 800e91a:	6923      	ldr	r3, [r4, #16]
 800e91c:	4620      	mov	r0, r4
 800e91e:	f1c9 0a04 	rsb	sl, r9, #4
 800e922:	444b      	add	r3, r9
 800e924:	4651      	mov	r1, sl
 800e926:	6123      	str	r3, [r4, #16]
 800e928:	f000 fe96 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e92c:	2800      	cmp	r0, #0
 800e92e:	d048      	beq.n	800e9c2 <ucdr_deserialize_endian_uint32_t+0xde>
 800e930:	2e01      	cmp	r6, #1
 800e932:	d061      	beq.n	800e9f8 <ucdr_deserialize_endian_uint32_t+0x114>
 800e934:	78fb      	ldrb	r3, [r7, #3]
 800e936:	702b      	strb	r3, [r5, #0]
 800e938:	f1b9 0f00 	cmp.w	r9, #0
 800e93c:	d050      	beq.n	800e9e0 <ucdr_deserialize_endian_uint32_t+0xfc>
 800e93e:	78bb      	ldrb	r3, [r7, #2]
 800e940:	f1b9 0f01 	cmp.w	r9, #1
 800e944:	706b      	strb	r3, [r5, #1]
 800e946:	f105 0302 	add.w	r3, r5, #2
 800e94a:	d04d      	beq.n	800e9e8 <ucdr_deserialize_endian_uint32_t+0x104>
 800e94c:	787b      	ldrb	r3, [r7, #1]
 800e94e:	f1b9 0f02 	cmp.w	r9, #2
 800e952:	70ab      	strb	r3, [r5, #2]
 800e954:	f105 0303 	add.w	r3, r5, #3
 800e958:	d04a      	beq.n	800e9f0 <ucdr_deserialize_endian_uint32_t+0x10c>
 800e95a:	783b      	ldrb	r3, [r7, #0]
 800e95c:	70eb      	strb	r3, [r5, #3]
 800e95e:	6923      	ldr	r3, [r4, #16]
 800e960:	2104      	movs	r1, #4
 800e962:	68a2      	ldr	r2, [r4, #8]
 800e964:	3304      	adds	r3, #4
 800e966:	7da0      	ldrb	r0, [r4, #22]
 800e968:	4452      	add	r2, sl
 800e96a:	7561      	strb	r1, [r4, #21]
 800e96c:	eba3 0309 	sub.w	r3, r3, r9
 800e970:	f080 0001 	eor.w	r0, r0, #1
 800e974:	60a2      	str	r2, [r4, #8]
 800e976:	6123      	str	r3, [r4, #16]
 800e978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e97c:	2104      	movs	r1, #4
 800e97e:	4620      	mov	r0, r4
 800e980:	f000 fe6a 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800e984:	b1a8      	cbz	r0, 800e9b2 <ucdr_deserialize_endian_uint32_t+0xce>
 800e986:	2e01      	cmp	r6, #1
 800e988:	68a3      	ldr	r3, [r4, #8]
 800e98a:	d017      	beq.n	800e9bc <ucdr_deserialize_endian_uint32_t+0xd8>
 800e98c:	78db      	ldrb	r3, [r3, #3]
 800e98e:	702b      	strb	r3, [r5, #0]
 800e990:	68a3      	ldr	r3, [r4, #8]
 800e992:	789b      	ldrb	r3, [r3, #2]
 800e994:	706b      	strb	r3, [r5, #1]
 800e996:	68a3      	ldr	r3, [r4, #8]
 800e998:	785b      	ldrb	r3, [r3, #1]
 800e99a:	70ab      	strb	r3, [r5, #2]
 800e99c:	68a3      	ldr	r3, [r4, #8]
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	70eb      	strb	r3, [r5, #3]
 800e9a2:	2104      	movs	r1, #4
 800e9a4:	68a2      	ldr	r2, [r4, #8]
 800e9a6:	6923      	ldr	r3, [r4, #16]
 800e9a8:	440a      	add	r2, r1
 800e9aa:	7561      	strb	r1, [r4, #21]
 800e9ac:	440b      	add	r3, r1
 800e9ae:	60a2      	str	r2, [r4, #8]
 800e9b0:	6123      	str	r3, [r4, #16]
 800e9b2:	7da0      	ldrb	r0, [r4, #22]
 800e9b4:	f080 0001 	eor.w	r0, r0, #1
 800e9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	602b      	str	r3, [r5, #0]
 800e9c0:	e7ef      	b.n	800e9a2 <ucdr_deserialize_endian_uint32_t+0xbe>
 800e9c2:	68a2      	ldr	r2, [r4, #8]
 800e9c4:	6923      	ldr	r3, [r4, #16]
 800e9c6:	eba2 0209 	sub.w	r2, r2, r9
 800e9ca:	7da0      	ldrb	r0, [r4, #22]
 800e9cc:	eba3 0309 	sub.w	r3, r3, r9
 800e9d0:	f884 8015 	strb.w	r8, [r4, #21]
 800e9d4:	f080 0001 	eor.w	r0, r0, #1
 800e9d8:	60a2      	str	r2, [r4, #8]
 800e9da:	6123      	str	r3, [r4, #16]
 800e9dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e0:	68a3      	ldr	r3, [r4, #8]
 800e9e2:	789b      	ldrb	r3, [r3, #2]
 800e9e4:	706b      	strb	r3, [r5, #1]
 800e9e6:	1cab      	adds	r3, r5, #2
 800e9e8:	68a2      	ldr	r2, [r4, #8]
 800e9ea:	7852      	ldrb	r2, [r2, #1]
 800e9ec:	f803 2b01 	strb.w	r2, [r3], #1
 800e9f0:	68a2      	ldr	r2, [r4, #8]
 800e9f2:	7812      	ldrb	r2, [r2, #0]
 800e9f4:	701a      	strb	r2, [r3, #0]
 800e9f6:	e7b2      	b.n	800e95e <ucdr_deserialize_endian_uint32_t+0x7a>
 800e9f8:	4639      	mov	r1, r7
 800e9fa:	464a      	mov	r2, r9
 800e9fc:	4628      	mov	r0, r5
 800e9fe:	f00d fdce 	bl	801c59e <memcpy>
 800ea02:	4652      	mov	r2, sl
 800ea04:	eb05 0009 	add.w	r0, r5, r9
 800ea08:	68a1      	ldr	r1, [r4, #8]
 800ea0a:	f00d fdc8 	bl	801c59e <memcpy>
 800ea0e:	e7a6      	b.n	800e95e <ucdr_deserialize_endian_uint32_t+0x7a>

0800ea10 <ucdr_serialize_uint64_t>:
 800ea10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea14:	4604      	mov	r4, r0
 800ea16:	b082      	sub	sp, #8
 800ea18:	2108      	movs	r1, #8
 800ea1a:	e9cd 2300 	strd	r2, r3, [sp]
 800ea1e:	f000 fe6f 	bl	800f700 <ucdr_buffer_alignment>
 800ea22:	4601      	mov	r1, r0
 800ea24:	4620      	mov	r0, r4
 800ea26:	7d67      	ldrb	r7, [r4, #21]
 800ea28:	f000 feb2 	bl	800f790 <ucdr_advance_buffer>
 800ea2c:	2108      	movs	r1, #8
 800ea2e:	4620      	mov	r0, r4
 800ea30:	f000 fe06 	bl	800f640 <ucdr_check_buffer_available_for>
 800ea34:	2800      	cmp	r0, #0
 800ea36:	d14e      	bne.n	800ead6 <ucdr_serialize_uint64_t+0xc6>
 800ea38:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ea3c:	42ab      	cmp	r3, r5
 800ea3e:	d945      	bls.n	800eacc <ucdr_serialize_uint64_t+0xbc>
 800ea40:	1b5e      	subs	r6, r3, r5
 800ea42:	60a3      	str	r3, [r4, #8]
 800ea44:	6923      	ldr	r3, [r4, #16]
 800ea46:	4620      	mov	r0, r4
 800ea48:	f1c6 0808 	rsb	r8, r6, #8
 800ea4c:	4433      	add	r3, r6
 800ea4e:	4641      	mov	r1, r8
 800ea50:	6123      	str	r3, [r4, #16]
 800ea52:	f000 fe01 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d074      	beq.n	800eb44 <ucdr_serialize_uint64_t+0x134>
 800ea5a:	7d23      	ldrb	r3, [r4, #20]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	f000 809b 	beq.w	800eb98 <ucdr_serialize_uint64_t+0x188>
 800ea62:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ea66:	702b      	strb	r3, [r5, #0]
 800ea68:	2e00      	cmp	r6, #0
 800ea6a:	d078      	beq.n	800eb5e <ucdr_serialize_uint64_t+0x14e>
 800ea6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ea70:	2e01      	cmp	r6, #1
 800ea72:	706b      	strb	r3, [r5, #1]
 800ea74:	d077      	beq.n	800eb66 <ucdr_serialize_uint64_t+0x156>
 800ea76:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ea7a:	2e02      	cmp	r6, #2
 800ea7c:	70ab      	strb	r3, [r5, #2]
 800ea7e:	d076      	beq.n	800eb6e <ucdr_serialize_uint64_t+0x15e>
 800ea80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ea84:	2e03      	cmp	r6, #3
 800ea86:	70eb      	strb	r3, [r5, #3]
 800ea88:	d075      	beq.n	800eb76 <ucdr_serialize_uint64_t+0x166>
 800ea8a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800ea8e:	2e04      	cmp	r6, #4
 800ea90:	712b      	strb	r3, [r5, #4]
 800ea92:	d074      	beq.n	800eb7e <ucdr_serialize_uint64_t+0x16e>
 800ea94:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800ea98:	2e05      	cmp	r6, #5
 800ea9a:	716b      	strb	r3, [r5, #5]
 800ea9c:	d073      	beq.n	800eb86 <ucdr_serialize_uint64_t+0x176>
 800ea9e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800eaa2:	2e06      	cmp	r6, #6
 800eaa4:	71ab      	strb	r3, [r5, #6]
 800eaa6:	d072      	beq.n	800eb8e <ucdr_serialize_uint64_t+0x17e>
 800eaa8:	f89d 3000 	ldrb.w	r3, [sp]
 800eaac:	71eb      	strb	r3, [r5, #7]
 800eaae:	6923      	ldr	r3, [r4, #16]
 800eab0:	2108      	movs	r1, #8
 800eab2:	68a2      	ldr	r2, [r4, #8]
 800eab4:	3308      	adds	r3, #8
 800eab6:	7da0      	ldrb	r0, [r4, #22]
 800eab8:	4442      	add	r2, r8
 800eaba:	7561      	strb	r1, [r4, #21]
 800eabc:	1b9e      	subs	r6, r3, r6
 800eabe:	f080 0001 	eor.w	r0, r0, #1
 800eac2:	60a2      	str	r2, [r4, #8]
 800eac4:	6126      	str	r6, [r4, #16]
 800eac6:	b002      	add	sp, #8
 800eac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eacc:	2108      	movs	r1, #8
 800eace:	4620      	mov	r0, r4
 800ead0:	f000 fdc2 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800ead4:	b350      	cbz	r0, 800eb2c <ucdr_serialize_uint64_t+0x11c>
 800ead6:	7d23      	ldrb	r3, [r4, #20]
 800ead8:	2b01      	cmp	r3, #1
 800eada:	d02d      	beq.n	800eb38 <ucdr_serialize_uint64_t+0x128>
 800eadc:	68a3      	ldr	r3, [r4, #8]
 800eade:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800eae2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eae6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800eaea:	7018      	strb	r0, [r3, #0]
 800eaec:	68a3      	ldr	r3, [r4, #8]
 800eaee:	705a      	strb	r2, [r3, #1]
 800eaf0:	68a3      	ldr	r3, [r4, #8]
 800eaf2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eaf6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800eafa:	7099      	strb	r1, [r3, #2]
 800eafc:	68a3      	ldr	r3, [r4, #8]
 800eafe:	70da      	strb	r2, [r3, #3]
 800eb00:	68a3      	ldr	r3, [r4, #8]
 800eb02:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800eb06:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800eb0a:	7118      	strb	r0, [r3, #4]
 800eb0c:	68a3      	ldr	r3, [r4, #8]
 800eb0e:	715a      	strb	r2, [r3, #5]
 800eb10:	68a3      	ldr	r3, [r4, #8]
 800eb12:	f89d 2000 	ldrb.w	r2, [sp]
 800eb16:	7199      	strb	r1, [r3, #6]
 800eb18:	68a3      	ldr	r3, [r4, #8]
 800eb1a:	71da      	strb	r2, [r3, #7]
 800eb1c:	2108      	movs	r1, #8
 800eb1e:	68a2      	ldr	r2, [r4, #8]
 800eb20:	6923      	ldr	r3, [r4, #16]
 800eb22:	440a      	add	r2, r1
 800eb24:	7561      	strb	r1, [r4, #21]
 800eb26:	440b      	add	r3, r1
 800eb28:	60a2      	str	r2, [r4, #8]
 800eb2a:	6123      	str	r3, [r4, #16]
 800eb2c:	7da0      	ldrb	r0, [r4, #22]
 800eb2e:	f080 0001 	eor.w	r0, r0, #1
 800eb32:	b002      	add	sp, #8
 800eb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb38:	466b      	mov	r3, sp
 800eb3a:	68a2      	ldr	r2, [r4, #8]
 800eb3c:	cb03      	ldmia	r3!, {r0, r1}
 800eb3e:	6010      	str	r0, [r2, #0]
 800eb40:	6051      	str	r1, [r2, #4]
 800eb42:	e7eb      	b.n	800eb1c <ucdr_serialize_uint64_t+0x10c>
 800eb44:	68a2      	ldr	r2, [r4, #8]
 800eb46:	6923      	ldr	r3, [r4, #16]
 800eb48:	7da0      	ldrb	r0, [r4, #22]
 800eb4a:	1b92      	subs	r2, r2, r6
 800eb4c:	1b9b      	subs	r3, r3, r6
 800eb4e:	7567      	strb	r7, [r4, #21]
 800eb50:	f080 0001 	eor.w	r0, r0, #1
 800eb54:	60a2      	str	r2, [r4, #8]
 800eb56:	6123      	str	r3, [r4, #16]
 800eb58:	b002      	add	sp, #8
 800eb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb5e:	68a3      	ldr	r3, [r4, #8]
 800eb60:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800eb64:	701a      	strb	r2, [r3, #0]
 800eb66:	68a3      	ldr	r3, [r4, #8]
 800eb68:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eb6c:	701a      	strb	r2, [r3, #0]
 800eb6e:	68a3      	ldr	r3, [r4, #8]
 800eb70:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eb74:	701a      	strb	r2, [r3, #0]
 800eb76:	68a3      	ldr	r3, [r4, #8]
 800eb78:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800eb7c:	701a      	strb	r2, [r3, #0]
 800eb7e:	68a3      	ldr	r3, [r4, #8]
 800eb80:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800eb84:	701a      	strb	r2, [r3, #0]
 800eb86:	68a3      	ldr	r3, [r4, #8]
 800eb88:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800eb8c:	701a      	strb	r2, [r3, #0]
 800eb8e:	68a3      	ldr	r3, [r4, #8]
 800eb90:	f89d 2000 	ldrb.w	r2, [sp]
 800eb94:	701a      	strb	r2, [r3, #0]
 800eb96:	e78a      	b.n	800eaae <ucdr_serialize_uint64_t+0x9e>
 800eb98:	4628      	mov	r0, r5
 800eb9a:	466d      	mov	r5, sp
 800eb9c:	4632      	mov	r2, r6
 800eb9e:	4629      	mov	r1, r5
 800eba0:	f00d fcfd 	bl	801c59e <memcpy>
 800eba4:	4642      	mov	r2, r8
 800eba6:	19a9      	adds	r1, r5, r6
 800eba8:	68a0      	ldr	r0, [r4, #8]
 800ebaa:	f00d fcf8 	bl	801c59e <memcpy>
 800ebae:	e77e      	b.n	800eaae <ucdr_serialize_uint64_t+0x9e>

0800ebb0 <ucdr_serialize_int16_t>:
 800ebb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	4604      	mov	r4, r0
 800ebba:	2102      	movs	r1, #2
 800ebbc:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ebc0:	f000 fd9e 	bl	800f700 <ucdr_buffer_alignment>
 800ebc4:	4601      	mov	r1, r0
 800ebc6:	4620      	mov	r0, r4
 800ebc8:	7d67      	ldrb	r7, [r4, #21]
 800ebca:	f000 fde1 	bl	800f790 <ucdr_advance_buffer>
 800ebce:	2102      	movs	r1, #2
 800ebd0:	4620      	mov	r0, r4
 800ebd2:	f000 fd35 	bl	800f640 <ucdr_check_buffer_available_for>
 800ebd6:	bb78      	cbnz	r0, 800ec38 <ucdr_serialize_int16_t+0x88>
 800ebd8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ebdc:	42ab      	cmp	r3, r5
 800ebde:	d926      	bls.n	800ec2e <ucdr_serialize_int16_t+0x7e>
 800ebe0:	1b5e      	subs	r6, r3, r5
 800ebe2:	60a3      	str	r3, [r4, #8]
 800ebe4:	6923      	ldr	r3, [r4, #16]
 800ebe6:	4620      	mov	r0, r4
 800ebe8:	f1c6 0802 	rsb	r8, r6, #2
 800ebec:	4433      	add	r3, r6
 800ebee:	4641      	mov	r1, r8
 800ebf0:	6123      	str	r3, [r4, #16]
 800ebf2:	f000 fd31 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d03b      	beq.n	800ec72 <ucdr_serialize_int16_t+0xc2>
 800ebfa:	7d23      	ldrb	r3, [r4, #20]
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d04a      	beq.n	800ec96 <ucdr_serialize_int16_t+0xe6>
 800ec00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800ec04:	702b      	strb	r3, [r5, #0]
 800ec06:	2e00      	cmp	r6, #0
 800ec08:	d040      	beq.n	800ec8c <ucdr_serialize_int16_t+0xdc>
 800ec0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800ec0e:	706b      	strb	r3, [r5, #1]
 800ec10:	6923      	ldr	r3, [r4, #16]
 800ec12:	2102      	movs	r1, #2
 800ec14:	68a2      	ldr	r2, [r4, #8]
 800ec16:	3302      	adds	r3, #2
 800ec18:	7da0      	ldrb	r0, [r4, #22]
 800ec1a:	4442      	add	r2, r8
 800ec1c:	7561      	strb	r1, [r4, #21]
 800ec1e:	1b9e      	subs	r6, r3, r6
 800ec20:	f080 0001 	eor.w	r0, r0, #1
 800ec24:	60a2      	str	r2, [r4, #8]
 800ec26:	6126      	str	r6, [r4, #16]
 800ec28:	b002      	add	sp, #8
 800ec2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec2e:	2102      	movs	r1, #2
 800ec30:	4620      	mov	r0, r4
 800ec32:	f000 fd11 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800ec36:	b190      	cbz	r0, 800ec5e <ucdr_serialize_int16_t+0xae>
 800ec38:	7d23      	ldrb	r3, [r4, #20]
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	68a3      	ldr	r3, [r4, #8]
 800ec3e:	d014      	beq.n	800ec6a <ucdr_serialize_int16_t+0xba>
 800ec40:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800ec44:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec48:	7019      	strb	r1, [r3, #0]
 800ec4a:	68a3      	ldr	r3, [r4, #8]
 800ec4c:	705a      	strb	r2, [r3, #1]
 800ec4e:	2102      	movs	r1, #2
 800ec50:	68a2      	ldr	r2, [r4, #8]
 800ec52:	6923      	ldr	r3, [r4, #16]
 800ec54:	440a      	add	r2, r1
 800ec56:	7561      	strb	r1, [r4, #21]
 800ec58:	440b      	add	r3, r1
 800ec5a:	60a2      	str	r2, [r4, #8]
 800ec5c:	6123      	str	r3, [r4, #16]
 800ec5e:	7da0      	ldrb	r0, [r4, #22]
 800ec60:	f080 0001 	eor.w	r0, r0, #1
 800ec64:	b002      	add	sp, #8
 800ec66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec6a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec6e:	801a      	strh	r2, [r3, #0]
 800ec70:	e7ed      	b.n	800ec4e <ucdr_serialize_int16_t+0x9e>
 800ec72:	68a2      	ldr	r2, [r4, #8]
 800ec74:	6923      	ldr	r3, [r4, #16]
 800ec76:	7da0      	ldrb	r0, [r4, #22]
 800ec78:	1b92      	subs	r2, r2, r6
 800ec7a:	1b9b      	subs	r3, r3, r6
 800ec7c:	7567      	strb	r7, [r4, #21]
 800ec7e:	f080 0001 	eor.w	r0, r0, #1
 800ec82:	60a2      	str	r2, [r4, #8]
 800ec84:	6123      	str	r3, [r4, #16]
 800ec86:	b002      	add	sp, #8
 800ec88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec8c:	68a3      	ldr	r3, [r4, #8]
 800ec8e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ec92:	701a      	strb	r2, [r3, #0]
 800ec94:	e7bc      	b.n	800ec10 <ucdr_serialize_int16_t+0x60>
 800ec96:	4628      	mov	r0, r5
 800ec98:	f10d 0506 	add.w	r5, sp, #6
 800ec9c:	4632      	mov	r2, r6
 800ec9e:	4629      	mov	r1, r5
 800eca0:	f00d fc7d 	bl	801c59e <memcpy>
 800eca4:	4642      	mov	r2, r8
 800eca6:	19a9      	adds	r1, r5, r6
 800eca8:	68a0      	ldr	r0, [r4, #8]
 800ecaa:	f00d fc78 	bl	801c59e <memcpy>
 800ecae:	e7af      	b.n	800ec10 <ucdr_serialize_int16_t+0x60>

0800ecb0 <ucdr_deserialize_int16_t>:
 800ecb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	460d      	mov	r5, r1
 800ecb8:	2102      	movs	r1, #2
 800ecba:	f000 fd21 	bl	800f700 <ucdr_buffer_alignment>
 800ecbe:	4601      	mov	r1, r0
 800ecc0:	4620      	mov	r0, r4
 800ecc2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ecc6:	f000 fd63 	bl	800f790 <ucdr_advance_buffer>
 800ecca:	2102      	movs	r1, #2
 800eccc:	4620      	mov	r0, r4
 800ecce:	f000 fcb7 	bl	800f640 <ucdr_check_buffer_available_for>
 800ecd2:	bb60      	cbnz	r0, 800ed2e <ucdr_deserialize_int16_t+0x7e>
 800ecd4:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ecd8:	42be      	cmp	r6, r7
 800ecda:	d923      	bls.n	800ed24 <ucdr_deserialize_int16_t+0x74>
 800ecdc:	6923      	ldr	r3, [r4, #16]
 800ecde:	4620      	mov	r0, r4
 800ece0:	60a6      	str	r6, [r4, #8]
 800ece2:	1bf6      	subs	r6, r6, r7
 800ece4:	4433      	add	r3, r6
 800ece6:	f1c6 0902 	rsb	r9, r6, #2
 800ecea:	6123      	str	r3, [r4, #16]
 800ecec:	4649      	mov	r1, r9
 800ecee:	f000 fcb3 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	d034      	beq.n	800ed60 <ucdr_deserialize_int16_t+0xb0>
 800ecf6:	7d23      	ldrb	r3, [r4, #20]
 800ecf8:	2b01      	cmp	r3, #1
 800ecfa:	d042      	beq.n	800ed82 <ucdr_deserialize_int16_t+0xd2>
 800ecfc:	787b      	ldrb	r3, [r7, #1]
 800ecfe:	702b      	strb	r3, [r5, #0]
 800ed00:	2e00      	cmp	r6, #0
 800ed02:	d03a      	beq.n	800ed7a <ucdr_deserialize_int16_t+0xca>
 800ed04:	783b      	ldrb	r3, [r7, #0]
 800ed06:	706b      	strb	r3, [r5, #1]
 800ed08:	6923      	ldr	r3, [r4, #16]
 800ed0a:	2102      	movs	r1, #2
 800ed0c:	68a2      	ldr	r2, [r4, #8]
 800ed0e:	3302      	adds	r3, #2
 800ed10:	7da0      	ldrb	r0, [r4, #22]
 800ed12:	444a      	add	r2, r9
 800ed14:	7561      	strb	r1, [r4, #21]
 800ed16:	1b9b      	subs	r3, r3, r6
 800ed18:	f080 0001 	eor.w	r0, r0, #1
 800ed1c:	60a2      	str	r2, [r4, #8]
 800ed1e:	6123      	str	r3, [r4, #16]
 800ed20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed24:	2102      	movs	r1, #2
 800ed26:	4620      	mov	r0, r4
 800ed28:	f000 fc96 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800ed2c:	b180      	cbz	r0, 800ed50 <ucdr_deserialize_int16_t+0xa0>
 800ed2e:	7d23      	ldrb	r3, [r4, #20]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	68a3      	ldr	r3, [r4, #8]
 800ed34:	d011      	beq.n	800ed5a <ucdr_deserialize_int16_t+0xaa>
 800ed36:	785b      	ldrb	r3, [r3, #1]
 800ed38:	702b      	strb	r3, [r5, #0]
 800ed3a:	68a3      	ldr	r3, [r4, #8]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	706b      	strb	r3, [r5, #1]
 800ed40:	2102      	movs	r1, #2
 800ed42:	68a2      	ldr	r2, [r4, #8]
 800ed44:	6923      	ldr	r3, [r4, #16]
 800ed46:	440a      	add	r2, r1
 800ed48:	7561      	strb	r1, [r4, #21]
 800ed4a:	440b      	add	r3, r1
 800ed4c:	60a2      	str	r2, [r4, #8]
 800ed4e:	6123      	str	r3, [r4, #16]
 800ed50:	7da0      	ldrb	r0, [r4, #22]
 800ed52:	f080 0001 	eor.w	r0, r0, #1
 800ed56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed5a:	881b      	ldrh	r3, [r3, #0]
 800ed5c:	802b      	strh	r3, [r5, #0]
 800ed5e:	e7ef      	b.n	800ed40 <ucdr_deserialize_int16_t+0x90>
 800ed60:	68a2      	ldr	r2, [r4, #8]
 800ed62:	6923      	ldr	r3, [r4, #16]
 800ed64:	1b92      	subs	r2, r2, r6
 800ed66:	7da0      	ldrb	r0, [r4, #22]
 800ed68:	1b9b      	subs	r3, r3, r6
 800ed6a:	f884 8015 	strb.w	r8, [r4, #21]
 800ed6e:	f080 0001 	eor.w	r0, r0, #1
 800ed72:	60a2      	str	r2, [r4, #8]
 800ed74:	6123      	str	r3, [r4, #16]
 800ed76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed7a:	68a3      	ldr	r3, [r4, #8]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	706b      	strb	r3, [r5, #1]
 800ed80:	e7c2      	b.n	800ed08 <ucdr_deserialize_int16_t+0x58>
 800ed82:	4639      	mov	r1, r7
 800ed84:	4632      	mov	r2, r6
 800ed86:	4628      	mov	r0, r5
 800ed88:	f00d fc09 	bl	801c59e <memcpy>
 800ed8c:	464a      	mov	r2, r9
 800ed8e:	19a8      	adds	r0, r5, r6
 800ed90:	68a1      	ldr	r1, [r4, #8]
 800ed92:	f00d fc04 	bl	801c59e <memcpy>
 800ed96:	e7b7      	b.n	800ed08 <ucdr_deserialize_int16_t+0x58>

0800ed98 <ucdr_serialize_int32_t>:
 800ed98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed9c:	b082      	sub	sp, #8
 800ed9e:	4604      	mov	r4, r0
 800eda0:	9101      	str	r1, [sp, #4]
 800eda2:	2104      	movs	r1, #4
 800eda4:	f000 fcac 	bl	800f700 <ucdr_buffer_alignment>
 800eda8:	4601      	mov	r1, r0
 800edaa:	4620      	mov	r0, r4
 800edac:	7d67      	ldrb	r7, [r4, #21]
 800edae:	f000 fcef 	bl	800f790 <ucdr_advance_buffer>
 800edb2:	2104      	movs	r1, #4
 800edb4:	4620      	mov	r0, r4
 800edb6:	f000 fc43 	bl	800f640 <ucdr_check_buffer_available_for>
 800edba:	2800      	cmp	r0, #0
 800edbc:	d139      	bne.n	800ee32 <ucdr_serialize_int32_t+0x9a>
 800edbe:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800edc2:	42ab      	cmp	r3, r5
 800edc4:	d930      	bls.n	800ee28 <ucdr_serialize_int32_t+0x90>
 800edc6:	1b5e      	subs	r6, r3, r5
 800edc8:	60a3      	str	r3, [r4, #8]
 800edca:	6923      	ldr	r3, [r4, #16]
 800edcc:	4620      	mov	r0, r4
 800edce:	f1c6 0804 	rsb	r8, r6, #4
 800edd2:	4433      	add	r3, r6
 800edd4:	4641      	mov	r1, r8
 800edd6:	6123      	str	r3, [r4, #16]
 800edd8:	f000 fc3e 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800eddc:	2800      	cmp	r0, #0
 800edde:	d04c      	beq.n	800ee7a <ucdr_serialize_int32_t+0xe2>
 800ede0:	7d23      	ldrb	r3, [r4, #20]
 800ede2:	2b01      	cmp	r3, #1
 800ede4:	d063      	beq.n	800eeae <ucdr_serialize_int32_t+0x116>
 800ede6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800edea:	702b      	strb	r3, [r5, #0]
 800edec:	2e00      	cmp	r6, #0
 800edee:	d051      	beq.n	800ee94 <ucdr_serialize_int32_t+0xfc>
 800edf0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800edf4:	2e01      	cmp	r6, #1
 800edf6:	706b      	strb	r3, [r5, #1]
 800edf8:	d050      	beq.n	800ee9c <ucdr_serialize_int32_t+0x104>
 800edfa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800edfe:	2e02      	cmp	r6, #2
 800ee00:	70ab      	strb	r3, [r5, #2]
 800ee02:	d04f      	beq.n	800eea4 <ucdr_serialize_int32_t+0x10c>
 800ee04:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee08:	70eb      	strb	r3, [r5, #3]
 800ee0a:	6923      	ldr	r3, [r4, #16]
 800ee0c:	2104      	movs	r1, #4
 800ee0e:	68a2      	ldr	r2, [r4, #8]
 800ee10:	3304      	adds	r3, #4
 800ee12:	7da0      	ldrb	r0, [r4, #22]
 800ee14:	4442      	add	r2, r8
 800ee16:	7561      	strb	r1, [r4, #21]
 800ee18:	1b9e      	subs	r6, r3, r6
 800ee1a:	f080 0001 	eor.w	r0, r0, #1
 800ee1e:	60a2      	str	r2, [r4, #8]
 800ee20:	6126      	str	r6, [r4, #16]
 800ee22:	b002      	add	sp, #8
 800ee24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee28:	2104      	movs	r1, #4
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	f000 fc14 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800ee30:	b1d0      	cbz	r0, 800ee68 <ucdr_serialize_int32_t+0xd0>
 800ee32:	7d23      	ldrb	r3, [r4, #20]
 800ee34:	2b01      	cmp	r3, #1
 800ee36:	68a3      	ldr	r3, [r4, #8]
 800ee38:	d01c      	beq.n	800ee74 <ucdr_serialize_int32_t+0xdc>
 800ee3a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800ee3e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee42:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ee46:	7018      	strb	r0, [r3, #0]
 800ee48:	68a3      	ldr	r3, [r4, #8]
 800ee4a:	705a      	strb	r2, [r3, #1]
 800ee4c:	68a3      	ldr	r3, [r4, #8]
 800ee4e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ee52:	7099      	strb	r1, [r3, #2]
 800ee54:	68a3      	ldr	r3, [r4, #8]
 800ee56:	70da      	strb	r2, [r3, #3]
 800ee58:	2104      	movs	r1, #4
 800ee5a:	68a2      	ldr	r2, [r4, #8]
 800ee5c:	6923      	ldr	r3, [r4, #16]
 800ee5e:	440a      	add	r2, r1
 800ee60:	7561      	strb	r1, [r4, #21]
 800ee62:	440b      	add	r3, r1
 800ee64:	60a2      	str	r2, [r4, #8]
 800ee66:	6123      	str	r3, [r4, #16]
 800ee68:	7da0      	ldrb	r0, [r4, #22]
 800ee6a:	f080 0001 	eor.w	r0, r0, #1
 800ee6e:	b002      	add	sp, #8
 800ee70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee74:	9a01      	ldr	r2, [sp, #4]
 800ee76:	601a      	str	r2, [r3, #0]
 800ee78:	e7ee      	b.n	800ee58 <ucdr_serialize_int32_t+0xc0>
 800ee7a:	68a2      	ldr	r2, [r4, #8]
 800ee7c:	6923      	ldr	r3, [r4, #16]
 800ee7e:	7da0      	ldrb	r0, [r4, #22]
 800ee80:	1b92      	subs	r2, r2, r6
 800ee82:	1b9b      	subs	r3, r3, r6
 800ee84:	7567      	strb	r7, [r4, #21]
 800ee86:	f080 0001 	eor.w	r0, r0, #1
 800ee8a:	60a2      	str	r2, [r4, #8]
 800ee8c:	6123      	str	r3, [r4, #16]
 800ee8e:	b002      	add	sp, #8
 800ee90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee94:	68a3      	ldr	r3, [r4, #8]
 800ee96:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ee9a:	701a      	strb	r2, [r3, #0]
 800ee9c:	68a3      	ldr	r3, [r4, #8]
 800ee9e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800eea2:	701a      	strb	r2, [r3, #0]
 800eea4:	68a3      	ldr	r3, [r4, #8]
 800eea6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eeaa:	701a      	strb	r2, [r3, #0]
 800eeac:	e7ad      	b.n	800ee0a <ucdr_serialize_int32_t+0x72>
 800eeae:	4628      	mov	r0, r5
 800eeb0:	ad01      	add	r5, sp, #4
 800eeb2:	4632      	mov	r2, r6
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	f00d fb72 	bl	801c59e <memcpy>
 800eeba:	4642      	mov	r2, r8
 800eebc:	19a9      	adds	r1, r5, r6
 800eebe:	68a0      	ldr	r0, [r4, #8]
 800eec0:	f00d fb6d 	bl	801c59e <memcpy>
 800eec4:	e7a1      	b.n	800ee0a <ucdr_serialize_int32_t+0x72>
 800eec6:	bf00      	nop

0800eec8 <ucdr_deserialize_int32_t>:
 800eec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eecc:	4604      	mov	r4, r0
 800eece:	460d      	mov	r5, r1
 800eed0:	2104      	movs	r1, #4
 800eed2:	f000 fc15 	bl	800f700 <ucdr_buffer_alignment>
 800eed6:	4601      	mov	r1, r0
 800eed8:	4620      	mov	r0, r4
 800eeda:	f894 8015 	ldrb.w	r8, [r4, #21]
 800eede:	f000 fc57 	bl	800f790 <ucdr_advance_buffer>
 800eee2:	2104      	movs	r1, #4
 800eee4:	4620      	mov	r0, r4
 800eee6:	f000 fbab 	bl	800f640 <ucdr_check_buffer_available_for>
 800eeea:	2800      	cmp	r0, #0
 800eeec:	d138      	bne.n	800ef60 <ucdr_deserialize_int32_t+0x98>
 800eeee:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800eef2:	42b7      	cmp	r7, r6
 800eef4:	d92f      	bls.n	800ef56 <ucdr_deserialize_int32_t+0x8e>
 800eef6:	6923      	ldr	r3, [r4, #16]
 800eef8:	4620      	mov	r0, r4
 800eefa:	60a7      	str	r7, [r4, #8]
 800eefc:	1bbf      	subs	r7, r7, r6
 800eefe:	443b      	add	r3, r7
 800ef00:	f1c7 0904 	rsb	r9, r7, #4
 800ef04:	6123      	str	r3, [r4, #16]
 800ef06:	4649      	mov	r1, r9
 800ef08:	f000 fba6 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	d046      	beq.n	800ef9e <ucdr_deserialize_int32_t+0xd6>
 800ef10:	7d23      	ldrb	r3, [r4, #20]
 800ef12:	2b01      	cmp	r3, #1
 800ef14:	d05c      	beq.n	800efd0 <ucdr_deserialize_int32_t+0x108>
 800ef16:	78f3      	ldrb	r3, [r6, #3]
 800ef18:	702b      	strb	r3, [r5, #0]
 800ef1a:	2f00      	cmp	r7, #0
 800ef1c:	d04c      	beq.n	800efb8 <ucdr_deserialize_int32_t+0xf0>
 800ef1e:	78b3      	ldrb	r3, [r6, #2]
 800ef20:	2f01      	cmp	r7, #1
 800ef22:	706b      	strb	r3, [r5, #1]
 800ef24:	f105 0302 	add.w	r3, r5, #2
 800ef28:	d04a      	beq.n	800efc0 <ucdr_deserialize_int32_t+0xf8>
 800ef2a:	7873      	ldrb	r3, [r6, #1]
 800ef2c:	2f02      	cmp	r7, #2
 800ef2e:	70ab      	strb	r3, [r5, #2]
 800ef30:	f105 0303 	add.w	r3, r5, #3
 800ef34:	d048      	beq.n	800efc8 <ucdr_deserialize_int32_t+0x100>
 800ef36:	7833      	ldrb	r3, [r6, #0]
 800ef38:	70eb      	strb	r3, [r5, #3]
 800ef3a:	6923      	ldr	r3, [r4, #16]
 800ef3c:	2104      	movs	r1, #4
 800ef3e:	68a2      	ldr	r2, [r4, #8]
 800ef40:	3304      	adds	r3, #4
 800ef42:	7da0      	ldrb	r0, [r4, #22]
 800ef44:	444a      	add	r2, r9
 800ef46:	7561      	strb	r1, [r4, #21]
 800ef48:	1bdb      	subs	r3, r3, r7
 800ef4a:	f080 0001 	eor.w	r0, r0, #1
 800ef4e:	60a2      	str	r2, [r4, #8]
 800ef50:	6123      	str	r3, [r4, #16]
 800ef52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef56:	2104      	movs	r1, #4
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f000 fb7d 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800ef5e:	b1b0      	cbz	r0, 800ef8e <ucdr_deserialize_int32_t+0xc6>
 800ef60:	7d23      	ldrb	r3, [r4, #20]
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	68a3      	ldr	r3, [r4, #8]
 800ef66:	d017      	beq.n	800ef98 <ucdr_deserialize_int32_t+0xd0>
 800ef68:	78db      	ldrb	r3, [r3, #3]
 800ef6a:	702b      	strb	r3, [r5, #0]
 800ef6c:	68a3      	ldr	r3, [r4, #8]
 800ef6e:	789b      	ldrb	r3, [r3, #2]
 800ef70:	706b      	strb	r3, [r5, #1]
 800ef72:	68a3      	ldr	r3, [r4, #8]
 800ef74:	785b      	ldrb	r3, [r3, #1]
 800ef76:	70ab      	strb	r3, [r5, #2]
 800ef78:	68a3      	ldr	r3, [r4, #8]
 800ef7a:	781b      	ldrb	r3, [r3, #0]
 800ef7c:	70eb      	strb	r3, [r5, #3]
 800ef7e:	2104      	movs	r1, #4
 800ef80:	68a2      	ldr	r2, [r4, #8]
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	440a      	add	r2, r1
 800ef86:	7561      	strb	r1, [r4, #21]
 800ef88:	440b      	add	r3, r1
 800ef8a:	60a2      	str	r2, [r4, #8]
 800ef8c:	6123      	str	r3, [r4, #16]
 800ef8e:	7da0      	ldrb	r0, [r4, #22]
 800ef90:	f080 0001 	eor.w	r0, r0, #1
 800ef94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	602b      	str	r3, [r5, #0]
 800ef9c:	e7ef      	b.n	800ef7e <ucdr_deserialize_int32_t+0xb6>
 800ef9e:	68a2      	ldr	r2, [r4, #8]
 800efa0:	6923      	ldr	r3, [r4, #16]
 800efa2:	1bd2      	subs	r2, r2, r7
 800efa4:	7da0      	ldrb	r0, [r4, #22]
 800efa6:	1bdb      	subs	r3, r3, r7
 800efa8:	f884 8015 	strb.w	r8, [r4, #21]
 800efac:	f080 0001 	eor.w	r0, r0, #1
 800efb0:	60a2      	str	r2, [r4, #8]
 800efb2:	6123      	str	r3, [r4, #16]
 800efb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efb8:	68a3      	ldr	r3, [r4, #8]
 800efba:	789b      	ldrb	r3, [r3, #2]
 800efbc:	706b      	strb	r3, [r5, #1]
 800efbe:	1cab      	adds	r3, r5, #2
 800efc0:	68a2      	ldr	r2, [r4, #8]
 800efc2:	7852      	ldrb	r2, [r2, #1]
 800efc4:	f803 2b01 	strb.w	r2, [r3], #1
 800efc8:	68a2      	ldr	r2, [r4, #8]
 800efca:	7812      	ldrb	r2, [r2, #0]
 800efcc:	701a      	strb	r2, [r3, #0]
 800efce:	e7b4      	b.n	800ef3a <ucdr_deserialize_int32_t+0x72>
 800efd0:	4631      	mov	r1, r6
 800efd2:	463a      	mov	r2, r7
 800efd4:	4628      	mov	r0, r5
 800efd6:	f00d fae2 	bl	801c59e <memcpy>
 800efda:	464a      	mov	r2, r9
 800efdc:	19e8      	adds	r0, r5, r7
 800efde:	68a1      	ldr	r1, [r4, #8]
 800efe0:	f00d fadd 	bl	801c59e <memcpy>
 800efe4:	e7a9      	b.n	800ef3a <ucdr_deserialize_int32_t+0x72>
 800efe6:	bf00      	nop

0800efe8 <ucdr_serialize_int64_t>:
 800efe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efec:	4604      	mov	r4, r0
 800efee:	b082      	sub	sp, #8
 800eff0:	2108      	movs	r1, #8
 800eff2:	e9cd 2300 	strd	r2, r3, [sp]
 800eff6:	f000 fb83 	bl	800f700 <ucdr_buffer_alignment>
 800effa:	4601      	mov	r1, r0
 800effc:	4620      	mov	r0, r4
 800effe:	7d67      	ldrb	r7, [r4, #21]
 800f000:	f000 fbc6 	bl	800f790 <ucdr_advance_buffer>
 800f004:	2108      	movs	r1, #8
 800f006:	4620      	mov	r0, r4
 800f008:	f000 fb1a 	bl	800f640 <ucdr_check_buffer_available_for>
 800f00c:	2800      	cmp	r0, #0
 800f00e:	d14e      	bne.n	800f0ae <ucdr_serialize_int64_t+0xc6>
 800f010:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f014:	42ab      	cmp	r3, r5
 800f016:	d945      	bls.n	800f0a4 <ucdr_serialize_int64_t+0xbc>
 800f018:	1b5e      	subs	r6, r3, r5
 800f01a:	60a3      	str	r3, [r4, #8]
 800f01c:	6923      	ldr	r3, [r4, #16]
 800f01e:	4620      	mov	r0, r4
 800f020:	f1c6 0808 	rsb	r8, r6, #8
 800f024:	4433      	add	r3, r6
 800f026:	4641      	mov	r1, r8
 800f028:	6123      	str	r3, [r4, #16]
 800f02a:	f000 fb15 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800f02e:	2800      	cmp	r0, #0
 800f030:	d074      	beq.n	800f11c <ucdr_serialize_int64_t+0x134>
 800f032:	7d23      	ldrb	r3, [r4, #20]
 800f034:	2b01      	cmp	r3, #1
 800f036:	f000 809b 	beq.w	800f170 <ucdr_serialize_int64_t+0x188>
 800f03a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f03e:	702b      	strb	r3, [r5, #0]
 800f040:	2e00      	cmp	r6, #0
 800f042:	d078      	beq.n	800f136 <ucdr_serialize_int64_t+0x14e>
 800f044:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f048:	2e01      	cmp	r6, #1
 800f04a:	706b      	strb	r3, [r5, #1]
 800f04c:	d077      	beq.n	800f13e <ucdr_serialize_int64_t+0x156>
 800f04e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f052:	2e02      	cmp	r6, #2
 800f054:	70ab      	strb	r3, [r5, #2]
 800f056:	d076      	beq.n	800f146 <ucdr_serialize_int64_t+0x15e>
 800f058:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f05c:	2e03      	cmp	r6, #3
 800f05e:	70eb      	strb	r3, [r5, #3]
 800f060:	d075      	beq.n	800f14e <ucdr_serialize_int64_t+0x166>
 800f062:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f066:	2e04      	cmp	r6, #4
 800f068:	712b      	strb	r3, [r5, #4]
 800f06a:	d074      	beq.n	800f156 <ucdr_serialize_int64_t+0x16e>
 800f06c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f070:	2e05      	cmp	r6, #5
 800f072:	716b      	strb	r3, [r5, #5]
 800f074:	d073      	beq.n	800f15e <ucdr_serialize_int64_t+0x176>
 800f076:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f07a:	2e06      	cmp	r6, #6
 800f07c:	71ab      	strb	r3, [r5, #6]
 800f07e:	d072      	beq.n	800f166 <ucdr_serialize_int64_t+0x17e>
 800f080:	f89d 3000 	ldrb.w	r3, [sp]
 800f084:	71eb      	strb	r3, [r5, #7]
 800f086:	6923      	ldr	r3, [r4, #16]
 800f088:	2108      	movs	r1, #8
 800f08a:	68a2      	ldr	r2, [r4, #8]
 800f08c:	3308      	adds	r3, #8
 800f08e:	7da0      	ldrb	r0, [r4, #22]
 800f090:	4442      	add	r2, r8
 800f092:	7561      	strb	r1, [r4, #21]
 800f094:	1b9e      	subs	r6, r3, r6
 800f096:	f080 0001 	eor.w	r0, r0, #1
 800f09a:	60a2      	str	r2, [r4, #8]
 800f09c:	6126      	str	r6, [r4, #16]
 800f09e:	b002      	add	sp, #8
 800f0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0a4:	2108      	movs	r1, #8
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f000 fad6 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800f0ac:	b350      	cbz	r0, 800f104 <ucdr_serialize_int64_t+0x11c>
 800f0ae:	7d23      	ldrb	r3, [r4, #20]
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d02d      	beq.n	800f110 <ucdr_serialize_int64_t+0x128>
 800f0b4:	68a3      	ldr	r3, [r4, #8]
 800f0b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f0ba:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f0be:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f0c2:	7018      	strb	r0, [r3, #0]
 800f0c4:	68a3      	ldr	r3, [r4, #8]
 800f0c6:	705a      	strb	r2, [r3, #1]
 800f0c8:	68a3      	ldr	r3, [r4, #8]
 800f0ca:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f0ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f0d2:	7099      	strb	r1, [r3, #2]
 800f0d4:	68a3      	ldr	r3, [r4, #8]
 800f0d6:	70da      	strb	r2, [r3, #3]
 800f0d8:	68a3      	ldr	r3, [r4, #8]
 800f0da:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f0de:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f0e2:	7118      	strb	r0, [r3, #4]
 800f0e4:	68a3      	ldr	r3, [r4, #8]
 800f0e6:	715a      	strb	r2, [r3, #5]
 800f0e8:	68a3      	ldr	r3, [r4, #8]
 800f0ea:	f89d 2000 	ldrb.w	r2, [sp]
 800f0ee:	7199      	strb	r1, [r3, #6]
 800f0f0:	68a3      	ldr	r3, [r4, #8]
 800f0f2:	71da      	strb	r2, [r3, #7]
 800f0f4:	2108      	movs	r1, #8
 800f0f6:	68a2      	ldr	r2, [r4, #8]
 800f0f8:	6923      	ldr	r3, [r4, #16]
 800f0fa:	440a      	add	r2, r1
 800f0fc:	7561      	strb	r1, [r4, #21]
 800f0fe:	440b      	add	r3, r1
 800f100:	60a2      	str	r2, [r4, #8]
 800f102:	6123      	str	r3, [r4, #16]
 800f104:	7da0      	ldrb	r0, [r4, #22]
 800f106:	f080 0001 	eor.w	r0, r0, #1
 800f10a:	b002      	add	sp, #8
 800f10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f110:	466b      	mov	r3, sp
 800f112:	68a2      	ldr	r2, [r4, #8]
 800f114:	cb03      	ldmia	r3!, {r0, r1}
 800f116:	6010      	str	r0, [r2, #0]
 800f118:	6051      	str	r1, [r2, #4]
 800f11a:	e7eb      	b.n	800f0f4 <ucdr_serialize_int64_t+0x10c>
 800f11c:	68a2      	ldr	r2, [r4, #8]
 800f11e:	6923      	ldr	r3, [r4, #16]
 800f120:	7da0      	ldrb	r0, [r4, #22]
 800f122:	1b92      	subs	r2, r2, r6
 800f124:	1b9b      	subs	r3, r3, r6
 800f126:	7567      	strb	r7, [r4, #21]
 800f128:	f080 0001 	eor.w	r0, r0, #1
 800f12c:	60a2      	str	r2, [r4, #8]
 800f12e:	6123      	str	r3, [r4, #16]
 800f130:	b002      	add	sp, #8
 800f132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f136:	68a3      	ldr	r3, [r4, #8]
 800f138:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f13c:	701a      	strb	r2, [r3, #0]
 800f13e:	68a3      	ldr	r3, [r4, #8]
 800f140:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f144:	701a      	strb	r2, [r3, #0]
 800f146:	68a3      	ldr	r3, [r4, #8]
 800f148:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f14c:	701a      	strb	r2, [r3, #0]
 800f14e:	68a3      	ldr	r3, [r4, #8]
 800f150:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f154:	701a      	strb	r2, [r3, #0]
 800f156:	68a3      	ldr	r3, [r4, #8]
 800f158:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f15c:	701a      	strb	r2, [r3, #0]
 800f15e:	68a3      	ldr	r3, [r4, #8]
 800f160:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f164:	701a      	strb	r2, [r3, #0]
 800f166:	68a3      	ldr	r3, [r4, #8]
 800f168:	f89d 2000 	ldrb.w	r2, [sp]
 800f16c:	701a      	strb	r2, [r3, #0]
 800f16e:	e78a      	b.n	800f086 <ucdr_serialize_int64_t+0x9e>
 800f170:	4628      	mov	r0, r5
 800f172:	466d      	mov	r5, sp
 800f174:	4632      	mov	r2, r6
 800f176:	4629      	mov	r1, r5
 800f178:	f00d fa11 	bl	801c59e <memcpy>
 800f17c:	4642      	mov	r2, r8
 800f17e:	19a9      	adds	r1, r5, r6
 800f180:	68a0      	ldr	r0, [r4, #8]
 800f182:	f00d fa0c 	bl	801c59e <memcpy>
 800f186:	e77e      	b.n	800f086 <ucdr_serialize_int64_t+0x9e>

0800f188 <ucdr_deserialize_int64_t>:
 800f188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f18c:	4604      	mov	r4, r0
 800f18e:	460d      	mov	r5, r1
 800f190:	2108      	movs	r1, #8
 800f192:	f000 fab5 	bl	800f700 <ucdr_buffer_alignment>
 800f196:	4601      	mov	r1, r0
 800f198:	4620      	mov	r0, r4
 800f19a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f19e:	f000 faf7 	bl	800f790 <ucdr_advance_buffer>
 800f1a2:	2108      	movs	r1, #8
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	f000 fa4b 	bl	800f640 <ucdr_check_buffer_available_for>
 800f1aa:	2800      	cmp	r0, #0
 800f1ac:	d151      	bne.n	800f252 <ucdr_deserialize_int64_t+0xca>
 800f1ae:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f1b2:	42be      	cmp	r6, r7
 800f1b4:	d948      	bls.n	800f248 <ucdr_deserialize_int64_t+0xc0>
 800f1b6:	6923      	ldr	r3, [r4, #16]
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	60a6      	str	r6, [r4, #8]
 800f1bc:	1bf6      	subs	r6, r6, r7
 800f1be:	4433      	add	r3, r6
 800f1c0:	f1c6 0908 	rsb	r9, r6, #8
 800f1c4:	6123      	str	r3, [r4, #16]
 800f1c6:	4649      	mov	r1, r9
 800f1c8:	f000 fa46 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800f1cc:	2800      	cmp	r0, #0
 800f1ce:	d06d      	beq.n	800f2ac <ucdr_deserialize_int64_t+0x124>
 800f1d0:	7d23      	ldrb	r3, [r4, #20]
 800f1d2:	2b01      	cmp	r3, #1
 800f1d4:	f000 8093 	beq.w	800f2fe <ucdr_deserialize_int64_t+0x176>
 800f1d8:	79fb      	ldrb	r3, [r7, #7]
 800f1da:	702b      	strb	r3, [r5, #0]
 800f1dc:	2e00      	cmp	r6, #0
 800f1de:	d072      	beq.n	800f2c6 <ucdr_deserialize_int64_t+0x13e>
 800f1e0:	79bb      	ldrb	r3, [r7, #6]
 800f1e2:	2e01      	cmp	r6, #1
 800f1e4:	706b      	strb	r3, [r5, #1]
 800f1e6:	f105 0302 	add.w	r3, r5, #2
 800f1ea:	d070      	beq.n	800f2ce <ucdr_deserialize_int64_t+0x146>
 800f1ec:	797b      	ldrb	r3, [r7, #5]
 800f1ee:	2e02      	cmp	r6, #2
 800f1f0:	70ab      	strb	r3, [r5, #2]
 800f1f2:	f105 0303 	add.w	r3, r5, #3
 800f1f6:	d06e      	beq.n	800f2d6 <ucdr_deserialize_int64_t+0x14e>
 800f1f8:	793b      	ldrb	r3, [r7, #4]
 800f1fa:	2e03      	cmp	r6, #3
 800f1fc:	70eb      	strb	r3, [r5, #3]
 800f1fe:	f105 0304 	add.w	r3, r5, #4
 800f202:	d06c      	beq.n	800f2de <ucdr_deserialize_int64_t+0x156>
 800f204:	78fb      	ldrb	r3, [r7, #3]
 800f206:	2e04      	cmp	r6, #4
 800f208:	712b      	strb	r3, [r5, #4]
 800f20a:	f105 0305 	add.w	r3, r5, #5
 800f20e:	d06a      	beq.n	800f2e6 <ucdr_deserialize_int64_t+0x15e>
 800f210:	78bb      	ldrb	r3, [r7, #2]
 800f212:	2e05      	cmp	r6, #5
 800f214:	716b      	strb	r3, [r5, #5]
 800f216:	f105 0306 	add.w	r3, r5, #6
 800f21a:	d068      	beq.n	800f2ee <ucdr_deserialize_int64_t+0x166>
 800f21c:	787b      	ldrb	r3, [r7, #1]
 800f21e:	2e06      	cmp	r6, #6
 800f220:	71ab      	strb	r3, [r5, #6]
 800f222:	f105 0307 	add.w	r3, r5, #7
 800f226:	d066      	beq.n	800f2f6 <ucdr_deserialize_int64_t+0x16e>
 800f228:	783b      	ldrb	r3, [r7, #0]
 800f22a:	71eb      	strb	r3, [r5, #7]
 800f22c:	6923      	ldr	r3, [r4, #16]
 800f22e:	2108      	movs	r1, #8
 800f230:	68a2      	ldr	r2, [r4, #8]
 800f232:	3308      	adds	r3, #8
 800f234:	7da0      	ldrb	r0, [r4, #22]
 800f236:	444a      	add	r2, r9
 800f238:	7561      	strb	r1, [r4, #21]
 800f23a:	1b9e      	subs	r6, r3, r6
 800f23c:	f080 0001 	eor.w	r0, r0, #1
 800f240:	60a2      	str	r2, [r4, #8]
 800f242:	6126      	str	r6, [r4, #16]
 800f244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f248:	2108      	movs	r1, #8
 800f24a:	4620      	mov	r0, r4
 800f24c:	f000 fa04 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800f250:	b310      	cbz	r0, 800f298 <ucdr_deserialize_int64_t+0x110>
 800f252:	7d23      	ldrb	r3, [r4, #20]
 800f254:	2b01      	cmp	r3, #1
 800f256:	68a3      	ldr	r3, [r4, #8]
 800f258:	d023      	beq.n	800f2a2 <ucdr_deserialize_int64_t+0x11a>
 800f25a:	79db      	ldrb	r3, [r3, #7]
 800f25c:	702b      	strb	r3, [r5, #0]
 800f25e:	68a3      	ldr	r3, [r4, #8]
 800f260:	799b      	ldrb	r3, [r3, #6]
 800f262:	706b      	strb	r3, [r5, #1]
 800f264:	68a3      	ldr	r3, [r4, #8]
 800f266:	795b      	ldrb	r3, [r3, #5]
 800f268:	70ab      	strb	r3, [r5, #2]
 800f26a:	68a3      	ldr	r3, [r4, #8]
 800f26c:	791b      	ldrb	r3, [r3, #4]
 800f26e:	70eb      	strb	r3, [r5, #3]
 800f270:	68a3      	ldr	r3, [r4, #8]
 800f272:	78db      	ldrb	r3, [r3, #3]
 800f274:	712b      	strb	r3, [r5, #4]
 800f276:	68a3      	ldr	r3, [r4, #8]
 800f278:	789b      	ldrb	r3, [r3, #2]
 800f27a:	716b      	strb	r3, [r5, #5]
 800f27c:	68a3      	ldr	r3, [r4, #8]
 800f27e:	785b      	ldrb	r3, [r3, #1]
 800f280:	71ab      	strb	r3, [r5, #6]
 800f282:	68a3      	ldr	r3, [r4, #8]
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	71eb      	strb	r3, [r5, #7]
 800f288:	2108      	movs	r1, #8
 800f28a:	68a2      	ldr	r2, [r4, #8]
 800f28c:	6923      	ldr	r3, [r4, #16]
 800f28e:	440a      	add	r2, r1
 800f290:	7561      	strb	r1, [r4, #21]
 800f292:	440b      	add	r3, r1
 800f294:	60a2      	str	r2, [r4, #8]
 800f296:	6123      	str	r3, [r4, #16]
 800f298:	7da0      	ldrb	r0, [r4, #22]
 800f29a:	f080 0001 	eor.w	r0, r0, #1
 800f29e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2a2:	681a      	ldr	r2, [r3, #0]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	602a      	str	r2, [r5, #0]
 800f2a8:	606b      	str	r3, [r5, #4]
 800f2aa:	e7ed      	b.n	800f288 <ucdr_deserialize_int64_t+0x100>
 800f2ac:	68a2      	ldr	r2, [r4, #8]
 800f2ae:	6923      	ldr	r3, [r4, #16]
 800f2b0:	1b92      	subs	r2, r2, r6
 800f2b2:	7da0      	ldrb	r0, [r4, #22]
 800f2b4:	1b9b      	subs	r3, r3, r6
 800f2b6:	f884 8015 	strb.w	r8, [r4, #21]
 800f2ba:	f080 0001 	eor.w	r0, r0, #1
 800f2be:	60a2      	str	r2, [r4, #8]
 800f2c0:	6123      	str	r3, [r4, #16]
 800f2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2c6:	68a3      	ldr	r3, [r4, #8]
 800f2c8:	799b      	ldrb	r3, [r3, #6]
 800f2ca:	706b      	strb	r3, [r5, #1]
 800f2cc:	1cab      	adds	r3, r5, #2
 800f2ce:	68a2      	ldr	r2, [r4, #8]
 800f2d0:	7952      	ldrb	r2, [r2, #5]
 800f2d2:	f803 2b01 	strb.w	r2, [r3], #1
 800f2d6:	68a2      	ldr	r2, [r4, #8]
 800f2d8:	7912      	ldrb	r2, [r2, #4]
 800f2da:	f803 2b01 	strb.w	r2, [r3], #1
 800f2de:	68a2      	ldr	r2, [r4, #8]
 800f2e0:	78d2      	ldrb	r2, [r2, #3]
 800f2e2:	f803 2b01 	strb.w	r2, [r3], #1
 800f2e6:	68a2      	ldr	r2, [r4, #8]
 800f2e8:	7892      	ldrb	r2, [r2, #2]
 800f2ea:	f803 2b01 	strb.w	r2, [r3], #1
 800f2ee:	68a2      	ldr	r2, [r4, #8]
 800f2f0:	7852      	ldrb	r2, [r2, #1]
 800f2f2:	f803 2b01 	strb.w	r2, [r3], #1
 800f2f6:	68a2      	ldr	r2, [r4, #8]
 800f2f8:	7812      	ldrb	r2, [r2, #0]
 800f2fa:	701a      	strb	r2, [r3, #0]
 800f2fc:	e796      	b.n	800f22c <ucdr_deserialize_int64_t+0xa4>
 800f2fe:	4639      	mov	r1, r7
 800f300:	4632      	mov	r2, r6
 800f302:	4628      	mov	r0, r5
 800f304:	f00d f94b 	bl	801c59e <memcpy>
 800f308:	464a      	mov	r2, r9
 800f30a:	19a8      	adds	r0, r5, r6
 800f30c:	68a1      	ldr	r1, [r4, #8]
 800f30e:	f00d f946 	bl	801c59e <memcpy>
 800f312:	e78b      	b.n	800f22c <ucdr_deserialize_int64_t+0xa4>

0800f314 <ucdr_serialize_double>:
 800f314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f318:	4604      	mov	r4, r0
 800f31a:	b082      	sub	sp, #8
 800f31c:	2108      	movs	r1, #8
 800f31e:	ed8d 0b00 	vstr	d0, [sp]
 800f322:	f000 f9ed 	bl	800f700 <ucdr_buffer_alignment>
 800f326:	4601      	mov	r1, r0
 800f328:	4620      	mov	r0, r4
 800f32a:	7d67      	ldrb	r7, [r4, #21]
 800f32c:	f000 fa30 	bl	800f790 <ucdr_advance_buffer>
 800f330:	2108      	movs	r1, #8
 800f332:	4620      	mov	r0, r4
 800f334:	f000 f984 	bl	800f640 <ucdr_check_buffer_available_for>
 800f338:	2800      	cmp	r0, #0
 800f33a:	d14e      	bne.n	800f3da <ucdr_serialize_double+0xc6>
 800f33c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f340:	42ab      	cmp	r3, r5
 800f342:	d945      	bls.n	800f3d0 <ucdr_serialize_double+0xbc>
 800f344:	1b5e      	subs	r6, r3, r5
 800f346:	60a3      	str	r3, [r4, #8]
 800f348:	6923      	ldr	r3, [r4, #16]
 800f34a:	4620      	mov	r0, r4
 800f34c:	f1c6 0808 	rsb	r8, r6, #8
 800f350:	4433      	add	r3, r6
 800f352:	4641      	mov	r1, r8
 800f354:	6123      	str	r3, [r4, #16]
 800f356:	f000 f97f 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	d074      	beq.n	800f448 <ucdr_serialize_double+0x134>
 800f35e:	7d23      	ldrb	r3, [r4, #20]
 800f360:	2b01      	cmp	r3, #1
 800f362:	f000 809b 	beq.w	800f49c <ucdr_serialize_double+0x188>
 800f366:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f36a:	702b      	strb	r3, [r5, #0]
 800f36c:	2e00      	cmp	r6, #0
 800f36e:	d078      	beq.n	800f462 <ucdr_serialize_double+0x14e>
 800f370:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f374:	2e01      	cmp	r6, #1
 800f376:	706b      	strb	r3, [r5, #1]
 800f378:	d077      	beq.n	800f46a <ucdr_serialize_double+0x156>
 800f37a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800f37e:	2e02      	cmp	r6, #2
 800f380:	70ab      	strb	r3, [r5, #2]
 800f382:	d076      	beq.n	800f472 <ucdr_serialize_double+0x15e>
 800f384:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800f388:	2e03      	cmp	r6, #3
 800f38a:	70eb      	strb	r3, [r5, #3]
 800f38c:	d075      	beq.n	800f47a <ucdr_serialize_double+0x166>
 800f38e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800f392:	2e04      	cmp	r6, #4
 800f394:	712b      	strb	r3, [r5, #4]
 800f396:	d074      	beq.n	800f482 <ucdr_serialize_double+0x16e>
 800f398:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800f39c:	2e05      	cmp	r6, #5
 800f39e:	716b      	strb	r3, [r5, #5]
 800f3a0:	d073      	beq.n	800f48a <ucdr_serialize_double+0x176>
 800f3a2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800f3a6:	2e06      	cmp	r6, #6
 800f3a8:	71ab      	strb	r3, [r5, #6]
 800f3aa:	d072      	beq.n	800f492 <ucdr_serialize_double+0x17e>
 800f3ac:	f89d 3000 	ldrb.w	r3, [sp]
 800f3b0:	71eb      	strb	r3, [r5, #7]
 800f3b2:	6923      	ldr	r3, [r4, #16]
 800f3b4:	2108      	movs	r1, #8
 800f3b6:	68a2      	ldr	r2, [r4, #8]
 800f3b8:	3308      	adds	r3, #8
 800f3ba:	7da0      	ldrb	r0, [r4, #22]
 800f3bc:	4442      	add	r2, r8
 800f3be:	7561      	strb	r1, [r4, #21]
 800f3c0:	1b9e      	subs	r6, r3, r6
 800f3c2:	f080 0001 	eor.w	r0, r0, #1
 800f3c6:	60a2      	str	r2, [r4, #8]
 800f3c8:	6126      	str	r6, [r4, #16]
 800f3ca:	b002      	add	sp, #8
 800f3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3d0:	2108      	movs	r1, #8
 800f3d2:	4620      	mov	r0, r4
 800f3d4:	f000 f940 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800f3d8:	b350      	cbz	r0, 800f430 <ucdr_serialize_double+0x11c>
 800f3da:	7d23      	ldrb	r3, [r4, #20]
 800f3dc:	2b01      	cmp	r3, #1
 800f3de:	d02d      	beq.n	800f43c <ucdr_serialize_double+0x128>
 800f3e0:	68a3      	ldr	r3, [r4, #8]
 800f3e2:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800f3e6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f3ea:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800f3ee:	7018      	strb	r0, [r3, #0]
 800f3f0:	68a3      	ldr	r3, [r4, #8]
 800f3f2:	705a      	strb	r2, [r3, #1]
 800f3f4:	68a3      	ldr	r3, [r4, #8]
 800f3f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f3fa:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800f3fe:	7099      	strb	r1, [r3, #2]
 800f400:	68a3      	ldr	r3, [r4, #8]
 800f402:	70da      	strb	r2, [r3, #3]
 800f404:	68a3      	ldr	r3, [r4, #8]
 800f406:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f40a:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800f40e:	7118      	strb	r0, [r3, #4]
 800f410:	68a3      	ldr	r3, [r4, #8]
 800f412:	715a      	strb	r2, [r3, #5]
 800f414:	68a3      	ldr	r3, [r4, #8]
 800f416:	f89d 2000 	ldrb.w	r2, [sp]
 800f41a:	7199      	strb	r1, [r3, #6]
 800f41c:	68a3      	ldr	r3, [r4, #8]
 800f41e:	71da      	strb	r2, [r3, #7]
 800f420:	2108      	movs	r1, #8
 800f422:	68a2      	ldr	r2, [r4, #8]
 800f424:	6923      	ldr	r3, [r4, #16]
 800f426:	440a      	add	r2, r1
 800f428:	7561      	strb	r1, [r4, #21]
 800f42a:	440b      	add	r3, r1
 800f42c:	60a2      	str	r2, [r4, #8]
 800f42e:	6123      	str	r3, [r4, #16]
 800f430:	7da0      	ldrb	r0, [r4, #22]
 800f432:	f080 0001 	eor.w	r0, r0, #1
 800f436:	b002      	add	sp, #8
 800f438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f43c:	466b      	mov	r3, sp
 800f43e:	68a2      	ldr	r2, [r4, #8]
 800f440:	cb03      	ldmia	r3!, {r0, r1}
 800f442:	6010      	str	r0, [r2, #0]
 800f444:	6051      	str	r1, [r2, #4]
 800f446:	e7eb      	b.n	800f420 <ucdr_serialize_double+0x10c>
 800f448:	68a2      	ldr	r2, [r4, #8]
 800f44a:	6923      	ldr	r3, [r4, #16]
 800f44c:	7da0      	ldrb	r0, [r4, #22]
 800f44e:	1b92      	subs	r2, r2, r6
 800f450:	1b9b      	subs	r3, r3, r6
 800f452:	7567      	strb	r7, [r4, #21]
 800f454:	f080 0001 	eor.w	r0, r0, #1
 800f458:	60a2      	str	r2, [r4, #8]
 800f45a:	6123      	str	r3, [r4, #16]
 800f45c:	b002      	add	sp, #8
 800f45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f462:	68a3      	ldr	r3, [r4, #8]
 800f464:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f468:	701a      	strb	r2, [r3, #0]
 800f46a:	68a3      	ldr	r3, [r4, #8]
 800f46c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800f470:	701a      	strb	r2, [r3, #0]
 800f472:	68a3      	ldr	r3, [r4, #8]
 800f474:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800f478:	701a      	strb	r2, [r3, #0]
 800f47a:	68a3      	ldr	r3, [r4, #8]
 800f47c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800f480:	701a      	strb	r2, [r3, #0]
 800f482:	68a3      	ldr	r3, [r4, #8]
 800f484:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800f488:	701a      	strb	r2, [r3, #0]
 800f48a:	68a3      	ldr	r3, [r4, #8]
 800f48c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800f490:	701a      	strb	r2, [r3, #0]
 800f492:	68a3      	ldr	r3, [r4, #8]
 800f494:	f89d 2000 	ldrb.w	r2, [sp]
 800f498:	701a      	strb	r2, [r3, #0]
 800f49a:	e78a      	b.n	800f3b2 <ucdr_serialize_double+0x9e>
 800f49c:	4628      	mov	r0, r5
 800f49e:	466d      	mov	r5, sp
 800f4a0:	4632      	mov	r2, r6
 800f4a2:	4629      	mov	r1, r5
 800f4a4:	f00d f87b 	bl	801c59e <memcpy>
 800f4a8:	4642      	mov	r2, r8
 800f4aa:	19a9      	adds	r1, r5, r6
 800f4ac:	68a0      	ldr	r0, [r4, #8]
 800f4ae:	f00d f876 	bl	801c59e <memcpy>
 800f4b2:	e77e      	b.n	800f3b2 <ucdr_serialize_double+0x9e>

0800f4b4 <ucdr_deserialize_double>:
 800f4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	460d      	mov	r5, r1
 800f4bc:	2108      	movs	r1, #8
 800f4be:	f000 f91f 	bl	800f700 <ucdr_buffer_alignment>
 800f4c2:	4601      	mov	r1, r0
 800f4c4:	4620      	mov	r0, r4
 800f4c6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f4ca:	f000 f961 	bl	800f790 <ucdr_advance_buffer>
 800f4ce:	2108      	movs	r1, #8
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f000 f8b5 	bl	800f640 <ucdr_check_buffer_available_for>
 800f4d6:	2800      	cmp	r0, #0
 800f4d8:	d151      	bne.n	800f57e <ucdr_deserialize_double+0xca>
 800f4da:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800f4de:	42be      	cmp	r6, r7
 800f4e0:	d948      	bls.n	800f574 <ucdr_deserialize_double+0xc0>
 800f4e2:	6923      	ldr	r3, [r4, #16]
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	60a6      	str	r6, [r4, #8]
 800f4e8:	1bf6      	subs	r6, r6, r7
 800f4ea:	4433      	add	r3, r6
 800f4ec:	f1c6 0908 	rsb	r9, r6, #8
 800f4f0:	6123      	str	r3, [r4, #16]
 800f4f2:	4649      	mov	r1, r9
 800f4f4:	f000 f8b0 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800f4f8:	2800      	cmp	r0, #0
 800f4fa:	d06d      	beq.n	800f5d8 <ucdr_deserialize_double+0x124>
 800f4fc:	7d23      	ldrb	r3, [r4, #20]
 800f4fe:	2b01      	cmp	r3, #1
 800f500:	f000 8093 	beq.w	800f62a <ucdr_deserialize_double+0x176>
 800f504:	79fb      	ldrb	r3, [r7, #7]
 800f506:	702b      	strb	r3, [r5, #0]
 800f508:	2e00      	cmp	r6, #0
 800f50a:	d072      	beq.n	800f5f2 <ucdr_deserialize_double+0x13e>
 800f50c:	79bb      	ldrb	r3, [r7, #6]
 800f50e:	2e01      	cmp	r6, #1
 800f510:	706b      	strb	r3, [r5, #1]
 800f512:	f105 0302 	add.w	r3, r5, #2
 800f516:	d070      	beq.n	800f5fa <ucdr_deserialize_double+0x146>
 800f518:	797b      	ldrb	r3, [r7, #5]
 800f51a:	2e02      	cmp	r6, #2
 800f51c:	70ab      	strb	r3, [r5, #2]
 800f51e:	f105 0303 	add.w	r3, r5, #3
 800f522:	d06e      	beq.n	800f602 <ucdr_deserialize_double+0x14e>
 800f524:	793b      	ldrb	r3, [r7, #4]
 800f526:	2e03      	cmp	r6, #3
 800f528:	70eb      	strb	r3, [r5, #3]
 800f52a:	f105 0304 	add.w	r3, r5, #4
 800f52e:	d06c      	beq.n	800f60a <ucdr_deserialize_double+0x156>
 800f530:	78fb      	ldrb	r3, [r7, #3]
 800f532:	2e04      	cmp	r6, #4
 800f534:	712b      	strb	r3, [r5, #4]
 800f536:	f105 0305 	add.w	r3, r5, #5
 800f53a:	d06a      	beq.n	800f612 <ucdr_deserialize_double+0x15e>
 800f53c:	78bb      	ldrb	r3, [r7, #2]
 800f53e:	2e05      	cmp	r6, #5
 800f540:	716b      	strb	r3, [r5, #5]
 800f542:	f105 0306 	add.w	r3, r5, #6
 800f546:	d068      	beq.n	800f61a <ucdr_deserialize_double+0x166>
 800f548:	787b      	ldrb	r3, [r7, #1]
 800f54a:	2e06      	cmp	r6, #6
 800f54c:	71ab      	strb	r3, [r5, #6]
 800f54e:	f105 0307 	add.w	r3, r5, #7
 800f552:	d066      	beq.n	800f622 <ucdr_deserialize_double+0x16e>
 800f554:	783b      	ldrb	r3, [r7, #0]
 800f556:	71eb      	strb	r3, [r5, #7]
 800f558:	6923      	ldr	r3, [r4, #16]
 800f55a:	2108      	movs	r1, #8
 800f55c:	68a2      	ldr	r2, [r4, #8]
 800f55e:	3308      	adds	r3, #8
 800f560:	7da0      	ldrb	r0, [r4, #22]
 800f562:	444a      	add	r2, r9
 800f564:	7561      	strb	r1, [r4, #21]
 800f566:	1b9e      	subs	r6, r3, r6
 800f568:	f080 0001 	eor.w	r0, r0, #1
 800f56c:	60a2      	str	r2, [r4, #8]
 800f56e:	6126      	str	r6, [r4, #16]
 800f570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f574:	2108      	movs	r1, #8
 800f576:	4620      	mov	r0, r4
 800f578:	f000 f86e 	bl	800f658 <ucdr_check_final_buffer_behavior>
 800f57c:	b310      	cbz	r0, 800f5c4 <ucdr_deserialize_double+0x110>
 800f57e:	7d23      	ldrb	r3, [r4, #20]
 800f580:	2b01      	cmp	r3, #1
 800f582:	68a3      	ldr	r3, [r4, #8]
 800f584:	d023      	beq.n	800f5ce <ucdr_deserialize_double+0x11a>
 800f586:	79db      	ldrb	r3, [r3, #7]
 800f588:	702b      	strb	r3, [r5, #0]
 800f58a:	68a3      	ldr	r3, [r4, #8]
 800f58c:	799b      	ldrb	r3, [r3, #6]
 800f58e:	706b      	strb	r3, [r5, #1]
 800f590:	68a3      	ldr	r3, [r4, #8]
 800f592:	795b      	ldrb	r3, [r3, #5]
 800f594:	70ab      	strb	r3, [r5, #2]
 800f596:	68a3      	ldr	r3, [r4, #8]
 800f598:	791b      	ldrb	r3, [r3, #4]
 800f59a:	70eb      	strb	r3, [r5, #3]
 800f59c:	68a3      	ldr	r3, [r4, #8]
 800f59e:	78db      	ldrb	r3, [r3, #3]
 800f5a0:	712b      	strb	r3, [r5, #4]
 800f5a2:	68a3      	ldr	r3, [r4, #8]
 800f5a4:	789b      	ldrb	r3, [r3, #2]
 800f5a6:	716b      	strb	r3, [r5, #5]
 800f5a8:	68a3      	ldr	r3, [r4, #8]
 800f5aa:	785b      	ldrb	r3, [r3, #1]
 800f5ac:	71ab      	strb	r3, [r5, #6]
 800f5ae:	68a3      	ldr	r3, [r4, #8]
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	71eb      	strb	r3, [r5, #7]
 800f5b4:	2108      	movs	r1, #8
 800f5b6:	68a2      	ldr	r2, [r4, #8]
 800f5b8:	6923      	ldr	r3, [r4, #16]
 800f5ba:	440a      	add	r2, r1
 800f5bc:	7561      	strb	r1, [r4, #21]
 800f5be:	440b      	add	r3, r1
 800f5c0:	60a2      	str	r2, [r4, #8]
 800f5c2:	6123      	str	r3, [r4, #16]
 800f5c4:	7da0      	ldrb	r0, [r4, #22]
 800f5c6:	f080 0001 	eor.w	r0, r0, #1
 800f5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	602a      	str	r2, [r5, #0]
 800f5d4:	606b      	str	r3, [r5, #4]
 800f5d6:	e7ed      	b.n	800f5b4 <ucdr_deserialize_double+0x100>
 800f5d8:	68a2      	ldr	r2, [r4, #8]
 800f5da:	6923      	ldr	r3, [r4, #16]
 800f5dc:	1b92      	subs	r2, r2, r6
 800f5de:	7da0      	ldrb	r0, [r4, #22]
 800f5e0:	1b9b      	subs	r3, r3, r6
 800f5e2:	f884 8015 	strb.w	r8, [r4, #21]
 800f5e6:	f080 0001 	eor.w	r0, r0, #1
 800f5ea:	60a2      	str	r2, [r4, #8]
 800f5ec:	6123      	str	r3, [r4, #16]
 800f5ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5f2:	68a3      	ldr	r3, [r4, #8]
 800f5f4:	799b      	ldrb	r3, [r3, #6]
 800f5f6:	706b      	strb	r3, [r5, #1]
 800f5f8:	1cab      	adds	r3, r5, #2
 800f5fa:	68a2      	ldr	r2, [r4, #8]
 800f5fc:	7952      	ldrb	r2, [r2, #5]
 800f5fe:	f803 2b01 	strb.w	r2, [r3], #1
 800f602:	68a2      	ldr	r2, [r4, #8]
 800f604:	7912      	ldrb	r2, [r2, #4]
 800f606:	f803 2b01 	strb.w	r2, [r3], #1
 800f60a:	68a2      	ldr	r2, [r4, #8]
 800f60c:	78d2      	ldrb	r2, [r2, #3]
 800f60e:	f803 2b01 	strb.w	r2, [r3], #1
 800f612:	68a2      	ldr	r2, [r4, #8]
 800f614:	7892      	ldrb	r2, [r2, #2]
 800f616:	f803 2b01 	strb.w	r2, [r3], #1
 800f61a:	68a2      	ldr	r2, [r4, #8]
 800f61c:	7852      	ldrb	r2, [r2, #1]
 800f61e:	f803 2b01 	strb.w	r2, [r3], #1
 800f622:	68a2      	ldr	r2, [r4, #8]
 800f624:	7812      	ldrb	r2, [r2, #0]
 800f626:	701a      	strb	r2, [r3, #0]
 800f628:	e796      	b.n	800f558 <ucdr_deserialize_double+0xa4>
 800f62a:	4639      	mov	r1, r7
 800f62c:	4632      	mov	r2, r6
 800f62e:	4628      	mov	r0, r5
 800f630:	f00c ffb5 	bl	801c59e <memcpy>
 800f634:	464a      	mov	r2, r9
 800f636:	19a8      	adds	r0, r5, r6
 800f638:	68a1      	ldr	r1, [r4, #8]
 800f63a:	f00c ffb0 	bl	801c59e <memcpy>
 800f63e:	e78b      	b.n	800f558 <ucdr_deserialize_double+0xa4>

0800f640 <ucdr_check_buffer_available_for>:
 800f640:	7d83      	ldrb	r3, [r0, #22]
 800f642:	b93b      	cbnz	r3, 800f654 <ucdr_check_buffer_available_for+0x14>
 800f644:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800f648:	4419      	add	r1, r3
 800f64a:	4288      	cmp	r0, r1
 800f64c:	bf34      	ite	cc
 800f64e:	2000      	movcc	r0, #0
 800f650:	2001      	movcs	r0, #1
 800f652:	4770      	bx	lr
 800f654:	2000      	movs	r0, #0
 800f656:	4770      	bx	lr

0800f658 <ucdr_check_final_buffer_behavior>:
 800f658:	7d83      	ldrb	r3, [r0, #22]
 800f65a:	b943      	cbnz	r3, 800f66e <ucdr_check_final_buffer_behavior+0x16>
 800f65c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800f660:	b510      	push	{r4, lr}
 800f662:	4291      	cmp	r1, r2
 800f664:	4604      	mov	r4, r0
 800f666:	d205      	bcs.n	800f674 <ucdr_check_final_buffer_behavior+0x1c>
 800f668:	2301      	movs	r3, #1
 800f66a:	4618      	mov	r0, r3
 800f66c:	bd10      	pop	{r4, pc}
 800f66e:	2300      	movs	r3, #0
 800f670:	4618      	mov	r0, r3
 800f672:	4770      	bx	lr
 800f674:	6982      	ldr	r2, [r0, #24]
 800f676:	b13a      	cbz	r2, 800f688 <ucdr_check_final_buffer_behavior+0x30>
 800f678:	69c1      	ldr	r1, [r0, #28]
 800f67a:	4790      	blx	r2
 800f67c:	f080 0301 	eor.w	r3, r0, #1
 800f680:	75a0      	strb	r0, [r4, #22]
 800f682:	b2db      	uxtb	r3, r3
 800f684:	4618      	mov	r0, r3
 800f686:	bd10      	pop	{r4, pc}
 800f688:	2001      	movs	r0, #1
 800f68a:	75a0      	strb	r0, [r4, #22]
 800f68c:	e7fa      	b.n	800f684 <ucdr_check_final_buffer_behavior+0x2c>
 800f68e:	bf00      	nop

0800f690 <ucdr_set_on_full_buffer_callback>:
 800f690:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800f694:	4770      	bx	lr
 800f696:	bf00      	nop

0800f698 <ucdr_init_buffer_origin_offset_endian>:
 800f698:	b410      	push	{r4}
 800f69a:	9c01      	ldr	r4, [sp, #4]
 800f69c:	440a      	add	r2, r1
 800f69e:	6001      	str	r1, [r0, #0]
 800f6a0:	6042      	str	r2, [r0, #4]
 800f6a2:	190a      	adds	r2, r1, r4
 800f6a4:	441c      	add	r4, r3
 800f6a6:	6082      	str	r2, [r0, #8]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800f6ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f6b2:	7542      	strb	r2, [r0, #21]
 800f6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f6b8:	7582      	strb	r2, [r0, #22]
 800f6ba:	7503      	strb	r3, [r0, #20]
 800f6bc:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800f6c0:	4770      	bx	lr
 800f6c2:	bf00      	nop

0800f6c4 <ucdr_init_buffer_origin_offset>:
 800f6c4:	b510      	push	{r4, lr}
 800f6c6:	b082      	sub	sp, #8
 800f6c8:	9c04      	ldr	r4, [sp, #16]
 800f6ca:	9400      	str	r4, [sp, #0]
 800f6cc:	2401      	movs	r4, #1
 800f6ce:	9401      	str	r4, [sp, #4]
 800f6d0:	f7ff ffe2 	bl	800f698 <ucdr_init_buffer_origin_offset_endian>
 800f6d4:	b002      	add	sp, #8
 800f6d6:	bd10      	pop	{r4, pc}

0800f6d8 <ucdr_init_buffer_origin>:
 800f6d8:	b510      	push	{r4, lr}
 800f6da:	2400      	movs	r4, #0
 800f6dc:	b082      	sub	sp, #8
 800f6de:	9400      	str	r4, [sp, #0]
 800f6e0:	f7ff fff0 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 800f6e4:	b002      	add	sp, #8
 800f6e6:	bd10      	pop	{r4, pc}

0800f6e8 <ucdr_init_buffer>:
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	f7ff bff5 	b.w	800f6d8 <ucdr_init_buffer_origin>
 800f6ee:	bf00      	nop

0800f6f0 <ucdr_alignment>:
 800f6f0:	fbb0 f2f1 	udiv	r2, r0, r1
 800f6f4:	fb02 0011 	mls	r0, r2, r1, r0
 800f6f8:	1e4b      	subs	r3, r1, #1
 800f6fa:	1a08      	subs	r0, r1, r0
 800f6fc:	4018      	ands	r0, r3
 800f6fe:	4770      	bx	lr

0800f700 <ucdr_buffer_alignment>:
 800f700:	7d43      	ldrb	r3, [r0, #21]
 800f702:	428b      	cmp	r3, r1
 800f704:	d209      	bcs.n	800f71a <ucdr_buffer_alignment+0x1a>
 800f706:	6903      	ldr	r3, [r0, #16]
 800f708:	1e4a      	subs	r2, r1, #1
 800f70a:	fbb3 f0f1 	udiv	r0, r3, r1
 800f70e:	fb01 3010 	mls	r0, r1, r0, r3
 800f712:	1a09      	subs	r1, r1, r0
 800f714:	ea01 0002 	and.w	r0, r1, r2
 800f718:	4770      	bx	lr
 800f71a:	2000      	movs	r0, #0
 800f71c:	4770      	bx	lr
 800f71e:	bf00      	nop

0800f720 <ucdr_align_to>:
 800f720:	b538      	push	{r3, r4, r5, lr}
 800f722:	4604      	mov	r4, r0
 800f724:	460d      	mov	r5, r1
 800f726:	f7ff ffeb 	bl	800f700 <ucdr_buffer_alignment>
 800f72a:	68a3      	ldr	r3, [r4, #8]
 800f72c:	7565      	strb	r5, [r4, #21]
 800f72e:	181a      	adds	r2, r3, r0
 800f730:	6923      	ldr	r3, [r4, #16]
 800f732:	4418      	add	r0, r3
 800f734:	6863      	ldr	r3, [r4, #4]
 800f736:	4293      	cmp	r3, r2
 800f738:	6120      	str	r0, [r4, #16]
 800f73a:	bf28      	it	cs
 800f73c:	4613      	movcs	r3, r2
 800f73e:	60a3      	str	r3, [r4, #8]
 800f740:	bd38      	pop	{r3, r4, r5, pc}
 800f742:	bf00      	nop

0800f744 <ucdr_buffer_length>:
 800f744:	6882      	ldr	r2, [r0, #8]
 800f746:	6800      	ldr	r0, [r0, #0]
 800f748:	1a10      	subs	r0, r2, r0
 800f74a:	4770      	bx	lr

0800f74c <ucdr_buffer_remaining>:
 800f74c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800f750:	1a10      	subs	r0, r2, r0
 800f752:	4770      	bx	lr

0800f754 <ucdr_check_final_buffer_behavior_array>:
 800f754:	b538      	push	{r3, r4, r5, lr}
 800f756:	7d83      	ldrb	r3, [r0, #22]
 800f758:	b9a3      	cbnz	r3, 800f784 <ucdr_check_final_buffer_behavior_array+0x30>
 800f75a:	4604      	mov	r4, r0
 800f75c:	460d      	mov	r5, r1
 800f75e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800f762:	429a      	cmp	r2, r3
 800f764:	d300      	bcc.n	800f768 <ucdr_check_final_buffer_behavior_array+0x14>
 800f766:	b931      	cbnz	r1, 800f776 <ucdr_check_final_buffer_behavior_array+0x22>
 800f768:	4620      	mov	r0, r4
 800f76a:	f7ff ffef 	bl	800f74c <ucdr_buffer_remaining>
 800f76e:	42a8      	cmp	r0, r5
 800f770:	bf28      	it	cs
 800f772:	4628      	movcs	r0, r5
 800f774:	bd38      	pop	{r3, r4, r5, pc}
 800f776:	6983      	ldr	r3, [r0, #24]
 800f778:	b133      	cbz	r3, 800f788 <ucdr_check_final_buffer_behavior_array+0x34>
 800f77a:	69c1      	ldr	r1, [r0, #28]
 800f77c:	4798      	blx	r3
 800f77e:	75a0      	strb	r0, [r4, #22]
 800f780:	2800      	cmp	r0, #0
 800f782:	d0f1      	beq.n	800f768 <ucdr_check_final_buffer_behavior_array+0x14>
 800f784:	2000      	movs	r0, #0
 800f786:	bd38      	pop	{r3, r4, r5, pc}
 800f788:	2301      	movs	r3, #1
 800f78a:	7583      	strb	r3, [r0, #22]
 800f78c:	e7fa      	b.n	800f784 <ucdr_check_final_buffer_behavior_array+0x30>
 800f78e:	bf00      	nop

0800f790 <ucdr_advance_buffer>:
 800f790:	b538      	push	{r3, r4, r5, lr}
 800f792:	4604      	mov	r4, r0
 800f794:	460d      	mov	r5, r1
 800f796:	f7ff ff53 	bl	800f640 <ucdr_check_buffer_available_for>
 800f79a:	b178      	cbz	r0, 800f7bc <ucdr_advance_buffer+0x2c>
 800f79c:	6923      	ldr	r3, [r4, #16]
 800f79e:	68a2      	ldr	r2, [r4, #8]
 800f7a0:	442b      	add	r3, r5
 800f7a2:	442a      	add	r2, r5
 800f7a4:	6123      	str	r3, [r4, #16]
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	60a2      	str	r2, [r4, #8]
 800f7aa:	7563      	strb	r3, [r4, #21]
 800f7ac:	bd38      	pop	{r3, r4, r5, pc}
 800f7ae:	68a2      	ldr	r2, [r4, #8]
 800f7b0:	1a2d      	subs	r5, r5, r0
 800f7b2:	6923      	ldr	r3, [r4, #16]
 800f7b4:	4402      	add	r2, r0
 800f7b6:	4418      	add	r0, r3
 800f7b8:	60a2      	str	r2, [r4, #8]
 800f7ba:	6120      	str	r0, [r4, #16]
 800f7bc:	4629      	mov	r1, r5
 800f7be:	2201      	movs	r2, #1
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	f7ff ffc7 	bl	800f754 <ucdr_check_final_buffer_behavior_array>
 800f7c6:	2800      	cmp	r0, #0
 800f7c8:	d1f1      	bne.n	800f7ae <ucdr_advance_buffer+0x1e>
 800f7ca:	2301      	movs	r3, #1
 800f7cc:	7563      	strb	r3, [r4, #21]
 800f7ce:	bd38      	pop	{r3, r4, r5, pc}

0800f7d0 <ucdr_serialize_sequence_char>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	4615      	mov	r5, r2
 800f7d4:	460e      	mov	r6, r1
 800f7d6:	7d01      	ldrb	r1, [r0, #20]
 800f7d8:	4604      	mov	r4, r0
 800f7da:	f7fe ff5b 	bl	800e694 <ucdr_serialize_endian_uint32_t>
 800f7de:	b90d      	cbnz	r5, 800f7e4 <ucdr_serialize_sequence_char+0x14>
 800f7e0:	2001      	movs	r0, #1
 800f7e2:	bd70      	pop	{r4, r5, r6, pc}
 800f7e4:	462b      	mov	r3, r5
 800f7e6:	4632      	mov	r2, r6
 800f7e8:	7d21      	ldrb	r1, [r4, #20]
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7f0:	f004 b8ec 	b.w	80139cc <ucdr_serialize_endian_array_char>

0800f7f4 <ucdr_deserialize_sequence_char>:
 800f7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f8:	461d      	mov	r5, r3
 800f7fa:	4616      	mov	r6, r2
 800f7fc:	460f      	mov	r7, r1
 800f7fe:	461a      	mov	r2, r3
 800f800:	7d01      	ldrb	r1, [r0, #20]
 800f802:	4604      	mov	r4, r0
 800f804:	f7ff f86e 	bl	800e8e4 <ucdr_deserialize_endian_uint32_t>
 800f808:	682b      	ldr	r3, [r5, #0]
 800f80a:	429e      	cmp	r6, r3
 800f80c:	d201      	bcs.n	800f812 <ucdr_deserialize_sequence_char+0x1e>
 800f80e:	2201      	movs	r2, #1
 800f810:	75a2      	strb	r2, [r4, #22]
 800f812:	b913      	cbnz	r3, 800f81a <ucdr_deserialize_sequence_char+0x26>
 800f814:	2001      	movs	r0, #1
 800f816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f81a:	463a      	mov	r2, r7
 800f81c:	7d21      	ldrb	r1, [r4, #20]
 800f81e:	4620      	mov	r0, r4
 800f820:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f824:	f004 b904 	b.w	8013a30 <ucdr_deserialize_endian_array_char>

0800f828 <ucdr_serialize_sequence_uint8_t>:
 800f828:	b570      	push	{r4, r5, r6, lr}
 800f82a:	4615      	mov	r5, r2
 800f82c:	460e      	mov	r6, r1
 800f82e:	7d01      	ldrb	r1, [r0, #20]
 800f830:	4604      	mov	r4, r0
 800f832:	f7fe ff2f 	bl	800e694 <ucdr_serialize_endian_uint32_t>
 800f836:	b90d      	cbnz	r5, 800f83c <ucdr_serialize_sequence_uint8_t+0x14>
 800f838:	2001      	movs	r0, #1
 800f83a:	bd70      	pop	{r4, r5, r6, pc}
 800f83c:	462b      	mov	r3, r5
 800f83e:	4632      	mov	r2, r6
 800f840:	7d21      	ldrb	r1, [r4, #20]
 800f842:	4620      	mov	r0, r4
 800f844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f848:	f004 b958 	b.w	8013afc <ucdr_serialize_endian_array_uint8_t>

0800f84c <ucdr_deserialize_sequence_uint8_t>:
 800f84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f850:	461d      	mov	r5, r3
 800f852:	4616      	mov	r6, r2
 800f854:	460f      	mov	r7, r1
 800f856:	461a      	mov	r2, r3
 800f858:	7d01      	ldrb	r1, [r0, #20]
 800f85a:	4604      	mov	r4, r0
 800f85c:	f7ff f842 	bl	800e8e4 <ucdr_deserialize_endian_uint32_t>
 800f860:	682b      	ldr	r3, [r5, #0]
 800f862:	429e      	cmp	r6, r3
 800f864:	d201      	bcs.n	800f86a <ucdr_deserialize_sequence_uint8_t+0x1e>
 800f866:	2201      	movs	r2, #1
 800f868:	75a2      	strb	r2, [r4, #22]
 800f86a:	b913      	cbnz	r3, 800f872 <ucdr_deserialize_sequence_uint8_t+0x26>
 800f86c:	2001      	movs	r0, #1
 800f86e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f872:	463a      	mov	r2, r7
 800f874:	7d21      	ldrb	r1, [r4, #20]
 800f876:	4620      	mov	r0, r4
 800f878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f87c:	f004 b9a4 	b.w	8013bc8 <ucdr_deserialize_endian_array_uint8_t>

0800f880 <rcl_get_zero_initialized_init_options>:
 800f880:	2000      	movs	r0, #0
 800f882:	4770      	bx	lr

0800f884 <rcl_init_options_init>:
 800f884:	b084      	sub	sp, #16
 800f886:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f888:	b097      	sub	sp, #92	; 0x5c
 800f88a:	ae1d      	add	r6, sp, #116	; 0x74
 800f88c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800f890:	2800      	cmp	r0, #0
 800f892:	d058      	beq.n	800f946 <rcl_init_options_init+0xc2>
 800f894:	6803      	ldr	r3, [r0, #0]
 800f896:	4605      	mov	r5, r0
 800f898:	b133      	cbz	r3, 800f8a8 <rcl_init_options_init+0x24>
 800f89a:	2464      	movs	r4, #100	; 0x64
 800f89c:	4620      	mov	r0, r4
 800f89e:	b017      	add	sp, #92	; 0x5c
 800f8a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f8a4:	b004      	add	sp, #16
 800f8a6:	4770      	bx	lr
 800f8a8:	4630      	mov	r0, r6
 800f8aa:	f001 fdf3 	bl	8011494 <rcutils_allocator_is_valid>
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	d049      	beq.n	800f946 <rcl_init_options_init+0xc2>
 800f8b2:	46b4      	mov	ip, r6
 800f8b4:	ac11      	add	r4, sp, #68	; 0x44
 800f8b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f8bc:	f8dc 3000 	ldr.w	r3, [ip]
 800f8c0:	2050      	movs	r0, #80	; 0x50
 800f8c2:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f8c4:	6023      	str	r3, [r4, #0]
 800f8c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8c8:	4798      	blx	r3
 800f8ca:	4604      	mov	r4, r0
 800f8cc:	6028      	str	r0, [r5, #0]
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	d03b      	beq.n	800f94a <rcl_init_options_init+0xc6>
 800f8d2:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800f8d6:	4686      	mov	lr, r0
 800f8d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f8dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f8e0:	f8dc 3000 	ldr.w	r3, [ip]
 800f8e4:	a802      	add	r0, sp, #8
 800f8e6:	f8ce 3000 	str.w	r3, [lr]
 800f8ea:	f001 fff1 	bl	80118d0 <rmw_get_zero_initialized_init_options>
 800f8ee:	f10d 0e08 	add.w	lr, sp, #8
 800f8f2:	f104 0c18 	add.w	ip, r4, #24
 800f8f6:	682f      	ldr	r7, [r5, #0]
 800f8f8:	ac20      	add	r4, sp, #128	; 0x80
 800f8fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f8fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f902:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f906:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f90a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f90e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f912:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f916:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f91a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f91e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f922:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800f926:	f107 0018 	add.w	r0, r7, #24
 800f92a:	f002 f8f9 	bl	8011b20 <rmw_init_options_init>
 800f92e:	4604      	mov	r4, r0
 800f930:	2800      	cmp	r0, #0
 800f932:	d0b3      	beq.n	800f89c <rcl_init_options_init+0x18>
 800f934:	9921      	ldr	r1, [sp, #132]	; 0x84
 800f936:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f938:	6828      	ldr	r0, [r5, #0]
 800f93a:	4798      	blx	r3
 800f93c:	4620      	mov	r0, r4
 800f93e:	f007 ff71 	bl	8017824 <rcl_convert_rmw_ret_to_rcl_ret>
 800f942:	4604      	mov	r4, r0
 800f944:	e7aa      	b.n	800f89c <rcl_init_options_init+0x18>
 800f946:	240b      	movs	r4, #11
 800f948:	e7a8      	b.n	800f89c <rcl_init_options_init+0x18>
 800f94a:	240a      	movs	r4, #10
 800f94c:	e7a6      	b.n	800f89c <rcl_init_options_init+0x18>
 800f94e:	bf00      	nop

0800f950 <rcl_init_options_fini>:
 800f950:	b530      	push	{r4, r5, lr}
 800f952:	b087      	sub	sp, #28
 800f954:	b1f0      	cbz	r0, 800f994 <rcl_init_options_fini+0x44>
 800f956:	6803      	ldr	r3, [r0, #0]
 800f958:	4604      	mov	r4, r0
 800f95a:	b1db      	cbz	r3, 800f994 <rcl_init_options_fini+0x44>
 800f95c:	469c      	mov	ip, r3
 800f95e:	f10d 0e04 	add.w	lr, sp, #4
 800f962:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f966:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f96a:	f8dc 3000 	ldr.w	r3, [ip]
 800f96e:	a801      	add	r0, sp, #4
 800f970:	f8ce 3000 	str.w	r3, [lr]
 800f974:	f001 fd8e 	bl	8011494 <rcutils_allocator_is_valid>
 800f978:	b160      	cbz	r0, 800f994 <rcl_init_options_fini+0x44>
 800f97a:	6820      	ldr	r0, [r4, #0]
 800f97c:	3018      	adds	r0, #24
 800f97e:	f002 f989 	bl	8011c94 <rmw_init_options_fini>
 800f982:	4605      	mov	r5, r0
 800f984:	b950      	cbnz	r0, 800f99c <rcl_init_options_fini+0x4c>
 800f986:	6820      	ldr	r0, [r4, #0]
 800f988:	9b02      	ldr	r3, [sp, #8]
 800f98a:	9905      	ldr	r1, [sp, #20]
 800f98c:	4798      	blx	r3
 800f98e:	4628      	mov	r0, r5
 800f990:	b007      	add	sp, #28
 800f992:	bd30      	pop	{r4, r5, pc}
 800f994:	250b      	movs	r5, #11
 800f996:	4628      	mov	r0, r5
 800f998:	b007      	add	sp, #28
 800f99a:	bd30      	pop	{r4, r5, pc}
 800f99c:	f007 ff42 	bl	8017824 <rcl_convert_rmw_ret_to_rcl_ret>
 800f9a0:	4605      	mov	r5, r0
 800f9a2:	e7f8      	b.n	800f996 <rcl_init_options_fini+0x46>

0800f9a4 <rcl_init_options_copy>:
 800f9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a8:	b094      	sub	sp, #80	; 0x50
 800f9aa:	2800      	cmp	r0, #0
 800f9ac:	d05b      	beq.n	800fa66 <rcl_init_options_copy+0xc2>
 800f9ae:	4604      	mov	r4, r0
 800f9b0:	6800      	ldr	r0, [r0, #0]
 800f9b2:	2800      	cmp	r0, #0
 800f9b4:	d057      	beq.n	800fa66 <rcl_init_options_copy+0xc2>
 800f9b6:	460e      	mov	r6, r1
 800f9b8:	f001 fd6c 	bl	8011494 <rcutils_allocator_is_valid>
 800f9bc:	2e00      	cmp	r6, #0
 800f9be:	d052      	beq.n	800fa66 <rcl_init_options_copy+0xc2>
 800f9c0:	f080 0001 	eor.w	r0, r0, #1
 800f9c4:	b2c0      	uxtb	r0, r0
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	d14d      	bne.n	800fa66 <rcl_init_options_copy+0xc2>
 800f9ca:	6833      	ldr	r3, [r6, #0]
 800f9cc:	b123      	cbz	r3, 800f9d8 <rcl_init_options_copy+0x34>
 800f9ce:	2464      	movs	r4, #100	; 0x64
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	b014      	add	sp, #80	; 0x50
 800f9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9d8:	6827      	ldr	r7, [r4, #0]
 800f9da:	ad0f      	add	r5, sp, #60	; 0x3c
 800f9dc:	46bc      	mov	ip, r7
 800f9de:	f8d7 8000 	ldr.w	r8, [r7]
 800f9e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f9e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f9e8:	f8dc 3000 	ldr.w	r3, [ip]
 800f9ec:	2050      	movs	r0, #80	; 0x50
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	602b      	str	r3, [r5, #0]
 800f9f2:	47c0      	blx	r8
 800f9f4:	4605      	mov	r5, r0
 800f9f6:	6030      	str	r0, [r6, #0]
 800f9f8:	b3d0      	cbz	r0, 800fa70 <rcl_init_options_copy+0xcc>
 800f9fa:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800f9fe:	4686      	mov	lr, r0
 800fa00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fa04:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fa08:	f8dc 3000 	ldr.w	r3, [ip]
 800fa0c:	4668      	mov	r0, sp
 800fa0e:	f8ce 3000 	str.w	r3, [lr]
 800fa12:	f001 ff5d 	bl	80118d0 <rmw_get_zero_initialized_init_options>
 800fa16:	46ee      	mov	lr, sp
 800fa18:	f105 0c18 	add.w	ip, r5, #24
 800fa1c:	6824      	ldr	r4, [r4, #0]
 800fa1e:	6835      	ldr	r5, [r6, #0]
 800fa20:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa24:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa28:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa2c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa30:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800fa34:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fa38:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800fa3c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800fa40:	f104 0018 	add.w	r0, r4, #24
 800fa44:	f105 0118 	add.w	r1, r5, #24
 800fa48:	f002 f8d2 	bl	8011bf0 <rmw_init_options_copy>
 800fa4c:	4604      	mov	r4, r0
 800fa4e:	2800      	cmp	r0, #0
 800fa50:	d0be      	beq.n	800f9d0 <rcl_init_options_copy+0x2c>
 800fa52:	f001 fd45 	bl	80114e0 <rcutils_get_error_string>
 800fa56:	f001 fd5b 	bl	8011510 <rcutils_reset_error>
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f7ff ff78 	bl	800f950 <rcl_init_options_fini>
 800fa60:	b140      	cbz	r0, 800fa74 <rcl_init_options_copy+0xd0>
 800fa62:	4604      	mov	r4, r0
 800fa64:	e7b4      	b.n	800f9d0 <rcl_init_options_copy+0x2c>
 800fa66:	240b      	movs	r4, #11
 800fa68:	4620      	mov	r0, r4
 800fa6a:	b014      	add	sp, #80	; 0x50
 800fa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa70:	240a      	movs	r4, #10
 800fa72:	e7ad      	b.n	800f9d0 <rcl_init_options_copy+0x2c>
 800fa74:	4620      	mov	r0, r4
 800fa76:	b014      	add	sp, #80	; 0x50
 800fa78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa7c:	f007 bed2 	b.w	8017824 <rcl_convert_rmw_ret_to_rcl_ret>

0800fa80 <rcl_init_options_set_domain_id>:
 800fa80:	b120      	cbz	r0, 800fa8c <rcl_init_options_set_domain_id+0xc>
 800fa82:	6803      	ldr	r3, [r0, #0]
 800fa84:	b113      	cbz	r3, 800fa8c <rcl_init_options_set_domain_id+0xc>
 800fa86:	2000      	movs	r0, #0
 800fa88:	6259      	str	r1, [r3, #36]	; 0x24
 800fa8a:	4770      	bx	lr
 800fa8c:	200b      	movs	r0, #11
 800fa8e:	4770      	bx	lr

0800fa90 <rcl_get_zero_initialized_node>:
 800fa90:	4a03      	ldr	r2, [pc, #12]	; (800faa0 <rcl_get_zero_initialized_node+0x10>)
 800fa92:	4603      	mov	r3, r0
 800fa94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fa98:	e883 0003 	stmia.w	r3, {r0, r1}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	4770      	bx	lr
 800faa0:	0801d94c 	.word	0x0801d94c

0800faa4 <rcl_node_init>:
 800faa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faa8:	b0a9      	sub	sp, #164	; 0xa4
 800faaa:	4604      	mov	r4, r0
 800faac:	460e      	mov	r6, r1
 800faae:	4615      	mov	r5, r2
 800fab0:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800fab4:	a823      	add	r0, sp, #140	; 0x8c
 800fab6:	461f      	mov	r7, r3
 800fab8:	f007 ffc4 	bl	8017a44 <rcl_guard_condition_get_default_options>
 800fabc:	f1b8 0f00 	cmp.w	r8, #0
 800fac0:	f000 80f3 	beq.w	800fcaa <rcl_node_init+0x206>
 800fac4:	4640      	mov	r0, r8
 800fac6:	f001 fce5 	bl	8011494 <rcutils_allocator_is_valid>
 800faca:	2d00      	cmp	r5, #0
 800facc:	bf18      	it	ne
 800face:	2c00      	cmpne	r4, #0
 800fad0:	f080 0001 	eor.w	r0, r0, #1
 800fad4:	bf0c      	ite	eq
 800fad6:	f04f 0c01 	moveq.w	ip, #1
 800fada:	f04f 0c00 	movne.w	ip, #0
 800fade:	2e00      	cmp	r6, #0
 800fae0:	bf08      	it	eq
 800fae2:	f04c 0c01 	orreq.w	ip, ip, #1
 800fae6:	ea4c 0c00 	orr.w	ip, ip, r0
 800faea:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800faee:	f040 80dc 	bne.w	800fcaa <rcl_node_init+0x206>
 800faf2:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800faf6:	f1ba 0f00 	cmp.w	sl, #0
 800fafa:	f040 80fc 	bne.w	800fcf6 <rcl_node_init+0x252>
 800fafe:	2f00      	cmp	r7, #0
 800fb00:	f000 80d3 	beq.w	800fcaa <rcl_node_init+0x206>
 800fb04:	4638      	mov	r0, r7
 800fb06:	f007 feab 	bl	8017860 <rcl_context_is_valid>
 800fb0a:	4683      	mov	fp, r0
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	f000 80d2 	beq.w	800fcb6 <rcl_node_init+0x212>
 800fb12:	4652      	mov	r2, sl
 800fb14:	4630      	mov	r0, r6
 800fb16:	a922      	add	r1, sp, #136	; 0x88
 800fb18:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 800fb1c:	f001 ff8a 	bl	8011a34 <rmw_validate_node_name>
 800fb20:	4682      	mov	sl, r0
 800fb22:	2800      	cmp	r0, #0
 800fb24:	f040 80c3 	bne.w	800fcae <rcl_node_init+0x20a>
 800fb28:	9822      	ldr	r0, [sp, #136]	; 0x88
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	f040 80f1 	bne.w	800fd12 <rcl_node_init+0x26e>
 800fb30:	4628      	mov	r0, r5
 800fb32:	f7f0 fb8f 	bl	8000254 <strlen>
 800fb36:	2800      	cmp	r0, #0
 800fb38:	f040 80c0 	bne.w	800fcbc <rcl_node_init+0x218>
 800fb3c:	4d79      	ldr	r5, [pc, #484]	; (800fd24 <rcl_node_init+0x280>)
 800fb3e:	a922      	add	r1, sp, #136	; 0x88
 800fb40:	2200      	movs	r2, #0
 800fb42:	4628      	mov	r0, r5
 800fb44:	f001 ff58 	bl	80119f8 <rmw_validate_namespace>
 800fb48:	4682      	mov	sl, r0
 800fb4a:	2800      	cmp	r0, #0
 800fb4c:	f040 80af 	bne.w	800fcae <rcl_node_init+0x20a>
 800fb50:	9822      	ldr	r0, [sp, #136]	; 0x88
 800fb52:	2800      	cmp	r0, #0
 800fb54:	f040 80d5 	bne.w	800fd02 <rcl_node_init+0x25e>
 800fb58:	f8d8 3000 	ldr.w	r3, [r8]
 800fb5c:	2078      	movs	r0, #120	; 0x78
 800fb5e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fb62:	4798      	blx	r3
 800fb64:	4682      	mov	sl, r0
 800fb66:	6060      	str	r0, [r4, #4]
 800fb68:	2800      	cmp	r0, #0
 800fb6a:	f000 80cf 	beq.w	800fd0c <rcl_node_init+0x268>
 800fb6e:	2200      	movs	r2, #0
 800fb70:	2300      	movs	r3, #0
 800fb72:	a808      	add	r0, sp, #32
 800fb74:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 800fb78:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 800fb7c:	f000 f902 	bl	800fd84 <rcl_node_get_default_options>
 800fb80:	a908      	add	r1, sp, #32
 800fb82:	4650      	mov	r0, sl
 800fb84:	2268      	movs	r2, #104	; 0x68
 800fb86:	f00c fd0a 	bl	801c59e <memcpy>
 800fb8a:	6861      	ldr	r1, [r4, #4]
 800fb8c:	4640      	mov	r0, r8
 800fb8e:	6027      	str	r7, [r4, #0]
 800fb90:	f000 f906 	bl	800fda0 <rcl_node_options_copy>
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d158      	bne.n	800fc4a <rcl_node_init+0x1a6>
 800fb98:	4628      	mov	r0, r5
 800fb9a:	f7f0 fb5b 	bl	8000254 <strlen>
 800fb9e:	4428      	add	r0, r5
 800fba0:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800fba4:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800fba8:	2b2f      	cmp	r3, #47	; 0x2f
 800fbaa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fbae:	9300      	str	r3, [sp, #0]
 800fbb0:	bf0c      	ite	eq
 800fbb2:	4b5d      	ldreq	r3, [pc, #372]	; (800fd28 <rcl_node_init+0x284>)
 800fbb4:	4b5d      	ldrne	r3, [pc, #372]	; (800fd2c <rcl_node_init+0x288>)
 800fbb6:	9302      	str	r3, [sp, #8]
 800fbb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fbbc:	9301      	str	r3, [sp, #4]
 800fbbe:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800fbc2:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fbc6:	f001 fcbf 	bl	8011548 <rcutils_format_string_limit>
 800fbca:	6823      	ldr	r3, [r4, #0]
 800fbcc:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 800fbd0:	4631      	mov	r1, r6
 800fbd2:	6818      	ldr	r0, [r3, #0]
 800fbd4:	462a      	mov	r2, r5
 800fbd6:	6866      	ldr	r6, [r4, #4]
 800fbd8:	3028      	adds	r0, #40	; 0x28
 800fbda:	f002 fa87 	bl	80120ec <rmw_create_node>
 800fbde:	6863      	ldr	r3, [r4, #4]
 800fbe0:	66b0      	str	r0, [r6, #104]	; 0x68
 800fbe2:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fbe4:	2800      	cmp	r0, #0
 800fbe6:	d032      	beq.n	800fc4e <rcl_node_init+0x1aa>
 800fbe8:	f002 fb10 	bl	801220c <rmw_node_get_graph_guard_condition>
 800fbec:	4682      	mov	sl, r0
 800fbee:	b360      	cbz	r0, 800fc4a <rcl_node_init+0x1a6>
 800fbf0:	f8d8 3000 	ldr.w	r3, [r8]
 800fbf4:	2008      	movs	r0, #8
 800fbf6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fbfa:	6866      	ldr	r6, [r4, #4]
 800fbfc:	4798      	blx	r3
 800fbfe:	6863      	ldr	r3, [r4, #4]
 800fc00:	66f0      	str	r0, [r6, #108]	; 0x6c
 800fc02:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800fc06:	f1bb 0f00 	cmp.w	fp, #0
 800fc0a:	d020      	beq.n	800fc4e <rcl_node_init+0x1aa>
 800fc0c:	a806      	add	r0, sp, #24
 800fc0e:	ae23      	add	r6, sp, #140	; 0x8c
 800fc10:	f007 fe8c 	bl	801792c <rcl_get_zero_initialized_guard_condition>
 800fc14:	a806      	add	r0, sp, #24
 800fc16:	6863      	ldr	r3, [r4, #4]
 800fc18:	46c4      	mov	ip, r8
 800fc1a:	c803      	ldmia	r0, {r0, r1}
 800fc1c:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800fc20:	e88b 0003 	stmia.w	fp, {r0, r1}
 800fc24:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800fc28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fc2a:	f8dc 3000 	ldr.w	r3, [ip]
 800fc2e:	6033      	str	r3, [r6, #0]
 800fc30:	ab28      	add	r3, sp, #160	; 0xa0
 800fc32:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800fc36:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fc3a:	4651      	mov	r1, sl
 800fc3c:	463a      	mov	r2, r7
 800fc3e:	4670      	mov	r0, lr
 800fc40:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800fc42:	f007 fe7d 	bl	8017940 <rcl_guard_condition_init_from_rmw>
 800fc46:	4682      	mov	sl, r0
 800fc48:	b328      	cbz	r0, 800fc96 <rcl_node_init+0x1f2>
 800fc4a:	6863      	ldr	r3, [r4, #4]
 800fc4c:	b1f3      	cbz	r3, 800fc8c <rcl_node_init+0x1e8>
 800fc4e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800fc50:	b128      	cbz	r0, 800fc5e <rcl_node_init+0x1ba>
 800fc52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc56:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc5a:	4798      	blx	r3
 800fc5c:	6863      	ldr	r3, [r4, #4]
 800fc5e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fc60:	b110      	cbz	r0, 800fc68 <rcl_node_init+0x1c4>
 800fc62:	f002 fa55 	bl	8012110 <rmw_destroy_node>
 800fc66:	6863      	ldr	r3, [r4, #4]
 800fc68:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800fc6a:	b148      	cbz	r0, 800fc80 <rcl_node_init+0x1dc>
 800fc6c:	f007 fec4 	bl	80179f8 <rcl_guard_condition_fini>
 800fc70:	6863      	ldr	r3, [r4, #4]
 800fc72:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc76:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800fc78:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc7c:	4798      	blx	r3
 800fc7e:	6863      	ldr	r3, [r4, #4]
 800fc80:	4618      	mov	r0, r3
 800fc82:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fc86:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fc8a:	4798      	blx	r3
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	f04f 0a01 	mov.w	sl, #1
 800fc92:	e9c4 3300 	strd	r3, r3, [r4]
 800fc96:	f1b9 0f00 	cmp.w	r9, #0
 800fc9a:	d008      	beq.n	800fcae <rcl_node_init+0x20a>
 800fc9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fca0:	4628      	mov	r0, r5
 800fca2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800fca6:	4798      	blx	r3
 800fca8:	e001      	b.n	800fcae <rcl_node_init+0x20a>
 800fcaa:	f04f 0a0b 	mov.w	sl, #11
 800fcae:	4650      	mov	r0, sl
 800fcb0:	b029      	add	sp, #164	; 0xa4
 800fcb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcb6:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800fcba:	e7f8      	b.n	800fcae <rcl_node_init+0x20a>
 800fcbc:	782b      	ldrb	r3, [r5, #0]
 800fcbe:	2b2f      	cmp	r3, #47	; 0x2f
 800fcc0:	f43f af3d 	beq.w	800fb3e <rcl_node_init+0x9a>
 800fcc4:	9503      	str	r5, [sp, #12]
 800fcc6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800fcca:	9300      	str	r3, [sp, #0]
 800fccc:	4b18      	ldr	r3, [pc, #96]	; (800fd30 <rcl_node_init+0x28c>)
 800fcce:	9302      	str	r3, [sp, #8]
 800fcd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fcd4:	9301      	str	r3, [sp, #4]
 800fcd6:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800fcda:	f001 fc35 	bl	8011548 <rcutils_format_string_limit>
 800fcde:	4605      	mov	r5, r0
 800fce0:	b1e0      	cbz	r0, 800fd1c <rcl_node_init+0x278>
 800fce2:	2200      	movs	r2, #0
 800fce4:	a922      	add	r1, sp, #136	; 0x88
 800fce6:	9222      	str	r2, [sp, #136]	; 0x88
 800fce8:	f001 fe86 	bl	80119f8 <rmw_validate_namespace>
 800fcec:	4682      	mov	sl, r0
 800fcee:	2800      	cmp	r0, #0
 800fcf0:	d1d4      	bne.n	800fc9c <rcl_node_init+0x1f8>
 800fcf2:	46d9      	mov	r9, fp
 800fcf4:	e72c      	b.n	800fb50 <rcl_node_init+0xac>
 800fcf6:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800fcfa:	4650      	mov	r0, sl
 800fcfc:	b029      	add	sp, #164	; 0xa4
 800fcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd02:	f04f 0aca 	mov.w	sl, #202	; 0xca
 800fd06:	f001 fe89 	bl	8011a1c <rmw_namespace_validation_result_string>
 800fd0a:	e7c4      	b.n	800fc96 <rcl_node_init+0x1f2>
 800fd0c:	f04f 0a0a 	mov.w	sl, #10
 800fd10:	e7c1      	b.n	800fc96 <rcl_node_init+0x1f2>
 800fd12:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 800fd16:	f001 fee1 	bl	8011adc <rmw_node_name_validation_result_string>
 800fd1a:	e7c8      	b.n	800fcae <rcl_node_init+0x20a>
 800fd1c:	f04f 0a0a 	mov.w	sl, #10
 800fd20:	e7c5      	b.n	800fcae <rcl_node_init+0x20a>
 800fd22:	bf00      	nop
 800fd24:	0801d934 	.word	0x0801d934
 800fd28:	0801d93c 	.word	0x0801d93c
 800fd2c:	0801d944 	.word	0x0801d944
 800fd30:	0801d938 	.word	0x0801d938

0800fd34 <rcl_node_is_valid>:
 800fd34:	b130      	cbz	r0, 800fd44 <rcl_node_is_valid+0x10>
 800fd36:	6843      	ldr	r3, [r0, #4]
 800fd38:	b123      	cbz	r3, 800fd44 <rcl_node_is_valid+0x10>
 800fd3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd3c:	b113      	cbz	r3, 800fd44 <rcl_node_is_valid+0x10>
 800fd3e:	6800      	ldr	r0, [r0, #0]
 800fd40:	f007 bd8e 	b.w	8017860 <rcl_context_is_valid>
 800fd44:	2000      	movs	r0, #0
 800fd46:	4770      	bx	lr

0800fd48 <rcl_node_get_name>:
 800fd48:	b120      	cbz	r0, 800fd54 <rcl_node_get_name+0xc>
 800fd4a:	6840      	ldr	r0, [r0, #4]
 800fd4c:	b110      	cbz	r0, 800fd54 <rcl_node_get_name+0xc>
 800fd4e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800fd50:	b100      	cbz	r0, 800fd54 <rcl_node_get_name+0xc>
 800fd52:	6880      	ldr	r0, [r0, #8]
 800fd54:	4770      	bx	lr
 800fd56:	bf00      	nop

0800fd58 <rcl_node_get_namespace>:
 800fd58:	b120      	cbz	r0, 800fd64 <rcl_node_get_namespace+0xc>
 800fd5a:	6840      	ldr	r0, [r0, #4]
 800fd5c:	b110      	cbz	r0, 800fd64 <rcl_node_get_namespace+0xc>
 800fd5e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800fd60:	b100      	cbz	r0, 800fd64 <rcl_node_get_namespace+0xc>
 800fd62:	68c0      	ldr	r0, [r0, #12]
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop

0800fd68 <rcl_node_get_options>:
 800fd68:	b128      	cbz	r0, 800fd76 <rcl_node_get_options+0xe>
 800fd6a:	6840      	ldr	r0, [r0, #4]
 800fd6c:	b118      	cbz	r0, 800fd76 <rcl_node_get_options+0xe>
 800fd6e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	bf08      	it	eq
 800fd74:	2000      	moveq	r0, #0
 800fd76:	4770      	bx	lr

0800fd78 <rcl_node_get_rmw_handle>:
 800fd78:	b110      	cbz	r0, 800fd80 <rcl_node_get_rmw_handle+0x8>
 800fd7a:	6840      	ldr	r0, [r0, #4]
 800fd7c:	b100      	cbz	r0, 800fd80 <rcl_node_get_rmw_handle+0x8>
 800fd7e:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800fd80:	4770      	bx	lr
 800fd82:	bf00      	nop

0800fd84 <rcl_node_get_default_options>:
 800fd84:	b510      	push	{r4, lr}
 800fd86:	4604      	mov	r4, r0
 800fd88:	2268      	movs	r2, #104	; 0x68
 800fd8a:	2100      	movs	r1, #0
 800fd8c:	f00c fb3e 	bl	801c40c <memset>
 800fd90:	4620      	mov	r0, r4
 800fd92:	f001 fb71 	bl	8011478 <rcutils_get_default_allocator>
 800fd96:	2301      	movs	r3, #1
 800fd98:	4620      	mov	r0, r4
 800fd9a:	7523      	strb	r3, [r4, #20]
 800fd9c:	bd10      	pop	{r4, pc}
 800fd9e:	bf00      	nop

0800fda0 <rcl_node_options_copy>:
 800fda0:	2800      	cmp	r0, #0
 800fda2:	bf18      	it	ne
 800fda4:	4288      	cmpne	r0, r1
 800fda6:	d01b      	beq.n	800fde0 <rcl_node_options_copy+0x40>
 800fda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdaa:	fab1 f681 	clz	r6, r1
 800fdae:	460c      	mov	r4, r1
 800fdb0:	0976      	lsrs	r6, r6, #5
 800fdb2:	b199      	cbz	r1, 800fddc <rcl_node_options_copy+0x3c>
 800fdb4:	4605      	mov	r5, r0
 800fdb6:	8a87      	ldrh	r7, [r0, #20]
 800fdb8:	4684      	mov	ip, r0
 800fdba:	468e      	mov	lr, r1
 800fdbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fdbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800fdc2:	682b      	ldr	r3, [r5, #0]
 800fdc4:	2250      	movs	r2, #80	; 0x50
 800fdc6:	f10c 0118 	add.w	r1, ip, #24
 800fdca:	f104 0018 	add.w	r0, r4, #24
 800fdce:	f8ce 3000 	str.w	r3, [lr]
 800fdd2:	82a7      	strh	r7, [r4, #20]
 800fdd4:	f00c fbe3 	bl	801c59e <memcpy>
 800fdd8:	4630      	mov	r0, r6
 800fdda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fddc:	200b      	movs	r0, #11
 800fdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fde0:	200b      	movs	r0, #11
 800fde2:	4770      	bx	lr

0800fde4 <rcl_get_zero_initialized_publisher>:
 800fde4:	4b01      	ldr	r3, [pc, #4]	; (800fdec <rcl_get_zero_initialized_publisher+0x8>)
 800fde6:	6818      	ldr	r0, [r3, #0]
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	0801d954 	.word	0x0801d954

0800fdf0 <rcl_publisher_init>:
 800fdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdf4:	b088      	sub	sp, #32
 800fdf6:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800fdf8:	2e00      	cmp	r6, #0
 800fdfa:	d06b      	beq.n	800fed4 <rcl_publisher_init+0xe4>
 800fdfc:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800fe00:	4605      	mov	r5, r0
 800fe02:	460f      	mov	r7, r1
 800fe04:	4690      	mov	r8, r2
 800fe06:	4650      	mov	r0, sl
 800fe08:	4699      	mov	r9, r3
 800fe0a:	f001 fb43 	bl	8011494 <rcutils_allocator_is_valid>
 800fe0e:	f080 0401 	eor.w	r4, r0, #1
 800fe12:	b2e4      	uxtb	r4, r4
 800fe14:	2c00      	cmp	r4, #0
 800fe16:	d15d      	bne.n	800fed4 <rcl_publisher_init+0xe4>
 800fe18:	2d00      	cmp	r5, #0
 800fe1a:	d05b      	beq.n	800fed4 <rcl_publisher_init+0xe4>
 800fe1c:	682b      	ldr	r3, [r5, #0]
 800fe1e:	b123      	cbz	r3, 800fe2a <rcl_publisher_init+0x3a>
 800fe20:	2464      	movs	r4, #100	; 0x64
 800fe22:	4620      	mov	r0, r4
 800fe24:	b008      	add	sp, #32
 800fe26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe2a:	4638      	mov	r0, r7
 800fe2c:	f7ff ff82 	bl	800fd34 <rcl_node_is_valid>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	d054      	beq.n	800fede <rcl_publisher_init+0xee>
 800fe34:	f1b8 0f00 	cmp.w	r8, #0
 800fe38:	d04c      	beq.n	800fed4 <rcl_publisher_init+0xe4>
 800fe3a:	fab9 f389 	clz	r3, r9
 800fe3e:	095b      	lsrs	r3, r3, #5
 800fe40:	f1b9 0f00 	cmp.w	r9, #0
 800fe44:	d046      	beq.n	800fed4 <rcl_publisher_init+0xe4>
 800fe46:	aa07      	add	r2, sp, #28
 800fe48:	9307      	str	r3, [sp, #28]
 800fe4a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800fe4e:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800fe52:	9205      	str	r2, [sp, #20]
 800fe54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800fe58:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800fe5c:	4649      	mov	r1, r9
 800fe5e:	4638      	mov	r0, r7
 800fe60:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800fe64:	f007 ff38 	bl	8017cd8 <rcl_node_resolve_name>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	d14f      	bne.n	800ff0c <rcl_publisher_init+0x11c>
 800fe6c:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800fe6e:	20c8      	movs	r0, #200	; 0xc8
 800fe70:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800fe72:	4798      	blx	r3
 800fe74:	6028      	str	r0, [r5, #0]
 800fe76:	2800      	cmp	r0, #0
 800fe78:	d050      	beq.n	800ff1c <rcl_publisher_init+0x12c>
 800fe7a:	4638      	mov	r0, r7
 800fe7c:	f7ff ff7c 	bl	800fd78 <rcl_node_get_rmw_handle>
 800fe80:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800fe84:	4641      	mov	r1, r8
 800fe86:	9a07      	ldr	r2, [sp, #28]
 800fe88:	9300      	str	r3, [sp, #0]
 800fe8a:	4633      	mov	r3, r6
 800fe8c:	682c      	ldr	r4, [r5, #0]
 800fe8e:	f002 fa27 	bl	80122e0 <rmw_create_publisher>
 800fe92:	682b      	ldr	r3, [r5, #0]
 800fe94:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800fe98:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800fe9c:	b370      	cbz	r0, 800fefc <rcl_publisher_init+0x10c>
 800fe9e:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800fea2:	f002 fb01 	bl	80124a8 <rmw_publisher_get_actual_qos>
 800fea6:	682b      	ldr	r3, [r5, #0]
 800fea8:	4604      	mov	r4, r0
 800feaa:	b9d0      	cbnz	r0, 800fee2 <rcl_publisher_init+0xf2>
 800feac:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800feb0:	4631      	mov	r1, r6
 800feb2:	4618      	mov	r0, r3
 800feb4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800feb8:	2270      	movs	r2, #112	; 0x70
 800feba:	f00c fb70 	bl	801c59e <memcpy>
 800febe:	683a      	ldr	r2, [r7, #0]
 800fec0:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800fec4:	9807      	ldr	r0, [sp, #28]
 800fec6:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800fec8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800feca:	4798      	blx	r3
 800fecc:	4620      	mov	r0, r4
 800fece:	b008      	add	sp, #32
 800fed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fed4:	240b      	movs	r4, #11
 800fed6:	4620      	mov	r0, r4
 800fed8:	b008      	add	sp, #32
 800feda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fede:	24c8      	movs	r4, #200	; 0xc8
 800fee0:	e79f      	b.n	800fe22 <rcl_publisher_init+0x32>
 800fee2:	b1cb      	cbz	r3, 800ff18 <rcl_publisher_init+0x128>
 800fee4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800fee8:	b142      	cbz	r2, 800fefc <rcl_publisher_init+0x10c>
 800feea:	4638      	mov	r0, r7
 800feec:	f7ff ff44 	bl	800fd78 <rcl_node_get_rmw_handle>
 800fef0:	682b      	ldr	r3, [r5, #0]
 800fef2:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800fef6:	f002 faeb 	bl	80124d0 <rmw_destroy_publisher>
 800fefa:	682b      	ldr	r3, [r5, #0]
 800fefc:	4618      	mov	r0, r3
 800fefe:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800ff00:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800ff02:	2401      	movs	r4, #1
 800ff04:	4790      	blx	r2
 800ff06:	2300      	movs	r3, #0
 800ff08:	602b      	str	r3, [r5, #0]
 800ff0a:	e7db      	b.n	800fec4 <rcl_publisher_init+0xd4>
 800ff0c:	2867      	cmp	r0, #103	; 0x67
 800ff0e:	d007      	beq.n	800ff20 <rcl_publisher_init+0x130>
 800ff10:	2869      	cmp	r0, #105	; 0x69
 800ff12:	d005      	beq.n	800ff20 <rcl_publisher_init+0x130>
 800ff14:	280a      	cmp	r0, #10
 800ff16:	d001      	beq.n	800ff1c <rcl_publisher_init+0x12c>
 800ff18:	2401      	movs	r4, #1
 800ff1a:	e7d3      	b.n	800fec4 <rcl_publisher_init+0xd4>
 800ff1c:	240a      	movs	r4, #10
 800ff1e:	e7d1      	b.n	800fec4 <rcl_publisher_init+0xd4>
 800ff20:	2467      	movs	r4, #103	; 0x67
 800ff22:	e7cf      	b.n	800fec4 <rcl_publisher_init+0xd4>

0800ff24 <rcl_publisher_get_default_options>:
 800ff24:	b570      	push	{r4, r5, r6, lr}
 800ff26:	4d14      	ldr	r5, [pc, #80]	; (800ff78 <rcl_publisher_get_default_options+0x54>)
 800ff28:	b088      	sub	sp, #32
 800ff2a:	4604      	mov	r4, r0
 800ff2c:	2250      	movs	r2, #80	; 0x50
 800ff2e:	4913      	ldr	r1, [pc, #76]	; (800ff7c <rcl_publisher_get_default_options+0x58>)
 800ff30:	4628      	mov	r0, r5
 800ff32:	f00c fb34 	bl	801c59e <memcpy>
 800ff36:	a802      	add	r0, sp, #8
 800ff38:	f001 fa9e 	bl	8011478 <rcutils_get_default_allocator>
 800ff3c:	f10d 0c08 	add.w	ip, sp, #8
 800ff40:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800ff44:	466e      	mov	r6, sp
 800ff46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ff4a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ff4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ff52:	4630      	mov	r0, r6
 800ff54:	f8ce 3000 	str.w	r3, [lr]
 800ff58:	f001 fcca 	bl	80118f0 <rmw_get_default_publisher_options>
 800ff5c:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800ff60:	2270      	movs	r2, #112	; 0x70
 800ff62:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ff66:	e883 0003 	stmia.w	r3, {r0, r1}
 800ff6a:	4629      	mov	r1, r5
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	f00c fb16 	bl	801c59e <memcpy>
 800ff72:	4620      	mov	r0, r4
 800ff74:	b008      	add	sp, #32
 800ff76:	bd70      	pop	{r4, r5, r6, pc}
 800ff78:	2000dd90 	.word	0x2000dd90
 800ff7c:	0801d958 	.word	0x0801d958

0800ff80 <rcl_publish>:
 800ff80:	b1f8      	cbz	r0, 800ffc2 <rcl_publish+0x42>
 800ff82:	6803      	ldr	r3, [r0, #0]
 800ff84:	b570      	push	{r4, r5, r6, lr}
 800ff86:	4604      	mov	r4, r0
 800ff88:	b1b3      	cbz	r3, 800ffb8 <rcl_publish+0x38>
 800ff8a:	4616      	mov	r6, r2
 800ff8c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ff90:	b192      	cbz	r2, 800ffb8 <rcl_publish+0x38>
 800ff92:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ff96:	460d      	mov	r5, r1
 800ff98:	f007 fc62 	bl	8017860 <rcl_context_is_valid>
 800ff9c:	b160      	cbz	r0, 800ffb8 <rcl_publish+0x38>
 800ff9e:	6823      	ldr	r3, [r4, #0]
 800ffa0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800ffa4:	b140      	cbz	r0, 800ffb8 <rcl_publish+0x38>
 800ffa6:	b155      	cbz	r5, 800ffbe <rcl_publish+0x3e>
 800ffa8:	4632      	mov	r2, r6
 800ffaa:	4629      	mov	r1, r5
 800ffac:	f002 f938 	bl	8012220 <rmw_publish>
 800ffb0:	3800      	subs	r0, #0
 800ffb2:	bf18      	it	ne
 800ffb4:	2001      	movne	r0, #1
 800ffb6:	bd70      	pop	{r4, r5, r6, pc}
 800ffb8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ffbc:	bd70      	pop	{r4, r5, r6, pc}
 800ffbe:	200b      	movs	r0, #11
 800ffc0:	bd70      	pop	{r4, r5, r6, pc}
 800ffc2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800ffc6:	4770      	bx	lr

0800ffc8 <rcl_publisher_is_valid>:
 800ffc8:	b1a0      	cbz	r0, 800fff4 <rcl_publisher_is_valid+0x2c>
 800ffca:	6803      	ldr	r3, [r0, #0]
 800ffcc:	b510      	push	{r4, lr}
 800ffce:	4604      	mov	r4, r0
 800ffd0:	b173      	cbz	r3, 800fff0 <rcl_publisher_is_valid+0x28>
 800ffd2:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800ffd6:	b15a      	cbz	r2, 800fff0 <rcl_publisher_is_valid+0x28>
 800ffd8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800ffdc:	f007 fc40 	bl	8017860 <rcl_context_is_valid>
 800ffe0:	b130      	cbz	r0, 800fff0 <rcl_publisher_is_valid+0x28>
 800ffe2:	6823      	ldr	r3, [r4, #0]
 800ffe4:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800ffe8:	3800      	subs	r0, #0
 800ffea:	bf18      	it	ne
 800ffec:	2001      	movne	r0, #1
 800ffee:	bd10      	pop	{r4, pc}
 800fff0:	2000      	movs	r0, #0
 800fff2:	bd10      	pop	{r4, pc}
 800fff4:	2000      	movs	r0, #0
 800fff6:	4770      	bx	lr

0800fff8 <rcl_publisher_is_valid_except_context>:
 800fff8:	b130      	cbz	r0, 8010008 <rcl_publisher_is_valid_except_context+0x10>
 800fffa:	6800      	ldr	r0, [r0, #0]
 800fffc:	b120      	cbz	r0, 8010008 <rcl_publisher_is_valid_except_context+0x10>
 800fffe:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 8010002:	3800      	subs	r0, #0
 8010004:	bf18      	it	ne
 8010006:	2001      	movne	r0, #1
 8010008:	4770      	bx	lr
 801000a:	bf00      	nop

0801000c <rcl_get_zero_initialized_service>:
 801000c:	4b01      	ldr	r3, [pc, #4]	; (8010014 <rcl_get_zero_initialized_service+0x8>)
 801000e:	6818      	ldr	r0, [r3, #0]
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	0801d9a8 	.word	0x0801d9a8

08010018 <rcl_service_init>:
 8010018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801001c:	b088      	sub	sp, #32
 801001e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010020:	b1ff      	cbz	r7, 8010062 <rcl_service_init+0x4a>
 8010022:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 8010026:	4605      	mov	r5, r0
 8010028:	460e      	mov	r6, r1
 801002a:	4691      	mov	r9, r2
 801002c:	4650      	mov	r0, sl
 801002e:	4698      	mov	r8, r3
 8010030:	f001 fa30 	bl	8011494 <rcutils_allocator_is_valid>
 8010034:	f080 0401 	eor.w	r4, r0, #1
 8010038:	b2e4      	uxtb	r4, r4
 801003a:	b994      	cbnz	r4, 8010062 <rcl_service_init+0x4a>
 801003c:	b18d      	cbz	r5, 8010062 <rcl_service_init+0x4a>
 801003e:	4630      	mov	r0, r6
 8010040:	f7ff fe78 	bl	800fd34 <rcl_node_is_valid>
 8010044:	2800      	cmp	r0, #0
 8010046:	d05d      	beq.n	8010104 <rcl_service_init+0xec>
 8010048:	f1b8 0f00 	cmp.w	r8, #0
 801004c:	d009      	beq.n	8010062 <rcl_service_init+0x4a>
 801004e:	f1b9 0f00 	cmp.w	r9, #0
 8010052:	d006      	beq.n	8010062 <rcl_service_init+0x4a>
 8010054:	682b      	ldr	r3, [r5, #0]
 8010056:	b14b      	cbz	r3, 801006c <rcl_service_init+0x54>
 8010058:	2464      	movs	r4, #100	; 0x64
 801005a:	4620      	mov	r0, r4
 801005c:	b008      	add	sp, #32
 801005e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010062:	240b      	movs	r4, #11
 8010064:	4620      	mov	r0, r4
 8010066:	b008      	add	sp, #32
 8010068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801006c:	aa07      	add	r2, sp, #28
 801006e:	9304      	str	r3, [sp, #16]
 8010070:	9307      	str	r3, [sp, #28]
 8010072:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010076:	9205      	str	r2, [sp, #20]
 8010078:	2201      	movs	r2, #1
 801007a:	9203      	str	r2, [sp, #12]
 801007c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010080:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8010084:	4641      	mov	r1, r8
 8010086:	4630      	mov	r0, r6
 8010088:	e89a 000c 	ldmia.w	sl, {r2, r3}
 801008c:	f007 fe24 	bl	8017cd8 <rcl_node_resolve_name>
 8010090:	2800      	cmp	r0, #0
 8010092:	d146      	bne.n	8010122 <rcl_service_init+0x10a>
 8010094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010096:	f44f 7088 	mov.w	r0, #272	; 0x110
 801009a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801009c:	4798      	blx	r3
 801009e:	6028      	str	r0, [r5, #0]
 80100a0:	2800      	cmp	r0, #0
 80100a2:	d046      	beq.n	8010132 <rcl_service_init+0x11a>
 80100a4:	4630      	mov	r0, r6
 80100a6:	f7ff fe67 	bl	800fd78 <rcl_node_get_rmw_handle>
 80100aa:	463b      	mov	r3, r7
 80100ac:	4649      	mov	r1, r9
 80100ae:	9a07      	ldr	r2, [sp, #28]
 80100b0:	682c      	ldr	r4, [r5, #0]
 80100b2:	f002 fbb1 	bl	8012818 <rmw_create_service>
 80100b6:	682b      	ldr	r3, [r5, #0]
 80100b8:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 80100bc:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80100c0:	b338      	cbz	r0, 8010112 <rcl_service_init+0xfa>
 80100c2:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80100c6:	f002 fcd9 	bl	8012a7c <rmw_service_request_subscription_get_actual_qos>
 80100ca:	bb00      	cbnz	r0, 801010e <rcl_service_init+0xf6>
 80100cc:	682b      	ldr	r3, [r5, #0]
 80100ce:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80100d2:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80100d6:	f002 fcbd 	bl	8012a54 <rmw_service_response_publisher_get_actual_qos>
 80100da:	4604      	mov	r4, r0
 80100dc:	b9b8      	cbnz	r0, 801010e <rcl_service_init+0xf6>
 80100de:	6828      	ldr	r0, [r5, #0]
 80100e0:	2268      	movs	r2, #104	; 0x68
 80100e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80100e6:	4639      	mov	r1, r7
 80100e8:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 80100ec:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 80100f0:	f00c fa55 	bl	801c59e <memcpy>
 80100f4:	9807      	ldr	r0, [sp, #28]
 80100f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100f8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80100fa:	4798      	blx	r3
 80100fc:	4620      	mov	r0, r4
 80100fe:	b008      	add	sp, #32
 8010100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010104:	24c8      	movs	r4, #200	; 0xc8
 8010106:	4620      	mov	r0, r4
 8010108:	b008      	add	sp, #32
 801010a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801010e:	682b      	ldr	r3, [r5, #0]
 8010110:	b16b      	cbz	r3, 801012e <rcl_service_init+0x116>
 8010112:	4618      	mov	r0, r3
 8010114:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010116:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010118:	2401      	movs	r4, #1
 801011a:	4790      	blx	r2
 801011c:	2300      	movs	r3, #0
 801011e:	602b      	str	r3, [r5, #0]
 8010120:	e7e8      	b.n	80100f4 <rcl_service_init+0xdc>
 8010122:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8010126:	2b01      	cmp	r3, #1
 8010128:	d905      	bls.n	8010136 <rcl_service_init+0x11e>
 801012a:	280a      	cmp	r0, #10
 801012c:	d001      	beq.n	8010132 <rcl_service_init+0x11a>
 801012e:	2401      	movs	r4, #1
 8010130:	e7e0      	b.n	80100f4 <rcl_service_init+0xdc>
 8010132:	240a      	movs	r4, #10
 8010134:	e7de      	b.n	80100f4 <rcl_service_init+0xdc>
 8010136:	2468      	movs	r4, #104	; 0x68
 8010138:	e7dc      	b.n	80100f4 <rcl_service_init+0xdc>
 801013a:	bf00      	nop

0801013c <rcl_service_get_default_options>:
 801013c:	b530      	push	{r4, r5, lr}
 801013e:	4d0f      	ldr	r5, [pc, #60]	; (801017c <rcl_service_get_default_options+0x40>)
 8010140:	b087      	sub	sp, #28
 8010142:	4604      	mov	r4, r0
 8010144:	2250      	movs	r2, #80	; 0x50
 8010146:	490e      	ldr	r1, [pc, #56]	; (8010180 <rcl_service_get_default_options+0x44>)
 8010148:	4628      	mov	r0, r5
 801014a:	f00c fa28 	bl	801c59e <memcpy>
 801014e:	4668      	mov	r0, sp
 8010150:	f001 f992 	bl	8011478 <rcutils_get_default_allocator>
 8010154:	46ec      	mov	ip, sp
 8010156:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 801015a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801015e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010162:	f8dc 3000 	ldr.w	r3, [ip]
 8010166:	2268      	movs	r2, #104	; 0x68
 8010168:	4629      	mov	r1, r5
 801016a:	4620      	mov	r0, r4
 801016c:	f8ce 3000 	str.w	r3, [lr]
 8010170:	f00c fa15 	bl	801c59e <memcpy>
 8010174:	4620      	mov	r0, r4
 8010176:	b007      	add	sp, #28
 8010178:	bd30      	pop	{r4, r5, pc}
 801017a:	bf00      	nop
 801017c:	2000de00 	.word	0x2000de00
 8010180:	0801d9b0 	.word	0x0801d9b0

08010184 <rcl_service_get_rmw_handle>:
 8010184:	b118      	cbz	r0, 801018e <rcl_service_get_rmw_handle+0xa>
 8010186:	6800      	ldr	r0, [r0, #0]
 8010188:	b108      	cbz	r0, 801018e <rcl_service_get_rmw_handle+0xa>
 801018a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801018e:	4770      	bx	lr

08010190 <rcl_take_request>:
 8010190:	b570      	push	{r4, r5, r6, lr}
 8010192:	468e      	mov	lr, r1
 8010194:	b08c      	sub	sp, #48	; 0x30
 8010196:	460c      	mov	r4, r1
 8010198:	4616      	mov	r6, r2
 801019a:	f10d 0c18 	add.w	ip, sp, #24
 801019e:	4605      	mov	r5, r0
 80101a0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80101a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101a8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80101ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80101b0:	b30d      	cbz	r5, 80101f6 <rcl_take_request+0x66>
 80101b2:	682b      	ldr	r3, [r5, #0]
 80101b4:	b1fb      	cbz	r3, 80101f6 <rcl_take_request+0x66>
 80101b6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80101ba:	b1e0      	cbz	r0, 80101f6 <rcl_take_request+0x66>
 80101bc:	b336      	cbz	r6, 801020c <rcl_take_request+0x7c>
 80101be:	2300      	movs	r3, #0
 80101c0:	4632      	mov	r2, r6
 80101c2:	a902      	add	r1, sp, #8
 80101c4:	f88d 3007 	strb.w	r3, [sp, #7]
 80101c8:	f10d 0307 	add.w	r3, sp, #7
 80101cc:	f002 fa22 	bl	8012614 <rmw_take_request>
 80101d0:	4605      	mov	r5, r0
 80101d2:	b198      	cbz	r0, 80101fc <rcl_take_request+0x6c>
 80101d4:	280a      	cmp	r0, #10
 80101d6:	bf18      	it	ne
 80101d8:	2501      	movne	r5, #1
 80101da:	f10d 0e18 	add.w	lr, sp, #24
 80101de:	46a4      	mov	ip, r4
 80101e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80101e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80101e8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80101ec:	e88c 0003 	stmia.w	ip, {r0, r1}
 80101f0:	4628      	mov	r0, r5
 80101f2:	b00c      	add	sp, #48	; 0x30
 80101f4:	bd70      	pop	{r4, r5, r6, pc}
 80101f6:	f44f 7516 	mov.w	r5, #600	; 0x258
 80101fa:	e7ee      	b.n	80101da <rcl_take_request+0x4a>
 80101fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010200:	f240 2359 	movw	r3, #601	; 0x259
 8010204:	2a00      	cmp	r2, #0
 8010206:	bf08      	it	eq
 8010208:	461d      	moveq	r5, r3
 801020a:	e7e6      	b.n	80101da <rcl_take_request+0x4a>
 801020c:	250b      	movs	r5, #11
 801020e:	e7e4      	b.n	80101da <rcl_take_request+0x4a>

08010210 <rcl_send_response>:
 8010210:	b170      	cbz	r0, 8010230 <rcl_send_response+0x20>
 8010212:	6800      	ldr	r0, [r0, #0]
 8010214:	b160      	cbz	r0, 8010230 <rcl_send_response+0x20>
 8010216:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801021a:	b148      	cbz	r0, 8010230 <rcl_send_response+0x20>
 801021c:	b169      	cbz	r1, 801023a <rcl_send_response+0x2a>
 801021e:	b510      	push	{r4, lr}
 8010220:	b14a      	cbz	r2, 8010236 <rcl_send_response+0x26>
 8010222:	f002 fa55 	bl	80126d0 <rmw_send_response>
 8010226:	b110      	cbz	r0, 801022e <rcl_send_response+0x1e>
 8010228:	2802      	cmp	r0, #2
 801022a:	bf18      	it	ne
 801022c:	2001      	movne	r0, #1
 801022e:	bd10      	pop	{r4, pc}
 8010230:	f44f 7016 	mov.w	r0, #600	; 0x258
 8010234:	4770      	bx	lr
 8010236:	200b      	movs	r0, #11
 8010238:	bd10      	pop	{r4, pc}
 801023a:	200b      	movs	r0, #11
 801023c:	4770      	bx	lr
 801023e:	bf00      	nop

08010240 <rcl_service_is_valid>:
 8010240:	b130      	cbz	r0, 8010250 <rcl_service_is_valid+0x10>
 8010242:	6800      	ldr	r0, [r0, #0]
 8010244:	b120      	cbz	r0, 8010250 <rcl_service_is_valid+0x10>
 8010246:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801024a:	3800      	subs	r0, #0
 801024c:	bf18      	it	ne
 801024e:	2001      	movne	r0, #1
 8010250:	4770      	bx	lr
 8010252:	bf00      	nop

08010254 <rcl_get_zero_initialized_subscription>:
 8010254:	4b01      	ldr	r3, [pc, #4]	; (801025c <rcl_get_zero_initialized_subscription+0x8>)
 8010256:	6818      	ldr	r0, [r3, #0]
 8010258:	4770      	bx	lr
 801025a:	bf00      	nop
 801025c:	0801da00 	.word	0x0801da00

08010260 <rcl_subscription_init>:
 8010260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010264:	b088      	sub	sp, #32
 8010266:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8010268:	b1ff      	cbz	r7, 80102aa <rcl_subscription_init+0x4a>
 801026a:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 801026e:	4605      	mov	r5, r0
 8010270:	460e      	mov	r6, r1
 8010272:	4691      	mov	r9, r2
 8010274:	4650      	mov	r0, sl
 8010276:	4698      	mov	r8, r3
 8010278:	f001 f90c 	bl	8011494 <rcutils_allocator_is_valid>
 801027c:	f080 0401 	eor.w	r4, r0, #1
 8010280:	b2e4      	uxtb	r4, r4
 8010282:	b994      	cbnz	r4, 80102aa <rcl_subscription_init+0x4a>
 8010284:	b18d      	cbz	r5, 80102aa <rcl_subscription_init+0x4a>
 8010286:	4630      	mov	r0, r6
 8010288:	f7ff fd54 	bl	800fd34 <rcl_node_is_valid>
 801028c:	2800      	cmp	r0, #0
 801028e:	d055      	beq.n	801033c <rcl_subscription_init+0xdc>
 8010290:	f1b9 0f00 	cmp.w	r9, #0
 8010294:	d009      	beq.n	80102aa <rcl_subscription_init+0x4a>
 8010296:	f1b8 0f00 	cmp.w	r8, #0
 801029a:	d006      	beq.n	80102aa <rcl_subscription_init+0x4a>
 801029c:	682b      	ldr	r3, [r5, #0]
 801029e:	b14b      	cbz	r3, 80102b4 <rcl_subscription_init+0x54>
 80102a0:	2464      	movs	r4, #100	; 0x64
 80102a2:	4620      	mov	r0, r4
 80102a4:	b008      	add	sp, #32
 80102a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102aa:	240b      	movs	r4, #11
 80102ac:	4620      	mov	r0, r4
 80102ae:	b008      	add	sp, #32
 80102b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102b4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80102b8:	aa07      	add	r2, sp, #28
 80102ba:	9307      	str	r3, [sp, #28]
 80102bc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80102c0:	9205      	str	r2, [sp, #20]
 80102c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80102c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80102ca:	4641      	mov	r1, r8
 80102cc:	4630      	mov	r0, r6
 80102ce:	e89a 000c 	ldmia.w	sl, {r2, r3}
 80102d2:	f007 fd01 	bl	8017cd8 <rcl_node_resolve_name>
 80102d6:	2800      	cmp	r0, #0
 80102d8:	d15f      	bne.n	801039a <rcl_subscription_init+0x13a>
 80102da:	21c8      	movs	r1, #200	; 0xc8
 80102dc:	2001      	movs	r0, #1
 80102de:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 80102e2:	4798      	blx	r3
 80102e4:	6028      	str	r0, [r5, #0]
 80102e6:	2800      	cmp	r0, #0
 80102e8:	d05f      	beq.n	80103aa <rcl_subscription_init+0x14a>
 80102ea:	4630      	mov	r0, r6
 80102ec:	f7ff fd44 	bl	800fd78 <rcl_node_get_rmw_handle>
 80102f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80102f4:	4649      	mov	r1, r9
 80102f6:	9a07      	ldr	r2, [sp, #28]
 80102f8:	9300      	str	r3, [sp, #0]
 80102fa:	463b      	mov	r3, r7
 80102fc:	682c      	ldr	r4, [r5, #0]
 80102fe:	f002 fbd1 	bl	8012aa4 <rmw_create_subscription>
 8010302:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 8010306:	682c      	ldr	r4, [r5, #0]
 8010308:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 801030c:	b348      	cbz	r0, 8010362 <rcl_subscription_init+0x102>
 801030e:	f104 0170 	add.w	r1, r4, #112	; 0x70
 8010312:	f002 fcbd 	bl	8012c90 <rmw_subscription_get_actual_qos>
 8010316:	4604      	mov	r4, r0
 8010318:	b9a8      	cbnz	r0, 8010346 <rcl_subscription_init+0xe6>
 801031a:	6828      	ldr	r0, [r5, #0]
 801031c:	2270      	movs	r2, #112	; 0x70
 801031e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8010322:	4639      	mov	r1, r7
 8010324:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 8010328:	f00c f939 	bl	801c59e <memcpy>
 801032c:	9807      	ldr	r0, [sp, #28]
 801032e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010330:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010332:	4798      	blx	r3
 8010334:	4620      	mov	r0, r4
 8010336:	b008      	add	sp, #32
 8010338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801033c:	24c8      	movs	r4, #200	; 0xc8
 801033e:	4620      	mov	r0, r4
 8010340:	b008      	add	sp, #32
 8010342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010346:	682c      	ldr	r4, [r5, #0]
 8010348:	b36c      	cbz	r4, 80103a6 <rcl_subscription_init+0x146>
 801034a:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 801034e:	b14b      	cbz	r3, 8010364 <rcl_subscription_init+0x104>
 8010350:	4630      	mov	r0, r6
 8010352:	f7ff fd11 	bl	800fd78 <rcl_node_get_rmw_handle>
 8010356:	682b      	ldr	r3, [r5, #0]
 8010358:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 801035c:	f002 fcac 	bl	8012cb8 <rmw_destroy_subscription>
 8010360:	682c      	ldr	r4, [r5, #0]
 8010362:	b194      	cbz	r4, 801038a <rcl_subscription_init+0x12a>
 8010364:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8010368:	4630      	mov	r0, r6
 801036a:	f001 f893 	bl	8011494 <rcutils_allocator_is_valid>
 801036e:	b158      	cbz	r0, 8010388 <rcl_subscription_init+0x128>
 8010370:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010372:	b148      	cbz	r0, 8010388 <rcl_subscription_init+0x128>
 8010374:	4631      	mov	r1, r6
 8010376:	f001 fac3 	bl	8011900 <rmw_subscription_content_filter_options_fini>
 801037a:	4606      	mov	r6, r0
 801037c:	b9c8      	cbnz	r0, 80103b2 <rcl_subscription_init+0x152>
 801037e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010380:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8010382:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8010384:	4798      	blx	r3
 8010386:	66e6      	str	r6, [r4, #108]	; 0x6c
 8010388:	682c      	ldr	r4, [r5, #0]
 801038a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801038c:	4620      	mov	r0, r4
 801038e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010390:	2401      	movs	r4, #1
 8010392:	4798      	blx	r3
 8010394:	2300      	movs	r3, #0
 8010396:	602b      	str	r3, [r5, #0]
 8010398:	e7c8      	b.n	801032c <rcl_subscription_init+0xcc>
 801039a:	2867      	cmp	r0, #103	; 0x67
 801039c:	d007      	beq.n	80103ae <rcl_subscription_init+0x14e>
 801039e:	2869      	cmp	r0, #105	; 0x69
 80103a0:	d005      	beq.n	80103ae <rcl_subscription_init+0x14e>
 80103a2:	280a      	cmp	r0, #10
 80103a4:	d001      	beq.n	80103aa <rcl_subscription_init+0x14a>
 80103a6:	2401      	movs	r4, #1
 80103a8:	e7c0      	b.n	801032c <rcl_subscription_init+0xcc>
 80103aa:	240a      	movs	r4, #10
 80103ac:	e7be      	b.n	801032c <rcl_subscription_init+0xcc>
 80103ae:	2467      	movs	r4, #103	; 0x67
 80103b0:	e7bc      	b.n	801032c <rcl_subscription_init+0xcc>
 80103b2:	f007 fa37 	bl	8017824 <rcl_convert_rmw_ret_to_rcl_ret>
 80103b6:	682c      	ldr	r4, [r5, #0]
 80103b8:	e7e7      	b.n	801038a <rcl_subscription_init+0x12a>
 80103ba:	bf00      	nop

080103bc <rcl_subscription_get_default_options>:
 80103bc:	b570      	push	{r4, r5, r6, lr}
 80103be:	4d14      	ldr	r5, [pc, #80]	; (8010410 <rcl_subscription_get_default_options+0x54>)
 80103c0:	b08a      	sub	sp, #40	; 0x28
 80103c2:	4604      	mov	r4, r0
 80103c4:	2250      	movs	r2, #80	; 0x50
 80103c6:	4913      	ldr	r1, [pc, #76]	; (8010414 <rcl_subscription_get_default_options+0x58>)
 80103c8:	4628      	mov	r0, r5
 80103ca:	f00c f8e8 	bl	801c59e <memcpy>
 80103ce:	a804      	add	r0, sp, #16
 80103d0:	f001 f852 	bl	8011478 <rcutils_get_default_allocator>
 80103d4:	f10d 0c10 	add.w	ip, sp, #16
 80103d8:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 80103dc:	466e      	mov	r6, sp
 80103de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80103e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80103e6:	f8dc 3000 	ldr.w	r3, [ip]
 80103ea:	4630      	mov	r0, r6
 80103ec:	f8ce 3000 	str.w	r3, [lr]
 80103f0:	f001 faa0 	bl	8011934 <rmw_get_default_subscription_options>
 80103f4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 80103f8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80103fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8010400:	2270      	movs	r2, #112	; 0x70
 8010402:	4629      	mov	r1, r5
 8010404:	4620      	mov	r0, r4
 8010406:	f00c f8ca 	bl	801c59e <memcpy>
 801040a:	4620      	mov	r0, r4
 801040c:	b00a      	add	sp, #40	; 0x28
 801040e:	bd70      	pop	{r4, r5, r6, pc}
 8010410:	2000de68 	.word	0x2000de68
 8010414:	0801da08 	.word	0x0801da08

08010418 <rcl_take>:
 8010418:	2800      	cmp	r0, #0
 801041a:	d049      	beq.n	80104b0 <rcl_take+0x98>
 801041c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010420:	4615      	mov	r5, r2
 8010422:	6802      	ldr	r2, [r0, #0]
 8010424:	b0a4      	sub	sp, #144	; 0x90
 8010426:	4604      	mov	r4, r0
 8010428:	2a00      	cmp	r2, #0
 801042a:	d039      	beq.n	80104a0 <rcl_take+0x88>
 801042c:	461f      	mov	r7, r3
 801042e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8010432:	b3ab      	cbz	r3, 80104a0 <rcl_take+0x88>
 8010434:	460e      	mov	r6, r1
 8010436:	2900      	cmp	r1, #0
 8010438:	d038      	beq.n	80104ac <rcl_take+0x94>
 801043a:	2d00      	cmp	r5, #0
 801043c:	d03c      	beq.n	80104b8 <rcl_take+0xa0>
 801043e:	a802      	add	r0, sp, #8
 8010440:	f04f 0800 	mov.w	r8, #0
 8010444:	f001 fa7c 	bl	8011940 <rmw_get_zero_initialized_message_info>
 8010448:	f10d 0c08 	add.w	ip, sp, #8
 801044c:	46ae      	mov	lr, r5
 801044e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010452:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010456:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801045a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801045e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010462:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010466:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801046a:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 801046e:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 8010472:	462b      	mov	r3, r5
 8010474:	6820      	ldr	r0, [r4, #0]
 8010476:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 801047a:	4631      	mov	r1, r6
 801047c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 8010480:	9700      	str	r7, [sp, #0]
 8010482:	f002 fc7b 	bl	8012d7c <rmw_take_with_info>
 8010486:	4603      	mov	r3, r0
 8010488:	b9c0      	cbnz	r0, 80104bc <rcl_take+0xa4>
 801048a:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 801048e:	f240 1291 	movw	r2, #401	; 0x191
 8010492:	2900      	cmp	r1, #0
 8010494:	bf08      	it	eq
 8010496:	4613      	moveq	r3, r2
 8010498:	4618      	mov	r0, r3
 801049a:	b024      	add	sp, #144	; 0x90
 801049c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104a0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80104a4:	4618      	mov	r0, r3
 80104a6:	b024      	add	sp, #144	; 0x90
 80104a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104ac:	230b      	movs	r3, #11
 80104ae:	e7f3      	b.n	8010498 <rcl_take+0x80>
 80104b0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80104b4:	4618      	mov	r0, r3
 80104b6:	4770      	bx	lr
 80104b8:	ad14      	add	r5, sp, #80	; 0x50
 80104ba:	e7c0      	b.n	801043e <rcl_take+0x26>
 80104bc:	f007 f9b2 	bl	8017824 <rcl_convert_rmw_ret_to_rcl_ret>
 80104c0:	4603      	mov	r3, r0
 80104c2:	e7e9      	b.n	8010498 <rcl_take+0x80>

080104c4 <rcl_subscription_get_rmw_handle>:
 80104c4:	b118      	cbz	r0, 80104ce <rcl_subscription_get_rmw_handle+0xa>
 80104c6:	6800      	ldr	r0, [r0, #0]
 80104c8:	b108      	cbz	r0, 80104ce <rcl_subscription_get_rmw_handle+0xa>
 80104ca:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80104ce:	4770      	bx	lr

080104d0 <rcl_subscription_is_valid>:
 80104d0:	b130      	cbz	r0, 80104e0 <rcl_subscription_is_valid+0x10>
 80104d2:	6800      	ldr	r0, [r0, #0]
 80104d4:	b120      	cbz	r0, 80104e0 <rcl_subscription_is_valid+0x10>
 80104d6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 80104da:	3800      	subs	r0, #0
 80104dc:	bf18      	it	ne
 80104de:	2001      	movne	r0, #1
 80104e0:	4770      	bx	lr
 80104e2:	bf00      	nop

080104e4 <_rclc_check_for_new_data>:
 80104e4:	2800      	cmp	r0, #0
 80104e6:	d046      	beq.n	8010576 <_rclc_check_for_new_data+0x92>
 80104e8:	4603      	mov	r3, r0
 80104ea:	b530      	push	{r4, r5, lr}
 80104ec:	7802      	ldrb	r2, [r0, #0]
 80104ee:	b085      	sub	sp, #20
 80104f0:	2a0a      	cmp	r2, #10
 80104f2:	d842      	bhi.n	801057a <_rclc_check_for_new_data+0x96>
 80104f4:	e8df f002 	tbb	[pc, r2]
 80104f8:	14181212 	.word	0x14181212
 80104fc:	06060614 	.word	0x06060614
 8010500:	2e1a      	.short	0x2e1a
 8010502:	16          	.byte	0x16
 8010503:	00          	.byte	0x00
 8010504:	6a0a      	ldr	r2, [r1, #32]
 8010506:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010508:	2000      	movs	r0, #0
 801050a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801050e:	1a12      	subs	r2, r2, r0
 8010510:	bf18      	it	ne
 8010512:	2201      	movne	r2, #1
 8010514:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8010518:	b005      	add	sp, #20
 801051a:	bd30      	pop	{r4, r5, pc}
 801051c:	680a      	ldr	r2, [r1, #0]
 801051e:	e7f2      	b.n	8010506 <_rclc_check_for_new_data+0x22>
 8010520:	698a      	ldr	r2, [r1, #24]
 8010522:	e7f0      	b.n	8010506 <_rclc_check_for_new_data+0x22>
 8010524:	688a      	ldr	r2, [r1, #8]
 8010526:	e7ee      	b.n	8010506 <_rclc_check_for_new_data+0x22>
 8010528:	690a      	ldr	r2, [r1, #16]
 801052a:	e7ec      	b.n	8010506 <_rclc_check_for_new_data+0x22>
 801052c:	685c      	ldr	r4, [r3, #4]
 801052e:	4608      	mov	r0, r1
 8010530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010534:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801053c:	f104 0110 	add.w	r1, r4, #16
 8010540:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010544:	9500      	str	r5, [sp, #0]
 8010546:	f104 0341 	add.w	r3, r4, #65	; 0x41
 801054a:	f104 0240 	add.w	r2, r4, #64	; 0x40
 801054e:	f008 ff2f 	bl	80193b0 <rcl_action_client_wait_set_get_entities_ready>
 8010552:	e7e1      	b.n	8010518 <_rclc_check_for_new_data+0x34>
 8010554:	685c      	ldr	r4, [r3, #4]
 8010556:	4608      	mov	r0, r1
 8010558:	f104 0222 	add.w	r2, r4, #34	; 0x22
 801055c:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8010560:	f104 0321 	add.w	r3, r4, #33	; 0x21
 8010564:	e9cd 2100 	strd	r2, r1, [sp]
 8010568:	f104 0220 	add.w	r2, r4, #32
 801056c:	f104 0110 	add.w	r1, r4, #16
 8010570:	f009 f936 	bl	80197e0 <rcl_action_server_wait_set_get_entities_ready>
 8010574:	e7d0      	b.n	8010518 <_rclc_check_for_new_data+0x34>
 8010576:	200b      	movs	r0, #11
 8010578:	4770      	bx	lr
 801057a:	2001      	movs	r0, #1
 801057c:	e7cc      	b.n	8010518 <_rclc_check_for_new_data+0x34>
 801057e:	bf00      	nop

08010580 <_rclc_take_new_data>:
 8010580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010582:	b09b      	sub	sp, #108	; 0x6c
 8010584:	2800      	cmp	r0, #0
 8010586:	f000 8088 	beq.w	801069a <_rclc_take_new_data+0x11a>
 801058a:	7803      	ldrb	r3, [r0, #0]
 801058c:	4604      	mov	r4, r0
 801058e:	2b0a      	cmp	r3, #10
 8010590:	f200 8167 	bhi.w	8010862 <_rclc_take_new_data+0x2e2>
 8010594:	e8df f003 	tbb	[pc, r3]
 8010598:	44152d2d 	.word	0x44152d2d
 801059c:	19191944 	.word	0x19191944
 80105a0:	065a      	.short	0x065a
 80105a2:	15          	.byte	0x15
 80105a3:	00          	.byte	0x00
 80105a4:	6840      	ldr	r0, [r0, #4]
 80105a6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80105aa:	2b00      	cmp	r3, #0
 80105ac:	f040 80b2 	bne.w	8010714 <_rclc_take_new_data+0x194>
 80105b0:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f040 80e4 	bne.w	8010782 <_rclc_take_new_data+0x202>
 80105ba:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d16f      	bne.n	80106a2 <_rclc_take_new_data+0x122>
 80105c2:	2500      	movs	r5, #0
 80105c4:	4628      	mov	r0, r5
 80105c6:	b01b      	add	sp, #108	; 0x6c
 80105c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80105cc:	6a0b      	ldr	r3, [r1, #32]
 80105ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d0f5      	beq.n	80105c2 <_rclc_take_new_data+0x42>
 80105d6:	6882      	ldr	r2, [r0, #8]
 80105d8:	f100 0110 	add.w	r1, r0, #16
 80105dc:	6840      	ldr	r0, [r0, #4]
 80105de:	f7ff fdd7 	bl	8010190 <rcl_take_request>
 80105e2:	4605      	mov	r5, r0
 80105e4:	2800      	cmp	r0, #0
 80105e6:	d0ec      	beq.n	80105c2 <_rclc_take_new_data+0x42>
 80105e8:	f240 2359 	movw	r3, #601	; 0x259
 80105ec:	4298      	cmp	r0, r3
 80105ee:	d013      	beq.n	8010618 <_rclc_take_new_data+0x98>
 80105f0:	e029      	b.n	8010646 <_rclc_take_new_data+0xc6>
 80105f2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80105f4:	680b      	ldr	r3, [r1, #0]
 80105f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d0e1      	beq.n	80105c2 <_rclc_take_new_data+0x42>
 80105fe:	2300      	movs	r3, #0
 8010600:	aa0a      	add	r2, sp, #40	; 0x28
 8010602:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 8010606:	f7ff ff07 	bl	8010418 <rcl_take>
 801060a:	4605      	mov	r5, r0
 801060c:	2800      	cmp	r0, #0
 801060e:	d0d9      	beq.n	80105c4 <_rclc_take_new_data+0x44>
 8010610:	f240 1391 	movw	r3, #401	; 0x191
 8010614:	4298      	cmp	r0, r3
 8010616:	d116      	bne.n	8010646 <_rclc_take_new_data+0xc6>
 8010618:	2300      	movs	r3, #0
 801061a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 801061e:	e7d1      	b.n	80105c4 <_rclc_take_new_data+0x44>
 8010620:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8010622:	698b      	ldr	r3, [r1, #24]
 8010624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010628:	2b00      	cmp	r3, #0
 801062a:	d0ca      	beq.n	80105c2 <_rclc_take_new_data+0x42>
 801062c:	6882      	ldr	r2, [r0, #8]
 801062e:	f100 0110 	add.w	r1, r0, #16
 8010632:	6840      	ldr	r0, [r0, #4]
 8010634:	f007 f8a4 	bl	8017780 <rcl_take_response>
 8010638:	4605      	mov	r5, r0
 801063a:	2800      	cmp	r0, #0
 801063c:	d0c1      	beq.n	80105c2 <_rclc_take_new_data+0x42>
 801063e:	f240 13f5 	movw	r3, #501	; 0x1f5
 8010642:	4298      	cmp	r0, r3
 8010644:	d0be      	beq.n	80105c4 <_rclc_take_new_data+0x44>
 8010646:	f000 ff63 	bl	8011510 <rcutils_reset_error>
 801064a:	e7bb      	b.n	80105c4 <_rclc_take_new_data+0x44>
 801064c:	6840      	ldr	r0, [r0, #4]
 801064e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 8010652:	2b00      	cmp	r3, #0
 8010654:	d17d      	bne.n	8010752 <_rclc_take_new_data+0x1d2>
 8010656:	69c3      	ldr	r3, [r0, #28]
 8010658:	b11b      	cbz	r3, 8010662 <_rclc_take_new_data+0xe2>
 801065a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801065e:	2b00      	cmp	r3, #0
 8010660:	d144      	bne.n	80106ec <_rclc_take_new_data+0x16c>
 8010662:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010666:	2b00      	cmp	r3, #0
 8010668:	f040 80ac 	bne.w	80107c4 <_rclc_take_new_data+0x244>
 801066c:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8010670:	2b00      	cmp	r3, #0
 8010672:	d0a6      	beq.n	80105c2 <_rclc_take_new_data+0x42>
 8010674:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010676:	a90a      	add	r1, sp, #40	; 0x28
 8010678:	3010      	adds	r0, #16
 801067a:	f008 fd71 	bl	8019160 <rcl_action_take_result_response>
 801067e:	4605      	mov	r5, r0
 8010680:	2800      	cmp	r0, #0
 8010682:	d1e0      	bne.n	8010646 <_rclc_take_new_data+0xc6>
 8010684:	6860      	ldr	r0, [r4, #4]
 8010686:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801068a:	f009 f9d9 	bl	8019a40 <rclc_action_find_handle_by_result_request_sequence_number>
 801068e:	2800      	cmp	r0, #0
 8010690:	d098      	beq.n	80105c4 <_rclc_take_new_data+0x44>
 8010692:	2301      	movs	r3, #1
 8010694:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 8010698:	e794      	b.n	80105c4 <_rclc_take_new_data+0x44>
 801069a:	250b      	movs	r5, #11
 801069c:	4628      	mov	r0, r5
 801069e:	b01b      	add	sp, #108	; 0x6c
 80106a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106a2:	ae04      	add	r6, sp, #16
 80106a4:	3010      	adds	r0, #16
 80106a6:	aa0a      	add	r2, sp, #40	; 0x28
 80106a8:	4631      	mov	r1, r6
 80106aa:	f008 ffcd 	bl	8019648 <rcl_action_take_cancel_request>
 80106ae:	4605      	mov	r5, r0
 80106b0:	2800      	cmp	r0, #0
 80106b2:	d1c8      	bne.n	8010646 <_rclc_take_new_data+0xc6>
 80106b4:	a90a      	add	r1, sp, #40	; 0x28
 80106b6:	6860      	ldr	r0, [r4, #4]
 80106b8:	f009 f982 	bl	80199c0 <rclc_action_find_goal_handle_by_uuid>
 80106bc:	4607      	mov	r7, r0
 80106be:	2800      	cmp	r0, #0
 80106c0:	f000 80bb 	beq.w	801083a <_rclc_take_new_data+0x2ba>
 80106c4:	2101      	movs	r1, #1
 80106c6:	f990 0008 	ldrsb.w	r0, [r0, #8]
 80106ca:	f009 f903 	bl	80198d4 <rcl_action_transition_goal_state>
 80106ce:	2803      	cmp	r0, #3
 80106d0:	4684      	mov	ip, r0
 80106d2:	f040 80a7 	bne.w	8010824 <_rclc_take_new_data+0x2a4>
 80106d6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 80106da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80106dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80106de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80106e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80106e6:	f887 c008 	strb.w	ip, [r7, #8]
 80106ea:	e76b      	b.n	80105c4 <_rclc_take_new_data+0x44>
 80106ec:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80106ee:	3010      	adds	r0, #16
 80106f0:	f008 fdb6 	bl	8019260 <rcl_action_take_feedback>
 80106f4:	4605      	mov	r5, r0
 80106f6:	2800      	cmp	r0, #0
 80106f8:	d1a5      	bne.n	8010646 <_rclc_take_new_data+0xc6>
 80106fa:	6860      	ldr	r0, [r4, #4]
 80106fc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80106fe:	f009 f95f 	bl	80199c0 <rclc_action_find_goal_handle_by_uuid>
 8010702:	4603      	mov	r3, r0
 8010704:	2800      	cmp	r0, #0
 8010706:	f000 80a3 	beq.w	8010850 <_rclc_take_new_data+0x2d0>
 801070a:	2201      	movs	r2, #1
 801070c:	6860      	ldr	r0, [r4, #4]
 801070e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8010712:	e7a6      	b.n	8010662 <_rclc_take_new_data+0xe2>
 8010714:	f009 f92e 	bl	8019974 <rclc_action_take_goal_handle>
 8010718:	4606      	mov	r6, r0
 801071a:	6860      	ldr	r0, [r4, #4]
 801071c:	2e00      	cmp	r6, #0
 801071e:	f43f af47 	beq.w	80105b0 <_rclc_take_new_data+0x30>
 8010722:	6070      	str	r0, [r6, #4]
 8010724:	f106 0128 	add.w	r1, r6, #40	; 0x28
 8010728:	69f2      	ldr	r2, [r6, #28]
 801072a:	3010      	adds	r0, #16
 801072c:	f008 fed6 	bl	80194dc <rcl_action_take_goal_request>
 8010730:	4605      	mov	r5, r0
 8010732:	2800      	cmp	r0, #0
 8010734:	f040 808e 	bne.w	8010854 <_rclc_take_new_data+0x2d4>
 8010738:	69f7      	ldr	r7, [r6, #28]
 801073a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801073c:	7235      	strb	r5, [r6, #8]
 801073e:	f8c6 0009 	str.w	r0, [r6, #9]
 8010742:	f8c6 100d 	str.w	r1, [r6, #13]
 8010746:	6860      	ldr	r0, [r4, #4]
 8010748:	f8c6 2011 	str.w	r2, [r6, #17]
 801074c:	f8c6 3015 	str.w	r3, [r6, #21]
 8010750:	e72e      	b.n	80105b0 <_rclc_take_new_data+0x30>
 8010752:	aa04      	add	r2, sp, #16
 8010754:	a90a      	add	r1, sp, #40	; 0x28
 8010756:	3010      	adds	r0, #16
 8010758:	f008 fc8a 	bl	8019070 <rcl_action_take_goal_response>
 801075c:	4605      	mov	r5, r0
 801075e:	2800      	cmp	r0, #0
 8010760:	f47f af71 	bne.w	8010646 <_rclc_take_new_data+0xc6>
 8010764:	6860      	ldr	r0, [r4, #4]
 8010766:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801076a:	f009 f957 	bl	8019a1c <rclc_action_find_handle_by_goal_request_sequence_number>
 801076e:	b130      	cbz	r0, 801077e <_rclc_take_new_data+0x1fe>
 8010770:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8010774:	2201      	movs	r2, #1
 8010776:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 801077a:	f880 2020 	strb.w	r2, [r0, #32]
 801077e:	6860      	ldr	r0, [r4, #4]
 8010780:	e769      	b.n	8010656 <_rclc_take_new_data+0xd6>
 8010782:	3010      	adds	r0, #16
 8010784:	aa04      	add	r2, sp, #16
 8010786:	a90a      	add	r1, sp, #40	; 0x28
 8010788:	f008 ff1e 	bl	80195c8 <rcl_action_take_result_request>
 801078c:	4605      	mov	r5, r0
 801078e:	2800      	cmp	r0, #0
 8010790:	f47f af59 	bne.w	8010646 <_rclc_take_new_data+0xc6>
 8010794:	a904      	add	r1, sp, #16
 8010796:	6860      	ldr	r0, [r4, #4]
 8010798:	f009 f912 	bl	80199c0 <rclc_action_find_goal_handle_by_uuid>
 801079c:	4607      	mov	r7, r0
 801079e:	b160      	cbz	r0, 80107ba <_rclc_take_new_data+0x23a>
 80107a0:	ad0a      	add	r5, sp, #40	; 0x28
 80107a2:	f100 0640 	add.w	r6, r0, #64	; 0x40
 80107a6:	f04f 0c02 	mov.w	ip, #2
 80107aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80107ac:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80107ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80107b2:	e886 0003 	stmia.w	r6, {r0, r1}
 80107b6:	f887 c008 	strb.w	ip, [r7, #8]
 80107ba:	6860      	ldr	r0, [r4, #4]
 80107bc:	2300      	movs	r3, #0
 80107be:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 80107c2:	e6fa      	b.n	80105ba <_rclc_take_new_data+0x3a>
 80107c4:	f100 0230 	add.w	r2, r0, #48	; 0x30
 80107c8:	a90a      	add	r1, sp, #40	; 0x28
 80107ca:	3010      	adds	r0, #16
 80107cc:	f008 fd08 	bl	80191e0 <rcl_action_take_cancel_response>
 80107d0:	4605      	mov	r5, r0
 80107d2:	2800      	cmp	r0, #0
 80107d4:	f47f af37 	bne.w	8010646 <_rclc_take_new_data+0xc6>
 80107d8:	6860      	ldr	r0, [r4, #4]
 80107da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80107de:	f009 f941 	bl	8019a64 <rclc_action_find_handle_by_cancel_request_sequence_number>
 80107e2:	4606      	mov	r6, r0
 80107e4:	6860      	ldr	r0, [r4, #4]
 80107e6:	2e00      	cmp	r6, #0
 80107e8:	f43f af40 	beq.w	801066c <_rclc_take_new_data+0xec>
 80107ec:	2701      	movs	r7, #1
 80107ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80107f0:	84b7      	strh	r7, [r6, #36]	; 0x24
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	f43f af3a 	beq.w	801066c <_rclc_take_new_data+0xec>
 80107f8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80107fa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80107fe:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8010802:	f009 f8dd 	bl	80199c0 <rclc_action_find_goal_handle_by_uuid>
 8010806:	b138      	cbz	r0, 8010818 <_rclc_take_new_data+0x298>
 8010808:	6860      	ldr	r0, [r4, #4]
 801080a:	3501      	adds	r5, #1
 801080c:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 8010810:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010812:	42ab      	cmp	r3, r5
 8010814:	d8f0      	bhi.n	80107f8 <_rclc_take_new_data+0x278>
 8010816:	e729      	b.n	801066c <_rclc_take_new_data+0xec>
 8010818:	6860      	ldr	r0, [r4, #4]
 801081a:	3501      	adds	r5, #1
 801081c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801081e:	42ab      	cmp	r3, r5
 8010820:	d8ea      	bhi.n	80107f8 <_rclc_take_new_data+0x278>
 8010822:	e723      	b.n	801066c <_rclc_take_new_data+0xec>
 8010824:	ab06      	add	r3, sp, #24
 8010826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010828:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801082c:	2103      	movs	r1, #3
 801082e:	6860      	ldr	r0, [r4, #4]
 8010830:	e896 000c 	ldmia.w	r6, {r2, r3}
 8010834:	f009 f98c 	bl	8019b50 <rclc_action_server_goal_cancel_reject>
 8010838:	e6c4      	b.n	80105c4 <_rclc_take_new_data+0x44>
 801083a:	ab06      	add	r3, sp, #24
 801083c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801083e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010842:	2102      	movs	r1, #2
 8010844:	6860      	ldr	r0, [r4, #4]
 8010846:	e896 000c 	ldmia.w	r6, {r2, r3}
 801084a:	f009 f981 	bl	8019b50 <rclc_action_server_goal_cancel_reject>
 801084e:	e6b9      	b.n	80105c4 <_rclc_take_new_data+0x44>
 8010850:	6860      	ldr	r0, [r4, #4]
 8010852:	e706      	b.n	8010662 <_rclc_take_new_data+0xe2>
 8010854:	4631      	mov	r1, r6
 8010856:	6860      	ldr	r0, [r4, #4]
 8010858:	f009 f89c 	bl	8019994 <rclc_action_remove_used_goal_handle>
 801085c:	f000 fe58 	bl	8011510 <rcutils_reset_error>
 8010860:	e6b0      	b.n	80105c4 <_rclc_take_new_data+0x44>
 8010862:	2501      	movs	r5, #1
 8010864:	e6ae      	b.n	80105c4 <_rclc_take_new_data+0x44>
 8010866:	bf00      	nop

08010868 <_rclc_execute.part.0>:
 8010868:	b5f0      	push	{r4, r5, r6, r7, lr}
 801086a:	7803      	ldrb	r3, [r0, #0]
 801086c:	b085      	sub	sp, #20
 801086e:	4604      	mov	r4, r0
 8010870:	2b0a      	cmp	r3, #10
 8010872:	f200 8139 	bhi.w	8010ae8 <_rclc_execute.part.0+0x280>
 8010876:	e8df f003 	tbb	[pc, r3]
 801087a:	4268      	.short	0x4268
 801087c:	06a75b4d 	.word	0x06a75b4d
 8010880:	721d0606 	.word	0x721d0606
 8010884:	62          	.byte	0x62
 8010885:	00          	.byte	0x00
 8010886:	2b06      	cmp	r3, #6
 8010888:	f000 8126 	beq.w	8010ad8 <_rclc_execute.part.0+0x270>
 801088c:	2b07      	cmp	r3, #7
 801088e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010890:	f040 811c 	bne.w	8010acc <_rclc_execute.part.0+0x264>
 8010894:	f104 0510 	add.w	r5, r4, #16
 8010898:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 801089c:	6880      	ldr	r0, [r0, #8]
 801089e:	4798      	blx	r3
 80108a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80108a2:	4629      	mov	r1, r5
 80108a4:	6860      	ldr	r0, [r4, #4]
 80108a6:	f7ff fcb3 	bl	8010210 <rcl_send_response>
 80108aa:	4604      	mov	r4, r0
 80108ac:	b378      	cbz	r0, 801090e <_rclc_execute.part.0+0xa6>
 80108ae:	f000 fe2f 	bl	8011510 <rcutils_reset_error>
 80108b2:	e02c      	b.n	801090e <_rclc_execute.part.0+0xa6>
 80108b4:	6840      	ldr	r0, [r0, #4]
 80108b6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	f000 808e 	beq.w	80109dc <_rclc_execute.part.0+0x174>
 80108c0:	2600      	movs	r6, #0
 80108c2:	2701      	movs	r7, #1
 80108c4:	e004      	b.n	80108d0 <_rclc_execute.part.0+0x68>
 80108c6:	f009 f82f 	bl	8019928 <rclc_action_send_result_request>
 80108ca:	b998      	cbnz	r0, 80108f4 <_rclc_execute.part.0+0x8c>
 80108cc:	722f      	strb	r7, [r5, #8]
 80108ce:	6860      	ldr	r0, [r4, #4]
 80108d0:	f009 f8da 	bl	8019a88 <rclc_action_find_first_handle_with_goal_response>
 80108d4:	4605      	mov	r5, r0
 80108d6:	2800      	cmp	r0, #0
 80108d8:	d07f      	beq.n	80109da <_rclc_execute.part.0+0x172>
 80108da:	6863      	ldr	r3, [r4, #4]
 80108dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80108de:	699b      	ldr	r3, [r3, #24]
 80108e0:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 80108e4:	f885 6020 	strb.w	r6, [r5, #32]
 80108e8:	4798      	blx	r3
 80108ea:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 80108ee:	4628      	mov	r0, r5
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d1e8      	bne.n	80108c6 <_rclc_execute.part.0+0x5e>
 80108f4:	6860      	ldr	r0, [r4, #4]
 80108f6:	4629      	mov	r1, r5
 80108f8:	f009 f84c 	bl	8019994 <rclc_action_remove_used_goal_handle>
 80108fc:	e7e7      	b.n	80108ce <_rclc_execute.part.0+0x66>
 80108fe:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 8010902:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 8010906:	b100      	cbz	r0, 801090a <_rclc_execute.part.0+0xa2>
 8010908:	68a0      	ldr	r0, [r4, #8]
 801090a:	2400      	movs	r4, #0
 801090c:	4798      	blx	r3
 801090e:	4620      	mov	r0, r4
 8010910:	b005      	add	sp, #20
 8010912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010914:	6840      	ldr	r0, [r0, #4]
 8010916:	f007 fc61 	bl	80181dc <rcl_timer_call>
 801091a:	f240 3321 	movw	r3, #801	; 0x321
 801091e:	4604      	mov	r4, r0
 8010920:	4298      	cmp	r0, r3
 8010922:	d001      	beq.n	8010928 <_rclc_execute.part.0+0xc0>
 8010924:	2800      	cmp	r0, #0
 8010926:	d1c2      	bne.n	80108ae <_rclc_execute.part.0+0x46>
 8010928:	2400      	movs	r4, #0
 801092a:	4620      	mov	r0, r4
 801092c:	b005      	add	sp, #20
 801092e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010930:	2400      	movs	r4, #0
 8010932:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010934:	6880      	ldr	r0, [r0, #8]
 8010936:	4798      	blx	r3
 8010938:	4620      	mov	r0, r4
 801093a:	b005      	add	sp, #20
 801093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801093e:	2400      	movs	r4, #0
 8010940:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010942:	4798      	blx	r3
 8010944:	4620      	mov	r0, r4
 8010946:	b005      	add	sp, #20
 8010948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801094a:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 801094e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8010950:	b100      	cbz	r0, 8010954 <_rclc_execute.part.0+0xec>
 8010952:	68a0      	ldr	r0, [r4, #8]
 8010954:	2400      	movs	r4, #0
 8010956:	4798      	blx	r3
 8010958:	4620      	mov	r0, r4
 801095a:	b005      	add	sp, #20
 801095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801095e:	6840      	ldr	r0, [r0, #4]
 8010960:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8010964:	bb3b      	cbnz	r3, 80109b6 <_rclc_execute.part.0+0x14e>
 8010966:	f890 3020 	ldrb.w	r3, [r0, #32]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d07d      	beq.n	8010a6a <_rclc_execute.part.0+0x202>
 801096e:	f640 0634 	movw	r6, #2100	; 0x834
 8010972:	2701      	movs	r7, #1
 8010974:	e007      	b.n	8010986 <_rclc_execute.part.0+0x11e>
 8010976:	4628      	mov	r0, r5
 8010978:	f009 f89e 	bl	8019ab8 <rclc_action_server_response_goal_request>
 801097c:	4629      	mov	r1, r5
 801097e:	6860      	ldr	r0, [r4, #4]
 8010980:	f009 f808 	bl	8019994 <rclc_action_remove_used_goal_handle>
 8010984:	6860      	ldr	r0, [r4, #4]
 8010986:	2100      	movs	r1, #0
 8010988:	f009 f830 	bl	80199ec <rclc_action_find_first_handle_by_status>
 801098c:	4605      	mov	r5, r0
 801098e:	2800      	cmp	r0, #0
 8010990:	d068      	beq.n	8010a64 <_rclc_execute.part.0+0x1fc>
 8010992:	6863      	ldr	r3, [r4, #4]
 8010994:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010996:	699b      	ldr	r3, [r3, #24]
 8010998:	4798      	blx	r3
 801099a:	42b0      	cmp	r0, r6
 801099c:	f04f 0100 	mov.w	r1, #0
 80109a0:	d1e9      	bne.n	8010976 <_rclc_execute.part.0+0x10e>
 80109a2:	2101      	movs	r1, #1
 80109a4:	4628      	mov	r0, r5
 80109a6:	f009 f887 	bl	8019ab8 <rclc_action_server_response_goal_request>
 80109aa:	722f      	strb	r7, [r5, #8]
 80109ac:	e7ea      	b.n	8010984 <_rclc_execute.part.0+0x11c>
 80109ae:	6848      	ldr	r0, [r1, #4]
 80109b0:	f008 fff0 	bl	8019994 <rclc_action_remove_used_goal_handle>
 80109b4:	6860      	ldr	r0, [r4, #4]
 80109b6:	f009 f825 	bl	8019a04 <rclc_action_find_first_terminated_handle>
 80109ba:	4601      	mov	r1, r0
 80109bc:	2800      	cmp	r0, #0
 80109be:	d1f6      	bne.n	80109ae <_rclc_execute.part.0+0x146>
 80109c0:	6860      	ldr	r0, [r4, #4]
 80109c2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 80109c6:	e7ce      	b.n	8010966 <_rclc_execute.part.0+0xfe>
 80109c8:	2400      	movs	r4, #0
 80109ca:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80109cc:	f100 0110 	add.w	r1, r0, #16
 80109d0:	6880      	ldr	r0, [r0, #8]
 80109d2:	4798      	blx	r3
 80109d4:	4620      	mov	r0, r4
 80109d6:	b005      	add	sp, #20
 80109d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80109da:	6860      	ldr	r0, [r4, #4]
 80109dc:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80109e0:	b18b      	cbz	r3, 8010a06 <_rclc_execute.part.0+0x19e>
 80109e2:	68c5      	ldr	r5, [r0, #12]
 80109e4:	b32d      	cbz	r5, 8010a32 <_rclc_execute.part.0+0x1ca>
 80109e6:	2600      	movs	r6, #0
 80109e8:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 80109ec:	b143      	cbz	r3, 8010a00 <_rclc_execute.part.0+0x198>
 80109ee:	69c3      	ldr	r3, [r0, #28]
 80109f0:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 80109f4:	b123      	cbz	r3, 8010a00 <_rclc_execute.part.0+0x198>
 80109f6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80109f8:	4628      	mov	r0, r5
 80109fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80109fc:	4798      	blx	r3
 80109fe:	6860      	ldr	r0, [r4, #4]
 8010a00:	682d      	ldr	r5, [r5, #0]
 8010a02:	2d00      	cmp	r5, #0
 8010a04:	d1f0      	bne.n	80109e8 <_rclc_execute.part.0+0x180>
 8010a06:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8010a0a:	b193      	cbz	r3, 8010a32 <_rclc_execute.part.0+0x1ca>
 8010a0c:	68c5      	ldr	r5, [r0, #12]
 8010a0e:	b185      	cbz	r5, 8010a32 <_rclc_execute.part.0+0x1ca>
 8010a10:	2600      	movs	r6, #0
 8010a12:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8010a16:	b14b      	cbz	r3, 8010a2c <_rclc_execute.part.0+0x1c4>
 8010a18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010a1a:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 8010a1e:	b12b      	cbz	r3, 8010a2c <_rclc_execute.part.0+0x1c4>
 8010a20:	4628      	mov	r0, r5
 8010a22:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 8010a26:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010a28:	4798      	blx	r3
 8010a2a:	6860      	ldr	r0, [r4, #4]
 8010a2c:	682d      	ldr	r5, [r5, #0]
 8010a2e:	2d00      	cmp	r5, #0
 8010a30:	d1ef      	bne.n	8010a12 <_rclc_execute.part.0+0x1aa>
 8010a32:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	f43f af76 	beq.w	8010928 <_rclc_execute.part.0+0xc0>
 8010a3c:	2700      	movs	r7, #0
 8010a3e:	e00b      	b.n	8010a58 <_rclc_execute.part.0+0x1f0>
 8010a40:	6863      	ldr	r3, [r4, #4]
 8010a42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010a46:	6a1e      	ldr	r6, [r3, #32]
 8010a48:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 8010a4c:	47b0      	blx	r6
 8010a4e:	6860      	ldr	r0, [r4, #4]
 8010a50:	4629      	mov	r1, r5
 8010a52:	f008 ff9f 	bl	8019994 <rclc_action_remove_used_goal_handle>
 8010a56:	6860      	ldr	r0, [r4, #4]
 8010a58:	f009 f822 	bl	8019aa0 <rclc_action_find_first_handle_with_result_response>
 8010a5c:	4605      	mov	r5, r0
 8010a5e:	2800      	cmp	r0, #0
 8010a60:	d1ee      	bne.n	8010a40 <_rclc_execute.part.0+0x1d8>
 8010a62:	e761      	b.n	8010928 <_rclc_execute.part.0+0xc0>
 8010a64:	6860      	ldr	r0, [r4, #4]
 8010a66:	f880 5020 	strb.w	r5, [r0, #32]
 8010a6a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	f43f af5a 	beq.w	8010928 <_rclc_execute.part.0+0xc0>
 8010a74:	68c5      	ldr	r5, [r0, #12]
 8010a76:	b1b5      	cbz	r5, 8010aa6 <_rclc_execute.part.0+0x23e>
 8010a78:	2602      	movs	r6, #2
 8010a7a:	e001      	b.n	8010a80 <_rclc_execute.part.0+0x218>
 8010a7c:	682d      	ldr	r5, [r5, #0]
 8010a7e:	b195      	cbz	r5, 8010aa6 <_rclc_execute.part.0+0x23e>
 8010a80:	f995 3008 	ldrsb.w	r3, [r5, #8]
 8010a84:	2b03      	cmp	r3, #3
 8010a86:	d1f9      	bne.n	8010a7c <_rclc_execute.part.0+0x214>
 8010a88:	69c3      	ldr	r3, [r0, #28]
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010a8e:	4798      	blx	r3
 8010a90:	4603      	mov	r3, r0
 8010a92:	f105 0260 	add.w	r2, r5, #96	; 0x60
 8010a96:	4628      	mov	r0, r5
 8010a98:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8010a9c:	b143      	cbz	r3, 8010ab0 <_rclc_execute.part.0+0x248>
 8010a9e:	f009 f82b 	bl	8019af8 <rclc_action_server_goal_cancel_accept>
 8010aa2:	6860      	ldr	r0, [r4, #4]
 8010aa4:	e7ea      	b.n	8010a7c <_rclc_execute.part.0+0x214>
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	461c      	mov	r4, r3
 8010aaa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 8010aae:	e72e      	b.n	801090e <_rclc_execute.part.0+0xa6>
 8010ab0:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8010ab2:	f105 0758 	add.w	r7, r5, #88	; 0x58
 8010ab6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8010aba:	2101      	movs	r1, #1
 8010abc:	6860      	ldr	r0, [r4, #4]
 8010abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ac2:	f009 f845 	bl	8019b50 <rclc_action_server_goal_cancel_reject>
 8010ac6:	722e      	strb	r6, [r5, #8]
 8010ac8:	6860      	ldr	r0, [r4, #4]
 8010aca:	e7d7      	b.n	8010a7c <_rclc_execute.part.0+0x214>
 8010acc:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8010ace:	f104 0510 	add.w	r5, r4, #16
 8010ad2:	6880      	ldr	r0, [r0, #8]
 8010ad4:	4798      	blx	r3
 8010ad6:	e6e3      	b.n	80108a0 <_rclc_execute.part.0+0x38>
 8010ad8:	f100 0510 	add.w	r5, r0, #16
 8010adc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8010ade:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8010ae0:	4629      	mov	r1, r5
 8010ae2:	6880      	ldr	r0, [r0, #8]
 8010ae4:	4798      	blx	r3
 8010ae6:	e6db      	b.n	80108a0 <_rclc_execute.part.0+0x38>
 8010ae8:	2401      	movs	r4, #1
 8010aea:	e710      	b.n	801090e <_rclc_execute.part.0+0xa6>

08010aec <rclc_executor_trigger_any>:
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d03d      	beq.n	8010b6c <rclc_executor_trigger_any+0x80>
 8010af0:	2900      	cmp	r1, #0
 8010af2:	d03c      	beq.n	8010b6e <rclc_executor_trigger_any+0x82>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 8010afa:	2200      	movs	r2, #0
 8010afc:	2800      	cmp	r0, #0
 8010afe:	d035      	beq.n	8010b6c <rclc_executor_trigger_any+0x80>
 8010b00:	b430      	push	{r4, r5}
 8010b02:	f893 c000 	ldrb.w	ip, [r3]
 8010b06:	f1bc 0f08 	cmp.w	ip, #8
 8010b0a:	d11d      	bne.n	8010b48 <rclc_executor_trigger_any+0x5c>
 8010b0c:	685c      	ldr	r4, [r3, #4]
 8010b0e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8010b10:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 8010b14:	d105      	bne.n	8010b22 <rclc_executor_trigger_any+0x36>
 8010b16:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 8010b1a:	b910      	cbnz	r0, 8010b22 <rclc_executor_trigger_any+0x36>
 8010b1c:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 8010b20:	b128      	cbz	r0, 8010b2e <rclc_executor_trigger_any+0x42>
 8010b22:	bc30      	pop	{r4, r5}
 8010b24:	4770      	bx	lr
 8010b26:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	d1f9      	bne.n	8010b22 <rclc_executor_trigger_any+0x36>
 8010b2e:	3201      	adds	r2, #1
 8010b30:	3340      	adds	r3, #64	; 0x40
 8010b32:	4291      	cmp	r1, r2
 8010b34:	d017      	beq.n	8010b66 <rclc_executor_trigger_any+0x7a>
 8010b36:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 8010b3a:	2800      	cmp	r0, #0
 8010b3c:	d0f1      	beq.n	8010b22 <rclc_executor_trigger_any+0x36>
 8010b3e:	f893 c000 	ldrb.w	ip, [r3]
 8010b42:	f1bc 0f08 	cmp.w	ip, #8
 8010b46:	d0e1      	beq.n	8010b0c <rclc_executor_trigger_any+0x20>
 8010b48:	f1bc 0f09 	cmp.w	ip, #9
 8010b4c:	d1eb      	bne.n	8010b26 <rclc_executor_trigger_any+0x3a>
 8010b4e:	685c      	ldr	r4, [r3, #4]
 8010b50:	6a25      	ldr	r5, [r4, #32]
 8010b52:	2d00      	cmp	r5, #0
 8010b54:	d1e5      	bne.n	8010b22 <rclc_executor_trigger_any+0x36>
 8010b56:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	d1e1      	bne.n	8010b22 <rclc_executor_trigger_any+0x36>
 8010b5e:	3201      	adds	r2, #1
 8010b60:	3340      	adds	r3, #64	; 0x40
 8010b62:	4291      	cmp	r1, r2
 8010b64:	d1e7      	bne.n	8010b36 <rclc_executor_trigger_any+0x4a>
 8010b66:	2000      	movs	r0, #0
 8010b68:	bc30      	pop	{r4, r5}
 8010b6a:	4770      	bx	lr
 8010b6c:	4770      	bx	lr
 8010b6e:	4608      	mov	r0, r1
 8010b70:	4770      	bx	lr
 8010b72:	bf00      	nop

08010b74 <rclc_executor_get_zero_initialized_executor>:
 8010b74:	b510      	push	{r4, lr}
 8010b76:	4604      	mov	r4, r0
 8010b78:	2288      	movs	r2, #136	; 0x88
 8010b7a:	4902      	ldr	r1, [pc, #8]	; (8010b84 <rclc_executor_get_zero_initialized_executor+0x10>)
 8010b7c:	f00b fd0f 	bl	801c59e <memcpy>
 8010b80:	4620      	mov	r0, r4
 8010b82:	bd10      	pop	{r4, pc}
 8010b84:	0801da58 	.word	0x0801da58

08010b88 <rclc_executor_init>:
 8010b88:	2900      	cmp	r1, #0
 8010b8a:	d06a      	beq.n	8010c62 <rclc_executor_init+0xda>
 8010b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b90:	4605      	mov	r5, r0
 8010b92:	b0b0      	sub	sp, #192	; 0xc0
 8010b94:	2800      	cmp	r0, #0
 8010b96:	d05c      	beq.n	8010c52 <rclc_executor_init+0xca>
 8010b98:	4616      	mov	r6, r2
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	4688      	mov	r8, r1
 8010b9e:	461f      	mov	r7, r3
 8010ba0:	f000 fc78 	bl	8011494 <rcutils_allocator_is_valid>
 8010ba4:	2e00      	cmp	r6, #0
 8010ba6:	d054      	beq.n	8010c52 <rclc_executor_init+0xca>
 8010ba8:	f080 0401 	eor.w	r4, r0, #1
 8010bac:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8010bb0:	d14f      	bne.n	8010c52 <rclc_executor_init+0xca>
 8010bb2:	2288      	movs	r2, #136	; 0x88
 8010bb4:	4930      	ldr	r1, [pc, #192]	; (8010c78 <rclc_executor_init+0xf0>)
 8010bb6:	a80e      	add	r0, sp, #56	; 0x38
 8010bb8:	f00b fcf1 	bl	801c59e <memcpy>
 8010bbc:	a90e      	add	r1, sp, #56	; 0x38
 8010bbe:	2288      	movs	r2, #136	; 0x88
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	f00b fcec 	bl	801c59e <memcpy>
 8010bc6:	4668      	mov	r0, sp
 8010bc8:	f8c5 8000 	str.w	r8, [r5]
 8010bcc:	60ae      	str	r6, [r5, #8]
 8010bce:	f007 fc7b 	bl	80184c8 <rcl_get_zero_initialized_wait_set>
 8010bd2:	46ec      	mov	ip, sp
 8010bd4:	f105 0e14 	add.w	lr, r5, #20
 8010bd8:	f8d7 8000 	ldr.w	r8, [r7]
 8010bdc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010be0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010be4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010be8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010bec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010bf0:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010c70 <rclc_executor_init+0xe8>
 8010bf4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010bf8:	f8dc 3000 	ldr.w	r3, [ip]
 8010bfc:	01b0      	lsls	r0, r6, #6
 8010bfe:	6939      	ldr	r1, [r7, #16]
 8010c00:	f8ce 3000 	str.w	r3, [lr]
 8010c04:	612f      	str	r7, [r5, #16]
 8010c06:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 8010c0a:	47c0      	blx	r8
 8010c0c:	6068      	str	r0, [r5, #4]
 8010c0e:	b908      	cbnz	r0, 8010c14 <rclc_executor_init+0x8c>
 8010c10:	e029      	b.n	8010c66 <rclc_executor_init+0xde>
 8010c12:	6868      	ldr	r0, [r5, #4]
 8010c14:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8010c18:	3401      	adds	r4, #1
 8010c1a:	4631      	mov	r1, r6
 8010c1c:	f000 fac0 	bl	80111a0 <rclc_executor_handle_init>
 8010c20:	42a6      	cmp	r6, r4
 8010c22:	d8f6      	bhi.n	8010c12 <rclc_executor_init+0x8a>
 8010c24:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8010c28:	f000 faae 	bl	8011188 <rclc_executor_handle_counters_zero_init>
 8010c2c:	4a13      	ldr	r2, [pc, #76]	; (8010c7c <rclc_executor_init+0xf4>)
 8010c2e:	2300      	movs	r3, #0
 8010c30:	6868      	ldr	r0, [r5, #4]
 8010c32:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 8010c36:	b168      	cbz	r0, 8010c54 <rclc_executor_init+0xcc>
 8010c38:	68ab      	ldr	r3, [r5, #8]
 8010c3a:	b173      	cbz	r3, 8010c5a <rclc_executor_init+0xd2>
 8010c3c:	692a      	ldr	r2, [r5, #16]
 8010c3e:	fab2 f382 	clz	r3, r2
 8010c42:	095b      	lsrs	r3, r3, #5
 8010c44:	b14a      	cbz	r2, 8010c5a <rclc_executor_init+0xd2>
 8010c46:	4618      	mov	r0, r3
 8010c48:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 8010c4c:	b030      	add	sp, #192	; 0xc0
 8010c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c52:	200b      	movs	r0, #11
 8010c54:	b030      	add	sp, #192	; 0xc0
 8010c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c5a:	2000      	movs	r0, #0
 8010c5c:	b030      	add	sp, #192	; 0xc0
 8010c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c62:	200b      	movs	r0, #11
 8010c64:	4770      	bx	lr
 8010c66:	200a      	movs	r0, #10
 8010c68:	e7f4      	b.n	8010c54 <rclc_executor_init+0xcc>
 8010c6a:	bf00      	nop
 8010c6c:	f3af 8000 	nop.w
 8010c70:	3b9aca00 	.word	0x3b9aca00
 8010c74:	00000000 	.word	0x00000000
 8010c78:	0801da58 	.word	0x0801da58
 8010c7c:	08010aed 	.word	0x08010aed

08010c80 <rclc_executor_add_subscription>:
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	bf18      	it	ne
 8010c84:	2a00      	cmpne	r2, #0
 8010c86:	b570      	push	{r4, r5, r6, lr}
 8010c88:	4604      	mov	r4, r0
 8010c8a:	bf0c      	ite	eq
 8010c8c:	2001      	moveq	r0, #1
 8010c8e:	2000      	movne	r0, #0
 8010c90:	f89d c010 	ldrb.w	ip, [sp, #16]
 8010c94:	2900      	cmp	r1, #0
 8010c96:	bf08      	it	eq
 8010c98:	f040 0001 	orreq.w	r0, r0, #1
 8010c9c:	bb28      	cbnz	r0, 8010cea <rclc_executor_add_subscription+0x6a>
 8010c9e:	fab4 f584 	clz	r5, r4
 8010ca2:	096d      	lsrs	r5, r5, #5
 8010ca4:	b30c      	cbz	r4, 8010cea <rclc_executor_add_subscription+0x6a>
 8010ca6:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8010caa:	4286      	cmp	r6, r0
 8010cac:	d301      	bcc.n	8010cb2 <rclc_executor_add_subscription+0x32>
 8010cae:	2001      	movs	r0, #1
 8010cb0:	bd70      	pop	{r4, r5, r6, pc}
 8010cb2:	6860      	ldr	r0, [r4, #4]
 8010cb4:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 8010cb8:	f800 500e 	strb.w	r5, [r0, lr]
 8010cbc:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 8010cc0:	3601      	adds	r6, #1
 8010cc2:	6303      	str	r3, [r0, #48]	; 0x30
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	62c5      	str	r5, [r0, #44]	; 0x2c
 8010cc8:	f104 0514 	add.w	r5, r4, #20
 8010ccc:	f880 c001 	strb.w	ip, [r0, #1]
 8010cd0:	8703      	strh	r3, [r0, #56]	; 0x38
 8010cd2:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8010cd6:	4628      	mov	r0, r5
 8010cd8:	60e6      	str	r6, [r4, #12]
 8010cda:	f007 fc09 	bl	80184f0 <rcl_wait_set_is_valid>
 8010cde:	b930      	cbnz	r0, 8010cee <rclc_executor_add_subscription+0x6e>
 8010ce0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	64a3      	str	r3, [r4, #72]	; 0x48
 8010ce8:	bd70      	pop	{r4, r5, r6, pc}
 8010cea:	200b      	movs	r0, #11
 8010cec:	bd70      	pop	{r4, r5, r6, pc}
 8010cee:	4628      	mov	r0, r5
 8010cf0:	f007 fc04 	bl	80184fc <rcl_wait_set_fini>
 8010cf4:	2800      	cmp	r0, #0
 8010cf6:	d0f3      	beq.n	8010ce0 <rclc_executor_add_subscription+0x60>
 8010cf8:	bd70      	pop	{r4, r5, r6, pc}
 8010cfa:	bf00      	nop

08010cfc <rclc_executor_add_service>:
 8010cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cfe:	9d06      	ldr	r5, [sp, #24]
 8010d00:	4604      	mov	r4, r0
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	bf18      	it	ne
 8010d06:	2d00      	cmpne	r5, #0
 8010d08:	bf0c      	ite	eq
 8010d0a:	2001      	moveq	r0, #1
 8010d0c:	2000      	movne	r0, #0
 8010d0e:	2a00      	cmp	r2, #0
 8010d10:	bf08      	it	eq
 8010d12:	f040 0001 	orreq.w	r0, r0, #1
 8010d16:	2900      	cmp	r1, #0
 8010d18:	bf08      	it	eq
 8010d1a:	f040 0001 	orreq.w	r0, r0, #1
 8010d1e:	bb40      	cbnz	r0, 8010d72 <rclc_executor_add_service+0x76>
 8010d20:	fab4 f684 	clz	r6, r4
 8010d24:	0976      	lsrs	r6, r6, #5
 8010d26:	b324      	cbz	r4, 8010d72 <rclc_executor_add_service+0x76>
 8010d28:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8010d2c:	42b8      	cmp	r0, r7
 8010d2e:	d301      	bcc.n	8010d34 <rclc_executor_add_service+0x38>
 8010d30:	2001      	movs	r0, #1
 8010d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d34:	6867      	ldr	r7, [r4, #4]
 8010d36:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8010d3a:	f100 0c01 	add.w	ip, r0, #1
 8010d3e:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 8010d42:	6283      	str	r3, [r0, #40]	; 0x28
 8010d44:	2305      	movs	r3, #5
 8010d46:	6305      	str	r5, [r0, #48]	; 0x30
 8010d48:	f104 0514 	add.w	r5, r4, #20
 8010d4c:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8010d50:	f827 300e 	strh.w	r3, [r7, lr]
 8010d54:	2301      	movs	r3, #1
 8010d56:	62c6      	str	r6, [r0, #44]	; 0x2c
 8010d58:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8010d5c:	4628      	mov	r0, r5
 8010d5e:	f8c4 c00c 	str.w	ip, [r4, #12]
 8010d62:	f007 fbc5 	bl	80184f0 <rcl_wait_set_is_valid>
 8010d66:	b930      	cbnz	r0, 8010d76 <rclc_executor_add_service+0x7a>
 8010d68:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010d6a:	2000      	movs	r0, #0
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	6563      	str	r3, [r4, #84]	; 0x54
 8010d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d72:	200b      	movs	r0, #11
 8010d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d76:	4628      	mov	r0, r5
 8010d78:	f007 fbc0 	bl	80184fc <rcl_wait_set_fini>
 8010d7c:	2800      	cmp	r0, #0
 8010d7e:	d0f3      	beq.n	8010d68 <rclc_executor_add_service+0x6c>
 8010d80:	e7d7      	b.n	8010d32 <rclc_executor_add_service+0x36>
 8010d82:	bf00      	nop

08010d84 <rclc_executor_prepare>:
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d044      	beq.n	8010e12 <rclc_executor_prepare+0x8e>
 8010d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d8a:	f100 0514 	add.w	r5, r0, #20
 8010d8e:	b09b      	sub	sp, #108	; 0x6c
 8010d90:	4604      	mov	r4, r0
 8010d92:	4628      	mov	r0, r5
 8010d94:	f007 fbac 	bl	80184f0 <rcl_wait_set_is_valid>
 8010d98:	b110      	cbz	r0, 8010da0 <rclc_executor_prepare+0x1c>
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	b01b      	add	sp, #108	; 0x6c
 8010d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010da0:	4628      	mov	r0, r5
 8010da2:	f007 fbab 	bl	80184fc <rcl_wait_set_fini>
 8010da6:	2800      	cmp	r0, #0
 8010da8:	d130      	bne.n	8010e0c <rclc_executor_prepare+0x88>
 8010daa:	a80c      	add	r0, sp, #48	; 0x30
 8010dac:	ae04      	add	r6, sp, #16
 8010dae:	f007 fb8b 	bl	80184c8 <rcl_get_zero_initialized_wait_set>
 8010db2:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8010db6:	46ae      	mov	lr, r5
 8010db8:	6927      	ldr	r7, [r4, #16]
 8010dba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010dbe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010dc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010dc6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010dca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010dce:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8010dd2:	f8dc 3000 	ldr.w	r3, [ip]
 8010dd6:	f8ce 3000 	str.w	r3, [lr]
 8010dda:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8010ddc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010dde:	683b      	ldr	r3, [r7, #0]
 8010de0:	4628      	mov	r0, r5
 8010de2:	6822      	ldr	r2, [r4, #0]
 8010de4:	6033      	str	r3, [r6, #0]
 8010de6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010de8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8010dea:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8010dee:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 8010df2:	e9cd 2100 	strd	r2, r1, [sp]
 8010df6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010df8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010dfa:	f007 fe7f 	bl	8018afc <rcl_wait_set_init>
 8010dfe:	2800      	cmp	r0, #0
 8010e00:	d0cc      	beq.n	8010d9c <rclc_executor_prepare+0x18>
 8010e02:	900b      	str	r0, [sp, #44]	; 0x2c
 8010e04:	f000 fb84 	bl	8011510 <rcutils_reset_error>
 8010e08:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010e0a:	e7c7      	b.n	8010d9c <rclc_executor_prepare+0x18>
 8010e0c:	f000 fb80 	bl	8011510 <rcutils_reset_error>
 8010e10:	e7cb      	b.n	8010daa <rclc_executor_prepare+0x26>
 8010e12:	200b      	movs	r0, #11
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop

08010e18 <rclc_executor_spin_some.part.0>:
 8010e18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e1c:	4605      	mov	r5, r0
 8010e1e:	4691      	mov	r9, r2
 8010e20:	4698      	mov	r8, r3
 8010e22:	f7ff ffaf 	bl	8010d84 <rclc_executor_prepare>
 8010e26:	f105 0614 	add.w	r6, r5, #20
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	f007 fc32 	bl	8018694 <rcl_wait_set_clear>
 8010e30:	4607      	mov	r7, r0
 8010e32:	2800      	cmp	r0, #0
 8010e34:	f040 80a8 	bne.w	8010f88 <rclc_executor_spin_some.part.0+0x170>
 8010e38:	68ab      	ldr	r3, [r5, #8]
 8010e3a:	b30b      	cbz	r3, 8010e80 <rclc_executor_spin_some.part.0+0x68>
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	6869      	ldr	r1, [r5, #4]
 8010e40:	01a2      	lsls	r2, r4, #6
 8010e42:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 8010e46:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8010e4a:	b1cb      	cbz	r3, 8010e80 <rclc_executor_spin_some.part.0+0x68>
 8010e4c:	5c8b      	ldrb	r3, [r1, r2]
 8010e4e:	2b0a      	cmp	r3, #10
 8010e50:	f200 80de 	bhi.w	8011010 <rclc_executor_spin_some.part.0+0x1f8>
 8010e54:	e8df f003 	tbb	[pc, r3]
 8010e58:	8da99d9d 	.word	0x8da99d9d
 8010e5c:	0606068d 	.word	0x0606068d
 8010e60:	c1ce      	.short	0xc1ce
 8010e62:	b5          	.byte	0xb5
 8010e63:	00          	.byte	0x00
 8010e64:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8010e68:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010e6c:	4630      	mov	r0, r6
 8010e6e:	f007 ff61 	bl	8018d34 <rcl_wait_set_add_service>
 8010e72:	2800      	cmp	r0, #0
 8010e74:	f040 8087 	bne.w	8010f86 <rclc_executor_spin_some.part.0+0x16e>
 8010e78:	3401      	adds	r4, #1
 8010e7a:	68ab      	ldr	r3, [r5, #8]
 8010e7c:	429c      	cmp	r4, r3
 8010e7e:	d3de      	bcc.n	8010e3e <rclc_executor_spin_some.part.0+0x26>
 8010e80:	4643      	mov	r3, r8
 8010e82:	464a      	mov	r2, r9
 8010e84:	4630      	mov	r0, r6
 8010e86:	f007 ff83 	bl	8018d90 <rcl_wait>
 8010e8a:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	f000 80c6 	beq.w	8011020 <rclc_executor_spin_some.part.0+0x208>
 8010e94:	2b01      	cmp	r3, #1
 8010e96:	f040 80bb 	bne.w	8011010 <rclc_executor_spin_some.part.0+0x1f8>
 8010e9a:	68ab      	ldr	r3, [r5, #8]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f000 8159 	beq.w	8011154 <rclc_executor_spin_some.part.0+0x33c>
 8010ea2:	2400      	movs	r4, #0
 8010ea4:	f240 1991 	movw	r9, #401	; 0x191
 8010ea8:	46a0      	mov	r8, r4
 8010eaa:	e00a      	b.n	8010ec2 <rclc_executor_spin_some.part.0+0xaa>
 8010eac:	f7ff fb1a 	bl	80104e4 <_rclc_check_for_new_data>
 8010eb0:	4604      	mov	r4, r0
 8010eb2:	b110      	cbz	r0, 8010eba <rclc_executor_spin_some.part.0+0xa2>
 8010eb4:	4548      	cmp	r0, r9
 8010eb6:	f040 80b1 	bne.w	801101c <rclc_executor_spin_some.part.0+0x204>
 8010eba:	68ab      	ldr	r3, [r5, #8]
 8010ebc:	4598      	cmp	r8, r3
 8010ebe:	f080 8126 	bcs.w	801110e <rclc_executor_spin_some.part.0+0x2f6>
 8010ec2:	686a      	ldr	r2, [r5, #4]
 8010ec4:	4631      	mov	r1, r6
 8010ec6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010eca:	f108 0801 	add.w	r8, r8, #1
 8010ece:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8010ed2:	f1bc 0f00 	cmp.w	ip, #0
 8010ed6:	d1e9      	bne.n	8010eac <rclc_executor_spin_some.part.0+0x94>
 8010ed8:	4619      	mov	r1, r3
 8010eda:	4610      	mov	r0, r2
 8010edc:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8010ee0:	4798      	blx	r3
 8010ee2:	2800      	cmp	r0, #0
 8010ee4:	f000 809a 	beq.w	801101c <rclc_executor_spin_some.part.0+0x204>
 8010ee8:	68ab      	ldr	r3, [r5, #8]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	f000 8096 	beq.w	801101c <rclc_executor_spin_some.part.0+0x204>
 8010ef0:	f04f 0800 	mov.w	r8, #0
 8010ef4:	f240 1991 	movw	r9, #401	; 0x191
 8010ef8:	e009      	b.n	8010f0e <rclc_executor_spin_some.part.0+0xf6>
 8010efa:	f7ff fb41 	bl	8010580 <_rclc_take_new_data>
 8010efe:	4604      	mov	r4, r0
 8010f00:	b110      	cbz	r0, 8010f08 <rclc_executor_spin_some.part.0+0xf0>
 8010f02:	4548      	cmp	r0, r9
 8010f04:	f040 808a 	bne.w	801101c <rclc_executor_spin_some.part.0+0x204>
 8010f08:	68ab      	ldr	r3, [r5, #8]
 8010f0a:	4598      	cmp	r8, r3
 8010f0c:	d209      	bcs.n	8010f22 <rclc_executor_spin_some.part.0+0x10a>
 8010f0e:	6868      	ldr	r0, [r5, #4]
 8010f10:	4631      	mov	r1, r6
 8010f12:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 8010f16:	f108 0801 	add.w	r8, r8, #1
 8010f1a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8010f1e:	2a00      	cmp	r2, #0
 8010f20:	d1eb      	bne.n	8010efa <rclc_executor_spin_some.part.0+0xe2>
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d07a      	beq.n	801101c <rclc_executor_spin_some.part.0+0x204>
 8010f26:	2600      	movs	r6, #0
 8010f28:	e00e      	b.n	8010f48 <rclc_executor_spin_some.part.0+0x130>
 8010f2a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8010f2e:	2a08      	cmp	r2, #8
 8010f30:	f000 80fc 	beq.w	801112c <rclc_executor_spin_some.part.0+0x314>
 8010f34:	2a09      	cmp	r2, #9
 8010f36:	f000 80ee 	beq.w	8011116 <rclc_executor_spin_some.part.0+0x2fe>
 8010f3a:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8010f3e:	b98a      	cbnz	r2, 8010f64 <rclc_executor_spin_some.part.0+0x14c>
 8010f40:	3601      	adds	r6, #1
 8010f42:	429e      	cmp	r6, r3
 8010f44:	d267      	bcs.n	8011016 <rclc_executor_spin_some.part.0+0x1fe>
 8010f46:	2400      	movs	r4, #0
 8010f48:	686a      	ldr	r2, [r5, #4]
 8010f4a:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8010f4e:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 8010f52:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 8010f56:	2900      	cmp	r1, #0
 8010f58:	d060      	beq.n	801101c <rclc_executor_spin_some.part.0+0x204>
 8010f5a:	7841      	ldrb	r1, [r0, #1]
 8010f5c:	2900      	cmp	r1, #0
 8010f5e:	d0e4      	beq.n	8010f2a <rclc_executor_spin_some.part.0+0x112>
 8010f60:	2901      	cmp	r1, #1
 8010f62:	d1ed      	bne.n	8010f40 <rclc_executor_spin_some.part.0+0x128>
 8010f64:	f7ff fc80 	bl	8010868 <_rclc_execute.part.0>
 8010f68:	2800      	cmp	r0, #0
 8010f6a:	f040 80b5 	bne.w	80110d8 <rclc_executor_spin_some.part.0+0x2c0>
 8010f6e:	68ab      	ldr	r3, [r5, #8]
 8010f70:	e7e6      	b.n	8010f40 <rclc_executor_spin_some.part.0+0x128>
 8010f72:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8010f76:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010f7a:	4630      	mov	r0, r6
 8010f7c:	f007 feae 	bl	8018cdc <rcl_wait_set_add_client>
 8010f80:	2800      	cmp	r0, #0
 8010f82:	f43f af79 	beq.w	8010e78 <rclc_executor_spin_some.part.0+0x60>
 8010f86:	4607      	mov	r7, r0
 8010f88:	f000 fac2 	bl	8011510 <rcutils_reset_error>
 8010f8c:	4638      	mov	r0, r7
 8010f8e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f92:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8010f96:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	f007 fb4e 	bl	801863c <rcl_wait_set_add_subscription>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	f43f af69 	beq.w	8010e78 <rclc_executor_spin_some.part.0+0x60>
 8010fa6:	4607      	mov	r7, r0
 8010fa8:	e7ee      	b.n	8010f88 <rclc_executor_spin_some.part.0+0x170>
 8010faa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8010fae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010fb2:	4630      	mov	r0, r6
 8010fb4:	f007 fe62 	bl	8018c7c <rcl_wait_set_add_timer>
 8010fb8:	2800      	cmp	r0, #0
 8010fba:	f43f af5d 	beq.w	8010e78 <rclc_executor_spin_some.part.0+0x60>
 8010fbe:	4607      	mov	r7, r0
 8010fc0:	e7e2      	b.n	8010f88 <rclc_executor_spin_some.part.0+0x170>
 8010fc2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8010fc6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010fca:	4630      	mov	r0, r6
 8010fcc:	f007 fe2a 	bl	8018c24 <rcl_wait_set_add_guard_condition>
 8010fd0:	2800      	cmp	r0, #0
 8010fd2:	f43f af51 	beq.w	8010e78 <rclc_executor_spin_some.part.0+0x60>
 8010fd6:	4607      	mov	r7, r0
 8010fd8:	e7d6      	b.n	8010f88 <rclc_executor_spin_some.part.0+0x170>
 8010fda:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010fde:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	3110      	adds	r1, #16
 8010fe6:	f008 fba7 	bl	8019738 <rcl_action_wait_set_add_action_server>
 8010fea:	2800      	cmp	r0, #0
 8010fec:	f43f af44 	beq.w	8010e78 <rclc_executor_spin_some.part.0+0x60>
 8010ff0:	4607      	mov	r7, r0
 8010ff2:	e7c9      	b.n	8010f88 <rclc_executor_spin_some.part.0+0x170>
 8010ff4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8010ffe:	4630      	mov	r0, r6
 8011000:	3110      	adds	r1, #16
 8011002:	f008 f971 	bl	80192e8 <rcl_action_wait_set_add_action_client>
 8011006:	2800      	cmp	r0, #0
 8011008:	f43f af36 	beq.w	8010e78 <rclc_executor_spin_some.part.0+0x60>
 801100c:	4607      	mov	r7, r0
 801100e:	e7bb      	b.n	8010f88 <rclc_executor_spin_some.part.0+0x170>
 8011010:	2701      	movs	r7, #1
 8011012:	f000 fa7d 	bl	8011510 <rcutils_reset_error>
 8011016:	4638      	mov	r0, r7
 8011018:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801101c:	4627      	mov	r7, r4
 801101e:	e7fa      	b.n	8011016 <rclc_executor_spin_some.part.0+0x1fe>
 8011020:	68ab      	ldr	r3, [r5, #8]
 8011022:	2b00      	cmp	r3, #0
 8011024:	f000 8093 	beq.w	801114e <rclc_executor_spin_some.part.0+0x336>
 8011028:	2400      	movs	r4, #0
 801102a:	f240 1991 	movw	r9, #401	; 0x191
 801102e:	46a0      	mov	r8, r4
 8011030:	e008      	b.n	8011044 <rclc_executor_spin_some.part.0+0x22c>
 8011032:	f7ff fa57 	bl	80104e4 <_rclc_check_for_new_data>
 8011036:	4604      	mov	r4, r0
 8011038:	b108      	cbz	r0, 801103e <rclc_executor_spin_some.part.0+0x226>
 801103a:	4548      	cmp	r0, r9
 801103c:	d1ee      	bne.n	801101c <rclc_executor_spin_some.part.0+0x204>
 801103e:	68ab      	ldr	r3, [r5, #8]
 8011040:	4598      	cmp	r8, r3
 8011042:	d266      	bcs.n	8011112 <rclc_executor_spin_some.part.0+0x2fa>
 8011044:	686a      	ldr	r2, [r5, #4]
 8011046:	4631      	mov	r1, r6
 8011048:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 801104c:	f108 0801 	add.w	r8, r8, #1
 8011050:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8011054:	f1bc 0f00 	cmp.w	ip, #0
 8011058:	d1eb      	bne.n	8011032 <rclc_executor_spin_some.part.0+0x21a>
 801105a:	4619      	mov	r1, r3
 801105c:	4610      	mov	r0, r2
 801105e:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 8011062:	4798      	blx	r3
 8011064:	2800      	cmp	r0, #0
 8011066:	d0d9      	beq.n	801101c <rclc_executor_spin_some.part.0+0x204>
 8011068:	68ab      	ldr	r3, [r5, #8]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d0d6      	beq.n	801101c <rclc_executor_spin_some.part.0+0x204>
 801106e:	f04f 0a00 	mov.w	sl, #0
 8011072:	f240 1891 	movw	r8, #401	; 0x191
 8011076:	f240 2959 	movw	r9, #601	; 0x259
 801107a:	e00e      	b.n	801109a <rclc_executor_spin_some.part.0+0x282>
 801107c:	f813 300b 	ldrb.w	r3, [r3, fp]
 8011080:	2b08      	cmp	r3, #8
 8011082:	d034      	beq.n	80110ee <rclc_executor_spin_some.part.0+0x2d6>
 8011084:	2b09      	cmp	r3, #9
 8011086:	d029      	beq.n	80110dc <rclc_executor_spin_some.part.0+0x2c4>
 8011088:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 801108c:	bb03      	cbnz	r3, 80110d0 <rclc_executor_spin_some.part.0+0x2b8>
 801108e:	f10a 0a01 	add.w	sl, sl, #1
 8011092:	68ab      	ldr	r3, [r5, #8]
 8011094:	459a      	cmp	sl, r3
 8011096:	d2be      	bcs.n	8011016 <rclc_executor_spin_some.part.0+0x1fe>
 8011098:	2400      	movs	r4, #0
 801109a:	6868      	ldr	r0, [r5, #4]
 801109c:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 80110a0:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 80110a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d0b7      	beq.n	801101c <rclc_executor_spin_some.part.0+0x204>
 80110ac:	4631      	mov	r1, r6
 80110ae:	f7ff fa67 	bl	8010580 <_rclc_take_new_data>
 80110b2:	2800      	cmp	r0, #0
 80110b4:	bf18      	it	ne
 80110b6:	4540      	cmpne	r0, r8
 80110b8:	d001      	beq.n	80110be <rclc_executor_spin_some.part.0+0x2a6>
 80110ba:	4548      	cmp	r0, r9
 80110bc:	d10c      	bne.n	80110d8 <rclc_executor_spin_some.part.0+0x2c0>
 80110be:	686b      	ldr	r3, [r5, #4]
 80110c0:	eb13 000b 	adds.w	r0, r3, fp
 80110c4:	d021      	beq.n	801110a <rclc_executor_spin_some.part.0+0x2f2>
 80110c6:	7842      	ldrb	r2, [r0, #1]
 80110c8:	2a00      	cmp	r2, #0
 80110ca:	d0d7      	beq.n	801107c <rclc_executor_spin_some.part.0+0x264>
 80110cc:	2a01      	cmp	r2, #1
 80110ce:	d1de      	bne.n	801108e <rclc_executor_spin_some.part.0+0x276>
 80110d0:	f7ff fbca 	bl	8010868 <_rclc_execute.part.0>
 80110d4:	2800      	cmp	r0, #0
 80110d6:	d0da      	beq.n	801108e <rclc_executor_spin_some.part.0+0x276>
 80110d8:	4607      	mov	r7, r0
 80110da:	e79c      	b.n	8011016 <rclc_executor_spin_some.part.0+0x1fe>
 80110dc:	6843      	ldr	r3, [r0, #4]
 80110de:	6a1a      	ldr	r2, [r3, #32]
 80110e0:	2a00      	cmp	r2, #0
 80110e2:	d1f5      	bne.n	80110d0 <rclc_executor_spin_some.part.0+0x2b8>
 80110e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d0d0      	beq.n	801108e <rclc_executor_spin_some.part.0+0x276>
 80110ec:	e7f0      	b.n	80110d0 <rclc_executor_spin_some.part.0+0x2b8>
 80110ee:	6843      	ldr	r3, [r0, #4]
 80110f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80110f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80110f6:	d1eb      	bne.n	80110d0 <rclc_executor_spin_some.part.0+0x2b8>
 80110f8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80110fc:	2a00      	cmp	r2, #0
 80110fe:	d1e7      	bne.n	80110d0 <rclc_executor_spin_some.part.0+0x2b8>
 8011100:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011104:	2b00      	cmp	r3, #0
 8011106:	d0c2      	beq.n	801108e <rclc_executor_spin_some.part.0+0x276>
 8011108:	e7e2      	b.n	80110d0 <rclc_executor_spin_some.part.0+0x2b8>
 801110a:	270b      	movs	r7, #11
 801110c:	e783      	b.n	8011016 <rclc_executor_spin_some.part.0+0x1fe>
 801110e:	686a      	ldr	r2, [r5, #4]
 8011110:	e6e2      	b.n	8010ed8 <rclc_executor_spin_some.part.0+0xc0>
 8011112:	686a      	ldr	r2, [r5, #4]
 8011114:	e7a1      	b.n	801105a <rclc_executor_spin_some.part.0+0x242>
 8011116:	6842      	ldr	r2, [r0, #4]
 8011118:	6a11      	ldr	r1, [r2, #32]
 801111a:	2900      	cmp	r1, #0
 801111c:	f47f af22 	bne.w	8010f64 <rclc_executor_spin_some.part.0+0x14c>
 8011120:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8011124:	2a00      	cmp	r2, #0
 8011126:	f43f af0b 	beq.w	8010f40 <rclc_executor_spin_some.part.0+0x128>
 801112a:	e71b      	b.n	8010f64 <rclc_executor_spin_some.part.0+0x14c>
 801112c:	6842      	ldr	r2, [r0, #4]
 801112e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8011130:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 8011134:	f47f af16 	bne.w	8010f64 <rclc_executor_spin_some.part.0+0x14c>
 8011138:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 801113c:	2900      	cmp	r1, #0
 801113e:	f47f af11 	bne.w	8010f64 <rclc_executor_spin_some.part.0+0x14c>
 8011142:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 8011146:	2a00      	cmp	r2, #0
 8011148:	f43f aefa 	beq.w	8010f40 <rclc_executor_spin_some.part.0+0x128>
 801114c:	e70a      	b.n	8010f64 <rclc_executor_spin_some.part.0+0x14c>
 801114e:	686a      	ldr	r2, [r5, #4]
 8011150:	461c      	mov	r4, r3
 8011152:	e782      	b.n	801105a <rclc_executor_spin_some.part.0+0x242>
 8011154:	686a      	ldr	r2, [r5, #4]
 8011156:	461c      	mov	r4, r3
 8011158:	e6be      	b.n	8010ed8 <rclc_executor_spin_some.part.0+0xc0>
 801115a:	bf00      	nop

0801115c <rclc_executor_spin_some>:
 801115c:	b190      	cbz	r0, 8011184 <rclc_executor_spin_some+0x28>
 801115e:	b570      	push	{r4, r5, r6, lr}
 8011160:	4604      	mov	r4, r0
 8011162:	6800      	ldr	r0, [r0, #0]
 8011164:	4616      	mov	r6, r2
 8011166:	461d      	mov	r5, r3
 8011168:	f006 fb7a 	bl	8017860 <rcl_context_is_valid>
 801116c:	b130      	cbz	r0, 801117c <rclc_executor_spin_some+0x20>
 801116e:	4632      	mov	r2, r6
 8011170:	462b      	mov	r3, r5
 8011172:	4620      	mov	r0, r4
 8011174:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011178:	f7ff be4e 	b.w	8010e18 <rclc_executor_spin_some.part.0>
 801117c:	f000 f9c8 	bl	8011510 <rcutils_reset_error>
 8011180:	2001      	movs	r0, #1
 8011182:	bd70      	pop	{r4, r5, r6, pc}
 8011184:	200b      	movs	r0, #11
 8011186:	4770      	bx	lr

08011188 <rclc_executor_handle_counters_zero_init>:
 8011188:	b130      	cbz	r0, 8011198 <rclc_executor_handle_counters_zero_init+0x10>
 801118a:	2220      	movs	r2, #32
 801118c:	2100      	movs	r1, #0
 801118e:	b508      	push	{r3, lr}
 8011190:	f00b f93c 	bl	801c40c <memset>
 8011194:	2000      	movs	r0, #0
 8011196:	bd08      	pop	{r3, pc}
 8011198:	200b      	movs	r0, #11
 801119a:	4770      	bx	lr
 801119c:	0000      	movs	r0, r0
	...

080111a0 <rclc_executor_handle_init>:
 80111a0:	4603      	mov	r3, r0
 80111a2:	b178      	cbz	r0, 80111c4 <rclc_executor_handle_init+0x24>
 80111a4:	2200      	movs	r2, #0
 80111a6:	f04f 0c0b 	mov.w	ip, #11
 80111aa:	6341      	str	r1, [r0, #52]	; 0x34
 80111ac:	4610      	mov	r0, r2
 80111ae:	f8a3 c000 	strh.w	ip, [r3]
 80111b2:	631a      	str	r2, [r3, #48]	; 0x30
 80111b4:	871a      	strh	r2, [r3, #56]	; 0x38
 80111b6:	ed9f 7b04 	vldr	d7, [pc, #16]	; 80111c8 <rclc_executor_handle_init+0x28>
 80111ba:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80111be:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 80111c2:	4770      	bx	lr
 80111c4:	200b      	movs	r0, #11
 80111c6:	4770      	bx	lr
	...

080111d0 <rclc_support_init_with_options>:
 80111d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111d4:	b083      	sub	sp, #12
 80111d6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80111d8:	2b00      	cmp	r3, #0
 80111da:	bf18      	it	ne
 80111dc:	2f00      	cmpne	r7, #0
 80111de:	d027      	beq.n	8011230 <rclc_support_init_with_options+0x60>
 80111e0:	4604      	mov	r4, r0
 80111e2:	b328      	cbz	r0, 8011230 <rclc_support_init_with_options+0x60>
 80111e4:	46e9      	mov	r9, sp
 80111e6:	461d      	mov	r5, r3
 80111e8:	460e      	mov	r6, r1
 80111ea:	4690      	mov	r8, r2
 80111ec:	4648      	mov	r0, r9
 80111ee:	f006 fb2d 	bl	801784c <rcl_get_zero_initialized_context>
 80111f2:	462a      	mov	r2, r5
 80111f4:	4623      	mov	r3, r4
 80111f6:	e899 0003 	ldmia.w	r9, {r0, r1}
 80111fa:	e884 0003 	stmia.w	r4, {r0, r1}
 80111fe:	4641      	mov	r1, r8
 8011200:	4630      	mov	r0, r6
 8011202:	f006 fc41 	bl	8017a88 <rcl_init>
 8011206:	4605      	mov	r5, r0
 8011208:	b960      	cbnz	r0, 8011224 <rclc_support_init_with_options+0x54>
 801120a:	463a      	mov	r2, r7
 801120c:	f104 010c 	add.w	r1, r4, #12
 8011210:	2003      	movs	r0, #3
 8011212:	60a7      	str	r7, [r4, #8]
 8011214:	f006 ff4e 	bl	80180b4 <rcl_clock_init>
 8011218:	4605      	mov	r5, r0
 801121a:	b918      	cbnz	r0, 8011224 <rclc_support_init_with_options+0x54>
 801121c:	4628      	mov	r0, r5
 801121e:	b003      	add	sp, #12
 8011220:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011224:	f000 f974 	bl	8011510 <rcutils_reset_error>
 8011228:	4628      	mov	r0, r5
 801122a:	b003      	add	sp, #12
 801122c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011230:	250b      	movs	r5, #11
 8011232:	4628      	mov	r0, r5
 8011234:	b003      	add	sp, #12
 8011236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801123a:	bf00      	nop

0801123c <rclc_node_init_with_options>:
 801123c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011240:	b087      	sub	sp, #28
 8011242:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011244:	2e00      	cmp	r6, #0
 8011246:	bf18      	it	ne
 8011248:	2b00      	cmpne	r3, #0
 801124a:	bf0c      	ite	eq
 801124c:	f04f 0c01 	moveq.w	ip, #1
 8011250:	f04f 0c00 	movne.w	ip, #0
 8011254:	2a00      	cmp	r2, #0
 8011256:	bf08      	it	eq
 8011258:	f04c 0c01 	orreq.w	ip, ip, #1
 801125c:	2900      	cmp	r1, #0
 801125e:	bf08      	it	eq
 8011260:	f04c 0c01 	orreq.w	ip, ip, #1
 8011264:	f1bc 0f00 	cmp.w	ip, #0
 8011268:	d118      	bne.n	801129c <rclc_node_init_with_options+0x60>
 801126a:	4604      	mov	r4, r0
 801126c:	b1b0      	cbz	r0, 801129c <rclc_node_init_with_options+0x60>
 801126e:	f10d 0910 	add.w	r9, sp, #16
 8011272:	460d      	mov	r5, r1
 8011274:	4698      	mov	r8, r3
 8011276:	4617      	mov	r7, r2
 8011278:	4648      	mov	r0, r9
 801127a:	f7fe fc09 	bl	800fa90 <rcl_get_zero_initialized_node>
 801127e:	9600      	str	r6, [sp, #0]
 8011280:	4643      	mov	r3, r8
 8011282:	463a      	mov	r2, r7
 8011284:	e899 0003 	ldmia.w	r9, {r0, r1}
 8011288:	e884 0003 	stmia.w	r4, {r0, r1}
 801128c:	4629      	mov	r1, r5
 801128e:	4620      	mov	r0, r4
 8011290:	f7fe fc08 	bl	800faa4 <rcl_node_init>
 8011294:	b930      	cbnz	r0, 80112a4 <rclc_node_init_with_options+0x68>
 8011296:	b007      	add	sp, #28
 8011298:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801129c:	200b      	movs	r0, #11
 801129e:	b007      	add	sp, #28
 80112a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112a4:	9003      	str	r0, [sp, #12]
 80112a6:	f000 f933 	bl	8011510 <rcutils_reset_error>
 80112aa:	9803      	ldr	r0, [sp, #12]
 80112ac:	b007      	add	sp, #28
 80112ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112b2:	bf00      	nop

080112b4 <rclc_publisher_init_default>:
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	bf18      	it	ne
 80112b8:	2a00      	cmpne	r2, #0
 80112ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112be:	4616      	mov	r6, r2
 80112c0:	bf0c      	ite	eq
 80112c2:	2201      	moveq	r2, #1
 80112c4:	2200      	movne	r2, #0
 80112c6:	b0a0      	sub	sp, #128	; 0x80
 80112c8:	2900      	cmp	r1, #0
 80112ca:	bf08      	it	eq
 80112cc:	f042 0201 	orreq.w	r2, r2, #1
 80112d0:	bb1a      	cbnz	r2, 801131a <rclc_publisher_init_default+0x66>
 80112d2:	4604      	mov	r4, r0
 80112d4:	b308      	cbz	r0, 801131a <rclc_publisher_init_default+0x66>
 80112d6:	f10d 0810 	add.w	r8, sp, #16
 80112da:	461f      	mov	r7, r3
 80112dc:	460d      	mov	r5, r1
 80112de:	f7fe fd81 	bl	800fde4 <rcl_get_zero_initialized_publisher>
 80112e2:	6020      	str	r0, [r4, #0]
 80112e4:	4640      	mov	r0, r8
 80112e6:	f7fe fe1d 	bl	800ff24 <rcl_publisher_get_default_options>
 80112ea:	2250      	movs	r2, #80	; 0x50
 80112ec:	490d      	ldr	r1, [pc, #52]	; (8011324 <rclc_publisher_init_default+0x70>)
 80112ee:	4640      	mov	r0, r8
 80112f0:	f00b f955 	bl	801c59e <memcpy>
 80112f4:	463b      	mov	r3, r7
 80112f6:	4632      	mov	r2, r6
 80112f8:	4629      	mov	r1, r5
 80112fa:	4620      	mov	r0, r4
 80112fc:	f8cd 8000 	str.w	r8, [sp]
 8011300:	f7fe fd76 	bl	800fdf0 <rcl_publisher_init>
 8011304:	b910      	cbnz	r0, 801130c <rclc_publisher_init_default+0x58>
 8011306:	b020      	add	sp, #128	; 0x80
 8011308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801130c:	9003      	str	r0, [sp, #12]
 801130e:	f000 f8ff 	bl	8011510 <rcutils_reset_error>
 8011312:	9803      	ldr	r0, [sp, #12]
 8011314:	b020      	add	sp, #128	; 0x80
 8011316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801131a:	200b      	movs	r0, #11
 801131c:	b020      	add	sp, #128	; 0x80
 801131e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011322:	bf00      	nop
 8011324:	0801dae0 	.word	0x0801dae0

08011328 <rclc_service_init_default>:
 8011328:	2b00      	cmp	r3, #0
 801132a:	bf18      	it	ne
 801132c:	2a00      	cmpne	r2, #0
 801132e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011332:	4616      	mov	r6, r2
 8011334:	bf0c      	ite	eq
 8011336:	2201      	moveq	r2, #1
 8011338:	2200      	movne	r2, #0
 801133a:	b09e      	sub	sp, #120	; 0x78
 801133c:	2900      	cmp	r1, #0
 801133e:	bf08      	it	eq
 8011340:	f042 0201 	orreq.w	r2, r2, #1
 8011344:	bb1a      	cbnz	r2, 801138e <rclc_service_init_default+0x66>
 8011346:	4604      	mov	r4, r0
 8011348:	b308      	cbz	r0, 801138e <rclc_service_init_default+0x66>
 801134a:	f10d 0810 	add.w	r8, sp, #16
 801134e:	461f      	mov	r7, r3
 8011350:	460d      	mov	r5, r1
 8011352:	f7fe fe5b 	bl	801000c <rcl_get_zero_initialized_service>
 8011356:	6020      	str	r0, [r4, #0]
 8011358:	4640      	mov	r0, r8
 801135a:	f7fe feef 	bl	801013c <rcl_service_get_default_options>
 801135e:	2250      	movs	r2, #80	; 0x50
 8011360:	490d      	ldr	r1, [pc, #52]	; (8011398 <rclc_service_init_default+0x70>)
 8011362:	4640      	mov	r0, r8
 8011364:	f00b f91b 	bl	801c59e <memcpy>
 8011368:	463b      	mov	r3, r7
 801136a:	4632      	mov	r2, r6
 801136c:	4629      	mov	r1, r5
 801136e:	4620      	mov	r0, r4
 8011370:	f8cd 8000 	str.w	r8, [sp]
 8011374:	f7fe fe50 	bl	8010018 <rcl_service_init>
 8011378:	b910      	cbnz	r0, 8011380 <rclc_service_init_default+0x58>
 801137a:	b01e      	add	sp, #120	; 0x78
 801137c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011380:	9003      	str	r0, [sp, #12]
 8011382:	f000 f8c5 	bl	8011510 <rcutils_reset_error>
 8011386:	9803      	ldr	r0, [sp, #12]
 8011388:	b01e      	add	sp, #120	; 0x78
 801138a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801138e:	200b      	movs	r0, #11
 8011390:	b01e      	add	sp, #120	; 0x78
 8011392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011396:	bf00      	nop
 8011398:	0801db30 	.word	0x0801db30

0801139c <rclc_subscription_init_default>:
 801139c:	2b00      	cmp	r3, #0
 801139e:	bf18      	it	ne
 80113a0:	2a00      	cmpne	r2, #0
 80113a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a6:	4616      	mov	r6, r2
 80113a8:	bf0c      	ite	eq
 80113aa:	2201      	moveq	r2, #1
 80113ac:	2200      	movne	r2, #0
 80113ae:	b0a0      	sub	sp, #128	; 0x80
 80113b0:	2900      	cmp	r1, #0
 80113b2:	bf08      	it	eq
 80113b4:	f042 0201 	orreq.w	r2, r2, #1
 80113b8:	bb1a      	cbnz	r2, 8011402 <rclc_subscription_init_default+0x66>
 80113ba:	4604      	mov	r4, r0
 80113bc:	b308      	cbz	r0, 8011402 <rclc_subscription_init_default+0x66>
 80113be:	f10d 0810 	add.w	r8, sp, #16
 80113c2:	461f      	mov	r7, r3
 80113c4:	460d      	mov	r5, r1
 80113c6:	f7fe ff45 	bl	8010254 <rcl_get_zero_initialized_subscription>
 80113ca:	6020      	str	r0, [r4, #0]
 80113cc:	4640      	mov	r0, r8
 80113ce:	f7fe fff5 	bl	80103bc <rcl_subscription_get_default_options>
 80113d2:	2250      	movs	r2, #80	; 0x50
 80113d4:	490d      	ldr	r1, [pc, #52]	; (801140c <rclc_subscription_init_default+0x70>)
 80113d6:	4640      	mov	r0, r8
 80113d8:	f00b f8e1 	bl	801c59e <memcpy>
 80113dc:	463b      	mov	r3, r7
 80113de:	4632      	mov	r2, r6
 80113e0:	4629      	mov	r1, r5
 80113e2:	4620      	mov	r0, r4
 80113e4:	f8cd 8000 	str.w	r8, [sp]
 80113e8:	f7fe ff3a 	bl	8010260 <rcl_subscription_init>
 80113ec:	b910      	cbnz	r0, 80113f4 <rclc_subscription_init_default+0x58>
 80113ee:	b020      	add	sp, #128	; 0x80
 80113f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113f4:	9003      	str	r0, [sp, #12]
 80113f6:	f000 f88b 	bl	8011510 <rcutils_reset_error>
 80113fa:	9803      	ldr	r0, [sp, #12]
 80113fc:	b020      	add	sp, #128	; 0x80
 80113fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011402:	200b      	movs	r0, #11
 8011404:	b020      	add	sp, #128	; 0x80
 8011406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801140a:	bf00      	nop
 801140c:	0801db80 	.word	0x0801db80

08011410 <__default_zero_allocate>:
 8011410:	f00a ba5c 	b.w	801b8cc <calloc>

08011414 <__default_reallocate>:
 8011414:	f00a bbfa 	b.w	801bc0c <realloc>

08011418 <__default_deallocate>:
 8011418:	f00a bad8 	b.w	801b9cc <free>

0801141c <__default_allocate>:
 801141c:	f00a bace 	b.w	801b9bc <malloc>

08011420 <rcutils_get_zero_initialized_allocator>:
 8011420:	b510      	push	{r4, lr}
 8011422:	4c05      	ldr	r4, [pc, #20]	; (8011438 <rcutils_get_zero_initialized_allocator+0x18>)
 8011424:	4686      	mov	lr, r0
 8011426:	4684      	mov	ip, r0
 8011428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801142a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801142e:	6823      	ldr	r3, [r4, #0]
 8011430:	4670      	mov	r0, lr
 8011432:	f8cc 3000 	str.w	r3, [ip]
 8011436:	bd10      	pop	{r4, pc}
 8011438:	0801dbd0 	.word	0x0801dbd0

0801143c <rcutils_set_default_allocator>:
 801143c:	b1a8      	cbz	r0, 801146a <rcutils_set_default_allocator+0x2e>
 801143e:	6802      	ldr	r2, [r0, #0]
 8011440:	b1a2      	cbz	r2, 801146c <rcutils_set_default_allocator+0x30>
 8011442:	6841      	ldr	r1, [r0, #4]
 8011444:	b1a1      	cbz	r1, 8011470 <rcutils_set_default_allocator+0x34>
 8011446:	b410      	push	{r4}
 8011448:	68c4      	ldr	r4, [r0, #12]
 801144a:	b164      	cbz	r4, 8011466 <rcutils_set_default_allocator+0x2a>
 801144c:	6880      	ldr	r0, [r0, #8]
 801144e:	b138      	cbz	r0, 8011460 <rcutils_set_default_allocator+0x24>
 8011450:	4b08      	ldr	r3, [pc, #32]	; (8011474 <rcutils_set_default_allocator+0x38>)
 8011452:	601a      	str	r2, [r3, #0]
 8011454:	2200      	movs	r2, #0
 8011456:	e9c3 1001 	strd	r1, r0, [r3, #4]
 801145a:	2001      	movs	r0, #1
 801145c:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8011460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011464:	4770      	bx	lr
 8011466:	4620      	mov	r0, r4
 8011468:	e7fa      	b.n	8011460 <rcutils_set_default_allocator+0x24>
 801146a:	4770      	bx	lr
 801146c:	4610      	mov	r0, r2
 801146e:	4770      	bx	lr
 8011470:	4608      	mov	r0, r1
 8011472:	4770      	bx	lr
 8011474:	200003dc 	.word	0x200003dc

08011478 <rcutils_get_default_allocator>:
 8011478:	b510      	push	{r4, lr}
 801147a:	4c05      	ldr	r4, [pc, #20]	; (8011490 <rcutils_get_default_allocator+0x18>)
 801147c:	4686      	mov	lr, r0
 801147e:	4684      	mov	ip, r0
 8011480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011482:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011486:	6823      	ldr	r3, [r4, #0]
 8011488:	4670      	mov	r0, lr
 801148a:	f8cc 3000 	str.w	r3, [ip]
 801148e:	bd10      	pop	{r4, pc}
 8011490:	200003dc 	.word	0x200003dc

08011494 <rcutils_allocator_is_valid>:
 8011494:	b158      	cbz	r0, 80114ae <rcutils_allocator_is_valid+0x1a>
 8011496:	6803      	ldr	r3, [r0, #0]
 8011498:	b143      	cbz	r3, 80114ac <rcutils_allocator_is_valid+0x18>
 801149a:	6843      	ldr	r3, [r0, #4]
 801149c:	b133      	cbz	r3, 80114ac <rcutils_allocator_is_valid+0x18>
 801149e:	68c3      	ldr	r3, [r0, #12]
 80114a0:	b123      	cbz	r3, 80114ac <rcutils_allocator_is_valid+0x18>
 80114a2:	6880      	ldr	r0, [r0, #8]
 80114a4:	3800      	subs	r0, #0
 80114a6:	bf18      	it	ne
 80114a8:	2001      	movne	r0, #1
 80114aa:	4770      	bx	lr
 80114ac:	4618      	mov	r0, r3
 80114ae:	4770      	bx	lr

080114b0 <rcutils_get_env>:
 80114b0:	b168      	cbz	r0, 80114ce <rcutils_get_env+0x1e>
 80114b2:	b510      	push	{r4, lr}
 80114b4:	460c      	mov	r4, r1
 80114b6:	b129      	cbz	r1, 80114c4 <rcutils_get_env+0x14>
 80114b8:	f00a fa38 	bl	801b92c <getenv>
 80114bc:	b120      	cbz	r0, 80114c8 <rcutils_get_env+0x18>
 80114be:	6020      	str	r0, [r4, #0]
 80114c0:	2000      	movs	r0, #0
 80114c2:	bd10      	pop	{r4, pc}
 80114c4:	4803      	ldr	r0, [pc, #12]	; (80114d4 <rcutils_get_env+0x24>)
 80114c6:	bd10      	pop	{r4, pc}
 80114c8:	4b03      	ldr	r3, [pc, #12]	; (80114d8 <rcutils_get_env+0x28>)
 80114ca:	6023      	str	r3, [r4, #0]
 80114cc:	bd10      	pop	{r4, pc}
 80114ce:	4803      	ldr	r0, [pc, #12]	; (80114dc <rcutils_get_env+0x2c>)
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	0801dc00 	.word	0x0801dc00
 80114d8:	0801dfb8 	.word	0x0801dfb8
 80114dc:	0801dbe4 	.word	0x0801dbe4

080114e0 <rcutils_get_error_string>:
 80114e0:	4b06      	ldr	r3, [pc, #24]	; (80114fc <rcutils_get_error_string+0x1c>)
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	b13b      	cbz	r3, 80114f6 <rcutils_get_error_string+0x16>
 80114e6:	4b06      	ldr	r3, [pc, #24]	; (8011500 <rcutils_get_error_string+0x20>)
 80114e8:	781a      	ldrb	r2, [r3, #0]
 80114ea:	b90a      	cbnz	r2, 80114f0 <rcutils_get_error_string+0x10>
 80114ec:	2201      	movs	r2, #1
 80114ee:	701a      	strb	r2, [r3, #0]
 80114f0:	4b04      	ldr	r3, [pc, #16]	; (8011504 <rcutils_get_error_string+0x24>)
 80114f2:	7818      	ldrb	r0, [r3, #0]
 80114f4:	4770      	bx	lr
 80114f6:	4b04      	ldr	r3, [pc, #16]	; (8011508 <rcutils_get_error_string+0x28>)
 80114f8:	7818      	ldrb	r0, [r3, #0]
 80114fa:	4770      	bx	lr
 80114fc:	2000ded8 	.word	0x2000ded8
 8011500:	2000def1 	.word	0x2000def1
 8011504:	2000def0 	.word	0x2000def0
 8011508:	0801d5ac 	.word	0x0801d5ac
 801150c:	00000000 	.word	0x00000000

08011510 <rcutils_reset_error>:
 8011510:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8011530 <rcutils_reset_error+0x20>
 8011514:	2300      	movs	r3, #0
 8011516:	4a08      	ldr	r2, [pc, #32]	; (8011538 <rcutils_reset_error+0x28>)
 8011518:	4808      	ldr	r0, [pc, #32]	; (801153c <rcutils_reset_error+0x2c>)
 801151a:	8013      	strh	r3, [r2, #0]
 801151c:	4908      	ldr	r1, [pc, #32]	; (8011540 <rcutils_reset_error+0x30>)
 801151e:	7003      	strb	r3, [r0, #0]
 8011520:	700b      	strb	r3, [r1, #0]
 8011522:	ed82 7b02 	vstr	d7, [r2, #8]
 8011526:	4a07      	ldr	r2, [pc, #28]	; (8011544 <rcutils_reset_error+0x34>)
 8011528:	7013      	strb	r3, [r2, #0]
 801152a:	4770      	bx	lr
 801152c:	f3af 8000 	nop.w
	...
 8011538:	2000dee0 	.word	0x2000dee0
 801153c:	2000def1 	.word	0x2000def1
 8011540:	2000def0 	.word	0x2000def0
 8011544:	2000ded8 	.word	0x2000ded8

08011548 <rcutils_format_string_limit>:
 8011548:	b40f      	push	{r0, r1, r2, r3}
 801154a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801154c:	b083      	sub	sp, #12
 801154e:	ac08      	add	r4, sp, #32
 8011550:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011552:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011556:	b326      	cbz	r6, 80115a2 <rcutils_format_string_limit+0x5a>
 8011558:	a808      	add	r0, sp, #32
 801155a:	f7ff ff9b 	bl	8011494 <rcutils_allocator_is_valid>
 801155e:	b300      	cbz	r0, 80115a2 <rcutils_format_string_limit+0x5a>
 8011560:	2100      	movs	r1, #0
 8011562:	ab0f      	add	r3, sp, #60	; 0x3c
 8011564:	4632      	mov	r2, r6
 8011566:	4608      	mov	r0, r1
 8011568:	e9cd 3300 	strd	r3, r3, [sp]
 801156c:	f000 f906 	bl	801177c <rcutils_vsnprintf>
 8011570:	1c43      	adds	r3, r0, #1
 8011572:	4605      	mov	r5, r0
 8011574:	d015      	beq.n	80115a2 <rcutils_format_string_limit+0x5a>
 8011576:	1c47      	adds	r7, r0, #1
 8011578:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801157a:	429f      	cmp	r7, r3
 801157c:	d901      	bls.n	8011582 <rcutils_format_string_limit+0x3a>
 801157e:	1e5d      	subs	r5, r3, #1
 8011580:	461f      	mov	r7, r3
 8011582:	9b08      	ldr	r3, [sp, #32]
 8011584:	4638      	mov	r0, r7
 8011586:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011588:	4798      	blx	r3
 801158a:	4604      	mov	r4, r0
 801158c:	b148      	cbz	r0, 80115a2 <rcutils_format_string_limit+0x5a>
 801158e:	4632      	mov	r2, r6
 8011590:	4639      	mov	r1, r7
 8011592:	9b01      	ldr	r3, [sp, #4]
 8011594:	f000 f8f2 	bl	801177c <rcutils_vsnprintf>
 8011598:	2800      	cmp	r0, #0
 801159a:	db09      	blt.n	80115b0 <rcutils_format_string_limit+0x68>
 801159c:	2300      	movs	r3, #0
 801159e:	5563      	strb	r3, [r4, r5]
 80115a0:	e000      	b.n	80115a4 <rcutils_format_string_limit+0x5c>
 80115a2:	2400      	movs	r4, #0
 80115a4:	4620      	mov	r0, r4
 80115a6:	b003      	add	sp, #12
 80115a8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80115ac:	b004      	add	sp, #16
 80115ae:	4770      	bx	lr
 80115b0:	4620      	mov	r0, r4
 80115b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80115b4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80115b6:	2400      	movs	r4, #0
 80115b8:	4798      	blx	r3
 80115ba:	e7f3      	b.n	80115a4 <rcutils_format_string_limit+0x5c>

080115bc <rcutils_repl_str>:
 80115bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115c0:	ed2d 8b02 	vpush	{d8}
 80115c4:	b087      	sub	sp, #28
 80115c6:	2600      	movs	r6, #0
 80115c8:	4680      	mov	r8, r0
 80115ca:	468a      	mov	sl, r1
 80115cc:	9000      	str	r0, [sp, #0]
 80115ce:	4608      	mov	r0, r1
 80115d0:	ee08 2a10 	vmov	s16, r2
 80115d4:	4699      	mov	r9, r3
 80115d6:	2510      	movs	r5, #16
 80115d8:	f7ee fe3c 	bl	8000254 <strlen>
 80115dc:	4637      	mov	r7, r6
 80115de:	46b3      	mov	fp, r6
 80115e0:	9001      	str	r0, [sp, #4]
 80115e2:	e01e      	b.n	8011622 <rcutils_repl_str+0x66>
 80115e4:	f10b 0b01 	add.w	fp, fp, #1
 80115e8:	9b01      	ldr	r3, [sp, #4]
 80115ea:	455e      	cmp	r6, fp
 80115ec:	eb04 0803 	add.w	r8, r4, r3
 80115f0:	d211      	bcs.n	8011616 <rcutils_repl_str+0x5a>
 80115f2:	442e      	add	r6, r5
 80115f4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80115f8:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80115fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011600:	00b1      	lsls	r1, r6, #2
 8011602:	4798      	blx	r3
 8011604:	2800      	cmp	r0, #0
 8011606:	f000 8088 	beq.w	801171a <rcutils_repl_str+0x15e>
 801160a:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 801160e:	4607      	mov	r7, r0
 8011610:	bf28      	it	cs
 8011612:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 8011616:	9a00      	ldr	r2, [sp, #0]
 8011618:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 801161c:	1aa4      	subs	r4, r4, r2
 801161e:	f843 4c04 	str.w	r4, [r3, #-4]
 8011622:	4651      	mov	r1, sl
 8011624:	4640      	mov	r0, r8
 8011626:	f00a ff18 	bl	801c45a <strstr>
 801162a:	4604      	mov	r4, r0
 801162c:	4638      	mov	r0, r7
 801162e:	2c00      	cmp	r4, #0
 8011630:	d1d8      	bne.n	80115e4 <rcutils_repl_str+0x28>
 8011632:	4640      	mov	r0, r8
 8011634:	f7ee fe0e 	bl	8000254 <strlen>
 8011638:	9b00      	ldr	r3, [sp, #0]
 801163a:	eba8 0803 	sub.w	r8, r8, r3
 801163e:	eb08 0400 	add.w	r4, r8, r0
 8011642:	9402      	str	r4, [sp, #8]
 8011644:	f1bb 0f00 	cmp.w	fp, #0
 8011648:	d045      	beq.n	80116d6 <rcutils_repl_str+0x11a>
 801164a:	ee18 0a10 	vmov	r0, s16
 801164e:	f7ee fe01 	bl	8000254 <strlen>
 8011652:	9a01      	ldr	r2, [sp, #4]
 8011654:	4606      	mov	r6, r0
 8011656:	f8d9 3000 	ldr.w	r3, [r9]
 801165a:	1a82      	subs	r2, r0, r2
 801165c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8011660:	fb0b 4202 	mla	r2, fp, r2, r4
 8011664:	1c50      	adds	r0, r2, #1
 8011666:	9205      	str	r2, [sp, #20]
 8011668:	4798      	blx	r3
 801166a:	4682      	mov	sl, r0
 801166c:	2800      	cmp	r0, #0
 801166e:	d054      	beq.n	801171a <rcutils_repl_str+0x15e>
 8011670:	683a      	ldr	r2, [r7, #0]
 8011672:	463d      	mov	r5, r7
 8011674:	9900      	ldr	r1, [sp, #0]
 8011676:	2401      	movs	r4, #1
 8011678:	f00a ff91 	bl	801c59e <memcpy>
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8011682:	eb0a 0803 	add.w	r8, sl, r3
 8011686:	ee18 7a10 	vmov	r7, s16
 801168a:	f8dd a000 	ldr.w	sl, [sp]
 801168e:	f8cd 9000 	str.w	r9, [sp]
 8011692:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8011696:	4632      	mov	r2, r6
 8011698:	4639      	mov	r1, r7
 801169a:	4640      	mov	r0, r8
 801169c:	44b0      	add	r8, r6
 801169e:	f00a ff7e 	bl	801c59e <memcpy>
 80116a2:	f855 2b04 	ldr.w	r2, [r5], #4
 80116a6:	45a3      	cmp	fp, r4
 80116a8:	444a      	add	r2, r9
 80116aa:	eb0a 0102 	add.w	r1, sl, r2
 80116ae:	d02a      	beq.n	8011706 <rcutils_repl_str+0x14a>
 80116b0:	6828      	ldr	r0, [r5, #0]
 80116b2:	1a82      	subs	r2, r0, r2
 80116b4:	4640      	mov	r0, r8
 80116b6:	4490      	add	r8, r2
 80116b8:	f00a ff71 	bl	801c59e <memcpy>
 80116bc:	1c62      	adds	r2, r4, #1
 80116be:	45a3      	cmp	fp, r4
 80116c0:	4614      	mov	r4, r2
 80116c2:	d8e8      	bhi.n	8011696 <rcutils_repl_str+0xda>
 80116c4:	f8dd 9000 	ldr.w	r9, [sp]
 80116c8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80116cc:	2300      	movs	r3, #0
 80116ce:	9a05      	ldr	r2, [sp, #20]
 80116d0:	f80a 3002 	strb.w	r3, [sl, r2]
 80116d4:	e00b      	b.n	80116ee <rcutils_repl_str+0x132>
 80116d6:	4620      	mov	r0, r4
 80116d8:	f8d9 3000 	ldr.w	r3, [r9]
 80116dc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80116e0:	3001      	adds	r0, #1
 80116e2:	4798      	blx	r3
 80116e4:	4682      	mov	sl, r0
 80116e6:	b110      	cbz	r0, 80116ee <rcutils_repl_str+0x132>
 80116e8:	9900      	ldr	r1, [sp, #0]
 80116ea:	f00a ff50 	bl	801c58e <strcpy>
 80116ee:	4638      	mov	r0, r7
 80116f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80116f4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80116f8:	4798      	blx	r3
 80116fa:	4650      	mov	r0, sl
 80116fc:	b007      	add	sp, #28
 80116fe:	ecbd 8b02 	vpop	{d8}
 8011702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011706:	9b02      	ldr	r3, [sp, #8]
 8011708:	4640      	mov	r0, r8
 801170a:	f8dd 9000 	ldr.w	r9, [sp]
 801170e:	1a9a      	subs	r2, r3, r2
 8011710:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8011714:	f00a ff43 	bl	801c59e <memcpy>
 8011718:	e7d8      	b.n	80116cc <rcutils_repl_str+0x110>
 801171a:	f04f 0a00 	mov.w	sl, #0
 801171e:	e7e6      	b.n	80116ee <rcutils_repl_str+0x132>

08011720 <rcutils_snprintf>:
 8011720:	b40c      	push	{r2, r3}
 8011722:	b530      	push	{r4, r5, lr}
 8011724:	b083      	sub	sp, #12
 8011726:	ab06      	add	r3, sp, #24
 8011728:	f853 2b04 	ldr.w	r2, [r3], #4
 801172c:	9301      	str	r3, [sp, #4]
 801172e:	b1e2      	cbz	r2, 801176a <rcutils_snprintf+0x4a>
 8011730:	fab0 f480 	clz	r4, r0
 8011734:	fab1 f581 	clz	r5, r1
 8011738:	ea50 0c01 	orrs.w	ip, r0, r1
 801173c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8011740:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8011744:	d008      	beq.n	8011758 <rcutils_snprintf+0x38>
 8011746:	b984      	cbnz	r4, 801176a <rcutils_snprintf+0x4a>
 8011748:	b97d      	cbnz	r5, 801176a <rcutils_snprintf+0x4a>
 801174a:	f00a fd91 	bl	801c270 <vsniprintf>
 801174e:	b003      	add	sp, #12
 8011750:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011754:	b002      	add	sp, #8
 8011756:	4770      	bx	lr
 8011758:	4661      	mov	r1, ip
 801175a:	4660      	mov	r0, ip
 801175c:	f00a fd88 	bl	801c270 <vsniprintf>
 8011760:	b003      	add	sp, #12
 8011762:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011766:	b002      	add	sp, #8
 8011768:	4770      	bx	lr
 801176a:	f00a fee3 	bl	801c534 <__errno>
 801176e:	2216      	movs	r2, #22
 8011770:	4603      	mov	r3, r0
 8011772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011776:	601a      	str	r2, [r3, #0]
 8011778:	e7e9      	b.n	801174e <rcutils_snprintf+0x2e>
 801177a:	bf00      	nop

0801177c <rcutils_vsnprintf>:
 801177c:	b570      	push	{r4, r5, r6, lr}
 801177e:	b1b2      	cbz	r2, 80117ae <rcutils_vsnprintf+0x32>
 8011780:	fab0 f480 	clz	r4, r0
 8011784:	fab1 f581 	clz	r5, r1
 8011788:	ea50 0c01 	orrs.w	ip, r0, r1
 801178c:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8011790:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8011794:	d005      	beq.n	80117a2 <rcutils_vsnprintf+0x26>
 8011796:	b954      	cbnz	r4, 80117ae <rcutils_vsnprintf+0x32>
 8011798:	b94d      	cbnz	r5, 80117ae <rcutils_vsnprintf+0x32>
 801179a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801179e:	f00a bd67 	b.w	801c270 <vsniprintf>
 80117a2:	4661      	mov	r1, ip
 80117a4:	4660      	mov	r0, ip
 80117a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117aa:	f00a bd61 	b.w	801c270 <vsniprintf>
 80117ae:	f00a fec1 	bl	801c534 <__errno>
 80117b2:	2316      	movs	r3, #22
 80117b4:	6003      	str	r3, [r0, #0]
 80117b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117ba:	bd70      	pop	{r4, r5, r6, pc}

080117bc <rcutils_strdup>:
 80117bc:	b084      	sub	sp, #16
 80117be:	b570      	push	{r4, r5, r6, lr}
 80117c0:	b082      	sub	sp, #8
 80117c2:	4605      	mov	r5, r0
 80117c4:	ac07      	add	r4, sp, #28
 80117c6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80117ca:	b1b0      	cbz	r0, 80117fa <rcutils_strdup+0x3e>
 80117cc:	f7ee fd42 	bl	8000254 <strlen>
 80117d0:	1c42      	adds	r2, r0, #1
 80117d2:	9b07      	ldr	r3, [sp, #28]
 80117d4:	4606      	mov	r6, r0
 80117d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80117d8:	4610      	mov	r0, r2
 80117da:	9201      	str	r2, [sp, #4]
 80117dc:	4798      	blx	r3
 80117de:	4604      	mov	r4, r0
 80117e0:	b128      	cbz	r0, 80117ee <rcutils_strdup+0x32>
 80117e2:	9a01      	ldr	r2, [sp, #4]
 80117e4:	4629      	mov	r1, r5
 80117e6:	f00a feda 	bl	801c59e <memcpy>
 80117ea:	2300      	movs	r3, #0
 80117ec:	55a3      	strb	r3, [r4, r6]
 80117ee:	4620      	mov	r0, r4
 80117f0:	b002      	add	sp, #8
 80117f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80117f6:	b004      	add	sp, #16
 80117f8:	4770      	bx	lr
 80117fa:	4604      	mov	r4, r0
 80117fc:	e7f7      	b.n	80117ee <rcutils_strdup+0x32>
 80117fe:	bf00      	nop

08011800 <rcutils_strndup>:
 8011800:	b082      	sub	sp, #8
 8011802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011804:	ac06      	add	r4, sp, #24
 8011806:	4605      	mov	r5, r0
 8011808:	e884 000c 	stmia.w	r4, {r2, r3}
 801180c:	b188      	cbz	r0, 8011832 <rcutils_strndup+0x32>
 801180e:	1c4f      	adds	r7, r1, #1
 8011810:	460e      	mov	r6, r1
 8011812:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011814:	4638      	mov	r0, r7
 8011816:	4790      	blx	r2
 8011818:	4604      	mov	r4, r0
 801181a:	b128      	cbz	r0, 8011828 <rcutils_strndup+0x28>
 801181c:	463a      	mov	r2, r7
 801181e:	4629      	mov	r1, r5
 8011820:	f00a febd 	bl	801c59e <memcpy>
 8011824:	2300      	movs	r3, #0
 8011826:	55a3      	strb	r3, [r4, r6]
 8011828:	4620      	mov	r0, r4
 801182a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801182e:	b002      	add	sp, #8
 8011830:	4770      	bx	lr
 8011832:	4604      	mov	r4, r0
 8011834:	e7f8      	b.n	8011828 <rcutils_strndup+0x28>
 8011836:	bf00      	nop

08011838 <rcutils_system_time_now>:
 8011838:	b300      	cbz	r0, 801187c <rcutils_system_time_now+0x44>
 801183a:	b570      	push	{r4, r5, r6, lr}
 801183c:	b084      	sub	sp, #16
 801183e:	4604      	mov	r4, r0
 8011840:	2001      	movs	r0, #1
 8011842:	4669      	mov	r1, sp
 8011844:	f7ef fe50 	bl	80014e8 <clock_gettime>
 8011848:	e9dd 3100 	ldrd	r3, r1, [sp]
 801184c:	2900      	cmp	r1, #0
 801184e:	db12      	blt.n	8011876 <rcutils_system_time_now+0x3e>
 8011850:	ea53 0201 	orrs.w	r2, r3, r1
 8011854:	9d02      	ldr	r5, [sp, #8]
 8011856:	d101      	bne.n	801185c <rcutils_system_time_now+0x24>
 8011858:	2d00      	cmp	r5, #0
 801185a:	db0c      	blt.n	8011876 <rcutils_system_time_now+0x3e>
 801185c:	4e08      	ldr	r6, [pc, #32]	; (8011880 <rcutils_system_time_now+0x48>)
 801185e:	2000      	movs	r0, #0
 8011860:	fba3 3206 	umull	r3, r2, r3, r6
 8011864:	195b      	adds	r3, r3, r5
 8011866:	fb06 2201 	mla	r2, r6, r1, r2
 801186a:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 801186e:	e9c4 3200 	strd	r3, r2, [r4]
 8011872:	b004      	add	sp, #16
 8011874:	bd70      	pop	{r4, r5, r6, pc}
 8011876:	2002      	movs	r0, #2
 8011878:	b004      	add	sp, #16
 801187a:	bd70      	pop	{r4, r5, r6, pc}
 801187c:	200b      	movs	r0, #11
 801187e:	4770      	bx	lr
 8011880:	3b9aca00 	.word	0x3b9aca00

08011884 <rcutils_steady_time_now>:
 8011884:	b300      	cbz	r0, 80118c8 <rcutils_steady_time_now+0x44>
 8011886:	b570      	push	{r4, r5, r6, lr}
 8011888:	b084      	sub	sp, #16
 801188a:	4604      	mov	r4, r0
 801188c:	2000      	movs	r0, #0
 801188e:	4669      	mov	r1, sp
 8011890:	f7ef fe2a 	bl	80014e8 <clock_gettime>
 8011894:	e9dd 3100 	ldrd	r3, r1, [sp]
 8011898:	2900      	cmp	r1, #0
 801189a:	db12      	blt.n	80118c2 <rcutils_steady_time_now+0x3e>
 801189c:	ea53 0201 	orrs.w	r2, r3, r1
 80118a0:	9d02      	ldr	r5, [sp, #8]
 80118a2:	d101      	bne.n	80118a8 <rcutils_steady_time_now+0x24>
 80118a4:	2d00      	cmp	r5, #0
 80118a6:	db0c      	blt.n	80118c2 <rcutils_steady_time_now+0x3e>
 80118a8:	4e08      	ldr	r6, [pc, #32]	; (80118cc <rcutils_steady_time_now+0x48>)
 80118aa:	2000      	movs	r0, #0
 80118ac:	fba3 3206 	umull	r3, r2, r3, r6
 80118b0:	195b      	adds	r3, r3, r5
 80118b2:	fb06 2201 	mla	r2, r6, r1, r2
 80118b6:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 80118ba:	e9c4 3200 	strd	r3, r2, [r4]
 80118be:	b004      	add	sp, #16
 80118c0:	bd70      	pop	{r4, r5, r6, pc}
 80118c2:	2002      	movs	r0, #2
 80118c4:	b004      	add	sp, #16
 80118c6:	bd70      	pop	{r4, r5, r6, pc}
 80118c8:	200b      	movs	r0, #11
 80118ca:	4770      	bx	lr
 80118cc:	3b9aca00 	.word	0x3b9aca00

080118d0 <rmw_get_zero_initialized_init_options>:
 80118d0:	b510      	push	{r4, lr}
 80118d2:	4604      	mov	r4, r0
 80118d4:	2238      	movs	r2, #56	; 0x38
 80118d6:	2100      	movs	r1, #0
 80118d8:	f00a fd98 	bl	801c40c <memset>
 80118dc:	f104 0010 	add.w	r0, r4, #16
 80118e0:	f000 f80a 	bl	80118f8 <rmw_get_default_security_options>
 80118e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118e8:	4620      	mov	r0, r4
 80118ea:	60e3      	str	r3, [r4, #12]
 80118ec:	bd10      	pop	{r4, pc}
 80118ee:	bf00      	nop

080118f0 <rmw_get_default_publisher_options>:
 80118f0:	2200      	movs	r2, #0
 80118f2:	6002      	str	r2, [r0, #0]
 80118f4:	7102      	strb	r2, [r0, #4]
 80118f6:	4770      	bx	lr

080118f8 <rmw_get_default_security_options>:
 80118f8:	2200      	movs	r2, #0
 80118fa:	7002      	strb	r2, [r0, #0]
 80118fc:	6042      	str	r2, [r0, #4]
 80118fe:	4770      	bx	lr

08011900 <rmw_subscription_content_filter_options_fini>:
 8011900:	b1b0      	cbz	r0, 8011930 <rmw_subscription_content_filter_options_fini+0x30>
 8011902:	b538      	push	{r3, r4, r5, lr}
 8011904:	4604      	mov	r4, r0
 8011906:	4608      	mov	r0, r1
 8011908:	460d      	mov	r5, r1
 801190a:	f7ff fdc3 	bl	8011494 <rcutils_allocator_is_valid>
 801190e:	b168      	cbz	r0, 801192c <rmw_subscription_content_filter_options_fini+0x2c>
 8011910:	6820      	ldr	r0, [r4, #0]
 8011912:	b120      	cbz	r0, 801191e <rmw_subscription_content_filter_options_fini+0x1e>
 8011914:	686b      	ldr	r3, [r5, #4]
 8011916:	6929      	ldr	r1, [r5, #16]
 8011918:	4798      	blx	r3
 801191a:	2300      	movs	r3, #0
 801191c:	6023      	str	r3, [r4, #0]
 801191e:	1d20      	adds	r0, r4, #4
 8011920:	f008 f9ea 	bl	8019cf8 <rcutils_string_array_fini>
 8011924:	3800      	subs	r0, #0
 8011926:	bf18      	it	ne
 8011928:	2001      	movne	r0, #1
 801192a:	bd38      	pop	{r3, r4, r5, pc}
 801192c:	200b      	movs	r0, #11
 801192e:	bd38      	pop	{r3, r4, r5, pc}
 8011930:	200b      	movs	r0, #11
 8011932:	4770      	bx	lr

08011934 <rmw_get_default_subscription_options>:
 8011934:	2200      	movs	r2, #0
 8011936:	e9c0 2200 	strd	r2, r2, [r0]
 801193a:	6082      	str	r2, [r0, #8]
 801193c:	4770      	bx	lr
 801193e:	bf00      	nop

08011940 <rmw_get_zero_initialized_message_info>:
 8011940:	b510      	push	{r4, lr}
 8011942:	4604      	mov	r4, r0
 8011944:	2240      	movs	r2, #64	; 0x40
 8011946:	2100      	movs	r1, #0
 8011948:	f00a fd60 	bl	801c40c <memset>
 801194c:	4620      	mov	r0, r4
 801194e:	bd10      	pop	{r4, pc}

08011950 <rmw_validate_namespace_with_size>:
 8011950:	2800      	cmp	r0, #0
 8011952:	d043      	beq.n	80119dc <rmw_validate_namespace_with_size+0x8c>
 8011954:	b570      	push	{r4, r5, r6, lr}
 8011956:	4614      	mov	r4, r2
 8011958:	b0c2      	sub	sp, #264	; 0x108
 801195a:	b32a      	cbz	r2, 80119a8 <rmw_validate_namespace_with_size+0x58>
 801195c:	2901      	cmp	r1, #1
 801195e:	460d      	mov	r5, r1
 8011960:	461e      	mov	r6, r3
 8011962:	d102      	bne.n	801196a <rmw_validate_namespace_with_size+0x1a>
 8011964:	7803      	ldrb	r3, [r0, #0]
 8011966:	2b2f      	cmp	r3, #47	; 0x2f
 8011968:	d012      	beq.n	8011990 <rmw_validate_namespace_with_size+0x40>
 801196a:	aa01      	add	r2, sp, #4
 801196c:	4669      	mov	r1, sp
 801196e:	f008 fbb7 	bl	801a0e0 <rmw_validate_full_topic_name>
 8011972:	b980      	cbnz	r0, 8011996 <rmw_validate_namespace_with_size+0x46>
 8011974:	9a00      	ldr	r2, [sp, #0]
 8011976:	b14a      	cbz	r2, 801198c <rmw_validate_namespace_with_size+0x3c>
 8011978:	2a07      	cmp	r2, #7
 801197a:	d007      	beq.n	801198c <rmw_validate_namespace_with_size+0x3c>
 801197c:	1e53      	subs	r3, r2, #1
 801197e:	2b05      	cmp	r3, #5
 8011980:	d82e      	bhi.n	80119e0 <rmw_validate_namespace_with_size+0x90>
 8011982:	e8df f003 	tbb	[pc, r3]
 8011986:	1f1c      	.short	0x1f1c
 8011988:	14282522 	.word	0x14282522
 801198c:	2df5      	cmp	r5, #245	; 0xf5
 801198e:	d804      	bhi.n	801199a <rmw_validate_namespace_with_size+0x4a>
 8011990:	2300      	movs	r3, #0
 8011992:	4618      	mov	r0, r3
 8011994:	6023      	str	r3, [r4, #0]
 8011996:	b042      	add	sp, #264	; 0x108
 8011998:	bd70      	pop	{r4, r5, r6, pc}
 801199a:	2307      	movs	r3, #7
 801199c:	6023      	str	r3, [r4, #0]
 801199e:	2e00      	cmp	r6, #0
 80119a0:	d0f9      	beq.n	8011996 <rmw_validate_namespace_with_size+0x46>
 80119a2:	23f4      	movs	r3, #244	; 0xf4
 80119a4:	6033      	str	r3, [r6, #0]
 80119a6:	e7f6      	b.n	8011996 <rmw_validate_namespace_with_size+0x46>
 80119a8:	200b      	movs	r0, #11
 80119aa:	b042      	add	sp, #264	; 0x108
 80119ac:	bd70      	pop	{r4, r5, r6, pc}
 80119ae:	2306      	movs	r3, #6
 80119b0:	6023      	str	r3, [r4, #0]
 80119b2:	2e00      	cmp	r6, #0
 80119b4:	d0ef      	beq.n	8011996 <rmw_validate_namespace_with_size+0x46>
 80119b6:	9b01      	ldr	r3, [sp, #4]
 80119b8:	6033      	str	r3, [r6, #0]
 80119ba:	b042      	add	sp, #264	; 0x108
 80119bc:	bd70      	pop	{r4, r5, r6, pc}
 80119be:	2301      	movs	r3, #1
 80119c0:	6023      	str	r3, [r4, #0]
 80119c2:	e7f6      	b.n	80119b2 <rmw_validate_namespace_with_size+0x62>
 80119c4:	2302      	movs	r3, #2
 80119c6:	6023      	str	r3, [r4, #0]
 80119c8:	e7f3      	b.n	80119b2 <rmw_validate_namespace_with_size+0x62>
 80119ca:	2303      	movs	r3, #3
 80119cc:	6023      	str	r3, [r4, #0]
 80119ce:	e7f0      	b.n	80119b2 <rmw_validate_namespace_with_size+0x62>
 80119d0:	2304      	movs	r3, #4
 80119d2:	6023      	str	r3, [r4, #0]
 80119d4:	e7ed      	b.n	80119b2 <rmw_validate_namespace_with_size+0x62>
 80119d6:	2305      	movs	r3, #5
 80119d8:	6023      	str	r3, [r4, #0]
 80119da:	e7ea      	b.n	80119b2 <rmw_validate_namespace_with_size+0x62>
 80119dc:	200b      	movs	r0, #11
 80119de:	4770      	bx	lr
 80119e0:	4613      	mov	r3, r2
 80119e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80119e6:	4a03      	ldr	r2, [pc, #12]	; (80119f4 <rmw_validate_namespace_with_size+0xa4>)
 80119e8:	a802      	add	r0, sp, #8
 80119ea:	f7ff fe99 	bl	8011720 <rcutils_snprintf>
 80119ee:	2001      	movs	r0, #1
 80119f0:	e7d1      	b.n	8011996 <rmw_validate_namespace_with_size+0x46>
 80119f2:	bf00      	nop
 80119f4:	0801dc1c 	.word	0x0801dc1c

080119f8 <rmw_validate_namespace>:
 80119f8:	b168      	cbz	r0, 8011a16 <rmw_validate_namespace+0x1e>
 80119fa:	b570      	push	{r4, r5, r6, lr}
 80119fc:	460d      	mov	r5, r1
 80119fe:	4616      	mov	r6, r2
 8011a00:	4604      	mov	r4, r0
 8011a02:	f7ee fc27 	bl	8000254 <strlen>
 8011a06:	4633      	mov	r3, r6
 8011a08:	4601      	mov	r1, r0
 8011a0a:	462a      	mov	r2, r5
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011a12:	f7ff bf9d 	b.w	8011950 <rmw_validate_namespace_with_size>
 8011a16:	200b      	movs	r0, #11
 8011a18:	4770      	bx	lr
 8011a1a:	bf00      	nop

08011a1c <rmw_namespace_validation_result_string>:
 8011a1c:	2807      	cmp	r0, #7
 8011a1e:	d803      	bhi.n	8011a28 <rmw_namespace_validation_result_string+0xc>
 8011a20:	4b02      	ldr	r3, [pc, #8]	; (8011a2c <rmw_namespace_validation_result_string+0x10>)
 8011a22:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8011a26:	4770      	bx	lr
 8011a28:	4801      	ldr	r0, [pc, #4]	; (8011a30 <rmw_namespace_validation_result_string+0x14>)
 8011a2a:	4770      	bx	lr
 8011a2c:	0801de14 	.word	0x0801de14
 8011a30:	0801dc6c 	.word	0x0801dc6c

08011a34 <rmw_validate_node_name>:
 8011a34:	2800      	cmp	r0, #0
 8011a36:	d042      	beq.n	8011abe <rmw_validate_node_name+0x8a>
 8011a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a3c:	460d      	mov	r5, r1
 8011a3e:	2900      	cmp	r1, #0
 8011a40:	d03f      	beq.n	8011ac2 <rmw_validate_node_name+0x8e>
 8011a42:	4604      	mov	r4, r0
 8011a44:	4616      	mov	r6, r2
 8011a46:	f7ee fc05 	bl	8000254 <strlen>
 8011a4a:	b310      	cbz	r0, 8011a92 <rmw_validate_node_name+0x5e>
 8011a4c:	1e63      	subs	r3, r4, #1
 8011a4e:	f1c4 0101 	rsb	r1, r4, #1
 8011a52:	eb03 0800 	add.w	r8, r3, r0
 8011a56:	18cf      	adds	r7, r1, r3
 8011a58:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8011a5c:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8011a60:	f02e 0c20 	bic.w	ip, lr, #32
 8011a64:	2a09      	cmp	r2, #9
 8011a66:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8011a6a:	d905      	bls.n	8011a78 <rmw_validate_node_name+0x44>
 8011a6c:	f1bc 0f19 	cmp.w	ip, #25
 8011a70:	d902      	bls.n	8011a78 <rmw_validate_node_name+0x44>
 8011a72:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8011a76:	d114      	bne.n	8011aa2 <rmw_validate_node_name+0x6e>
 8011a78:	4598      	cmp	r8, r3
 8011a7a:	d1ec      	bne.n	8011a56 <rmw_validate_node_name+0x22>
 8011a7c:	7822      	ldrb	r2, [r4, #0]
 8011a7e:	4b16      	ldr	r3, [pc, #88]	; (8011ad8 <rmw_validate_node_name+0xa4>)
 8011a80:	5cd3      	ldrb	r3, [r2, r3]
 8011a82:	f013 0304 	ands.w	r3, r3, #4
 8011a86:	d113      	bne.n	8011ab0 <rmw_validate_node_name+0x7c>
 8011a88:	28ff      	cmp	r0, #255	; 0xff
 8011a8a:	d81c      	bhi.n	8011ac6 <rmw_validate_node_name+0x92>
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	602b      	str	r3, [r5, #0]
 8011a90:	e00c      	b.n	8011aac <rmw_validate_node_name+0x78>
 8011a92:	2301      	movs	r3, #1
 8011a94:	602b      	str	r3, [r5, #0]
 8011a96:	b17e      	cbz	r6, 8011ab8 <rmw_validate_node_name+0x84>
 8011a98:	2300      	movs	r3, #0
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	6033      	str	r3, [r6, #0]
 8011a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011aa2:	2302      	movs	r3, #2
 8011aa4:	602b      	str	r3, [r5, #0]
 8011aa6:	b13e      	cbz	r6, 8011ab8 <rmw_validate_node_name+0x84>
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	6037      	str	r7, [r6, #0]
 8011aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ab0:	2303      	movs	r3, #3
 8011ab2:	602b      	str	r3, [r5, #0]
 8011ab4:	2e00      	cmp	r6, #0
 8011ab6:	d1ef      	bne.n	8011a98 <rmw_validate_node_name+0x64>
 8011ab8:	2000      	movs	r0, #0
 8011aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011abe:	200b      	movs	r0, #11
 8011ac0:	4770      	bx	lr
 8011ac2:	200b      	movs	r0, #11
 8011ac4:	e7f2      	b.n	8011aac <rmw_validate_node_name+0x78>
 8011ac6:	2204      	movs	r2, #4
 8011ac8:	602a      	str	r2, [r5, #0]
 8011aca:	2e00      	cmp	r6, #0
 8011acc:	d0f4      	beq.n	8011ab8 <rmw_validate_node_name+0x84>
 8011ace:	22fe      	movs	r2, #254	; 0xfe
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	6032      	str	r2, [r6, #0]
 8011ad4:	e7ea      	b.n	8011aac <rmw_validate_node_name+0x78>
 8011ad6:	bf00      	nop
 8011ad8:	0801e64c 	.word	0x0801e64c

08011adc <rmw_node_name_validation_result_string>:
 8011adc:	2804      	cmp	r0, #4
 8011ade:	d803      	bhi.n	8011ae8 <rmw_node_name_validation_result_string+0xc>
 8011ae0:	4b02      	ldr	r3, [pc, #8]	; (8011aec <rmw_node_name_validation_result_string+0x10>)
 8011ae2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8011ae6:	4770      	bx	lr
 8011ae8:	4801      	ldr	r0, [pc, #4]	; (8011af0 <rmw_node_name_validation_result_string+0x14>)
 8011aea:	4770      	bx	lr
 8011aec:	0801df20 	.word	0x0801df20
 8011af0:	0801de34 	.word	0x0801de34

08011af4 <rmw_uros_set_custom_transport>:
 8011af4:	b470      	push	{r4, r5, r6}
 8011af6:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8011afa:	b162      	cbz	r2, 8011b16 <rmw_uros_set_custom_transport+0x22>
 8011afc:	b15b      	cbz	r3, 8011b16 <rmw_uros_set_custom_transport+0x22>
 8011afe:	b155      	cbz	r5, 8011b16 <rmw_uros_set_custom_transport+0x22>
 8011b00:	b14e      	cbz	r6, 8011b16 <rmw_uros_set_custom_transport+0x22>
 8011b02:	4c06      	ldr	r4, [pc, #24]	; (8011b1c <rmw_uros_set_custom_transport+0x28>)
 8011b04:	7020      	strb	r0, [r4, #0]
 8011b06:	2000      	movs	r0, #0
 8011b08:	6166      	str	r6, [r4, #20]
 8011b0a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8011b0e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011b12:	bc70      	pop	{r4, r5, r6}
 8011b14:	4770      	bx	lr
 8011b16:	200b      	movs	r0, #11
 8011b18:	bc70      	pop	{r4, r5, r6}
 8011b1a:	4770      	bx	lr
 8011b1c:	2000def4 	.word	0x2000def4

08011b20 <rmw_init_options_init>:
 8011b20:	b084      	sub	sp, #16
 8011b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011b24:	b083      	sub	sp, #12
 8011b26:	ad09      	add	r5, sp, #36	; 0x24
 8011b28:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8011b2c:	b130      	cbz	r0, 8011b3c <rmw_init_options_init+0x1c>
 8011b2e:	4604      	mov	r4, r0
 8011b30:	4628      	mov	r0, r5
 8011b32:	f7ff fcaf 	bl	8011494 <rcutils_allocator_is_valid>
 8011b36:	b108      	cbz	r0, 8011b3c <rmw_init_options_init+0x1c>
 8011b38:	68a6      	ldr	r6, [r4, #8]
 8011b3a:	b12e      	cbz	r6, 8011b48 <rmw_init_options_init+0x28>
 8011b3c:	200b      	movs	r0, #11
 8011b3e:	b003      	add	sp, #12
 8011b40:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011b44:	b004      	add	sp, #16
 8011b46:	4770      	bx	lr
 8011b48:	2200      	movs	r2, #0
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	f104 0c20 	add.w	ip, r4, #32
 8011b50:	f8df e098 	ldr.w	lr, [pc, #152]	; 8011bec <rmw_init_options_init+0xcc>
 8011b54:	466f      	mov	r7, sp
 8011b56:	e9c4 2300 	strd	r2, r3, [r4]
 8011b5a:	4b20      	ldr	r3, [pc, #128]	; (8011bdc <rmw_init_options_init+0xbc>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	60a3      	str	r3, [r4, #8]
 8011b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011b62:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011b66:	682b      	ldr	r3, [r5, #0]
 8011b68:	4638      	mov	r0, r7
 8011b6a:	f8cc 3000 	str.w	r3, [ip]
 8011b6e:	f8c4 e01c 	str.w	lr, [r4, #28]
 8011b72:	60e6      	str	r6, [r4, #12]
 8011b74:	f7ff fec0 	bl	80118f8 <rmw_get_default_security_options>
 8011b78:	f104 0310 	add.w	r3, r4, #16
 8011b7c:	2203      	movs	r2, #3
 8011b7e:	e897 0003 	ldmia.w	r7, {r0, r1}
 8011b82:	e883 0003 	stmia.w	r3, {r0, r1}
 8011b86:	4816      	ldr	r0, [pc, #88]	; (8011be0 <rmw_init_options_init+0xc0>)
 8011b88:	4916      	ldr	r1, [pc, #88]	; (8011be4 <rmw_init_options_init+0xc4>)
 8011b8a:	7626      	strb	r6, [r4, #24]
 8011b8c:	f001 fa62 	bl	8013054 <rmw_uxrce_init_init_options_impl_memory>
 8011b90:	4813      	ldr	r0, [pc, #76]	; (8011be0 <rmw_init_options_init+0xc0>)
 8011b92:	f008 fc09 	bl	801a3a8 <get_memory>
 8011b96:	b1f0      	cbz	r0, 8011bd6 <rmw_init_options_init+0xb6>
 8011b98:	4a13      	ldr	r2, [pc, #76]	; (8011be8 <rmw_init_options_init+0xc8>)
 8011b9a:	6883      	ldr	r3, [r0, #8]
 8011b9c:	6851      	ldr	r1, [r2, #4]
 8011b9e:	6363      	str	r3, [r4, #52]	; 0x34
 8011ba0:	7810      	ldrb	r0, [r2, #0]
 8011ba2:	6159      	str	r1, [r3, #20]
 8011ba4:	68d1      	ldr	r1, [r2, #12]
 8011ba6:	7418      	strb	r0, [r3, #16]
 8011ba8:	61d9      	str	r1, [r3, #28]
 8011baa:	6911      	ldr	r1, [r2, #16]
 8011bac:	6219      	str	r1, [r3, #32]
 8011bae:	6951      	ldr	r1, [r2, #20]
 8011bb0:	6892      	ldr	r2, [r2, #8]
 8011bb2:	6259      	str	r1, [r3, #36]	; 0x24
 8011bb4:	619a      	str	r2, [r3, #24]
 8011bb6:	f004 fb49 	bl	801624c <uxr_nanos>
 8011bba:	f009 ffbb 	bl	801bb34 <srand>
 8011bbe:	f009 ffe7 	bl	801bb90 <rand>
 8011bc2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011bc4:	6298      	str	r0, [r3, #40]	; 0x28
 8011bc6:	2800      	cmp	r0, #0
 8011bc8:	d0f9      	beq.n	8011bbe <rmw_init_options_init+0x9e>
 8011bca:	2000      	movs	r0, #0
 8011bcc:	b003      	add	sp, #12
 8011bce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8011bd2:	b004      	add	sp, #16
 8011bd4:	4770      	bx	lr
 8011bd6:	2001      	movs	r0, #1
 8011bd8:	e7b1      	b.n	8011b3e <rmw_init_options_init+0x1e>
 8011bda:	bf00      	nop
 8011bdc:	0801e5a4 	.word	0x0801e5a4
 8011be0:	2001294c 	.word	0x2001294c
 8011be4:	2000e1e8 	.word	0x2000e1e8
 8011be8:	2000def4 	.word	0x2000def4
 8011bec:	0801d934 	.word	0x0801d934

08011bf0 <rmw_init_options_copy>:
 8011bf0:	2800      	cmp	r0, #0
 8011bf2:	d047      	beq.n	8011c84 <rmw_init_options_copy+0x94>
 8011bf4:	b570      	push	{r4, r5, r6, lr}
 8011bf6:	460d      	mov	r5, r1
 8011bf8:	b149      	cbz	r1, 8011c0e <rmw_init_options_copy+0x1e>
 8011bfa:	4604      	mov	r4, r0
 8011bfc:	6880      	ldr	r0, [r0, #8]
 8011bfe:	b120      	cbz	r0, 8011c0a <rmw_init_options_copy+0x1a>
 8011c00:	4b22      	ldr	r3, [pc, #136]	; (8011c8c <rmw_init_options_copy+0x9c>)
 8011c02:	6819      	ldr	r1, [r3, #0]
 8011c04:	f7ee fb1c 	bl	8000240 <strcmp>
 8011c08:	bba8      	cbnz	r0, 8011c76 <rmw_init_options_copy+0x86>
 8011c0a:	68ab      	ldr	r3, [r5, #8]
 8011c0c:	b11b      	cbz	r3, 8011c16 <rmw_init_options_copy+0x26>
 8011c0e:	f04f 0c0b 	mov.w	ip, #11
 8011c12:	4660      	mov	r0, ip
 8011c14:	bd70      	pop	{r4, r5, r6, pc}
 8011c16:	4623      	mov	r3, r4
 8011c18:	462a      	mov	r2, r5
 8011c1a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8011c1e:	f8d3 e000 	ldr.w	lr, [r3]
 8011c22:	3310      	adds	r3, #16
 8011c24:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8011c28:	3210      	adds	r2, #16
 8011c2a:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8011c2e:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8011c32:	42b3      	cmp	r3, r6
 8011c34:	f842 ec10 	str.w	lr, [r2, #-16]
 8011c38:	f842 cc0c 	str.w	ip, [r2, #-12]
 8011c3c:	f842 0c08 	str.w	r0, [r2, #-8]
 8011c40:	f842 1c04 	str.w	r1, [r2, #-4]
 8011c44:	d1eb      	bne.n	8011c1e <rmw_init_options_copy+0x2e>
 8011c46:	6819      	ldr	r1, [r3, #0]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	4811      	ldr	r0, [pc, #68]	; (8011c90 <rmw_init_options_copy+0xa0>)
 8011c4c:	6011      	str	r1, [r2, #0]
 8011c4e:	6053      	str	r3, [r2, #4]
 8011c50:	f008 fbaa 	bl	801a3a8 <get_memory>
 8011c54:	b198      	cbz	r0, 8011c7e <rmw_init_options_copy+0x8e>
 8011c56:	6883      	ldr	r3, [r0, #8]
 8011c58:	f04f 0c00 	mov.w	ip, #0
 8011c5c:	636b      	str	r3, [r5, #52]	; 0x34
 8011c5e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8011c60:	f103 0410 	add.w	r4, r3, #16
 8011c64:	3510      	adds	r5, #16
 8011c66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011c6a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011c6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011c72:	4660      	mov	r0, ip
 8011c74:	bd70      	pop	{r4, r5, r6, pc}
 8011c76:	f04f 0c0c 	mov.w	ip, #12
 8011c7a:	4660      	mov	r0, ip
 8011c7c:	bd70      	pop	{r4, r5, r6, pc}
 8011c7e:	f04f 0c01 	mov.w	ip, #1
 8011c82:	e7c6      	b.n	8011c12 <rmw_init_options_copy+0x22>
 8011c84:	f04f 0c0b 	mov.w	ip, #11
 8011c88:	4660      	mov	r0, ip
 8011c8a:	4770      	bx	lr
 8011c8c:	0801e5a4 	.word	0x0801e5a4
 8011c90:	2001294c 	.word	0x2001294c

08011c94 <rmw_init_options_fini>:
 8011c94:	b510      	push	{r4, lr}
 8011c96:	b08e      	sub	sp, #56	; 0x38
 8011c98:	b388      	cbz	r0, 8011cfe <rmw_init_options_fini+0x6a>
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	3020      	adds	r0, #32
 8011c9e:	f7ff fbf9 	bl	8011494 <rcutils_allocator_is_valid>
 8011ca2:	b360      	cbz	r0, 8011cfe <rmw_init_options_fini+0x6a>
 8011ca4:	68a0      	ldr	r0, [r4, #8]
 8011ca6:	b120      	cbz	r0, 8011cb2 <rmw_init_options_fini+0x1e>
 8011ca8:	4b1a      	ldr	r3, [pc, #104]	; (8011d14 <rmw_init_options_fini+0x80>)
 8011caa:	6819      	ldr	r1, [r3, #0]
 8011cac:	f7ee fac8 	bl	8000240 <strcmp>
 8011cb0:	bb68      	cbnz	r0, 8011d0e <rmw_init_options_fini+0x7a>
 8011cb2:	4b19      	ldr	r3, [pc, #100]	; (8011d18 <rmw_init_options_fini+0x84>)
 8011cb4:	6819      	ldr	r1, [r3, #0]
 8011cb6:	b331      	cbz	r1, 8011d06 <rmw_init_options_fini+0x72>
 8011cb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8011cba:	e001      	b.n	8011cc0 <rmw_init_options_fini+0x2c>
 8011cbc:	6849      	ldr	r1, [r1, #4]
 8011cbe:	b311      	cbz	r1, 8011d06 <rmw_init_options_fini+0x72>
 8011cc0:	688b      	ldr	r3, [r1, #8]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d1fa      	bne.n	8011cbc <rmw_init_options_fini+0x28>
 8011cc6:	4814      	ldr	r0, [pc, #80]	; (8011d18 <rmw_init_options_fini+0x84>)
 8011cc8:	f008 fb7e 	bl	801a3c8 <put_memory>
 8011ccc:	4668      	mov	r0, sp
 8011cce:	f7ff fdff 	bl	80118d0 <rmw_get_zero_initialized_init_options>
 8011cd2:	46ee      	mov	lr, sp
 8011cd4:	46a4      	mov	ip, r4
 8011cd6:	2400      	movs	r4, #0
 8011cd8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011cdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ce0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ce4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ce8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011cec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011cf0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011cf4:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	b00e      	add	sp, #56	; 0x38
 8011cfc:	bd10      	pop	{r4, pc}
 8011cfe:	240b      	movs	r4, #11
 8011d00:	4620      	mov	r0, r4
 8011d02:	b00e      	add	sp, #56	; 0x38
 8011d04:	bd10      	pop	{r4, pc}
 8011d06:	2401      	movs	r4, #1
 8011d08:	4620      	mov	r0, r4
 8011d0a:	b00e      	add	sp, #56	; 0x38
 8011d0c:	bd10      	pop	{r4, pc}
 8011d0e:	240c      	movs	r4, #12
 8011d10:	e7f2      	b.n	8011cf8 <rmw_init_options_fini+0x64>
 8011d12:	bf00      	nop
 8011d14:	0801e5a4 	.word	0x0801e5a4
 8011d18:	2001294c 	.word	0x2001294c

08011d1c <rmw_init>:
 8011d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d20:	b083      	sub	sp, #12
 8011d22:	2800      	cmp	r0, #0
 8011d24:	f000 80d3 	beq.w	8011ece <rmw_init+0x1b2>
 8011d28:	460e      	mov	r6, r1
 8011d2a:	2900      	cmp	r1, #0
 8011d2c:	f000 80cf 	beq.w	8011ece <rmw_init+0x1b2>
 8011d30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d32:	4605      	mov	r5, r0
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	f000 80ca 	beq.w	8011ece <rmw_init+0x1b2>
 8011d3a:	4b78      	ldr	r3, [pc, #480]	; (8011f1c <rmw_init+0x200>)
 8011d3c:	6880      	ldr	r0, [r0, #8]
 8011d3e:	681f      	ldr	r7, [r3, #0]
 8011d40:	b128      	cbz	r0, 8011d4e <rmw_init+0x32>
 8011d42:	4639      	mov	r1, r7
 8011d44:	f7ee fa7c 	bl	8000240 <strcmp>
 8011d48:	2800      	cmp	r0, #0
 8011d4a:	f040 80ca 	bne.w	8011ee2 <rmw_init+0x1c6>
 8011d4e:	4c74      	ldr	r4, [pc, #464]	; (8011f20 <rmw_init+0x204>)
 8011d50:	f04f 0800 	mov.w	r8, #0
 8011d54:	4973      	ldr	r1, [pc, #460]	; (8011f24 <rmw_init+0x208>)
 8011d56:	4874      	ldr	r0, [pc, #464]	; (8011f28 <rmw_init+0x20c>)
 8011d58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d5c:	60b7      	str	r7, [r6, #8]
 8011d5e:	e9c6 2300 	strd	r2, r3, [r6]
 8011d62:	68eb      	ldr	r3, [r5, #12]
 8011d64:	2201      	movs	r2, #1
 8011d66:	64b3      	str	r3, [r6, #72]	; 0x48
 8011d68:	f001 f914 	bl	8012f94 <rmw_uxrce_init_session_memory>
 8011d6c:	4620      	mov	r0, r4
 8011d6e:	2204      	movs	r2, #4
 8011d70:	496e      	ldr	r1, [pc, #440]	; (8011f2c <rmw_init+0x210>)
 8011d72:	f001 f94f 	bl	8013014 <rmw_uxrce_init_static_input_buffer_memory>
 8011d76:	486c      	ldr	r0, [pc, #432]	; (8011f28 <rmw_init+0x20c>)
 8011d78:	f884 800d 	strb.w	r8, [r4, #13]
 8011d7c:	f008 fb14 	bl	801a3a8 <get_memory>
 8011d80:	2800      	cmp	r0, #0
 8011d82:	f000 80a9 	beq.w	8011ed8 <rmw_init+0x1bc>
 8011d86:	6884      	ldr	r4, [r0, #8]
 8011d88:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8011d8a:	f104 0910 	add.w	r9, r4, #16
 8011d8e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8011d90:	f890 c010 	ldrb.w	ip, [r0, #16]
 8011d94:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011d98:	9101      	str	r1, [sp, #4]
 8011d9a:	4661      	mov	r1, ip
 8011d9c:	6a00      	ldr	r0, [r0, #32]
 8011d9e:	9000      	str	r0, [sp, #0]
 8011da0:	4648      	mov	r0, r9
 8011da2:	f002 f9fd 	bl	80141a0 <uxr_set_custom_transport_callbacks>
 8011da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011daa:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8011dae:	4960      	ldr	r1, [pc, #384]	; (8011f30 <rmw_init+0x214>)
 8011db0:	4860      	ldr	r0, [pc, #384]	; (8011f34 <rmw_init+0x218>)
 8011db2:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8011db6:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8011dba:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 8011dbe:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8011dc2:	2201      	movs	r2, #1
 8011dc4:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8011dc8:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8011dcc:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 8011dd0:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8011dd4:	64f4      	str	r4, [r6, #76]	; 0x4c
 8011dd6:	f001 f8bd 	bl	8012f54 <rmw_uxrce_init_node_memory>
 8011dda:	2205      	movs	r2, #5
 8011ddc:	4956      	ldr	r1, [pc, #344]	; (8011f38 <rmw_init+0x21c>)
 8011dde:	4857      	ldr	r0, [pc, #348]	; (8011f3c <rmw_init+0x220>)
 8011de0:	f001 f898 	bl	8012f14 <rmw_uxrce_init_subscription_memory>
 8011de4:	220a      	movs	r2, #10
 8011de6:	4956      	ldr	r1, [pc, #344]	; (8011f40 <rmw_init+0x224>)
 8011de8:	4856      	ldr	r0, [pc, #344]	; (8011f44 <rmw_init+0x228>)
 8011dea:	f001 f873 	bl	8012ed4 <rmw_uxrce_init_publisher_memory>
 8011dee:	2201      	movs	r2, #1
 8011df0:	4955      	ldr	r1, [pc, #340]	; (8011f48 <rmw_init+0x22c>)
 8011df2:	4856      	ldr	r0, [pc, #344]	; (8011f4c <rmw_init+0x230>)
 8011df4:	f001 f82e 	bl	8012e54 <rmw_uxrce_init_service_memory>
 8011df8:	2201      	movs	r2, #1
 8011dfa:	4955      	ldr	r1, [pc, #340]	; (8011f50 <rmw_init+0x234>)
 8011dfc:	4855      	ldr	r0, [pc, #340]	; (8011f54 <rmw_init+0x238>)
 8011dfe:	f001 f849 	bl	8012e94 <rmw_uxrce_init_client_memory>
 8011e02:	220f      	movs	r2, #15
 8011e04:	4954      	ldr	r1, [pc, #336]	; (8011f58 <rmw_init+0x23c>)
 8011e06:	4855      	ldr	r0, [pc, #340]	; (8011f5c <rmw_init+0x240>)
 8011e08:	f001 f8e4 	bl	8012fd4 <rmw_uxrce_init_topic_memory>
 8011e0c:	2203      	movs	r2, #3
 8011e0e:	4954      	ldr	r1, [pc, #336]	; (8011f60 <rmw_init+0x244>)
 8011e10:	4854      	ldr	r0, [pc, #336]	; (8011f64 <rmw_init+0x248>)
 8011e12:	f001 f91f 	bl	8013054 <rmw_uxrce_init_init_options_impl_memory>
 8011e16:	2204      	movs	r2, #4
 8011e18:	4953      	ldr	r1, [pc, #332]	; (8011f68 <rmw_init+0x24c>)
 8011e1a:	4854      	ldr	r0, [pc, #336]	; (8011f6c <rmw_init+0x250>)
 8011e1c:	f001 f93a 	bl	8013094 <rmw_uxrce_init_wait_set_memory>
 8011e20:	4953      	ldr	r1, [pc, #332]	; (8011f70 <rmw_init+0x254>)
 8011e22:	4854      	ldr	r0, [pc, #336]	; (8011f74 <rmw_init+0x258>)
 8011e24:	2204      	movs	r2, #4
 8011e26:	f001 f955 	bl	80130d4 <rmw_uxrce_init_guard_condition_memory>
 8011e2a:	4642      	mov	r2, r8
 8011e2c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8011e2e:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8011e30:	f000 fff8 	bl	8012e24 <rmw_uxrce_transport_init>
 8011e34:	4607      	mov	r7, r0
 8011e36:	2800      	cmp	r0, #0
 8011e38:	d158      	bne.n	8011eec <rmw_init+0x1d0>
 8011e3a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011e3c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8011e40:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8011e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011e46:	4628      	mov	r0, r5
 8011e48:	f002 fbda 	bl	8014600 <uxr_init_session>
 8011e4c:	4622      	mov	r2, r4
 8011e4e:	494a      	ldr	r1, [pc, #296]	; (8011f78 <rmw_init+0x25c>)
 8011e50:	4628      	mov	r0, r5
 8011e52:	f002 fbf9 	bl	8014648 <uxr_set_topic_callback>
 8011e56:	463a      	mov	r2, r7
 8011e58:	4948      	ldr	r1, [pc, #288]	; (8011f7c <rmw_init+0x260>)
 8011e5a:	4628      	mov	r0, r5
 8011e5c:	f002 fbf0 	bl	8014640 <uxr_set_status_callback>
 8011e60:	463a      	mov	r2, r7
 8011e62:	4947      	ldr	r1, [pc, #284]	; (8011f80 <rmw_init+0x264>)
 8011e64:	4628      	mov	r0, r5
 8011e66:	f002 fbf3 	bl	8014650 <uxr_set_request_callback>
 8011e6a:	463a      	mov	r2, r7
 8011e6c:	4945      	ldr	r1, [pc, #276]	; (8011f84 <rmw_init+0x268>)
 8011e6e:	4628      	mov	r0, r5
 8011e70:	f002 fbf2 	bl	8014658 <uxr_set_reply_callback>
 8011e74:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8011e78:	2304      	movs	r3, #4
 8011e7a:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8011e7e:	0092      	lsls	r2, r2, #2
 8011e80:	4628      	mov	r0, r5
 8011e82:	f002 fc29 	bl	80146d8 <uxr_create_input_reliable_stream>
 8011e86:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8011e8a:	2304      	movs	r3, #4
 8011e8c:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8011e90:	0092      	lsls	r2, r2, #2
 8011e92:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 8011e96:	4628      	mov	r0, r5
 8011e98:	f002 fbf4 	bl	8014684 <uxr_create_output_reliable_stream>
 8011e9c:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8011ea0:	4628      	mov	r0, r5
 8011ea2:	f002 fc13 	bl	80146cc <uxr_create_input_best_effort_stream>
 8011ea6:	f241 3194 	movw	r1, #5012	; 0x1394
 8011eaa:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8011eae:	4628      	mov	r0, r5
 8011eb0:	4421      	add	r1, r4
 8011eb2:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8011eb6:	f002 fbd3 	bl	8014660 <uxr_create_output_best_effort_stream>
 8011eba:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	f003 f95c 	bl	801517c <uxr_create_session>
 8011ec4:	b1f8      	cbz	r0, 8011f06 <rmw_init+0x1ea>
 8011ec6:	4638      	mov	r0, r7
 8011ec8:	b003      	add	sp, #12
 8011eca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ece:	270b      	movs	r7, #11
 8011ed0:	4638      	mov	r0, r7
 8011ed2:	b003      	add	sp, #12
 8011ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ed8:	2701      	movs	r7, #1
 8011eda:	4638      	mov	r0, r7
 8011edc:	b003      	add	sp, #12
 8011ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ee2:	270c      	movs	r7, #12
 8011ee4:	4638      	mov	r0, r7
 8011ee6:	b003      	add	sp, #12
 8011ee8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011eec:	4648      	mov	r0, r9
 8011eee:	f002 f995 	bl	801421c <uxr_close_custom_transport>
 8011ef2:	4621      	mov	r1, r4
 8011ef4:	480c      	ldr	r0, [pc, #48]	; (8011f28 <rmw_init+0x20c>)
 8011ef6:	f008 fa67 	bl	801a3c8 <put_memory>
 8011efa:	4638      	mov	r0, r7
 8011efc:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8011f00:	b003      	add	sp, #12
 8011f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011f06:	4648      	mov	r0, r9
 8011f08:	f002 f988 	bl	801421c <uxr_close_custom_transport>
 8011f0c:	4621      	mov	r1, r4
 8011f0e:	4806      	ldr	r0, [pc, #24]	; (8011f28 <rmw_init+0x20c>)
 8011f10:	f008 fa5a 	bl	801a3c8 <put_memory>
 8011f14:	64f7      	str	r7, [r6, #76]	; 0x4c
 8011f16:	2701      	movs	r7, #1
 8011f18:	e7d5      	b.n	8011ec6 <rmw_init+0x1aa>
 8011f1a:	bf00      	nop
 8011f1c:	0801e5a4 	.word	0x0801e5a4
 8011f20:	2001299c 	.word	0x2001299c
 8011f24:	2000ec48 	.word	0x2000ec48
 8011f28:	2001298c 	.word	0x2001298c
 8011f2c:	200101f0 	.word	0x200101f0
 8011f30:	2000e26c 	.word	0x2000e26c
 8011f34:	2001295c 	.word	0x2001295c
 8011f38:	200122f0 	.word	0x200122f0
 8011f3c:	200129ac 	.word	0x200129ac
 8011f40:	2000e310 	.word	0x2000e310
 8011f44:	2001296c 	.word	0x2001296c
 8011f48:	2000eb80 	.word	0x2000eb80
 8011f4c:	2001297c 	.word	0x2001297c
 8011f50:	2000e0a0 	.word	0x2000e0a0
 8011f54:	2000e08c 	.word	0x2000e08c
 8011f58:	20012728 	.word	0x20012728
 8011f5c:	200129bc 	.word	0x200129bc
 8011f60:	2000e1e8 	.word	0x2000e1e8
 8011f64:	2001294c 	.word	0x2001294c
 8011f68:	200128cc 	.word	0x200128cc
 8011f6c:	200129cc 	.word	0x200129cc
 8011f70:	2000e168 	.word	0x2000e168
 8011f74:	2001293c 	.word	0x2001293c
 8011f78:	0801a1e1 	.word	0x0801a1e1
 8011f7c:	0801a1d9 	.word	0x0801a1d9
 8011f80:	0801a279 	.word	0x0801a279
 8011f84:	0801a315 	.word	0x0801a315

08011f88 <rmw_context_fini>:
 8011f88:	4b17      	ldr	r3, [pc, #92]	; (8011fe8 <rmw_context_fini+0x60>)
 8011f8a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8011f8c:	b570      	push	{r4, r5, r6, lr}
 8011f8e:	681c      	ldr	r4, [r3, #0]
 8011f90:	4605      	mov	r5, r0
 8011f92:	b334      	cbz	r4, 8011fe2 <rmw_context_fini+0x5a>
 8011f94:	2600      	movs	r6, #0
 8011f96:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011f9a:	6902      	ldr	r2, [r0, #16]
 8011f9c:	428a      	cmp	r2, r1
 8011f9e:	d018      	beq.n	8011fd2 <rmw_context_fini+0x4a>
 8011fa0:	2c00      	cmp	r4, #0
 8011fa2:	d1f8      	bne.n	8011f96 <rmw_context_fini+0xe>
 8011fa4:	b189      	cbz	r1, 8011fca <rmw_context_fini+0x42>
 8011fa6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8011faa:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8011fae:	789b      	ldrb	r3, [r3, #2]
 8011fb0:	2b01      	cmp	r3, #1
 8011fb2:	bf14      	ite	ne
 8011fb4:	210a      	movne	r1, #10
 8011fb6:	2100      	moveq	r1, #0
 8011fb8:	f003 f8b8 	bl	801512c <uxr_delete_session_retries>
 8011fbc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8011fbe:	f001 f8a9 	bl	8013114 <rmw_uxrce_fini_session_memory>
 8011fc2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8011fc4:	3010      	adds	r0, #16
 8011fc6:	f002 f929 	bl	801421c <uxr_close_custom_transport>
 8011fca:	2300      	movs	r3, #0
 8011fcc:	4630      	mov	r0, r6
 8011fce:	64eb      	str	r3, [r5, #76]	; 0x4c
 8011fd0:	bd70      	pop	{r4, r5, r6, pc}
 8011fd2:	3018      	adds	r0, #24
 8011fd4:	f000 f89c 	bl	8012110 <rmw_destroy_node>
 8011fd8:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8011fda:	4606      	mov	r6, r0
 8011fdc:	2c00      	cmp	r4, #0
 8011fde:	d1da      	bne.n	8011f96 <rmw_context_fini+0xe>
 8011fe0:	e7e0      	b.n	8011fa4 <rmw_context_fini+0x1c>
 8011fe2:	4626      	mov	r6, r4
 8011fe4:	e7de      	b.n	8011fa4 <rmw_context_fini+0x1c>
 8011fe6:	bf00      	nop
 8011fe8:	2001295c 	.word	0x2001295c

08011fec <create_node>:
 8011fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ff0:	b083      	sub	sp, #12
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d064      	beq.n	80120c0 <create_node+0xd4>
 8011ff6:	4606      	mov	r6, r0
 8011ff8:	4838      	ldr	r0, [pc, #224]	; (80120dc <create_node+0xf0>)
 8011ffa:	460f      	mov	r7, r1
 8011ffc:	4690      	mov	r8, r2
 8011ffe:	461d      	mov	r5, r3
 8012000:	f008 f9d2 	bl	801a3a8 <get_memory>
 8012004:	2800      	cmp	r0, #0
 8012006:	d05b      	beq.n	80120c0 <create_node+0xd4>
 8012008:	6884      	ldr	r4, [r0, #8]
 801200a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801200c:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 8012010:	f104 0518 	add.w	r5, r4, #24
 8012014:	6123      	str	r3, [r4, #16]
 8012016:	f008 fa2f 	bl	801a478 <rmw_get_implementation_identifier>
 801201a:	f8c4 9020 	str.w	r9, [r4, #32]
 801201e:	e9c4 0406 	strd	r0, r4, [r4, #24]
 8012022:	4630      	mov	r0, r6
 8012024:	f7ee f916 	bl	8000254 <strlen>
 8012028:	1c42      	adds	r2, r0, #1
 801202a:	2a3c      	cmp	r2, #60	; 0x3c
 801202c:	d840      	bhi.n	80120b0 <create_node+0xc4>
 801202e:	4648      	mov	r0, r9
 8012030:	f104 0968 	add.w	r9, r4, #104	; 0x68
 8012034:	4631      	mov	r1, r6
 8012036:	f00a fab2 	bl	801c59e <memcpy>
 801203a:	4638      	mov	r0, r7
 801203c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8012040:	f7ee f908 	bl	8000254 <strlen>
 8012044:	1c42      	adds	r2, r0, #1
 8012046:	2a3c      	cmp	r2, #60	; 0x3c
 8012048:	d832      	bhi.n	80120b0 <create_node+0xc4>
 801204a:	4639      	mov	r1, r7
 801204c:	4648      	mov	r0, r9
 801204e:	f00a faa6 	bl	801c59e <memcpy>
 8012052:	6923      	ldr	r3, [r4, #16]
 8012054:	2101      	movs	r1, #1
 8012056:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801205a:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 801205e:	1842      	adds	r2, r0, r1
 8012060:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8012064:	f002 f8de 	bl	8014224 <uxr_object_id>
 8012068:	6160      	str	r0, [r4, #20]
 801206a:	783b      	ldrb	r3, [r7, #0]
 801206c:	2b2f      	cmp	r3, #47	; 0x2f
 801206e:	d12c      	bne.n	80120ca <create_node+0xde>
 8012070:	787b      	ldrb	r3, [r7, #1]
 8012072:	bb53      	cbnz	r3, 80120ca <create_node+0xde>
 8012074:	4633      	mov	r3, r6
 8012076:	4a1a      	ldr	r2, [pc, #104]	; (80120e0 <create_node+0xf4>)
 8012078:	213c      	movs	r1, #60	; 0x3c
 801207a:	481a      	ldr	r0, [pc, #104]	; (80120e4 <create_node+0xf8>)
 801207c:	f00a f856 	bl	801c12c <sniprintf>
 8012080:	6920      	ldr	r0, [r4, #16]
 8012082:	2106      	movs	r1, #6
 8012084:	fa1f f388 	uxth.w	r3, r8
 8012088:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801208c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012090:	9101      	str	r1, [sp, #4]
 8012092:	4914      	ldr	r1, [pc, #80]	; (80120e4 <create_node+0xf8>)
 8012094:	9100      	str	r1, [sp, #0]
 8012096:	6811      	ldr	r1, [r2, #0]
 8012098:	6962      	ldr	r2, [r4, #20]
 801209a:	f001 fe15 	bl	8013cc8 <uxr_buffer_create_participant_bin>
 801209e:	4602      	mov	r2, r0
 80120a0:	6920      	ldr	r0, [r4, #16]
 80120a2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80120a6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80120aa:	f001 f9b7 	bl	801341c <run_xrce_session>
 80120ae:	b918      	cbnz	r0, 80120b8 <create_node+0xcc>
 80120b0:	4628      	mov	r0, r5
 80120b2:	2500      	movs	r5, #0
 80120b4:	f001 f834 	bl	8013120 <rmw_uxrce_fini_node_memory>
 80120b8:	4628      	mov	r0, r5
 80120ba:	b003      	add	sp, #12
 80120bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120c0:	2500      	movs	r5, #0
 80120c2:	4628      	mov	r0, r5
 80120c4:	b003      	add	sp, #12
 80120c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120ca:	463b      	mov	r3, r7
 80120cc:	4a06      	ldr	r2, [pc, #24]	; (80120e8 <create_node+0xfc>)
 80120ce:	213c      	movs	r1, #60	; 0x3c
 80120d0:	9600      	str	r6, [sp, #0]
 80120d2:	4804      	ldr	r0, [pc, #16]	; (80120e4 <create_node+0xf8>)
 80120d4:	f00a f82a 	bl	801c12c <sniprintf>
 80120d8:	e7d2      	b.n	8012080 <create_node+0x94>
 80120da:	bf00      	nop
 80120dc:	2001295c 	.word	0x2001295c
 80120e0:	0801df44 	.word	0x0801df44
 80120e4:	2000df10 	.word	0x2000df10
 80120e8:	0801d944 	.word	0x0801d944

080120ec <rmw_create_node>:
 80120ec:	468c      	mov	ip, r1
 80120ee:	4611      	mov	r1, r2
 80120f0:	f1bc 0f00 	cmp.w	ip, #0
 80120f4:	d00a      	beq.n	801210c <rmw_create_node+0x20>
 80120f6:	f89c 3000 	ldrb.w	r3, [ip]
 80120fa:	b13b      	cbz	r3, 801210c <rmw_create_node+0x20>
 80120fc:	b132      	cbz	r2, 801210c <rmw_create_node+0x20>
 80120fe:	7813      	ldrb	r3, [r2, #0]
 8012100:	b123      	cbz	r3, 801210c <rmw_create_node+0x20>
 8012102:	4603      	mov	r3, r0
 8012104:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8012106:	4660      	mov	r0, ip
 8012108:	f7ff bf70 	b.w	8011fec <create_node>
 801210c:	2000      	movs	r0, #0
 801210e:	4770      	bx	lr

08012110 <rmw_destroy_node>:
 8012110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012112:	b328      	cbz	r0, 8012160 <rmw_destroy_node+0x50>
 8012114:	4607      	mov	r7, r0
 8012116:	6800      	ldr	r0, [r0, #0]
 8012118:	b120      	cbz	r0, 8012124 <rmw_destroy_node+0x14>
 801211a:	4b37      	ldr	r3, [pc, #220]	; (80121f8 <rmw_destroy_node+0xe8>)
 801211c:	6819      	ldr	r1, [r3, #0]
 801211e:	f7ee f88f 	bl	8000240 <strcmp>
 8012122:	b9e8      	cbnz	r0, 8012160 <rmw_destroy_node+0x50>
 8012124:	687d      	ldr	r5, [r7, #4]
 8012126:	b1dd      	cbz	r5, 8012160 <rmw_destroy_node+0x50>
 8012128:	4b34      	ldr	r3, [pc, #208]	; (80121fc <rmw_destroy_node+0xec>)
 801212a:	681c      	ldr	r4, [r3, #0]
 801212c:	2c00      	cmp	r4, #0
 801212e:	d060      	beq.n	80121f2 <rmw_destroy_node+0xe2>
 8012130:	2600      	movs	r6, #0
 8012132:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012136:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801213a:	429d      	cmp	r5, r3
 801213c:	d013      	beq.n	8012166 <rmw_destroy_node+0x56>
 801213e:	2c00      	cmp	r4, #0
 8012140:	d1f7      	bne.n	8012132 <rmw_destroy_node+0x22>
 8012142:	4b2f      	ldr	r3, [pc, #188]	; (8012200 <rmw_destroy_node+0xf0>)
 8012144:	681c      	ldr	r4, [r3, #0]
 8012146:	b1c4      	cbz	r4, 801217a <rmw_destroy_node+0x6a>
 8012148:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801214c:	6a0b      	ldr	r3, [r1, #32]
 801214e:	429d      	cmp	r5, r3
 8012150:	d1f9      	bne.n	8012146 <rmw_destroy_node+0x36>
 8012152:	317c      	adds	r1, #124	; 0x7c
 8012154:	4638      	mov	r0, r7
 8012156:	f000 fdaf 	bl	8012cb8 <rmw_destroy_subscription>
 801215a:	2801      	cmp	r0, #1
 801215c:	4606      	mov	r6, r0
 801215e:	d1f2      	bne.n	8012146 <rmw_destroy_node+0x36>
 8012160:	2601      	movs	r6, #1
 8012162:	4630      	mov	r0, r6
 8012164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012166:	3184      	adds	r1, #132	; 0x84
 8012168:	4638      	mov	r0, r7
 801216a:	f000 f9b1 	bl	80124d0 <rmw_destroy_publisher>
 801216e:	2801      	cmp	r0, #1
 8012170:	4606      	mov	r6, r0
 8012172:	d0f5      	beq.n	8012160 <rmw_destroy_node+0x50>
 8012174:	2c00      	cmp	r4, #0
 8012176:	d1dc      	bne.n	8012132 <rmw_destroy_node+0x22>
 8012178:	e7e3      	b.n	8012142 <rmw_destroy_node+0x32>
 801217a:	4b22      	ldr	r3, [pc, #136]	; (8012204 <rmw_destroy_node+0xf4>)
 801217c:	681c      	ldr	r4, [r3, #0]
 801217e:	b16c      	cbz	r4, 801219c <rmw_destroy_node+0x8c>
 8012180:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8012184:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8012186:	429d      	cmp	r5, r3
 8012188:	d1f9      	bne.n	801217e <rmw_destroy_node+0x6e>
 801218a:	317c      	adds	r1, #124	; 0x7c
 801218c:	4638      	mov	r0, r7
 801218e:	f000 fc1d 	bl	80129cc <rmw_destroy_service>
 8012192:	2801      	cmp	r0, #1
 8012194:	4606      	mov	r6, r0
 8012196:	d0e3      	beq.n	8012160 <rmw_destroy_node+0x50>
 8012198:	2c00      	cmp	r4, #0
 801219a:	d1f1      	bne.n	8012180 <rmw_destroy_node+0x70>
 801219c:	4b1a      	ldr	r3, [pc, #104]	; (8012208 <rmw_destroy_node+0xf8>)
 801219e:	681c      	ldr	r4, [r3, #0]
 80121a0:	b16c      	cbz	r4, 80121be <rmw_destroy_node+0xae>
 80121a2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80121a6:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80121a8:	429d      	cmp	r5, r3
 80121aa:	d1f9      	bne.n	80121a0 <rmw_destroy_node+0x90>
 80121ac:	317c      	adds	r1, #124	; 0x7c
 80121ae:	4638      	mov	r0, r7
 80121b0:	f008 f91e 	bl	801a3f0 <rmw_destroy_client>
 80121b4:	2801      	cmp	r0, #1
 80121b6:	4606      	mov	r6, r0
 80121b8:	d0d2      	beq.n	8012160 <rmw_destroy_node+0x50>
 80121ba:	2c00      	cmp	r4, #0
 80121bc:	d1f1      	bne.n	80121a2 <rmw_destroy_node+0x92>
 80121be:	6928      	ldr	r0, [r5, #16]
 80121c0:	696a      	ldr	r2, [r5, #20]
 80121c2:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80121c6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80121ca:	6819      	ldr	r1, [r3, #0]
 80121cc:	f001 fd30 	bl	8013c30 <uxr_buffer_delete_entity>
 80121d0:	4602      	mov	r2, r0
 80121d2:	6928      	ldr	r0, [r5, #16]
 80121d4:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80121d8:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80121dc:	f001 f91e 	bl	801341c <run_xrce_session>
 80121e0:	4603      	mov	r3, r0
 80121e2:	4638      	mov	r0, r7
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	bf08      	it	eq
 80121e8:	2602      	moveq	r6, #2
 80121ea:	f000 ff99 	bl	8013120 <rmw_uxrce_fini_node_memory>
 80121ee:	4630      	mov	r0, r6
 80121f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80121f2:	4626      	mov	r6, r4
 80121f4:	e7a5      	b.n	8012142 <rmw_destroy_node+0x32>
 80121f6:	bf00      	nop
 80121f8:	0801e5a4 	.word	0x0801e5a4
 80121fc:	2001296c 	.word	0x2001296c
 8012200:	200129ac 	.word	0x200129ac
 8012204:	2001297c 	.word	0x2001297c
 8012208:	2000e08c 	.word	0x2000e08c

0801220c <rmw_node_get_graph_guard_condition>:
 801220c:	6843      	ldr	r3, [r0, #4]
 801220e:	6918      	ldr	r0, [r3, #16]
 8012210:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8012214:	4770      	bx	lr
 8012216:	bf00      	nop

08012218 <flush_session>:
 8012218:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 801221a:	f002 be3d 	b.w	8014e98 <uxr_run_session_until_confirm_delivery>
 801221e:	bf00      	nop

08012220 <rmw_publish>:
 8012220:	2800      	cmp	r0, #0
 8012222:	d053      	beq.n	80122cc <rmw_publish+0xac>
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	460d      	mov	r5, r1
 8012228:	b08e      	sub	sp, #56	; 0x38
 801222a:	2900      	cmp	r1, #0
 801222c:	d04b      	beq.n	80122c6 <rmw_publish+0xa6>
 801222e:	4604      	mov	r4, r0
 8012230:	6800      	ldr	r0, [r0, #0]
 8012232:	f001 fa05 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 8012236:	2800      	cmp	r0, #0
 8012238:	d045      	beq.n	80122c6 <rmw_publish+0xa6>
 801223a:	6866      	ldr	r6, [r4, #4]
 801223c:	2e00      	cmp	r6, #0
 801223e:	d042      	beq.n	80122c6 <rmw_publish+0xa6>
 8012240:	69b4      	ldr	r4, [r6, #24]
 8012242:	4628      	mov	r0, r5
 8012244:	6923      	ldr	r3, [r4, #16]
 8012246:	4798      	blx	r3
 8012248:	69f3      	ldr	r3, [r6, #28]
 801224a:	9005      	str	r0, [sp, #20]
 801224c:	b113      	cbz	r3, 8012254 <rmw_publish+0x34>
 801224e:	a805      	add	r0, sp, #20
 8012250:	4798      	blx	r3
 8012252:	9805      	ldr	r0, [sp, #20]
 8012254:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8012258:	691b      	ldr	r3, [r3, #16]
 801225a:	9000      	str	r0, [sp, #0]
 801225c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8012260:	6972      	ldr	r2, [r6, #20]
 8012262:	ab06      	add	r3, sp, #24
 8012264:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 8012266:	f004 f891 	bl	801638c <uxr_prepare_output_stream>
 801226a:	b1d8      	cbz	r0, 80122a4 <rmw_publish+0x84>
 801226c:	68a3      	ldr	r3, [r4, #8]
 801226e:	a906      	add	r1, sp, #24
 8012270:	4628      	mov	r0, r5
 8012272:	4798      	blx	r3
 8012274:	6a33      	ldr	r3, [r6, #32]
 8012276:	4604      	mov	r4, r0
 8012278:	b10b      	cbz	r3, 801227e <rmw_publish+0x5e>
 801227a:	a806      	add	r0, sp, #24
 801227c:	4798      	blx	r3
 801227e:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 8012282:	2b01      	cmp	r3, #1
 8012284:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8012288:	d022      	beq.n	80122d0 <rmw_publish+0xb0>
 801228a:	6918      	ldr	r0, [r3, #16]
 801228c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 801228e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012292:	f002 fe01 	bl	8014e98 <uxr_run_session_until_confirm_delivery>
 8012296:	4020      	ands	r0, r4
 8012298:	b2c4      	uxtb	r4, r0
 801229a:	f084 0001 	eor.w	r0, r4, #1
 801229e:	b2c0      	uxtb	r0, r0
 80122a0:	b00e      	add	sp, #56	; 0x38
 80122a2:	bd70      	pop	{r4, r5, r6, pc}
 80122a4:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 80122a8:	6918      	ldr	r0, [r3, #16]
 80122aa:	9b05      	ldr	r3, [sp, #20]
 80122ac:	9602      	str	r6, [sp, #8]
 80122ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80122b2:	9300      	str	r3, [sp, #0]
 80122b4:	4b09      	ldr	r3, [pc, #36]	; (80122dc <rmw_publish+0xbc>)
 80122b6:	9301      	str	r3, [sp, #4]
 80122b8:	ab06      	add	r3, sp, #24
 80122ba:	6972      	ldr	r2, [r6, #20]
 80122bc:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80122be:	f004 f895 	bl	80163ec <uxr_prepare_output_stream_fragmented>
 80122c2:	2800      	cmp	r0, #0
 80122c4:	d1d2      	bne.n	801226c <rmw_publish+0x4c>
 80122c6:	2001      	movs	r0, #1
 80122c8:	b00e      	add	sp, #56	; 0x38
 80122ca:	bd70      	pop	{r4, r5, r6, pc}
 80122cc:	2001      	movs	r0, #1
 80122ce:	4770      	bx	lr
 80122d0:	6918      	ldr	r0, [r3, #16]
 80122d2:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80122d6:	f002 fa25 	bl	8014724 <uxr_flash_output_streams>
 80122da:	e7de      	b.n	801229a <rmw_publish+0x7a>
 80122dc:	08012219 	.word	0x08012219

080122e0 <rmw_create_publisher>:
 80122e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122e4:	b087      	sub	sp, #28
 80122e6:	2800      	cmp	r0, #0
 80122e8:	f000 80d2 	beq.w	8012490 <rmw_create_publisher+0x1b0>
 80122ec:	460e      	mov	r6, r1
 80122ee:	2900      	cmp	r1, #0
 80122f0:	f000 80ce 	beq.w	8012490 <rmw_create_publisher+0x1b0>
 80122f4:	4604      	mov	r4, r0
 80122f6:	6800      	ldr	r0, [r0, #0]
 80122f8:	4615      	mov	r5, r2
 80122fa:	461f      	mov	r7, r3
 80122fc:	f001 f9a0 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 8012300:	f080 0001 	eor.w	r0, r0, #1
 8012304:	b2c0      	uxtb	r0, r0
 8012306:	2800      	cmp	r0, #0
 8012308:	f040 80c2 	bne.w	8012490 <rmw_create_publisher+0x1b0>
 801230c:	2d00      	cmp	r5, #0
 801230e:	f000 80bf 	beq.w	8012490 <rmw_create_publisher+0x1b0>
 8012312:	782b      	ldrb	r3, [r5, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	f000 80bb 	beq.w	8012490 <rmw_create_publisher+0x1b0>
 801231a:	2f00      	cmp	r7, #0
 801231c:	f000 80b8 	beq.w	8012490 <rmw_create_publisher+0x1b0>
 8012320:	485e      	ldr	r0, [pc, #376]	; (801249c <rmw_create_publisher+0x1bc>)
 8012322:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012326:	f008 f83f 	bl	801a3a8 <get_memory>
 801232a:	2800      	cmp	r0, #0
 801232c:	f000 80b0 	beq.w	8012490 <rmw_create_publisher+0x1b0>
 8012330:	6884      	ldr	r4, [r0, #8]
 8012332:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 8012336:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 801233a:	f008 f89d 	bl	801a478 <rmw_get_implementation_identifier>
 801233e:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 8012342:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 8012346:	4628      	mov	r0, r5
 8012348:	f7ed ff84 	bl	8000254 <strlen>
 801234c:	3001      	adds	r0, #1
 801234e:	f104 0884 	add.w	r8, r4, #132	; 0x84
 8012352:	283c      	cmp	r0, #60	; 0x3c
 8012354:	f200 808f 	bhi.w	8012476 <rmw_create_publisher+0x196>
 8012358:	462b      	mov	r3, r5
 801235a:	4a51      	ldr	r2, [pc, #324]	; (80124a0 <rmw_create_publisher+0x1c0>)
 801235c:	213c      	movs	r1, #60	; 0x3c
 801235e:	4650      	mov	r0, sl
 8012360:	f009 fee4 	bl	801c12c <sniprintf>
 8012364:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012368:	4639      	mov	r1, r7
 801236a:	2250      	movs	r2, #80	; 0x50
 801236c:	67e3      	str	r3, [r4, #124]	; 0x7c
 801236e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8012372:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 8012376:	f00a f912 	bl	801c59e <memcpy>
 801237a:	7a3b      	ldrb	r3, [r7, #8]
 801237c:	4630      	mov	r0, r6
 801237e:	4949      	ldr	r1, [pc, #292]	; (80124a4 <rmw_create_publisher+0x1c4>)
 8012380:	2b02      	cmp	r3, #2
 8012382:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012386:	bf0c      	ite	eq
 8012388:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 801238c:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8012390:	67a3      	str	r3, [r4, #120]	; 0x78
 8012392:	2300      	movs	r3, #0
 8012394:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8012398:	f001 f960 	bl	801365c <get_message_typesupport_handle>
 801239c:	2800      	cmp	r0, #0
 801239e:	d06a      	beq.n	8012476 <rmw_create_publisher+0x196>
 80123a0:	6842      	ldr	r2, [r0, #4]
 80123a2:	61a2      	str	r2, [r4, #24]
 80123a4:	2a00      	cmp	r2, #0
 80123a6:	d066      	beq.n	8012476 <rmw_create_publisher+0x196>
 80123a8:	4629      	mov	r1, r5
 80123aa:	463b      	mov	r3, r7
 80123ac:	4648      	mov	r0, r9
 80123ae:	f008 f893 	bl	801a4d8 <create_topic>
 80123b2:	6260      	str	r0, [r4, #36]	; 0x24
 80123b4:	2800      	cmp	r0, #0
 80123b6:	d062      	beq.n	801247e <rmw_create_publisher+0x19e>
 80123b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80123bc:	2103      	movs	r1, #3
 80123be:	2506      	movs	r5, #6
 80123c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80123c4:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 80123c8:	1c42      	adds	r2, r0, #1
 80123ca:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 80123ce:	f001 ff29 	bl	8014224 <uxr_object_id>
 80123d2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80123d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80123da:	6120      	str	r0, [r4, #16]
 80123dc:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80123e0:	6910      	ldr	r0, [r2, #16]
 80123e2:	9500      	str	r5, [sp, #0]
 80123e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80123e8:	6819      	ldr	r1, [r3, #0]
 80123ea:	6922      	ldr	r2, [r4, #16]
 80123ec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80123f0:	f001 fcd2 	bl	8013d98 <uxr_buffer_create_publisher_bin>
 80123f4:	4602      	mov	r2, r0
 80123f6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80123fa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80123fe:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012402:	f001 f80b 	bl	801341c <run_xrce_session>
 8012406:	b3b0      	cbz	r0, 8012476 <rmw_create_publisher+0x196>
 8012408:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801240c:	2105      	movs	r1, #5
 801240e:	f10d 0a10 	add.w	sl, sp, #16
 8012412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012416:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 801241a:	1c42      	adds	r2, r0, #1
 801241c:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8012420:	f001 ff00 	bl	8014224 <uxr_object_id>
 8012424:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8012428:	4639      	mov	r1, r7
 801242a:	6160      	str	r0, [r4, #20]
 801242c:	691e      	ldr	r6, [r3, #16]
 801242e:	4650      	mov	r0, sl
 8012430:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012434:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8012438:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 801243c:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8012440:	f001 f808 	bl	8013454 <convert_qos_profile>
 8012444:	9503      	str	r5, [sp, #12]
 8012446:	e89a 0003 	ldmia.w	sl, {r0, r1}
 801244a:	9001      	str	r0, [sp, #4]
 801244c:	4630      	mov	r0, r6
 801244e:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012452:	f8db 3010 	ldr.w	r3, [fp, #16]
 8012456:	9300      	str	r3, [sp, #0]
 8012458:	6839      	ldr	r1, [r7, #0]
 801245a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 801245e:	f001 fcfb 	bl	8013e58 <uxr_buffer_create_datawriter_bin>
 8012462:	4602      	mov	r2, r0
 8012464:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012468:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801246c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012470:	f000 ffd4 	bl	801341c <run_xrce_session>
 8012474:	b970      	cbnz	r0, 8012494 <rmw_create_publisher+0x1b4>
 8012476:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012478:	b108      	cbz	r0, 801247e <rmw_create_publisher+0x19e>
 801247a:	f000 fec1 	bl	8013200 <rmw_uxrce_fini_topic_memory>
 801247e:	4640      	mov	r0, r8
 8012480:	f04f 0800 	mov.w	r8, #0
 8012484:	f000 fe64 	bl	8013150 <rmw_uxrce_fini_publisher_memory>
 8012488:	4640      	mov	r0, r8
 801248a:	b007      	add	sp, #28
 801248c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012490:	f04f 0800 	mov.w	r8, #0
 8012494:	4640      	mov	r0, r8
 8012496:	b007      	add	sp, #28
 8012498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249c:	2001296c 	.word	0x2001296c
 80124a0:	0801df44 	.word	0x0801df44
 80124a4:	0801d518 	.word	0x0801d518

080124a8 <rmw_publisher_get_actual_qos>:
 80124a8:	b178      	cbz	r0, 80124ca <rmw_publisher_get_actual_qos+0x22>
 80124aa:	b510      	push	{r4, lr}
 80124ac:	fab1 f481 	clz	r4, r1
 80124b0:	0964      	lsrs	r4, r4, #5
 80124b2:	b141      	cbz	r1, 80124c6 <rmw_publisher_get_actual_qos+0x1e>
 80124b4:	6843      	ldr	r3, [r0, #4]
 80124b6:	2250      	movs	r2, #80	; 0x50
 80124b8:	4608      	mov	r0, r1
 80124ba:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80124be:	f00a f86e 	bl	801c59e <memcpy>
 80124c2:	4620      	mov	r0, r4
 80124c4:	bd10      	pop	{r4, pc}
 80124c6:	200b      	movs	r0, #11
 80124c8:	bd10      	pop	{r4, pc}
 80124ca:	200b      	movs	r0, #11
 80124cc:	4770      	bx	lr
 80124ce:	bf00      	nop

080124d0 <rmw_destroy_publisher>:
 80124d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d4:	b128      	cbz	r0, 80124e2 <rmw_destroy_publisher+0x12>
 80124d6:	4604      	mov	r4, r0
 80124d8:	6800      	ldr	r0, [r0, #0]
 80124da:	460d      	mov	r5, r1
 80124dc:	f001 f8b0 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 80124e0:	b918      	cbnz	r0, 80124ea <rmw_destroy_publisher+0x1a>
 80124e2:	2401      	movs	r4, #1
 80124e4:	4620      	mov	r0, r4
 80124e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124ea:	6863      	ldr	r3, [r4, #4]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d0f8      	beq.n	80124e2 <rmw_destroy_publisher+0x12>
 80124f0:	fab5 f485 	clz	r4, r5
 80124f4:	0964      	lsrs	r4, r4, #5
 80124f6:	2d00      	cmp	r5, #0
 80124f8:	d0f3      	beq.n	80124e2 <rmw_destroy_publisher+0x12>
 80124fa:	6828      	ldr	r0, [r5, #0]
 80124fc:	f001 f8a0 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 8012500:	2800      	cmp	r0, #0
 8012502:	d0ee      	beq.n	80124e2 <rmw_destroy_publisher+0x12>
 8012504:	686e      	ldr	r6, [r5, #4]
 8012506:	2e00      	cmp	r6, #0
 8012508:	d0eb      	beq.n	80124e2 <rmw_destroy_publisher+0x12>
 801250a:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801250c:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 8012510:	f008 f832 	bl	801a578 <destroy_topic>
 8012514:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8012518:	6972      	ldr	r2, [r6, #20]
 801251a:	6918      	ldr	r0, [r3, #16]
 801251c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012520:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012524:	6819      	ldr	r1, [r3, #0]
 8012526:	f001 fb83 	bl	8013c30 <uxr_buffer_delete_entity>
 801252a:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801252e:	4680      	mov	r8, r0
 8012530:	6932      	ldr	r2, [r6, #16]
 8012532:	6918      	ldr	r0, [r3, #16]
 8012534:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012538:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801253c:	6819      	ldr	r1, [r3, #0]
 801253e:	f001 fb77 	bl	8013c30 <uxr_buffer_delete_entity>
 8012542:	4606      	mov	r6, r0
 8012544:	6938      	ldr	r0, [r7, #16]
 8012546:	4642      	mov	r2, r8
 8012548:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801254c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012550:	f000 ff64 	bl	801341c <run_xrce_session>
 8012554:	693f      	ldr	r7, [r7, #16]
 8012556:	4632      	mov	r2, r6
 8012558:	4606      	mov	r6, r0
 801255a:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801255e:	4638      	mov	r0, r7
 8012560:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8012564:	f000 ff5a 	bl	801341c <run_xrce_session>
 8012568:	b126      	cbz	r6, 8012574 <rmw_destroy_publisher+0xa4>
 801256a:	b118      	cbz	r0, 8012574 <rmw_destroy_publisher+0xa4>
 801256c:	4628      	mov	r0, r5
 801256e:	f000 fdef 	bl	8013150 <rmw_uxrce_fini_publisher_memory>
 8012572:	e7b7      	b.n	80124e4 <rmw_destroy_publisher+0x14>
 8012574:	2402      	movs	r4, #2
 8012576:	e7f9      	b.n	801256c <rmw_destroy_publisher+0x9c>

08012578 <rmw_send_request>:
 8012578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801257c:	4604      	mov	r4, r0
 801257e:	6800      	ldr	r0, [r0, #0]
 8012580:	b08b      	sub	sp, #44	; 0x2c
 8012582:	460e      	mov	r6, r1
 8012584:	4615      	mov	r5, r2
 8012586:	b128      	cbz	r0, 8012594 <rmw_send_request+0x1c>
 8012588:	4b21      	ldr	r3, [pc, #132]	; (8012610 <rmw_send_request+0x98>)
 801258a:	6819      	ldr	r1, [r3, #0]
 801258c:	f7ed fe58 	bl	8000240 <strcmp>
 8012590:	2800      	cmp	r0, #0
 8012592:	d139      	bne.n	8012608 <rmw_send_request+0x90>
 8012594:	6864      	ldr	r4, [r4, #4]
 8012596:	2700      	movs	r7, #0
 8012598:	6963      	ldr	r3, [r4, #20]
 801259a:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 801259e:	689b      	ldr	r3, [r3, #8]
 80125a0:	4798      	blx	r3
 80125a2:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80125a6:	4630      	mov	r0, r6
 80125a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80125ac:	4798      	blx	r3
 80125ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80125b2:	9000      	str	r0, [sp, #0]
 80125b4:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80125b8:	6922      	ldr	r2, [r4, #16]
 80125ba:	ab02      	add	r3, sp, #8
 80125bc:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80125be:	f003 fee5 	bl	801638c <uxr_prepare_output_stream>
 80125c2:	e9c5 0700 	strd	r0, r7, [r5]
 80125c6:	b198      	cbz	r0, 80125f0 <rmw_send_request+0x78>
 80125c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80125cc:	a902      	add	r1, sp, #8
 80125ce:	4630      	mov	r0, r6
 80125d0:	4798      	blx	r3
 80125d2:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80125d6:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80125da:	2b01      	cmp	r3, #1
 80125dc:	d00c      	beq.n	80125f8 <rmw_send_request+0x80>
 80125de:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80125e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80125e4:	f002 fc58 	bl	8014e98 <uxr_run_session_until_confirm_delivery>
 80125e8:	4638      	mov	r0, r7
 80125ea:	b00b      	add	sp, #44	; 0x2c
 80125ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125f0:	2001      	movs	r0, #1
 80125f2:	b00b      	add	sp, #44	; 0x2c
 80125f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125f8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80125fc:	f002 f892 	bl	8014724 <uxr_flash_output_streams>
 8012600:	4638      	mov	r0, r7
 8012602:	b00b      	add	sp, #44	; 0x2c
 8012604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012608:	200c      	movs	r0, #12
 801260a:	b00b      	add	sp, #44	; 0x2c
 801260c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012610:	0801e5a4 	.word	0x0801e5a4

08012614 <rmw_take_request>:
 8012614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012618:	4605      	mov	r5, r0
 801261a:	6800      	ldr	r0, [r0, #0]
 801261c:	b089      	sub	sp, #36	; 0x24
 801261e:	460c      	mov	r4, r1
 8012620:	4690      	mov	r8, r2
 8012622:	461e      	mov	r6, r3
 8012624:	b128      	cbz	r0, 8012632 <rmw_take_request+0x1e>
 8012626:	4b28      	ldr	r3, [pc, #160]	; (80126c8 <rmw_take_request+0xb4>)
 8012628:	6819      	ldr	r1, [r3, #0]
 801262a:	f7ed fe09 	bl	8000240 <strcmp>
 801262e:	2800      	cmp	r0, #0
 8012630:	d146      	bne.n	80126c0 <rmw_take_request+0xac>
 8012632:	b10e      	cbz	r6, 8012638 <rmw_take_request+0x24>
 8012634:	2300      	movs	r3, #0
 8012636:	7033      	strb	r3, [r6, #0]
 8012638:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801263c:	f000 fe70 	bl	8013320 <rmw_uxrce_clean_expired_static_input_buffer>
 8012640:	4648      	mov	r0, r9
 8012642:	f000 fe43 	bl	80132cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8012646:	4607      	mov	r7, r0
 8012648:	b3b0      	cbz	r0, 80126b8 <rmw_take_request+0xa4>
 801264a:	6885      	ldr	r5, [r0, #8]
 801264c:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8012650:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8012654:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8012658:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 801265c:	7423      	strb	r3, [r4, #16]
 801265e:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8012662:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8012666:	f8a4 2011 	strh.w	r2, [r4, #17]
 801266a:	74e3      	strb	r3, [r4, #19]
 801266c:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8012670:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8012674:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8012678:	6161      	str	r1, [r4, #20]
 801267a:	61a2      	str	r2, [r4, #24]
 801267c:	61e3      	str	r3, [r4, #28]
 801267e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012682:	689b      	ldr	r3, [r3, #8]
 8012684:	4798      	blx	r3
 8012686:	6844      	ldr	r4, [r0, #4]
 8012688:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 801268c:	f105 0110 	add.w	r1, r5, #16
 8012690:	4668      	mov	r0, sp
 8012692:	f7fd f829 	bl	800f6e8 <ucdr_init_buffer>
 8012696:	4641      	mov	r1, r8
 8012698:	68e3      	ldr	r3, [r4, #12]
 801269a:	4668      	mov	r0, sp
 801269c:	4798      	blx	r3
 801269e:	4639      	mov	r1, r7
 80126a0:	4604      	mov	r4, r0
 80126a2:	480a      	ldr	r0, [pc, #40]	; (80126cc <rmw_take_request+0xb8>)
 80126a4:	f007 fe90 	bl	801a3c8 <put_memory>
 80126a8:	b106      	cbz	r6, 80126ac <rmw_take_request+0x98>
 80126aa:	7034      	strb	r4, [r6, #0]
 80126ac:	f084 0001 	eor.w	r0, r4, #1
 80126b0:	b2c0      	uxtb	r0, r0
 80126b2:	b009      	add	sp, #36	; 0x24
 80126b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126b8:	2001      	movs	r0, #1
 80126ba:	b009      	add	sp, #36	; 0x24
 80126bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126c0:	200c      	movs	r0, #12
 80126c2:	b009      	add	sp, #36	; 0x24
 80126c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126c8:	0801e5a4 	.word	0x0801e5a4
 80126cc:	2001299c 	.word	0x2001299c

080126d0 <rmw_send_response>:
 80126d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80126d2:	4605      	mov	r5, r0
 80126d4:	6800      	ldr	r0, [r0, #0]
 80126d6:	b091      	sub	sp, #68	; 0x44
 80126d8:	460c      	mov	r4, r1
 80126da:	4616      	mov	r6, r2
 80126dc:	b128      	cbz	r0, 80126ea <rmw_send_response+0x1a>
 80126de:	4b29      	ldr	r3, [pc, #164]	; (8012784 <rmw_send_response+0xb4>)
 80126e0:	6819      	ldr	r1, [r3, #0]
 80126e2:	f7ed fdad 	bl	8000240 <strcmp>
 80126e6:	2800      	cmp	r0, #0
 80126e8:	d141      	bne.n	801276e <rmw_send_response+0x9e>
 80126ea:	686d      	ldr	r5, [r5, #4]
 80126ec:	68a1      	ldr	r1, [r4, #8]
 80126ee:	6860      	ldr	r0, [r4, #4]
 80126f0:	6faf      	ldr	r7, [r5, #120]	; 0x78
 80126f2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80126f6:	9307      	str	r3, [sp, #28]
 80126f8:	4623      	mov	r3, r4
 80126fa:	9206      	str	r2, [sp, #24]
 80126fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012700:	789b      	ldrb	r3, [r3, #2]
 8012702:	f88d 2017 	strb.w	r2, [sp, #23]
 8012706:	f88d 3016 	strb.w	r3, [sp, #22]
 801270a:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801270e:	68e2      	ldr	r2, [r4, #12]
 8012710:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012714:	ab02      	add	r3, sp, #8
 8012716:	696c      	ldr	r4, [r5, #20]
 8012718:	c307      	stmia	r3!, {r0, r1, r2}
 801271a:	68e3      	ldr	r3, [r4, #12]
 801271c:	4798      	blx	r3
 801271e:	6844      	ldr	r4, [r0, #4]
 8012720:	4630      	mov	r0, r6
 8012722:	6923      	ldr	r3, [r4, #16]
 8012724:	4798      	blx	r3
 8012726:	f100 0318 	add.w	r3, r0, #24
 801272a:	6938      	ldr	r0, [r7, #16]
 801272c:	9300      	str	r3, [sp, #0]
 801272e:	ab08      	add	r3, sp, #32
 8012730:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012734:	692a      	ldr	r2, [r5, #16]
 8012736:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8012738:	f003 fe28 	bl	801638c <uxr_prepare_output_stream>
 801273c:	b910      	cbnz	r0, 8012744 <rmw_send_response+0x74>
 801273e:	2001      	movs	r0, #1
 8012740:	b011      	add	sp, #68	; 0x44
 8012742:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012744:	a902      	add	r1, sp, #8
 8012746:	a808      	add	r0, sp, #32
 8012748:	f004 ff8c 	bl	8017664 <uxr_serialize_SampleIdentity>
 801274c:	68a3      	ldr	r3, [r4, #8]
 801274e:	a908      	add	r1, sp, #32
 8012750:	4630      	mov	r0, r6
 8012752:	4798      	blx	r3
 8012754:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8012758:	6938      	ldr	r0, [r7, #16]
 801275a:	2b01      	cmp	r3, #1
 801275c:	d00a      	beq.n	8012774 <rmw_send_response+0xa4>
 801275e:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8012760:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012764:	f002 fb98 	bl	8014e98 <uxr_run_session_until_confirm_delivery>
 8012768:	2000      	movs	r0, #0
 801276a:	b011      	add	sp, #68	; 0x44
 801276c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801276e:	200c      	movs	r0, #12
 8012770:	b011      	add	sp, #68	; 0x44
 8012772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012774:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012778:	f001 ffd4 	bl	8014724 <uxr_flash_output_streams>
 801277c:	2000      	movs	r0, #0
 801277e:	b011      	add	sp, #68	; 0x44
 8012780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012782:	bf00      	nop
 8012784:	0801e5a4 	.word	0x0801e5a4

08012788 <rmw_take_response>:
 8012788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801278c:	4604      	mov	r4, r0
 801278e:	6800      	ldr	r0, [r0, #0]
 8012790:	b088      	sub	sp, #32
 8012792:	460f      	mov	r7, r1
 8012794:	4690      	mov	r8, r2
 8012796:	461d      	mov	r5, r3
 8012798:	b120      	cbz	r0, 80127a4 <rmw_take_response+0x1c>
 801279a:	4b1d      	ldr	r3, [pc, #116]	; (8012810 <rmw_take_response+0x88>)
 801279c:	6819      	ldr	r1, [r3, #0]
 801279e:	f7ed fd4f 	bl	8000240 <strcmp>
 80127a2:	bb68      	cbnz	r0, 8012800 <rmw_take_response+0x78>
 80127a4:	b10d      	cbz	r5, 80127aa <rmw_take_response+0x22>
 80127a6:	2300      	movs	r3, #0
 80127a8:	702b      	strb	r3, [r5, #0]
 80127aa:	6864      	ldr	r4, [r4, #4]
 80127ac:	f000 fdb8 	bl	8013320 <rmw_uxrce_clean_expired_static_input_buffer>
 80127b0:	4620      	mov	r0, r4
 80127b2:	f000 fd8b 	bl	80132cc <rmw_uxrce_find_static_input_buffer_by_owner>
 80127b6:	4606      	mov	r6, r0
 80127b8:	b330      	cbz	r0, 8012808 <rmw_take_response+0x80>
 80127ba:	6963      	ldr	r3, [r4, #20]
 80127bc:	6884      	ldr	r4, [r0, #8]
 80127be:	68db      	ldr	r3, [r3, #12]
 80127c0:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 80127c4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80127c8:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80127cc:	4798      	blx	r3
 80127ce:	6847      	ldr	r7, [r0, #4]
 80127d0:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 80127d4:	f104 0110 	add.w	r1, r4, #16
 80127d8:	4668      	mov	r0, sp
 80127da:	f7fc ff85 	bl	800f6e8 <ucdr_init_buffer>
 80127de:	4641      	mov	r1, r8
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	4668      	mov	r0, sp
 80127e4:	4798      	blx	r3
 80127e6:	4631      	mov	r1, r6
 80127e8:	4604      	mov	r4, r0
 80127ea:	480a      	ldr	r0, [pc, #40]	; (8012814 <rmw_take_response+0x8c>)
 80127ec:	f007 fdec 	bl	801a3c8 <put_memory>
 80127f0:	b105      	cbz	r5, 80127f4 <rmw_take_response+0x6c>
 80127f2:	702c      	strb	r4, [r5, #0]
 80127f4:	f084 0001 	eor.w	r0, r4, #1
 80127f8:	b2c0      	uxtb	r0, r0
 80127fa:	b008      	add	sp, #32
 80127fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012800:	200c      	movs	r0, #12
 8012802:	b008      	add	sp, #32
 8012804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012808:	2001      	movs	r0, #1
 801280a:	b008      	add	sp, #32
 801280c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012810:	0801e5a4 	.word	0x0801e5a4
 8012814:	2001299c 	.word	0x2001299c

08012818 <rmw_create_service>:
 8012818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801281c:	b091      	sub	sp, #68	; 0x44
 801281e:	2900      	cmp	r1, #0
 8012820:	f000 80bb 	beq.w	801299a <rmw_create_service+0x182>
 8012824:	4606      	mov	r6, r0
 8012826:	2800      	cmp	r0, #0
 8012828:	f000 80b7 	beq.w	801299a <rmw_create_service+0x182>
 801282c:	4614      	mov	r4, r2
 801282e:	6800      	ldr	r0, [r0, #0]
 8012830:	4689      	mov	r9, r1
 8012832:	461d      	mov	r5, r3
 8012834:	f000 ff04 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 8012838:	2c00      	cmp	r4, #0
 801283a:	f000 80ae 	beq.w	801299a <rmw_create_service+0x182>
 801283e:	f080 0001 	eor.w	r0, r0, #1
 8012842:	b2c0      	uxtb	r0, r0
 8012844:	2800      	cmp	r0, #0
 8012846:	f040 80a8 	bne.w	801299a <rmw_create_service+0x182>
 801284a:	7823      	ldrb	r3, [r4, #0]
 801284c:	2b00      	cmp	r3, #0
 801284e:	f000 80a4 	beq.w	801299a <rmw_create_service+0x182>
 8012852:	2d00      	cmp	r5, #0
 8012854:	f000 80a1 	beq.w	801299a <rmw_create_service+0x182>
 8012858:	4856      	ldr	r0, [pc, #344]	; (80129b4 <rmw_create_service+0x19c>)
 801285a:	f8d6 8004 	ldr.w	r8, [r6, #4]
 801285e:	f007 fda3 	bl	801a3a8 <get_memory>
 8012862:	4606      	mov	r6, r0
 8012864:	2800      	cmp	r0, #0
 8012866:	f000 8099 	beq.w	801299c <rmw_create_service+0x184>
 801286a:	6887      	ldr	r7, [r0, #8]
 801286c:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8012870:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8012874:	f007 fe00 	bl	801a478 <rmw_get_implementation_identifier>
 8012878:	67f8      	str	r0, [r7, #124]	; 0x7c
 801287a:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 801287e:	4620      	mov	r0, r4
 8012880:	f7ed fce8 	bl	8000254 <strlen>
 8012884:	1c42      	adds	r2, r0, #1
 8012886:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 801288a:	2a3c      	cmp	r2, #60	; 0x3c
 801288c:	f200 808a 	bhi.w	80129a4 <rmw_create_service+0x18c>
 8012890:	4621      	mov	r1, r4
 8012892:	4650      	mov	r0, sl
 8012894:	f009 fe83 	bl	801c59e <memcpy>
 8012898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801289c:	4629      	mov	r1, r5
 801289e:	2250      	movs	r2, #80	; 0x50
 80128a0:	f107 0020 	add.w	r0, r7, #32
 80128a4:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 80128a8:	677b      	str	r3, [r7, #116]	; 0x74
 80128aa:	f009 fe78 	bl	801c59e <memcpy>
 80128ae:	4648      	mov	r0, r9
 80128b0:	4941      	ldr	r1, [pc, #260]	; (80129b8 <rmw_create_service+0x1a0>)
 80128b2:	f000 fedf 	bl	8013674 <get_service_typesupport_handle>
 80128b6:	2800      	cmp	r0, #0
 80128b8:	d074      	beq.n	80129a4 <rmw_create_service+0x18c>
 80128ba:	6843      	ldr	r3, [r0, #4]
 80128bc:	617b      	str	r3, [r7, #20]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d070      	beq.n	80129a4 <rmw_create_service+0x18c>
 80128c2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80128c6:	2108      	movs	r1, #8
 80128c8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 80129c0 <rmw_create_service+0x1a8>
 80128cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80128d0:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80129c4 <rmw_create_service+0x1ac>
 80128d4:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 80128d8:	1c42      	adds	r2, r0, #1
 80128da:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 80128de:	f001 fca1 	bl	8014224 <uxr_object_id>
 80128e2:	2364      	movs	r3, #100	; 0x64
 80128e4:	6138      	str	r0, [r7, #16]
 80128e6:	4652      	mov	r2, sl
 80128e8:	4649      	mov	r1, r9
 80128ea:	6978      	ldr	r0, [r7, #20]
 80128ec:	f000 fdfc 	bl	80134e8 <generate_service_types>
 80128f0:	2800      	cmp	r0, #0
 80128f2:	d057      	beq.n	80129a4 <rmw_create_service+0x18c>
 80128f4:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 80129c8 <rmw_create_service+0x1b0>
 80128f8:	233c      	movs	r3, #60	; 0x3c
 80128fa:	4a30      	ldr	r2, [pc, #192]	; (80129bc <rmw_create_service+0x1a4>)
 80128fc:	4620      	mov	r0, r4
 80128fe:	4659      	mov	r1, fp
 8012900:	f000 fdc0 	bl	8013484 <generate_service_topics>
 8012904:	2800      	cmp	r0, #0
 8012906:	d04d      	beq.n	80129a4 <rmw_create_service+0x18c>
 8012908:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801290c:	a80c      	add	r0, sp, #48	; 0x30
 801290e:	4629      	mov	r1, r5
 8012910:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8012914:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8012918:	f000 fd9c 	bl	8013454 <convert_qos_profile>
 801291c:	4a27      	ldr	r2, [pc, #156]	; (80129bc <rmw_create_service+0x1a4>)
 801291e:	a80c      	add	r0, sp, #48	; 0x30
 8012920:	9400      	str	r4, [sp, #0]
 8012922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012924:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012928:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 801292c:	c803      	ldmia	r0, {r0, r1}
 801292e:	9a08      	ldr	r2, [sp, #32]
 8012930:	9005      	str	r0, [sp, #20]
 8012932:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8012936:	2306      	movs	r3, #6
 8012938:	f8ad 1018 	strh.w	r1, [sp, #24]
 801293c:	9307      	str	r3, [sp, #28]
 801293e:	6811      	ldr	r1, [r2, #0]
 8012940:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8012944:	693a      	ldr	r2, [r7, #16]
 8012946:	f001 fb75 	bl	8014034 <uxr_buffer_create_replier_bin>
 801294a:	4602      	mov	r2, r0
 801294c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012950:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012954:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012958:	f000 fd60 	bl	801341c <run_xrce_session>
 801295c:	b310      	cbz	r0, 80129a4 <rmw_create_service+0x18c>
 801295e:	7a2b      	ldrb	r3, [r5, #8]
 8012960:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012964:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8012968:	2b02      	cmp	r3, #2
 801296a:	920e      	str	r2, [sp, #56]	; 0x38
 801296c:	f04f 0200 	mov.w	r2, #0
 8012970:	920f      	str	r2, [sp, #60]	; 0x3c
 8012972:	bf0c      	ite	eq
 8012974:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8012978:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 801297c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012980:	930b      	str	r3, [sp, #44]	; 0x2c
 8012982:	ab0e      	add	r3, sp, #56	; 0x38
 8012984:	673a      	str	r2, [r7, #112]	; 0x70
 8012986:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 801298a:	9300      	str	r3, [sp, #0]
 801298c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801298e:	6811      	ldr	r1, [r2, #0]
 8012990:	693a      	ldr	r2, [r7, #16]
 8012992:	f001 fc77 	bl	8014284 <uxr_buffer_request_data>
 8012996:	8338      	strh	r0, [r7, #24]
 8012998:	e000      	b.n	801299c <rmw_create_service+0x184>
 801299a:	2600      	movs	r6, #0
 801299c:	4630      	mov	r0, r6
 801299e:	b011      	add	sp, #68	; 0x44
 80129a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129a4:	4630      	mov	r0, r6
 80129a6:	2600      	movs	r6, #0
 80129a8:	f000 fbfe 	bl	80131a8 <rmw_uxrce_fini_service_memory>
 80129ac:	4630      	mov	r0, r6
 80129ae:	b011      	add	sp, #68	; 0x44
 80129b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129b4:	2001297c 	.word	0x2001297c
 80129b8:	0801d518 	.word	0x0801d518
 80129bc:	2000dfec 	.word	0x2000dfec
 80129c0:	2000e028 	.word	0x2000e028
 80129c4:	2000df88 	.word	0x2000df88
 80129c8:	2000df4c 	.word	0x2000df4c

080129cc <rmw_destroy_service>:
 80129cc:	b570      	push	{r4, r5, r6, lr}
 80129ce:	b128      	cbz	r0, 80129dc <rmw_destroy_service+0x10>
 80129d0:	4604      	mov	r4, r0
 80129d2:	6800      	ldr	r0, [r0, #0]
 80129d4:	460d      	mov	r5, r1
 80129d6:	f000 fe33 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 80129da:	b910      	cbnz	r0, 80129e2 <rmw_destroy_service+0x16>
 80129dc:	2401      	movs	r4, #1
 80129de:	4620      	mov	r0, r4
 80129e0:	bd70      	pop	{r4, r5, r6, pc}
 80129e2:	6863      	ldr	r3, [r4, #4]
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d0f9      	beq.n	80129dc <rmw_destroy_service+0x10>
 80129e8:	2d00      	cmp	r5, #0
 80129ea:	d0f7      	beq.n	80129dc <rmw_destroy_service+0x10>
 80129ec:	6828      	ldr	r0, [r5, #0]
 80129ee:	f000 fe27 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 80129f2:	2800      	cmp	r0, #0
 80129f4:	d0f2      	beq.n	80129dc <rmw_destroy_service+0x10>
 80129f6:	686e      	ldr	r6, [r5, #4]
 80129f8:	2e00      	cmp	r6, #0
 80129fa:	d0ef      	beq.n	80129dc <rmw_destroy_service+0x10>
 80129fc:	6864      	ldr	r4, [r4, #4]
 80129fe:	6932      	ldr	r2, [r6, #16]
 8012a00:	6920      	ldr	r0, [r4, #16]
 8012a02:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012a06:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012a0a:	6819      	ldr	r1, [r3, #0]
 8012a0c:	f001 fc74 	bl	80142f8 <uxr_buffer_cancel_data>
 8012a10:	4602      	mov	r2, r0
 8012a12:	6920      	ldr	r0, [r4, #16]
 8012a14:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012a18:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012a1c:	f000 fcfe 	bl	801341c <run_xrce_session>
 8012a20:	6920      	ldr	r0, [r4, #16]
 8012a22:	6932      	ldr	r2, [r6, #16]
 8012a24:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012a28:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012a2c:	6819      	ldr	r1, [r3, #0]
 8012a2e:	f001 f8ff 	bl	8013c30 <uxr_buffer_delete_entity>
 8012a32:	4602      	mov	r2, r0
 8012a34:	6920      	ldr	r0, [r4, #16]
 8012a36:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012a3a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012a3e:	f000 fced 	bl	801341c <run_xrce_session>
 8012a42:	4603      	mov	r3, r0
 8012a44:	4628      	mov	r0, r5
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	bf14      	ite	ne
 8012a4a:	2400      	movne	r4, #0
 8012a4c:	2402      	moveq	r4, #2
 8012a4e:	f000 fbab 	bl	80131a8 <rmw_uxrce_fini_service_memory>
 8012a52:	e7c4      	b.n	80129de <rmw_destroy_service+0x12>

08012a54 <rmw_service_response_publisher_get_actual_qos>:
 8012a54:	b181      	cbz	r1, 8012a78 <rmw_service_response_publisher_get_actual_qos+0x24>
 8012a56:	4603      	mov	r3, r0
 8012a58:	b510      	push	{r4, lr}
 8012a5a:	fab0 f480 	clz	r4, r0
 8012a5e:	0964      	lsrs	r4, r4, #5
 8012a60:	b140      	cbz	r0, 8012a74 <rmw_service_response_publisher_get_actual_qos+0x20>
 8012a62:	685b      	ldr	r3, [r3, #4]
 8012a64:	4608      	mov	r0, r1
 8012a66:	2250      	movs	r2, #80	; 0x50
 8012a68:	f103 0120 	add.w	r1, r3, #32
 8012a6c:	f009 fd97 	bl	801c59e <memcpy>
 8012a70:	4620      	mov	r0, r4
 8012a72:	bd10      	pop	{r4, pc}
 8012a74:	200b      	movs	r0, #11
 8012a76:	bd10      	pop	{r4, pc}
 8012a78:	200b      	movs	r0, #11
 8012a7a:	4770      	bx	lr

08012a7c <rmw_service_request_subscription_get_actual_qos>:
 8012a7c:	b178      	cbz	r0, 8012a9e <rmw_service_request_subscription_get_actual_qos+0x22>
 8012a7e:	b510      	push	{r4, lr}
 8012a80:	fab1 f481 	clz	r4, r1
 8012a84:	0964      	lsrs	r4, r4, #5
 8012a86:	b141      	cbz	r1, 8012a9a <rmw_service_request_subscription_get_actual_qos+0x1e>
 8012a88:	6843      	ldr	r3, [r0, #4]
 8012a8a:	2250      	movs	r2, #80	; 0x50
 8012a8c:	4608      	mov	r0, r1
 8012a8e:	f103 0120 	add.w	r1, r3, #32
 8012a92:	f009 fd84 	bl	801c59e <memcpy>
 8012a96:	4620      	mov	r0, r4
 8012a98:	bd10      	pop	{r4, pc}
 8012a9a:	200b      	movs	r0, #11
 8012a9c:	bd10      	pop	{r4, pc}
 8012a9e:	200b      	movs	r0, #11
 8012aa0:	4770      	bx	lr
 8012aa2:	bf00      	nop

08012aa4 <rmw_create_subscription>:
 8012aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aa8:	b08d      	sub	sp, #52	; 0x34
 8012aaa:	2900      	cmp	r1, #0
 8012aac:	f000 80d8 	beq.w	8012c60 <rmw_create_subscription+0x1bc>
 8012ab0:	4604      	mov	r4, r0
 8012ab2:	2800      	cmp	r0, #0
 8012ab4:	f000 80d4 	beq.w	8012c60 <rmw_create_subscription+0x1bc>
 8012ab8:	6800      	ldr	r0, [r0, #0]
 8012aba:	460e      	mov	r6, r1
 8012abc:	4615      	mov	r5, r2
 8012abe:	461f      	mov	r7, r3
 8012ac0:	f000 fdbe 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 8012ac4:	f080 0001 	eor.w	r0, r0, #1
 8012ac8:	b2c0      	uxtb	r0, r0
 8012aca:	2800      	cmp	r0, #0
 8012acc:	f040 80c8 	bne.w	8012c60 <rmw_create_subscription+0x1bc>
 8012ad0:	2d00      	cmp	r5, #0
 8012ad2:	f000 80c5 	beq.w	8012c60 <rmw_create_subscription+0x1bc>
 8012ad6:	782b      	ldrb	r3, [r5, #0]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 80c1 	beq.w	8012c60 <rmw_create_subscription+0x1bc>
 8012ade:	2f00      	cmp	r7, #0
 8012ae0:	f000 80be 	beq.w	8012c60 <rmw_create_subscription+0x1bc>
 8012ae4:	4867      	ldr	r0, [pc, #412]	; (8012c84 <rmw_create_subscription+0x1e0>)
 8012ae6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8012aea:	f007 fc5d 	bl	801a3a8 <get_memory>
 8012aee:	4604      	mov	r4, r0
 8012af0:	2800      	cmp	r0, #0
 8012af2:	f000 80b6 	beq.w	8012c62 <rmw_create_subscription+0x1be>
 8012af6:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8012afa:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 8012afe:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8012b02:	f007 fcb9 	bl	801a478 <rmw_get_implementation_identifier>
 8012b06:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8012b0a:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 8012b0e:	4628      	mov	r0, r5
 8012b10:	f7ed fba0 	bl	8000254 <strlen>
 8012b14:	3001      	adds	r0, #1
 8012b16:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 8012b1a:	283c      	cmp	r0, #60	; 0x3c
 8012b1c:	f200 80a5 	bhi.w	8012c6a <rmw_create_subscription+0x1c6>
 8012b20:	462b      	mov	r3, r5
 8012b22:	4a59      	ldr	r2, [pc, #356]	; (8012c88 <rmw_create_subscription+0x1e4>)
 8012b24:	213c      	movs	r1, #60	; 0x3c
 8012b26:	4650      	mov	r0, sl
 8012b28:	f009 fb00 	bl	801c12c <sniprintf>
 8012b2c:	4639      	mov	r1, r7
 8012b2e:	2250      	movs	r2, #80	; 0x50
 8012b30:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8012b34:	f8c8 9020 	str.w	r9, [r8, #32]
 8012b38:	f009 fd31 	bl	801c59e <memcpy>
 8012b3c:	4630      	mov	r0, r6
 8012b3e:	4953      	ldr	r1, [pc, #332]	; (8012c8c <rmw_create_subscription+0x1e8>)
 8012b40:	f000 fd8c 	bl	801365c <get_message_typesupport_handle>
 8012b44:	2800      	cmp	r0, #0
 8012b46:	f000 8090 	beq.w	8012c6a <rmw_create_subscription+0x1c6>
 8012b4a:	6842      	ldr	r2, [r0, #4]
 8012b4c:	f8c8 2018 	str.w	r2, [r8, #24]
 8012b50:	2a00      	cmp	r2, #0
 8012b52:	f000 808a 	beq.w	8012c6a <rmw_create_subscription+0x1c6>
 8012b56:	4629      	mov	r1, r5
 8012b58:	463b      	mov	r3, r7
 8012b5a:	4648      	mov	r0, r9
 8012b5c:	f007 fcbc 	bl	801a4d8 <create_topic>
 8012b60:	f8c8 001c 	str.w	r0, [r8, #28]
 8012b64:	2800      	cmp	r0, #0
 8012b66:	f000 8085 	beq.w	8012c74 <rmw_create_subscription+0x1d0>
 8012b6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b6e:	2104      	movs	r1, #4
 8012b70:	2506      	movs	r5, #6
 8012b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012b76:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8012b7a:	1c42      	adds	r2, r0, #1
 8012b7c:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8012b80:	f001 fb50 	bl	8014224 <uxr_object_id>
 8012b84:	f8c8 0010 	str.w	r0, [r8, #16]
 8012b88:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012b8c:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8012b90:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012b94:	9500      	str	r5, [sp, #0]
 8012b96:	6819      	ldr	r1, [r3, #0]
 8012b98:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012b9c:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8012ba0:	f001 f92a 	bl	8013df8 <uxr_buffer_create_subscriber_bin>
 8012ba4:	4602      	mov	r2, r0
 8012ba6:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012baa:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012bae:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012bb2:	f000 fc33 	bl	801341c <run_xrce_session>
 8012bb6:	2800      	cmp	r0, #0
 8012bb8:	d057      	beq.n	8012c6a <rmw_create_subscription+0x1c6>
 8012bba:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012bbe:	4629      	mov	r1, r5
 8012bc0:	ae08      	add	r6, sp, #32
 8012bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012bc6:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8012bca:	1c42      	adds	r2, r0, #1
 8012bcc:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8012bd0:	f001 fb28 	bl	8014224 <uxr_object_id>
 8012bd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012bd8:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8012bdc:	4639      	mov	r1, r7
 8012bde:	f8c8 0014 	str.w	r0, [r8, #20]
 8012be2:	4630      	mov	r0, r6
 8012be4:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8012be8:	9305      	str	r3, [sp, #20]
 8012bea:	f000 fc33 	bl	8013454 <convert_qos_profile>
 8012bee:	9503      	str	r5, [sp, #12]
 8012bf0:	9b05      	ldr	r3, [sp, #20]
 8012bf2:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012bf6:	9001      	str	r0, [sp, #4]
 8012bf8:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8012bfc:	f8ad 1008 	strh.w	r1, [sp, #8]
 8012c00:	691b      	ldr	r3, [r3, #16]
 8012c02:	9300      	str	r3, [sp, #0]
 8012c04:	f8db 1000 	ldr.w	r1, [fp]
 8012c08:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8012c0c:	f001 f99a 	bl	8013f44 <uxr_buffer_create_datareader_bin>
 8012c10:	4602      	mov	r2, r0
 8012c12:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012c16:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012c1a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012c1e:	f000 fbfd 	bl	801341c <run_xrce_session>
 8012c22:	b310      	cbz	r0, 8012c6a <rmw_create_subscription+0x1c6>
 8012c24:	7a3b      	ldrb	r3, [r7, #8]
 8012c26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012c2e:	2b02      	cmp	r3, #2
 8012c30:	920a      	str	r2, [sp, #40]	; 0x28
 8012c32:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012c36:	f04f 0200 	mov.w	r2, #0
 8012c3a:	bf08      	it	eq
 8012c3c:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8012c40:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012c44:	bf18      	it	ne
 8012c46:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 8012c4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8012c4c:	9307      	str	r3, [sp, #28]
 8012c4e:	ab0a      	add	r3, sp, #40	; 0x28
 8012c50:	9300      	str	r3, [sp, #0]
 8012c52:	9b07      	ldr	r3, [sp, #28]
 8012c54:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8012c58:	6809      	ldr	r1, [r1, #0]
 8012c5a:	f001 fb13 	bl	8014284 <uxr_buffer_request_data>
 8012c5e:	e000      	b.n	8012c62 <rmw_create_subscription+0x1be>
 8012c60:	2400      	movs	r4, #0
 8012c62:	4620      	mov	r0, r4
 8012c64:	b00d      	add	sp, #52	; 0x34
 8012c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6a:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8012c6e:	b108      	cbz	r0, 8012c74 <rmw_create_subscription+0x1d0>
 8012c70:	f000 fac6 	bl	8013200 <rmw_uxrce_fini_topic_memory>
 8012c74:	4620      	mov	r0, r4
 8012c76:	2400      	movs	r4, #0
 8012c78:	f000 fa80 	bl	801317c <rmw_uxrce_fini_subscription_memory>
 8012c7c:	4620      	mov	r0, r4
 8012c7e:	b00d      	add	sp, #52	; 0x34
 8012c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c84:	200129ac 	.word	0x200129ac
 8012c88:	0801df44 	.word	0x0801df44
 8012c8c:	0801d518 	.word	0x0801d518

08012c90 <rmw_subscription_get_actual_qos>:
 8012c90:	b178      	cbz	r0, 8012cb2 <rmw_subscription_get_actual_qos+0x22>
 8012c92:	b510      	push	{r4, lr}
 8012c94:	fab1 f481 	clz	r4, r1
 8012c98:	0964      	lsrs	r4, r4, #5
 8012c9a:	b141      	cbz	r1, 8012cae <rmw_subscription_get_actual_qos+0x1e>
 8012c9c:	6843      	ldr	r3, [r0, #4]
 8012c9e:	2250      	movs	r2, #80	; 0x50
 8012ca0:	4608      	mov	r0, r1
 8012ca2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8012ca6:	f009 fc7a 	bl	801c59e <memcpy>
 8012caa:	4620      	mov	r0, r4
 8012cac:	bd10      	pop	{r4, pc}
 8012cae:	200b      	movs	r0, #11
 8012cb0:	bd10      	pop	{r4, pc}
 8012cb2:	200b      	movs	r0, #11
 8012cb4:	4770      	bx	lr
 8012cb6:	bf00      	nop

08012cb8 <rmw_destroy_subscription>:
 8012cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012cbc:	b128      	cbz	r0, 8012cca <rmw_destroy_subscription+0x12>
 8012cbe:	4604      	mov	r4, r0
 8012cc0:	6800      	ldr	r0, [r0, #0]
 8012cc2:	460d      	mov	r5, r1
 8012cc4:	f000 fcbc 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 8012cc8:	b918      	cbnz	r0, 8012cd2 <rmw_destroy_subscription+0x1a>
 8012cca:	2401      	movs	r4, #1
 8012ccc:	4620      	mov	r0, r4
 8012cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd2:	6863      	ldr	r3, [r4, #4]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d0f8      	beq.n	8012cca <rmw_destroy_subscription+0x12>
 8012cd8:	fab5 f485 	clz	r4, r5
 8012cdc:	0964      	lsrs	r4, r4, #5
 8012cde:	2d00      	cmp	r5, #0
 8012ce0:	d0f3      	beq.n	8012cca <rmw_destroy_subscription+0x12>
 8012ce2:	6828      	ldr	r0, [r5, #0]
 8012ce4:	f000 fcac 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 8012ce8:	2800      	cmp	r0, #0
 8012cea:	d0ee      	beq.n	8012cca <rmw_destroy_subscription+0x12>
 8012cec:	686e      	ldr	r6, [r5, #4]
 8012cee:	2e00      	cmp	r6, #0
 8012cf0:	d0eb      	beq.n	8012cca <rmw_destroy_subscription+0x12>
 8012cf2:	6a37      	ldr	r7, [r6, #32]
 8012cf4:	6972      	ldr	r2, [r6, #20]
 8012cf6:	6938      	ldr	r0, [r7, #16]
 8012cf8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012cfc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d00:	6819      	ldr	r1, [r3, #0]
 8012d02:	f001 faf9 	bl	80142f8 <uxr_buffer_cancel_data>
 8012d06:	4602      	mov	r2, r0
 8012d08:	6938      	ldr	r0, [r7, #16]
 8012d0a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012d0e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012d12:	f000 fb83 	bl	801341c <run_xrce_session>
 8012d16:	69f0      	ldr	r0, [r6, #28]
 8012d18:	f007 fc2e 	bl	801a578 <destroy_topic>
 8012d1c:	6a33      	ldr	r3, [r6, #32]
 8012d1e:	6972      	ldr	r2, [r6, #20]
 8012d20:	6918      	ldr	r0, [r3, #16]
 8012d22:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012d26:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d2a:	6819      	ldr	r1, [r3, #0]
 8012d2c:	f000 ff80 	bl	8013c30 <uxr_buffer_delete_entity>
 8012d30:	6a33      	ldr	r3, [r6, #32]
 8012d32:	4680      	mov	r8, r0
 8012d34:	6932      	ldr	r2, [r6, #16]
 8012d36:	6918      	ldr	r0, [r3, #16]
 8012d38:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012d3c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012d40:	6819      	ldr	r1, [r3, #0]
 8012d42:	f000 ff75 	bl	8013c30 <uxr_buffer_delete_entity>
 8012d46:	4606      	mov	r6, r0
 8012d48:	6938      	ldr	r0, [r7, #16]
 8012d4a:	4642      	mov	r2, r8
 8012d4c:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012d50:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012d54:	f000 fb62 	bl	801341c <run_xrce_session>
 8012d58:	693f      	ldr	r7, [r7, #16]
 8012d5a:	4632      	mov	r2, r6
 8012d5c:	4606      	mov	r6, r0
 8012d5e:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8012d62:	4638      	mov	r0, r7
 8012d64:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8012d68:	f000 fb58 	bl	801341c <run_xrce_session>
 8012d6c:	b126      	cbz	r6, 8012d78 <rmw_destroy_subscription+0xc0>
 8012d6e:	b118      	cbz	r0, 8012d78 <rmw_destroy_subscription+0xc0>
 8012d70:	4628      	mov	r0, r5
 8012d72:	f000 fa03 	bl	801317c <rmw_uxrce_fini_subscription_memory>
 8012d76:	e7a9      	b.n	8012ccc <rmw_destroy_subscription+0x14>
 8012d78:	2402      	movs	r4, #2
 8012d7a:	e7f9      	b.n	8012d70 <rmw_destroy_subscription+0xb8>

08012d7c <rmw_take_with_info>:
 8012d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d7e:	4604      	mov	r4, r0
 8012d80:	6800      	ldr	r0, [r0, #0]
 8012d82:	b089      	sub	sp, #36	; 0x24
 8012d84:	460f      	mov	r7, r1
 8012d86:	4615      	mov	r5, r2
 8012d88:	b128      	cbz	r0, 8012d96 <rmw_take_with_info+0x1a>
 8012d8a:	4b24      	ldr	r3, [pc, #144]	; (8012e1c <rmw_take_with_info+0xa0>)
 8012d8c:	6819      	ldr	r1, [r3, #0]
 8012d8e:	f7ed fa57 	bl	8000240 <strcmp>
 8012d92:	2800      	cmp	r0, #0
 8012d94:	d13e      	bne.n	8012e14 <rmw_take_with_info+0x98>
 8012d96:	b305      	cbz	r5, 8012dda <rmw_take_with_info+0x5e>
 8012d98:	2300      	movs	r3, #0
 8012d9a:	6864      	ldr	r4, [r4, #4]
 8012d9c:	702b      	strb	r3, [r5, #0]
 8012d9e:	f000 fabf 	bl	8013320 <rmw_uxrce_clean_expired_static_input_buffer>
 8012da2:	4620      	mov	r0, r4
 8012da4:	f000 fa92 	bl	80132cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8012da8:	4606      	mov	r6, r0
 8012daa:	b1f0      	cbz	r0, 8012dea <rmw_take_with_info+0x6e>
 8012dac:	6881      	ldr	r1, [r0, #8]
 8012dae:	4668      	mov	r0, sp
 8012db0:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8012db4:	3110      	adds	r1, #16
 8012db6:	f7fc fc97 	bl	800f6e8 <ucdr_init_buffer>
 8012dba:	69a3      	ldr	r3, [r4, #24]
 8012dbc:	4639      	mov	r1, r7
 8012dbe:	4668      	mov	r0, sp
 8012dc0:	68db      	ldr	r3, [r3, #12]
 8012dc2:	4798      	blx	r3
 8012dc4:	4604      	mov	r4, r0
 8012dc6:	4631      	mov	r1, r6
 8012dc8:	4815      	ldr	r0, [pc, #84]	; (8012e20 <rmw_take_with_info+0xa4>)
 8012dca:	f007 fafd 	bl	801a3c8 <put_memory>
 8012dce:	702c      	strb	r4, [r5, #0]
 8012dd0:	f084 0001 	eor.w	r0, r4, #1
 8012dd4:	b2c0      	uxtb	r0, r0
 8012dd6:	b009      	add	sp, #36	; 0x24
 8012dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012dda:	6864      	ldr	r4, [r4, #4]
 8012ddc:	f000 faa0 	bl	8013320 <rmw_uxrce_clean_expired_static_input_buffer>
 8012de0:	4620      	mov	r0, r4
 8012de2:	f000 fa73 	bl	80132cc <rmw_uxrce_find_static_input_buffer_by_owner>
 8012de6:	4605      	mov	r5, r0
 8012de8:	b910      	cbnz	r0, 8012df0 <rmw_take_with_info+0x74>
 8012dea:	2001      	movs	r0, #1
 8012dec:	b009      	add	sp, #36	; 0x24
 8012dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012df0:	68a9      	ldr	r1, [r5, #8]
 8012df2:	4668      	mov	r0, sp
 8012df4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 8012df8:	3110      	adds	r1, #16
 8012dfa:	f7fc fc75 	bl	800f6e8 <ucdr_init_buffer>
 8012dfe:	69a3      	ldr	r3, [r4, #24]
 8012e00:	4639      	mov	r1, r7
 8012e02:	4668      	mov	r0, sp
 8012e04:	68db      	ldr	r3, [r3, #12]
 8012e06:	4798      	blx	r3
 8012e08:	4629      	mov	r1, r5
 8012e0a:	4604      	mov	r4, r0
 8012e0c:	4804      	ldr	r0, [pc, #16]	; (8012e20 <rmw_take_with_info+0xa4>)
 8012e0e:	f007 fadb 	bl	801a3c8 <put_memory>
 8012e12:	e7dd      	b.n	8012dd0 <rmw_take_with_info+0x54>
 8012e14:	200c      	movs	r0, #12
 8012e16:	b009      	add	sp, #36	; 0x24
 8012e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e1a:	bf00      	nop
 8012e1c:	0801e5a4 	.word	0x0801e5a4
 8012e20:	2001299c 	.word	0x2001299c

08012e24 <rmw_uxrce_transport_init>:
 8012e24:	b508      	push	{r3, lr}
 8012e26:	b108      	cbz	r0, 8012e2c <rmw_uxrce_transport_init+0x8>
 8012e28:	f100 0210 	add.w	r2, r0, #16
 8012e2c:	b139      	cbz	r1, 8012e3e <rmw_uxrce_transport_init+0x1a>
 8012e2e:	6949      	ldr	r1, [r1, #20]
 8012e30:	4610      	mov	r0, r2
 8012e32:	f001 f9bf 	bl	80141b4 <uxr_init_custom_transport>
 8012e36:	f080 0001 	eor.w	r0, r0, #1
 8012e3a:	b2c0      	uxtb	r0, r0
 8012e3c:	bd08      	pop	{r3, pc}
 8012e3e:	4b04      	ldr	r3, [pc, #16]	; (8012e50 <rmw_uxrce_transport_init+0x2c>)
 8012e40:	4610      	mov	r0, r2
 8012e42:	6859      	ldr	r1, [r3, #4]
 8012e44:	f001 f9b6 	bl	80141b4 <uxr_init_custom_transport>
 8012e48:	f080 0001 	eor.w	r0, r0, #1
 8012e4c:	b2c0      	uxtb	r0, r0
 8012e4e:	bd08      	pop	{r3, pc}
 8012e50:	2000def4 	.word	0x2000def4

08012e54 <rmw_uxrce_init_service_memory>:
 8012e54:	b1e2      	cbz	r2, 8012e90 <rmw_uxrce_init_service_memory+0x3c>
 8012e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e5a:	7b05      	ldrb	r5, [r0, #12]
 8012e5c:	4606      	mov	r6, r0
 8012e5e:	b9ad      	cbnz	r5, 8012e8c <rmw_uxrce_init_service_memory+0x38>
 8012e60:	23c8      	movs	r3, #200	; 0xc8
 8012e62:	4617      	mov	r7, r2
 8012e64:	460c      	mov	r4, r1
 8012e66:	46a8      	mov	r8, r5
 8012e68:	6083      	str	r3, [r0, #8]
 8012e6a:	f240 1301 	movw	r3, #257	; 0x101
 8012e6e:	e9c0 5500 	strd	r5, r5, [r0]
 8012e72:	8183      	strh	r3, [r0, #12]
 8012e74:	3501      	adds	r5, #1
 8012e76:	4621      	mov	r1, r4
 8012e78:	4630      	mov	r0, r6
 8012e7a:	f007 faa5 	bl	801a3c8 <put_memory>
 8012e7e:	42af      	cmp	r7, r5
 8012e80:	60a4      	str	r4, [r4, #8]
 8012e82:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8012e86:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8012e8a:	d1f3      	bne.n	8012e74 <rmw_uxrce_init_service_memory+0x20>
 8012e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e90:	4770      	bx	lr
 8012e92:	bf00      	nop

08012e94 <rmw_uxrce_init_client_memory>:
 8012e94:	b1e2      	cbz	r2, 8012ed0 <rmw_uxrce_init_client_memory+0x3c>
 8012e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e9a:	7b05      	ldrb	r5, [r0, #12]
 8012e9c:	4606      	mov	r6, r0
 8012e9e:	b9ad      	cbnz	r5, 8012ecc <rmw_uxrce_init_client_memory+0x38>
 8012ea0:	23c8      	movs	r3, #200	; 0xc8
 8012ea2:	4617      	mov	r7, r2
 8012ea4:	460c      	mov	r4, r1
 8012ea6:	46a8      	mov	r8, r5
 8012ea8:	6083      	str	r3, [r0, #8]
 8012eaa:	f240 1301 	movw	r3, #257	; 0x101
 8012eae:	e9c0 5500 	strd	r5, r5, [r0]
 8012eb2:	8183      	strh	r3, [r0, #12]
 8012eb4:	3501      	adds	r5, #1
 8012eb6:	4621      	mov	r1, r4
 8012eb8:	4630      	mov	r0, r6
 8012eba:	f007 fa85 	bl	801a3c8 <put_memory>
 8012ebe:	42af      	cmp	r7, r5
 8012ec0:	60a4      	str	r4, [r4, #8]
 8012ec2:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 8012ec6:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8012eca:	d1f3      	bne.n	8012eb4 <rmw_uxrce_init_client_memory+0x20>
 8012ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ed0:	4770      	bx	lr
 8012ed2:	bf00      	nop

08012ed4 <rmw_uxrce_init_publisher_memory>:
 8012ed4:	b1e2      	cbz	r2, 8012f10 <rmw_uxrce_init_publisher_memory+0x3c>
 8012ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012eda:	7b05      	ldrb	r5, [r0, #12]
 8012edc:	4606      	mov	r6, r0
 8012ede:	b9ad      	cbnz	r5, 8012f0c <rmw_uxrce_init_publisher_memory+0x38>
 8012ee0:	23d8      	movs	r3, #216	; 0xd8
 8012ee2:	4617      	mov	r7, r2
 8012ee4:	460c      	mov	r4, r1
 8012ee6:	46a8      	mov	r8, r5
 8012ee8:	6083      	str	r3, [r0, #8]
 8012eea:	f240 1301 	movw	r3, #257	; 0x101
 8012eee:	e9c0 5500 	strd	r5, r5, [r0]
 8012ef2:	8183      	strh	r3, [r0, #12]
 8012ef4:	3501      	adds	r5, #1
 8012ef6:	4621      	mov	r1, r4
 8012ef8:	4630      	mov	r0, r6
 8012efa:	f007 fa65 	bl	801a3c8 <put_memory>
 8012efe:	42af      	cmp	r7, r5
 8012f00:	60a4      	str	r4, [r4, #8]
 8012f02:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8012f06:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8012f0a:	d1f3      	bne.n	8012ef4 <rmw_uxrce_init_publisher_memory+0x20>
 8012f0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f10:	4770      	bx	lr
 8012f12:	bf00      	nop

08012f14 <rmw_uxrce_init_subscription_memory>:
 8012f14:	b1e2      	cbz	r2, 8012f50 <rmw_uxrce_init_subscription_memory+0x3c>
 8012f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f1a:	7b05      	ldrb	r5, [r0, #12]
 8012f1c:	4606      	mov	r6, r0
 8012f1e:	b9ad      	cbnz	r5, 8012f4c <rmw_uxrce_init_subscription_memory+0x38>
 8012f20:	23d8      	movs	r3, #216	; 0xd8
 8012f22:	4617      	mov	r7, r2
 8012f24:	460c      	mov	r4, r1
 8012f26:	46a8      	mov	r8, r5
 8012f28:	6083      	str	r3, [r0, #8]
 8012f2a:	f240 1301 	movw	r3, #257	; 0x101
 8012f2e:	e9c0 5500 	strd	r5, r5, [r0]
 8012f32:	8183      	strh	r3, [r0, #12]
 8012f34:	3501      	adds	r5, #1
 8012f36:	4621      	mov	r1, r4
 8012f38:	4630      	mov	r0, r6
 8012f3a:	f007 fa45 	bl	801a3c8 <put_memory>
 8012f3e:	42af      	cmp	r7, r5
 8012f40:	60a4      	str	r4, [r4, #8]
 8012f42:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 8012f46:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8012f4a:	d1f3      	bne.n	8012f34 <rmw_uxrce_init_subscription_memory+0x20>
 8012f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f50:	4770      	bx	lr
 8012f52:	bf00      	nop

08012f54 <rmw_uxrce_init_node_memory>:
 8012f54:	b1e2      	cbz	r2, 8012f90 <rmw_uxrce_init_node_memory+0x3c>
 8012f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f5a:	7b05      	ldrb	r5, [r0, #12]
 8012f5c:	4606      	mov	r6, r0
 8012f5e:	b9ad      	cbnz	r5, 8012f8c <rmw_uxrce_init_node_memory+0x38>
 8012f60:	23a4      	movs	r3, #164	; 0xa4
 8012f62:	4617      	mov	r7, r2
 8012f64:	460c      	mov	r4, r1
 8012f66:	46a8      	mov	r8, r5
 8012f68:	6083      	str	r3, [r0, #8]
 8012f6a:	f240 1301 	movw	r3, #257	; 0x101
 8012f6e:	e9c0 5500 	strd	r5, r5, [r0]
 8012f72:	8183      	strh	r3, [r0, #12]
 8012f74:	3501      	adds	r5, #1
 8012f76:	4621      	mov	r1, r4
 8012f78:	4630      	mov	r0, r6
 8012f7a:	f007 fa25 	bl	801a3c8 <put_memory>
 8012f7e:	42af      	cmp	r7, r5
 8012f80:	60a4      	str	r4, [r4, #8]
 8012f82:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 8012f86:	f804 8c98 	strb.w	r8, [r4, #-152]
 8012f8a:	d1f3      	bne.n	8012f74 <rmw_uxrce_init_node_memory+0x20>
 8012f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f90:	4770      	bx	lr
 8012f92:	bf00      	nop

08012f94 <rmw_uxrce_init_session_memory>:
 8012f94:	b1ea      	cbz	r2, 8012fd2 <rmw_uxrce_init_session_memory+0x3e>
 8012f96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f9a:	7b05      	ldrb	r5, [r0, #12]
 8012f9c:	4606      	mov	r6, r0
 8012f9e:	b9b5      	cbnz	r5, 8012fce <rmw_uxrce_init_session_memory+0x3a>
 8012fa0:	f241 58a8 	movw	r8, #5544	; 0x15a8
 8012fa4:	f240 1301 	movw	r3, #257	; 0x101
 8012fa8:	4617      	mov	r7, r2
 8012faa:	460c      	mov	r4, r1
 8012fac:	46a9      	mov	r9, r5
 8012fae:	f8c0 8008 	str.w	r8, [r0, #8]
 8012fb2:	8183      	strh	r3, [r0, #12]
 8012fb4:	e9c0 5500 	strd	r5, r5, [r0]
 8012fb8:	3501      	adds	r5, #1
 8012fba:	4621      	mov	r1, r4
 8012fbc:	4630      	mov	r0, r6
 8012fbe:	f007 fa03 	bl	801a3c8 <put_memory>
 8012fc2:	42af      	cmp	r7, r5
 8012fc4:	60a4      	str	r4, [r4, #8]
 8012fc6:	f884 900c 	strb.w	r9, [r4, #12]
 8012fca:	4444      	add	r4, r8
 8012fcc:	d1f4      	bne.n	8012fb8 <rmw_uxrce_init_session_memory+0x24>
 8012fce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012fd2:	4770      	bx	lr

08012fd4 <rmw_uxrce_init_topic_memory>:
 8012fd4:	b1e2      	cbz	r2, 8013010 <rmw_uxrce_init_topic_memory+0x3c>
 8012fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fda:	7b05      	ldrb	r5, [r0, #12]
 8012fdc:	4606      	mov	r6, r0
 8012fde:	b9ad      	cbnz	r5, 801300c <rmw_uxrce_init_topic_memory+0x38>
 8012fe0:	231c      	movs	r3, #28
 8012fe2:	4617      	mov	r7, r2
 8012fe4:	460c      	mov	r4, r1
 8012fe6:	46a8      	mov	r8, r5
 8012fe8:	6083      	str	r3, [r0, #8]
 8012fea:	f240 1301 	movw	r3, #257	; 0x101
 8012fee:	e9c0 5500 	strd	r5, r5, [r0]
 8012ff2:	8183      	strh	r3, [r0, #12]
 8012ff4:	3501      	adds	r5, #1
 8012ff6:	4621      	mov	r1, r4
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	f007 f9e5 	bl	801a3c8 <put_memory>
 8012ffe:	42af      	cmp	r7, r5
 8013000:	60a4      	str	r4, [r4, #8]
 8013002:	f104 041c 	add.w	r4, r4, #28
 8013006:	f804 8c10 	strb.w	r8, [r4, #-16]
 801300a:	d1f3      	bne.n	8012ff4 <rmw_uxrce_init_topic_memory+0x20>
 801300c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013010:	4770      	bx	lr
 8013012:	bf00      	nop

08013014 <rmw_uxrce_init_static_input_buffer_memory>:
 8013014:	b1ea      	cbz	r2, 8013052 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 8013016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801301a:	7b05      	ldrb	r5, [r0, #12]
 801301c:	4606      	mov	r6, r0
 801301e:	b9b5      	cbnz	r5, 801304e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8013020:	f44f 6304 	mov.w	r3, #2112	; 0x840
 8013024:	4617      	mov	r7, r2
 8013026:	460c      	mov	r4, r1
 8013028:	46a8      	mov	r8, r5
 801302a:	6083      	str	r3, [r0, #8]
 801302c:	f240 1301 	movw	r3, #257	; 0x101
 8013030:	e9c0 5500 	strd	r5, r5, [r0]
 8013034:	8183      	strh	r3, [r0, #12]
 8013036:	3501      	adds	r5, #1
 8013038:	4621      	mov	r1, r4
 801303a:	4630      	mov	r0, r6
 801303c:	f007 f9c4 	bl	801a3c8 <put_memory>
 8013040:	42af      	cmp	r7, r5
 8013042:	60a4      	str	r4, [r4, #8]
 8013044:	f884 800c 	strb.w	r8, [r4, #12]
 8013048:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 801304c:	d1f3      	bne.n	8013036 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 801304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013052:	4770      	bx	lr

08013054 <rmw_uxrce_init_init_options_impl_memory>:
 8013054:	b1e2      	cbz	r2, 8013090 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 8013056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801305a:	7b05      	ldrb	r5, [r0, #12]
 801305c:	4606      	mov	r6, r0
 801305e:	b9ad      	cbnz	r5, 801308c <rmw_uxrce_init_init_options_impl_memory+0x38>
 8013060:	232c      	movs	r3, #44	; 0x2c
 8013062:	4617      	mov	r7, r2
 8013064:	460c      	mov	r4, r1
 8013066:	46a8      	mov	r8, r5
 8013068:	6083      	str	r3, [r0, #8]
 801306a:	f240 1301 	movw	r3, #257	; 0x101
 801306e:	e9c0 5500 	strd	r5, r5, [r0]
 8013072:	8183      	strh	r3, [r0, #12]
 8013074:	3501      	adds	r5, #1
 8013076:	4621      	mov	r1, r4
 8013078:	4630      	mov	r0, r6
 801307a:	f007 f9a5 	bl	801a3c8 <put_memory>
 801307e:	42af      	cmp	r7, r5
 8013080:	60a4      	str	r4, [r4, #8]
 8013082:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 8013086:	f804 8c20 	strb.w	r8, [r4, #-32]
 801308a:	d1f3      	bne.n	8013074 <rmw_uxrce_init_init_options_impl_memory+0x20>
 801308c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013090:	4770      	bx	lr
 8013092:	bf00      	nop

08013094 <rmw_uxrce_init_wait_set_memory>:
 8013094:	b1e2      	cbz	r2, 80130d0 <rmw_uxrce_init_wait_set_memory+0x3c>
 8013096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801309a:	7b05      	ldrb	r5, [r0, #12]
 801309c:	4606      	mov	r6, r0
 801309e:	b9ad      	cbnz	r5, 80130cc <rmw_uxrce_init_wait_set_memory+0x38>
 80130a0:	231c      	movs	r3, #28
 80130a2:	4617      	mov	r7, r2
 80130a4:	460c      	mov	r4, r1
 80130a6:	46a8      	mov	r8, r5
 80130a8:	6083      	str	r3, [r0, #8]
 80130aa:	f240 1301 	movw	r3, #257	; 0x101
 80130ae:	e9c0 5500 	strd	r5, r5, [r0]
 80130b2:	8183      	strh	r3, [r0, #12]
 80130b4:	3501      	adds	r5, #1
 80130b6:	4621      	mov	r1, r4
 80130b8:	4630      	mov	r0, r6
 80130ba:	f007 f985 	bl	801a3c8 <put_memory>
 80130be:	42af      	cmp	r7, r5
 80130c0:	60a4      	str	r4, [r4, #8]
 80130c2:	f104 041c 	add.w	r4, r4, #28
 80130c6:	f804 8c10 	strb.w	r8, [r4, #-16]
 80130ca:	d1f3      	bne.n	80130b4 <rmw_uxrce_init_wait_set_memory+0x20>
 80130cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80130d0:	4770      	bx	lr
 80130d2:	bf00      	nop

080130d4 <rmw_uxrce_init_guard_condition_memory>:
 80130d4:	b1e2      	cbz	r2, 8013110 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80130d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130da:	7b05      	ldrb	r5, [r0, #12]
 80130dc:	4606      	mov	r6, r0
 80130de:	b9ad      	cbnz	r5, 801310c <rmw_uxrce_init_guard_condition_memory+0x38>
 80130e0:	2320      	movs	r3, #32
 80130e2:	4617      	mov	r7, r2
 80130e4:	460c      	mov	r4, r1
 80130e6:	46a8      	mov	r8, r5
 80130e8:	6083      	str	r3, [r0, #8]
 80130ea:	f240 1301 	movw	r3, #257	; 0x101
 80130ee:	e9c0 5500 	strd	r5, r5, [r0]
 80130f2:	8183      	strh	r3, [r0, #12]
 80130f4:	3501      	adds	r5, #1
 80130f6:	4621      	mov	r1, r4
 80130f8:	4630      	mov	r0, r6
 80130fa:	f007 f965 	bl	801a3c8 <put_memory>
 80130fe:	42af      	cmp	r7, r5
 8013100:	60a4      	str	r4, [r4, #8]
 8013102:	f104 0420 	add.w	r4, r4, #32
 8013106:	f804 8c14 	strb.w	r8, [r4, #-20]
 801310a:	d1f3      	bne.n	80130f4 <rmw_uxrce_init_guard_condition_memory+0x20>
 801310c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop

08013114 <rmw_uxrce_fini_session_memory>:
 8013114:	4601      	mov	r1, r0
 8013116:	4801      	ldr	r0, [pc, #4]	; (801311c <rmw_uxrce_fini_session_memory+0x8>)
 8013118:	f007 b956 	b.w	801a3c8 <put_memory>
 801311c:	2001298c 	.word	0x2001298c

08013120 <rmw_uxrce_fini_node_memory>:
 8013120:	b538      	push	{r3, r4, r5, lr}
 8013122:	4604      	mov	r4, r0
 8013124:	6800      	ldr	r0, [r0, #0]
 8013126:	b128      	cbz	r0, 8013134 <rmw_uxrce_fini_node_memory+0x14>
 8013128:	4b07      	ldr	r3, [pc, #28]	; (8013148 <rmw_uxrce_fini_node_memory+0x28>)
 801312a:	6819      	ldr	r1, [r3, #0]
 801312c:	f7ed f888 	bl	8000240 <strcmp>
 8013130:	b940      	cbnz	r0, 8013144 <rmw_uxrce_fini_node_memory+0x24>
 8013132:	6020      	str	r0, [r4, #0]
 8013134:	6861      	ldr	r1, [r4, #4]
 8013136:	b129      	cbz	r1, 8013144 <rmw_uxrce_fini_node_memory+0x24>
 8013138:	2500      	movs	r5, #0
 801313a:	4804      	ldr	r0, [pc, #16]	; (801314c <rmw_uxrce_fini_node_memory+0x2c>)
 801313c:	610d      	str	r5, [r1, #16]
 801313e:	f007 f943 	bl	801a3c8 <put_memory>
 8013142:	6065      	str	r5, [r4, #4]
 8013144:	bd38      	pop	{r3, r4, r5, pc}
 8013146:	bf00      	nop
 8013148:	0801e5a4 	.word	0x0801e5a4
 801314c:	2001295c 	.word	0x2001295c

08013150 <rmw_uxrce_fini_publisher_memory>:
 8013150:	b510      	push	{r4, lr}
 8013152:	4604      	mov	r4, r0
 8013154:	6800      	ldr	r0, [r0, #0]
 8013156:	b128      	cbz	r0, 8013164 <rmw_uxrce_fini_publisher_memory+0x14>
 8013158:	4b06      	ldr	r3, [pc, #24]	; (8013174 <rmw_uxrce_fini_publisher_memory+0x24>)
 801315a:	6819      	ldr	r1, [r3, #0]
 801315c:	f7ed f870 	bl	8000240 <strcmp>
 8013160:	b938      	cbnz	r0, 8013172 <rmw_uxrce_fini_publisher_memory+0x22>
 8013162:	6020      	str	r0, [r4, #0]
 8013164:	6861      	ldr	r1, [r4, #4]
 8013166:	b121      	cbz	r1, 8013172 <rmw_uxrce_fini_publisher_memory+0x22>
 8013168:	4803      	ldr	r0, [pc, #12]	; (8013178 <rmw_uxrce_fini_publisher_memory+0x28>)
 801316a:	f007 f92d 	bl	801a3c8 <put_memory>
 801316e:	2300      	movs	r3, #0
 8013170:	6063      	str	r3, [r4, #4]
 8013172:	bd10      	pop	{r4, pc}
 8013174:	0801e5a4 	.word	0x0801e5a4
 8013178:	2001296c 	.word	0x2001296c

0801317c <rmw_uxrce_fini_subscription_memory>:
 801317c:	b510      	push	{r4, lr}
 801317e:	4604      	mov	r4, r0
 8013180:	6800      	ldr	r0, [r0, #0]
 8013182:	b128      	cbz	r0, 8013190 <rmw_uxrce_fini_subscription_memory+0x14>
 8013184:	4b06      	ldr	r3, [pc, #24]	; (80131a0 <rmw_uxrce_fini_subscription_memory+0x24>)
 8013186:	6819      	ldr	r1, [r3, #0]
 8013188:	f7ed f85a 	bl	8000240 <strcmp>
 801318c:	b938      	cbnz	r0, 801319e <rmw_uxrce_fini_subscription_memory+0x22>
 801318e:	6020      	str	r0, [r4, #0]
 8013190:	6861      	ldr	r1, [r4, #4]
 8013192:	b121      	cbz	r1, 801319e <rmw_uxrce_fini_subscription_memory+0x22>
 8013194:	4803      	ldr	r0, [pc, #12]	; (80131a4 <rmw_uxrce_fini_subscription_memory+0x28>)
 8013196:	f007 f917 	bl	801a3c8 <put_memory>
 801319a:	2300      	movs	r3, #0
 801319c:	6063      	str	r3, [r4, #4]
 801319e:	bd10      	pop	{r4, pc}
 80131a0:	0801e5a4 	.word	0x0801e5a4
 80131a4:	200129ac 	.word	0x200129ac

080131a8 <rmw_uxrce_fini_service_memory>:
 80131a8:	b510      	push	{r4, lr}
 80131aa:	4604      	mov	r4, r0
 80131ac:	6800      	ldr	r0, [r0, #0]
 80131ae:	b128      	cbz	r0, 80131bc <rmw_uxrce_fini_service_memory+0x14>
 80131b0:	4b06      	ldr	r3, [pc, #24]	; (80131cc <rmw_uxrce_fini_service_memory+0x24>)
 80131b2:	6819      	ldr	r1, [r3, #0]
 80131b4:	f7ed f844 	bl	8000240 <strcmp>
 80131b8:	b938      	cbnz	r0, 80131ca <rmw_uxrce_fini_service_memory+0x22>
 80131ba:	6020      	str	r0, [r4, #0]
 80131bc:	6861      	ldr	r1, [r4, #4]
 80131be:	b121      	cbz	r1, 80131ca <rmw_uxrce_fini_service_memory+0x22>
 80131c0:	4803      	ldr	r0, [pc, #12]	; (80131d0 <rmw_uxrce_fini_service_memory+0x28>)
 80131c2:	f007 f901 	bl	801a3c8 <put_memory>
 80131c6:	2300      	movs	r3, #0
 80131c8:	6063      	str	r3, [r4, #4]
 80131ca:	bd10      	pop	{r4, pc}
 80131cc:	0801e5a4 	.word	0x0801e5a4
 80131d0:	2001297c 	.word	0x2001297c

080131d4 <rmw_uxrce_fini_client_memory>:
 80131d4:	b510      	push	{r4, lr}
 80131d6:	4604      	mov	r4, r0
 80131d8:	6800      	ldr	r0, [r0, #0]
 80131da:	b128      	cbz	r0, 80131e8 <rmw_uxrce_fini_client_memory+0x14>
 80131dc:	4b06      	ldr	r3, [pc, #24]	; (80131f8 <rmw_uxrce_fini_client_memory+0x24>)
 80131de:	6819      	ldr	r1, [r3, #0]
 80131e0:	f7ed f82e 	bl	8000240 <strcmp>
 80131e4:	b938      	cbnz	r0, 80131f6 <rmw_uxrce_fini_client_memory+0x22>
 80131e6:	6020      	str	r0, [r4, #0]
 80131e8:	6861      	ldr	r1, [r4, #4]
 80131ea:	b121      	cbz	r1, 80131f6 <rmw_uxrce_fini_client_memory+0x22>
 80131ec:	4803      	ldr	r0, [pc, #12]	; (80131fc <rmw_uxrce_fini_client_memory+0x28>)
 80131ee:	f007 f8eb 	bl	801a3c8 <put_memory>
 80131f2:	2300      	movs	r3, #0
 80131f4:	6063      	str	r3, [r4, #4]
 80131f6:	bd10      	pop	{r4, pc}
 80131f8:	0801e5a4 	.word	0x0801e5a4
 80131fc:	2000e08c 	.word	0x2000e08c

08013200 <rmw_uxrce_fini_topic_memory>:
 8013200:	b510      	push	{r4, lr}
 8013202:	4604      	mov	r4, r0
 8013204:	4803      	ldr	r0, [pc, #12]	; (8013214 <rmw_uxrce_fini_topic_memory+0x14>)
 8013206:	4621      	mov	r1, r4
 8013208:	f007 f8de 	bl	801a3c8 <put_memory>
 801320c:	2300      	movs	r3, #0
 801320e:	61a3      	str	r3, [r4, #24]
 8013210:	bd10      	pop	{r4, pc}
 8013212:	bf00      	nop
 8013214:	200129bc 	.word	0x200129bc

08013218 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8013218:	b082      	sub	sp, #8
 801321a:	492b      	ldr	r1, [pc, #172]	; (80132c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801321c:	b530      	push	{r4, r5, lr}
 801321e:	680d      	ldr	r5, [r1, #0]
 8013220:	ac03      	add	r4, sp, #12
 8013222:	e884 000c 	stmia.w	r4, {r2, r3}
 8013226:	461c      	mov	r4, r3
 8013228:	2d00      	cmp	r5, #0
 801322a:	d04b      	beq.n	80132c4 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 801322c:	462b      	mov	r3, r5
 801322e:	2100      	movs	r1, #0
 8013230:	689a      	ldr	r2, [r3, #8]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8013238:	4290      	cmp	r0, r2
 801323a:	bf08      	it	eq
 801323c:	3101      	addeq	r1, #1
 801323e:	2b00      	cmp	r3, #0
 8013240:	d1f6      	bne.n	8013230 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8013242:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8013246:	2b02      	cmp	r3, #2
 8013248:	d029      	beq.n	801329e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801324a:	d820      	bhi.n	801328e <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 801324c:	428c      	cmp	r4, r1
 801324e:	d828      	bhi.n	80132a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8013250:	fab4 f284 	clz	r2, r4
 8013254:	0952      	lsrs	r2, r2, #5
 8013256:	b324      	cbz	r4, 80132a2 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8013258:	b1dd      	cbz	r5, 8013292 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801325a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801325e:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8013262:	e001      	b.n	8013268 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8013264:	686d      	ldr	r5, [r5, #4]
 8013266:	b1ad      	cbz	r5, 8013294 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8013268:	68ab      	ldr	r3, [r5, #8]
 801326a:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 801326e:	4288      	cmp	r0, r1
 8013270:	d1f8      	bne.n	8013264 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013272:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 8013276:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 801327a:	4561      	cmp	r1, ip
 801327c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8013280:	eb73 0e04 	sbcs.w	lr, r3, r4
 8013284:	daee      	bge.n	8013264 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8013286:	468c      	mov	ip, r1
 8013288:	461c      	mov	r4, r3
 801328a:	462a      	mov	r2, r5
 801328c:	e7ea      	b.n	8013264 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801328e:	2b03      	cmp	r3, #3
 8013290:	d0dc      	beq.n	801324c <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 8013292:	2200      	movs	r2, #0
 8013294:	4610      	mov	r0, r2
 8013296:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801329a:	b002      	add	sp, #8
 801329c:	4770      	bx	lr
 801329e:	428c      	cmp	r4, r1
 80132a0:	d905      	bls.n	80132ae <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80132a2:	4809      	ldr	r0, [pc, #36]	; (80132c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80132a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132a8:	b002      	add	sp, #8
 80132aa:	f007 b87d 	b.w	801a3a8 <get_memory>
 80132ae:	fab4 f284 	clz	r2, r4
 80132b2:	0952      	lsrs	r2, r2, #5
 80132b4:	2c00      	cmp	r4, #0
 80132b6:	d1ed      	bne.n	8013294 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80132b8:	4803      	ldr	r0, [pc, #12]	; (80132c8 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80132ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132be:	b002      	add	sp, #8
 80132c0:	f007 b872 	b.w	801a3a8 <get_memory>
 80132c4:	4629      	mov	r1, r5
 80132c6:	e7bc      	b.n	8013242 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80132c8:	2001299c 	.word	0x2001299c

080132cc <rmw_uxrce_find_static_input_buffer_by_owner>:
 80132cc:	4b12      	ldr	r3, [pc, #72]	; (8013318 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	b530      	push	{r4, r5, lr}
 80132d2:	b1f3      	cbz	r3, 8013312 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80132d4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80132d8:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 80132dc:	2400      	movs	r4, #0
 80132de:	e001      	b.n	80132e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	b1a3      	cbz	r3, 801330e <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80132e4:	689a      	ldr	r2, [r3, #8]
 80132e6:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 80132ea:	4288      	cmp	r0, r1
 80132ec:	d1f8      	bne.n	80132e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80132ee:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 80132f2:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 80132f6:	4571      	cmp	r1, lr
 80132f8:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80132fc:	eb72 050c 	sbcs.w	r5, r2, ip
 8013300:	daee      	bge.n	80132e0 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8013302:	461c      	mov	r4, r3
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	468e      	mov	lr, r1
 8013308:	4694      	mov	ip, r2
 801330a:	2b00      	cmp	r3, #0
 801330c:	d1ea      	bne.n	80132e4 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 801330e:	4620      	mov	r0, r4
 8013310:	bd30      	pop	{r4, r5, pc}
 8013312:	461c      	mov	r4, r3
 8013314:	4620      	mov	r0, r4
 8013316:	bd30      	pop	{r4, r5, pc}
 8013318:	2001299c 	.word	0x2001299c
 801331c:	00000000 	.word	0x00000000

08013320 <rmw_uxrce_clean_expired_static_input_buffer>:
 8013320:	4b3d      	ldr	r3, [pc, #244]	; (8013418 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8013322:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013326:	681f      	ldr	r7, [r3, #0]
 8013328:	ed2d 8b06 	vpush	{d8-d10}
 801332c:	b08d      	sub	sp, #52	; 0x34
 801332e:	f007 fac7 	bl	801a8c0 <rmw_uros_epoch_nanos>
 8013332:	2f00      	cmp	r7, #0
 8013334:	d05d      	beq.n	80133f2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8013336:	46b8      	mov	r8, r7
 8013338:	4681      	mov	r9, r0
 801333a:	468a      	mov	sl, r1
 801333c:	ac04      	add	r4, sp, #16
 801333e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013342:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 8013346:	2b04      	cmp	r3, #4
 8013348:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 8013400 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801334c:	ed9f ab2e 	vldr	d10, [pc, #184]	; 8013408 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8013350:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 8013410 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8013354:	d03f      	beq.n	80133d6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8013356:	2b05      	cmp	r3, #5
 8013358:	d044      	beq.n	80133e4 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801335a:	2b03      	cmp	r3, #3
 801335c:	d03b      	beq.n	80133d6 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801335e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8013362:	ed8d ab06 	vstr	d10, [sp, #24]
 8013366:	ab08      	add	r3, sp, #32
 8013368:	ed8d 8b08 	vstr	d8, [sp, #32]
 801336c:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8013370:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013372:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8013376:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801337a:	f006 fe29 	bl	8019fd0 <rmw_time_equal>
 801337e:	b118      	cbz	r0, 8013388 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8013380:	ed8d 9b04 	vstr	d9, [sp, #16]
 8013384:	ed8d 8b06 	vstr	d8, [sp, #24]
 8013388:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 801338c:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8013390:	f855 7c04 	ldr.w	r7, [r5, #-4]
 8013394:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8013398:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801339c:	f006 fe6e 	bl	801a07c <rmw_time_total_nsec>
 80133a0:	1830      	adds	r0, r6, r0
 80133a2:	eb47 0101 	adc.w	r1, r7, r1
 80133a6:	4548      	cmp	r0, r9
 80133a8:	eb71 030a 	sbcs.w	r3, r1, sl
 80133ac:	db05      	blt.n	80133ba <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 80133ae:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80133b2:	4591      	cmp	r9, r2
 80133b4:	eb7a 0303 	sbcs.w	r3, sl, r3
 80133b8:	da03      	bge.n	80133c2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80133ba:	4641      	mov	r1, r8
 80133bc:	4816      	ldr	r0, [pc, #88]	; (8013418 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80133be:	f007 f803 	bl	801a3c8 <put_memory>
 80133c2:	f1bb 0f00 	cmp.w	fp, #0
 80133c6:	d014      	beq.n	80133f2 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80133c8:	46d8      	mov	r8, fp
 80133ca:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80133ce:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 80133d2:	2b04      	cmp	r3, #4
 80133d4:	d1bf      	bne.n	8013356 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80133d6:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 80133da:	3340      	adds	r3, #64	; 0x40
 80133dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80133de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80133e2:	e7c0      	b.n	8013366 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80133e4:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 80133e8:	3348      	adds	r3, #72	; 0x48
 80133ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80133ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80133f0:	e7b9      	b.n	8013366 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80133f2:	b00d      	add	sp, #52	; 0x34
 80133f4:	ecbd 8b06 	vpop	{d8-d10}
 80133f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133fc:	f3af 8000 	nop.w
	...
 8013408:	00000001 	.word	0x00000001
 801340c:	00000000 	.word	0x00000000
 8013410:	0000001e 	.word	0x0000001e
 8013414:	00000000 	.word	0x00000000
 8013418:	2001299c 	.word	0x2001299c

0801341c <run_xrce_session>:
 801341c:	b510      	push	{r4, lr}
 801341e:	788c      	ldrb	r4, [r1, #2]
 8013420:	b086      	sub	sp, #24
 8013422:	2c01      	cmp	r4, #1
 8013424:	f8ad 200e 	strh.w	r2, [sp, #14]
 8013428:	d00c      	beq.n	8013444 <run_xrce_session+0x28>
 801342a:	2401      	movs	r4, #1
 801342c:	4619      	mov	r1, r3
 801342e:	f10d 020e 	add.w	r2, sp, #14
 8013432:	f10d 0317 	add.w	r3, sp, #23
 8013436:	9400      	str	r4, [sp, #0]
 8013438:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801343c:	f001 fd50 	bl	8014ee0 <uxr_run_session_until_all_status>
 8013440:	b006      	add	sp, #24
 8013442:	bd10      	pop	{r4, pc}
 8013444:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8013448:	f001 f96c 	bl	8014724 <uxr_flash_output_streams>
 801344c:	4620      	mov	r0, r4
 801344e:	b006      	add	sp, #24
 8013450:	bd10      	pop	{r4, pc}
 8013452:	bf00      	nop

08013454 <convert_qos_profile>:
 8013454:	7a4a      	ldrb	r2, [r1, #9]
 8013456:	f891 c008 	ldrb.w	ip, [r1, #8]
 801345a:	2a02      	cmp	r2, #2
 801345c:	bf18      	it	ne
 801345e:	2200      	movne	r2, #0
 8013460:	7002      	strb	r2, [r0, #0]
 8013462:	f1ac 0202 	sub.w	r2, ip, #2
 8013466:	fab2 f282 	clz	r2, r2
 801346a:	0952      	lsrs	r2, r2, #5
 801346c:	7042      	strb	r2, [r0, #1]
 801346e:	780a      	ldrb	r2, [r1, #0]
 8013470:	8889      	ldrh	r1, [r1, #4]
 8013472:	f1a2 0202 	sub.w	r2, r2, #2
 8013476:	8081      	strh	r1, [r0, #4]
 8013478:	fab2 f282 	clz	r2, r2
 801347c:	0952      	lsrs	r2, r2, #5
 801347e:	7082      	strb	r2, [r0, #2]
 8013480:	4770      	bx	lr
 8013482:	bf00      	nop

08013484 <generate_service_topics>:
 8013484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013486:	461d      	mov	r5, r3
 8013488:	b083      	sub	sp, #12
 801348a:	4606      	mov	r6, r0
 801348c:	4c11      	ldr	r4, [pc, #68]	; (80134d4 <generate_service_topics+0x50>)
 801348e:	4608      	mov	r0, r1
 8013490:	4b11      	ldr	r3, [pc, #68]	; (80134d8 <generate_service_topics+0x54>)
 8013492:	4617      	mov	r7, r2
 8013494:	4629      	mov	r1, r5
 8013496:	4a11      	ldr	r2, [pc, #68]	; (80134dc <generate_service_topics+0x58>)
 8013498:	9401      	str	r4, [sp, #4]
 801349a:	9600      	str	r6, [sp, #0]
 801349c:	f008 fe46 	bl	801c12c <sniprintf>
 80134a0:	4a0f      	ldr	r2, [pc, #60]	; (80134e0 <generate_service_topics+0x5c>)
 80134a2:	4604      	mov	r4, r0
 80134a4:	4b0f      	ldr	r3, [pc, #60]	; (80134e4 <generate_service_topics+0x60>)
 80134a6:	9201      	str	r2, [sp, #4]
 80134a8:	4638      	mov	r0, r7
 80134aa:	4a0c      	ldr	r2, [pc, #48]	; (80134dc <generate_service_topics+0x58>)
 80134ac:	4629      	mov	r1, r5
 80134ae:	9600      	str	r6, [sp, #0]
 80134b0:	f008 fe3c 	bl	801c12c <sniprintf>
 80134b4:	2c00      	cmp	r4, #0
 80134b6:	bfa8      	it	ge
 80134b8:	42a5      	cmpge	r5, r4
 80134ba:	bfcc      	ite	gt
 80134bc:	2401      	movgt	r4, #1
 80134be:	2400      	movle	r4, #0
 80134c0:	dd05      	ble.n	80134ce <generate_service_topics+0x4a>
 80134c2:	2800      	cmp	r0, #0
 80134c4:	bfa8      	it	ge
 80134c6:	4285      	cmpge	r5, r0
 80134c8:	bfcc      	ite	gt
 80134ca:	2401      	movgt	r4, #1
 80134cc:	2400      	movle	r4, #0
 80134ce:	4620      	mov	r0, r4
 80134d0:	b003      	add	sp, #12
 80134d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80134d4:	0801df60 	.word	0x0801df60
 80134d8:	0801df5c 	.word	0x0801df5c
 80134dc:	0801df40 	.word	0x0801df40
 80134e0:	0801df54 	.word	0x0801df54
 80134e4:	0801df50 	.word	0x0801df50

080134e8 <generate_service_types>:
 80134e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ec:	4606      	mov	r6, r0
 80134ee:	b087      	sub	sp, #28
 80134f0:	461c      	mov	r4, r3
 80134f2:	6883      	ldr	r3, [r0, #8]
 80134f4:	460d      	mov	r5, r1
 80134f6:	4617      	mov	r7, r2
 80134f8:	4798      	blx	r3
 80134fa:	68f3      	ldr	r3, [r6, #12]
 80134fc:	4606      	mov	r6, r0
 80134fe:	4798      	blx	r3
 8013500:	2300      	movs	r3, #0
 8013502:	f8d0 b004 	ldr.w	fp, [r0, #4]
 8013506:	6872      	ldr	r2, [r6, #4]
 8013508:	702b      	strb	r3, [r5, #0]
 801350a:	6813      	ldr	r3, [r2, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d03f      	beq.n	8013590 <generate_service_types+0xa8>
 8013510:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80135a4 <generate_service_types+0xbc>
 8013514:	4649      	mov	r1, r9
 8013516:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80135ac <generate_service_types+0xc4>
 801351a:	4628      	mov	r0, r5
 801351c:	f8df a090 	ldr.w	sl, [pc, #144]	; 80135b0 <generate_service_types+0xc8>
 8013520:	f8cd 8014 	str.w	r8, [sp, #20]
 8013524:	6852      	ldr	r2, [r2, #4]
 8013526:	9100      	str	r1, [sp, #0]
 8013528:	4621      	mov	r1, r4
 801352a:	f8cd 8008 	str.w	r8, [sp, #8]
 801352e:	f8cd a004 	str.w	sl, [sp, #4]
 8013532:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8013536:	4a1a      	ldr	r2, [pc, #104]	; (80135a0 <generate_service_types+0xb8>)
 8013538:	f008 fdf8 	bl	801c12c <sniprintf>
 801353c:	2300      	movs	r3, #0
 801353e:	42a0      	cmp	r0, r4
 8013540:	ea6f 0600 	mvn.w	r6, r0
 8013544:	703b      	strb	r3, [r7, #0]
 8013546:	f8db 3000 	ldr.w	r3, [fp]
 801354a:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 801354e:	bfac      	ite	ge
 8013550:	2500      	movge	r5, #0
 8013552:	2501      	movlt	r5, #1
 8013554:	b30b      	cbz	r3, 801359a <generate_service_types+0xb2>
 8013556:	4a13      	ldr	r2, [pc, #76]	; (80135a4 <generate_service_types+0xbc>)
 8013558:	f8cd 8014 	str.w	r8, [sp, #20]
 801355c:	402e      	ands	r6, r5
 801355e:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013562:	4638      	mov	r0, r7
 8013564:	9104      	str	r1, [sp, #16]
 8013566:	4621      	mov	r1, r4
 8013568:	e9cd 2a00 	strd	r2, sl, [sp]
 801356c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8013570:	4a0b      	ldr	r2, [pc, #44]	; (80135a0 <generate_service_types+0xb8>)
 8013572:	f008 fddb 	bl	801c12c <sniprintf>
 8013576:	2800      	cmp	r0, #0
 8013578:	bfb4      	ite	lt
 801357a:	2600      	movlt	r6, #0
 801357c:	f006 0601 	andge.w	r6, r6, #1
 8013580:	42a0      	cmp	r0, r4
 8013582:	bfac      	ite	ge
 8013584:	2000      	movge	r0, #0
 8013586:	f006 0001 	andlt.w	r0, r6, #1
 801358a:	b007      	add	sp, #28
 801358c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013590:	4b05      	ldr	r3, [pc, #20]	; (80135a8 <generate_service_types+0xc0>)
 8013592:	f8df 9010 	ldr.w	r9, [pc, #16]	; 80135a4 <generate_service_types+0xbc>
 8013596:	4619      	mov	r1, r3
 8013598:	e7bd      	b.n	8013516 <generate_service_types+0x2e>
 801359a:	4b03      	ldr	r3, [pc, #12]	; (80135a8 <generate_service_types+0xc0>)
 801359c:	461a      	mov	r2, r3
 801359e:	e7db      	b.n	8013558 <generate_service_types+0x70>
 80135a0:	0801df38 	.word	0x0801df38
 80135a4:	0801df34 	.word	0x0801df34
 80135a8:	0801dfb8 	.word	0x0801dfb8
 80135ac:	0801df48 	.word	0x0801df48
 80135b0:	0801df4c 	.word	0x0801df4c

080135b4 <generate_type_name>:
 80135b4:	2300      	movs	r3, #0
 80135b6:	b530      	push	{r4, r5, lr}
 80135b8:	700b      	strb	r3, [r1, #0]
 80135ba:	b087      	sub	sp, #28
 80135bc:	6803      	ldr	r3, [r0, #0]
 80135be:	4614      	mov	r4, r2
 80135c0:	b1bb      	cbz	r3, 80135f2 <generate_type_name+0x3e>
 80135c2:	4a0e      	ldr	r2, [pc, #56]	; (80135fc <generate_type_name+0x48>)
 80135c4:	4615      	mov	r5, r2
 80135c6:	9500      	str	r5, [sp, #0]
 80135c8:	9203      	str	r2, [sp, #12]
 80135ca:	4d0d      	ldr	r5, [pc, #52]	; (8013600 <generate_type_name+0x4c>)
 80135cc:	6842      	ldr	r2, [r0, #4]
 80135ce:	4608      	mov	r0, r1
 80135d0:	490c      	ldr	r1, [pc, #48]	; (8013604 <generate_type_name+0x50>)
 80135d2:	9204      	str	r2, [sp, #16]
 80135d4:	9105      	str	r1, [sp, #20]
 80135d6:	9102      	str	r1, [sp, #8]
 80135d8:	4621      	mov	r1, r4
 80135da:	4a0b      	ldr	r2, [pc, #44]	; (8013608 <generate_type_name+0x54>)
 80135dc:	9501      	str	r5, [sp, #4]
 80135de:	f008 fda5 	bl	801c12c <sniprintf>
 80135e2:	2800      	cmp	r0, #0
 80135e4:	bfa8      	it	ge
 80135e6:	4284      	cmpge	r4, r0
 80135e8:	bfcc      	ite	gt
 80135ea:	2001      	movgt	r0, #1
 80135ec:	2000      	movle	r0, #0
 80135ee:	b007      	add	sp, #28
 80135f0:	bd30      	pop	{r4, r5, pc}
 80135f2:	4b06      	ldr	r3, [pc, #24]	; (801360c <generate_type_name+0x58>)
 80135f4:	4a01      	ldr	r2, [pc, #4]	; (80135fc <generate_type_name+0x48>)
 80135f6:	461d      	mov	r5, r3
 80135f8:	e7e5      	b.n	80135c6 <generate_type_name+0x12>
 80135fa:	bf00      	nop
 80135fc:	0801df34 	.word	0x0801df34
 8013600:	0801df4c 	.word	0x0801df4c
 8013604:	0801df48 	.word	0x0801df48
 8013608:	0801df38 	.word	0x0801df38
 801360c:	0801dfb8 	.word	0x0801dfb8

08013610 <generate_topic_name>:
 8013610:	b530      	push	{r4, r5, lr}
 8013612:	4614      	mov	r4, r2
 8013614:	b083      	sub	sp, #12
 8013616:	4605      	mov	r5, r0
 8013618:	4b07      	ldr	r3, [pc, #28]	; (8013638 <generate_topic_name+0x28>)
 801361a:	4a08      	ldr	r2, [pc, #32]	; (801363c <generate_topic_name+0x2c>)
 801361c:	4608      	mov	r0, r1
 801361e:	9500      	str	r5, [sp, #0]
 8013620:	4621      	mov	r1, r4
 8013622:	f008 fd83 	bl	801c12c <sniprintf>
 8013626:	2800      	cmp	r0, #0
 8013628:	bfa8      	it	ge
 801362a:	4284      	cmpge	r4, r0
 801362c:	bfcc      	ite	gt
 801362e:	2001      	movgt	r0, #1
 8013630:	2000      	movle	r0, #0
 8013632:	b003      	add	sp, #12
 8013634:	bd30      	pop	{r4, r5, pc}
 8013636:	bf00      	nop
 8013638:	0801df68 	.word	0x0801df68
 801363c:	0801d93c 	.word	0x0801d93c

08013640 <is_uxrce_rmw_identifier_valid>:
 8013640:	b510      	push	{r4, lr}
 8013642:	4604      	mov	r4, r0
 8013644:	b140      	cbz	r0, 8013658 <is_uxrce_rmw_identifier_valid+0x18>
 8013646:	f006 ff17 	bl	801a478 <rmw_get_implementation_identifier>
 801364a:	4601      	mov	r1, r0
 801364c:	4620      	mov	r0, r4
 801364e:	f7ec fdf7 	bl	8000240 <strcmp>
 8013652:	fab0 f080 	clz	r0, r0
 8013656:	0940      	lsrs	r0, r0, #5
 8013658:	bd10      	pop	{r4, pc}
 801365a:	bf00      	nop

0801365c <get_message_typesupport_handle>:
 801365c:	6883      	ldr	r3, [r0, #8]
 801365e:	4718      	bx	r3

08013660 <get_message_typesupport_handle_function>:
 8013660:	b510      	push	{r4, lr}
 8013662:	4604      	mov	r4, r0
 8013664:	6800      	ldr	r0, [r0, #0]
 8013666:	f7ec fdeb 	bl	8000240 <strcmp>
 801366a:	2800      	cmp	r0, #0
 801366c:	bf0c      	ite	eq
 801366e:	4620      	moveq	r0, r4
 8013670:	2000      	movne	r0, #0
 8013672:	bd10      	pop	{r4, pc}

08013674 <get_service_typesupport_handle>:
 8013674:	6883      	ldr	r3, [r0, #8]
 8013676:	4718      	bx	r3

08013678 <get_service_typesupport_handle_function>:
 8013678:	b510      	push	{r4, lr}
 801367a:	4604      	mov	r4, r0
 801367c:	6800      	ldr	r0, [r0, #0]
 801367e:	f7ec fddf 	bl	8000240 <strcmp>
 8013682:	2800      	cmp	r0, #0
 8013684:	bf0c      	ite	eq
 8013686:	4620      	moveq	r0, r4
 8013688:	2000      	movne	r0, #0
 801368a:	bd10      	pop	{r4, pc}

0801368c <rosidl_runtime_c__String__init>:
 801368c:	b510      	push	{r4, lr}
 801368e:	4604      	mov	r4, r0
 8013690:	b086      	sub	sp, #24
 8013692:	b170      	cbz	r0, 80136b2 <rosidl_runtime_c__String__init+0x26>
 8013694:	a801      	add	r0, sp, #4
 8013696:	f7fd feef 	bl	8011478 <rcutils_get_default_allocator>
 801369a:	9b01      	ldr	r3, [sp, #4]
 801369c:	9905      	ldr	r1, [sp, #20]
 801369e:	2001      	movs	r0, #1
 80136a0:	4798      	blx	r3
 80136a2:	6020      	str	r0, [r4, #0]
 80136a4:	b128      	cbz	r0, 80136b2 <rosidl_runtime_c__String__init+0x26>
 80136a6:	2100      	movs	r1, #0
 80136a8:	2201      	movs	r2, #1
 80136aa:	7001      	strb	r1, [r0, #0]
 80136ac:	4610      	mov	r0, r2
 80136ae:	e9c4 1201 	strd	r1, r2, [r4, #4]
 80136b2:	b006      	add	sp, #24
 80136b4:	bd10      	pop	{r4, pc}
 80136b6:	bf00      	nop

080136b8 <rosidl_runtime_c__String__fini>:
 80136b8:	b320      	cbz	r0, 8013704 <rosidl_runtime_c__String__fini+0x4c>
 80136ba:	6803      	ldr	r3, [r0, #0]
 80136bc:	b510      	push	{r4, lr}
 80136be:	4604      	mov	r4, r0
 80136c0:	b086      	sub	sp, #24
 80136c2:	b173      	cbz	r3, 80136e2 <rosidl_runtime_c__String__fini+0x2a>
 80136c4:	6883      	ldr	r3, [r0, #8]
 80136c6:	b1f3      	cbz	r3, 8013706 <rosidl_runtime_c__String__fini+0x4e>
 80136c8:	a801      	add	r0, sp, #4
 80136ca:	f7fd fed5 	bl	8011478 <rcutils_get_default_allocator>
 80136ce:	9b02      	ldr	r3, [sp, #8]
 80136d0:	9905      	ldr	r1, [sp, #20]
 80136d2:	6820      	ldr	r0, [r4, #0]
 80136d4:	4798      	blx	r3
 80136d6:	2300      	movs	r3, #0
 80136d8:	e9c4 3300 	strd	r3, r3, [r4]
 80136dc:	60a3      	str	r3, [r4, #8]
 80136de:	b006      	add	sp, #24
 80136e0:	bd10      	pop	{r4, pc}
 80136e2:	6843      	ldr	r3, [r0, #4]
 80136e4:	b9db      	cbnz	r3, 801371e <rosidl_runtime_c__String__fini+0x66>
 80136e6:	6883      	ldr	r3, [r0, #8]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d0f8      	beq.n	80136de <rosidl_runtime_c__String__fini+0x26>
 80136ec:	4b12      	ldr	r3, [pc, #72]	; (8013738 <rosidl_runtime_c__String__fini+0x80>)
 80136ee:	2251      	movs	r2, #81	; 0x51
 80136f0:	2101      	movs	r1, #1
 80136f2:	4812      	ldr	r0, [pc, #72]	; (801373c <rosidl_runtime_c__String__fini+0x84>)
 80136f4:	681b      	ldr	r3, [r3, #0]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	f008 fc4a 	bl	801bf90 <fwrite>
 80136fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013700:	f008 f902 	bl	801b908 <exit>
 8013704:	4770      	bx	lr
 8013706:	4b0c      	ldr	r3, [pc, #48]	; (8013738 <rosidl_runtime_c__String__fini+0x80>)
 8013708:	224c      	movs	r2, #76	; 0x4c
 801370a:	2101      	movs	r1, #1
 801370c:	480c      	ldr	r0, [pc, #48]	; (8013740 <rosidl_runtime_c__String__fini+0x88>)
 801370e:	681b      	ldr	r3, [r3, #0]
 8013710:	68db      	ldr	r3, [r3, #12]
 8013712:	f008 fc3d 	bl	801bf90 <fwrite>
 8013716:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801371a:	f008 f8f5 	bl	801b908 <exit>
 801371e:	4b06      	ldr	r3, [pc, #24]	; (8013738 <rosidl_runtime_c__String__fini+0x80>)
 8013720:	224e      	movs	r2, #78	; 0x4e
 8013722:	2101      	movs	r1, #1
 8013724:	4807      	ldr	r0, [pc, #28]	; (8013744 <rosidl_runtime_c__String__fini+0x8c>)
 8013726:	681b      	ldr	r3, [r3, #0]
 8013728:	68db      	ldr	r3, [r3, #12]
 801372a:	f008 fc31 	bl	801bf90 <fwrite>
 801372e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013732:	f008 f8e9 	bl	801b908 <exit>
 8013736:	bf00      	nop
 8013738:	200004d4 	.word	0x200004d4
 801373c:	0801e00c 	.word	0x0801e00c
 8013740:	0801df6c 	.word	0x0801df6c
 8013744:	0801dfbc 	.word	0x0801dfbc

08013748 <rosidl_runtime_c__String__assignn>:
 8013748:	2900      	cmp	r1, #0
 801374a:	bf18      	it	ne
 801374c:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 8013750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013754:	bf0c      	ite	eq
 8013756:	2401      	moveq	r4, #1
 8013758:	2400      	movne	r4, #0
 801375a:	b087      	sub	sp, #28
 801375c:	2800      	cmp	r0, #0
 801375e:	bf08      	it	eq
 8013760:	f044 0401 	orreq.w	r4, r4, #1
 8013764:	b124      	cbz	r4, 8013770 <rosidl_runtime_c__String__assignn+0x28>
 8013766:	2400      	movs	r4, #0
 8013768:	4620      	mov	r0, r4
 801376a:	b007      	add	sp, #28
 801376c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013770:	4616      	mov	r6, r2
 8013772:	4605      	mov	r5, r0
 8013774:	a801      	add	r0, sp, #4
 8013776:	460f      	mov	r7, r1
 8013778:	f106 0901 	add.w	r9, r6, #1
 801377c:	f7fd fe7c 	bl	8011478 <rcutils_get_default_allocator>
 8013780:	9b03      	ldr	r3, [sp, #12]
 8013782:	9a05      	ldr	r2, [sp, #20]
 8013784:	4649      	mov	r1, r9
 8013786:	6828      	ldr	r0, [r5, #0]
 8013788:	4798      	blx	r3
 801378a:	4680      	mov	r8, r0
 801378c:	2800      	cmp	r0, #0
 801378e:	d0eb      	beq.n	8013768 <rosidl_runtime_c__String__assignn+0x20>
 8013790:	4639      	mov	r1, r7
 8013792:	4632      	mov	r2, r6
 8013794:	f008 ff03 	bl	801c59e <memcpy>
 8013798:	f808 4006 	strb.w	r4, [r8, r6]
 801379c:	2401      	movs	r4, #1
 801379e:	f8c5 9008 	str.w	r9, [r5, #8]
 80137a2:	4620      	mov	r0, r4
 80137a4:	e9c5 8600 	strd	r8, r6, [r5]
 80137a8:	b007      	add	sp, #28
 80137aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137ae:	bf00      	nop

080137b0 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80137b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137b4:	6805      	ldr	r5, [r0, #0]
 80137b6:	4604      	mov	r4, r0
 80137b8:	460e      	mov	r6, r1
 80137ba:	4628      	mov	r0, r5
 80137bc:	f7ec fd40 	bl	8000240 <strcmp>
 80137c0:	b1c8      	cbz	r0, 80137f6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80137c2:	4b11      	ldr	r3, [pc, #68]	; (8013808 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	429d      	cmp	r5, r3
 80137c8:	d112      	bne.n	80137f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80137ca:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80137ce:	f8d8 4000 	ldr.w	r4, [r8]
 80137d2:	b16c      	cbz	r4, 80137f0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80137d4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80137d8:	2700      	movs	r7, #0
 80137da:	3d04      	subs	r5, #4
 80137dc:	4631      	mov	r1, r6
 80137de:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80137e2:	f7ec fd2d 	bl	8000240 <strcmp>
 80137e6:	00bb      	lsls	r3, r7, #2
 80137e8:	b140      	cbz	r0, 80137fc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80137ea:	3701      	adds	r7, #1
 80137ec:	42bc      	cmp	r4, r7
 80137ee:	d1f5      	bne.n	80137dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80137f0:	2000      	movs	r0, #0
 80137f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137f6:	4620      	mov	r0, r4
 80137f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137fc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013800:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013804:	58d3      	ldr	r3, [r2, r3]
 8013806:	4718      	bx	r3
 8013808:	200003f0 	.word	0x200003f0

0801380c <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 801380c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013810:	6805      	ldr	r5, [r0, #0]
 8013812:	4604      	mov	r4, r0
 8013814:	460e      	mov	r6, r1
 8013816:	4628      	mov	r0, r5
 8013818:	f7ec fd12 	bl	8000240 <strcmp>
 801381c:	b1c8      	cbz	r0, 8013852 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 801381e:	4b11      	ldr	r3, [pc, #68]	; (8013864 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	429d      	cmp	r5, r3
 8013824:	d112      	bne.n	801384c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8013826:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801382a:	f8d8 4000 	ldr.w	r4, [r8]
 801382e:	b16c      	cbz	r4, 801384c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8013830:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8013834:	2700      	movs	r7, #0
 8013836:	3d04      	subs	r5, #4
 8013838:	4631      	mov	r1, r6
 801383a:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801383e:	f7ec fcff 	bl	8000240 <strcmp>
 8013842:	00bb      	lsls	r3, r7, #2
 8013844:	b140      	cbz	r0, 8013858 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8013846:	3701      	adds	r7, #1
 8013848:	42bc      	cmp	r4, r7
 801384a:	d1f5      	bne.n	8013838 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 801384c:	2000      	movs	r0, #0
 801384e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013852:	4620      	mov	r0, r4
 8013854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013858:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801385c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013860:	58d3      	ldr	r3, [r2, r3]
 8013862:	4718      	bx	r3
 8013864:	200003f0 	.word	0x200003f0

08013868 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8013868:	4b04      	ldr	r3, [pc, #16]	; (801387c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 801386a:	681a      	ldr	r2, [r3, #0]
 801386c:	b10a      	cbz	r2, 8013872 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 801386e:	4803      	ldr	r0, [pc, #12]	; (801387c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8013870:	4770      	bx	lr
 8013872:	4a03      	ldr	r2, [pc, #12]	; (8013880 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8013874:	4801      	ldr	r0, [pc, #4]	; (801387c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8013876:	6812      	ldr	r2, [r2, #0]
 8013878:	601a      	str	r2, [r3, #0]
 801387a:	4770      	bx	lr
 801387c:	20000400 	.word	0x20000400
 8013880:	200003f0 	.word	0x200003f0

08013884 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8013884:	4a02      	ldr	r2, [pc, #8]	; (8013890 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 8013886:	4b03      	ldr	r3, [pc, #12]	; (8013894 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8013888:	6812      	ldr	r2, [r2, #0]
 801388a:	601a      	str	r2, [r3, #0]
 801388c:	4770      	bx	lr
 801388e:	bf00      	nop
 8013890:	200003f0 	.word	0x200003f0
 8013894:	20000400 	.word	0x20000400

08013898 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 8013898:	f007 b820 	b.w	801a8dc <std_msgs__msg__String__init>

0801389c <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 801389c:	f007 b830 	b.w	801a900 <std_msgs__msg__String__fini>

080138a0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 80138a0:	4b04      	ldr	r3, [pc, #16]	; (80138b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80138a2:	681a      	ldr	r2, [r3, #0]
 80138a4:	b10a      	cbz	r2, 80138aa <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 80138a6:	4803      	ldr	r0, [pc, #12]	; (80138b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80138a8:	4770      	bx	lr
 80138aa:	4a03      	ldr	r2, [pc, #12]	; (80138b8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 80138ac:	4801      	ldr	r0, [pc, #4]	; (80138b4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 80138ae:	6812      	ldr	r2, [r2, #0]
 80138b0:	601a      	str	r2, [r3, #0]
 80138b2:	4770      	bx	lr
 80138b4:	20000448 	.word	0x20000448
 80138b8:	200003f4 	.word	0x200003f4

080138bc <_String__max_serialized_size>:
 80138bc:	2000      	movs	r0, #0
 80138be:	4770      	bx	lr

080138c0 <_String__cdr_serialize>:
 80138c0:	b1c8      	cbz	r0, 80138f6 <_String__cdr_serialize+0x36>
 80138c2:	b570      	push	{r4, r5, r6, lr}
 80138c4:	6806      	ldr	r6, [r0, #0]
 80138c6:	4604      	mov	r4, r0
 80138c8:	460d      	mov	r5, r1
 80138ca:	b15e      	cbz	r6, 80138e4 <_String__cdr_serialize+0x24>
 80138cc:	4630      	mov	r0, r6
 80138ce:	f7ec fcc1 	bl	8000254 <strlen>
 80138d2:	4603      	mov	r3, r0
 80138d4:	1c42      	adds	r2, r0, #1
 80138d6:	4631      	mov	r1, r6
 80138d8:	4628      	mov	r0, r5
 80138da:	6063      	str	r3, [r4, #4]
 80138dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138e0:	f7fb bf76 	b.w	800f7d0 <ucdr_serialize_sequence_char>
 80138e4:	4633      	mov	r3, r6
 80138e6:	4632      	mov	r2, r6
 80138e8:	4631      	mov	r1, r6
 80138ea:	4628      	mov	r0, r5
 80138ec:	6063      	str	r3, [r4, #4]
 80138ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138f2:	f7fb bf6d 	b.w	800f7d0 <ucdr_serialize_sequence_char>
 80138f6:	4770      	bx	lr

080138f8 <get_serialized_size_std_msgs__msg__String>:
 80138f8:	b510      	push	{r4, lr}
 80138fa:	4604      	mov	r4, r0
 80138fc:	b130      	cbz	r0, 801390c <get_serialized_size_std_msgs__msg__String+0x14>
 80138fe:	4608      	mov	r0, r1
 8013900:	2104      	movs	r1, #4
 8013902:	f7fb fef5 	bl	800f6f0 <ucdr_alignment>
 8013906:	6863      	ldr	r3, [r4, #4]
 8013908:	3305      	adds	r3, #5
 801390a:	4418      	add	r0, r3
 801390c:	bd10      	pop	{r4, pc}
 801390e:	bf00      	nop

08013910 <_String__cdr_deserialize>:
 8013910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013912:	460c      	mov	r4, r1
 8013914:	b083      	sub	sp, #12
 8013916:	b1a1      	cbz	r1, 8013942 <_String__cdr_deserialize+0x32>
 8013918:	688f      	ldr	r7, [r1, #8]
 801391a:	ab01      	add	r3, sp, #4
 801391c:	6809      	ldr	r1, [r1, #0]
 801391e:	4606      	mov	r6, r0
 8013920:	463a      	mov	r2, r7
 8013922:	f7fb ff67 	bl	800f7f4 <ucdr_deserialize_sequence_char>
 8013926:	9b01      	ldr	r3, [sp, #4]
 8013928:	4605      	mov	r5, r0
 801392a:	b920      	cbnz	r0, 8013936 <_String__cdr_deserialize+0x26>
 801392c:	429f      	cmp	r7, r3
 801392e:	d30c      	bcc.n	801394a <_String__cdr_deserialize+0x3a>
 8013930:	4628      	mov	r0, r5
 8013932:	b003      	add	sp, #12
 8013934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013936:	b103      	cbz	r3, 801393a <_String__cdr_deserialize+0x2a>
 8013938:	3b01      	subs	r3, #1
 801393a:	4628      	mov	r0, r5
 801393c:	6063      	str	r3, [r4, #4]
 801393e:	b003      	add	sp, #12
 8013940:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013942:	460d      	mov	r5, r1
 8013944:	4628      	mov	r0, r5
 8013946:	b003      	add	sp, #12
 8013948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801394a:	2101      	movs	r1, #1
 801394c:	4630      	mov	r0, r6
 801394e:	75b5      	strb	r5, [r6, #22]
 8013950:	7571      	strb	r1, [r6, #21]
 8013952:	6065      	str	r5, [r4, #4]
 8013954:	f7fb fee4 	bl	800f720 <ucdr_align_to>
 8013958:	4630      	mov	r0, r6
 801395a:	9901      	ldr	r1, [sp, #4]
 801395c:	f7fb ff18 	bl	800f790 <ucdr_advance_buffer>
 8013960:	4628      	mov	r0, r5
 8013962:	b003      	add	sp, #12
 8013964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013966:	bf00      	nop

08013968 <_String__get_serialized_size>:
 8013968:	b510      	push	{r4, lr}
 801396a:	4604      	mov	r4, r0
 801396c:	b130      	cbz	r0, 801397c <_String__get_serialized_size+0x14>
 801396e:	2104      	movs	r1, #4
 8013970:	2000      	movs	r0, #0
 8013972:	f7fb febd 	bl	800f6f0 <ucdr_alignment>
 8013976:	6863      	ldr	r3, [r4, #4]
 8013978:	3305      	adds	r3, #5
 801397a:	4418      	add	r0, r3
 801397c:	bd10      	pop	{r4, pc}
 801397e:	bf00      	nop

08013980 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8013980:	4800      	ldr	r0, [pc, #0]	; (8013984 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8013982:	4770      	bx	lr
 8013984:	20000454 	.word	0x20000454

08013988 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 8013988:	3800      	subs	r0, #0
 801398a:	bf18      	it	ne
 801398c:	2001      	movne	r0, #1
 801398e:	4770      	bx	lr

08013990 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 8013990:	4770      	bx	lr
 8013992:	bf00      	nop

08013994 <custom_test_msgs__srv__AddThreeInts_Response__init>:
 8013994:	3800      	subs	r0, #0
 8013996:	bf18      	it	ne
 8013998:	2001      	movne	r0, #1
 801399a:	4770      	bx	lr

0801399c <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 801399c:	4770      	bx	lr
 801399e:	bf00      	nop

080139a0 <drive_msgs__msg__DiffDrive__init>:
 80139a0:	b538      	push	{r3, r4, r5, lr}
 80139a2:	4604      	mov	r4, r0
 80139a4:	b128      	cbz	r0, 80139b2 <drive_msgs__msg__DiffDrive__init+0x12>
 80139a6:	f7ff fe71 	bl	801368c <rosidl_runtime_c__String__init>
 80139aa:	4605      	mov	r5, r0
 80139ac:	b120      	cbz	r0, 80139b8 <drive_msgs__msg__DiffDrive__init+0x18>
 80139ae:	4628      	mov	r0, r5
 80139b0:	bd38      	pop	{r3, r4, r5, pc}
 80139b2:	4605      	mov	r5, r0
 80139b4:	4628      	mov	r0, r5
 80139b6:	bd38      	pop	{r3, r4, r5, pc}
 80139b8:	4620      	mov	r0, r4
 80139ba:	f7ff fe7d 	bl	80136b8 <rosidl_runtime_c__String__fini>
 80139be:	4628      	mov	r0, r5
 80139c0:	bd38      	pop	{r3, r4, r5, pc}
 80139c2:	bf00      	nop

080139c4 <drive_msgs__msg__DiffDrive__fini>:
 80139c4:	b108      	cbz	r0, 80139ca <drive_msgs__msg__DiffDrive__fini+0x6>
 80139c6:	f7ff be77 	b.w	80136b8 <rosidl_runtime_c__String__fini>
 80139ca:	4770      	bx	lr

080139cc <ucdr_serialize_endian_array_char>:
 80139cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139d0:	4619      	mov	r1, r3
 80139d2:	461f      	mov	r7, r3
 80139d4:	4605      	mov	r5, r0
 80139d6:	4690      	mov	r8, r2
 80139d8:	f7fb fe32 	bl	800f640 <ucdr_check_buffer_available_for>
 80139dc:	b9e0      	cbnz	r0, 8013a18 <ucdr_serialize_endian_array_char+0x4c>
 80139de:	463e      	mov	r6, r7
 80139e0:	e00b      	b.n	80139fa <ucdr_serialize_endian_array_char+0x2e>
 80139e2:	4441      	add	r1, r8
 80139e4:	68a8      	ldr	r0, [r5, #8]
 80139e6:	4622      	mov	r2, r4
 80139e8:	1b36      	subs	r6, r6, r4
 80139ea:	f008 fdd8 	bl	801c59e <memcpy>
 80139ee:	68ab      	ldr	r3, [r5, #8]
 80139f0:	6928      	ldr	r0, [r5, #16]
 80139f2:	4423      	add	r3, r4
 80139f4:	4420      	add	r0, r4
 80139f6:	60ab      	str	r3, [r5, #8]
 80139f8:	6128      	str	r0, [r5, #16]
 80139fa:	4631      	mov	r1, r6
 80139fc:	2201      	movs	r2, #1
 80139fe:	4628      	mov	r0, r5
 8013a00:	f7fb fea8 	bl	800f754 <ucdr_check_final_buffer_behavior_array>
 8013a04:	1bb9      	subs	r1, r7, r6
 8013a06:	4604      	mov	r4, r0
 8013a08:	2800      	cmp	r0, #0
 8013a0a:	d1ea      	bne.n	80139e2 <ucdr_serialize_endian_array_char+0x16>
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	7da8      	ldrb	r0, [r5, #22]
 8013a10:	756b      	strb	r3, [r5, #21]
 8013a12:	4058      	eors	r0, r3
 8013a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a18:	463a      	mov	r2, r7
 8013a1a:	4641      	mov	r1, r8
 8013a1c:	68a8      	ldr	r0, [r5, #8]
 8013a1e:	f008 fdbe 	bl	801c59e <memcpy>
 8013a22:	68aa      	ldr	r2, [r5, #8]
 8013a24:	692b      	ldr	r3, [r5, #16]
 8013a26:	443a      	add	r2, r7
 8013a28:	443b      	add	r3, r7
 8013a2a:	60aa      	str	r2, [r5, #8]
 8013a2c:	612b      	str	r3, [r5, #16]
 8013a2e:	e7ed      	b.n	8013a0c <ucdr_serialize_endian_array_char+0x40>

08013a30 <ucdr_deserialize_endian_array_char>:
 8013a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a34:	4619      	mov	r1, r3
 8013a36:	461f      	mov	r7, r3
 8013a38:	4605      	mov	r5, r0
 8013a3a:	4690      	mov	r8, r2
 8013a3c:	f7fb fe00 	bl	800f640 <ucdr_check_buffer_available_for>
 8013a40:	b9e8      	cbnz	r0, 8013a7e <ucdr_deserialize_endian_array_char+0x4e>
 8013a42:	463e      	mov	r6, r7
 8013a44:	e00c      	b.n	8013a60 <ucdr_deserialize_endian_array_char+0x30>
 8013a46:	eb08 0003 	add.w	r0, r8, r3
 8013a4a:	68a9      	ldr	r1, [r5, #8]
 8013a4c:	4622      	mov	r2, r4
 8013a4e:	1b36      	subs	r6, r6, r4
 8013a50:	f008 fda5 	bl	801c59e <memcpy>
 8013a54:	68ab      	ldr	r3, [r5, #8]
 8013a56:	6928      	ldr	r0, [r5, #16]
 8013a58:	4423      	add	r3, r4
 8013a5a:	4420      	add	r0, r4
 8013a5c:	60ab      	str	r3, [r5, #8]
 8013a5e:	6128      	str	r0, [r5, #16]
 8013a60:	4631      	mov	r1, r6
 8013a62:	2201      	movs	r2, #1
 8013a64:	4628      	mov	r0, r5
 8013a66:	f7fb fe75 	bl	800f754 <ucdr_check_final_buffer_behavior_array>
 8013a6a:	1bbb      	subs	r3, r7, r6
 8013a6c:	4604      	mov	r4, r0
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d1e9      	bne.n	8013a46 <ucdr_deserialize_endian_array_char+0x16>
 8013a72:	2301      	movs	r3, #1
 8013a74:	7da8      	ldrb	r0, [r5, #22]
 8013a76:	756b      	strb	r3, [r5, #21]
 8013a78:	4058      	eors	r0, r3
 8013a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a7e:	463a      	mov	r2, r7
 8013a80:	68a9      	ldr	r1, [r5, #8]
 8013a82:	4640      	mov	r0, r8
 8013a84:	f008 fd8b 	bl	801c59e <memcpy>
 8013a88:	68aa      	ldr	r2, [r5, #8]
 8013a8a:	692b      	ldr	r3, [r5, #16]
 8013a8c:	443a      	add	r2, r7
 8013a8e:	443b      	add	r3, r7
 8013a90:	60aa      	str	r2, [r5, #8]
 8013a92:	612b      	str	r3, [r5, #16]
 8013a94:	e7ed      	b.n	8013a72 <ucdr_deserialize_endian_array_char+0x42>
 8013a96:	bf00      	nop

08013a98 <ucdr_serialize_array_uint8_t>:
 8013a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a9c:	4688      	mov	r8, r1
 8013a9e:	4611      	mov	r1, r2
 8013aa0:	4617      	mov	r7, r2
 8013aa2:	4605      	mov	r5, r0
 8013aa4:	f7fb fdcc 	bl	800f640 <ucdr_check_buffer_available_for>
 8013aa8:	b9e0      	cbnz	r0, 8013ae4 <ucdr_serialize_array_uint8_t+0x4c>
 8013aaa:	463e      	mov	r6, r7
 8013aac:	e00b      	b.n	8013ac6 <ucdr_serialize_array_uint8_t+0x2e>
 8013aae:	4441      	add	r1, r8
 8013ab0:	68a8      	ldr	r0, [r5, #8]
 8013ab2:	4622      	mov	r2, r4
 8013ab4:	1b36      	subs	r6, r6, r4
 8013ab6:	f008 fd72 	bl	801c59e <memcpy>
 8013aba:	68ab      	ldr	r3, [r5, #8]
 8013abc:	6928      	ldr	r0, [r5, #16]
 8013abe:	4423      	add	r3, r4
 8013ac0:	4420      	add	r0, r4
 8013ac2:	60ab      	str	r3, [r5, #8]
 8013ac4:	6128      	str	r0, [r5, #16]
 8013ac6:	4631      	mov	r1, r6
 8013ac8:	2201      	movs	r2, #1
 8013aca:	4628      	mov	r0, r5
 8013acc:	f7fb fe42 	bl	800f754 <ucdr_check_final_buffer_behavior_array>
 8013ad0:	1bb9      	subs	r1, r7, r6
 8013ad2:	4604      	mov	r4, r0
 8013ad4:	2800      	cmp	r0, #0
 8013ad6:	d1ea      	bne.n	8013aae <ucdr_serialize_array_uint8_t+0x16>
 8013ad8:	2301      	movs	r3, #1
 8013ada:	7da8      	ldrb	r0, [r5, #22]
 8013adc:	756b      	strb	r3, [r5, #21]
 8013ade:	4058      	eors	r0, r3
 8013ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ae4:	463a      	mov	r2, r7
 8013ae6:	4641      	mov	r1, r8
 8013ae8:	68a8      	ldr	r0, [r5, #8]
 8013aea:	f008 fd58 	bl	801c59e <memcpy>
 8013aee:	68aa      	ldr	r2, [r5, #8]
 8013af0:	692b      	ldr	r3, [r5, #16]
 8013af2:	443a      	add	r2, r7
 8013af4:	443b      	add	r3, r7
 8013af6:	60aa      	str	r2, [r5, #8]
 8013af8:	612b      	str	r3, [r5, #16]
 8013afa:	e7ed      	b.n	8013ad8 <ucdr_serialize_array_uint8_t+0x40>

08013afc <ucdr_serialize_endian_array_uint8_t>:
 8013afc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b00:	4619      	mov	r1, r3
 8013b02:	461f      	mov	r7, r3
 8013b04:	4605      	mov	r5, r0
 8013b06:	4690      	mov	r8, r2
 8013b08:	f7fb fd9a 	bl	800f640 <ucdr_check_buffer_available_for>
 8013b0c:	b9e0      	cbnz	r0, 8013b48 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8013b0e:	463e      	mov	r6, r7
 8013b10:	e00b      	b.n	8013b2a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8013b12:	4441      	add	r1, r8
 8013b14:	68a8      	ldr	r0, [r5, #8]
 8013b16:	4622      	mov	r2, r4
 8013b18:	1b36      	subs	r6, r6, r4
 8013b1a:	f008 fd40 	bl	801c59e <memcpy>
 8013b1e:	68ab      	ldr	r3, [r5, #8]
 8013b20:	6928      	ldr	r0, [r5, #16]
 8013b22:	4423      	add	r3, r4
 8013b24:	4420      	add	r0, r4
 8013b26:	60ab      	str	r3, [r5, #8]
 8013b28:	6128      	str	r0, [r5, #16]
 8013b2a:	4631      	mov	r1, r6
 8013b2c:	2201      	movs	r2, #1
 8013b2e:	4628      	mov	r0, r5
 8013b30:	f7fb fe10 	bl	800f754 <ucdr_check_final_buffer_behavior_array>
 8013b34:	1bb9      	subs	r1, r7, r6
 8013b36:	4604      	mov	r4, r0
 8013b38:	2800      	cmp	r0, #0
 8013b3a:	d1ea      	bne.n	8013b12 <ucdr_serialize_endian_array_uint8_t+0x16>
 8013b3c:	2301      	movs	r3, #1
 8013b3e:	7da8      	ldrb	r0, [r5, #22]
 8013b40:	756b      	strb	r3, [r5, #21]
 8013b42:	4058      	eors	r0, r3
 8013b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b48:	463a      	mov	r2, r7
 8013b4a:	4641      	mov	r1, r8
 8013b4c:	68a8      	ldr	r0, [r5, #8]
 8013b4e:	f008 fd26 	bl	801c59e <memcpy>
 8013b52:	68aa      	ldr	r2, [r5, #8]
 8013b54:	692b      	ldr	r3, [r5, #16]
 8013b56:	443a      	add	r2, r7
 8013b58:	443b      	add	r3, r7
 8013b5a:	60aa      	str	r2, [r5, #8]
 8013b5c:	612b      	str	r3, [r5, #16]
 8013b5e:	e7ed      	b.n	8013b3c <ucdr_serialize_endian_array_uint8_t+0x40>

08013b60 <ucdr_deserialize_array_uint8_t>:
 8013b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b64:	4688      	mov	r8, r1
 8013b66:	4611      	mov	r1, r2
 8013b68:	4617      	mov	r7, r2
 8013b6a:	4605      	mov	r5, r0
 8013b6c:	f7fb fd68 	bl	800f640 <ucdr_check_buffer_available_for>
 8013b70:	b9e8      	cbnz	r0, 8013bae <ucdr_deserialize_array_uint8_t+0x4e>
 8013b72:	463e      	mov	r6, r7
 8013b74:	e00c      	b.n	8013b90 <ucdr_deserialize_array_uint8_t+0x30>
 8013b76:	eb08 0003 	add.w	r0, r8, r3
 8013b7a:	68a9      	ldr	r1, [r5, #8]
 8013b7c:	4622      	mov	r2, r4
 8013b7e:	1b36      	subs	r6, r6, r4
 8013b80:	f008 fd0d 	bl	801c59e <memcpy>
 8013b84:	68ab      	ldr	r3, [r5, #8]
 8013b86:	6928      	ldr	r0, [r5, #16]
 8013b88:	4423      	add	r3, r4
 8013b8a:	4420      	add	r0, r4
 8013b8c:	60ab      	str	r3, [r5, #8]
 8013b8e:	6128      	str	r0, [r5, #16]
 8013b90:	4631      	mov	r1, r6
 8013b92:	2201      	movs	r2, #1
 8013b94:	4628      	mov	r0, r5
 8013b96:	f7fb fddd 	bl	800f754 <ucdr_check_final_buffer_behavior_array>
 8013b9a:	1bbb      	subs	r3, r7, r6
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	2800      	cmp	r0, #0
 8013ba0:	d1e9      	bne.n	8013b76 <ucdr_deserialize_array_uint8_t+0x16>
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	7da8      	ldrb	r0, [r5, #22]
 8013ba6:	756b      	strb	r3, [r5, #21]
 8013ba8:	4058      	eors	r0, r3
 8013baa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bae:	463a      	mov	r2, r7
 8013bb0:	68a9      	ldr	r1, [r5, #8]
 8013bb2:	4640      	mov	r0, r8
 8013bb4:	f008 fcf3 	bl	801c59e <memcpy>
 8013bb8:	68aa      	ldr	r2, [r5, #8]
 8013bba:	692b      	ldr	r3, [r5, #16]
 8013bbc:	443a      	add	r2, r7
 8013bbe:	443b      	add	r3, r7
 8013bc0:	60aa      	str	r2, [r5, #8]
 8013bc2:	612b      	str	r3, [r5, #16]
 8013bc4:	e7ed      	b.n	8013ba2 <ucdr_deserialize_array_uint8_t+0x42>
 8013bc6:	bf00      	nop

08013bc8 <ucdr_deserialize_endian_array_uint8_t>:
 8013bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bcc:	4619      	mov	r1, r3
 8013bce:	461f      	mov	r7, r3
 8013bd0:	4605      	mov	r5, r0
 8013bd2:	4690      	mov	r8, r2
 8013bd4:	f7fb fd34 	bl	800f640 <ucdr_check_buffer_available_for>
 8013bd8:	b9e8      	cbnz	r0, 8013c16 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8013bda:	463e      	mov	r6, r7
 8013bdc:	e00c      	b.n	8013bf8 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8013bde:	eb08 0003 	add.w	r0, r8, r3
 8013be2:	68a9      	ldr	r1, [r5, #8]
 8013be4:	4622      	mov	r2, r4
 8013be6:	1b36      	subs	r6, r6, r4
 8013be8:	f008 fcd9 	bl	801c59e <memcpy>
 8013bec:	68ab      	ldr	r3, [r5, #8]
 8013bee:	6928      	ldr	r0, [r5, #16]
 8013bf0:	4423      	add	r3, r4
 8013bf2:	4420      	add	r0, r4
 8013bf4:	60ab      	str	r3, [r5, #8]
 8013bf6:	6128      	str	r0, [r5, #16]
 8013bf8:	4631      	mov	r1, r6
 8013bfa:	2201      	movs	r2, #1
 8013bfc:	4628      	mov	r0, r5
 8013bfe:	f7fb fda9 	bl	800f754 <ucdr_check_final_buffer_behavior_array>
 8013c02:	1bbb      	subs	r3, r7, r6
 8013c04:	4604      	mov	r4, r0
 8013c06:	2800      	cmp	r0, #0
 8013c08:	d1e9      	bne.n	8013bde <ucdr_deserialize_endian_array_uint8_t+0x16>
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	7da8      	ldrb	r0, [r5, #22]
 8013c0e:	756b      	strb	r3, [r5, #21]
 8013c10:	4058      	eors	r0, r3
 8013c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c16:	463a      	mov	r2, r7
 8013c18:	68a9      	ldr	r1, [r5, #8]
 8013c1a:	4640      	mov	r0, r8
 8013c1c:	f008 fcbf 	bl	801c59e <memcpy>
 8013c20:	68aa      	ldr	r2, [r5, #8]
 8013c22:	692b      	ldr	r3, [r5, #16]
 8013c24:	443a      	add	r2, r7
 8013c26:	443b      	add	r3, r7
 8013c28:	60aa      	str	r2, [r5, #8]
 8013c2a:	612b      	str	r3, [r5, #16]
 8013c2c:	e7ed      	b.n	8013c0a <ucdr_deserialize_endian_array_uint8_t+0x42>
 8013c2e:	bf00      	nop

08013c30 <uxr_buffer_delete_entity>:
 8013c30:	b510      	push	{r4, lr}
 8013c32:	2300      	movs	r3, #0
 8013c34:	b08e      	sub	sp, #56	; 0x38
 8013c36:	4604      	mov	r4, r0
 8013c38:	9103      	str	r1, [sp, #12]
 8013c3a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8013c3e:	2303      	movs	r3, #3
 8013c40:	2204      	movs	r2, #4
 8013c42:	9300      	str	r3, [sp, #0]
 8013c44:	ab06      	add	r3, sp, #24
 8013c46:	f001 fb77 	bl	8015338 <uxr_prepare_stream_to_write_submessage>
 8013c4a:	b918      	cbnz	r0, 8013c54 <uxr_buffer_delete_entity+0x24>
 8013c4c:	4604      	mov	r4, r0
 8013c4e:	4620      	mov	r0, r4
 8013c50:	b00e      	add	sp, #56	; 0x38
 8013c52:	bd10      	pop	{r4, pc}
 8013c54:	9902      	ldr	r1, [sp, #8]
 8013c56:	aa05      	add	r2, sp, #20
 8013c58:	4620      	mov	r0, r4
 8013c5a:	f001 fca9 	bl	80155b0 <uxr_init_base_object_request>
 8013c5e:	4604      	mov	r4, r0
 8013c60:	a905      	add	r1, sp, #20
 8013c62:	a806      	add	r0, sp, #24
 8013c64:	f003 fbae 	bl	80173c4 <uxr_serialize_DELETE_Payload>
 8013c68:	4620      	mov	r0, r4
 8013c6a:	b00e      	add	sp, #56	; 0x38
 8013c6c:	bd10      	pop	{r4, pc}
 8013c6e:	bf00      	nop

08013c70 <uxr_common_create_entity>:
 8013c70:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013c74:	b510      	push	{r4, lr}
 8013c76:	f1bc 0f01 	cmp.w	ip, #1
 8013c7a:	b08c      	sub	sp, #48	; 0x30
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	9202      	str	r2, [sp, #8]
 8013c80:	bf0c      	ite	eq
 8013c82:	f003 0201 	andeq.w	r2, r3, #1
 8013c86:	2200      	movne	r2, #0
 8013c88:	330e      	adds	r3, #14
 8013c8a:	9103      	str	r1, [sp, #12]
 8013c8c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8013c90:	441a      	add	r2, r3
 8013c92:	ab04      	add	r3, sp, #16
 8013c94:	9101      	str	r1, [sp, #4]
 8013c96:	2101      	movs	r1, #1
 8013c98:	b292      	uxth	r2, r2
 8013c9a:	9100      	str	r1, [sp, #0]
 8013c9c:	9903      	ldr	r1, [sp, #12]
 8013c9e:	f001 fb4b 	bl	8015338 <uxr_prepare_stream_to_write_submessage>
 8013ca2:	b918      	cbnz	r0, 8013cac <uxr_common_create_entity+0x3c>
 8013ca4:	4604      	mov	r4, r0
 8013ca6:	4620      	mov	r0, r4
 8013ca8:	b00c      	add	sp, #48	; 0x30
 8013caa:	bd10      	pop	{r4, pc}
 8013cac:	9902      	ldr	r1, [sp, #8]
 8013cae:	4620      	mov	r0, r4
 8013cb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013cb2:	f001 fc7d 	bl	80155b0 <uxr_init_base_object_request>
 8013cb6:	4604      	mov	r4, r0
 8013cb8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013cba:	a804      	add	r0, sp, #16
 8013cbc:	f003 fadc 	bl	8017278 <uxr_serialize_CREATE_Payload>
 8013cc0:	4620      	mov	r0, r4
 8013cc2:	b00c      	add	sp, #48	; 0x30
 8013cc4:	bd10      	pop	{r4, pc}
 8013cc6:	bf00      	nop

08013cc8 <uxr_buffer_create_participant_bin>:
 8013cc8:	b570      	push	{r4, r5, r6, lr}
 8013cca:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8013cce:	4605      	mov	r5, r0
 8013cd0:	ac11      	add	r4, sp, #68	; 0x44
 8013cd2:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 8013cd6:	2303      	movs	r3, #3
 8013cd8:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 8013cdc:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013ce0:	7223      	strb	r3, [r4, #8]
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	f88d 3014 	strb.w	r3, [sp, #20]
 8013cea:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 8013cec:	7122      	strb	r2, [r4, #4]
 8013cee:	b1cb      	cbz	r3, 8013d24 <uxr_buffer_create_participant_bin+0x5c>
 8013cf0:	f88d 201c 	strb.w	r2, [sp, #28]
 8013cf4:	9308      	str	r3, [sp, #32]
 8013cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013cfa:	a915      	add	r1, sp, #84	; 0x54
 8013cfc:	a809      	add	r0, sp, #36	; 0x24
 8013cfe:	f7fb fcf3 	bl	800f6e8 <ucdr_init_buffer>
 8013d02:	a905      	add	r1, sp, #20
 8013d04:	a809      	add	r0, sp, #36	; 0x24
 8013d06:	f002 fe6d 	bl	80169e4 <uxr_serialize_OBJK_DomainParticipant_Binary>
 8013d0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d0c:	9600      	str	r6, [sp, #0]
 8013d0e:	4628      	mov	r0, r5
 8013d10:	9401      	str	r4, [sp, #4]
 8013d12:	60e3      	str	r3, [r4, #12]
 8013d14:	b29b      	uxth	r3, r3
 8013d16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013d1a:	f7ff ffa9 	bl	8013c70 <uxr_common_create_entity>
 8013d1e:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 8013d22:	bd70      	pop	{r4, r5, r6, pc}
 8013d24:	f88d 301c 	strb.w	r3, [sp, #28]
 8013d28:	e7e5      	b.n	8013cf6 <uxr_buffer_create_participant_bin+0x2e>
 8013d2a:	bf00      	nop

08013d2c <uxr_buffer_create_topic_bin>:
 8013d2c:	b570      	push	{r4, r5, r6, lr}
 8013d2e:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8013d32:	4605      	mov	r5, r0
 8013d34:	4618      	mov	r0, r3
 8013d36:	9105      	str	r1, [sp, #20]
 8013d38:	a997      	add	r1, sp, #604	; 0x25c
 8013d3a:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8013d3e:	ac13      	add	r4, sp, #76	; 0x4c
 8013d40:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013d44:	2302      	movs	r3, #2
 8013d46:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8013d4a:	f000 fa8d 	bl	8014268 <uxr_object_id_to_raw>
 8013d4e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8013d50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d54:	a917      	add	r1, sp, #92	; 0x5c
 8013d56:	a80b      	add	r0, sp, #44	; 0x2c
 8013d58:	9306      	str	r3, [sp, #24]
 8013d5a:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8013d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8013d5e:	2303      	movs	r3, #3
 8013d60:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013d64:	2301      	movs	r3, #1
 8013d66:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	f88d 301c 	strb.w	r3, [sp, #28]
 8013d70:	f7fb fcba 	bl	800f6e8 <ucdr_init_buffer>
 8013d74:	a906      	add	r1, sp, #24
 8013d76:	a80b      	add	r0, sp, #44	; 0x2c
 8013d78:	f002 fe56 	bl	8016a28 <uxr_serialize_OBJK_Topic_Binary>
 8013d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013d7e:	4628      	mov	r0, r5
 8013d80:	9600      	str	r6, [sp, #0]
 8013d82:	9316      	str	r3, [sp, #88]	; 0x58
 8013d84:	b29b      	uxth	r3, r3
 8013d86:	9401      	str	r4, [sp, #4]
 8013d88:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013d8c:	f7ff ff70 	bl	8013c70 <uxr_common_create_entity>
 8013d90:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 8013d94:	bd70      	pop	{r4, r5, r6, pc}
 8013d96:	bf00      	nop

08013d98 <uxr_buffer_create_publisher_bin>:
 8013d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d9a:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8013d9e:	2603      	movs	r6, #3
 8013da0:	4605      	mov	r5, r0
 8013da2:	4618      	mov	r0, r3
 8013da4:	9105      	str	r1, [sp, #20]
 8013da6:	a992      	add	r1, sp, #584	; 0x248
 8013da8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8013dac:	ac0e      	add	r4, sp, #56	; 0x38
 8013dae:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 8013db2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013db6:	f000 fa57 	bl	8014268 <uxr_object_id_to_raw>
 8013dba:	2300      	movs	r3, #0
 8013dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013dc0:	a912      	add	r1, sp, #72	; 0x48
 8013dc2:	a806      	add	r0, sp, #24
 8013dc4:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8013dc8:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8013dcc:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 8013dd0:	f7fb fc8a 	bl	800f6e8 <ucdr_init_buffer>
 8013dd4:	a993      	add	r1, sp, #588	; 0x24c
 8013dd6:	a806      	add	r0, sp, #24
 8013dd8:	f002 feda 	bl	8016b90 <uxr_serialize_OBJK_Publisher_Binary>
 8013ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013dde:	4628      	mov	r0, r5
 8013de0:	9700      	str	r7, [sp, #0]
 8013de2:	9311      	str	r3, [sp, #68]	; 0x44
 8013de4:	b29b      	uxth	r3, r3
 8013de6:	9401      	str	r4, [sp, #4]
 8013de8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013dec:	f7ff ff40 	bl	8013c70 <uxr_common_create_entity>
 8013df0:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 8013df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013df6:	bf00      	nop

08013df8 <uxr_buffer_create_subscriber_bin>:
 8013df8:	b570      	push	{r4, r5, r6, lr}
 8013dfa:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 8013dfe:	4605      	mov	r5, r0
 8013e00:	4618      	mov	r0, r3
 8013e02:	9105      	str	r1, [sp, #20]
 8013e04:	a992      	add	r1, sp, #584	; 0x248
 8013e06:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 8013e0a:	ac0e      	add	r4, sp, #56	; 0x38
 8013e0c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013e10:	2304      	movs	r3, #4
 8013e12:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 8013e16:	f000 fa27 	bl	8014268 <uxr_object_id_to_raw>
 8013e1a:	2300      	movs	r3, #0
 8013e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e20:	a912      	add	r1, sp, #72	; 0x48
 8013e22:	a806      	add	r0, sp, #24
 8013e24:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8013e28:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8013e2c:	2303      	movs	r3, #3
 8013e2e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8013e32:	f7fb fc59 	bl	800f6e8 <ucdr_init_buffer>
 8013e36:	a993      	add	r1, sp, #588	; 0x24c
 8013e38:	a806      	add	r0, sp, #24
 8013e3a:	f002 ff59 	bl	8016cf0 <uxr_serialize_OBJK_Subscriber_Binary>
 8013e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013e40:	4628      	mov	r0, r5
 8013e42:	9600      	str	r6, [sp, #0]
 8013e44:	9311      	str	r3, [sp, #68]	; 0x44
 8013e46:	b29b      	uxth	r3, r3
 8013e48:	9401      	str	r4, [sp, #4]
 8013e4a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013e4e:	f7ff ff0f 	bl	8013c70 <uxr_common_create_entity>
 8013e52:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 8013e56:	bd70      	pop	{r4, r5, r6, pc}

08013e58 <uxr_buffer_create_datawriter_bin>:
 8013e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5c:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013e60:	4606      	mov	r6, r0
 8013e62:	4618      	mov	r0, r3
 8013e64:	2703      	movs	r7, #3
 8013e66:	ac1d      	add	r4, sp, #116	; 0x74
 8013e68:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8013e6c:	9105      	str	r1, [sp, #20]
 8013e6e:	a9a1      	add	r1, sp, #644	; 0x284
 8013e70:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 8013e74:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013e78:	2305      	movs	r3, #5
 8013e7a:	7123      	strb	r3, [r4, #4]
 8013e7c:	f000 f9f4 	bl	8014268 <uxr_object_id_to_raw>
 8013e80:	a90e      	add	r1, sp, #56	; 0x38
 8013e82:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 8013e84:	7227      	strb	r7, [r4, #8]
 8013e86:	f000 f9ef 	bl	8014268 <uxr_object_id_to_raw>
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8013e90:	3d00      	subs	r5, #0
 8013e92:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 8013e96:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8013e9a:	bf18      	it	ne
 8013e9c:	2501      	movne	r5, #1
 8013e9e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8013ea2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8013ea6:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013eaa:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013eae:	2301      	movs	r3, #1
 8013eb0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8013eb4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013eb8:	bb8a      	cbnz	r2, 8013f1e <uxr_buffer_create_datawriter_bin+0xc6>
 8013eba:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8013ebe:	f04f 0c13 	mov.w	ip, #19
 8013ec2:	250b      	movs	r5, #11
 8013ec4:	2221      	movs	r2, #33	; 0x21
 8013ec6:	2111      	movs	r1, #17
 8013ec8:	2009      	movs	r0, #9
 8013eca:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013ece:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 8013ed2:	b923      	cbnz	r3, 8013ede <uxr_buffer_create_datawriter_bin+0x86>
 8013ed4:	4672      	mov	r2, lr
 8013ed6:	4661      	mov	r1, ip
 8013ed8:	4628      	mov	r0, r5
 8013eda:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8013ede:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 8013ee2:	2b01      	cmp	r3, #1
 8013ee4:	d025      	beq.n	8013f32 <uxr_buffer_create_datawriter_bin+0xda>
 8013ee6:	2b03      	cmp	r3, #3
 8013ee8:	d029      	beq.n	8013f3e <uxr_buffer_create_datawriter_bin+0xe6>
 8013eea:	b32b      	cbz	r3, 8013f38 <uxr_buffer_create_datawriter_bin+0xe0>
 8013eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013ef0:	a921      	add	r1, sp, #132	; 0x84
 8013ef2:	a806      	add	r0, sp, #24
 8013ef4:	f7fb fbf8 	bl	800f6e8 <ucdr_init_buffer>
 8013ef8:	a90e      	add	r1, sp, #56	; 0x38
 8013efa:	a806      	add	r0, sp, #24
 8013efc:	f002 ffaa 	bl	8016e54 <uxr_serialize_OBJK_DataWriter_Binary>
 8013f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013f02:	f8cd 8000 	str.w	r8, [sp]
 8013f06:	4630      	mov	r0, r6
 8013f08:	9401      	str	r4, [sp, #4]
 8013f0a:	60e3      	str	r3, [r4, #12]
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013f12:	f7ff fead 	bl	8013c70 <uxr_common_create_entity>
 8013f16:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f1e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8013f22:	f04f 0c12 	mov.w	ip, #18
 8013f26:	250a      	movs	r5, #10
 8013f28:	2220      	movs	r2, #32
 8013f2a:	2110      	movs	r1, #16
 8013f2c:	2008      	movs	r0, #8
 8013f2e:	2702      	movs	r7, #2
 8013f30:	e7cd      	b.n	8013ece <uxr_buffer_create_datawriter_bin+0x76>
 8013f32:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8013f36:	e7d9      	b.n	8013eec <uxr_buffer_create_datawriter_bin+0x94>
 8013f38:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8013f3c:	e7d6      	b.n	8013eec <uxr_buffer_create_datawriter_bin+0x94>
 8013f3e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8013f42:	e7d3      	b.n	8013eec <uxr_buffer_create_datawriter_bin+0x94>

08013f44 <uxr_buffer_create_datareader_bin>:
 8013f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f48:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8013f4c:	4606      	mov	r6, r0
 8013f4e:	4618      	mov	r0, r3
 8013f50:	2703      	movs	r7, #3
 8013f52:	ac1f      	add	r4, sp, #124	; 0x7c
 8013f54:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8013f58:	9105      	str	r1, [sp, #20]
 8013f5a:	a9a3      	add	r1, sp, #652	; 0x28c
 8013f5c:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8013f60:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013f64:	2306      	movs	r3, #6
 8013f66:	7123      	strb	r3, [r4, #4]
 8013f68:	f000 f97e 	bl	8014268 <uxr_object_id_to_raw>
 8013f6c:	a90e      	add	r1, sp, #56	; 0x38
 8013f6e:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8013f70:	7227      	strb	r7, [r4, #8]
 8013f72:	f000 f979 	bl	8014268 <uxr_object_id_to_raw>
 8013f76:	2300      	movs	r3, #0
 8013f78:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8013f7c:	3d00      	subs	r5, #0
 8013f7e:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 8013f82:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8013f86:	bf18      	it	ne
 8013f88:	2501      	movne	r5, #1
 8013f8a:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8013f8e:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 8013f92:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 8013f96:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013f9a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 8013fa4:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013fa8:	bb8a      	cbnz	r2, 801400e <uxr_buffer_create_datareader_bin+0xca>
 8013faa:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8013fae:	f04f 0c13 	mov.w	ip, #19
 8013fb2:	250b      	movs	r5, #11
 8013fb4:	2221      	movs	r2, #33	; 0x21
 8013fb6:	2111      	movs	r1, #17
 8013fb8:	2009      	movs	r0, #9
 8013fba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013fbe:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 8013fc2:	b923      	cbnz	r3, 8013fce <uxr_buffer_create_datareader_bin+0x8a>
 8013fc4:	4672      	mov	r2, lr
 8013fc6:	4661      	mov	r1, ip
 8013fc8:	4628      	mov	r0, r5
 8013fca:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 8013fce:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 8013fd2:	2b01      	cmp	r3, #1
 8013fd4:	d025      	beq.n	8014022 <uxr_buffer_create_datareader_bin+0xde>
 8013fd6:	2b03      	cmp	r3, #3
 8013fd8:	d029      	beq.n	801402e <uxr_buffer_create_datareader_bin+0xea>
 8013fda:	b32b      	cbz	r3, 8014028 <uxr_buffer_create_datareader_bin+0xe4>
 8013fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013fe0:	a923      	add	r1, sp, #140	; 0x8c
 8013fe2:	a806      	add	r0, sp, #24
 8013fe4:	f7fb fb80 	bl	800f6e8 <ucdr_init_buffer>
 8013fe8:	a90e      	add	r1, sp, #56	; 0x38
 8013fea:	a806      	add	r0, sp, #24
 8013fec:	f002 fef6 	bl	8016ddc <uxr_serialize_OBJK_DataReader_Binary>
 8013ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ff2:	f8cd 8000 	str.w	r8, [sp]
 8013ff6:	4630      	mov	r0, r6
 8013ff8:	9401      	str	r4, [sp, #4]
 8013ffa:	60e3      	str	r3, [r4, #12]
 8013ffc:	b29b      	uxth	r3, r3
 8013ffe:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8014002:	f7ff fe35 	bl	8013c70 <uxr_common_create_entity>
 8014006:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801400a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801400e:	f04f 0e22 	mov.w	lr, #34	; 0x22
 8014012:	f04f 0c12 	mov.w	ip, #18
 8014016:	250a      	movs	r5, #10
 8014018:	2220      	movs	r2, #32
 801401a:	2110      	movs	r1, #16
 801401c:	2008      	movs	r0, #8
 801401e:	2702      	movs	r7, #2
 8014020:	e7cd      	b.n	8013fbe <uxr_buffer_create_datareader_bin+0x7a>
 8014022:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 8014026:	e7d9      	b.n	8013fdc <uxr_buffer_create_datareader_bin+0x98>
 8014028:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 801402c:	e7d6      	b.n	8013fdc <uxr_buffer_create_datareader_bin+0x98>
 801402e:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8014032:	e7d3      	b.n	8013fdc <uxr_buffer_create_datareader_bin+0x98>

08014034 <uxr_buffer_create_replier_bin>:
 8014034:	b570      	push	{r4, r5, r6, lr}
 8014036:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 801403a:	4605      	mov	r5, r0
 801403c:	4618      	mov	r0, r3
 801403e:	9105      	str	r1, [sp, #20]
 8014040:	a999      	add	r1, sp, #612	; 0x264
 8014042:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 8014046:	ac15      	add	r4, sp, #84	; 0x54
 8014048:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801404c:	2308      	movs	r3, #8
 801404e:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 8014052:	f000 f909 	bl	8014268 <uxr_object_id_to_raw>
 8014056:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8014058:	f44f 7200 	mov.w	r2, #512	; 0x200
 801405c:	a919      	add	r1, sp, #100	; 0x64
 801405e:	a80d      	add	r0, sp, #52	; 0x34
 8014060:	9306      	str	r3, [sp, #24]
 8014062:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 8014064:	9307      	str	r3, [sp, #28]
 8014066:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8014068:	9308      	str	r3, [sp, #32]
 801406a:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 801406c:	930c      	str	r3, [sp, #48]	; 0x30
 801406e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014070:	930a      	str	r3, [sp, #40]	; 0x28
 8014072:	2301      	movs	r3, #1
 8014074:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014078:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801407c:	2303      	movs	r3, #3
 801407e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 8014082:	f7fb fb31 	bl	800f6e8 <ucdr_init_buffer>
 8014086:	a906      	add	r1, sp, #24
 8014088:	a80d      	add	r0, sp, #52	; 0x34
 801408a:	f002 ff0f 	bl	8016eac <uxr_serialize_OBJK_Replier_Binary>
 801408e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014090:	4628      	mov	r0, r5
 8014092:	9600      	str	r6, [sp, #0]
 8014094:	9318      	str	r3, [sp, #96]	; 0x60
 8014096:	b29b      	uxth	r3, r3
 8014098:	9401      	str	r4, [sp, #4]
 801409a:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801409e:	f7ff fde7 	bl	8013c70 <uxr_common_create_entity>
 80140a2:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 80140a6:	bd70      	pop	{r4, r5, r6, pc}

080140a8 <get_custom_error>:
 80140a8:	4b01      	ldr	r3, [pc, #4]	; (80140b0 <get_custom_error+0x8>)
 80140aa:	7818      	ldrb	r0, [r3, #0]
 80140ac:	4770      	bx	lr
 80140ae:	bf00      	nop
 80140b0:	200129dc 	.word	0x200129dc

080140b4 <recv_custom_msg>:
 80140b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140b8:	4693      	mov	fp, r2
 80140ba:	b089      	sub	sp, #36	; 0x24
 80140bc:	2200      	movs	r2, #0
 80140be:	4604      	mov	r4, r0
 80140c0:	468a      	mov	sl, r1
 80140c2:	9305      	str	r3, [sp, #20]
 80140c4:	f88d 201e 	strb.w	r2, [sp, #30]
 80140c8:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 80140cc:	b322      	cbz	r2, 8014118 <recv_custom_msg+0x64>
 80140ce:	f200 2902 	addw	r9, r0, #514	; 0x202
 80140d2:	f10d 081f 	add.w	r8, sp, #31
 80140d6:	af05      	add	r7, sp, #20
 80140d8:	f10d 061e 	add.w	r6, sp, #30
 80140dc:	f44f 7500 	mov.w	r5, #512	; 0x200
 80140e0:	e002      	b.n	80140e8 <recv_custom_msg+0x34>
 80140e2:	9b05      	ldr	r3, [sp, #20]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	dd0f      	ble.n	8014108 <recv_custom_msg+0x54>
 80140e8:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80140ec:	4623      	mov	r3, r4
 80140ee:	4622      	mov	r2, r4
 80140f0:	4648      	mov	r0, r9
 80140f2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80140f6:	e9cd 5600 	strd	r5, r6, [sp]
 80140fa:	f001 fc6f 	bl	80159dc <uxr_read_framed_msg>
 80140fe:	2800      	cmp	r0, #0
 8014100:	d0ef      	beq.n	80140e2 <recv_custom_msg+0x2e>
 8014102:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014106:	b1b3      	cbz	r3, 8014136 <recv_custom_msg+0x82>
 8014108:	4b0f      	ldr	r3, [pc, #60]	; (8014148 <recv_custom_msg+0x94>)
 801410a:	2000      	movs	r0, #0
 801410c:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8014110:	701a      	strb	r2, [r3, #0]
 8014112:	b009      	add	sp, #36	; 0x24
 8014114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014118:	f10d 021f 	add.w	r2, sp, #31
 801411c:	4601      	mov	r1, r0
 801411e:	9200      	str	r2, [sp, #0]
 8014120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014124:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8014128:	47a8      	blx	r5
 801412a:	2800      	cmp	r0, #0
 801412c:	d0ec      	beq.n	8014108 <recv_custom_msg+0x54>
 801412e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d1e8      	bne.n	8014108 <recv_custom_msg+0x54>
 8014136:	f8cb 0000 	str.w	r0, [fp]
 801413a:	2001      	movs	r0, #1
 801413c:	f8ca 4000 	str.w	r4, [sl]
 8014140:	b009      	add	sp, #36	; 0x24
 8014142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014146:	bf00      	nop
 8014148:	200129dc 	.word	0x200129dc

0801414c <send_custom_msg>:
 801414c:	b530      	push	{r4, r5, lr}
 801414e:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 8014152:	b087      	sub	sp, #28
 8014154:	4614      	mov	r4, r2
 8014156:	b995      	cbnz	r5, 801417e <send_custom_msg+0x32>
 8014158:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 801415c:	f10d 0317 	add.w	r3, sp, #23
 8014160:	47a8      	blx	r5
 8014162:	1e03      	subs	r3, r0, #0
 8014164:	bf18      	it	ne
 8014166:	2301      	movne	r3, #1
 8014168:	42a0      	cmp	r0, r4
 801416a:	bf18      	it	ne
 801416c:	2300      	movne	r3, #0
 801416e:	b91b      	cbnz	r3, 8014178 <send_custom_msg+0x2c>
 8014170:	4a0a      	ldr	r2, [pc, #40]	; (801419c <send_custom_msg+0x50>)
 8014172:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8014176:	7011      	strb	r1, [r2, #0]
 8014178:	4618      	mov	r0, r3
 801417a:	b007      	add	sp, #28
 801417c:	bd30      	pop	{r4, r5, pc}
 801417e:	460b      	mov	r3, r1
 8014180:	2200      	movs	r2, #0
 8014182:	f10d 0117 	add.w	r1, sp, #23
 8014186:	9400      	str	r4, [sp, #0]
 8014188:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801418c:	4602      	mov	r2, r0
 801418e:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8014192:	f200 2002 	addw	r0, r0, #514	; 0x202
 8014196:	f001 fa43 	bl	8015620 <uxr_write_framed_msg>
 801419a:	e7e2      	b.n	8014162 <send_custom_msg+0x16>
 801419c:	200129dc 	.word	0x200129dc

080141a0 <uxr_set_custom_transport_callbacks>:
 80141a0:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 80141a4:	9901      	ldr	r1, [sp, #4]
 80141a6:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 80141aa:	9b00      	ldr	r3, [sp, #0]
 80141ac:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 80141b0:	4770      	bx	lr
 80141b2:	bf00      	nop

080141b4 <uxr_init_custom_transport>:
 80141b4:	b538      	push	{r3, r4, r5, lr}
 80141b6:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80141ba:	b303      	cbz	r3, 80141fe <uxr_init_custom_transport+0x4a>
 80141bc:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80141c0:	4604      	mov	r4, r0
 80141c2:	b1e2      	cbz	r2, 80141fe <uxr_init_custom_transport+0x4a>
 80141c4:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80141c8:	b1ca      	cbz	r2, 80141fe <uxr_init_custom_transport+0x4a>
 80141ca:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80141ce:	b1b2      	cbz	r2, 80141fe <uxr_init_custom_transport+0x4a>
 80141d0:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80141d4:	4798      	blx	r3
 80141d6:	4605      	mov	r5, r0
 80141d8:	b188      	cbz	r0, 80141fe <uxr_init_custom_transport+0x4a>
 80141da:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80141de:	b98b      	cbnz	r3, 8014204 <uxr_init_custom_transport+0x50>
 80141e0:	4b0b      	ldr	r3, [pc, #44]	; (8014210 <uxr_init_custom_transport+0x5c>)
 80141e2:	4628      	mov	r0, r5
 80141e4:	490b      	ldr	r1, [pc, #44]	; (8014214 <uxr_init_custom_transport+0x60>)
 80141e6:	4a0c      	ldr	r2, [pc, #48]	; (8014218 <uxr_init_custom_transport+0x64>)
 80141e8:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80141ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80141f0:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80141f4:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80141f8:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80141fc:	bd38      	pop	{r3, r4, r5, pc}
 80141fe:	2500      	movs	r5, #0
 8014200:	4628      	mov	r0, r5
 8014202:	bd38      	pop	{r3, r4, r5, pc}
 8014204:	2100      	movs	r1, #0
 8014206:	f204 2002 	addw	r0, r4, #514	; 0x202
 801420a:	f001 fa03 	bl	8015614 <uxr_init_framing_io>
 801420e:	e7e7      	b.n	80141e0 <uxr_init_custom_transport+0x2c>
 8014210:	080140b5 	.word	0x080140b5
 8014214:	0801414d 	.word	0x0801414d
 8014218:	080140a9 	.word	0x080140a9

0801421c <uxr_close_custom_transport>:
 801421c:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8014220:	4718      	bx	r3
 8014222:	bf00      	nop

08014224 <uxr_object_id>:
 8014224:	b082      	sub	sp, #8
 8014226:	2300      	movs	r3, #0
 8014228:	f88d 1006 	strb.w	r1, [sp, #6]
 801422c:	f360 030f 	bfi	r3, r0, #0, #16
 8014230:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8014234:	f362 431f 	bfi	r3, r2, #16, #16
 8014238:	4618      	mov	r0, r3
 801423a:	b002      	add	sp, #8
 801423c:	4770      	bx	lr
 801423e:	bf00      	nop

08014240 <uxr_object_id_from_raw>:
 8014240:	7843      	ldrb	r3, [r0, #1]
 8014242:	b082      	sub	sp, #8
 8014244:	7801      	ldrb	r1, [r0, #0]
 8014246:	2000      	movs	r0, #0
 8014248:	091a      	lsrs	r2, r3, #4
 801424a:	f003 030f 	and.w	r3, r3, #15
 801424e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8014252:	f88d 3006 	strb.w	r3, [sp, #6]
 8014256:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801425a:	f362 000f 	bfi	r0, r2, #0, #16
 801425e:	f363 401f 	bfi	r0, r3, #16, #16
 8014262:	b002      	add	sp, #8
 8014264:	4770      	bx	lr
 8014266:	bf00      	nop

08014268 <uxr_object_id_to_raw>:
 8014268:	4602      	mov	r2, r0
 801426a:	f3c0 4303 	ubfx	r3, r0, #16, #4
 801426e:	b082      	sub	sp, #8
 8014270:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 8014274:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8014278:	f881 c000 	strb.w	ip, [r1]
 801427c:	7048      	strb	r0, [r1, #1]
 801427e:	b002      	add	sp, #8
 8014280:	4770      	bx	lr
 8014282:	bf00      	nop

08014284 <uxr_buffer_request_data>:
 8014284:	b530      	push	{r4, r5, lr}
 8014286:	b095      	sub	sp, #84	; 0x54
 8014288:	4604      	mov	r4, r0
 801428a:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801428c:	9303      	str	r3, [sp, #12]
 801428e:	2d00      	cmp	r5, #0
 8014290:	f88d 301c 	strb.w	r3, [sp, #28]
 8014294:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8014298:	f04f 0200 	mov.w	r2, #0
 801429c:	bf14      	ite	ne
 801429e:	2101      	movne	r1, #1
 80142a0:	4611      	moveq	r1, r2
 80142a2:	f88d 201d 	strb.w	r2, [sp, #29]
 80142a6:	f88d 201e 	strb.w	r2, [sp, #30]
 80142aa:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80142ae:	d021      	beq.n	80142f4 <uxr_buffer_request_data+0x70>
 80142b0:	686b      	ldr	r3, [r5, #4]
 80142b2:	2210      	movs	r2, #16
 80142b4:	6829      	ldr	r1, [r5, #0]
 80142b6:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80142ba:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 80142be:	2308      	movs	r3, #8
 80142c0:	2100      	movs	r1, #0
 80142c2:	4620      	mov	r0, r4
 80142c4:	e9cd 3100 	strd	r3, r1, [sp]
 80142c8:	ab0c      	add	r3, sp, #48	; 0x30
 80142ca:	9905      	ldr	r1, [sp, #20]
 80142cc:	f001 f834 	bl	8015338 <uxr_prepare_stream_to_write_submessage>
 80142d0:	b918      	cbnz	r0, 80142da <uxr_buffer_request_data+0x56>
 80142d2:	4604      	mov	r4, r0
 80142d4:	4620      	mov	r0, r4
 80142d6:	b015      	add	sp, #84	; 0x54
 80142d8:	bd30      	pop	{r4, r5, pc}
 80142da:	9904      	ldr	r1, [sp, #16]
 80142dc:	aa06      	add	r2, sp, #24
 80142de:	4620      	mov	r0, r4
 80142e0:	f001 f966 	bl	80155b0 <uxr_init_base_object_request>
 80142e4:	4604      	mov	r4, r0
 80142e6:	a906      	add	r1, sp, #24
 80142e8:	a80c      	add	r0, sp, #48	; 0x30
 80142ea:	f003 f915 	bl	8017518 <uxr_serialize_READ_DATA_Payload>
 80142ee:	4620      	mov	r0, r4
 80142f0:	b015      	add	sp, #84	; 0x54
 80142f2:	bd30      	pop	{r4, r5, pc}
 80142f4:	2208      	movs	r2, #8
 80142f6:	e7e2      	b.n	80142be <uxr_buffer_request_data+0x3a>

080142f8 <uxr_buffer_cancel_data>:
 80142f8:	b510      	push	{r4, lr}
 80142fa:	2300      	movs	r3, #0
 80142fc:	b094      	sub	sp, #80	; 0x50
 80142fe:	4604      	mov	r4, r0
 8014300:	9205      	str	r2, [sp, #20]
 8014302:	9301      	str	r3, [sp, #4]
 8014304:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014308:	f88d 301e 	strb.w	r3, [sp, #30]
 801430c:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 8014310:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 8014314:	2308      	movs	r3, #8
 8014316:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801431a:	2201      	movs	r2, #1
 801431c:	9300      	str	r3, [sp, #0]
 801431e:	ab0c      	add	r3, sp, #48	; 0x30
 8014320:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 8014324:	2210      	movs	r2, #16
 8014326:	f001 f807 	bl	8015338 <uxr_prepare_stream_to_write_submessage>
 801432a:	b918      	cbnz	r0, 8014334 <uxr_buffer_cancel_data+0x3c>
 801432c:	4604      	mov	r4, r0
 801432e:	4620      	mov	r0, r4
 8014330:	b014      	add	sp, #80	; 0x50
 8014332:	bd10      	pop	{r4, pc}
 8014334:	9905      	ldr	r1, [sp, #20]
 8014336:	aa06      	add	r2, sp, #24
 8014338:	4620      	mov	r0, r4
 801433a:	f001 f939 	bl	80155b0 <uxr_init_base_object_request>
 801433e:	4604      	mov	r4, r0
 8014340:	a906      	add	r1, sp, #24
 8014342:	a80c      	add	r0, sp, #48	; 0x30
 8014344:	f003 f8e8 	bl	8017518 <uxr_serialize_READ_DATA_Payload>
 8014348:	4620      	mov	r0, r4
 801434a:	b014      	add	sp, #80	; 0x50
 801434c:	bd10      	pop	{r4, pc}
 801434e:	bf00      	nop

08014350 <read_submessage_format>:
 8014350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014354:	b095      	sub	sp, #84	; 0x54
 8014356:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 801435a:	b113      	cbz	r3, 8014362 <read_submessage_format+0x12>
 801435c:	b015      	add	sp, #84	; 0x54
 801435e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014362:	4606      	mov	r6, r0
 8014364:	981c      	ldr	r0, [sp, #112]	; 0x70
 8014366:	460c      	mov	r4, r1
 8014368:	4615      	mov	r5, r2
 801436a:	9004      	str	r0, [sp, #16]
 801436c:	4699      	mov	r9, r3
 801436e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8014370:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8014374:	9005      	str	r0, [sp, #20]
 8014376:	a80c      	add	r0, sp, #48	; 0x30
 8014378:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 801437c:	1a52      	subs	r2, r2, r1
 801437e:	f7fb f9b3 	bl	800f6e8 <ucdr_init_buffer>
 8014382:	a80c      	add	r0, sp, #48	; 0x30
 8014384:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8014388:	f7fb f982 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 801438c:	69e2      	ldr	r2, [r4, #28]
 801438e:	b19a      	cbz	r2, 80143b8 <read_submessage_format+0x68>
 8014390:	f1b8 0f07 	cmp.w	r8, #7
 8014394:	f882 9014 	strb.w	r9, [r2, #20]
 8014398:	d040      	beq.n	801441c <read_submessage_format+0xcc>
 801439a:	f1b8 0f08 	cmp.w	r8, #8
 801439e:	d02e      	beq.n	80143fe <read_submessage_format+0xae>
 80143a0:	f1b8 0f06 	cmp.w	r8, #6
 80143a4:	d011      	beq.n	80143ca <read_submessage_format+0x7a>
 80143a6:	2301      	movs	r3, #1
 80143a8:	7513      	strb	r3, [r2, #20]
 80143aa:	4629      	mov	r1, r5
 80143ac:	4620      	mov	r0, r4
 80143ae:	f7fb f9ef 	bl	800f790 <ucdr_advance_buffer>
 80143b2:	b015      	add	sp, #84	; 0x54
 80143b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143b8:	f1b8 0f07 	cmp.w	r8, #7
 80143bc:	d02e      	beq.n	801441c <read_submessage_format+0xcc>
 80143be:	f1b8 0f08 	cmp.w	r8, #8
 80143c2:	d01c      	beq.n	80143fe <read_submessage_format+0xae>
 80143c4:	f1b8 0f06 	cmp.w	r8, #6
 80143c8:	d1ef      	bne.n	80143aa <read_submessage_format+0x5a>
 80143ca:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 80143ce:	f1b8 0f00 	cmp.w	r8, #0
 80143d2:	d011      	beq.n	80143f8 <read_submessage_format+0xa8>
 80143d4:	ab0c      	add	r3, sp, #48	; 0x30
 80143d6:	9501      	str	r5, [sp, #4]
 80143d8:	463a      	mov	r2, r7
 80143da:	4630      	mov	r0, r6
 80143dc:	9300      	str	r3, [sp, #0]
 80143de:	2306      	movs	r3, #6
 80143e0:	f88d 3016 	strb.w	r3, [sp, #22]
 80143e4:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80143e8:	9302      	str	r3, [sp, #8]
 80143ea:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80143ee:	47c0      	blx	r8
 80143f0:	2301      	movs	r3, #1
 80143f2:	69e2      	ldr	r2, [r4, #28]
 80143f4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80143f8:	2a00      	cmp	r2, #0
 80143fa:	d1d4      	bne.n	80143a6 <read_submessage_format+0x56>
 80143fc:	e7d5      	b.n	80143aa <read_submessage_format+0x5a>
 80143fe:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 8014402:	2b00      	cmp	r3, #0
 8014404:	d0f8      	beq.n	80143f8 <read_submessage_format+0xa8>
 8014406:	a80c      	add	r0, sp, #48	; 0x30
 8014408:	a906      	add	r1, sp, #24
 801440a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801440e:	f003 f94f 	bl	80176b0 <uxr_deserialize_SampleIdentity>
 8014412:	b9a0      	cbnz	r0, 801443e <read_submessage_format+0xee>
 8014414:	69e2      	ldr	r2, [r4, #28]
 8014416:	2a00      	cmp	r2, #0
 8014418:	d1c5      	bne.n	80143a6 <read_submessage_format+0x56>
 801441a:	e7c6      	b.n	80143aa <read_submessage_format+0x5a>
 801441c:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8014420:	b13b      	cbz	r3, 8014432 <read_submessage_format+0xe2>
 8014422:	a906      	add	r1, sp, #24
 8014424:	a80c      	add	r0, sp, #48	; 0x30
 8014426:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 801442a:	f002 fe15 	bl	8017058 <uxr_deserialize_BaseObjectRequest>
 801442e:	bb60      	cbnz	r0, 801448a <read_submessage_format+0x13a>
 8014430:	69e2      	ldr	r2, [r4, #28]
 8014432:	68a3      	ldr	r3, [r4, #8]
 8014434:	442b      	add	r3, r5
 8014436:	60a3      	str	r3, [r4, #8]
 8014438:	2a00      	cmp	r2, #0
 801443a:	d1b4      	bne.n	80143a6 <read_submessage_format+0x56>
 801443c:	e7b5      	b.n	80143aa <read_submessage_format+0x5a>
 801443e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014440:	a80c      	add	r0, sp, #48	; 0x30
 8014442:	eba8 0803 	sub.w	r8, r8, r3
 8014446:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801444a:	44a8      	add	r8, r5
 801444c:	1a52      	subs	r2, r2, r1
 801444e:	f7fb f94b 	bl	800f6e8 <ucdr_init_buffer>
 8014452:	a80c      	add	r0, sp, #48	; 0x30
 8014454:	fa1f f888 	uxth.w	r8, r8
 8014458:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801445c:	f7fb f918 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 8014460:	ab0c      	add	r3, sp, #48	; 0x30
 8014462:	2108      	movs	r1, #8
 8014464:	f8cd 8004 	str.w	r8, [sp, #4]
 8014468:	9300      	str	r3, [sp, #0]
 801446a:	463a      	mov	r2, r7
 801446c:	f88d 1016 	strb.w	r1, [sp, #22]
 8014470:	ab06      	add	r3, sp, #24
 8014472:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 8014476:	4630      	mov	r0, r6
 8014478:	9102      	str	r1, [sp, #8]
 801447a:	9905      	ldr	r1, [sp, #20]
 801447c:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8014480:	47b8      	blx	r7
 8014482:	2301      	movs	r3, #1
 8014484:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8014488:	e7c4      	b.n	8014414 <read_submessage_format+0xc4>
 801448a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 801448e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014490:	a80c      	add	r0, sp, #48	; 0x30
 8014492:	1a52      	subs	r2, r2, r1
 8014494:	eba8 0803 	sub.w	r8, r8, r3
 8014498:	f7fb f926 	bl	800f6e8 <ucdr_init_buffer>
 801449c:	a80c      	add	r0, sp, #48	; 0x30
 801449e:	44a8      	add	r8, r5
 80144a0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80144a4:	f7fb f8f4 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 80144a8:	ab0c      	add	r3, sp, #48	; 0x30
 80144aa:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80144ae:	fa1f f888 	uxth.w	r8, r8
 80144b2:	9300      	str	r3, [sp, #0]
 80144b4:	463a      	mov	r2, r7
 80144b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80144ba:	4630      	mov	r0, r6
 80144bc:	f8cd 8004 	str.w	r8, [sp, #4]
 80144c0:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80144c4:	2107      	movs	r1, #7
 80144c6:	f88d 1016 	strb.w	r1, [sp, #22]
 80144ca:	b29b      	uxth	r3, r3
 80144cc:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 80144d0:	9102      	str	r1, [sp, #8]
 80144d2:	9905      	ldr	r1, [sp, #20]
 80144d4:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 80144d8:	47b8      	blx	r7
 80144da:	2301      	movs	r3, #1
 80144dc:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80144e0:	e7a6      	b.n	8014430 <read_submessage_format+0xe0>
 80144e2:	bf00      	nop

080144e4 <on_get_fragmentation_info>:
 80144e4:	b500      	push	{lr}
 80144e6:	b08b      	sub	sp, #44	; 0x2c
 80144e8:	4601      	mov	r1, r0
 80144ea:	2204      	movs	r2, #4
 80144ec:	a802      	add	r0, sp, #8
 80144ee:	f7fb f8fb 	bl	800f6e8 <ucdr_init_buffer>
 80144f2:	f10d 0305 	add.w	r3, sp, #5
 80144f6:	f10d 0206 	add.w	r2, sp, #6
 80144fa:	a901      	add	r1, sp, #4
 80144fc:	a802      	add	r0, sp, #8
 80144fe:	f001 fe5d 	bl	80161bc <uxr_read_submessage_header>
 8014502:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014506:	2b0d      	cmp	r3, #13
 8014508:	d003      	beq.n	8014512 <on_get_fragmentation_info+0x2e>
 801450a:	2000      	movs	r0, #0
 801450c:	b00b      	add	sp, #44	; 0x2c
 801450e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014512:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8014516:	f013 0f02 	tst.w	r3, #2
 801451a:	bf14      	ite	ne
 801451c:	2002      	movne	r0, #2
 801451e:	2001      	moveq	r0, #1
 8014520:	b00b      	add	sp, #44	; 0x2c
 8014522:	f85d fb04 	ldr.w	pc, [sp], #4
 8014526:	bf00      	nop

08014528 <read_submessage_get_info>:
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	2500      	movs	r5, #0
 801452c:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8014530:	460e      	mov	r6, r1
 8014532:	4604      	mov	r4, r0
 8014534:	f44f 7224 	mov.w	r2, #656	; 0x290
 8014538:	4629      	mov	r1, r5
 801453a:	a810      	add	r0, sp, #64	; 0x40
 801453c:	9503      	str	r5, [sp, #12]
 801453e:	9504      	str	r5, [sp, #16]
 8014540:	f007 ff64 	bl	801c40c <memset>
 8014544:	a903      	add	r1, sp, #12
 8014546:	4630      	mov	r0, r6
 8014548:	f002 ff26 	bl	8017398 <uxr_deserialize_GET_INFO_Payload>
 801454c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014550:	4620      	mov	r0, r4
 8014552:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8014556:	f001 f823 	bl	80155a0 <uxr_session_header_offset>
 801455a:	462b      	mov	r3, r5
 801455c:	220c      	movs	r2, #12
 801455e:	a905      	add	r1, sp, #20
 8014560:	9000      	str	r0, [sp, #0]
 8014562:	a808      	add	r0, sp, #32
 8014564:	f7fb f8ae 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 8014568:	a910      	add	r1, sp, #64	; 0x40
 801456a:	a808      	add	r0, sp, #32
 801456c:	f002 ff88 	bl	8017480 <uxr_serialize_INFO_Payload>
 8014570:	9b08      	ldr	r3, [sp, #32]
 8014572:	462a      	mov	r2, r5
 8014574:	4629      	mov	r1, r5
 8014576:	4620      	mov	r0, r4
 8014578:	f000 ffbe 	bl	80154f8 <uxr_stamp_session_header>
 801457c:	a808      	add	r0, sp, #32
 801457e:	f7fb f8e1 	bl	800f744 <ucdr_buffer_length>
 8014582:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014584:	4602      	mov	r2, r0
 8014586:	a905      	add	r1, sp, #20
 8014588:	e9d3 0400 	ldrd	r0, r4, [r3]
 801458c:	47a0      	blx	r4
 801458e:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 8014592:	bd70      	pop	{r4, r5, r6, pc}

08014594 <write_submessage_acknack.isra.0>:
 8014594:	b570      	push	{r4, r5, r6, lr}
 8014596:	b092      	sub	sp, #72	; 0x48
 8014598:	4605      	mov	r5, r0
 801459a:	460e      	mov	r6, r1
 801459c:	4614      	mov	r4, r2
 801459e:	f000 ffff 	bl	80155a0 <uxr_session_header_offset>
 80145a2:	a905      	add	r1, sp, #20
 80145a4:	9000      	str	r0, [sp, #0]
 80145a6:	2300      	movs	r3, #0
 80145a8:	a80a      	add	r0, sp, #40	; 0x28
 80145aa:	2211      	movs	r2, #17
 80145ac:	f7fb f88a 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 80145b0:	2218      	movs	r2, #24
 80145b2:	2300      	movs	r3, #0
 80145b4:	210a      	movs	r1, #10
 80145b6:	fb02 5404 	mla	r4, r2, r4, r5
 80145ba:	a80a      	add	r0, sp, #40	; 0x28
 80145bc:	2205      	movs	r2, #5
 80145be:	3450      	adds	r4, #80	; 0x50
 80145c0:	f001 fde2 	bl	8016188 <uxr_buffer_submessage_header>
 80145c4:	a903      	add	r1, sp, #12
 80145c6:	4620      	mov	r0, r4
 80145c8:	f006 fb50 	bl	801ac6c <uxr_compute_acknack>
 80145cc:	ba40      	rev16	r0, r0
 80145ce:	a903      	add	r1, sp, #12
 80145d0:	f88d 6010 	strb.w	r6, [sp, #16]
 80145d4:	f8ad 000e 	strh.w	r0, [sp, #14]
 80145d8:	a80a      	add	r0, sp, #40	; 0x28
 80145da:	f002 ffc3 	bl	8017564 <uxr_serialize_ACKNACK_Payload>
 80145de:	2200      	movs	r2, #0
 80145e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80145e2:	4628      	mov	r0, r5
 80145e4:	4611      	mov	r1, r2
 80145e6:	f000 ff87 	bl	80154f8 <uxr_stamp_session_header>
 80145ea:	a80a      	add	r0, sp, #40	; 0x28
 80145ec:	f7fb f8aa 	bl	800f744 <ucdr_buffer_length>
 80145f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80145f2:	4602      	mov	r2, r0
 80145f4:	a905      	add	r1, sp, #20
 80145f6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80145fa:	47a0      	blx	r4
 80145fc:	b012      	add	sp, #72	; 0x48
 80145fe:	bd70      	pop	{r4, r5, r6, pc}

08014600 <uxr_init_session>:
 8014600:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8014638 <uxr_init_session+0x38>
 8014604:	2300      	movs	r3, #0
 8014606:	b510      	push	{r4, lr}
 8014608:	4604      	mov	r4, r0
 801460a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 801460e:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 8014612:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 8014616:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 801461a:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 801461e:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8014622:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8014626:	2181      	movs	r1, #129	; 0x81
 8014628:	f000 feca 	bl	80153c0 <uxr_init_session_info>
 801462c:	f104 0008 	add.w	r0, r4, #8
 8014630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014634:	f001 bcc4 	b.w	8015fc0 <uxr_init_stream_storage>
	...

08014640 <uxr_set_status_callback>:
 8014640:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8014644:	4770      	bx	lr
 8014646:	bf00      	nop

08014648 <uxr_set_topic_callback>:
 8014648:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 801464c:	4770      	bx	lr
 801464e:	bf00      	nop

08014650 <uxr_set_request_callback>:
 8014650:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8014654:	4770      	bx	lr
 8014656:	bf00      	nop

08014658 <uxr_set_reply_callback>:
 8014658:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 801465c:	4770      	bx	lr
 801465e:	bf00      	nop

08014660 <uxr_create_output_best_effort_stream>:
 8014660:	b510      	push	{r4, lr}
 8014662:	4604      	mov	r4, r0
 8014664:	b084      	sub	sp, #16
 8014666:	e9cd 2100 	strd	r2, r1, [sp]
 801466a:	f000 ff99 	bl	80155a0 <uxr_session_header_offset>
 801466e:	4603      	mov	r3, r0
 8014670:	f104 0008 	add.w	r0, r4, #8
 8014674:	e9dd 2100 	ldrd	r2, r1, [sp]
 8014678:	b004      	add	sp, #16
 801467a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801467e:	f001 bce5 	b.w	801604c <uxr_add_output_best_effort_buffer>
 8014682:	bf00      	nop

08014684 <uxr_create_output_reliable_stream>:
 8014684:	b530      	push	{r4, r5, lr}
 8014686:	b089      	sub	sp, #36	; 0x24
 8014688:	4604      	mov	r4, r0
 801468a:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801468e:	9303      	str	r3, [sp, #12]
 8014690:	f000 ff86 	bl	80155a0 <uxr_session_header_offset>
 8014694:	4605      	mov	r5, r0
 8014696:	9905      	ldr	r1, [sp, #20]
 8014698:	f104 0008 	add.w	r0, r4, #8
 801469c:	9500      	str	r5, [sp, #0]
 801469e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 80146a2:	f001 fce7 	bl	8016074 <uxr_add_output_reliable_buffer>
 80146a6:	2200      	movs	r2, #0
 80146a8:	fa5f fc80 	uxtb.w	ip, r0
 80146ac:	f3c0 2407 	ubfx	r4, r0, #8, #8
 80146b0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80146b4:	0e03      	lsrs	r3, r0, #24
 80146b6:	f36c 0207 	bfi	r2, ip, #0, #8
 80146ba:	f364 220f 	bfi	r2, r4, #8, #8
 80146be:	f361 4217 	bfi	r2, r1, #16, #8
 80146c2:	f363 621f 	bfi	r2, r3, #24, #8
 80146c6:	4610      	mov	r0, r2
 80146c8:	b009      	add	sp, #36	; 0x24
 80146ca:	bd30      	pop	{r4, r5, pc}

080146cc <uxr_create_input_best_effort_stream>:
 80146cc:	b082      	sub	sp, #8
 80146ce:	3008      	adds	r0, #8
 80146d0:	b002      	add	sp, #8
 80146d2:	f001 bce9 	b.w	80160a8 <uxr_add_input_best_effort_buffer>
 80146d6:	bf00      	nop

080146d8 <uxr_create_input_reliable_stream>:
 80146d8:	b510      	push	{r4, lr}
 80146da:	4c0c      	ldr	r4, [pc, #48]	; (801470c <uxr_create_input_reliable_stream+0x34>)
 80146dc:	b084      	sub	sp, #16
 80146de:	3008      	adds	r0, #8
 80146e0:	9400      	str	r4, [sp, #0]
 80146e2:	f001 fcf7 	bl	80160d4 <uxr_add_input_reliable_buffer>
 80146e6:	2200      	movs	r2, #0
 80146e8:	fa5f fe80 	uxtb.w	lr, r0
 80146ec:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80146f0:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80146f4:	0e03      	lsrs	r3, r0, #24
 80146f6:	f36e 0207 	bfi	r2, lr, #0, #8
 80146fa:	f36c 220f 	bfi	r2, ip, #8, #8
 80146fe:	f361 4217 	bfi	r2, r1, #16, #8
 8014702:	f363 621f 	bfi	r2, r3, #24, #8
 8014706:	4610      	mov	r0, r2
 8014708:	b004      	add	sp, #16
 801470a:	bd10      	pop	{r4, pc}
 801470c:	080144e5 	.word	0x080144e5

08014710 <uxr_epoch_nanos>:
 8014710:	b510      	push	{r4, lr}
 8014712:	4604      	mov	r4, r0
 8014714:	f001 fd9a 	bl	801624c <uxr_nanos>
 8014718:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 801471c:	1ac0      	subs	r0, r0, r3
 801471e:	eb61 0102 	sbc.w	r1, r1, r2
 8014722:	bd10      	pop	{r4, pc}

08014724 <uxr_flash_output_streams>:
 8014724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014728:	7e03      	ldrb	r3, [r0, #24]
 801472a:	b084      	sub	sp, #16
 801472c:	4604      	mov	r4, r0
 801472e:	b1fb      	cbz	r3, 8014770 <uxr_flash_output_streams+0x4c>
 8014730:	f04f 0900 	mov.w	r9, #0
 8014734:	f10d 0802 	add.w	r8, sp, #2
 8014738:	af03      	add	r7, sp, #12
 801473a:	ae02      	add	r6, sp, #8
 801473c:	4648      	mov	r0, r9
 801473e:	2201      	movs	r2, #1
 8014740:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8014744:	4611      	mov	r1, r2
 8014746:	3508      	adds	r5, #8
 8014748:	f001 fbe0 	bl	8015f0c <uxr_stream_id>
 801474c:	4684      	mov	ip, r0
 801474e:	4643      	mov	r3, r8
 8014750:	463a      	mov	r2, r7
 8014752:	4631      	mov	r1, r6
 8014754:	4628      	mov	r0, r5
 8014756:	f8cd c004 	str.w	ip, [sp, #4]
 801475a:	f006 fb11 	bl	801ad80 <uxr_prepare_best_effort_buffer_to_send>
 801475e:	2800      	cmp	r0, #0
 8014760:	d13d      	bne.n	80147de <uxr_flash_output_streams+0xba>
 8014762:	f109 0901 	add.w	r9, r9, #1
 8014766:	7e23      	ldrb	r3, [r4, #24]
 8014768:	fa5f f089 	uxtb.w	r0, r9
 801476c:	4283      	cmp	r3, r0
 801476e:	d8e6      	bhi.n	801473e <uxr_flash_output_streams+0x1a>
 8014770:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8014774:	b383      	cbz	r3, 80147d8 <uxr_flash_output_streams+0xb4>
 8014776:	f04f 0900 	mov.w	r9, #0
 801477a:	f10d 0802 	add.w	r8, sp, #2
 801477e:	af03      	add	r7, sp, #12
 8014780:	ae02      	add	r6, sp, #8
 8014782:	4648      	mov	r0, r9
 8014784:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8014788:	2201      	movs	r2, #1
 801478a:	2102      	movs	r1, #2
 801478c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8014790:	f001 fbbc 	bl	8015f0c <uxr_stream_id>
 8014794:	9001      	str	r0, [sp, #4]
 8014796:	3520      	adds	r5, #32
 8014798:	e00c      	b.n	80147b4 <uxr_flash_output_streams+0x90>
 801479a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801479e:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80147a2:	9b02      	ldr	r3, [sp, #8]
 80147a4:	f000 fea8 	bl	80154f8 <uxr_stamp_session_header>
 80147a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80147aa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80147ae:	e9d3 0a00 	ldrd	r0, sl, [r3]
 80147b2:	47d0      	blx	sl
 80147b4:	4643      	mov	r3, r8
 80147b6:	463a      	mov	r2, r7
 80147b8:	4631      	mov	r1, r6
 80147ba:	4628      	mov	r0, r5
 80147bc:	f006 fd04 	bl	801b1c8 <uxr_prepare_next_reliable_buffer_to_send>
 80147c0:	4603      	mov	r3, r0
 80147c2:	4620      	mov	r0, r4
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d1e8      	bne.n	801479a <uxr_flash_output_streams+0x76>
 80147c8:	f109 0901 	add.w	r9, r9, #1
 80147cc:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 80147d0:	fa5f f089 	uxtb.w	r0, r9
 80147d4:	4283      	cmp	r3, r0
 80147d6:	d8d5      	bhi.n	8014784 <uxr_flash_output_streams+0x60>
 80147d8:	b004      	add	sp, #16
 80147da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147de:	9b02      	ldr	r3, [sp, #8]
 80147e0:	4620      	mov	r0, r4
 80147e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80147e6:	f109 0901 	add.w	r9, r9, #1
 80147ea:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80147ee:	f000 fe83 	bl	80154f8 <uxr_stamp_session_header>
 80147f2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80147f4:	9a03      	ldr	r2, [sp, #12]
 80147f6:	685d      	ldr	r5, [r3, #4]
 80147f8:	6818      	ldr	r0, [r3, #0]
 80147fa:	9902      	ldr	r1, [sp, #8]
 80147fc:	47a8      	blx	r5
 80147fe:	7e23      	ldrb	r3, [r4, #24]
 8014800:	fa5f f089 	uxtb.w	r0, r9
 8014804:	4283      	cmp	r3, r0
 8014806:	d89a      	bhi.n	801473e <uxr_flash_output_streams+0x1a>
 8014808:	e7b2      	b.n	8014770 <uxr_flash_output_streams+0x4c>
 801480a:	bf00      	nop

0801480c <read_submessage_info>:
 801480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014810:	460d      	mov	r5, r1
 8014812:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8014816:	4606      	mov	r6, r0
 8014818:	4669      	mov	r1, sp
 801481a:	4628      	mov	r0, r5
 801481c:	f002 fcce 	bl	80171bc <uxr_deserialize_BaseObjectReply>
 8014820:	4604      	mov	r4, r0
 8014822:	a902      	add	r1, sp, #8
 8014824:	4628      	mov	r0, r5
 8014826:	f89d 7005 	ldrb.w	r7, [sp, #5]
 801482a:	f7f9 fc6d 	bl	800e108 <ucdr_deserialize_bool>
 801482e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8014832:	4004      	ands	r4, r0
 8014834:	b2e4      	uxtb	r4, r4
 8014836:	b95b      	cbnz	r3, 8014850 <read_submessage_info+0x44>
 8014838:	a987      	add	r1, sp, #540	; 0x21c
 801483a:	4628      	mov	r0, r5
 801483c:	f7f9 fc64 	bl	800e108 <ucdr_deserialize_bool>
 8014840:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8014844:	4680      	mov	r8, r0
 8014846:	b94b      	cbnz	r3, 801485c <read_submessage_info+0x50>
 8014848:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 801484c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014850:	a903      	add	r1, sp, #12
 8014852:	4628      	mov	r0, r5
 8014854:	f002 fb5e 	bl	8016f14 <uxr_deserialize_ObjectVariant>
 8014858:	4004      	ands	r4, r0
 801485a:	e7ed      	b.n	8014838 <read_submessage_info+0x2c>
 801485c:	a988      	add	r1, sp, #544	; 0x220
 801485e:	4628      	mov	r0, r5
 8014860:	f7f9 fc80 	bl	800e164 <ucdr_deserialize_uint8_t>
 8014864:	ea14 0f08 	tst.w	r4, r8
 8014868:	d0ee      	beq.n	8014848 <read_submessage_info+0x3c>
 801486a:	2800      	cmp	r0, #0
 801486c:	d0ec      	beq.n	8014848 <read_submessage_info+0x3c>
 801486e:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8014872:	2b0d      	cmp	r3, #13
 8014874:	d1e8      	bne.n	8014848 <read_submessage_info+0x3c>
 8014876:	a98a      	add	r1, sp, #552	; 0x228
 8014878:	4628      	mov	r0, r5
 801487a:	f7fa fa19 	bl	800ecb0 <ucdr_deserialize_int16_t>
 801487e:	b138      	cbz	r0, 8014890 <read_submessage_info+0x84>
 8014880:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8014884:	2b00      	cmp	r3, #0
 8014886:	dd06      	ble.n	8014896 <read_submessage_info+0x8a>
 8014888:	2f00      	cmp	r7, #0
 801488a:	bf14      	ite	ne
 801488c:	2001      	movne	r0, #1
 801488e:	2002      	moveq	r0, #2
 8014890:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8014894:	e7d8      	b.n	8014848 <read_submessage_info+0x3c>
 8014896:	2000      	movs	r0, #0
 8014898:	e7fa      	b.n	8014890 <read_submessage_info+0x84>
 801489a:	bf00      	nop

0801489c <read_submessage_list>:
 801489c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148a0:	4604      	mov	r4, r0
 80148a2:	b097      	sub	sp, #92	; 0x5c
 80148a4:	460d      	mov	r5, r1
 80148a6:	4ec1      	ldr	r6, [pc, #772]	; (8014bac <read_submessage_list+0x310>)
 80148a8:	9209      	str	r2, [sp, #36]	; 0x24
 80148aa:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 80148ae:	aa0c      	add	r2, sp, #48	; 0x30
 80148b0:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 80148b4:	4628      	mov	r0, r5
 80148b6:	f001 fc81 	bl	80161bc <uxr_read_submessage_header>
 80148ba:	2800      	cmp	r0, #0
 80148bc:	f000 8142 	beq.w	8014b44 <read_submessage_list+0x2a8>
 80148c0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 80148c4:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80148c8:	3b02      	subs	r3, #2
 80148ca:	2b0d      	cmp	r3, #13
 80148cc:	d8ed      	bhi.n	80148aa <read_submessage_list+0xe>
 80148ce:	a101      	add	r1, pc, #4	; (adr r1, 80148d4 <read_submessage_list+0x38>)
 80148d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80148d4:	08014b3b 	.word	0x08014b3b
 80148d8:	080148ab 	.word	0x080148ab
 80148dc:	08014b2b 	.word	0x08014b2b
 80148e0:	08014ac9 	.word	0x08014ac9
 80148e4:	08014abf 	.word	0x08014abf
 80148e8:	080148ab 	.word	0x080148ab
 80148ec:	080148ab 	.word	0x080148ab
 80148f0:	08014a15 	.word	0x08014a15
 80148f4:	080149a7 	.word	0x080149a7
 80148f8:	08014967 	.word	0x08014967
 80148fc:	080148ab 	.word	0x080148ab
 8014900:	080148ab 	.word	0x080148ab
 8014904:	080148ab 	.word	0x080148ab
 8014908:	0801490d 	.word	0x0801490d
 801490c:	a910      	add	r1, sp, #64	; 0x40
 801490e:	4628      	mov	r0, r5
 8014910:	f002 fe7c 	bl	801760c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8014914:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8014918:	f1b8 0f00 	cmp.w	r8, #0
 801491c:	f000 811a 	beq.w	8014b54 <read_submessage_list+0x2b8>
 8014920:	f001 fc94 	bl	801624c <uxr_nanos>
 8014924:	4602      	mov	r2, r0
 8014926:	460b      	mov	r3, r1
 8014928:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 801492c:	2100      	movs	r1, #0
 801492e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014930:	9006      	str	r0, [sp, #24]
 8014932:	468c      	mov	ip, r1
 8014934:	9815      	ldr	r0, [sp, #84]	; 0x54
 8014936:	fbc7 0c06 	smlal	r0, ip, r7, r6
 801493a:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801493c:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8014940:	468c      	mov	ip, r1
 8014942:	9811      	ldr	r0, [sp, #68]	; 0x44
 8014944:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8014948:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 801494c:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8014950:	fbc7 0106 	smlal	r0, r1, r7, r6
 8014954:	e9cd 0100 	strd	r0, r1, [sp]
 8014958:	4620      	mov	r0, r4
 801495a:	47c0      	blx	r8
 801495c:	f04f 0301 	mov.w	r3, #1
 8014960:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8014964:	e7a1      	b.n	80148aa <read_submessage_list+0xe>
 8014966:	a910      	add	r1, sp, #64	; 0x40
 8014968:	4628      	mov	r0, r5
 801496a:	f002 fe3b 	bl	80175e4 <uxr_deserialize_HEARTBEAT_Payload>
 801496e:	2100      	movs	r1, #0
 8014970:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8014974:	f001 faf8 	bl	8015f68 <uxr_stream_id_from_raw>
 8014978:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801497c:	900f      	str	r0, [sp, #60]	; 0x3c
 801497e:	f104 0008 	add.w	r0, r4, #8
 8014982:	4641      	mov	r1, r8
 8014984:	f001 fbde 	bl	8016144 <uxr_get_input_reliable_stream>
 8014988:	2800      	cmp	r0, #0
 801498a:	d08e      	beq.n	80148aa <read_submessage_list+0xe>
 801498c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8014990:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8014994:	f006 f95e 	bl	801ac54 <uxr_process_heartbeat>
 8014998:	4642      	mov	r2, r8
 801499a:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 801499e:	4620      	mov	r0, r4
 80149a0:	f7ff fdf8 	bl	8014594 <write_submessage_acknack.isra.0>
 80149a4:	e781      	b.n	80148aa <read_submessage_list+0xe>
 80149a6:	a910      	add	r1, sp, #64	; 0x40
 80149a8:	4628      	mov	r0, r5
 80149aa:	f002 fdf3 	bl	8017594 <uxr_deserialize_ACKNACK_Payload>
 80149ae:	2100      	movs	r1, #0
 80149b0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80149b4:	f001 fad8 	bl	8015f68 <uxr_stream_id_from_raw>
 80149b8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80149bc:	900d      	str	r0, [sp, #52]	; 0x34
 80149be:	f104 0008 	add.w	r0, r4, #8
 80149c2:	f001 fba9 	bl	8016118 <uxr_get_output_reliable_stream>
 80149c6:	4680      	mov	r8, r0
 80149c8:	2800      	cmp	r0, #0
 80149ca:	f43f af6e 	beq.w	80148aa <read_submessage_list+0xe>
 80149ce:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80149d2:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 80149d6:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 80149da:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80149de:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80149e2:	b289      	uxth	r1, r1
 80149e4:	f006 fc98 	bl	801b318 <uxr_process_acknack>
 80149e8:	4640      	mov	r0, r8
 80149ea:	f006 fc59 	bl	801b2a0 <uxr_begin_output_nack_buffer_it>
 80149ee:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 80149f2:	e005      	b.n	8014a00 <read_submessage_list+0x164>
 80149f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80149f6:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 80149fa:	e9d3 0900 	ldrd	r0, r9, [r3]
 80149fe:	47c8      	blx	r9
 8014a00:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8014a04:	aa0f      	add	r2, sp, #60	; 0x3c
 8014a06:	4651      	mov	r1, sl
 8014a08:	4640      	mov	r0, r8
 8014a0a:	f006 fc4b 	bl	801b2a4 <uxr_next_reliable_nack_buffer_to_send>
 8014a0e:	2800      	cmp	r0, #0
 8014a10:	d1f0      	bne.n	80149f4 <read_submessage_list+0x158>
 8014a12:	e74a      	b.n	80148aa <read_submessage_list+0xe>
 8014a14:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8014a18:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8014a1c:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8014a20:	4628      	mov	r0, r5
 8014a22:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8014a26:	4651      	mov	r1, sl
 8014a28:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8014a2c:	f1a8 0804 	sub.w	r8, r8, #4
 8014a30:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8014a34:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8014a38:	fa1f f888 	uxth.w	r8, r8
 8014a3c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014a40:	f009 090e 	and.w	r9, r9, #14
 8014a44:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8014a48:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8014a4c:	f002 fb04 	bl	8017058 <uxr_deserialize_BaseObjectRequest>
 8014a50:	4650      	mov	r0, sl
 8014a52:	a90f      	add	r1, sp, #60	; 0x3c
 8014a54:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8014a58:	f000 fdca 	bl	80155f0 <uxr_parse_base_object_request>
 8014a5c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014a5e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8014a62:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8014a66:	9110      	str	r1, [sp, #64]	; 0x40
 8014a68:	f1bb 0f00 	cmp.w	fp, #0
 8014a6c:	d006      	beq.n	8014a7c <read_submessage_list+0x1e0>
 8014a6e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014a72:	4652      	mov	r2, sl
 8014a74:	4620      	mov	r0, r4
 8014a76:	9300      	str	r3, [sp, #0]
 8014a78:	2300      	movs	r3, #0
 8014a7a:	47d8      	blx	fp
 8014a7c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014a7e:	b182      	cbz	r2, 8014aa2 <read_submessage_list+0x206>
 8014a80:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8014a82:	f04f 0c00 	mov.w	ip, #0
 8014a86:	3902      	subs	r1, #2
 8014a88:	e003      	b.n	8014a92 <read_submessage_list+0x1f6>
 8014a8a:	f10c 0c01 	add.w	ip, ip, #1
 8014a8e:	4594      	cmp	ip, r2
 8014a90:	d007      	beq.n	8014aa2 <read_submessage_list+0x206>
 8014a92:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8014a96:	4553      	cmp	r3, sl
 8014a98:	d1f7      	bne.n	8014a8a <read_submessage_list+0x1ee>
 8014a9a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014a9c:	2200      	movs	r2, #0
 8014a9e:	f803 200c 	strb.w	r2, [r3, ip]
 8014aa2:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8014aa6:	464b      	mov	r3, r9
 8014aa8:	4642      	mov	r2, r8
 8014aaa:	4620      	mov	r0, r4
 8014aac:	9102      	str	r1, [sp, #8]
 8014aae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8014ab0:	9101      	str	r1, [sp, #4]
 8014ab2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8014ab4:	9100      	str	r1, [sp, #0]
 8014ab6:	4629      	mov	r1, r5
 8014ab8:	f7ff fc4a 	bl	8014350 <read_submessage_format>
 8014abc:	e6f5      	b.n	80148aa <read_submessage_list+0xe>
 8014abe:	4629      	mov	r1, r5
 8014ac0:	4620      	mov	r0, r4
 8014ac2:	f7ff fea3 	bl	801480c <read_submessage_info>
 8014ac6:	e6f0      	b.n	80148aa <read_submessage_list+0xe>
 8014ac8:	2a00      	cmp	r2, #0
 8014aca:	d03e      	beq.n	8014b4a <read_submessage_list+0x2ae>
 8014acc:	a910      	add	r1, sp, #64	; 0x40
 8014ace:	4628      	mov	r0, r5
 8014ad0:	f002 fcb8 	bl	8017444 <uxr_deserialize_STATUS_Payload>
 8014ad4:	a90e      	add	r1, sp, #56	; 0x38
 8014ad6:	aa0d      	add	r2, sp, #52	; 0x34
 8014ad8:	a810      	add	r0, sp, #64	; 0x40
 8014ada:	f000 fd89 	bl	80155f0 <uxr_parse_base_object_request>
 8014ade:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014ae0:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8014ae4:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8014ae8:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8014aec:	910f      	str	r1, [sp, #60]	; 0x3c
 8014aee:	f1ba 0f00 	cmp.w	sl, #0
 8014af2:	d006      	beq.n	8014b02 <read_submessage_list+0x266>
 8014af4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8014af8:	4642      	mov	r2, r8
 8014afa:	4620      	mov	r0, r4
 8014afc:	9300      	str	r3, [sp, #0]
 8014afe:	464b      	mov	r3, r9
 8014b00:	47d0      	blx	sl
 8014b02:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8014b04:	2a00      	cmp	r2, #0
 8014b06:	f43f aed0 	beq.w	80148aa <read_submessage_list+0xe>
 8014b0a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	3802      	subs	r0, #2
 8014b10:	e003      	b.n	8014b1a <read_submessage_list+0x27e>
 8014b12:	3101      	adds	r1, #1
 8014b14:	4291      	cmp	r1, r2
 8014b16:	f43f aec8 	beq.w	80148aa <read_submessage_list+0xe>
 8014b1a:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8014b1e:	4543      	cmp	r3, r8
 8014b20:	d1f7      	bne.n	8014b12 <read_submessage_list+0x276>
 8014b22:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8014b24:	f803 9001 	strb.w	r9, [r3, r1]
 8014b28:	e6bf      	b.n	80148aa <read_submessage_list+0xe>
 8014b2a:	2a00      	cmp	r2, #0
 8014b2c:	f47f aebd 	bne.w	80148aa <read_submessage_list+0xe>
 8014b30:	4629      	mov	r1, r5
 8014b32:	4620      	mov	r0, r4
 8014b34:	f000 fca0 	bl	8015478 <uxr_read_create_session_status>
 8014b38:	e6b7      	b.n	80148aa <read_submessage_list+0xe>
 8014b3a:	4629      	mov	r1, r5
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f7ff fcf3 	bl	8014528 <read_submessage_get_info>
 8014b42:	e6b2      	b.n	80148aa <read_submessage_list+0xe>
 8014b44:	b017      	add	sp, #92	; 0x5c
 8014b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b4a:	4629      	mov	r1, r5
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	f000 fca1 	bl	8015494 <uxr_read_delete_session_status>
 8014b52:	e6aa      	b.n	80148aa <read_submessage_list+0xe>
 8014b54:	f001 fb7a 	bl	801624c <uxr_nanos>
 8014b58:	4642      	mov	r2, r8
 8014b5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8014b5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014b5e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8014b62:	1818      	adds	r0, r3, r0
 8014b64:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8014b66:	eb42 0101 	adc.w	r1, r2, r1
 8014b6a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8014b6c:	4642      	mov	r2, r8
 8014b6e:	fbc7 3206 	smlal	r3, r2, r7, r6
 8014b72:	469c      	mov	ip, r3
 8014b74:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8014b78:	fbc3 7806 	smlal	r7, r8, r3, r6
 8014b7c:	4643      	mov	r3, r8
 8014b7e:	eb1c 0c07 	adds.w	ip, ip, r7
 8014b82:	eb42 0203 	adc.w	r2, r2, r3
 8014b86:	ebb0 030c 	subs.w	r3, r0, ip
 8014b8a:	eb61 0202 	sbc.w	r2, r1, r2
 8014b8e:	2a00      	cmp	r2, #0
 8014b90:	db08      	blt.n	8014ba4 <read_submessage_list+0x308>
 8014b92:	085b      	lsrs	r3, r3, #1
 8014b94:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8014b98:	1052      	asrs	r2, r2, #1
 8014b9a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8014b9e:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8014ba2:	e6db      	b.n	801495c <read_submessage_list+0xc0>
 8014ba4:	3301      	adds	r3, #1
 8014ba6:	f142 0200 	adc.w	r2, r2, #0
 8014baa:	e7f2      	b.n	8014b92 <read_submessage_list+0x2f6>
 8014bac:	3b9aca00 	.word	0x3b9aca00

08014bb0 <listen_message_reliably>:
 8014bb0:	1e0b      	subs	r3, r1, #0
 8014bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bb6:	bfb8      	it	lt
 8014bb8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8014bbc:	b09d      	sub	sp, #116	; 0x74
 8014bbe:	4680      	mov	r8, r0
 8014bc0:	9305      	str	r3, [sp, #20]
 8014bc2:	f001 fb27 	bl	8016214 <uxr_millis>
 8014bc6:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8014bca:	4681      	mov	r9, r0
 8014bcc:	2a00      	cmp	r2, #0
 8014bce:	f000 809a 	beq.w	8014d06 <listen_message_reliably+0x156>
 8014bd2:	2600      	movs	r6, #0
 8014bd4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014bd8:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8014bdc:	460f      	mov	r7, r1
 8014bde:	4630      	mov	r0, r6
 8014be0:	9303      	str	r3, [sp, #12]
 8014be2:	e00e      	b.n	8014c02 <listen_message_reliably+0x52>
 8014be4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014be6:	3601      	adds	r6, #1
 8014be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014bea:	455a      	cmp	r2, fp
 8014bec:	9903      	ldr	r1, [sp, #12]
 8014bee:	b2f0      	uxtb	r0, r6
 8014bf0:	eb73 0101 	sbcs.w	r1, r3, r1
 8014bf4:	da01      	bge.n	8014bfa <listen_message_reliably+0x4a>
 8014bf6:	4693      	mov	fp, r2
 8014bf8:	9303      	str	r3, [sp, #12]
 8014bfa:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8014bfe:	4283      	cmp	r3, r0
 8014c00:	d95f      	bls.n	8014cc2 <listen_message_reliably+0x112>
 8014c02:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8014c06:	2102      	movs	r1, #2
 8014c08:	2201      	movs	r2, #1
 8014c0a:	00e4      	lsls	r4, r4, #3
 8014c0c:	f001 f97e 	bl	8015f0c <uxr_stream_id>
 8014c10:	4601      	mov	r1, r0
 8014c12:	f104 0520 	add.w	r5, r4, #32
 8014c16:	463b      	mov	r3, r7
 8014c18:	464a      	mov	r2, r9
 8014c1a:	9109      	str	r1, [sp, #36]	; 0x24
 8014c1c:	4445      	add	r5, r8
 8014c1e:	4628      	mov	r0, r5
 8014c20:	f006 fb12 	bl	801b248 <uxr_update_output_stream_heartbeat_timestamp>
 8014c24:	eb08 0304 	add.w	r3, r8, r4
 8014c28:	2800      	cmp	r0, #0
 8014c2a:	d0db      	beq.n	8014be4 <listen_message_reliably+0x34>
 8014c2c:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8014c30:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 8014c34:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014c38:	4640      	mov	r0, r8
 8014c3a:	3501      	adds	r5, #1
 8014c3c:	4444      	add	r4, r8
 8014c3e:	9304      	str	r3, [sp, #16]
 8014c40:	f000 fcae 	bl	80155a0 <uxr_session_header_offset>
 8014c44:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014c48:	2300      	movs	r3, #0
 8014c4a:	2211      	movs	r2, #17
 8014c4c:	a90c      	add	r1, sp, #48	; 0x30
 8014c4e:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8014c52:	9000      	str	r0, [sp, #0]
 8014c54:	4650      	mov	r0, sl
 8014c56:	3601      	adds	r6, #1
 8014c58:	f7fa fd34 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 8014c5c:	2300      	movs	r3, #0
 8014c5e:	2205      	movs	r2, #5
 8014c60:	210b      	movs	r1, #11
 8014c62:	4650      	mov	r0, sl
 8014c64:	f001 fa90 	bl	8016188 <uxr_buffer_submessage_header>
 8014c68:	2101      	movs	r1, #1
 8014c6a:	8968      	ldrh	r0, [r5, #10]
 8014c6c:	f006 fbb0 	bl	801b3d0 <uxr_seq_num_add>
 8014c70:	892b      	ldrh	r3, [r5, #8]
 8014c72:	4602      	mov	r2, r0
 8014c74:	a90a      	add	r1, sp, #40	; 0x28
 8014c76:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014c7a:	4650      	mov	r0, sl
 8014c7c:	9b04      	ldr	r3, [sp, #16]
 8014c7e:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8014c82:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8014c86:	f002 fc99 	bl	80175bc <uxr_serialize_HEARTBEAT_Payload>
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c8e:	4640      	mov	r0, r8
 8014c90:	4611      	mov	r1, r2
 8014c92:	f000 fc31 	bl	80154f8 <uxr_stamp_session_header>
 8014c96:	4650      	mov	r0, sl
 8014c98:	f7fa fd54 	bl	800f744 <ucdr_buffer_length>
 8014c9c:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	a90c      	add	r1, sp, #48	; 0x30
 8014ca4:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014ca8:	47a8      	blx	r5
 8014caa:	9903      	ldr	r1, [sp, #12]
 8014cac:	b2f0      	uxtb	r0, r6
 8014cae:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 8014cb2:	455a      	cmp	r2, fp
 8014cb4:	eb73 0101 	sbcs.w	r1, r3, r1
 8014cb8:	db9d      	blt.n	8014bf6 <listen_message_reliably+0x46>
 8014cba:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8014cbe:	4283      	cmp	r3, r0
 8014cc0:	d89f      	bhi.n	8014c02 <listen_message_reliably+0x52>
 8014cc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8014cc6:	9a03      	ldr	r2, [sp, #12]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	bf08      	it	eq
 8014ccc:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 8014cd0:	d019      	beq.n	8014d06 <listen_message_reliably+0x156>
 8014cd2:	ebab 0309 	sub.w	r3, fp, r9
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	9d05      	ldr	r5, [sp, #20]
 8014cda:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 8014cde:	aa08      	add	r2, sp, #32
 8014ce0:	bf08      	it	eq
 8014ce2:	2301      	moveq	r3, #1
 8014ce4:	a907      	add	r1, sp, #28
 8014ce6:	6884      	ldr	r4, [r0, #8]
 8014ce8:	429d      	cmp	r5, r3
 8014cea:	6800      	ldr	r0, [r0, #0]
 8014cec:	bfa8      	it	ge
 8014cee:	461d      	movge	r5, r3
 8014cf0:	462b      	mov	r3, r5
 8014cf2:	47a0      	blx	r4
 8014cf4:	b948      	cbnz	r0, 8014d0a <listen_message_reliably+0x15a>
 8014cf6:	9b05      	ldr	r3, [sp, #20]
 8014cf8:	1b5b      	subs	r3, r3, r5
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	9305      	str	r3, [sp, #20]
 8014cfe:	f73f af60 	bgt.w	8014bc2 <listen_message_reliably+0x12>
 8014d02:	4604      	mov	r4, r0
 8014d04:	e012      	b.n	8014d2c <listen_message_reliably+0x17c>
 8014d06:	9b05      	ldr	r3, [sp, #20]
 8014d08:	e7e5      	b.n	8014cd6 <listen_message_reliably+0x126>
 8014d0a:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8014d0e:	4604      	mov	r4, r0
 8014d10:	2500      	movs	r5, #0
 8014d12:	a80c      	add	r0, sp, #48	; 0x30
 8014d14:	f7fa fce8 	bl	800f6e8 <ucdr_init_buffer>
 8014d18:	f10d 031a 	add.w	r3, sp, #26
 8014d1c:	aa06      	add	r2, sp, #24
 8014d1e:	a90c      	add	r1, sp, #48	; 0x30
 8014d20:	4640      	mov	r0, r8
 8014d22:	f88d 5018 	strb.w	r5, [sp, #24]
 8014d26:	f000 fbfb 	bl	8015520 <uxr_read_session_header>
 8014d2a:	b918      	cbnz	r0, 8014d34 <listen_message_reliably+0x184>
 8014d2c:	4620      	mov	r0, r4
 8014d2e:	b01d      	add	sp, #116	; 0x74
 8014d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d34:	4629      	mov	r1, r5
 8014d36:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014d3a:	f001 f915 	bl	8015f68 <uxr_stream_id_from_raw>
 8014d3e:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8014d42:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8014d46:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8014d4a:	2e01      	cmp	r6, #1
 8014d4c:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014d50:	d04b      	beq.n	8014dea <listen_message_reliably+0x23a>
 8014d52:	2e02      	cmp	r6, #2
 8014d54:	d00f      	beq.n	8014d76 <listen_message_reliably+0x1c6>
 8014d56:	2e00      	cmp	r6, #0
 8014d58:	d1e8      	bne.n	8014d2c <listen_message_reliably+0x17c>
 8014d5a:	4631      	mov	r1, r6
 8014d5c:	4630      	mov	r0, r6
 8014d5e:	f001 f903 	bl	8015f68 <uxr_stream_id_from_raw>
 8014d62:	4602      	mov	r2, r0
 8014d64:	a90c      	add	r1, sp, #48	; 0x30
 8014d66:	4640      	mov	r0, r8
 8014d68:	920a      	str	r2, [sp, #40]	; 0x28
 8014d6a:	f7ff fd97 	bl	801489c <read_submessage_list>
 8014d6e:	4620      	mov	r0, r4
 8014d70:	b01d      	add	sp, #116	; 0x74
 8014d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d76:	4629      	mov	r1, r5
 8014d78:	f108 0008 	add.w	r0, r8, #8
 8014d7c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8014d80:	f001 f9e0 	bl	8016144 <uxr_get_input_reliable_stream>
 8014d84:	4607      	mov	r7, r0
 8014d86:	b338      	cbz	r0, 8014dd8 <listen_message_reliably+0x228>
 8014d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014d8a:	a80c      	add	r0, sp, #48	; 0x30
 8014d8c:	9203      	str	r2, [sp, #12]
 8014d8e:	f7fa fcdd 	bl	800f74c <ucdr_buffer_remaining>
 8014d92:	4603      	mov	r3, r0
 8014d94:	f10d 0019 	add.w	r0, sp, #25
 8014d98:	9a03      	ldr	r2, [sp, #12]
 8014d9a:	4651      	mov	r1, sl
 8014d9c:	9000      	str	r0, [sp, #0]
 8014d9e:	4638      	mov	r0, r7
 8014da0:	f005 fe5c 	bl	801aa5c <uxr_receive_reliable_message>
 8014da4:	b1c0      	cbz	r0, 8014dd8 <listen_message_reliably+0x228>
 8014da6:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014daa:	b393      	cbz	r3, 8014e12 <listen_message_reliably+0x262>
 8014dac:	ae14      	add	r6, sp, #80	; 0x50
 8014dae:	f04f 0a02 	mov.w	sl, #2
 8014db2:	e00a      	b.n	8014dca <listen_message_reliably+0x21a>
 8014db4:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 8014db8:	4631      	mov	r1, r6
 8014dba:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 8014dbe:	4640      	mov	r0, r8
 8014dc0:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 8014dc4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014dc6:	f7ff fd69 	bl	801489c <read_submessage_list>
 8014dca:	2204      	movs	r2, #4
 8014dcc:	4631      	mov	r1, r6
 8014dce:	4638      	mov	r0, r7
 8014dd0:	f005 fec6 	bl	801ab60 <uxr_next_input_reliable_buffer_available>
 8014dd4:	2800      	cmp	r0, #0
 8014dd6:	d1ed      	bne.n	8014db4 <listen_message_reliably+0x204>
 8014dd8:	4640      	mov	r0, r8
 8014dda:	462a      	mov	r2, r5
 8014ddc:	4649      	mov	r1, r9
 8014dde:	f7ff fbd9 	bl	8014594 <write_submessage_acknack.isra.0>
 8014de2:	4620      	mov	r0, r4
 8014de4:	b01d      	add	sp, #116	; 0x74
 8014de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dea:	4629      	mov	r1, r5
 8014dec:	f108 0008 	add.w	r0, r8, #8
 8014df0:	f001 f99e 	bl	8016130 <uxr_get_input_best_effort_stream>
 8014df4:	2800      	cmp	r0, #0
 8014df6:	d099      	beq.n	8014d2c <listen_message_reliably+0x17c>
 8014df8:	4651      	mov	r1, sl
 8014dfa:	f005 fda5 	bl	801a948 <uxr_receive_best_effort_message>
 8014dfe:	2800      	cmp	r0, #0
 8014e00:	d094      	beq.n	8014d2c <listen_message_reliably+0x17c>
 8014e02:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014e06:	a90c      	add	r1, sp, #48	; 0x30
 8014e08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e0a:	4640      	mov	r0, r8
 8014e0c:	f7ff fd46 	bl	801489c <read_submessage_list>
 8014e10:	e78c      	b.n	8014d2c <listen_message_reliably+0x17c>
 8014e12:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 8014e16:	a90c      	add	r1, sp, #48	; 0x30
 8014e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014e1a:	4640      	mov	r0, r8
 8014e1c:	f7ff fd3e 	bl	801489c <read_submessage_list>
 8014e20:	e7c4      	b.n	8014dac <listen_message_reliably+0x1fc>
 8014e22:	bf00      	nop

08014e24 <uxr_run_session_timeout>:
 8014e24:	b570      	push	{r4, r5, r6, lr}
 8014e26:	4604      	mov	r4, r0
 8014e28:	460d      	mov	r5, r1
 8014e2a:	f001 f9f3 	bl	8016214 <uxr_millis>
 8014e2e:	4606      	mov	r6, r0
 8014e30:	4620      	mov	r0, r4
 8014e32:	f7ff fc77 	bl	8014724 <uxr_flash_output_streams>
 8014e36:	4629      	mov	r1, r5
 8014e38:	4620      	mov	r0, r4
 8014e3a:	f7ff feb9 	bl	8014bb0 <listen_message_reliably>
 8014e3e:	f001 f9e9 	bl	8016214 <uxr_millis>
 8014e42:	1b83      	subs	r3, r0, r6
 8014e44:	1ae9      	subs	r1, r5, r3
 8014e46:	2900      	cmp	r1, #0
 8014e48:	dcf6      	bgt.n	8014e38 <uxr_run_session_timeout+0x14>
 8014e4a:	f104 0008 	add.w	r0, r4, #8
 8014e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014e52:	f001 b983 	b.w	801615c <uxr_output_streams_confirmed>
 8014e56:	bf00      	nop

08014e58 <uxr_run_session_until_data>:
 8014e58:	b570      	push	{r4, r5, r6, lr}
 8014e5a:	4604      	mov	r4, r0
 8014e5c:	460d      	mov	r5, r1
 8014e5e:	f001 f9d9 	bl	8016214 <uxr_millis>
 8014e62:	4606      	mov	r6, r0
 8014e64:	4620      	mov	r0, r4
 8014e66:	f7ff fc5d 	bl	8014724 <uxr_flash_output_streams>
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	4629      	mov	r1, r5
 8014e6e:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 8014e72:	e005      	b.n	8014e80 <uxr_run_session_until_data+0x28>
 8014e74:	f001 f9ce 	bl	8016214 <uxr_millis>
 8014e78:	1b83      	subs	r3, r0, r6
 8014e7a:	1ae9      	subs	r1, r5, r3
 8014e7c:	2900      	cmp	r1, #0
 8014e7e:	dd07      	ble.n	8014e90 <uxr_run_session_until_data+0x38>
 8014e80:	4620      	mov	r0, r4
 8014e82:	f7ff fe95 	bl	8014bb0 <listen_message_reliably>
 8014e86:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8014e8a:	2800      	cmp	r0, #0
 8014e8c:	d0f2      	beq.n	8014e74 <uxr_run_session_until_data+0x1c>
 8014e8e:	bd70      	pop	{r4, r5, r6, pc}
 8014e90:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8014e94:	bd70      	pop	{r4, r5, r6, pc}
 8014e96:	bf00      	nop

08014e98 <uxr_run_session_until_confirm_delivery>:
 8014e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e9c:	4606      	mov	r6, r0
 8014e9e:	460d      	mov	r5, r1
 8014ea0:	f001 f9b8 	bl	8016214 <uxr_millis>
 8014ea4:	4607      	mov	r7, r0
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	f106 0808 	add.w	r8, r6, #8
 8014eac:	f7ff fc3a 	bl	8014724 <uxr_flash_output_streams>
 8014eb0:	2d00      	cmp	r5, #0
 8014eb2:	db10      	blt.n	8014ed6 <uxr_run_session_until_confirm_delivery+0x3e>
 8014eb4:	462c      	mov	r4, r5
 8014eb6:	e006      	b.n	8014ec6 <uxr_run_session_until_confirm_delivery+0x2e>
 8014eb8:	f7ff fe7a 	bl	8014bb0 <listen_message_reliably>
 8014ebc:	f001 f9aa 	bl	8016214 <uxr_millis>
 8014ec0:	1bc3      	subs	r3, r0, r7
 8014ec2:	1aec      	subs	r4, r5, r3
 8014ec4:	d407      	bmi.n	8014ed6 <uxr_run_session_until_confirm_delivery+0x3e>
 8014ec6:	4640      	mov	r0, r8
 8014ec8:	f001 f948 	bl	801615c <uxr_output_streams_confirmed>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	4621      	mov	r1, r4
 8014ed0:	4630      	mov	r0, r6
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d0f0      	beq.n	8014eb8 <uxr_run_session_until_confirm_delivery+0x20>
 8014ed6:	4640      	mov	r0, r8
 8014ed8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014edc:	f001 b93e 	b.w	801615c <uxr_output_streams_confirmed>

08014ee0 <uxr_run_session_until_all_status>:
 8014ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ee4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8014ee8:	4606      	mov	r6, r0
 8014eea:	4688      	mov	r8, r1
 8014eec:	4692      	mov	sl, r2
 8014eee:	461f      	mov	r7, r3
 8014ef0:	f7ff fc18 	bl	8014724 <uxr_flash_output_streams>
 8014ef4:	f1bb 0f00 	cmp.w	fp, #0
 8014ef8:	d004      	beq.n	8014f04 <uxr_run_session_until_all_status+0x24>
 8014efa:	465a      	mov	r2, fp
 8014efc:	21ff      	movs	r1, #255	; 0xff
 8014efe:	4638      	mov	r0, r7
 8014f00:	f007 fa84 	bl	801c40c <memset>
 8014f04:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8014f08:	1e7d      	subs	r5, r7, #1
 8014f0a:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 8014f0e:	f001 f981 	bl	8016214 <uxr_millis>
 8014f12:	4641      	mov	r1, r8
 8014f14:	4681      	mov	r9, r0
 8014f16:	4630      	mov	r0, r6
 8014f18:	f7ff fe4a 	bl	8014bb0 <listen_message_reliably>
 8014f1c:	f001 f97a 	bl	8016214 <uxr_millis>
 8014f20:	eba0 0009 	sub.w	r0, r0, r9
 8014f24:	eba8 0100 	sub.w	r1, r8, r0
 8014f28:	f1bb 0f00 	cmp.w	fp, #0
 8014f2c:	d029      	beq.n	8014f82 <uxr_run_session_until_all_status+0xa2>
 8014f2e:	46ae      	mov	lr, r5
 8014f30:	f04f 0c00 	mov.w	ip, #0
 8014f34:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8014f38:	2cff      	cmp	r4, #255	; 0xff
 8014f3a:	d015      	beq.n	8014f68 <uxr_run_session_until_all_status+0x88>
 8014f3c:	f10c 0c01 	add.w	ip, ip, #1
 8014f40:	45e3      	cmp	fp, ip
 8014f42:	d8f7      	bhi.n	8014f34 <uxr_run_session_until_all_status+0x54>
 8014f44:	2300      	movs	r3, #0
 8014f46:	67f3      	str	r3, [r6, #124]	; 0x7c
 8014f48:	e000      	b.n	8014f4c <uxr_run_session_until_all_status+0x6c>
 8014f4a:	b158      	cbz	r0, 8014f64 <uxr_run_session_until_all_status+0x84>
 8014f4c:	462b      	mov	r3, r5
 8014f4e:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8014f52:	3302      	adds	r3, #2
 8014f54:	2801      	cmp	r0, #1
 8014f56:	eba3 0307 	sub.w	r3, r3, r7
 8014f5a:	bf8c      	ite	hi
 8014f5c:	2000      	movhi	r0, #0
 8014f5e:	2001      	movls	r0, #1
 8014f60:	459b      	cmp	fp, r3
 8014f62:	d8f2      	bhi.n	8014f4a <uxr_run_session_until_all_status+0x6a>
 8014f64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f68:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8014f6c:	f10c 0c01 	add.w	ip, ip, #1
 8014f70:	45dc      	cmp	ip, fp
 8014f72:	d201      	bcs.n	8014f78 <uxr_run_session_until_all_status+0x98>
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d0dd      	beq.n	8014f34 <uxr_run_session_until_all_status+0x54>
 8014f78:	2900      	cmp	r1, #0
 8014f7a:	dde3      	ble.n	8014f44 <uxr_run_session_until_all_status+0x64>
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d1ca      	bne.n	8014f16 <uxr_run_session_until_all_status+0x36>
 8014f80:	e7e0      	b.n	8014f44 <uxr_run_session_until_all_status+0x64>
 8014f82:	2001      	movs	r0, #1
 8014f84:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8014f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014f8c <wait_session_status>:
 8014f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014f90:	4604      	mov	r4, r0
 8014f92:	b09d      	sub	sp, #116	; 0x74
 8014f94:	20ff      	movs	r0, #255	; 0xff
 8014f96:	9303      	str	r3, [sp, #12]
 8014f98:	7160      	strb	r0, [r4, #5]
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	f000 80b6 	beq.w	801510c <wait_session_status+0x180>
 8014fa0:	4689      	mov	r9, r1
 8014fa2:	4692      	mov	sl, r2
 8014fa4:	f04f 0b00 	mov.w	fp, #0
 8014fa8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014faa:	4652      	mov	r2, sl
 8014fac:	4649      	mov	r1, r9
 8014fae:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014fb2:	47a8      	blx	r5
 8014fb4:	f001 f92e 	bl	8016214 <uxr_millis>
 8014fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014fbc:	4605      	mov	r5, r0
 8014fbe:	e009      	b.n	8014fd4 <wait_session_status+0x48>
 8014fc0:	f001 f928 	bl	8016214 <uxr_millis>
 8014fc4:	1b40      	subs	r0, r0, r5
 8014fc6:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	dd40      	ble.n	8015050 <wait_session_status+0xc4>
 8014fce:	7960      	ldrb	r0, [r4, #5]
 8014fd0:	28ff      	cmp	r0, #255	; 0xff
 8014fd2:	d145      	bne.n	8015060 <wait_session_status+0xd4>
 8014fd4:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8014fd6:	a908      	add	r1, sp, #32
 8014fd8:	6896      	ldr	r6, [r2, #8]
 8014fda:	6810      	ldr	r0, [r2, #0]
 8014fdc:	aa09      	add	r2, sp, #36	; 0x24
 8014fde:	47b0      	blx	r6
 8014fe0:	2800      	cmp	r0, #0
 8014fe2:	d0ed      	beq.n	8014fc0 <wait_session_status+0x34>
 8014fe4:	a80c      	add	r0, sp, #48	; 0x30
 8014fe6:	2600      	movs	r6, #0
 8014fe8:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8014fec:	f7fa fb7c 	bl	800f6e8 <ucdr_init_buffer>
 8014ff0:	f10d 031e 	add.w	r3, sp, #30
 8014ff4:	aa07      	add	r2, sp, #28
 8014ff6:	a90c      	add	r1, sp, #48	; 0x30
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	f88d 601c 	strb.w	r6, [sp, #28]
 8014ffe:	f000 fa8f 	bl	8015520 <uxr_read_session_header>
 8015002:	2800      	cmp	r0, #0
 8015004:	d0dc      	beq.n	8014fc0 <wait_session_status+0x34>
 8015006:	4631      	mov	r1, r6
 8015008:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801500c:	f000 ffac 	bl	8015f68 <uxr_stream_id_from_raw>
 8015010:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015014:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8015018:	f3c0 2607 	ubfx	r6, r0, #8, #8
 801501c:	2f01      	cmp	r7, #1
 801501e:	9302      	str	r3, [sp, #8]
 8015020:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8015024:	d05c      	beq.n	80150e0 <wait_session_status+0x154>
 8015026:	2f02      	cmp	r7, #2
 8015028:	d020      	beq.n	801506c <wait_session_status+0xe0>
 801502a:	2f00      	cmp	r7, #0
 801502c:	d1c8      	bne.n	8014fc0 <wait_session_status+0x34>
 801502e:	4639      	mov	r1, r7
 8015030:	4638      	mov	r0, r7
 8015032:	f000 ff99 	bl	8015f68 <uxr_stream_id_from_raw>
 8015036:	a90c      	add	r1, sp, #48	; 0x30
 8015038:	4602      	mov	r2, r0
 801503a:	900b      	str	r0, [sp, #44]	; 0x2c
 801503c:	4620      	mov	r0, r4
 801503e:	f7ff fc2d 	bl	801489c <read_submessage_list>
 8015042:	f001 f8e7 	bl	8016214 <uxr_millis>
 8015046:	1b40      	subs	r0, r0, r5
 8015048:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 801504c:	2b00      	cmp	r3, #0
 801504e:	dcbe      	bgt.n	8014fce <wait_session_status+0x42>
 8015050:	f10b 0b01 	add.w	fp, fp, #1
 8015054:	9b03      	ldr	r3, [sp, #12]
 8015056:	7960      	ldrb	r0, [r4, #5]
 8015058:	455b      	cmp	r3, fp
 801505a:	d001      	beq.n	8015060 <wait_session_status+0xd4>
 801505c:	28ff      	cmp	r0, #255	; 0xff
 801505e:	d0a3      	beq.n	8014fa8 <wait_session_status+0x1c>
 8015060:	38ff      	subs	r0, #255	; 0xff
 8015062:	bf18      	it	ne
 8015064:	2001      	movne	r0, #1
 8015066:	b01d      	add	sp, #116	; 0x74
 8015068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801506c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8015070:	4631      	mov	r1, r6
 8015072:	f104 0008 	add.w	r0, r4, #8
 8015076:	9304      	str	r3, [sp, #16]
 8015078:	f001 f864 	bl	8016144 <uxr_get_input_reliable_stream>
 801507c:	4680      	mov	r8, r0
 801507e:	b348      	cbz	r0, 80150d4 <wait_session_status+0x148>
 8015080:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015082:	a80c      	add	r0, sp, #48	; 0x30
 8015084:	9205      	str	r2, [sp, #20]
 8015086:	f7fa fb61 	bl	800f74c <ucdr_buffer_remaining>
 801508a:	4603      	mov	r3, r0
 801508c:	f10d 001d 	add.w	r0, sp, #29
 8015090:	9a05      	ldr	r2, [sp, #20]
 8015092:	9000      	str	r0, [sp, #0]
 8015094:	4640      	mov	r0, r8
 8015096:	9902      	ldr	r1, [sp, #8]
 8015098:	f005 fce0 	bl	801aa5c <uxr_receive_reliable_message>
 801509c:	b1d0      	cbz	r0, 80150d4 <wait_session_status+0x148>
 801509e:	f89d 301d 	ldrb.w	r3, [sp, #29]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d03a      	beq.n	801511c <wait_session_status+0x190>
 80150a6:	9f04      	ldr	r7, [sp, #16]
 80150a8:	e00a      	b.n	80150c0 <wait_session_status+0x134>
 80150aa:	f04f 0302 	mov.w	r3, #2
 80150ae:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 80150b2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 80150b6:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 80150ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80150bc:	f7ff fbee 	bl	801489c <read_submessage_list>
 80150c0:	a914      	add	r1, sp, #80	; 0x50
 80150c2:	2204      	movs	r2, #4
 80150c4:	4640      	mov	r0, r8
 80150c6:	f005 fd4b 	bl	801ab60 <uxr_next_input_reliable_buffer_available>
 80150ca:	4603      	mov	r3, r0
 80150cc:	a914      	add	r1, sp, #80	; 0x50
 80150ce:	4620      	mov	r0, r4
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d1ea      	bne.n	80150aa <wait_session_status+0x11e>
 80150d4:	4632      	mov	r2, r6
 80150d6:	9904      	ldr	r1, [sp, #16]
 80150d8:	4620      	mov	r0, r4
 80150da:	f7ff fa5b 	bl	8014594 <write_submessage_acknack.isra.0>
 80150de:	e76f      	b.n	8014fc0 <wait_session_status+0x34>
 80150e0:	4631      	mov	r1, r6
 80150e2:	f104 0008 	add.w	r0, r4, #8
 80150e6:	f001 f823 	bl	8016130 <uxr_get_input_best_effort_stream>
 80150ea:	2800      	cmp	r0, #0
 80150ec:	f43f af68 	beq.w	8014fc0 <wait_session_status+0x34>
 80150f0:	9902      	ldr	r1, [sp, #8]
 80150f2:	f005 fc29 	bl	801a948 <uxr_receive_best_effort_message>
 80150f6:	2800      	cmp	r0, #0
 80150f8:	f43f af62 	beq.w	8014fc0 <wait_session_status+0x34>
 80150fc:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8015100:	a90c      	add	r1, sp, #48	; 0x30
 8015102:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015104:	4620      	mov	r0, r4
 8015106:	f7ff fbc9 	bl	801489c <read_submessage_list>
 801510a:	e759      	b.n	8014fc0 <wait_session_status+0x34>
 801510c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801510e:	e9d3 0400 	ldrd	r0, r4, [r3]
 8015112:	47a0      	blx	r4
 8015114:	2001      	movs	r0, #1
 8015116:	b01d      	add	sp, #116	; 0x74
 8015118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801511c:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8015120:	a90c      	add	r1, sp, #48	; 0x30
 8015122:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015124:	4620      	mov	r0, r4
 8015126:	f7ff fbb9 	bl	801489c <read_submessage_list>
 801512a:	e7bc      	b.n	80150a6 <wait_session_status+0x11a>

0801512c <uxr_delete_session_retries>:
 801512c:	b530      	push	{r4, r5, lr}
 801512e:	b08f      	sub	sp, #60	; 0x3c
 8015130:	4604      	mov	r4, r0
 8015132:	460d      	mov	r5, r1
 8015134:	f000 fa34 	bl	80155a0 <uxr_session_header_offset>
 8015138:	2300      	movs	r3, #0
 801513a:	2210      	movs	r2, #16
 801513c:	a902      	add	r1, sp, #8
 801513e:	9000      	str	r0, [sp, #0]
 8015140:	a806      	add	r0, sp, #24
 8015142:	f7fa fabf 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 8015146:	a906      	add	r1, sp, #24
 8015148:	4620      	mov	r0, r4
 801514a:	f000 f979 	bl	8015440 <uxr_buffer_delete_session>
 801514e:	2200      	movs	r2, #0
 8015150:	9b06      	ldr	r3, [sp, #24]
 8015152:	4620      	mov	r0, r4
 8015154:	4611      	mov	r1, r2
 8015156:	f000 f9cf 	bl	80154f8 <uxr_stamp_session_header>
 801515a:	a806      	add	r0, sp, #24
 801515c:	f7fa faf2 	bl	800f744 <ucdr_buffer_length>
 8015160:	462b      	mov	r3, r5
 8015162:	4602      	mov	r2, r0
 8015164:	a902      	add	r1, sp, #8
 8015166:	4620      	mov	r0, r4
 8015168:	f7ff ff10 	bl	8014f8c <wait_session_status>
 801516c:	b118      	cbz	r0, 8015176 <uxr_delete_session_retries+0x4a>
 801516e:	7960      	ldrb	r0, [r4, #5]
 8015170:	fab0 f080 	clz	r0, r0
 8015174:	0940      	lsrs	r0, r0, #5
 8015176:	b00f      	add	sp, #60	; 0x3c
 8015178:	bd30      	pop	{r4, r5, pc}
 801517a:	bf00      	nop

0801517c <uxr_create_session>:
 801517c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015180:	f100 0b08 	add.w	fp, r0, #8
 8015184:	4604      	mov	r4, r0
 8015186:	b0ab      	sub	sp, #172	; 0xac
 8015188:	4658      	mov	r0, fp
 801518a:	465e      	mov	r6, fp
 801518c:	f000 ff22 	bl	8015fd4 <uxr_reset_stream_storage>
 8015190:	4620      	mov	r0, r4
 8015192:	f000 fa05 	bl	80155a0 <uxr_session_header_offset>
 8015196:	2300      	movs	r3, #0
 8015198:	221c      	movs	r2, #28
 801519a:	a90b      	add	r1, sp, #44	; 0x2c
 801519c:	9000      	str	r0, [sp, #0]
 801519e:	a812      	add	r0, sp, #72	; 0x48
 80151a0:	f7fa fa90 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 80151a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80151a6:	a912      	add	r1, sp, #72	; 0x48
 80151a8:	4620      	mov	r0, r4
 80151aa:	8a1a      	ldrh	r2, [r3, #16]
 80151ac:	3a04      	subs	r2, #4
 80151ae:	b292      	uxth	r2, r2
 80151b0:	f000 f91c 	bl	80153ec <uxr_buffer_create_session>
 80151b4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80151b6:	4620      	mov	r0, r4
 80151b8:	f000 f98a 	bl	80154d0 <uxr_stamp_create_session_header>
 80151bc:	a812      	add	r0, sp, #72	; 0x48
 80151be:	f7fa fac1 	bl	800f744 <ucdr_buffer_length>
 80151c2:	23ff      	movs	r3, #255	; 0xff
 80151c4:	4681      	mov	r9, r0
 80151c6:	7163      	strb	r3, [r4, #5]
 80151c8:	230a      	movs	r3, #10
 80151ca:	9303      	str	r3, [sp, #12]
 80151cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80151ce:	464a      	mov	r2, r9
 80151d0:	a90b      	add	r1, sp, #44	; 0x2c
 80151d2:	e9d3 0500 	ldrd	r0, r5, [r3]
 80151d6:	47a8      	blx	r5
 80151d8:	f001 f81c 	bl	8016214 <uxr_millis>
 80151dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80151e0:	4605      	mov	r5, r0
 80151e2:	e009      	b.n	80151f8 <uxr_create_session+0x7c>
 80151e4:	f001 f816 	bl	8016214 <uxr_millis>
 80151e8:	1b40      	subs	r0, r0, r5
 80151ea:	7962      	ldrb	r2, [r4, #5]
 80151ec:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	dd38      	ble.n	8015266 <uxr_create_session+0xea>
 80151f4:	2aff      	cmp	r2, #255	; 0xff
 80151f6:	d13c      	bne.n	8015272 <uxr_create_session+0xf6>
 80151f8:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80151fa:	a907      	add	r1, sp, #28
 80151fc:	6897      	ldr	r7, [r2, #8]
 80151fe:	6810      	ldr	r0, [r2, #0]
 8015200:	aa08      	add	r2, sp, #32
 8015202:	47b8      	blx	r7
 8015204:	2800      	cmp	r0, #0
 8015206:	d0ed      	beq.n	80151e4 <uxr_create_session+0x68>
 8015208:	a81a      	add	r0, sp, #104	; 0x68
 801520a:	2700      	movs	r7, #0
 801520c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8015210:	f7fa fa6a 	bl	800f6e8 <ucdr_init_buffer>
 8015214:	f10d 031a 	add.w	r3, sp, #26
 8015218:	aa06      	add	r2, sp, #24
 801521a:	a91a      	add	r1, sp, #104	; 0x68
 801521c:	4620      	mov	r0, r4
 801521e:	f88d 7018 	strb.w	r7, [sp, #24]
 8015222:	f000 f97d 	bl	8015520 <uxr_read_session_header>
 8015226:	2800      	cmp	r0, #0
 8015228:	d0dc      	beq.n	80151e4 <uxr_create_session+0x68>
 801522a:	4639      	mov	r1, r7
 801522c:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8015230:	f000 fe9a 	bl	8015f68 <uxr_stream_id_from_raw>
 8015234:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8015238:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 801523c:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8015240:	2f01      	cmp	r7, #1
 8015242:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8015246:	d053      	beq.n	80152f0 <uxr_create_session+0x174>
 8015248:	2f02      	cmp	r7, #2
 801524a:	d018      	beq.n	801527e <uxr_create_session+0x102>
 801524c:	2f00      	cmp	r7, #0
 801524e:	d1c9      	bne.n	80151e4 <uxr_create_session+0x68>
 8015250:	4639      	mov	r1, r7
 8015252:	4638      	mov	r0, r7
 8015254:	f000 fe88 	bl	8015f68 <uxr_stream_id_from_raw>
 8015258:	a91a      	add	r1, sp, #104	; 0x68
 801525a:	4602      	mov	r2, r0
 801525c:	900a      	str	r0, [sp, #40]	; 0x28
 801525e:	4620      	mov	r0, r4
 8015260:	f7ff fb1c 	bl	801489c <read_submessage_list>
 8015264:	e7be      	b.n	80151e4 <uxr_create_session+0x68>
 8015266:	9b03      	ldr	r3, [sp, #12]
 8015268:	3b01      	subs	r3, #1
 801526a:	9303      	str	r3, [sp, #12]
 801526c:	d001      	beq.n	8015272 <uxr_create_session+0xf6>
 801526e:	2aff      	cmp	r2, #255	; 0xff
 8015270:	d0ac      	beq.n	80151cc <uxr_create_session+0x50>
 8015272:	2a00      	cmp	r2, #0
 8015274:	d051      	beq.n	801531a <uxr_create_session+0x19e>
 8015276:	2000      	movs	r0, #0
 8015278:	b02b      	add	sp, #172	; 0xac
 801527a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801527e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8015282:	4641      	mov	r1, r8
 8015284:	4630      	mov	r0, r6
 8015286:	9304      	str	r3, [sp, #16]
 8015288:	f000 ff5c 	bl	8016144 <uxr_get_input_reliable_stream>
 801528c:	4682      	mov	sl, r0
 801528e:	b348      	cbz	r0, 80152e4 <uxr_create_session+0x168>
 8015290:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015292:	a81a      	add	r0, sp, #104	; 0x68
 8015294:	9205      	str	r2, [sp, #20]
 8015296:	f7fa fa59 	bl	800f74c <ucdr_buffer_remaining>
 801529a:	4603      	mov	r3, r0
 801529c:	f10d 0019 	add.w	r0, sp, #25
 80152a0:	9a05      	ldr	r2, [sp, #20]
 80152a2:	4659      	mov	r1, fp
 80152a4:	9000      	str	r0, [sp, #0]
 80152a6:	4650      	mov	r0, sl
 80152a8:	f005 fbd8 	bl	801aa5c <uxr_receive_reliable_message>
 80152ac:	b1d0      	cbz	r0, 80152e4 <uxr_create_session+0x168>
 80152ae:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d038      	beq.n	8015328 <uxr_create_session+0x1ac>
 80152b6:	9f04      	ldr	r7, [sp, #16]
 80152b8:	e00a      	b.n	80152d0 <uxr_create_session+0x154>
 80152ba:	f04f 0302 	mov.w	r3, #2
 80152be:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 80152c2:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 80152c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80152ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80152cc:	f7ff fae6 	bl	801489c <read_submessage_list>
 80152d0:	a922      	add	r1, sp, #136	; 0x88
 80152d2:	2204      	movs	r2, #4
 80152d4:	4650      	mov	r0, sl
 80152d6:	f005 fc43 	bl	801ab60 <uxr_next_input_reliable_buffer_available>
 80152da:	4603      	mov	r3, r0
 80152dc:	a922      	add	r1, sp, #136	; 0x88
 80152de:	4620      	mov	r0, r4
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d1ea      	bne.n	80152ba <uxr_create_session+0x13e>
 80152e4:	4642      	mov	r2, r8
 80152e6:	9904      	ldr	r1, [sp, #16]
 80152e8:	4620      	mov	r0, r4
 80152ea:	f7ff f953 	bl	8014594 <write_submessage_acknack.isra.0>
 80152ee:	e779      	b.n	80151e4 <uxr_create_session+0x68>
 80152f0:	4641      	mov	r1, r8
 80152f2:	4630      	mov	r0, r6
 80152f4:	f000 ff1c 	bl	8016130 <uxr_get_input_best_effort_stream>
 80152f8:	2800      	cmp	r0, #0
 80152fa:	f43f af73 	beq.w	80151e4 <uxr_create_session+0x68>
 80152fe:	4659      	mov	r1, fp
 8015300:	f005 fb22 	bl	801a948 <uxr_receive_best_effort_message>
 8015304:	2800      	cmp	r0, #0
 8015306:	f43f af6d 	beq.w	80151e4 <uxr_create_session+0x68>
 801530a:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 801530e:	a91a      	add	r1, sp, #104	; 0x68
 8015310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015312:	4620      	mov	r0, r4
 8015314:	f7ff fac2 	bl	801489c <read_submessage_list>
 8015318:	e764      	b.n	80151e4 <uxr_create_session+0x68>
 801531a:	4630      	mov	r0, r6
 801531c:	f000 fe5a 	bl	8015fd4 <uxr_reset_stream_storage>
 8015320:	2001      	movs	r0, #1
 8015322:	b02b      	add	sp, #172	; 0xac
 8015324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015328:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 801532c:	a91a      	add	r1, sp, #104	; 0x68
 801532e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015330:	4620      	mov	r0, r4
 8015332:	f7ff fab3 	bl	801489c <read_submessage_list>
 8015336:	e7be      	b.n	80152b6 <uxr_create_session+0x13a>

08015338 <uxr_prepare_stream_to_write_submessage>:
 8015338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801533c:	b082      	sub	sp, #8
 801533e:	4604      	mov	r4, r0
 8015340:	4610      	mov	r0, r2
 8015342:	4615      	mov	r5, r2
 8015344:	461e      	mov	r6, r3
 8015346:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 801534a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 801534e:	f105 0904 	add.w	r9, r5, #4
 8015352:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8015356:	9101      	str	r1, [sp, #4]
 8015358:	f000 ff56 	bl	8016208 <uxr_submessage_padding>
 801535c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8015360:	4481      	add	r9, r0
 8015362:	2b01      	cmp	r3, #1
 8015364:	d01d      	beq.n	80153a2 <uxr_prepare_stream_to_write_submessage+0x6a>
 8015366:	2b02      	cmp	r3, #2
 8015368:	d116      	bne.n	8015398 <uxr_prepare_stream_to_write_submessage+0x60>
 801536a:	f104 0008 	add.w	r0, r4, #8
 801536e:	4651      	mov	r1, sl
 8015370:	f000 fed2 	bl	8016118 <uxr_get_output_reliable_stream>
 8015374:	4604      	mov	r4, r0
 8015376:	b158      	cbz	r0, 8015390 <uxr_prepare_stream_to_write_submessage+0x58>
 8015378:	4649      	mov	r1, r9
 801537a:	4632      	mov	r2, r6
 801537c:	f005 fdb6 	bl	801aeec <uxr_prepare_reliable_buffer_to_write>
 8015380:	4604      	mov	r4, r0
 8015382:	b12c      	cbz	r4, 8015390 <uxr_prepare_stream_to_write_submessage+0x58>
 8015384:	4643      	mov	r3, r8
 8015386:	b2aa      	uxth	r2, r5
 8015388:	4639      	mov	r1, r7
 801538a:	4630      	mov	r0, r6
 801538c:	f000 fefc 	bl	8016188 <uxr_buffer_submessage_header>
 8015390:	4620      	mov	r0, r4
 8015392:	b002      	add	sp, #8
 8015394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015398:	2400      	movs	r4, #0
 801539a:	4620      	mov	r0, r4
 801539c:	b002      	add	sp, #8
 801539e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153a2:	f104 0008 	add.w	r0, r4, #8
 80153a6:	4651      	mov	r1, sl
 80153a8:	f000 feae 	bl	8016108 <uxr_get_output_best_effort_stream>
 80153ac:	4604      	mov	r4, r0
 80153ae:	2800      	cmp	r0, #0
 80153b0:	d0ee      	beq.n	8015390 <uxr_prepare_stream_to_write_submessage+0x58>
 80153b2:	4649      	mov	r1, r9
 80153b4:	4632      	mov	r2, r6
 80153b6:	f005 fcc3 	bl	801ad40 <uxr_prepare_best_effort_buffer_to_write>
 80153ba:	4604      	mov	r4, r0
 80153bc:	e7e1      	b.n	8015382 <uxr_prepare_stream_to_write_submessage+0x4a>
 80153be:	bf00      	nop

080153c0 <uxr_init_session_info>:
 80153c0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80153c4:	23ff      	movs	r3, #255	; 0xff
 80153c6:	7102      	strb	r2, [r0, #4]
 80153c8:	f880 c001 	strb.w	ip, [r0, #1]
 80153cc:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80153d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80153d4:	7001      	strb	r1, [r0, #0]
 80153d6:	f880 c002 	strb.w	ip, [r0, #2]
 80153da:	7143      	strb	r3, [r0, #5]
 80153dc:	70c2      	strb	r2, [r0, #3]
 80153de:	b500      	push	{lr}
 80153e0:	f04f 0e09 	mov.w	lr, #9
 80153e4:	f8a0 e006 	strh.w	lr, [r0, #6]
 80153e8:	f85d fb04 	ldr.w	pc, [sp], #4

080153ec <uxr_buffer_create_session>:
 80153ec:	b530      	push	{r4, r5, lr}
 80153ee:	2300      	movs	r3, #0
 80153f0:	b089      	sub	sp, #36	; 0x24
 80153f2:	4d12      	ldr	r5, [pc, #72]	; (801543c <uxr_buffer_create_session+0x50>)
 80153f4:	460c      	mov	r4, r1
 80153f6:	9307      	str	r3, [sp, #28]
 80153f8:	4619      	mov	r1, r3
 80153fa:	f8ad 201c 	strh.w	r2, [sp, #28]
 80153fe:	2201      	movs	r2, #1
 8015400:	9301      	str	r3, [sp, #4]
 8015402:	80c2      	strh	r2, [r0, #6]
 8015404:	f88d 2004 	strb.w	r2, [sp, #4]
 8015408:	682a      	ldr	r2, [r5, #0]
 801540a:	9303      	str	r3, [sp, #12]
 801540c:	9200      	str	r2, [sp, #0]
 801540e:	88aa      	ldrh	r2, [r5, #4]
 8015410:	9306      	str	r3, [sp, #24]
 8015412:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015416:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801541a:	9202      	str	r2, [sp, #8]
 801541c:	7802      	ldrb	r2, [r0, #0]
 801541e:	4620      	mov	r0, r4
 8015420:	f88d 200c 	strb.w	r2, [sp, #12]
 8015424:	2210      	movs	r2, #16
 8015426:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801542a:	f000 fead 	bl	8016188 <uxr_buffer_submessage_header>
 801542e:	4669      	mov	r1, sp
 8015430:	4620      	mov	r0, r4
 8015432:	f001 ff1f 	bl	8017274 <uxr_serialize_CREATE_CLIENT_Payload>
 8015436:	b009      	add	sp, #36	; 0x24
 8015438:	bd30      	pop	{r4, r5, pc}
 801543a:	bf00      	nop
 801543c:	0801d3a8 	.word	0x0801d3a8

08015440 <uxr_buffer_delete_session>:
 8015440:	4a0c      	ldr	r2, [pc, #48]	; (8015474 <uxr_buffer_delete_session+0x34>)
 8015442:	2302      	movs	r3, #2
 8015444:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8015448:	b510      	push	{r4, lr}
 801544a:	460c      	mov	r4, r1
 801544c:	b082      	sub	sp, #8
 801544e:	8911      	ldrh	r1, [r2, #8]
 8015450:	2204      	movs	r2, #4
 8015452:	80c3      	strh	r3, [r0, #6]
 8015454:	2300      	movs	r3, #0
 8015456:	f8ad 1006 	strh.w	r1, [sp, #6]
 801545a:	4620      	mov	r0, r4
 801545c:	2103      	movs	r1, #3
 801545e:	f8ad c004 	strh.w	ip, [sp, #4]
 8015462:	f000 fe91 	bl	8016188 <uxr_buffer_submessage_header>
 8015466:	a901      	add	r1, sp, #4
 8015468:	4620      	mov	r0, r4
 801546a:	f001 ffab 	bl	80173c4 <uxr_serialize_DELETE_Payload>
 801546e:	b002      	add	sp, #8
 8015470:	bd10      	pop	{r4, pc}
 8015472:	bf00      	nop
 8015474:	0801d3a8 	.word	0x0801d3a8

08015478 <uxr_read_create_session_status>:
 8015478:	b510      	push	{r4, lr}
 801547a:	460b      	mov	r3, r1
 801547c:	b088      	sub	sp, #32
 801547e:	4604      	mov	r4, r0
 8015480:	a901      	add	r1, sp, #4
 8015482:	4618      	mov	r0, r3
 8015484:	f001 ffae 	bl	80173e4 <uxr_deserialize_STATUS_AGENT_Payload>
 8015488:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801548c:	7163      	strb	r3, [r4, #5]
 801548e:	b008      	add	sp, #32
 8015490:	bd10      	pop	{r4, pc}
 8015492:	bf00      	nop

08015494 <uxr_read_delete_session_status>:
 8015494:	b510      	push	{r4, lr}
 8015496:	b084      	sub	sp, #16
 8015498:	4604      	mov	r4, r0
 801549a:	4608      	mov	r0, r1
 801549c:	a902      	add	r1, sp, #8
 801549e:	f001 ffd1 	bl	8017444 <uxr_deserialize_STATUS_Payload>
 80154a2:	88e3      	ldrh	r3, [r4, #6]
 80154a4:	2b02      	cmp	r3, #2
 80154a6:	d001      	beq.n	80154ac <uxr_read_delete_session_status+0x18>
 80154a8:	b004      	add	sp, #16
 80154aa:	bd10      	pop	{r4, pc}
 80154ac:	f10d 000a 	add.w	r0, sp, #10
 80154b0:	f7fe fec6 	bl	8014240 <uxr_object_id_from_raw>
 80154b4:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80154b8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80154bc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	2b02      	cmp	r3, #2
 80154c4:	d1f0      	bne.n	80154a8 <uxr_read_delete_session_status+0x14>
 80154c6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80154ca:	7163      	strb	r3, [r4, #5]
 80154cc:	e7ec      	b.n	80154a8 <uxr_read_delete_session_status+0x14>
 80154ce:	bf00      	nop

080154d0 <uxr_stamp_create_session_header>:
 80154d0:	b510      	push	{r4, lr}
 80154d2:	2208      	movs	r2, #8
 80154d4:	b08a      	sub	sp, #40	; 0x28
 80154d6:	4604      	mov	r4, r0
 80154d8:	eb0d 0002 	add.w	r0, sp, r2
 80154dc:	f7fa f904 	bl	800f6e8 <ucdr_init_buffer>
 80154e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80154e4:	2300      	movs	r3, #0
 80154e6:	a802      	add	r0, sp, #8
 80154e8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80154ec:	9400      	str	r4, [sp, #0]
 80154ee:	461a      	mov	r2, r3
 80154f0:	f001 f846 	bl	8016580 <uxr_serialize_message_header>
 80154f4:	b00a      	add	sp, #40	; 0x28
 80154f6:	bd10      	pop	{r4, pc}

080154f8 <uxr_stamp_session_header>:
 80154f8:	b530      	push	{r4, r5, lr}
 80154fa:	b08d      	sub	sp, #52	; 0x34
 80154fc:	4604      	mov	r4, r0
 80154fe:	460d      	mov	r5, r1
 8015500:	4619      	mov	r1, r3
 8015502:	a804      	add	r0, sp, #16
 8015504:	9203      	str	r2, [sp, #12]
 8015506:	2208      	movs	r2, #8
 8015508:	f7fa f8ee 	bl	800f6e8 <ucdr_init_buffer>
 801550c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015510:	9b03      	ldr	r3, [sp, #12]
 8015512:	462a      	mov	r2, r5
 8015514:	a804      	add	r0, sp, #16
 8015516:	9400      	str	r4, [sp, #0]
 8015518:	f001 f832 	bl	8016580 <uxr_serialize_message_header>
 801551c:	b00d      	add	sp, #52	; 0x34
 801551e:	bd30      	pop	{r4, r5, pc}

08015520 <uxr_read_session_header>:
 8015520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015524:	4607      	mov	r7, r0
 8015526:	b084      	sub	sp, #16
 8015528:	4608      	mov	r0, r1
 801552a:	460c      	mov	r4, r1
 801552c:	4615      	mov	r5, r2
 801552e:	461e      	mov	r6, r3
 8015530:	f7fa f90c 	bl	800f74c <ucdr_buffer_remaining>
 8015534:	2808      	cmp	r0, #8
 8015536:	d803      	bhi.n	8015540 <uxr_read_session_header+0x20>
 8015538:	2000      	movs	r0, #0
 801553a:	b004      	add	sp, #16
 801553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015540:	f10d 080c 	add.w	r8, sp, #12
 8015544:	4633      	mov	r3, r6
 8015546:	462a      	mov	r2, r5
 8015548:	4620      	mov	r0, r4
 801554a:	f10d 010b 	add.w	r1, sp, #11
 801554e:	f8cd 8000 	str.w	r8, [sp]
 8015552:	f001 f833 	bl	80165bc <uxr_deserialize_message_header>
 8015556:	783a      	ldrb	r2, [r7, #0]
 8015558:	f89d 300b 	ldrb.w	r3, [sp, #11]
 801555c:	4293      	cmp	r3, r2
 801555e:	d1eb      	bne.n	8015538 <uxr_read_session_header+0x18>
 8015560:	061b      	lsls	r3, r3, #24
 8015562:	d41b      	bmi.n	801559c <uxr_read_session_header+0x7c>
 8015564:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8015568:	787b      	ldrb	r3, [r7, #1]
 801556a:	429a      	cmp	r2, r3
 801556c:	d003      	beq.n	8015576 <uxr_read_session_header+0x56>
 801556e:	2001      	movs	r0, #1
 8015570:	f080 0001 	eor.w	r0, r0, #1
 8015574:	e7e1      	b.n	801553a <uxr_read_session_header+0x1a>
 8015576:	f89d 200d 	ldrb.w	r2, [sp, #13]
 801557a:	1cb8      	adds	r0, r7, #2
 801557c:	78bb      	ldrb	r3, [r7, #2]
 801557e:	429a      	cmp	r2, r3
 8015580:	d1f5      	bne.n	801556e <uxr_read_session_header+0x4e>
 8015582:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8015586:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801558a:	429a      	cmp	r2, r3
 801558c:	d1ef      	bne.n	801556e <uxr_read_session_header+0x4e>
 801558e:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8015592:	7843      	ldrb	r3, [r0, #1]
 8015594:	429a      	cmp	r2, r3
 8015596:	d1ea      	bne.n	801556e <uxr_read_session_header+0x4e>
 8015598:	2000      	movs	r0, #0
 801559a:	e7e9      	b.n	8015570 <uxr_read_session_header+0x50>
 801559c:	2001      	movs	r0, #1
 801559e:	e7cc      	b.n	801553a <uxr_read_session_header+0x1a>

080155a0 <uxr_session_header_offset>:
 80155a0:	f990 3000 	ldrsb.w	r3, [r0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	bfac      	ite	ge
 80155a8:	2008      	movge	r0, #8
 80155aa:	2004      	movlt	r0, #4
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop

080155b0 <uxr_init_base_object_request>:
 80155b0:	b510      	push	{r4, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80155b8:	9101      	str	r1, [sp, #4]
 80155ba:	88c3      	ldrh	r3, [r0, #6]
 80155bc:	f1a3 010a 	sub.w	r1, r3, #10
 80155c0:	b289      	uxth	r1, r1
 80155c2:	42a1      	cmp	r1, r4
 80155c4:	d80f      	bhi.n	80155e6 <uxr_init_base_object_request+0x36>
 80155c6:	3301      	adds	r3, #1
 80155c8:	b29c      	uxth	r4, r3
 80155ca:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	80c4      	strh	r4, [r0, #6]
 80155d2:	1c91      	adds	r1, r2, #2
 80155d4:	9801      	ldr	r0, [sp, #4]
 80155d6:	f882 c000 	strb.w	ip, [r2]
 80155da:	7053      	strb	r3, [r2, #1]
 80155dc:	f7fe fe44 	bl	8014268 <uxr_object_id_to_raw>
 80155e0:	4620      	mov	r0, r4
 80155e2:	b002      	add	sp, #8
 80155e4:	bd10      	pop	{r4, pc}
 80155e6:	230a      	movs	r3, #10
 80155e8:	f04f 0c00 	mov.w	ip, #0
 80155ec:	461c      	mov	r4, r3
 80155ee:	e7ef      	b.n	80155d0 <uxr_init_base_object_request+0x20>

080155f0 <uxr_parse_base_object_request>:
 80155f0:	b570      	push	{r4, r5, r6, lr}
 80155f2:	4604      	mov	r4, r0
 80155f4:	3002      	adds	r0, #2
 80155f6:	460d      	mov	r5, r1
 80155f8:	4616      	mov	r6, r2
 80155fa:	f7fe fe21 	bl	8014240 <uxr_object_id_from_raw>
 80155fe:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8015602:	8028      	strh	r0, [r5, #0]
 8015604:	806b      	strh	r3, [r5, #2]
 8015606:	7822      	ldrb	r2, [r4, #0]
 8015608:	7863      	ldrb	r3, [r4, #1]
 801560a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801560e:	8033      	strh	r3, [r6, #0]
 8015610:	bd70      	pop	{r4, r5, r6, pc}
 8015612:	bf00      	nop

08015614 <uxr_init_framing_io>:
 8015614:	2300      	movs	r3, #0
 8015616:	7041      	strb	r1, [r0, #1]
 8015618:	7003      	strb	r3, [r0, #0]
 801561a:	8583      	strh	r3, [r0, #44]	; 0x2c
 801561c:	4770      	bx	lr
 801561e:	bf00      	nop

08015620 <uxr_write_framed_msg>:
 8015620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015624:	4617      	mov	r7, r2
 8015626:	7842      	ldrb	r2, [r0, #1]
 8015628:	460e      	mov	r6, r1
 801562a:	b083      	sub	sp, #12
 801562c:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8015630:	469b      	mov	fp, r3
 8015632:	237e      	movs	r3, #126	; 0x7e
 8015634:	4604      	mov	r4, r0
 8015636:	2901      	cmp	r1, #1
 8015638:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 801563c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8015640:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8015644:	f240 8115 	bls.w	8015872 <uxr_write_framed_msg+0x252>
 8015648:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 801564c:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8015650:	2202      	movs	r2, #2
 8015652:	2901      	cmp	r1, #1
 8015654:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015658:	d952      	bls.n	8015700 <uxr_write_framed_msg+0xe0>
 801565a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801565c:	2103      	movs	r1, #3
 801565e:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8015662:	b2dd      	uxtb	r5, r3
 8015664:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015668:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801566c:	2a01      	cmp	r2, #1
 801566e:	d95c      	bls.n	801572a <uxr_write_framed_msg+0x10a>
 8015670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015672:	1862      	adds	r2, r4, r1
 8015674:	3101      	adds	r1, #1
 8015676:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801567a:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 801567e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015682:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8015686:	2a01      	cmp	r2, #1
 8015688:	d961      	bls.n	801574e <uxr_write_framed_msg+0x12e>
 801568a:	1c4a      	adds	r2, r1, #1
 801568c:	4421      	add	r1, r4
 801568e:	b2d2      	uxtb	r2, r2
 8015690:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8015694:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015698:	2b00      	cmp	r3, #0
 801569a:	d06a      	beq.n	8015772 <uxr_write_framed_msg+0x152>
 801569c:	f04f 0800 	mov.w	r8, #0
 80156a0:	46c1      	mov	r9, r8
 80156a2:	e016      	b.n	80156d2 <uxr_write_framed_msg+0xb2>
 80156a4:	2a29      	cmp	r2, #41	; 0x29
 80156a6:	d868      	bhi.n	801577a <uxr_write_framed_msg+0x15a>
 80156a8:	18a0      	adds	r0, r4, r2
 80156aa:	3201      	adds	r2, #1
 80156ac:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80156b0:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80156b4:	ea88 0101 	eor.w	r1, r8, r1
 80156b8:	4b7d      	ldr	r3, [pc, #500]	; (80158b0 <uxr_write_framed_msg+0x290>)
 80156ba:	f109 0901 	add.w	r9, r9, #1
 80156be:	b2c9      	uxtb	r1, r1
 80156c0:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 80156c4:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 80156c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156ca:	454b      	cmp	r3, r9
 80156cc:	d969      	bls.n	80157a2 <uxr_write_framed_msg+0x182>
 80156ce:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80156d2:	f81b 1009 	ldrb.w	r1, [fp, r9]
 80156d6:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 80156da:	2801      	cmp	r0, #1
 80156dc:	d8e2      	bhi.n	80156a4 <uxr_write_framed_msg+0x84>
 80156de:	1c50      	adds	r0, r2, #1
 80156e0:	b2c0      	uxtb	r0, r0
 80156e2:	2829      	cmp	r0, #41	; 0x29
 80156e4:	d849      	bhi.n	801577a <uxr_write_framed_msg+0x15a>
 80156e6:	18a0      	adds	r0, r4, r2
 80156e8:	f04f 037d 	mov.w	r3, #125	; 0x7d
 80156ec:	3202      	adds	r2, #2
 80156ee:	f081 0520 	eor.w	r5, r1, #32
 80156f2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 80156f6:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 80156fa:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80156fe:	e7d9      	b.n	80156b4 <uxr_write_framed_msg+0x94>
 8015700:	2104      	movs	r1, #4
 8015702:	f04f 0c03 	mov.w	ip, #3
 8015706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015708:	4422      	add	r2, r4
 801570a:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 801570e:	44a4      	add	ip, r4
 8015710:	b2dd      	uxtb	r5, r3
 8015712:	f080 0020 	eor.w	r0, r0, #32
 8015716:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 801571a:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 801571e:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8015722:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015726:	2a01      	cmp	r2, #1
 8015728:	d8a2      	bhi.n	8015670 <uxr_write_framed_msg+0x50>
 801572a:	1862      	adds	r2, r4, r1
 801572c:	207d      	movs	r0, #125	; 0x7d
 801572e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015730:	f085 0520 	eor.w	r5, r5, #32
 8015734:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8015738:	3102      	adds	r1, #2
 801573a:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801573e:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8015742:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8015746:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 801574a:	2a01      	cmp	r2, #1
 801574c:	d89d      	bhi.n	801568a <uxr_write_framed_msg+0x6a>
 801574e:	1c4d      	adds	r5, r1, #1
 8015750:	1c8a      	adds	r2, r1, #2
 8015752:	f080 0020 	eor.w	r0, r0, #32
 8015756:	4421      	add	r1, r4
 8015758:	fa54 f585 	uxtab	r5, r4, r5
 801575c:	b2d2      	uxtb	r2, r2
 801575e:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8015762:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8015766:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 801576a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801576e:	2b00      	cmp	r3, #0
 8015770:	d194      	bne.n	801569c <uxr_write_framed_msg+0x7c>
 8015772:	4619      	mov	r1, r3
 8015774:	f8ad 3004 	strh.w	r3, [sp, #4]
 8015778:	e019      	b.n	80157ae <uxr_write_framed_msg+0x18e>
 801577a:	2500      	movs	r5, #0
 801577c:	e000      	b.n	8015780 <uxr_write_framed_msg+0x160>
 801577e:	b160      	cbz	r0, 801579a <uxr_write_framed_msg+0x17a>
 8015780:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015784:	1b52      	subs	r2, r2, r5
 8015786:	4653      	mov	r3, sl
 8015788:	4638      	mov	r0, r7
 801578a:	4421      	add	r1, r4
 801578c:	47b0      	blx	r6
 801578e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015792:	4405      	add	r5, r0
 8015794:	4295      	cmp	r5, r2
 8015796:	d3f2      	bcc.n	801577e <uxr_write_framed_msg+0x15e>
 8015798:	d066      	beq.n	8015868 <uxr_write_framed_msg+0x248>
 801579a:	2000      	movs	r0, #0
 801579c:	b003      	add	sp, #12
 801579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157a2:	fa5f f188 	uxtb.w	r1, r8
 80157a6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80157aa:	f8ad 8004 	strh.w	r8, [sp, #4]
 80157ae:	f04f 0900 	mov.w	r9, #0
 80157b2:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 80157b6:	46c8      	mov	r8, r9
 80157b8:	e013      	b.n	80157e2 <uxr_write_framed_msg+0x1c2>
 80157ba:	2a29      	cmp	r2, #41	; 0x29
 80157bc:	d824      	bhi.n	8015808 <uxr_write_framed_msg+0x1e8>
 80157be:	18a3      	adds	r3, r4, r2
 80157c0:	3201      	adds	r2, #1
 80157c2:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 80157c6:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 80157ca:	f109 0901 	add.w	r9, r9, #1
 80157ce:	f1b9 0f02 	cmp.w	r9, #2
 80157d2:	d02d      	beq.n	8015830 <uxr_write_framed_msg+0x210>
 80157d4:	f109 0308 	add.w	r3, r9, #8
 80157d8:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 80157dc:	446b      	add	r3, sp
 80157de:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 80157e2:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 80157e6:	2b01      	cmp	r3, #1
 80157e8:	d8e7      	bhi.n	80157ba <uxr_write_framed_msg+0x19a>
 80157ea:	1c53      	adds	r3, r2, #1
 80157ec:	b2db      	uxtb	r3, r3
 80157ee:	2b29      	cmp	r3, #41	; 0x29
 80157f0:	d80a      	bhi.n	8015808 <uxr_write_framed_msg+0x1e8>
 80157f2:	18a3      	adds	r3, r4, r2
 80157f4:	f081 0120 	eor.w	r1, r1, #32
 80157f8:	3202      	adds	r2, #2
 80157fa:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 80157fe:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8015802:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8015806:	e7e0      	b.n	80157ca <uxr_write_framed_msg+0x1aa>
 8015808:	2500      	movs	r5, #0
 801580a:	e001      	b.n	8015810 <uxr_write_framed_msg+0x1f0>
 801580c:	2800      	cmp	r0, #0
 801580e:	d0c4      	beq.n	801579a <uxr_write_framed_msg+0x17a>
 8015810:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015814:	1b52      	subs	r2, r2, r5
 8015816:	4653      	mov	r3, sl
 8015818:	4638      	mov	r0, r7
 801581a:	4421      	add	r1, r4
 801581c:	47b0      	blx	r6
 801581e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015822:	4405      	add	r5, r0
 8015824:	4295      	cmp	r5, r2
 8015826:	d3f1      	bcc.n	801580c <uxr_write_framed_msg+0x1ec>
 8015828:	d1b7      	bne.n	801579a <uxr_write_framed_msg+0x17a>
 801582a:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 801582e:	e7d1      	b.n	80157d4 <uxr_write_framed_msg+0x1b4>
 8015830:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015834:	b19a      	cbz	r2, 801585e <uxr_write_framed_msg+0x23e>
 8015836:	2500      	movs	r5, #0
 8015838:	e001      	b.n	801583e <uxr_write_framed_msg+0x21e>
 801583a:	2800      	cmp	r0, #0
 801583c:	d0ad      	beq.n	801579a <uxr_write_framed_msg+0x17a>
 801583e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8015842:	1b52      	subs	r2, r2, r5
 8015844:	4653      	mov	r3, sl
 8015846:	4638      	mov	r0, r7
 8015848:	4421      	add	r1, r4
 801584a:	47b0      	blx	r6
 801584c:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8015850:	4405      	add	r5, r0
 8015852:	4295      	cmp	r5, r2
 8015854:	d3f1      	bcc.n	801583a <uxr_write_framed_msg+0x21a>
 8015856:	d1a0      	bne.n	801579a <uxr_write_framed_msg+0x17a>
 8015858:	2300      	movs	r3, #0
 801585a:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 801585e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015860:	b298      	uxth	r0, r3
 8015862:	b003      	add	sp, #12
 8015864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015868:	f04f 0300 	mov.w	r3, #0
 801586c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8015870:	e72a      	b.n	80156c8 <uxr_write_framed_msg+0xa8>
 8015872:	217d      	movs	r1, #125	; 0x7d
 8015874:	f082 0220 	eor.w	r2, r2, #32
 8015878:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 801587c:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8015880:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8015884:	2203      	movs	r2, #3
 8015886:	2901      	cmp	r1, #1
 8015888:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 801588c:	d803      	bhi.n	8015896 <uxr_write_framed_msg+0x276>
 801588e:	2105      	movs	r1, #5
 8015890:	f04f 0c04 	mov.w	ip, #4
 8015894:	e737      	b.n	8015706 <uxr_write_framed_msg+0xe6>
 8015896:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015898:	2104      	movs	r1, #4
 801589a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 801589e:	b2dd      	uxtb	r5, r3
 80158a0:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 80158a4:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 80158a8:	2a01      	cmp	r2, #1
 80158aa:	f63f aee1 	bhi.w	8015670 <uxr_write_framed_msg+0x50>
 80158ae:	e73c      	b.n	801572a <uxr_write_framed_msg+0x10a>
 80158b0:	0801e1a4 	.word	0x0801e1a4

080158b4 <uxr_framing_read_transport>:
 80158b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158b8:	4604      	mov	r4, r0
 80158ba:	b085      	sub	sp, #20
 80158bc:	4692      	mov	sl, r2
 80158be:	4689      	mov	r9, r1
 80158c0:	461d      	mov	r5, r3
 80158c2:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 80158c4:	f000 fca6 	bl	8016214 <uxr_millis>
 80158c8:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80158cc:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 80158d0:	4680      	mov	r8, r0
 80158d2:	42ba      	cmp	r2, r7
 80158d4:	d05f      	beq.n	8015996 <uxr_framing_read_transport+0xe2>
 80158d6:	d817      	bhi.n	8015908 <uxr_framing_read_transport+0x54>
 80158d8:	3f01      	subs	r7, #1
 80158da:	1aba      	subs	r2, r7, r2
 80158dc:	2700      	movs	r7, #0
 80158de:	b2d2      	uxtb	r2, r2
 80158e0:	42b2      	cmp	r2, r6
 80158e2:	d81a      	bhi.n	801591a <uxr_framing_read_transport+0x66>
 80158e4:	19d3      	adds	r3, r2, r7
 80158e6:	42b3      	cmp	r3, r6
 80158e8:	d852      	bhi.n	8015990 <uxr_framing_read_transport+0xdc>
 80158ea:	b9d2      	cbnz	r2, 8015922 <uxr_framing_read_transport+0x6e>
 80158ec:	2600      	movs	r6, #0
 80158ee:	f000 fc91 	bl	8016214 <uxr_millis>
 80158f2:	682b      	ldr	r3, [r5, #0]
 80158f4:	eba0 0008 	sub.w	r0, r0, r8
 80158f8:	1a1b      	subs	r3, r3, r0
 80158fa:	4630      	mov	r0, r6
 80158fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015900:	602b      	str	r3, [r5, #0]
 8015902:	b005      	add	sp, #20
 8015904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015908:	2f00      	cmp	r7, #0
 801590a:	d060      	beq.n	80159ce <uxr_framing_read_transport+0x11a>
 801590c:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8015910:	3f01      	subs	r7, #1
 8015912:	b2d2      	uxtb	r2, r2
 8015914:	b2ff      	uxtb	r7, r7
 8015916:	42b2      	cmp	r2, r6
 8015918:	d9e4      	bls.n	80158e4 <uxr_framing_read_transport+0x30>
 801591a:	b2f2      	uxtb	r2, r6
 801591c:	2700      	movs	r7, #0
 801591e:	2a00      	cmp	r2, #0
 8015920:	d0e4      	beq.n	80158ec <uxr_framing_read_transport+0x38>
 8015922:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015924:	4650      	mov	r0, sl
 8015926:	9203      	str	r2, [sp, #12]
 8015928:	9300      	str	r3, [sp, #0]
 801592a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 801592e:	682b      	ldr	r3, [r5, #0]
 8015930:	3102      	adds	r1, #2
 8015932:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 80159d8 <uxr_framing_read_transport+0x124>
 8015936:	4421      	add	r1, r4
 8015938:	47c8      	blx	r9
 801593a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801593e:	4606      	mov	r6, r0
 8015940:	4403      	add	r3, r0
 8015942:	0859      	lsrs	r1, r3, #1
 8015944:	fbab 2101 	umull	r2, r1, fp, r1
 8015948:	222a      	movs	r2, #42	; 0x2a
 801594a:	0889      	lsrs	r1, r1, #2
 801594c:	fb02 3111 	mls	r1, r2, r1, r3
 8015950:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8015954:	2800      	cmp	r0, #0
 8015956:	d0c9      	beq.n	80158ec <uxr_framing_read_transport+0x38>
 8015958:	9a03      	ldr	r2, [sp, #12]
 801595a:	4290      	cmp	r0, r2
 801595c:	d1c7      	bne.n	80158ee <uxr_framing_read_transport+0x3a>
 801595e:	2f00      	cmp	r7, #0
 8015960:	d0c5      	beq.n	80158ee <uxr_framing_read_transport+0x3a>
 8015962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015964:	3102      	adds	r1, #2
 8015966:	463a      	mov	r2, r7
 8015968:	4650      	mov	r0, sl
 801596a:	4421      	add	r1, r4
 801596c:	9300      	str	r3, [sp, #0]
 801596e:	2300      	movs	r3, #0
 8015970:	47c8      	blx	r9
 8015972:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8015976:	4406      	add	r6, r0
 8015978:	1813      	adds	r3, r2, r0
 801597a:	085a      	lsrs	r2, r3, #1
 801597c:	fbab 1b02 	umull	r1, fp, fp, r2
 8015980:	222a      	movs	r2, #42	; 0x2a
 8015982:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8015986:	fb02 331b 	mls	r3, r2, fp, r3
 801598a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 801598e:	e7ae      	b.n	80158ee <uxr_framing_read_transport+0x3a>
 8015990:	1ab6      	subs	r6, r6, r2
 8015992:	b2f7      	uxtb	r7, r6
 8015994:	e7a9      	b.n	80158ea <uxr_framing_read_transport+0x36>
 8015996:	2300      	movs	r3, #0
 8015998:	2e28      	cmp	r6, #40	; 0x28
 801599a:	85a3      	strh	r3, [r4, #44]	; 0x2c
 801599c:	d9bd      	bls.n	801591a <uxr_framing_read_transport+0x66>
 801599e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80159a0:	2229      	movs	r2, #41	; 0x29
 80159a2:	1ca1      	adds	r1, r4, #2
 80159a4:	4650      	mov	r0, sl
 80159a6:	9300      	str	r3, [sp, #0]
 80159a8:	682b      	ldr	r3, [r5, #0]
 80159aa:	47c8      	blx	r9
 80159ac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80159b0:	4606      	mov	r6, r0
 80159b2:	212a      	movs	r1, #42	; 0x2a
 80159b4:	4403      	add	r3, r0
 80159b6:	4808      	ldr	r0, [pc, #32]	; (80159d8 <uxr_framing_read_transport+0x124>)
 80159b8:	085a      	lsrs	r2, r3, #1
 80159ba:	fba0 0202 	umull	r0, r2, r0, r2
 80159be:	0892      	lsrs	r2, r2, #2
 80159c0:	fb01 3312 	mls	r3, r1, r2, r3
 80159c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 80159c8:	2e00      	cmp	r6, #0
 80159ca:	d08f      	beq.n	80158ec <uxr_framing_read_transport+0x38>
 80159cc:	e78f      	b.n	80158ee <uxr_framing_read_transport+0x3a>
 80159ce:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 80159d2:	b2d2      	uxtb	r2, r2
 80159d4:	e784      	b.n	80158e0 <uxr_framing_read_transport+0x2c>
 80159d6:	bf00      	nop
 80159d8:	30c30c31 	.word	0x30c30c31

080159dc <uxr_read_framed_msg>:
 80159dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159e0:	461e      	mov	r6, r3
 80159e2:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80159e6:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80159ea:	b083      	sub	sp, #12
 80159ec:	4604      	mov	r4, r0
 80159ee:	4688      	mov	r8, r1
 80159f0:	429d      	cmp	r5, r3
 80159f2:	4691      	mov	r9, r2
 80159f4:	f000 818c 	beq.w	8015d10 <uxr_read_framed_msg+0x334>
 80159f8:	7823      	ldrb	r3, [r4, #0]
 80159fa:	4dc3      	ldr	r5, [pc, #780]	; (8015d08 <uxr_read_framed_msg+0x32c>)
 80159fc:	4fc3      	ldr	r7, [pc, #780]	; (8015d0c <uxr_read_framed_msg+0x330>)
 80159fe:	2b07      	cmp	r3, #7
 8015a00:	d8fd      	bhi.n	80159fe <uxr_read_framed_msg+0x22>
 8015a02:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015a06:	011c      	.short	0x011c
 8015a08:	00d900fb 	.word	0x00d900fb
 8015a0c:	008f00ba 	.word	0x008f00ba
 8015a10:	00320051 	.word	0x00320051
 8015a14:	0008      	.short	0x0008
 8015a16:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015a1a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015a1e:	4299      	cmp	r1, r3
 8015a20:	f000 814d 	beq.w	8015cbe <uxr_read_framed_msg+0x2e2>
 8015a24:	18e2      	adds	r2, r4, r3
 8015a26:	7892      	ldrb	r2, [r2, #2]
 8015a28:	2a7d      	cmp	r2, #125	; 0x7d
 8015a2a:	f000 81b8 	beq.w	8015d9e <uxr_read_framed_msg+0x3c2>
 8015a2e:	3301      	adds	r3, #1
 8015a30:	212a      	movs	r1, #42	; 0x2a
 8015a32:	2a7e      	cmp	r2, #126	; 0x7e
 8015a34:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8015a38:	fba5 c000 	umull	ip, r0, r5, r0
 8015a3c:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015a40:	fb01 3310 	mls	r3, r1, r0, r3
 8015a44:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015a48:	f000 8257 	beq.w	8015efa <uxr_read_framed_msg+0x51e>
 8015a4c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8015a4e:	2000      	movs	r0, #0
 8015a50:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8015a52:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8015a56:	7020      	strb	r0, [r4, #0]
 8015a58:	b29b      	uxth	r3, r3
 8015a5a:	4299      	cmp	r1, r3
 8015a5c:	86a3      	strh	r3, [r4, #52]	; 0x34
 8015a5e:	f000 8178 	beq.w	8015d52 <uxr_read_framed_msg+0x376>
 8015a62:	2000      	movs	r0, #0
 8015a64:	b003      	add	sp, #12
 8015a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a6a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015a6e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015a72:	4298      	cmp	r0, r3
 8015a74:	f000 8132 	beq.w	8015cdc <uxr_read_framed_msg+0x300>
 8015a78:	18e2      	adds	r2, r4, r3
 8015a7a:	7891      	ldrb	r1, [r2, #2]
 8015a7c:	297d      	cmp	r1, #125	; 0x7d
 8015a7e:	f000 8170 	beq.w	8015d62 <uxr_read_framed_msg+0x386>
 8015a82:	3301      	adds	r3, #1
 8015a84:	202a      	movs	r0, #42	; 0x2a
 8015a86:	297e      	cmp	r1, #126	; 0x7e
 8015a88:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015a8c:	fba5 c202 	umull	ip, r2, r5, r2
 8015a90:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015a94:	fb00 3312 	mls	r3, r0, r2, r3
 8015a98:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015a9c:	f000 821d 	beq.w	8015eda <uxr_read_framed_msg+0x4fe>
 8015aa0:	2307      	movs	r3, #7
 8015aa2:	86a1      	strh	r1, [r4, #52]	; 0x34
 8015aa4:	7023      	strb	r3, [r4, #0]
 8015aa6:	e7aa      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015aa8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015aaa:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015aae:	459e      	cmp	lr, r3
 8015ab0:	d827      	bhi.n	8015b02 <uxr_read_framed_msg+0x126>
 8015ab2:	e032      	b.n	8015b1a <uxr_read_framed_msg+0x13e>
 8015ab4:	fba5 b101 	umull	fp, r1, r5, r1
 8015ab8:	f89c c002 	ldrb.w	ip, [ip, #2]
 8015abc:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015ac0:	0889      	lsrs	r1, r1, #2
 8015ac2:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8015ac6:	fb0b 0111 	mls	r1, fp, r1, r0
 8015aca:	f000 80d4 	beq.w	8015c76 <uxr_read_framed_msg+0x29a>
 8015ace:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015ad2:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8015ad6:	f000 80cb 	beq.w	8015c70 <uxr_read_framed_msg+0x294>
 8015ada:	f806 c003 	strb.w	ip, [r6, r3]
 8015ade:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8015ae0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8015ae2:	ea80 010c 	eor.w	r1, r0, ip
 8015ae6:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8015aea:	3301      	adds	r3, #1
 8015aec:	b2c9      	uxtb	r1, r1
 8015aee:	b29b      	uxth	r3, r3
 8015af0:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8015af4:	4573      	cmp	r3, lr
 8015af6:	8663      	strh	r3, [r4, #50]	; 0x32
 8015af8:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8015afc:	86e2      	strh	r2, [r4, #54]	; 0x36
 8015afe:	f080 811d 	bcs.w	8015d3c <uxr_read_framed_msg+0x360>
 8015b02:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015b06:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8015b0a:	1c50      	adds	r0, r2, #1
 8015b0c:	eb04 0c02 	add.w	ip, r4, r2
 8015b10:	4592      	cmp	sl, r2
 8015b12:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8015b16:	d1cd      	bne.n	8015ab4 <uxr_read_framed_msg+0xd8>
 8015b18:	459e      	cmp	lr, r3
 8015b1a:	f040 8114 	bne.w	8015d46 <uxr_read_framed_msg+0x36a>
 8015b1e:	2306      	movs	r3, #6
 8015b20:	7023      	strb	r3, [r4, #0]
 8015b22:	e76c      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015b24:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015b28:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015b2c:	4298      	cmp	r0, r3
 8015b2e:	f000 80c6 	beq.w	8015cbe <uxr_read_framed_msg+0x2e2>
 8015b32:	18e2      	adds	r2, r4, r3
 8015b34:	7891      	ldrb	r1, [r2, #2]
 8015b36:	297d      	cmp	r1, #125	; 0x7d
 8015b38:	f000 8193 	beq.w	8015e62 <uxr_read_framed_msg+0x486>
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	202a      	movs	r0, #42	; 0x2a
 8015b40:	297e      	cmp	r1, #126	; 0x7e
 8015b42:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015b46:	fba5 c202 	umull	ip, r2, r5, r2
 8015b4a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015b4e:	fb00 3312 	mls	r3, r0, r2, r3
 8015b52:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015b56:	f000 81d0 	beq.w	8015efa <uxr_read_framed_msg+0x51e>
 8015b5a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8015b5c:	2000      	movs	r0, #0
 8015b5e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8015b62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8015b64:	8660      	strh	r0, [r4, #50]	; 0x32
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	86e0      	strh	r0, [r4, #54]	; 0x36
 8015b6a:	428b      	cmp	r3, r1
 8015b6c:	8623      	strh	r3, [r4, #48]	; 0x30
 8015b6e:	f240 80e2 	bls.w	8015d36 <uxr_read_framed_msg+0x35a>
 8015b72:	7020      	strb	r0, [r4, #0]
 8015b74:	b003      	add	sp, #12
 8015b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b7a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015b7e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015b82:	4298      	cmp	r0, r3
 8015b84:	f000 80aa 	beq.w	8015cdc <uxr_read_framed_msg+0x300>
 8015b88:	18e2      	adds	r2, r4, r3
 8015b8a:	7891      	ldrb	r1, [r2, #2]
 8015b8c:	297d      	cmp	r1, #125	; 0x7d
 8015b8e:	f000 8186 	beq.w	8015e9e <uxr_read_framed_msg+0x4c2>
 8015b92:	3301      	adds	r3, #1
 8015b94:	202a      	movs	r0, #42	; 0x2a
 8015b96:	297e      	cmp	r1, #126	; 0x7e
 8015b98:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015b9c:	fba5 c202 	umull	ip, r2, r5, r2
 8015ba0:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015ba4:	fb00 3312 	mls	r3, r0, r2, r3
 8015ba8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015bac:	f000 8195 	beq.w	8015eda <uxr_read_framed_msg+0x4fe>
 8015bb0:	2304      	movs	r3, #4
 8015bb2:	8621      	strh	r1, [r4, #48]	; 0x30
 8015bb4:	7023      	strb	r3, [r4, #0]
 8015bb6:	e722      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015bb8:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8015bbc:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015bc0:	4290      	cmp	r0, r2
 8015bc2:	f000 80b4 	beq.w	8015d2e <uxr_read_framed_msg+0x352>
 8015bc6:	18a3      	adds	r3, r4, r2
 8015bc8:	7899      	ldrb	r1, [r3, #2]
 8015bca:	297d      	cmp	r1, #125	; 0x7d
 8015bcc:	f000 8107 	beq.w	8015dde <uxr_read_framed_msg+0x402>
 8015bd0:	3201      	adds	r2, #1
 8015bd2:	232a      	movs	r3, #42	; 0x2a
 8015bd4:	297e      	cmp	r1, #126	; 0x7e
 8015bd6:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8015bda:	fba5 c000 	umull	ip, r0, r5, r0
 8015bde:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015be2:	fb03 2210 	mls	r2, r3, r0, r2
 8015be6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015bea:	f000 818a 	beq.w	8015f02 <uxr_read_framed_msg+0x526>
 8015bee:	7863      	ldrb	r3, [r4, #1]
 8015bf0:	428b      	cmp	r3, r1
 8015bf2:	bf0c      	ite	eq
 8015bf4:	2303      	moveq	r3, #3
 8015bf6:	2300      	movne	r3, #0
 8015bf8:	7023      	strb	r3, [r4, #0]
 8015bfa:	e700      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015bfc:	2300      	movs	r3, #0
 8015bfe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8015c02:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8015c06:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015c0a:	4299      	cmp	r1, r3
 8015c0c:	d06a      	beq.n	8015ce4 <uxr_read_framed_msg+0x308>
 8015c0e:	18e2      	adds	r2, r4, r3
 8015c10:	7890      	ldrb	r0, [r2, #2]
 8015c12:	287d      	cmp	r0, #125	; 0x7d
 8015c14:	f000 8100 	beq.w	8015e18 <uxr_read_framed_msg+0x43c>
 8015c18:	3301      	adds	r3, #1
 8015c1a:	212a      	movs	r1, #42	; 0x2a
 8015c1c:	287e      	cmp	r0, #126	; 0x7e
 8015c1e:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8015c22:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8015c26:	fba5 c202 	umull	ip, r2, r5, r2
 8015c2a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015c2e:	fb01 3312 	mls	r3, r1, r2, r3
 8015c32:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015c36:	d055      	beq.n	8015ce4 <uxr_read_framed_msg+0x308>
 8015c38:	2302      	movs	r3, #2
 8015c3a:	7023      	strb	r3, [r4, #0]
 8015c3c:	e6df      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015c3e:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 8015c42:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8015c46:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015c4a:	1c5a      	adds	r2, r3, #1
 8015c4c:	459c      	cmp	ip, r3
 8015c4e:	eb04 0103 	add.w	r1, r4, r3
 8015c52:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8015c56:	f43f af04 	beq.w	8015a62 <uxr_read_framed_msg+0x86>
 8015c5a:	fba5 0303 	umull	r0, r3, r5, r3
 8015c5e:	7889      	ldrb	r1, [r1, #2]
 8015c60:	089b      	lsrs	r3, r3, #2
 8015c62:	297e      	cmp	r1, #126	; 0x7e
 8015c64:	fb0e 2313 	mls	r3, lr, r3, r2
 8015c68:	b2db      	uxtb	r3, r3
 8015c6a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015c6e:	d1ec      	bne.n	8015c4a <uxr_read_framed_msg+0x26e>
 8015c70:	2301      	movs	r3, #1
 8015c72:	7023      	strb	r3, [r4, #0]
 8015c74:	e6c3      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015c76:	1c50      	adds	r0, r2, #1
 8015c78:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015c7c:	3202      	adds	r2, #2
 8015c7e:	0841      	lsrs	r1, r0, #1
 8015c80:	fba5 c101 	umull	ip, r1, r5, r1
 8015c84:	0889      	lsrs	r1, r1, #2
 8015c86:	fb0b 0111 	mls	r1, fp, r1, r0
 8015c8a:	1860      	adds	r0, r4, r1
 8015c8c:	b2c9      	uxtb	r1, r1
 8015c8e:	458a      	cmp	sl, r1
 8015c90:	f43f af42 	beq.w	8015b18 <uxr_read_framed_msg+0x13c>
 8015c94:	0851      	lsrs	r1, r2, #1
 8015c96:	7880      	ldrb	r0, [r0, #2]
 8015c98:	fba5 a101 	umull	sl, r1, r5, r1
 8015c9c:	287e      	cmp	r0, #126	; 0x7e
 8015c9e:	f080 0c20 	eor.w	ip, r0, #32
 8015ca2:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015ca6:	fb0b 2211 	mls	r2, fp, r1, r2
 8015caa:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015cae:	f47f af14 	bne.w	8015ada <uxr_read_framed_msg+0xfe>
 8015cb2:	459e      	cmp	lr, r3
 8015cb4:	f43f af33 	beq.w	8015b1e <uxr_read_framed_msg+0x142>
 8015cb8:	2301      	movs	r3, #1
 8015cba:	7023      	strb	r3, [r4, #0]
 8015cbc:	e69f      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015cbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cc0:	9300      	str	r3, [sp, #0]
 8015cc2:	2301      	movs	r3, #1
 8015cc4:	9301      	str	r3, [sp, #4]
 8015cc6:	464a      	mov	r2, r9
 8015cc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cca:	4641      	mov	r1, r8
 8015ccc:	4620      	mov	r0, r4
 8015cce:	f7ff fdf1 	bl	80158b4 <uxr_framing_read_transport>
 8015cd2:	2800      	cmp	r0, #0
 8015cd4:	f43f aec5 	beq.w	8015a62 <uxr_read_framed_msg+0x86>
 8015cd8:	7823      	ldrb	r3, [r4, #0]
 8015cda:	e690      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015cde:	9300      	str	r3, [sp, #0]
 8015ce0:	2302      	movs	r3, #2
 8015ce2:	e7ef      	b.n	8015cc4 <uxr_read_framed_msg+0x2e8>
 8015ce4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ce6:	464a      	mov	r2, r9
 8015ce8:	4641      	mov	r1, r8
 8015cea:	4620      	mov	r0, r4
 8015cec:	9300      	str	r3, [sp, #0]
 8015cee:	2304      	movs	r3, #4
 8015cf0:	9301      	str	r3, [sp, #4]
 8015cf2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015cf4:	f7ff fdde 	bl	80158b4 <uxr_framing_read_transport>
 8015cf8:	2800      	cmp	r0, #0
 8015cfa:	d1ed      	bne.n	8015cd8 <uxr_read_framed_msg+0x2fc>
 8015cfc:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015d00:	2b7e      	cmp	r3, #126	; 0x7e
 8015d02:	d0e9      	beq.n	8015cd8 <uxr_read_framed_msg+0x2fc>
 8015d04:	e6ad      	b.n	8015a62 <uxr_read_framed_msg+0x86>
 8015d06:	bf00      	nop
 8015d08:	30c30c31 	.word	0x30c30c31
 8015d0c:	0801e1a4 	.word	0x0801e1a4
 8015d10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d12:	9300      	str	r3, [sp, #0]
 8015d14:	2305      	movs	r3, #5
 8015d16:	9301      	str	r3, [sp, #4]
 8015d18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015d1a:	f7ff fdcb 	bl	80158b4 <uxr_framing_read_transport>
 8015d1e:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8015d22:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8015d26:	429a      	cmp	r2, r3
 8015d28:	f43f ae9b 	beq.w	8015a62 <uxr_read_framed_msg+0x86>
 8015d2c:	e664      	b.n	80159f8 <uxr_read_framed_msg+0x1c>
 8015d2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d30:	9300      	str	r3, [sp, #0]
 8015d32:	2303      	movs	r3, #3
 8015d34:	e7c6      	b.n	8015cc4 <uxr_read_framed_msg+0x2e8>
 8015d36:	2305      	movs	r3, #5
 8015d38:	7023      	strb	r3, [r4, #0]
 8015d3a:	e660      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015d3c:	f43f aeef 	beq.w	8015b1e <uxr_read_framed_msg+0x142>
 8015d40:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8015d44:	d094      	beq.n	8015c70 <uxr_read_framed_msg+0x294>
 8015d46:	ebae 0303 	sub.w	r3, lr, r3
 8015d4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015d4c:	3302      	adds	r3, #2
 8015d4e:	9200      	str	r2, [sp, #0]
 8015d50:	e7b8      	b.n	8015cc4 <uxr_read_framed_msg+0x2e8>
 8015d52:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8015d56:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015d58:	7013      	strb	r3, [r2, #0]
 8015d5a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015d5c:	b003      	add	sp, #12
 8015d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d62:	1c59      	adds	r1, r3, #1
 8015d64:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015d68:	084a      	lsrs	r2, r1, #1
 8015d6a:	fba5 e202 	umull	lr, r2, r5, r2
 8015d6e:	0892      	lsrs	r2, r2, #2
 8015d70:	fb0c 1212 	mls	r2, ip, r2, r1
 8015d74:	b2d1      	uxtb	r1, r2
 8015d76:	4288      	cmp	r0, r1
 8015d78:	d0b0      	beq.n	8015cdc <uxr_read_framed_msg+0x300>
 8015d7a:	3302      	adds	r3, #2
 8015d7c:	4422      	add	r2, r4
 8015d7e:	7891      	ldrb	r1, [r2, #2]
 8015d80:	085a      	lsrs	r2, r3, #1
 8015d82:	fba5 0202 	umull	r0, r2, r5, r2
 8015d86:	297e      	cmp	r1, #126	; 0x7e
 8015d88:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015d8c:	fb0c 3312 	mls	r3, ip, r2, r3
 8015d90:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015d94:	f000 80a1 	beq.w	8015eda <uxr_read_framed_msg+0x4fe>
 8015d98:	f081 0120 	eor.w	r1, r1, #32
 8015d9c:	e680      	b.n	8015aa0 <uxr_read_framed_msg+0xc4>
 8015d9e:	f103 0c01 	add.w	ip, r3, #1
 8015da2:	202a      	movs	r0, #42	; 0x2a
 8015da4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015da8:	fba5 e202 	umull	lr, r2, r5, r2
 8015dac:	0892      	lsrs	r2, r2, #2
 8015dae:	fb00 c212 	mls	r2, r0, r2, ip
 8015db2:	fa5f fc82 	uxtb.w	ip, r2
 8015db6:	4561      	cmp	r1, ip
 8015db8:	d081      	beq.n	8015cbe <uxr_read_framed_msg+0x2e2>
 8015dba:	3302      	adds	r3, #2
 8015dbc:	4422      	add	r2, r4
 8015dbe:	0859      	lsrs	r1, r3, #1
 8015dc0:	7892      	ldrb	r2, [r2, #2]
 8015dc2:	fba5 c101 	umull	ip, r1, r5, r1
 8015dc6:	2a7e      	cmp	r2, #126	; 0x7e
 8015dc8:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8015dcc:	fb00 3311 	mls	r3, r0, r1, r3
 8015dd0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015dd4:	f000 8091 	beq.w	8015efa <uxr_read_framed_msg+0x51e>
 8015dd8:	f082 0220 	eor.w	r2, r2, #32
 8015ddc:	e636      	b.n	8015a4c <uxr_read_framed_msg+0x70>
 8015dde:	1c51      	adds	r1, r2, #1
 8015de0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015de4:	084b      	lsrs	r3, r1, #1
 8015de6:	fba5 e303 	umull	lr, r3, r5, r3
 8015dea:	089b      	lsrs	r3, r3, #2
 8015dec:	fb0c 1313 	mls	r3, ip, r3, r1
 8015df0:	b2d9      	uxtb	r1, r3
 8015df2:	4288      	cmp	r0, r1
 8015df4:	d09b      	beq.n	8015d2e <uxr_read_framed_msg+0x352>
 8015df6:	3202      	adds	r2, #2
 8015df8:	4423      	add	r3, r4
 8015dfa:	0850      	lsrs	r0, r2, #1
 8015dfc:	789b      	ldrb	r3, [r3, #2]
 8015dfe:	fba5 1000 	umull	r1, r0, r5, r0
 8015e02:	2b7e      	cmp	r3, #126	; 0x7e
 8015e04:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8015e08:	fb0c 2210 	mls	r2, ip, r0, r2
 8015e0c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015e10:	d077      	beq.n	8015f02 <uxr_read_framed_msg+0x526>
 8015e12:	f083 0120 	eor.w	r1, r3, #32
 8015e16:	e6ea      	b.n	8015bee <uxr_read_framed_msg+0x212>
 8015e18:	f103 0c01 	add.w	ip, r3, #1
 8015e1c:	202a      	movs	r0, #42	; 0x2a
 8015e1e:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015e22:	fba5 e202 	umull	lr, r2, r5, r2
 8015e26:	0892      	lsrs	r2, r2, #2
 8015e28:	fb00 c212 	mls	r2, r0, r2, ip
 8015e2c:	fa5f fc82 	uxtb.w	ip, r2
 8015e30:	4561      	cmp	r1, ip
 8015e32:	f43f af57 	beq.w	8015ce4 <uxr_read_framed_msg+0x308>
 8015e36:	3302      	adds	r3, #2
 8015e38:	4422      	add	r2, r4
 8015e3a:	7891      	ldrb	r1, [r2, #2]
 8015e3c:	085a      	lsrs	r2, r3, #1
 8015e3e:	fba5 c202 	umull	ip, r2, r5, r2
 8015e42:	297e      	cmp	r1, #126	; 0x7e
 8015e44:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015e48:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015e4c:	fb00 3312 	mls	r3, r0, r2, r3
 8015e50:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015e54:	f43f af46 	beq.w	8015ce4 <uxr_read_framed_msg+0x308>
 8015e58:	f081 0120 	eor.w	r1, r1, #32
 8015e5c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015e60:	e6ea      	b.n	8015c38 <uxr_read_framed_msg+0x25c>
 8015e62:	1c59      	adds	r1, r3, #1
 8015e64:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015e68:	084a      	lsrs	r2, r1, #1
 8015e6a:	fba5 e202 	umull	lr, r2, r5, r2
 8015e6e:	0892      	lsrs	r2, r2, #2
 8015e70:	fb0c 1212 	mls	r2, ip, r2, r1
 8015e74:	b2d1      	uxtb	r1, r2
 8015e76:	4288      	cmp	r0, r1
 8015e78:	f43f af21 	beq.w	8015cbe <uxr_read_framed_msg+0x2e2>
 8015e7c:	3302      	adds	r3, #2
 8015e7e:	4422      	add	r2, r4
 8015e80:	7891      	ldrb	r1, [r2, #2]
 8015e82:	085a      	lsrs	r2, r3, #1
 8015e84:	fba5 0202 	umull	r0, r2, r5, r2
 8015e88:	297e      	cmp	r1, #126	; 0x7e
 8015e8a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015e8e:	fb0c 3312 	mls	r3, ip, r2, r3
 8015e92:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015e96:	d030      	beq.n	8015efa <uxr_read_framed_msg+0x51e>
 8015e98:	f081 0120 	eor.w	r1, r1, #32
 8015e9c:	e65d      	b.n	8015b5a <uxr_read_framed_msg+0x17e>
 8015e9e:	1c59      	adds	r1, r3, #1
 8015ea0:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015ea4:	084a      	lsrs	r2, r1, #1
 8015ea6:	fba5 e202 	umull	lr, r2, r5, r2
 8015eaa:	0892      	lsrs	r2, r2, #2
 8015eac:	fb0c 1212 	mls	r2, ip, r2, r1
 8015eb0:	b2d1      	uxtb	r1, r2
 8015eb2:	4288      	cmp	r0, r1
 8015eb4:	f43f af12 	beq.w	8015cdc <uxr_read_framed_msg+0x300>
 8015eb8:	3302      	adds	r3, #2
 8015eba:	4422      	add	r2, r4
 8015ebc:	7891      	ldrb	r1, [r2, #2]
 8015ebe:	085a      	lsrs	r2, r3, #1
 8015ec0:	fba5 0202 	umull	r0, r2, r5, r2
 8015ec4:	297e      	cmp	r1, #126	; 0x7e
 8015ec6:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015eca:	fb0c 3312 	mls	r3, ip, r2, r3
 8015ece:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015ed2:	d002      	beq.n	8015eda <uxr_read_framed_msg+0x4fe>
 8015ed4:	f081 0120 	eor.w	r1, r1, #32
 8015ed8:	e66a      	b.n	8015bb0 <uxr_read_framed_msg+0x1d4>
 8015eda:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015edc:	9300      	str	r3, [sp, #0]
 8015ede:	2302      	movs	r3, #2
 8015ee0:	9301      	str	r3, [sp, #4]
 8015ee2:	464a      	mov	r2, r9
 8015ee4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015ee6:	4641      	mov	r1, r8
 8015ee8:	4620      	mov	r0, r4
 8015eea:	f7ff fce3 	bl	80158b4 <uxr_framing_read_transport>
 8015eee:	2800      	cmp	r0, #0
 8015ef0:	f47f aef2 	bne.w	8015cd8 <uxr_read_framed_msg+0x2fc>
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	7023      	strb	r3, [r4, #0]
 8015ef8:	e581      	b.n	80159fe <uxr_read_framed_msg+0x22>
 8015efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015efc:	9300      	str	r3, [sp, #0]
 8015efe:	2301      	movs	r3, #1
 8015f00:	e7ee      	b.n	8015ee0 <uxr_read_framed_msg+0x504>
 8015f02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f04:	9300      	str	r3, [sp, #0]
 8015f06:	2303      	movs	r3, #3
 8015f08:	e7ea      	b.n	8015ee0 <uxr_read_framed_msg+0x504>
 8015f0a:	bf00      	nop

08015f0c <uxr_stream_id>:
 8015f0c:	2901      	cmp	r1, #1
 8015f0e:	4684      	mov	ip, r0
 8015f10:	b500      	push	{lr}
 8015f12:	b083      	sub	sp, #12
 8015f14:	d01f      	beq.n	8015f56 <uxr_stream_id+0x4a>
 8015f16:	2902      	cmp	r1, #2
 8015f18:	f04f 0e00 	mov.w	lr, #0
 8015f1c:	d020      	beq.n	8015f60 <uxr_stream_id+0x54>
 8015f1e:	2300      	movs	r3, #0
 8015f20:	2000      	movs	r0, #0
 8015f22:	f36e 0307 	bfi	r3, lr, #0, #8
 8015f26:	f36c 230f 	bfi	r3, ip, #8, #8
 8015f2a:	f361 4317 	bfi	r3, r1, #16, #8
 8015f2e:	f362 631f 	bfi	r3, r2, #24, #8
 8015f32:	fa5f fc83 	uxtb.w	ip, r3
 8015f36:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015f3a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015f3e:	0e1b      	lsrs	r3, r3, #24
 8015f40:	f36c 0007 	bfi	r0, ip, #0, #8
 8015f44:	f361 200f 	bfi	r0, r1, #8, #8
 8015f48:	f362 4017 	bfi	r0, r2, #16, #8
 8015f4c:	f363 601f 	bfi	r0, r3, #24, #8
 8015f50:	b003      	add	sp, #12
 8015f52:	f85d fb04 	ldr.w	pc, [sp], #4
 8015f56:	f100 0e01 	add.w	lr, r0, #1
 8015f5a:	fa5f fe8e 	uxtb.w	lr, lr
 8015f5e:	e7de      	b.n	8015f1e <uxr_stream_id+0x12>
 8015f60:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 8015f64:	e7db      	b.n	8015f1e <uxr_stream_id+0x12>
 8015f66:	bf00      	nop

08015f68 <uxr_stream_id_from_raw>:
 8015f68:	b082      	sub	sp, #8
 8015f6a:	b130      	cbz	r0, 8015f7a <uxr_stream_id_from_raw+0x12>
 8015f6c:	0603      	lsls	r3, r0, #24
 8015f6e:	d421      	bmi.n	8015fb4 <uxr_stream_id_from_raw+0x4c>
 8015f70:	1e42      	subs	r2, r0, #1
 8015f72:	f04f 0c01 	mov.w	ip, #1
 8015f76:	b2d2      	uxtb	r2, r2
 8015f78:	e001      	b.n	8015f7e <uxr_stream_id_from_raw+0x16>
 8015f7a:	4684      	mov	ip, r0
 8015f7c:	4602      	mov	r2, r0
 8015f7e:	2300      	movs	r3, #0
 8015f80:	f360 0307 	bfi	r3, r0, #0, #8
 8015f84:	2000      	movs	r0, #0
 8015f86:	f362 230f 	bfi	r3, r2, #8, #8
 8015f8a:	f36c 4317 	bfi	r3, ip, #16, #8
 8015f8e:	f361 631f 	bfi	r3, r1, #24, #8
 8015f92:	fa5f fc83 	uxtb.w	ip, r3
 8015f96:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015f9a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015f9e:	0e1b      	lsrs	r3, r3, #24
 8015fa0:	f36c 0007 	bfi	r0, ip, #0, #8
 8015fa4:	f361 200f 	bfi	r0, r1, #8, #8
 8015fa8:	f362 4017 	bfi	r0, r2, #16, #8
 8015fac:	f363 601f 	bfi	r0, r3, #24, #8
 8015fb0:	b002      	add	sp, #8
 8015fb2:	4770      	bx	lr
 8015fb4:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 8015fb8:	f04f 0c02 	mov.w	ip, #2
 8015fbc:	e7df      	b.n	8015f7e <uxr_stream_id_from_raw+0x16>
 8015fbe:	bf00      	nop

08015fc0 <uxr_init_stream_storage>:
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	7403      	strb	r3, [r0, #16]
 8015fc4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8015fc8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 8015fcc:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8015fd0:	4770      	bx	lr
 8015fd2:	bf00      	nop

08015fd4 <uxr_reset_stream_storage>:
 8015fd4:	b570      	push	{r4, r5, r6, lr}
 8015fd6:	7c03      	ldrb	r3, [r0, #16]
 8015fd8:	4604      	mov	r4, r0
 8015fda:	b14b      	cbz	r3, 8015ff0 <uxr_reset_stream_storage+0x1c>
 8015fdc:	4606      	mov	r6, r0
 8015fde:	2500      	movs	r5, #0
 8015fe0:	4630      	mov	r0, r6
 8015fe2:	3501      	adds	r5, #1
 8015fe4:	f004 fea6 	bl	801ad34 <uxr_reset_output_best_effort_stream>
 8015fe8:	7c23      	ldrb	r3, [r4, #16]
 8015fea:	3610      	adds	r6, #16
 8015fec:	42ab      	cmp	r3, r5
 8015fee:	d8f7      	bhi.n	8015fe0 <uxr_reset_stream_storage+0xc>
 8015ff0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015ff4:	b15b      	cbz	r3, 801600e <uxr_reset_stream_storage+0x3a>
 8015ff6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8015ffa:	2500      	movs	r5, #0
 8015ffc:	4630      	mov	r0, r6
 8015ffe:	3501      	adds	r5, #1
 8016000:	f004 fc9e 	bl	801a940 <uxr_reset_input_best_effort_stream>
 8016004:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016008:	3602      	adds	r6, #2
 801600a:	42ab      	cmp	r3, r5
 801600c:	d8f6      	bhi.n	8015ffc <uxr_reset_stream_storage+0x28>
 801600e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8016012:	b15b      	cbz	r3, 801602c <uxr_reset_stream_storage+0x58>
 8016014:	f104 0618 	add.w	r6, r4, #24
 8016018:	2500      	movs	r5, #0
 801601a:	4630      	mov	r0, r6
 801601c:	3501      	adds	r5, #1
 801601e:	f004 ff37 	bl	801ae90 <uxr_reset_output_reliable_stream>
 8016022:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8016026:	3628      	adds	r6, #40	; 0x28
 8016028:	42ab      	cmp	r3, r5
 801602a:	d8f6      	bhi.n	801601a <uxr_reset_stream_storage+0x46>
 801602c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8016030:	b15b      	cbz	r3, 801604a <uxr_reset_stream_storage+0x76>
 8016032:	f104 0648 	add.w	r6, r4, #72	; 0x48
 8016036:	2500      	movs	r5, #0
 8016038:	4630      	mov	r0, r6
 801603a:	3501      	adds	r5, #1
 801603c:	f004 fcec 	bl	801aa18 <uxr_reset_input_reliable_stream>
 8016040:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8016044:	3618      	adds	r6, #24
 8016046:	42ab      	cmp	r3, r5
 8016048:	d8f6      	bhi.n	8016038 <uxr_reset_stream_storage+0x64>
 801604a:	bd70      	pop	{r4, r5, r6, pc}

0801604c <uxr_add_output_best_effort_buffer>:
 801604c:	b510      	push	{r4, lr}
 801604e:	7c04      	ldrb	r4, [r0, #16]
 8016050:	b082      	sub	sp, #8
 8016052:	f104 0c01 	add.w	ip, r4, #1
 8016056:	f880 c010 	strb.w	ip, [r0, #16]
 801605a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 801605e:	f004 fe5f 	bl	801ad20 <uxr_init_output_best_effort_stream>
 8016062:	2201      	movs	r2, #1
 8016064:	4620      	mov	r0, r4
 8016066:	4611      	mov	r1, r2
 8016068:	b002      	add	sp, #8
 801606a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801606e:	f7ff bf4d 	b.w	8015f0c <uxr_stream_id>
 8016072:	bf00      	nop

08016074 <uxr_add_output_reliable_buffer>:
 8016074:	b510      	push	{r4, lr}
 8016076:	b084      	sub	sp, #16
 8016078:	4684      	mov	ip, r0
 801607a:	2028      	movs	r0, #40	; 0x28
 801607c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8016080:	9400      	str	r4, [sp, #0]
 8016082:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 8016086:	fb00 c004 	mla	r0, r0, r4, ip
 801608a:	f104 0e01 	add.w	lr, r4, #1
 801608e:	3018      	adds	r0, #24
 8016090:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 8016094:	f004 fec4 	bl	801ae20 <uxr_init_output_reliable_stream>
 8016098:	2201      	movs	r2, #1
 801609a:	2102      	movs	r1, #2
 801609c:	4620      	mov	r0, r4
 801609e:	b004      	add	sp, #16
 80160a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160a4:	f7ff bf32 	b.w	8015f0c <uxr_stream_id>

080160a8 <uxr_add_input_best_effort_buffer>:
 80160a8:	b510      	push	{r4, lr}
 80160aa:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 80160ae:	b082      	sub	sp, #8
 80160b0:	1c62      	adds	r2, r4, #1
 80160b2:	f104 0321 	add.w	r3, r4, #33	; 0x21
 80160b6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80160ba:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80160be:	f004 fc3b 	bl	801a938 <uxr_init_input_best_effort_stream>
 80160c2:	2200      	movs	r2, #0
 80160c4:	2101      	movs	r1, #1
 80160c6:	4620      	mov	r0, r4
 80160c8:	b002      	add	sp, #8
 80160ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160ce:	f7ff bf1d 	b.w	8015f0c <uxr_stream_id>
 80160d2:	bf00      	nop

080160d4 <uxr_add_input_reliable_buffer>:
 80160d4:	b510      	push	{r4, lr}
 80160d6:	b084      	sub	sp, #16
 80160d8:	4684      	mov	ip, r0
 80160da:	2018      	movs	r0, #24
 80160dc:	9c06      	ldr	r4, [sp, #24]
 80160de:	9400      	str	r4, [sp, #0]
 80160e0:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 80160e4:	fb00 c004 	mla	r0, r0, r4, ip
 80160e8:	f104 0e01 	add.w	lr, r4, #1
 80160ec:	3048      	adds	r0, #72	; 0x48
 80160ee:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 80160f2:	f004 fc6b 	bl	801a9cc <uxr_init_input_reliable_stream>
 80160f6:	2200      	movs	r2, #0
 80160f8:	2102      	movs	r1, #2
 80160fa:	4620      	mov	r0, r4
 80160fc:	b004      	add	sp, #16
 80160fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016102:	f7ff bf03 	b.w	8015f0c <uxr_stream_id>
 8016106:	bf00      	nop

08016108 <uxr_get_output_best_effort_stream>:
 8016108:	7c03      	ldrb	r3, [r0, #16]
 801610a:	428b      	cmp	r3, r1
 801610c:	bf8c      	ite	hi
 801610e:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8016112:	2000      	movls	r0, #0
 8016114:	4770      	bx	lr
 8016116:	bf00      	nop

08016118 <uxr_get_output_reliable_stream>:
 8016118:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 801611c:	428b      	cmp	r3, r1
 801611e:	d904      	bls.n	801612a <uxr_get_output_reliable_stream+0x12>
 8016120:	2328      	movs	r3, #40	; 0x28
 8016122:	fb03 0001 	mla	r0, r3, r1, r0
 8016126:	3018      	adds	r0, #24
 8016128:	4770      	bx	lr
 801612a:	2000      	movs	r0, #0
 801612c:	4770      	bx	lr
 801612e:	bf00      	nop

08016130 <uxr_get_input_best_effort_stream>:
 8016130:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8016134:	428b      	cmp	r3, r1
 8016136:	d903      	bls.n	8016140 <uxr_get_input_best_effort_stream+0x10>
 8016138:	3121      	adds	r1, #33	; 0x21
 801613a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801613e:	4770      	bx	lr
 8016140:	2000      	movs	r0, #0
 8016142:	4770      	bx	lr

08016144 <uxr_get_input_reliable_stream>:
 8016144:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8016148:	428b      	cmp	r3, r1
 801614a:	d904      	bls.n	8016156 <uxr_get_input_reliable_stream+0x12>
 801614c:	2318      	movs	r3, #24
 801614e:	fb03 0001 	mla	r0, r3, r1, r0
 8016152:	3048      	adds	r0, #72	; 0x48
 8016154:	4770      	bx	lr
 8016156:	2000      	movs	r0, #0
 8016158:	4770      	bx	lr
 801615a:	bf00      	nop

0801615c <uxr_output_streams_confirmed>:
 801615c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8016160:	b183      	cbz	r3, 8016184 <uxr_output_streams_confirmed+0x28>
 8016162:	b570      	push	{r4, r5, r6, lr}
 8016164:	4606      	mov	r6, r0
 8016166:	f100 0518 	add.w	r5, r0, #24
 801616a:	2400      	movs	r4, #0
 801616c:	e000      	b.n	8016170 <uxr_output_streams_confirmed+0x14>
 801616e:	b140      	cbz	r0, 8016182 <uxr_output_streams_confirmed+0x26>
 8016170:	4628      	mov	r0, r5
 8016172:	3401      	adds	r4, #1
 8016174:	f005 f900 	bl	801b378 <uxr_is_output_up_to_date>
 8016178:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 801617c:	3528      	adds	r5, #40	; 0x28
 801617e:	42a3      	cmp	r3, r4
 8016180:	d8f5      	bhi.n	801616e <uxr_output_streams_confirmed+0x12>
 8016182:	bd70      	pop	{r4, r5, r6, pc}
 8016184:	2001      	movs	r0, #1
 8016186:	4770      	bx	lr

08016188 <uxr_buffer_submessage_header>:
 8016188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801618a:	460e      	mov	r6, r1
 801618c:	2104      	movs	r1, #4
 801618e:	4604      	mov	r4, r0
 8016190:	4615      	mov	r5, r2
 8016192:	461f      	mov	r7, r3
 8016194:	f7f9 fac4 	bl	800f720 <ucdr_align_to>
 8016198:	2301      	movs	r3, #1
 801619a:	4631      	mov	r1, r6
 801619c:	4620      	mov	r0, r4
 801619e:	ea47 0203 	orr.w	r2, r7, r3
 80161a2:	7523      	strb	r3, [r4, #20]
 80161a4:	462b      	mov	r3, r5
 80161a6:	f000 fa29 	bl	80165fc <uxr_serialize_submessage_header>
 80161aa:	4620      	mov	r0, r4
 80161ac:	f7f9 face 	bl	800f74c <ucdr_buffer_remaining>
 80161b0:	42a8      	cmp	r0, r5
 80161b2:	bf34      	ite	cc
 80161b4:	2000      	movcc	r0, #0
 80161b6:	2001      	movcs	r0, #1
 80161b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161ba:	bf00      	nop

080161bc <uxr_read_submessage_header>:
 80161bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161c0:	4604      	mov	r4, r0
 80161c2:	460d      	mov	r5, r1
 80161c4:	2104      	movs	r1, #4
 80161c6:	4616      	mov	r6, r2
 80161c8:	4698      	mov	r8, r3
 80161ca:	f7f9 faa9 	bl	800f720 <ucdr_align_to>
 80161ce:	4620      	mov	r0, r4
 80161d0:	f7f9 fabc 	bl	800f74c <ucdr_buffer_remaining>
 80161d4:	2803      	cmp	r0, #3
 80161d6:	bf8c      	ite	hi
 80161d8:	2701      	movhi	r7, #1
 80161da:	2700      	movls	r7, #0
 80161dc:	d802      	bhi.n	80161e4 <uxr_read_submessage_header+0x28>
 80161de:	4638      	mov	r0, r7
 80161e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161e4:	4633      	mov	r3, r6
 80161e6:	4642      	mov	r2, r8
 80161e8:	4620      	mov	r0, r4
 80161ea:	4629      	mov	r1, r5
 80161ec:	f000 fa1a 	bl	8016624 <uxr_deserialize_submessage_header>
 80161f0:	f898 3000 	ldrb.w	r3, [r8]
 80161f4:	4638      	mov	r0, r7
 80161f6:	f003 0201 	and.w	r2, r3, #1
 80161fa:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80161fe:	f888 3000 	strb.w	r3, [r8]
 8016202:	7522      	strb	r2, [r4, #20]
 8016204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016208 <uxr_submessage_padding>:
 8016208:	f010 0003 	ands.w	r0, r0, #3
 801620c:	bf18      	it	ne
 801620e:	f1c0 0004 	rsbne	r0, r0, #4
 8016212:	4770      	bx	lr

08016214 <uxr_millis>:
 8016214:	b510      	push	{r4, lr}
 8016216:	b084      	sub	sp, #16
 8016218:	2001      	movs	r0, #1
 801621a:	4669      	mov	r1, sp
 801621c:	f7eb f964 	bl	80014e8 <clock_gettime>
 8016220:	4908      	ldr	r1, [pc, #32]	; (8016244 <uxr_millis+0x30>)
 8016222:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8016226:	fba0 0301 	umull	r0, r3, r0, r1
 801622a:	1900      	adds	r0, r0, r4
 801622c:	fb01 3102 	mla	r1, r1, r2, r3
 8016230:	4a05      	ldr	r2, [pc, #20]	; (8016248 <uxr_millis+0x34>)
 8016232:	f04f 0300 	mov.w	r3, #0
 8016236:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 801623a:	f7ea f869 	bl	8000310 <__aeabi_ldivmod>
 801623e:	b004      	add	sp, #16
 8016240:	bd10      	pop	{r4, pc}
 8016242:	bf00      	nop
 8016244:	3b9aca00 	.word	0x3b9aca00
 8016248:	000f4240 	.word	0x000f4240

0801624c <uxr_nanos>:
 801624c:	b510      	push	{r4, lr}
 801624e:	b084      	sub	sp, #16
 8016250:	2001      	movs	r0, #1
 8016252:	4669      	mov	r1, sp
 8016254:	f7eb f948 	bl	80014e8 <clock_gettime>
 8016258:	4a06      	ldr	r2, [pc, #24]	; (8016274 <uxr_nanos+0x28>)
 801625a:	9800      	ldr	r0, [sp, #0]
 801625c:	9902      	ldr	r1, [sp, #8]
 801625e:	fba0 0302 	umull	r0, r3, r0, r2
 8016262:	9c01      	ldr	r4, [sp, #4]
 8016264:	1840      	adds	r0, r0, r1
 8016266:	fb02 3304 	mla	r3, r2, r4, r3
 801626a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 801626e:	b004      	add	sp, #16
 8016270:	bd10      	pop	{r4, pc}
 8016272:	bf00      	nop
 8016274:	3b9aca00 	.word	0x3b9aca00

08016278 <on_full_output_buffer_fragmented>:
 8016278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801627c:	460c      	mov	r4, r1
 801627e:	b08a      	sub	sp, #40	; 0x28
 8016280:	4606      	mov	r6, r0
 8016282:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 8016286:	f104 0008 	add.w	r0, r4, #8
 801628a:	f7ff ff45 	bl	8016118 <uxr_get_output_reliable_stream>
 801628e:	4605      	mov	r5, r0
 8016290:	f005 f87c 	bl	801b38c <get_available_free_slots>
 8016294:	b968      	cbnz	r0, 80162b2 <on_full_output_buffer_fragmented+0x3a>
 8016296:	4620      	mov	r0, r4
 8016298:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 801629c:	4798      	blx	r3
 801629e:	b918      	cbnz	r0, 80162a8 <on_full_output_buffer_fragmented+0x30>
 80162a0:	2001      	movs	r0, #1
 80162a2:	b00a      	add	sp, #40	; 0x28
 80162a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a8:	4628      	mov	r0, r5
 80162aa:	f005 f86f 	bl	801b38c <get_available_free_slots>
 80162ae:	2800      	cmp	r0, #0
 80162b0:	d0f6      	beq.n	80162a0 <on_full_output_buffer_fragmented+0x28>
 80162b2:	8929      	ldrh	r1, [r5, #8]
 80162b4:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80162b8:	89eb      	ldrh	r3, [r5, #14]
 80162ba:	7b28      	ldrb	r0, [r5, #12]
 80162bc:	686f      	ldr	r7, [r5, #4]
 80162be:	1a12      	subs	r2, r2, r0
 80162c0:	fbb3 f0f1 	udiv	r0, r3, r1
 80162c4:	fbb7 f7f1 	udiv	r7, r7, r1
 80162c8:	fb01 3110 	mls	r1, r1, r0, r3
 80162cc:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80162d0:	b289      	uxth	r1, r1
 80162d2:	fb07 f101 	mul.w	r1, r7, r1
 80162d6:	3f04      	subs	r7, #4
 80162d8:	443a      	add	r2, r7
 80162da:	3104      	adds	r1, #4
 80162dc:	fa1f f882 	uxth.w	r8, r2
 80162e0:	463a      	mov	r2, r7
 80162e2:	eba3 0308 	sub.w	r3, r3, r8
 80162e6:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80162ea:	682b      	ldr	r3, [r5, #0]
 80162ec:	4419      	add	r1, r3
 80162ee:	2300      	movs	r3, #0
 80162f0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80162f4:	9000      	str	r0, [sp, #0]
 80162f6:	a802      	add	r0, sp, #8
 80162f8:	f7f9 f9e4 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 80162fc:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8016300:	f102 0308 	add.w	r3, r2, #8
 8016304:	42bb      	cmp	r3, r7
 8016306:	d927      	bls.n	8016358 <on_full_output_buffer_fragmented+0xe0>
 8016308:	4642      	mov	r2, r8
 801630a:	2300      	movs	r3, #0
 801630c:	210d      	movs	r1, #13
 801630e:	a802      	add	r0, sp, #8
 8016310:	f7ff ff3a 	bl	8016188 <uxr_buffer_submessage_header>
 8016314:	8929      	ldrh	r1, [r5, #8]
 8016316:	89eb      	ldrh	r3, [r5, #14]
 8016318:	686a      	ldr	r2, [r5, #4]
 801631a:	fbb3 f0f1 	udiv	r0, r3, r1
 801631e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016322:	fb01 3310 	mls	r3, r1, r0, r3
 8016326:	b29b      	uxth	r3, r3
 8016328:	fb02 f303 	mul.w	r3, r2, r3
 801632c:	682a      	ldr	r2, [r5, #0]
 801632e:	50d7      	str	r7, [r2, r3]
 8016330:	2101      	movs	r1, #1
 8016332:	89e8      	ldrh	r0, [r5, #14]
 8016334:	f005 f84c 	bl	801b3d0 <uxr_seq_num_add>
 8016338:	9904      	ldr	r1, [sp, #16]
 801633a:	9a03      	ldr	r2, [sp, #12]
 801633c:	81e8      	strh	r0, [r5, #14]
 801633e:	4630      	mov	r0, r6
 8016340:	1a52      	subs	r2, r2, r1
 8016342:	f7f9 f9d1 	bl	800f6e8 <ucdr_init_buffer>
 8016346:	4630      	mov	r0, r6
 8016348:	4622      	mov	r2, r4
 801634a:	490f      	ldr	r1, [pc, #60]	; (8016388 <on_full_output_buffer_fragmented+0x110>)
 801634c:	f7f9 f9a0 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 8016350:	2000      	movs	r0, #0
 8016352:	b00a      	add	sp, #40	; 0x28
 8016354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016358:	b292      	uxth	r2, r2
 801635a:	2302      	movs	r3, #2
 801635c:	210d      	movs	r1, #13
 801635e:	a802      	add	r0, sp, #8
 8016360:	f7ff ff12 	bl	8016188 <uxr_buffer_submessage_header>
 8016364:	8928      	ldrh	r0, [r5, #8]
 8016366:	89eb      	ldrh	r3, [r5, #14]
 8016368:	6869      	ldr	r1, [r5, #4]
 801636a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 801636e:	fbb3 f7f0 	udiv	r7, r3, r0
 8016372:	fbb1 f1f0 	udiv	r1, r1, r0
 8016376:	fb00 3317 	mls	r3, r0, r7, r3
 801637a:	3208      	adds	r2, #8
 801637c:	b29b      	uxth	r3, r3
 801637e:	fb01 f303 	mul.w	r3, r1, r3
 8016382:	6829      	ldr	r1, [r5, #0]
 8016384:	50ca      	str	r2, [r1, r3]
 8016386:	e7d3      	b.n	8016330 <on_full_output_buffer_fragmented+0xb8>
 8016388:	08016279 	.word	0x08016279

0801638c <uxr_prepare_output_stream>:
 801638c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801638e:	b087      	sub	sp, #28
 8016390:	2707      	movs	r7, #7
 8016392:	2500      	movs	r5, #0
 8016394:	461c      	mov	r4, r3
 8016396:	4606      	mov	r6, r0
 8016398:	e9cd 2102 	strd	r2, r1, [sp, #8]
 801639c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801639e:	e9cd 7500 	strd	r7, r5, [sp]
 80163a2:	3204      	adds	r2, #4
 80163a4:	f7fe ffc8 	bl	8015338 <uxr_prepare_stream_to_write_submessage>
 80163a8:	f080 0201 	eor.w	r2, r0, #1
 80163ac:	b2d2      	uxtb	r2, r2
 80163ae:	75a2      	strb	r2, [r4, #22]
 80163b0:	b112      	cbz	r2, 80163b8 <uxr_prepare_output_stream+0x2c>
 80163b2:	4628      	mov	r0, r5
 80163b4:	b007      	add	sp, #28
 80163b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163b8:	aa05      	add	r2, sp, #20
 80163ba:	9902      	ldr	r1, [sp, #8]
 80163bc:	4630      	mov	r0, r6
 80163be:	f7ff f8f7 	bl	80155b0 <uxr_init_base_object_request>
 80163c2:	a905      	add	r1, sp, #20
 80163c4:	4605      	mov	r5, r0
 80163c6:	4620      	mov	r0, r4
 80163c8:	f001 f8bc 	bl	8017544 <uxr_serialize_WRITE_DATA_Payload_Data>
 80163cc:	69a6      	ldr	r6, [r4, #24]
 80163ce:	69e7      	ldr	r7, [r4, #28]
 80163d0:	4620      	mov	r0, r4
 80163d2:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80163d6:	1a52      	subs	r2, r2, r1
 80163d8:	f7f9 f986 	bl	800f6e8 <ucdr_init_buffer>
 80163dc:	4620      	mov	r0, r4
 80163de:	463a      	mov	r2, r7
 80163e0:	4631      	mov	r1, r6
 80163e2:	f7f9 f955 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 80163e6:	4628      	mov	r0, r5
 80163e8:	b007      	add	sp, #28
 80163ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080163ec <uxr_prepare_output_stream_fragmented>:
 80163ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f0:	b091      	sub	sp, #68	; 0x44
 80163f2:	4605      	mov	r5, r0
 80163f4:	3008      	adds	r0, #8
 80163f6:	461e      	mov	r6, r3
 80163f8:	9105      	str	r1, [sp, #20]
 80163fa:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80163fe:	9204      	str	r2, [sp, #16]
 8016400:	f7ff fe8a 	bl	8016118 <uxr_get_output_reliable_stream>
 8016404:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8016408:	2b01      	cmp	r3, #1
 801640a:	f000 8093 	beq.w	8016534 <uxr_prepare_output_stream_fragmented+0x148>
 801640e:	4604      	mov	r4, r0
 8016410:	2800      	cmp	r0, #0
 8016412:	f000 808f 	beq.w	8016534 <uxr_prepare_output_stream_fragmented+0x148>
 8016416:	f004 ffb9 	bl	801b38c <get_available_free_slots>
 801641a:	2800      	cmp	r0, #0
 801641c:	f000 8085 	beq.w	801652a <uxr_prepare_output_stream_fragmented+0x13e>
 8016420:	8923      	ldrh	r3, [r4, #8]
 8016422:	89e7      	ldrh	r7, [r4, #14]
 8016424:	6862      	ldr	r2, [r4, #4]
 8016426:	fbb7 f9f3 	udiv	r9, r7, r3
 801642a:	fbb2 f2f3 	udiv	r2, r2, r3
 801642e:	fb03 7919 	mls	r9, r3, r9, r7
 8016432:	6823      	ldr	r3, [r4, #0]
 8016434:	f1a2 0b04 	sub.w	fp, r2, #4
 8016438:	9203      	str	r2, [sp, #12]
 801643a:	fa1f f989 	uxth.w	r9, r9
 801643e:	fb02 f909 	mul.w	r9, r2, r9
 8016442:	f109 0904 	add.w	r9, r9, #4
 8016446:	4499      	add	r9, r3
 8016448:	7b23      	ldrb	r3, [r4, #12]
 801644a:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801644e:	4543      	cmp	r3, r8
 8016450:	d37c      	bcc.n	801654c <uxr_prepare_output_stream_fragmented+0x160>
 8016452:	f1ab 0a04 	sub.w	sl, fp, #4
 8016456:	465a      	mov	r2, fp
 8016458:	4649      	mov	r1, r9
 801645a:	a808      	add	r0, sp, #32
 801645c:	ebaa 0a03 	sub.w	sl, sl, r3
 8016460:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016462:	f8cd 8000 	str.w	r8, [sp]
 8016466:	3308      	adds	r3, #8
 8016468:	fa1f fa8a 	uxth.w	sl, sl
 801646c:	9302      	str	r3, [sp, #8]
 801646e:	2300      	movs	r3, #0
 8016470:	f7f9 f928 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 8016474:	9b02      	ldr	r3, [sp, #8]
 8016476:	4652      	mov	r2, sl
 8016478:	210d      	movs	r1, #13
 801647a:	455b      	cmp	r3, fp
 801647c:	bf34      	ite	cc
 801647e:	2302      	movcc	r3, #2
 8016480:	2300      	movcs	r3, #0
 8016482:	a808      	add	r0, sp, #32
 8016484:	f7ff fe80 	bl	8016188 <uxr_buffer_submessage_header>
 8016488:	8921      	ldrh	r1, [r4, #8]
 801648a:	6863      	ldr	r3, [r4, #4]
 801648c:	4638      	mov	r0, r7
 801648e:	fbb7 f2f1 	udiv	r2, r7, r1
 8016492:	fbb3 f3f1 	udiv	r3, r3, r1
 8016496:	fb01 7212 	mls	r2, r1, r2, r7
 801649a:	2101      	movs	r1, #1
 801649c:	b292      	uxth	r2, r2
 801649e:	fb02 f303 	mul.w	r3, r2, r3
 80164a2:	6822      	ldr	r2, [r4, #0]
 80164a4:	f842 b003 	str.w	fp, [r2, r3]
 80164a8:	f004 ff92 	bl	801b3d0 <uxr_seq_num_add>
 80164ac:	9b03      	ldr	r3, [sp, #12]
 80164ae:	f108 0104 	add.w	r1, r8, #4
 80164b2:	4607      	mov	r7, r0
 80164b4:	f1a3 0208 	sub.w	r2, r3, #8
 80164b8:	4630      	mov	r0, r6
 80164ba:	4449      	add	r1, r9
 80164bc:	eba2 0208 	sub.w	r2, r2, r8
 80164c0:	f7f9 f912 	bl	800f6e8 <ucdr_init_buffer>
 80164c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80164c6:	2107      	movs	r1, #7
 80164c8:	81e7      	strh	r7, [r4, #14]
 80164ca:	1d1a      	adds	r2, r3, #4
 80164cc:	2300      	movs	r3, #0
 80164ce:	4630      	mov	r0, r6
 80164d0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80164d4:	bf28      	it	cs
 80164d6:	461a      	movcs	r2, r3
 80164d8:	b292      	uxth	r2, r2
 80164da:	f7ff fe55 	bl	8016188 <uxr_buffer_submessage_header>
 80164de:	aa07      	add	r2, sp, #28
 80164e0:	9904      	ldr	r1, [sp, #16]
 80164e2:	4628      	mov	r0, r5
 80164e4:	f7ff f864 	bl	80155b0 <uxr_init_base_object_request>
 80164e8:	4604      	mov	r4, r0
 80164ea:	b320      	cbz	r0, 8016536 <uxr_prepare_output_stream_fragmented+0x14a>
 80164ec:	a907      	add	r1, sp, #28
 80164ee:	4630      	mov	r0, r6
 80164f0:	f001 f828 	bl	8017544 <uxr_serialize_WRITE_DATA_Payload_Data>
 80164f4:	4630      	mov	r0, r6
 80164f6:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80164fa:	1a52      	subs	r2, r2, r1
 80164fc:	f7f9 f8f4 	bl	800f6e8 <ucdr_init_buffer>
 8016500:	9b05      	ldr	r3, [sp, #20]
 8016502:	9a02      	ldr	r2, [sp, #8]
 8016504:	4630      	mov	r0, r6
 8016506:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 801650a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801650c:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 8016510:	462a      	mov	r2, r5
 8016512:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 8016516:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016518:	4918      	ldr	r1, [pc, #96]	; (801657c <uxr_prepare_output_stream_fragmented+0x190>)
 801651a:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 801651e:	f7f9 f8b7 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 8016522:	4620      	mov	r0, r4
 8016524:	b011      	add	sp, #68	; 0x44
 8016526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801652a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801652c:	4628      	mov	r0, r5
 801652e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016530:	4798      	blx	r3
 8016532:	b920      	cbnz	r0, 801653e <uxr_prepare_output_stream_fragmented+0x152>
 8016534:	2400      	movs	r4, #0
 8016536:	4620      	mov	r0, r4
 8016538:	b011      	add	sp, #68	; 0x44
 801653a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801653e:	4620      	mov	r0, r4
 8016540:	f004 ff24 	bl	801b38c <get_available_free_slots>
 8016544:	2800      	cmp	r0, #0
 8016546:	f47f af6b 	bne.w	8016420 <uxr_prepare_output_stream_fragmented+0x34>
 801654a:	e7f3      	b.n	8016534 <uxr_prepare_output_stream_fragmented+0x148>
 801654c:	4638      	mov	r0, r7
 801654e:	2101      	movs	r1, #1
 8016550:	f004 ff3e 	bl	801b3d0 <uxr_seq_num_add>
 8016554:	8922      	ldrh	r2, [r4, #8]
 8016556:	6863      	ldr	r3, [r4, #4]
 8016558:	4607      	mov	r7, r0
 801655a:	fbb3 f9f2 	udiv	r9, r3, r2
 801655e:	fbb0 f3f2 	udiv	r3, r0, r2
 8016562:	fb02 0313 	mls	r3, r2, r3, r0
 8016566:	b29b      	uxth	r3, r3
 8016568:	fb03 f909 	mul.w	r9, r3, r9
 801656c:	6823      	ldr	r3, [r4, #0]
 801656e:	f109 0904 	add.w	r9, r9, #4
 8016572:	4499      	add	r9, r3
 8016574:	7b23      	ldrb	r3, [r4, #12]
 8016576:	f859 8c04 	ldr.w	r8, [r9, #-4]
 801657a:	e76a      	b.n	8016452 <uxr_prepare_output_stream_fragmented+0x66>
 801657c:	08016279 	.word	0x08016279

08016580 <uxr_serialize_message_header>:
 8016580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016582:	4616      	mov	r6, r2
 8016584:	b083      	sub	sp, #12
 8016586:	4604      	mov	r4, r0
 8016588:	460d      	mov	r5, r1
 801658a:	9301      	str	r3, [sp, #4]
 801658c:	9f08      	ldr	r7, [sp, #32]
 801658e:	f7f7 fdd3 	bl	800e138 <ucdr_serialize_uint8_t>
 8016592:	4631      	mov	r1, r6
 8016594:	4620      	mov	r0, r4
 8016596:	f7f7 fdcf 	bl	800e138 <ucdr_serialize_uint8_t>
 801659a:	9a01      	ldr	r2, [sp, #4]
 801659c:	2101      	movs	r1, #1
 801659e:	4620      	mov	r0, r4
 80165a0:	f7f7 fe76 	bl	800e290 <ucdr_serialize_endian_uint16_t>
 80165a4:	062b      	lsls	r3, r5, #24
 80165a6:	d501      	bpl.n	80165ac <uxr_serialize_message_header+0x2c>
 80165a8:	b003      	add	sp, #12
 80165aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ac:	2204      	movs	r2, #4
 80165ae:	4639      	mov	r1, r7
 80165b0:	4620      	mov	r0, r4
 80165b2:	b003      	add	sp, #12
 80165b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80165b8:	f7fd ba6e 	b.w	8013a98 <ucdr_serialize_array_uint8_t>

080165bc <uxr_deserialize_message_header>:
 80165bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80165be:	4616      	mov	r6, r2
 80165c0:	b083      	sub	sp, #12
 80165c2:	4604      	mov	r4, r0
 80165c4:	460d      	mov	r5, r1
 80165c6:	9301      	str	r3, [sp, #4]
 80165c8:	9f08      	ldr	r7, [sp, #32]
 80165ca:	f7f7 fdcb 	bl	800e164 <ucdr_deserialize_uint8_t>
 80165ce:	4631      	mov	r1, r6
 80165d0:	4620      	mov	r0, r4
 80165d2:	f7f7 fdc7 	bl	800e164 <ucdr_deserialize_uint8_t>
 80165d6:	9a01      	ldr	r2, [sp, #4]
 80165d8:	2101      	movs	r1, #1
 80165da:	4620      	mov	r0, r4
 80165dc:	f7f7 ff4c 	bl	800e478 <ucdr_deserialize_endian_uint16_t>
 80165e0:	f995 3000 	ldrsb.w	r3, [r5]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	da01      	bge.n	80165ec <uxr_deserialize_message_header+0x30>
 80165e8:	b003      	add	sp, #12
 80165ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ec:	2204      	movs	r2, #4
 80165ee:	4639      	mov	r1, r7
 80165f0:	4620      	mov	r0, r4
 80165f2:	b003      	add	sp, #12
 80165f4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80165f8:	f7fd bab2 	b.w	8013b60 <ucdr_deserialize_array_uint8_t>

080165fc <uxr_serialize_submessage_header>:
 80165fc:	b530      	push	{r4, r5, lr}
 80165fe:	4615      	mov	r5, r2
 8016600:	b083      	sub	sp, #12
 8016602:	4604      	mov	r4, r0
 8016604:	9301      	str	r3, [sp, #4]
 8016606:	f7f7 fd97 	bl	800e138 <ucdr_serialize_uint8_t>
 801660a:	4629      	mov	r1, r5
 801660c:	4620      	mov	r0, r4
 801660e:	f7f7 fd93 	bl	800e138 <ucdr_serialize_uint8_t>
 8016612:	9a01      	ldr	r2, [sp, #4]
 8016614:	2101      	movs	r1, #1
 8016616:	4620      	mov	r0, r4
 8016618:	b003      	add	sp, #12
 801661a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801661e:	f7f7 be37 	b.w	800e290 <ucdr_serialize_endian_uint16_t>
 8016622:	bf00      	nop

08016624 <uxr_deserialize_submessage_header>:
 8016624:	b530      	push	{r4, r5, lr}
 8016626:	4615      	mov	r5, r2
 8016628:	b083      	sub	sp, #12
 801662a:	4604      	mov	r4, r0
 801662c:	9301      	str	r3, [sp, #4]
 801662e:	f7f7 fd99 	bl	800e164 <ucdr_deserialize_uint8_t>
 8016632:	4629      	mov	r1, r5
 8016634:	4620      	mov	r0, r4
 8016636:	f7f7 fd95 	bl	800e164 <ucdr_deserialize_uint8_t>
 801663a:	9a01      	ldr	r2, [sp, #4]
 801663c:	2101      	movs	r1, #1
 801663e:	4620      	mov	r0, r4
 8016640:	b003      	add	sp, #12
 8016642:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016646:	f7f7 bf17 	b.w	800e478 <ucdr_deserialize_endian_uint16_t>
 801664a:	bf00      	nop

0801664c <uxr_serialize_CLIENT_Representation>:
 801664c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016650:	2204      	movs	r2, #4
 8016652:	460e      	mov	r6, r1
 8016654:	4605      	mov	r5, r0
 8016656:	f7fd fa1f 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 801665a:	4607      	mov	r7, r0
 801665c:	2202      	movs	r2, #2
 801665e:	1d31      	adds	r1, r6, #4
 8016660:	4628      	mov	r0, r5
 8016662:	f7fd fa19 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8016666:	4038      	ands	r0, r7
 8016668:	2202      	movs	r2, #2
 801666a:	1db1      	adds	r1, r6, #6
 801666c:	b2c7      	uxtb	r7, r0
 801666e:	4628      	mov	r0, r5
 8016670:	f7fd fa12 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8016674:	2204      	movs	r2, #4
 8016676:	4007      	ands	r7, r0
 8016678:	f106 0108 	add.w	r1, r6, #8
 801667c:	4628      	mov	r0, r5
 801667e:	f7fd fa0b 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8016682:	4007      	ands	r7, r0
 8016684:	7b31      	ldrb	r1, [r6, #12]
 8016686:	4628      	mov	r0, r5
 8016688:	f7f7 fd56 	bl	800e138 <ucdr_serialize_uint8_t>
 801668c:	7b71      	ldrb	r1, [r6, #13]
 801668e:	4007      	ands	r7, r0
 8016690:	4628      	mov	r0, r5
 8016692:	f7f7 fd23 	bl	800e0dc <ucdr_serialize_bool>
 8016696:	7b73      	ldrb	r3, [r6, #13]
 8016698:	ea07 0800 	and.w	r8, r7, r0
 801669c:	b93b      	cbnz	r3, 80166ae <uxr_serialize_CLIENT_Representation+0x62>
 801669e:	8bb1      	ldrh	r1, [r6, #28]
 80166a0:	4628      	mov	r0, r5
 80166a2:	f7f7 fd75 	bl	800e190 <ucdr_serialize_uint16_t>
 80166a6:	ea08 0000 	and.w	r0, r8, r0
 80166aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80166ae:	6931      	ldr	r1, [r6, #16]
 80166b0:	4628      	mov	r0, r5
 80166b2:	f7f7 ff57 	bl	800e564 <ucdr_serialize_uint32_t>
 80166b6:	6933      	ldr	r3, [r6, #16]
 80166b8:	b1e3      	cbz	r3, 80166f4 <uxr_serialize_CLIENT_Representation+0xa8>
 80166ba:	b1c0      	cbz	r0, 80166ee <uxr_serialize_CLIENT_Representation+0xa2>
 80166bc:	4637      	mov	r7, r6
 80166be:	f04f 0900 	mov.w	r9, #0
 80166c2:	e000      	b.n	80166c6 <uxr_serialize_CLIENT_Representation+0x7a>
 80166c4:	b19c      	cbz	r4, 80166ee <uxr_serialize_CLIENT_Representation+0xa2>
 80166c6:	6979      	ldr	r1, [r7, #20]
 80166c8:	4628      	mov	r0, r5
 80166ca:	f004 f91d 	bl	801a908 <ucdr_serialize_string>
 80166ce:	69b9      	ldr	r1, [r7, #24]
 80166d0:	4604      	mov	r4, r0
 80166d2:	4628      	mov	r0, r5
 80166d4:	f004 f918 	bl	801a908 <ucdr_serialize_string>
 80166d8:	f109 0901 	add.w	r9, r9, #1
 80166dc:	6933      	ldr	r3, [r6, #16]
 80166de:	4004      	ands	r4, r0
 80166e0:	3708      	adds	r7, #8
 80166e2:	4599      	cmp	r9, r3
 80166e4:	b2e4      	uxtb	r4, r4
 80166e6:	d3ed      	bcc.n	80166c4 <uxr_serialize_CLIENT_Representation+0x78>
 80166e8:	ea08 0804 	and.w	r8, r8, r4
 80166ec:	e7d7      	b.n	801669e <uxr_serialize_CLIENT_Representation+0x52>
 80166ee:	f04f 0800 	mov.w	r8, #0
 80166f2:	e7d4      	b.n	801669e <uxr_serialize_CLIENT_Representation+0x52>
 80166f4:	ea08 0800 	and.w	r8, r8, r0
 80166f8:	e7d1      	b.n	801669e <uxr_serialize_CLIENT_Representation+0x52>
 80166fa:	bf00      	nop

080166fc <uxr_deserialize_CLIENT_Representation>:
 80166fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016700:	2204      	movs	r2, #4
 8016702:	460c      	mov	r4, r1
 8016704:	4605      	mov	r5, r0
 8016706:	f7fd fa2b 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 801670a:	4607      	mov	r7, r0
 801670c:	2202      	movs	r2, #2
 801670e:	1d21      	adds	r1, r4, #4
 8016710:	4628      	mov	r0, r5
 8016712:	f7fd fa25 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8016716:	4038      	ands	r0, r7
 8016718:	2202      	movs	r2, #2
 801671a:	1da1      	adds	r1, r4, #6
 801671c:	b2c6      	uxtb	r6, r0
 801671e:	4628      	mov	r0, r5
 8016720:	f7fd fa1e 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8016724:	2204      	movs	r2, #4
 8016726:	4006      	ands	r6, r0
 8016728:	f104 0108 	add.w	r1, r4, #8
 801672c:	4628      	mov	r0, r5
 801672e:	f7fd fa17 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8016732:	4006      	ands	r6, r0
 8016734:	f104 010c 	add.w	r1, r4, #12
 8016738:	4628      	mov	r0, r5
 801673a:	f7f7 fd13 	bl	800e164 <ucdr_deserialize_uint8_t>
 801673e:	f104 010d 	add.w	r1, r4, #13
 8016742:	ea06 0700 	and.w	r7, r6, r0
 8016746:	4628      	mov	r0, r5
 8016748:	f7f7 fcde 	bl	800e108 <ucdr_deserialize_bool>
 801674c:	7b63      	ldrb	r3, [r4, #13]
 801674e:	4007      	ands	r7, r0
 8016750:	b93b      	cbnz	r3, 8016762 <uxr_deserialize_CLIENT_Representation+0x66>
 8016752:	f104 011c 	add.w	r1, r4, #28
 8016756:	4628      	mov	r0, r5
 8016758:	f7f7 fe1a 	bl	800e390 <ucdr_deserialize_uint16_t>
 801675c:	4038      	ands	r0, r7
 801675e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016762:	f104 0110 	add.w	r1, r4, #16
 8016766:	4628      	mov	r0, r5
 8016768:	f7f8 f82c 	bl	800e7c4 <ucdr_deserialize_uint32_t>
 801676c:	6923      	ldr	r3, [r4, #16]
 801676e:	2b01      	cmp	r3, #1
 8016770:	d903      	bls.n	801677a <uxr_deserialize_CLIENT_Representation+0x7e>
 8016772:	2301      	movs	r3, #1
 8016774:	2700      	movs	r7, #0
 8016776:	75ab      	strb	r3, [r5, #22]
 8016778:	e7eb      	b.n	8016752 <uxr_deserialize_CLIENT_Representation+0x56>
 801677a:	b30b      	cbz	r3, 80167c0 <uxr_deserialize_CLIENT_Representation+0xc4>
 801677c:	b1f0      	cbz	r0, 80167bc <uxr_deserialize_CLIENT_Representation+0xc0>
 801677e:	46a0      	mov	r8, r4
 8016780:	f04f 0900 	mov.w	r9, #0
 8016784:	e000      	b.n	8016788 <uxr_deserialize_CLIENT_Representation+0x8c>
 8016786:	b1ce      	cbz	r6, 80167bc <uxr_deserialize_CLIENT_Representation+0xc0>
 8016788:	f8d8 1014 	ldr.w	r1, [r8, #20]
 801678c:	f108 0808 	add.w	r8, r8, #8
 8016790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016794:	4628      	mov	r0, r5
 8016796:	f004 f8c7 	bl	801a928 <ucdr_deserialize_string>
 801679a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801679e:	4606      	mov	r6, r0
 80167a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80167a4:	4628      	mov	r0, r5
 80167a6:	f109 0901 	add.w	r9, r9, #1
 80167aa:	f004 f8bd 	bl	801a928 <ucdr_deserialize_string>
 80167ae:	6923      	ldr	r3, [r4, #16]
 80167b0:	4006      	ands	r6, r0
 80167b2:	4599      	cmp	r9, r3
 80167b4:	b2f6      	uxtb	r6, r6
 80167b6:	d3e6      	bcc.n	8016786 <uxr_deserialize_CLIENT_Representation+0x8a>
 80167b8:	4037      	ands	r7, r6
 80167ba:	e7ca      	b.n	8016752 <uxr_deserialize_CLIENT_Representation+0x56>
 80167bc:	2700      	movs	r7, #0
 80167be:	e7c8      	b.n	8016752 <uxr_deserialize_CLIENT_Representation+0x56>
 80167c0:	4007      	ands	r7, r0
 80167c2:	e7c6      	b.n	8016752 <uxr_deserialize_CLIENT_Representation+0x56>

080167c4 <uxr_serialize_AGENT_Representation>:
 80167c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167c8:	2204      	movs	r2, #4
 80167ca:	460f      	mov	r7, r1
 80167cc:	4605      	mov	r5, r0
 80167ce:	f7fd f963 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 80167d2:	4604      	mov	r4, r0
 80167d4:	2202      	movs	r2, #2
 80167d6:	1d39      	adds	r1, r7, #4
 80167d8:	4628      	mov	r0, r5
 80167da:	f7fd f95d 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 80167de:	4020      	ands	r0, r4
 80167e0:	2202      	movs	r2, #2
 80167e2:	1db9      	adds	r1, r7, #6
 80167e4:	b2c4      	uxtb	r4, r0
 80167e6:	4628      	mov	r0, r5
 80167e8:	f7fd f956 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 80167ec:	7a39      	ldrb	r1, [r7, #8]
 80167ee:	4004      	ands	r4, r0
 80167f0:	4628      	mov	r0, r5
 80167f2:	f7f7 fc73 	bl	800e0dc <ucdr_serialize_bool>
 80167f6:	7a3b      	ldrb	r3, [r7, #8]
 80167f8:	ea00 0804 	and.w	r8, r0, r4
 80167fc:	b913      	cbnz	r3, 8016804 <uxr_serialize_AGENT_Representation+0x40>
 80167fe:	4640      	mov	r0, r8
 8016800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016804:	68f9      	ldr	r1, [r7, #12]
 8016806:	4628      	mov	r0, r5
 8016808:	f7f7 feac 	bl	800e564 <ucdr_serialize_uint32_t>
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	b303      	cbz	r3, 8016852 <uxr_serialize_AGENT_Representation+0x8e>
 8016810:	b1d0      	cbz	r0, 8016848 <uxr_serialize_AGENT_Representation+0x84>
 8016812:	463e      	mov	r6, r7
 8016814:	f04f 0900 	mov.w	r9, #0
 8016818:	e000      	b.n	801681c <uxr_serialize_AGENT_Representation+0x58>
 801681a:	b1ac      	cbz	r4, 8016848 <uxr_serialize_AGENT_Representation+0x84>
 801681c:	6931      	ldr	r1, [r6, #16]
 801681e:	4628      	mov	r0, r5
 8016820:	f004 f872 	bl	801a908 <ucdr_serialize_string>
 8016824:	6971      	ldr	r1, [r6, #20]
 8016826:	4604      	mov	r4, r0
 8016828:	4628      	mov	r0, r5
 801682a:	f004 f86d 	bl	801a908 <ucdr_serialize_string>
 801682e:	f109 0901 	add.w	r9, r9, #1
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	4004      	ands	r4, r0
 8016836:	3608      	adds	r6, #8
 8016838:	4599      	cmp	r9, r3
 801683a:	b2e4      	uxtb	r4, r4
 801683c:	d3ed      	bcc.n	801681a <uxr_serialize_AGENT_Representation+0x56>
 801683e:	ea08 0804 	and.w	r8, r8, r4
 8016842:	4640      	mov	r0, r8
 8016844:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016848:	f04f 0800 	mov.w	r8, #0
 801684c:	4640      	mov	r0, r8
 801684e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016852:	ea08 0800 	and.w	r8, r8, r0
 8016856:	e7d2      	b.n	80167fe <uxr_serialize_AGENT_Representation+0x3a>

08016858 <uxr_serialize_DATAWRITER_Representation>:
 8016858:	b570      	push	{r4, r5, r6, lr}
 801685a:	460d      	mov	r5, r1
 801685c:	7809      	ldrb	r1, [r1, #0]
 801685e:	4606      	mov	r6, r0
 8016860:	f7f7 fc6a 	bl	800e138 <ucdr_serialize_uint8_t>
 8016864:	4604      	mov	r4, r0
 8016866:	b130      	cbz	r0, 8016876 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016868:	782b      	ldrb	r3, [r5, #0]
 801686a:	2b02      	cmp	r3, #2
 801686c:	d00c      	beq.n	8016888 <uxr_serialize_DATAWRITER_Representation+0x30>
 801686e:	2b03      	cmp	r3, #3
 8016870:	d010      	beq.n	8016894 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8016872:	2b01      	cmp	r3, #1
 8016874:	d008      	beq.n	8016888 <uxr_serialize_DATAWRITER_Representation+0x30>
 8016876:	2202      	movs	r2, #2
 8016878:	f505 7102 	add.w	r1, r5, #520	; 0x208
 801687c:	4630      	mov	r0, r6
 801687e:	f7fd f90b 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8016882:	4020      	ands	r0, r4
 8016884:	b2c0      	uxtb	r0, r0
 8016886:	bd70      	pop	{r4, r5, r6, pc}
 8016888:	6869      	ldr	r1, [r5, #4]
 801688a:	4630      	mov	r0, r6
 801688c:	f004 f83c 	bl	801a908 <ucdr_serialize_string>
 8016890:	4604      	mov	r4, r0
 8016892:	e7f0      	b.n	8016876 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8016894:	4629      	mov	r1, r5
 8016896:	4630      	mov	r0, r6
 8016898:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801689c:	3104      	adds	r1, #4
 801689e:	f7f8 ffc3 	bl	800f828 <ucdr_serialize_sequence_uint8_t>
 80168a2:	4604      	mov	r4, r0
 80168a4:	e7e7      	b.n	8016876 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80168a6:	bf00      	nop

080168a8 <uxr_serialize_ObjectVariant.part.0>:
 80168a8:	b570      	push	{r4, r5, r6, lr}
 80168aa:	780b      	ldrb	r3, [r1, #0]
 80168ac:	460c      	mov	r4, r1
 80168ae:	4605      	mov	r5, r0
 80168b0:	3b01      	subs	r3, #1
 80168b2:	2b0d      	cmp	r3, #13
 80168b4:	d854      	bhi.n	8016960 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80168b6:	e8df f003 	tbb	[pc, r3]
 80168ba:	0730      	.short	0x0730
 80168bc:	07071b1b 	.word	0x07071b1b
 80168c0:	0c530707 	.word	0x0c530707
 80168c4:	494e0c0c 	.word	0x494e0c0c
 80168c8:	3104      	adds	r1, #4
 80168ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168ce:	f7ff bfc3 	b.w	8016858 <uxr_serialize_DATAWRITER_Representation>
 80168d2:	7909      	ldrb	r1, [r1, #4]
 80168d4:	f7f7 fc30 	bl	800e138 <ucdr_serialize_uint8_t>
 80168d8:	b1e8      	cbz	r0, 8016916 <uxr_serialize_ObjectVariant.part.0+0x6e>
 80168da:	7923      	ldrb	r3, [r4, #4]
 80168dc:	2b01      	cmp	r3, #1
 80168de:	d001      	beq.n	80168e4 <uxr_serialize_ObjectVariant.part.0+0x3c>
 80168e0:	2b02      	cmp	r3, #2
 80168e2:	d13d      	bne.n	8016960 <uxr_serialize_ObjectVariant.part.0+0xb8>
 80168e4:	68a1      	ldr	r1, [r4, #8]
 80168e6:	4628      	mov	r0, r5
 80168e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80168ec:	f004 b80c 	b.w	801a908 <ucdr_serialize_string>
 80168f0:	7909      	ldrb	r1, [r1, #4]
 80168f2:	f7f7 fc21 	bl	800e138 <ucdr_serialize_uint8_t>
 80168f6:	4606      	mov	r6, r0
 80168f8:	b120      	cbz	r0, 8016904 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80168fa:	7923      	ldrb	r3, [r4, #4]
 80168fc:	2b02      	cmp	r3, #2
 80168fe:	d039      	beq.n	8016974 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8016900:	2b03      	cmp	r3, #3
 8016902:	d02f      	beq.n	8016964 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8016904:	2202      	movs	r2, #2
 8016906:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 801690a:	4628      	mov	r0, r5
 801690c:	f7fd f8c4 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8016910:	4030      	ands	r0, r6
 8016912:	b2c0      	uxtb	r0, r0
 8016914:	bd70      	pop	{r4, r5, r6, pc}
 8016916:	2000      	movs	r0, #0
 8016918:	bd70      	pop	{r4, r5, r6, pc}
 801691a:	7909      	ldrb	r1, [r1, #4]
 801691c:	f7f7 fc0c 	bl	800e138 <ucdr_serialize_uint8_t>
 8016920:	4606      	mov	r6, r0
 8016922:	b158      	cbz	r0, 801693c <uxr_serialize_ObjectVariant.part.0+0x94>
 8016924:	7923      	ldrb	r3, [r4, #4]
 8016926:	2b02      	cmp	r3, #2
 8016928:	d003      	beq.n	8016932 <uxr_serialize_ObjectVariant.part.0+0x8a>
 801692a:	2b03      	cmp	r3, #3
 801692c:	d028      	beq.n	8016980 <uxr_serialize_ObjectVariant.part.0+0xd8>
 801692e:	2b01      	cmp	r3, #1
 8016930:	d104      	bne.n	801693c <uxr_serialize_ObjectVariant.part.0+0x94>
 8016932:	68a1      	ldr	r1, [r4, #8]
 8016934:	4628      	mov	r0, r5
 8016936:	f003 ffe7 	bl	801a908 <ucdr_serialize_string>
 801693a:	4606      	mov	r6, r0
 801693c:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8016940:	4628      	mov	r0, r5
 8016942:	f7f8 f935 	bl	800ebb0 <ucdr_serialize_int16_t>
 8016946:	4030      	ands	r0, r6
 8016948:	b2c0      	uxtb	r0, r0
 801694a:	bd70      	pop	{r4, r5, r6, pc}
 801694c:	3104      	adds	r1, #4
 801694e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016952:	f7ff be7b 	b.w	801664c <uxr_serialize_CLIENT_Representation>
 8016956:	3104      	adds	r1, #4
 8016958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801695c:	f7ff bf32 	b.w	80167c4 <uxr_serialize_AGENT_Representation>
 8016960:	2001      	movs	r0, #1
 8016962:	bd70      	pop	{r4, r5, r6, pc}
 8016964:	68a2      	ldr	r2, [r4, #8]
 8016966:	f104 010c 	add.w	r1, r4, #12
 801696a:	4628      	mov	r0, r5
 801696c:	f7f8 ff5c 	bl	800f828 <ucdr_serialize_sequence_uint8_t>
 8016970:	4606      	mov	r6, r0
 8016972:	e7c7      	b.n	8016904 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016974:	68a1      	ldr	r1, [r4, #8]
 8016976:	4628      	mov	r0, r5
 8016978:	f003 ffc6 	bl	801a908 <ucdr_serialize_string>
 801697c:	4606      	mov	r6, r0
 801697e:	e7c1      	b.n	8016904 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8016980:	68a2      	ldr	r2, [r4, #8]
 8016982:	f104 010c 	add.w	r1, r4, #12
 8016986:	4628      	mov	r0, r5
 8016988:	f7f8 ff4e 	bl	800f828 <ucdr_serialize_sequence_uint8_t>
 801698c:	4606      	mov	r6, r0
 801698e:	e7d5      	b.n	801693c <uxr_serialize_ObjectVariant.part.0+0x94>

08016990 <uxr_deserialize_DATAWRITER_Representation>:
 8016990:	b570      	push	{r4, r5, r6, lr}
 8016992:	4606      	mov	r6, r0
 8016994:	460d      	mov	r5, r1
 8016996:	f7f7 fbe5 	bl	800e164 <ucdr_deserialize_uint8_t>
 801699a:	4604      	mov	r4, r0
 801699c:	b130      	cbz	r0, 80169ac <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801699e:	782b      	ldrb	r3, [r5, #0]
 80169a0:	2b02      	cmp	r3, #2
 80169a2:	d00c      	beq.n	80169be <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80169a4:	2b03      	cmp	r3, #3
 80169a6:	d012      	beq.n	80169ce <uxr_deserialize_DATAWRITER_Representation+0x3e>
 80169a8:	2b01      	cmp	r3, #1
 80169aa:	d008      	beq.n	80169be <uxr_deserialize_DATAWRITER_Representation+0x2e>
 80169ac:	2202      	movs	r2, #2
 80169ae:	f505 7102 	add.w	r1, r5, #520	; 0x208
 80169b2:	4630      	mov	r0, r6
 80169b4:	f7fd f8d4 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 80169b8:	4020      	ands	r0, r4
 80169ba:	b2c0      	uxtb	r0, r0
 80169bc:	bd70      	pop	{r4, r5, r6, pc}
 80169be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80169c2:	6869      	ldr	r1, [r5, #4]
 80169c4:	4630      	mov	r0, r6
 80169c6:	f003 ffaf 	bl	801a928 <ucdr_deserialize_string>
 80169ca:	4604      	mov	r4, r0
 80169cc:	e7ee      	b.n	80169ac <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80169ce:	1d2b      	adds	r3, r5, #4
 80169d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80169d4:	f105 0108 	add.w	r1, r5, #8
 80169d8:	4630      	mov	r0, r6
 80169da:	f7f8 ff37 	bl	800f84c <ucdr_deserialize_sequence_uint8_t>
 80169de:	4604      	mov	r4, r0
 80169e0:	e7e4      	b.n	80169ac <uxr_deserialize_DATAWRITER_Representation+0x1c>
 80169e2:	bf00      	nop

080169e4 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 80169e4:	b570      	push	{r4, r5, r6, lr}
 80169e6:	460d      	mov	r5, r1
 80169e8:	7809      	ldrb	r1, [r1, #0]
 80169ea:	4606      	mov	r6, r0
 80169ec:	f7f7 fb76 	bl	800e0dc <ucdr_serialize_bool>
 80169f0:	782b      	ldrb	r3, [r5, #0]
 80169f2:	4604      	mov	r4, r0
 80169f4:	b94b      	cbnz	r3, 8016a0a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 80169f6:	7a29      	ldrb	r1, [r5, #8]
 80169f8:	4630      	mov	r0, r6
 80169fa:	f7f7 fb6f 	bl	800e0dc <ucdr_serialize_bool>
 80169fe:	7a2b      	ldrb	r3, [r5, #8]
 8016a00:	4004      	ands	r4, r0
 8016a02:	b2e4      	uxtb	r4, r4
 8016a04:	b943      	cbnz	r3, 8016a18 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8016a06:	4620      	mov	r0, r4
 8016a08:	bd70      	pop	{r4, r5, r6, pc}
 8016a0a:	6869      	ldr	r1, [r5, #4]
 8016a0c:	4630      	mov	r0, r6
 8016a0e:	f003 ff7b 	bl	801a908 <ucdr_serialize_string>
 8016a12:	4004      	ands	r4, r0
 8016a14:	b2e4      	uxtb	r4, r4
 8016a16:	e7ee      	b.n	80169f6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8016a18:	68e9      	ldr	r1, [r5, #12]
 8016a1a:	4630      	mov	r0, r6
 8016a1c:	f003 ff74 	bl	801a908 <ucdr_serialize_string>
 8016a20:	4004      	ands	r4, r0
 8016a22:	4620      	mov	r0, r4
 8016a24:	bd70      	pop	{r4, r5, r6, pc}
 8016a26:	bf00      	nop

08016a28 <uxr_serialize_OBJK_Topic_Binary>:
 8016a28:	b570      	push	{r4, r5, r6, lr}
 8016a2a:	460d      	mov	r5, r1
 8016a2c:	4606      	mov	r6, r0
 8016a2e:	6809      	ldr	r1, [r1, #0]
 8016a30:	f003 ff6a 	bl	801a908 <ucdr_serialize_string>
 8016a34:	4604      	mov	r4, r0
 8016a36:	7929      	ldrb	r1, [r5, #4]
 8016a38:	4630      	mov	r0, r6
 8016a3a:	f7f7 fb4f 	bl	800e0dc <ucdr_serialize_bool>
 8016a3e:	792b      	ldrb	r3, [r5, #4]
 8016a40:	4004      	ands	r4, r0
 8016a42:	b2e4      	uxtb	r4, r4
 8016a44:	b943      	cbnz	r3, 8016a58 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8016a46:	7b29      	ldrb	r1, [r5, #12]
 8016a48:	4630      	mov	r0, r6
 8016a4a:	f7f7 fb47 	bl	800e0dc <ucdr_serialize_bool>
 8016a4e:	7b2b      	ldrb	r3, [r5, #12]
 8016a50:	4004      	ands	r4, r0
 8016a52:	b93b      	cbnz	r3, 8016a64 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8016a54:	4620      	mov	r0, r4
 8016a56:	bd70      	pop	{r4, r5, r6, pc}
 8016a58:	68a9      	ldr	r1, [r5, #8]
 8016a5a:	4630      	mov	r0, r6
 8016a5c:	f003 ff54 	bl	801a908 <ucdr_serialize_string>
 8016a60:	4004      	ands	r4, r0
 8016a62:	e7f0      	b.n	8016a46 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8016a64:	6929      	ldr	r1, [r5, #16]
 8016a66:	4630      	mov	r0, r6
 8016a68:	f003 ff4e 	bl	801a908 <ucdr_serialize_string>
 8016a6c:	4004      	ands	r4, r0
 8016a6e:	b2e4      	uxtb	r4, r4
 8016a70:	4620      	mov	r0, r4
 8016a72:	bd70      	pop	{r4, r5, r6, pc}

08016a74 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8016a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a78:	460c      	mov	r4, r1
 8016a7a:	7809      	ldrb	r1, [r1, #0]
 8016a7c:	4606      	mov	r6, r0
 8016a7e:	f7f7 fb2d 	bl	800e0dc <ucdr_serialize_bool>
 8016a82:	7823      	ldrb	r3, [r4, #0]
 8016a84:	4605      	mov	r5, r0
 8016a86:	b96b      	cbnz	r3, 8016aa4 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8016a88:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8016a8c:	4630      	mov	r0, r6
 8016a8e:	f7f7 fb25 	bl	800e0dc <ucdr_serialize_bool>
 8016a92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8016a96:	4005      	ands	r5, r0
 8016a98:	b2ed      	uxtb	r5, r5
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d169      	bne.n	8016b72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8016a9e:	4628      	mov	r0, r5
 8016aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aa4:	6861      	ldr	r1, [r4, #4]
 8016aa6:	4630      	mov	r0, r6
 8016aa8:	f7f7 fd5c 	bl	800e564 <ucdr_serialize_uint32_t>
 8016aac:	6863      	ldr	r3, [r4, #4]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d06b      	beq.n	8016b8a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	d067      	beq.n	8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016ab6:	68a1      	ldr	r1, [r4, #8]
 8016ab8:	4630      	mov	r0, r6
 8016aba:	f003 ff25 	bl	801a908 <ucdr_serialize_string>
 8016abe:	6863      	ldr	r3, [r4, #4]
 8016ac0:	2b01      	cmp	r3, #1
 8016ac2:	d953      	bls.n	8016b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	d05e      	beq.n	8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016ac8:	68e1      	ldr	r1, [r4, #12]
 8016aca:	4630      	mov	r0, r6
 8016acc:	f003 ff1c 	bl	801a908 <ucdr_serialize_string>
 8016ad0:	6863      	ldr	r3, [r4, #4]
 8016ad2:	2b02      	cmp	r3, #2
 8016ad4:	d94a      	bls.n	8016b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016ad6:	2800      	cmp	r0, #0
 8016ad8:	d055      	beq.n	8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016ada:	6921      	ldr	r1, [r4, #16]
 8016adc:	4630      	mov	r0, r6
 8016ade:	f003 ff13 	bl	801a908 <ucdr_serialize_string>
 8016ae2:	6863      	ldr	r3, [r4, #4]
 8016ae4:	2b03      	cmp	r3, #3
 8016ae6:	d941      	bls.n	8016b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	d04c      	beq.n	8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016aec:	6961      	ldr	r1, [r4, #20]
 8016aee:	4630      	mov	r0, r6
 8016af0:	f003 ff0a 	bl	801a908 <ucdr_serialize_string>
 8016af4:	6863      	ldr	r3, [r4, #4]
 8016af6:	2b04      	cmp	r3, #4
 8016af8:	d938      	bls.n	8016b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016afa:	2800      	cmp	r0, #0
 8016afc:	d043      	beq.n	8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016afe:	69a1      	ldr	r1, [r4, #24]
 8016b00:	4630      	mov	r0, r6
 8016b02:	f003 ff01 	bl	801a908 <ucdr_serialize_string>
 8016b06:	6863      	ldr	r3, [r4, #4]
 8016b08:	2b05      	cmp	r3, #5
 8016b0a:	d92f      	bls.n	8016b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016b0c:	2800      	cmp	r0, #0
 8016b0e:	d03a      	beq.n	8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016b10:	69e1      	ldr	r1, [r4, #28]
 8016b12:	4630      	mov	r0, r6
 8016b14:	f003 fef8 	bl	801a908 <ucdr_serialize_string>
 8016b18:	6863      	ldr	r3, [r4, #4]
 8016b1a:	2b06      	cmp	r3, #6
 8016b1c:	d926      	bls.n	8016b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016b1e:	b390      	cbz	r0, 8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016b20:	6a21      	ldr	r1, [r4, #32]
 8016b22:	4630      	mov	r0, r6
 8016b24:	f003 fef0 	bl	801a908 <ucdr_serialize_string>
 8016b28:	6863      	ldr	r3, [r4, #4]
 8016b2a:	2b07      	cmp	r3, #7
 8016b2c:	d91e      	bls.n	8016b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016b2e:	b350      	cbz	r0, 8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016b30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016b32:	4630      	mov	r0, r6
 8016b34:	f003 fee8 	bl	801a908 <ucdr_serialize_string>
 8016b38:	6863      	ldr	r3, [r4, #4]
 8016b3a:	2b08      	cmp	r3, #8
 8016b3c:	d916      	bls.n	8016b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016b3e:	b310      	cbz	r0, 8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016b40:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016b42:	4630      	mov	r0, r6
 8016b44:	f003 fee0 	bl	801a908 <ucdr_serialize_string>
 8016b48:	6863      	ldr	r3, [r4, #4]
 8016b4a:	2b09      	cmp	r3, #9
 8016b4c:	d90e      	bls.n	8016b6c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8016b4e:	b1d0      	cbz	r0, 8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016b50:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8016b54:	2709      	movs	r7, #9
 8016b56:	e000      	b.n	8016b5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8016b58:	b1a8      	cbz	r0, 8016b86 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8016b5a:	f858 1b04 	ldr.w	r1, [r8], #4
 8016b5e:	4630      	mov	r0, r6
 8016b60:	f003 fed2 	bl	801a908 <ucdr_serialize_string>
 8016b64:	3701      	adds	r7, #1
 8016b66:	6862      	ldr	r2, [r4, #4]
 8016b68:	4297      	cmp	r7, r2
 8016b6a:	d3f5      	bcc.n	8016b58 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8016b6c:	4005      	ands	r5, r0
 8016b6e:	b2ed      	uxtb	r5, r5
 8016b70:	e78a      	b.n	8016a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8016b72:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016b74:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016b78:	4630      	mov	r0, r6
 8016b7a:	f7f8 fe55 	bl	800f828 <ucdr_serialize_sequence_uint8_t>
 8016b7e:	4005      	ands	r5, r0
 8016b80:	4628      	mov	r0, r5
 8016b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b86:	2500      	movs	r5, #0
 8016b88:	e77e      	b.n	8016a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8016b8a:	4028      	ands	r0, r5
 8016b8c:	b2c5      	uxtb	r5, r0
 8016b8e:	e77b      	b.n	8016a88 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08016b90 <uxr_serialize_OBJK_Publisher_Binary>:
 8016b90:	b570      	push	{r4, r5, r6, lr}
 8016b92:	460d      	mov	r5, r1
 8016b94:	7809      	ldrb	r1, [r1, #0]
 8016b96:	4606      	mov	r6, r0
 8016b98:	f7f7 faa0 	bl	800e0dc <ucdr_serialize_bool>
 8016b9c:	782b      	ldrb	r3, [r5, #0]
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	b94b      	cbnz	r3, 8016bb6 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8016ba2:	7a29      	ldrb	r1, [r5, #8]
 8016ba4:	4630      	mov	r0, r6
 8016ba6:	f7f7 fa99 	bl	800e0dc <ucdr_serialize_bool>
 8016baa:	7a2b      	ldrb	r3, [r5, #8]
 8016bac:	4004      	ands	r4, r0
 8016bae:	b2e4      	uxtb	r4, r4
 8016bb0:	b943      	cbnz	r3, 8016bc4 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8016bb2:	4620      	mov	r0, r4
 8016bb4:	bd70      	pop	{r4, r5, r6, pc}
 8016bb6:	6869      	ldr	r1, [r5, #4]
 8016bb8:	4630      	mov	r0, r6
 8016bba:	f003 fea5 	bl	801a908 <ucdr_serialize_string>
 8016bbe:	4004      	ands	r4, r0
 8016bc0:	b2e4      	uxtb	r4, r4
 8016bc2:	e7ee      	b.n	8016ba2 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8016bc4:	f105 010c 	add.w	r1, r5, #12
 8016bc8:	4630      	mov	r0, r6
 8016bca:	f7ff ff53 	bl	8016a74 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8016bce:	4004      	ands	r4, r0
 8016bd0:	4620      	mov	r0, r4
 8016bd2:	bd70      	pop	{r4, r5, r6, pc}

08016bd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8016bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bd8:	460c      	mov	r4, r1
 8016bda:	7809      	ldrb	r1, [r1, #0]
 8016bdc:	4606      	mov	r6, r0
 8016bde:	f7f7 fa7d 	bl	800e0dc <ucdr_serialize_bool>
 8016be2:	7823      	ldrb	r3, [r4, #0]
 8016be4:	4605      	mov	r5, r0
 8016be6:	b96b      	cbnz	r3, 8016c04 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8016be8:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8016bec:	4630      	mov	r0, r6
 8016bee:	f7f7 fa75 	bl	800e0dc <ucdr_serialize_bool>
 8016bf2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8016bf6:	4005      	ands	r5, r0
 8016bf8:	b2ed      	uxtb	r5, r5
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d169      	bne.n	8016cd2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8016bfe:	4628      	mov	r0, r5
 8016c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c04:	6861      	ldr	r1, [r4, #4]
 8016c06:	4630      	mov	r0, r6
 8016c08:	f7f7 fcac 	bl	800e564 <ucdr_serialize_uint32_t>
 8016c0c:	6863      	ldr	r3, [r4, #4]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d06b      	beq.n	8016cea <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8016c12:	2800      	cmp	r0, #0
 8016c14:	d067      	beq.n	8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016c16:	68a1      	ldr	r1, [r4, #8]
 8016c18:	4630      	mov	r0, r6
 8016c1a:	f003 fe75 	bl	801a908 <ucdr_serialize_string>
 8016c1e:	6863      	ldr	r3, [r4, #4]
 8016c20:	2b01      	cmp	r3, #1
 8016c22:	d953      	bls.n	8016ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016c24:	2800      	cmp	r0, #0
 8016c26:	d05e      	beq.n	8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016c28:	68e1      	ldr	r1, [r4, #12]
 8016c2a:	4630      	mov	r0, r6
 8016c2c:	f003 fe6c 	bl	801a908 <ucdr_serialize_string>
 8016c30:	6863      	ldr	r3, [r4, #4]
 8016c32:	2b02      	cmp	r3, #2
 8016c34:	d94a      	bls.n	8016ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016c36:	2800      	cmp	r0, #0
 8016c38:	d055      	beq.n	8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016c3a:	6921      	ldr	r1, [r4, #16]
 8016c3c:	4630      	mov	r0, r6
 8016c3e:	f003 fe63 	bl	801a908 <ucdr_serialize_string>
 8016c42:	6863      	ldr	r3, [r4, #4]
 8016c44:	2b03      	cmp	r3, #3
 8016c46:	d941      	bls.n	8016ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	d04c      	beq.n	8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016c4c:	6961      	ldr	r1, [r4, #20]
 8016c4e:	4630      	mov	r0, r6
 8016c50:	f003 fe5a 	bl	801a908 <ucdr_serialize_string>
 8016c54:	6863      	ldr	r3, [r4, #4]
 8016c56:	2b04      	cmp	r3, #4
 8016c58:	d938      	bls.n	8016ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	d043      	beq.n	8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016c5e:	69a1      	ldr	r1, [r4, #24]
 8016c60:	4630      	mov	r0, r6
 8016c62:	f003 fe51 	bl	801a908 <ucdr_serialize_string>
 8016c66:	6863      	ldr	r3, [r4, #4]
 8016c68:	2b05      	cmp	r3, #5
 8016c6a:	d92f      	bls.n	8016ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016c6c:	2800      	cmp	r0, #0
 8016c6e:	d03a      	beq.n	8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016c70:	69e1      	ldr	r1, [r4, #28]
 8016c72:	4630      	mov	r0, r6
 8016c74:	f003 fe48 	bl	801a908 <ucdr_serialize_string>
 8016c78:	6863      	ldr	r3, [r4, #4]
 8016c7a:	2b06      	cmp	r3, #6
 8016c7c:	d926      	bls.n	8016ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016c7e:	b390      	cbz	r0, 8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016c80:	6a21      	ldr	r1, [r4, #32]
 8016c82:	4630      	mov	r0, r6
 8016c84:	f003 fe40 	bl	801a908 <ucdr_serialize_string>
 8016c88:	6863      	ldr	r3, [r4, #4]
 8016c8a:	2b07      	cmp	r3, #7
 8016c8c:	d91e      	bls.n	8016ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016c8e:	b350      	cbz	r0, 8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016c90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016c92:	4630      	mov	r0, r6
 8016c94:	f003 fe38 	bl	801a908 <ucdr_serialize_string>
 8016c98:	6863      	ldr	r3, [r4, #4]
 8016c9a:	2b08      	cmp	r3, #8
 8016c9c:	d916      	bls.n	8016ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016c9e:	b310      	cbz	r0, 8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016ca0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8016ca2:	4630      	mov	r0, r6
 8016ca4:	f003 fe30 	bl	801a908 <ucdr_serialize_string>
 8016ca8:	6863      	ldr	r3, [r4, #4]
 8016caa:	2b09      	cmp	r3, #9
 8016cac:	d90e      	bls.n	8016ccc <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016cae:	b1d0      	cbz	r0, 8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016cb0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8016cb4:	2709      	movs	r7, #9
 8016cb6:	e000      	b.n	8016cba <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 8016cb8:	b1a8      	cbz	r0, 8016ce6 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016cba:	f858 1b04 	ldr.w	r1, [r8], #4
 8016cbe:	4630      	mov	r0, r6
 8016cc0:	f003 fe22 	bl	801a908 <ucdr_serialize_string>
 8016cc4:	3701      	adds	r7, #1
 8016cc6:	6862      	ldr	r2, [r4, #4]
 8016cc8:	4297      	cmp	r7, r2
 8016cca:	d3f5      	bcc.n	8016cb8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 8016ccc:	4005      	ands	r5, r0
 8016cce:	b2ed      	uxtb	r5, r5
 8016cd0:	e78a      	b.n	8016be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8016cd2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016cd4:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8016cd8:	4630      	mov	r0, r6
 8016cda:	f7f8 fda5 	bl	800f828 <ucdr_serialize_sequence_uint8_t>
 8016cde:	4005      	ands	r5, r0
 8016ce0:	4628      	mov	r0, r5
 8016ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ce6:	2500      	movs	r5, #0
 8016ce8:	e77e      	b.n	8016be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 8016cea:	4028      	ands	r0, r5
 8016cec:	b2c5      	uxtb	r5, r0
 8016cee:	e77b      	b.n	8016be8 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

08016cf0 <uxr_serialize_OBJK_Subscriber_Binary>:
 8016cf0:	b570      	push	{r4, r5, r6, lr}
 8016cf2:	460d      	mov	r5, r1
 8016cf4:	7809      	ldrb	r1, [r1, #0]
 8016cf6:	4606      	mov	r6, r0
 8016cf8:	f7f7 f9f0 	bl	800e0dc <ucdr_serialize_bool>
 8016cfc:	782b      	ldrb	r3, [r5, #0]
 8016cfe:	4604      	mov	r4, r0
 8016d00:	b94b      	cbnz	r3, 8016d16 <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 8016d02:	7a29      	ldrb	r1, [r5, #8]
 8016d04:	4630      	mov	r0, r6
 8016d06:	f7f7 f9e9 	bl	800e0dc <ucdr_serialize_bool>
 8016d0a:	7a2b      	ldrb	r3, [r5, #8]
 8016d0c:	4004      	ands	r4, r0
 8016d0e:	b2e4      	uxtb	r4, r4
 8016d10:	b943      	cbnz	r3, 8016d24 <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 8016d12:	4620      	mov	r0, r4
 8016d14:	bd70      	pop	{r4, r5, r6, pc}
 8016d16:	6869      	ldr	r1, [r5, #4]
 8016d18:	4630      	mov	r0, r6
 8016d1a:	f003 fdf5 	bl	801a908 <ucdr_serialize_string>
 8016d1e:	4004      	ands	r4, r0
 8016d20:	b2e4      	uxtb	r4, r4
 8016d22:	e7ee      	b.n	8016d02 <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 8016d24:	f105 010c 	add.w	r1, r5, #12
 8016d28:	4630      	mov	r0, r6
 8016d2a:	f7ff ff53 	bl	8016bd4 <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8016d2e:	4004      	ands	r4, r0
 8016d30:	4620      	mov	r0, r4
 8016d32:	bd70      	pop	{r4, r5, r6, pc}

08016d34 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8016d34:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8016d38:	4688      	mov	r8, r1
 8016d3a:	4681      	mov	r9, r0
 8016d3c:	8809      	ldrh	r1, [r1, #0]
 8016d3e:	f7f7 fa27 	bl	800e190 <ucdr_serialize_uint16_t>
 8016d42:	4606      	mov	r6, r0
 8016d44:	f898 1002 	ldrb.w	r1, [r8, #2]
 8016d48:	4648      	mov	r0, r9
 8016d4a:	f7f7 f9c7 	bl	800e0dc <ucdr_serialize_bool>
 8016d4e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8016d52:	4006      	ands	r6, r0
 8016d54:	b2f5      	uxtb	r5, r6
 8016d56:	b9eb      	cbnz	r3, 8016d94 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8016d58:	f898 1006 	ldrb.w	r1, [r8, #6]
 8016d5c:	4648      	mov	r0, r9
 8016d5e:	f7f7 f9bd 	bl	800e0dc <ucdr_serialize_bool>
 8016d62:	f898 3006 	ldrb.w	r3, [r8, #6]
 8016d66:	4005      	ands	r5, r0
 8016d68:	bb7b      	cbnz	r3, 8016dca <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8016d6a:	f898 100c 	ldrb.w	r1, [r8, #12]
 8016d6e:	4648      	mov	r0, r9
 8016d70:	f7f7 f9b4 	bl	800e0dc <ucdr_serialize_bool>
 8016d74:	f898 300c 	ldrb.w	r3, [r8, #12]
 8016d78:	4005      	ands	r5, r0
 8016d7a:	b9f3      	cbnz	r3, 8016dba <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8016d7c:	f898 1014 	ldrb.w	r1, [r8, #20]
 8016d80:	4648      	mov	r0, r9
 8016d82:	f7f7 f9ab 	bl	800e0dc <ucdr_serialize_bool>
 8016d86:	f898 3014 	ldrb.w	r3, [r8, #20]
 8016d8a:	4005      	ands	r5, r0
 8016d8c:	b94b      	cbnz	r3, 8016da2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8016d8e:	4628      	mov	r0, r5
 8016d90:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8016d94:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8016d98:	4648      	mov	r0, r9
 8016d9a:	f7f7 f9f9 	bl	800e190 <ucdr_serialize_uint16_t>
 8016d9e:	4005      	ands	r5, r0
 8016da0:	e7da      	b.n	8016d58 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8016da2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8016da6:	f108 011c 	add.w	r1, r8, #28
 8016daa:	4648      	mov	r0, r9
 8016dac:	f7f8 fd3c 	bl	800f828 <ucdr_serialize_sequence_uint8_t>
 8016db0:	4028      	ands	r0, r5
 8016db2:	b2c5      	uxtb	r5, r0
 8016db4:	4628      	mov	r0, r5
 8016db6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8016dba:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8016dbe:	4648      	mov	r0, r9
 8016dc0:	f7f7 fbd0 	bl	800e564 <ucdr_serialize_uint32_t>
 8016dc4:	4028      	ands	r0, r5
 8016dc6:	b2c5      	uxtb	r5, r0
 8016dc8:	e7d8      	b.n	8016d7c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8016dca:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8016dce:	4648      	mov	r0, r9
 8016dd0:	f7f7 fbc8 	bl	800e564 <ucdr_serialize_uint32_t>
 8016dd4:	4028      	ands	r0, r5
 8016dd6:	b2c5      	uxtb	r5, r0
 8016dd8:	e7c7      	b.n	8016d6a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8016dda:	bf00      	nop

08016ddc <uxr_serialize_OBJK_DataReader_Binary>:
 8016ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dde:	2202      	movs	r2, #2
 8016de0:	460c      	mov	r4, r1
 8016de2:	4606      	mov	r6, r0
 8016de4:	f7fc fe58 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8016de8:	4605      	mov	r5, r0
 8016dea:	78a1      	ldrb	r1, [r4, #2]
 8016dec:	4630      	mov	r0, r6
 8016dee:	f7f7 f975 	bl	800e0dc <ucdr_serialize_bool>
 8016df2:	78a3      	ldrb	r3, [r4, #2]
 8016df4:	4005      	ands	r5, r0
 8016df6:	b2ed      	uxtb	r5, r5
 8016df8:	b90b      	cbnz	r3, 8016dfe <uxr_serialize_OBJK_DataReader_Binary+0x22>
 8016dfa:	4628      	mov	r0, r5
 8016dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dfe:	f104 0108 	add.w	r1, r4, #8
 8016e02:	4630      	mov	r0, r6
 8016e04:	f7ff ff96 	bl	8016d34 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8016e08:	4607      	mov	r7, r0
 8016e0a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8016e0e:	4630      	mov	r0, r6
 8016e10:	f7f7 f964 	bl	800e0dc <ucdr_serialize_bool>
 8016e14:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016e18:	4038      	ands	r0, r7
 8016e1a:	b2c7      	uxtb	r7, r0
 8016e1c:	b95b      	cbnz	r3, 8016e36 <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8016e1e:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 8016e22:	4630      	mov	r0, r6
 8016e24:	f7f7 f95a 	bl	800e0dc <ucdr_serialize_bool>
 8016e28:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016e2c:	4007      	ands	r7, r0
 8016e2e:	b94b      	cbnz	r3, 8016e44 <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8016e30:	403d      	ands	r5, r7
 8016e32:	4628      	mov	r0, r5
 8016e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e36:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	f7f7 fde8 	bl	800ea10 <ucdr_serialize_uint64_t>
 8016e40:	4007      	ands	r7, r0
 8016e42:	e7ec      	b.n	8016e1e <uxr_serialize_OBJK_DataReader_Binary+0x42>
 8016e44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016e46:	4630      	mov	r0, r6
 8016e48:	f003 fd5e 	bl	801a908 <ucdr_serialize_string>
 8016e4c:	4007      	ands	r7, r0
 8016e4e:	b2ff      	uxtb	r7, r7
 8016e50:	e7ee      	b.n	8016e30 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 8016e52:	bf00      	nop

08016e54 <uxr_serialize_OBJK_DataWriter_Binary>:
 8016e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e56:	2202      	movs	r2, #2
 8016e58:	460d      	mov	r5, r1
 8016e5a:	4606      	mov	r6, r0
 8016e5c:	f7fc fe1c 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8016e60:	4604      	mov	r4, r0
 8016e62:	78a9      	ldrb	r1, [r5, #2]
 8016e64:	4630      	mov	r0, r6
 8016e66:	f7f7 f939 	bl	800e0dc <ucdr_serialize_bool>
 8016e6a:	78ab      	ldrb	r3, [r5, #2]
 8016e6c:	4004      	ands	r4, r0
 8016e6e:	b2e4      	uxtb	r4, r4
 8016e70:	b90b      	cbnz	r3, 8016e76 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8016e72:	4620      	mov	r0, r4
 8016e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e76:	f105 0108 	add.w	r1, r5, #8
 8016e7a:	4630      	mov	r0, r6
 8016e7c:	f7ff ff5a 	bl	8016d34 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8016e80:	4607      	mov	r7, r0
 8016e82:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 8016e86:	4630      	mov	r0, r6
 8016e88:	f7f7 f928 	bl	800e0dc <ucdr_serialize_bool>
 8016e8c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8016e90:	4038      	ands	r0, r7
 8016e92:	b2c7      	uxtb	r7, r0
 8016e94:	b913      	cbnz	r3, 8016e9c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8016e96:	403c      	ands	r4, r7
 8016e98:	4620      	mov	r0, r4
 8016e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e9c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8016ea0:	4630      	mov	r0, r6
 8016ea2:	f7f7 fdb5 	bl	800ea10 <ucdr_serialize_uint64_t>
 8016ea6:	4007      	ands	r7, r0
 8016ea8:	e7f5      	b.n	8016e96 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8016eaa:	bf00      	nop

08016eac <uxr_serialize_OBJK_Replier_Binary>:
 8016eac:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8016eb0:	460f      	mov	r7, r1
 8016eb2:	4680      	mov	r8, r0
 8016eb4:	6809      	ldr	r1, [r1, #0]
 8016eb6:	f003 fd27 	bl	801a908 <ucdr_serialize_string>
 8016eba:	4605      	mov	r5, r0
 8016ebc:	6879      	ldr	r1, [r7, #4]
 8016ebe:	4640      	mov	r0, r8
 8016ec0:	f003 fd22 	bl	801a908 <ucdr_serialize_string>
 8016ec4:	4005      	ands	r5, r0
 8016ec6:	68b9      	ldr	r1, [r7, #8]
 8016ec8:	4640      	mov	r0, r8
 8016eca:	b2ec      	uxtb	r4, r5
 8016ecc:	f003 fd1c 	bl	801a908 <ucdr_serialize_string>
 8016ed0:	7b39      	ldrb	r1, [r7, #12]
 8016ed2:	4004      	ands	r4, r0
 8016ed4:	4640      	mov	r0, r8
 8016ed6:	f7f7 f901 	bl	800e0dc <ucdr_serialize_bool>
 8016eda:	7b3b      	ldrb	r3, [r7, #12]
 8016edc:	4004      	ands	r4, r0
 8016ede:	b94b      	cbnz	r3, 8016ef4 <uxr_serialize_OBJK_Replier_Binary+0x48>
 8016ee0:	7d39      	ldrb	r1, [r7, #20]
 8016ee2:	4640      	mov	r0, r8
 8016ee4:	f7f7 f8fa 	bl	800e0dc <ucdr_serialize_bool>
 8016ee8:	7d3b      	ldrb	r3, [r7, #20]
 8016eea:	4004      	ands	r4, r0
 8016eec:	b943      	cbnz	r3, 8016f00 <uxr_serialize_OBJK_Replier_Binary+0x54>
 8016eee:	4620      	mov	r0, r4
 8016ef0:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8016ef4:	6939      	ldr	r1, [r7, #16]
 8016ef6:	4640      	mov	r0, r8
 8016ef8:	f003 fd06 	bl	801a908 <ucdr_serialize_string>
 8016efc:	4004      	ands	r4, r0
 8016efe:	e7ef      	b.n	8016ee0 <uxr_serialize_OBJK_Replier_Binary+0x34>
 8016f00:	69b9      	ldr	r1, [r7, #24]
 8016f02:	4640      	mov	r0, r8
 8016f04:	f003 fd00 	bl	801a908 <ucdr_serialize_string>
 8016f08:	4004      	ands	r4, r0
 8016f0a:	b2e4      	uxtb	r4, r4
 8016f0c:	4620      	mov	r0, r4
 8016f0e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 8016f12:	bf00      	nop

08016f14 <uxr_deserialize_ObjectVariant>:
 8016f14:	b570      	push	{r4, r5, r6, lr}
 8016f16:	4605      	mov	r5, r0
 8016f18:	460e      	mov	r6, r1
 8016f1a:	f7f7 f923 	bl	800e164 <ucdr_deserialize_uint8_t>
 8016f1e:	b168      	cbz	r0, 8016f3c <uxr_deserialize_ObjectVariant+0x28>
 8016f20:	7833      	ldrb	r3, [r6, #0]
 8016f22:	4604      	mov	r4, r0
 8016f24:	3b01      	subs	r3, #1
 8016f26:	2b0d      	cmp	r3, #13
 8016f28:	d809      	bhi.n	8016f3e <uxr_deserialize_ObjectVariant+0x2a>
 8016f2a:	e8df f003 	tbb	[pc, r3]
 8016f2e:	0a41      	.short	0x0a41
 8016f30:	0a0a2323 	.word	0x0a0a2323
 8016f34:	10080a0a 	.word	0x10080a0a
 8016f38:	565c1010 	.word	0x565c1010
 8016f3c:	2400      	movs	r4, #0
 8016f3e:	4620      	mov	r0, r4
 8016f40:	bd70      	pop	{r4, r5, r6, pc}
 8016f42:	1d31      	adds	r1, r6, #4
 8016f44:	4628      	mov	r0, r5
 8016f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f4a:	f7ff bd21 	b.w	8016990 <uxr_deserialize_DATAWRITER_Representation>
 8016f4e:	1d31      	adds	r1, r6, #4
 8016f50:	4628      	mov	r0, r5
 8016f52:	f7f7 f907 	bl	800e164 <ucdr_deserialize_uint8_t>
 8016f56:	2800      	cmp	r0, #0
 8016f58:	d0f0      	beq.n	8016f3c <uxr_deserialize_ObjectVariant+0x28>
 8016f5a:	7933      	ldrb	r3, [r6, #4]
 8016f5c:	2b01      	cmp	r3, #1
 8016f5e:	d001      	beq.n	8016f64 <uxr_deserialize_ObjectVariant+0x50>
 8016f60:	2b02      	cmp	r3, #2
 8016f62:	d1ec      	bne.n	8016f3e <uxr_deserialize_ObjectVariant+0x2a>
 8016f64:	68b1      	ldr	r1, [r6, #8]
 8016f66:	4628      	mov	r0, r5
 8016f68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016f70:	f003 bcda 	b.w	801a928 <ucdr_deserialize_string>
 8016f74:	1d31      	adds	r1, r6, #4
 8016f76:	4628      	mov	r0, r5
 8016f78:	f7f7 f8f4 	bl	800e164 <ucdr_deserialize_uint8_t>
 8016f7c:	4604      	mov	r4, r0
 8016f7e:	b170      	cbz	r0, 8016f9e <uxr_deserialize_ObjectVariant+0x8a>
 8016f80:	7933      	ldrb	r3, [r6, #4]
 8016f82:	2b02      	cmp	r3, #2
 8016f84:	d04c      	beq.n	8017020 <uxr_deserialize_ObjectVariant+0x10c>
 8016f86:	2b03      	cmp	r3, #3
 8016f88:	d109      	bne.n	8016f9e <uxr_deserialize_ObjectVariant+0x8a>
 8016f8a:	f106 0308 	add.w	r3, r6, #8
 8016f8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016f92:	f106 010c 	add.w	r1, r6, #12
 8016f96:	4628      	mov	r0, r5
 8016f98:	f7f8 fc58 	bl	800f84c <ucdr_deserialize_sequence_uint8_t>
 8016f9c:	4604      	mov	r4, r0
 8016f9e:	2202      	movs	r2, #2
 8016fa0:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	f7fc fddb 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8016faa:	4020      	ands	r0, r4
 8016fac:	b2c4      	uxtb	r4, r0
 8016fae:	e7c6      	b.n	8016f3e <uxr_deserialize_ObjectVariant+0x2a>
 8016fb0:	1d31      	adds	r1, r6, #4
 8016fb2:	4628      	mov	r0, r5
 8016fb4:	f7f7 f8d6 	bl	800e164 <ucdr_deserialize_uint8_t>
 8016fb8:	4604      	mov	r4, r0
 8016fba:	b130      	cbz	r0, 8016fca <uxr_deserialize_ObjectVariant+0xb6>
 8016fbc:	7933      	ldrb	r3, [r6, #4]
 8016fbe:	2b02      	cmp	r3, #2
 8016fc0:	d036      	beq.n	8017030 <uxr_deserialize_ObjectVariant+0x11c>
 8016fc2:	2b03      	cmp	r3, #3
 8016fc4:	d03c      	beq.n	8017040 <uxr_deserialize_ObjectVariant+0x12c>
 8016fc6:	2b01      	cmp	r3, #1
 8016fc8:	d032      	beq.n	8017030 <uxr_deserialize_ObjectVariant+0x11c>
 8016fca:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 8016fce:	4628      	mov	r0, r5
 8016fd0:	f7f7 fe6e 	bl	800ecb0 <ucdr_deserialize_int16_t>
 8016fd4:	4020      	ands	r0, r4
 8016fd6:	b2c4      	uxtb	r4, r0
 8016fd8:	e7b1      	b.n	8016f3e <uxr_deserialize_ObjectVariant+0x2a>
 8016fda:	1d31      	adds	r1, r6, #4
 8016fdc:	4628      	mov	r0, r5
 8016fde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016fe2:	f7ff bb8b 	b.w	80166fc <uxr_deserialize_CLIENT_Representation>
 8016fe6:	2204      	movs	r2, #4
 8016fe8:	4628      	mov	r0, r5
 8016fea:	18b1      	adds	r1, r6, r2
 8016fec:	f7fc fdb8 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8016ff0:	4604      	mov	r4, r0
 8016ff2:	2202      	movs	r2, #2
 8016ff4:	f106 0108 	add.w	r1, r6, #8
 8016ff8:	4628      	mov	r0, r5
 8016ffa:	f7fc fdb1 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8016ffe:	4004      	ands	r4, r0
 8017000:	2202      	movs	r2, #2
 8017002:	f106 010a 	add.w	r1, r6, #10
 8017006:	4628      	mov	r0, r5
 8017008:	b2e4      	uxtb	r4, r4
 801700a:	f7fc fda9 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 801700e:	4603      	mov	r3, r0
 8017010:	f106 010c 	add.w	r1, r6, #12
 8017014:	4628      	mov	r0, r5
 8017016:	401c      	ands	r4, r3
 8017018:	f7f7 f876 	bl	800e108 <ucdr_deserialize_bool>
 801701c:	4004      	ands	r4, r0
 801701e:	e78e      	b.n	8016f3e <uxr_deserialize_ObjectVariant+0x2a>
 8017020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017024:	68b1      	ldr	r1, [r6, #8]
 8017026:	4628      	mov	r0, r5
 8017028:	f003 fc7e 	bl	801a928 <ucdr_deserialize_string>
 801702c:	4604      	mov	r4, r0
 801702e:	e7b6      	b.n	8016f9e <uxr_deserialize_ObjectVariant+0x8a>
 8017030:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017034:	68b1      	ldr	r1, [r6, #8]
 8017036:	4628      	mov	r0, r5
 8017038:	f003 fc76 	bl	801a928 <ucdr_deserialize_string>
 801703c:	4604      	mov	r4, r0
 801703e:	e7c4      	b.n	8016fca <uxr_deserialize_ObjectVariant+0xb6>
 8017040:	f106 0308 	add.w	r3, r6, #8
 8017044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017048:	f106 010c 	add.w	r1, r6, #12
 801704c:	4628      	mov	r0, r5
 801704e:	f7f8 fbfd 	bl	800f84c <ucdr_deserialize_sequence_uint8_t>
 8017052:	4604      	mov	r4, r0
 8017054:	e7b9      	b.n	8016fca <uxr_deserialize_ObjectVariant+0xb6>
 8017056:	bf00      	nop

08017058 <uxr_deserialize_BaseObjectRequest>:
 8017058:	b570      	push	{r4, r5, r6, lr}
 801705a:	2202      	movs	r2, #2
 801705c:	4605      	mov	r5, r0
 801705e:	460e      	mov	r6, r1
 8017060:	f7fc fd7e 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8017064:	2202      	movs	r2, #2
 8017066:	4604      	mov	r4, r0
 8017068:	4628      	mov	r0, r5
 801706a:	18b1      	adds	r1, r6, r2
 801706c:	f7fc fd78 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8017070:	4020      	ands	r0, r4
 8017072:	b2c0      	uxtb	r0, r0
 8017074:	bd70      	pop	{r4, r5, r6, pc}
 8017076:	bf00      	nop

08017078 <uxr_serialize_ActivityInfoVariant>:
 8017078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801707c:	460e      	mov	r6, r1
 801707e:	7809      	ldrb	r1, [r1, #0]
 8017080:	4680      	mov	r8, r0
 8017082:	f7f7 f859 	bl	800e138 <ucdr_serialize_uint8_t>
 8017086:	4607      	mov	r7, r0
 8017088:	b138      	cbz	r0, 801709a <uxr_serialize_ActivityInfoVariant+0x22>
 801708a:	7833      	ldrb	r3, [r6, #0]
 801708c:	2b06      	cmp	r3, #6
 801708e:	f000 8081 	beq.w	8017194 <uxr_serialize_ActivityInfoVariant+0x11c>
 8017092:	2b0d      	cmp	r3, #13
 8017094:	d014      	beq.n	80170c0 <uxr_serialize_ActivityInfoVariant+0x48>
 8017096:	2b05      	cmp	r3, #5
 8017098:	d002      	beq.n	80170a0 <uxr_serialize_ActivityInfoVariant+0x28>
 801709a:	4638      	mov	r0, r7
 801709c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170a0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80170a4:	4640      	mov	r0, r8
 80170a6:	f7f7 fd83 	bl	800ebb0 <ucdr_serialize_int16_t>
 80170aa:	4607      	mov	r7, r0
 80170ac:	4640      	mov	r0, r8
 80170ae:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80170b2:	f7f7 fcad 	bl	800ea10 <ucdr_serialize_uint64_t>
 80170b6:	4038      	ands	r0, r7
 80170b8:	b2c7      	uxtb	r7, r0
 80170ba:	4638      	mov	r0, r7
 80170bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170c0:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80170c4:	4640      	mov	r0, r8
 80170c6:	f7f7 fd73 	bl	800ebb0 <ucdr_serialize_int16_t>
 80170ca:	68f1      	ldr	r1, [r6, #12]
 80170cc:	4607      	mov	r7, r0
 80170ce:	4640      	mov	r0, r8
 80170d0:	f7f7 fa48 	bl	800e564 <ucdr_serialize_uint32_t>
 80170d4:	68f3      	ldr	r3, [r6, #12]
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	d0ed      	beq.n	80170b6 <uxr_serialize_ActivityInfoVariant+0x3e>
 80170da:	b318      	cbz	r0, 8017124 <uxr_serialize_ActivityInfoVariant+0xac>
 80170dc:	f106 090c 	add.w	r9, r6, #12
 80170e0:	2400      	movs	r4, #0
 80170e2:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80170e6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 80170ea:	7c29      	ldrb	r1, [r5, #16]
 80170ec:	4640      	mov	r0, r8
 80170ee:	f7f7 f823 	bl	800e138 <ucdr_serialize_uint8_t>
 80170f2:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80170f6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80170fa:	2800      	cmp	r0, #0
 80170fc:	d051      	beq.n	80171a2 <uxr_serialize_ActivityInfoVariant+0x12a>
 80170fe:	7c2b      	ldrb	r3, [r5, #16]
 8017100:	00c9      	lsls	r1, r1, #3
 8017102:	2b03      	cmp	r3, #3
 8017104:	d854      	bhi.n	80171b0 <uxr_serialize_ActivityInfoVariant+0x138>
 8017106:	e8df f003 	tbb	[pc, r3]
 801710a:	2133      	.short	0x2133
 801710c:	020f      	.short	0x020f
 801710e:	4449      	add	r1, r9
 8017110:	4640      	mov	r0, r8
 8017112:	6889      	ldr	r1, [r1, #8]
 8017114:	f003 fbf8 	bl	801a908 <ucdr_serialize_string>
 8017118:	3401      	adds	r4, #1
 801711a:	68f2      	ldr	r2, [r6, #12]
 801711c:	4294      	cmp	r4, r2
 801711e:	d244      	bcs.n	80171aa <uxr_serialize_ActivityInfoVariant+0x132>
 8017120:	2800      	cmp	r0, #0
 8017122:	d1de      	bne.n	80170e2 <uxr_serialize_ActivityInfoVariant+0x6a>
 8017124:	2700      	movs	r7, #0
 8017126:	e7b8      	b.n	801709a <uxr_serialize_ActivityInfoVariant+0x22>
 8017128:	3108      	adds	r1, #8
 801712a:	44a2      	add	sl, r4
 801712c:	2210      	movs	r2, #16
 801712e:	4640      	mov	r0, r8
 8017130:	4449      	add	r1, r9
 8017132:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8017136:	f7fc fcaf 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 801713a:	4605      	mov	r5, r0
 801713c:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8017140:	4640      	mov	r0, r8
 8017142:	f7f7 fa0f 	bl	800e564 <ucdr_serialize_uint32_t>
 8017146:	4028      	ands	r0, r5
 8017148:	b2c0      	uxtb	r0, r0
 801714a:	e7e5      	b.n	8017118 <uxr_serialize_ActivityInfoVariant+0xa0>
 801714c:	3108      	adds	r1, #8
 801714e:	44a2      	add	sl, r4
 8017150:	2204      	movs	r2, #4
 8017152:	4640      	mov	r0, r8
 8017154:	4449      	add	r1, r9
 8017156:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801715a:	f7fc fc9d 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 801715e:	4605      	mov	r5, r0
 8017160:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 8017164:	4640      	mov	r0, r8
 8017166:	f7f7 f813 	bl	800e190 <ucdr_serialize_uint16_t>
 801716a:	4028      	ands	r0, r5
 801716c:	b2c0      	uxtb	r0, r0
 801716e:	e7d3      	b.n	8017118 <uxr_serialize_ActivityInfoVariant+0xa0>
 8017170:	3108      	adds	r1, #8
 8017172:	44a2      	add	sl, r4
 8017174:	2202      	movs	r2, #2
 8017176:	4640      	mov	r0, r8
 8017178:	4449      	add	r1, r9
 801717a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801717e:	f7fc fc8b 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017182:	4605      	mov	r5, r0
 8017184:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8017188:	4640      	mov	r0, r8
 801718a:	f7f6 ffd5 	bl	800e138 <ucdr_serialize_uint8_t>
 801718e:	4028      	ands	r0, r5
 8017190:	b2c0      	uxtb	r0, r0
 8017192:	e7c1      	b.n	8017118 <uxr_serialize_ActivityInfoVariant+0xa0>
 8017194:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8017198:	4640      	mov	r0, r8
 801719a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801719e:	f7f7 bd07 	b.w	800ebb0 <ucdr_serialize_int16_t>
 80171a2:	3401      	adds	r4, #1
 80171a4:	68f2      	ldr	r2, [r6, #12]
 80171a6:	42a2      	cmp	r2, r4
 80171a8:	d8bc      	bhi.n	8017124 <uxr_serialize_ActivityInfoVariant+0xac>
 80171aa:	4007      	ands	r7, r0
 80171ac:	b2ff      	uxtb	r7, r7
 80171ae:	e774      	b.n	801709a <uxr_serialize_ActivityInfoVariant+0x22>
 80171b0:	3401      	adds	r4, #1
 80171b2:	68f3      	ldr	r3, [r6, #12]
 80171b4:	3518      	adds	r5, #24
 80171b6:	429c      	cmp	r4, r3
 80171b8:	d397      	bcc.n	80170ea <uxr_serialize_ActivityInfoVariant+0x72>
 80171ba:	e76e      	b.n	801709a <uxr_serialize_ActivityInfoVariant+0x22>

080171bc <uxr_deserialize_BaseObjectReply>:
 80171bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171c0:	2202      	movs	r2, #2
 80171c2:	4606      	mov	r6, r0
 80171c4:	460f      	mov	r7, r1
 80171c6:	f7fc fccb 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 80171ca:	2202      	movs	r2, #2
 80171cc:	4605      	mov	r5, r0
 80171ce:	4630      	mov	r0, r6
 80171d0:	18b9      	adds	r1, r7, r2
 80171d2:	f7fc fcc5 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 80171d6:	4680      	mov	r8, r0
 80171d8:	1d39      	adds	r1, r7, #4
 80171da:	4630      	mov	r0, r6
 80171dc:	f7f6 ffc2 	bl	800e164 <ucdr_deserialize_uint8_t>
 80171e0:	ea05 0508 	and.w	r5, r5, r8
 80171e4:	4604      	mov	r4, r0
 80171e6:	1d79      	adds	r1, r7, #5
 80171e8:	4630      	mov	r0, r6
 80171ea:	402c      	ands	r4, r5
 80171ec:	f7f6 ffba 	bl	800e164 <ucdr_deserialize_uint8_t>
 80171f0:	4020      	ands	r0, r4
 80171f2:	b2c0      	uxtb	r0, r0
 80171f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080171f8 <uxr_serialize_ReadSpecification>:
 80171f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80171fa:	460e      	mov	r6, r1
 80171fc:	4607      	mov	r7, r0
 80171fe:	7809      	ldrb	r1, [r1, #0]
 8017200:	f7f6 ff9a 	bl	800e138 <ucdr_serialize_uint8_t>
 8017204:	4604      	mov	r4, r0
 8017206:	7871      	ldrb	r1, [r6, #1]
 8017208:	4638      	mov	r0, r7
 801720a:	f7f6 ff95 	bl	800e138 <ucdr_serialize_uint8_t>
 801720e:	4004      	ands	r4, r0
 8017210:	78b1      	ldrb	r1, [r6, #2]
 8017212:	4638      	mov	r0, r7
 8017214:	f7f6 ff62 	bl	800e0dc <ucdr_serialize_bool>
 8017218:	78b3      	ldrb	r3, [r6, #2]
 801721a:	b2e4      	uxtb	r4, r4
 801721c:	4004      	ands	r4, r0
 801721e:	b943      	cbnz	r3, 8017232 <uxr_serialize_ReadSpecification+0x3a>
 8017220:	7a31      	ldrb	r1, [r6, #8]
 8017222:	4638      	mov	r0, r7
 8017224:	f7f6 ff5a 	bl	800e0dc <ucdr_serialize_bool>
 8017228:	7a33      	ldrb	r3, [r6, #8]
 801722a:	4004      	ands	r4, r0
 801722c:	b93b      	cbnz	r3, 801723e <uxr_serialize_ReadSpecification+0x46>
 801722e:	4620      	mov	r0, r4
 8017230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017232:	6871      	ldr	r1, [r6, #4]
 8017234:	4638      	mov	r0, r7
 8017236:	f003 fb67 	bl	801a908 <ucdr_serialize_string>
 801723a:	4004      	ands	r4, r0
 801723c:	e7f0      	b.n	8017220 <uxr_serialize_ReadSpecification+0x28>
 801723e:	8971      	ldrh	r1, [r6, #10]
 8017240:	4638      	mov	r0, r7
 8017242:	f7f6 ffa5 	bl	800e190 <ucdr_serialize_uint16_t>
 8017246:	4605      	mov	r5, r0
 8017248:	89b1      	ldrh	r1, [r6, #12]
 801724a:	4638      	mov	r0, r7
 801724c:	f7f6 ffa0 	bl	800e190 <ucdr_serialize_uint16_t>
 8017250:	4005      	ands	r5, r0
 8017252:	89f1      	ldrh	r1, [r6, #14]
 8017254:	4638      	mov	r0, r7
 8017256:	b2ed      	uxtb	r5, r5
 8017258:	f7f6 ff9a 	bl	800e190 <ucdr_serialize_uint16_t>
 801725c:	8a31      	ldrh	r1, [r6, #16]
 801725e:	4025      	ands	r5, r4
 8017260:	4604      	mov	r4, r0
 8017262:	4638      	mov	r0, r7
 8017264:	4025      	ands	r5, r4
 8017266:	f7f6 ff93 	bl	800e190 <ucdr_serialize_uint16_t>
 801726a:	ea00 0405 	and.w	r4, r0, r5
 801726e:	4620      	mov	r0, r4
 8017270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017272:	bf00      	nop

08017274 <uxr_serialize_CREATE_CLIENT_Payload>:
 8017274:	f7ff b9ea 	b.w	801664c <uxr_serialize_CLIENT_Representation>

08017278 <uxr_serialize_CREATE_Payload>:
 8017278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801727a:	2202      	movs	r2, #2
 801727c:	4607      	mov	r7, r0
 801727e:	460e      	mov	r6, r1
 8017280:	f7fc fc0a 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017284:	2202      	movs	r2, #2
 8017286:	4605      	mov	r5, r0
 8017288:	4638      	mov	r0, r7
 801728a:	18b1      	adds	r1, r6, r2
 801728c:	f7fc fc04 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017290:	7931      	ldrb	r1, [r6, #4]
 8017292:	4604      	mov	r4, r0
 8017294:	4638      	mov	r0, r7
 8017296:	f7f6 ff4f 	bl	800e138 <ucdr_serialize_uint8_t>
 801729a:	b170      	cbz	r0, 80172ba <uxr_serialize_CREATE_Payload+0x42>
 801729c:	7933      	ldrb	r3, [r6, #4]
 801729e:	402c      	ands	r4, r5
 80172a0:	3b01      	subs	r3, #1
 80172a2:	b2e4      	uxtb	r4, r4
 80172a4:	2b0d      	cmp	r3, #13
 80172a6:	d809      	bhi.n	80172bc <uxr_serialize_CREATE_Payload+0x44>
 80172a8:	e8df f003 	tbb	[pc, r3]
 80172ac:	23230a4c 	.word	0x23230a4c
 80172b0:	0a0a0a0a 	.word	0x0a0a0a0a
 80172b4:	12121208 	.word	0x12121208
 80172b8:	3e45      	.short	0x3e45
 80172ba:	2400      	movs	r4, #0
 80172bc:	4620      	mov	r0, r4
 80172be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172c0:	f106 0108 	add.w	r1, r6, #8
 80172c4:	4638      	mov	r0, r7
 80172c6:	f7ff fac7 	bl	8016858 <uxr_serialize_DATAWRITER_Representation>
 80172ca:	4004      	ands	r4, r0
 80172cc:	4620      	mov	r0, r4
 80172ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80172d0:	7a31      	ldrb	r1, [r6, #8]
 80172d2:	4638      	mov	r0, r7
 80172d4:	f7f6 ff30 	bl	800e138 <ucdr_serialize_uint8_t>
 80172d8:	2800      	cmp	r0, #0
 80172da:	d0ee      	beq.n	80172ba <uxr_serialize_CREATE_Payload+0x42>
 80172dc:	7a33      	ldrb	r3, [r6, #8]
 80172de:	2b01      	cmp	r3, #1
 80172e0:	d001      	beq.n	80172e6 <uxr_serialize_CREATE_Payload+0x6e>
 80172e2:	2b02      	cmp	r3, #2
 80172e4:	d1ea      	bne.n	80172bc <uxr_serialize_CREATE_Payload+0x44>
 80172e6:	68f1      	ldr	r1, [r6, #12]
 80172e8:	4638      	mov	r0, r7
 80172ea:	f003 fb0d 	bl	801a908 <ucdr_serialize_string>
 80172ee:	4004      	ands	r4, r0
 80172f0:	e7e4      	b.n	80172bc <uxr_serialize_CREATE_Payload+0x44>
 80172f2:	7a31      	ldrb	r1, [r6, #8]
 80172f4:	4638      	mov	r0, r7
 80172f6:	f7f6 ff1f 	bl	800e138 <ucdr_serialize_uint8_t>
 80172fa:	4605      	mov	r5, r0
 80172fc:	b158      	cbz	r0, 8017316 <uxr_serialize_CREATE_Payload+0x9e>
 80172fe:	7a33      	ldrb	r3, [r6, #8]
 8017300:	2b02      	cmp	r3, #2
 8017302:	d034      	beq.n	801736e <uxr_serialize_CREATE_Payload+0xf6>
 8017304:	2b03      	cmp	r3, #3
 8017306:	d106      	bne.n	8017316 <uxr_serialize_CREATE_Payload+0x9e>
 8017308:	68f2      	ldr	r2, [r6, #12]
 801730a:	f106 0110 	add.w	r1, r6, #16
 801730e:	4638      	mov	r0, r7
 8017310:	f7f8 fa8a 	bl	800f828 <ucdr_serialize_sequence_uint8_t>
 8017314:	4605      	mov	r5, r0
 8017316:	2202      	movs	r2, #2
 8017318:	f506 7104 	add.w	r1, r6, #528	; 0x210
 801731c:	4638      	mov	r0, r7
 801731e:	f7fc fbbb 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017322:	4028      	ands	r0, r5
 8017324:	4004      	ands	r4, r0
 8017326:	e7c9      	b.n	80172bc <uxr_serialize_CREATE_Payload+0x44>
 8017328:	f106 0108 	add.w	r1, r6, #8
 801732c:	4638      	mov	r0, r7
 801732e:	f7ff f98d 	bl	801664c <uxr_serialize_CLIENT_Representation>
 8017332:	4004      	ands	r4, r0
 8017334:	e7c2      	b.n	80172bc <uxr_serialize_CREATE_Payload+0x44>
 8017336:	f106 0108 	add.w	r1, r6, #8
 801733a:	4638      	mov	r0, r7
 801733c:	f7ff fa42 	bl	80167c4 <uxr_serialize_AGENT_Representation>
 8017340:	4004      	ands	r4, r0
 8017342:	e7bb      	b.n	80172bc <uxr_serialize_CREATE_Payload+0x44>
 8017344:	7a31      	ldrb	r1, [r6, #8]
 8017346:	4638      	mov	r0, r7
 8017348:	f7f6 fef6 	bl	800e138 <ucdr_serialize_uint8_t>
 801734c:	4605      	mov	r5, r0
 801734e:	b130      	cbz	r0, 801735e <uxr_serialize_CREATE_Payload+0xe6>
 8017350:	7a33      	ldrb	r3, [r6, #8]
 8017352:	2b02      	cmp	r3, #2
 8017354:	d011      	beq.n	801737a <uxr_serialize_CREATE_Payload+0x102>
 8017356:	2b03      	cmp	r3, #3
 8017358:	d015      	beq.n	8017386 <uxr_serialize_CREATE_Payload+0x10e>
 801735a:	2b01      	cmp	r3, #1
 801735c:	d00d      	beq.n	801737a <uxr_serialize_CREATE_Payload+0x102>
 801735e:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 8017362:	4638      	mov	r0, r7
 8017364:	f7f7 fc24 	bl	800ebb0 <ucdr_serialize_int16_t>
 8017368:	4028      	ands	r0, r5
 801736a:	4004      	ands	r4, r0
 801736c:	e7a6      	b.n	80172bc <uxr_serialize_CREATE_Payload+0x44>
 801736e:	68f1      	ldr	r1, [r6, #12]
 8017370:	4638      	mov	r0, r7
 8017372:	f003 fac9 	bl	801a908 <ucdr_serialize_string>
 8017376:	4605      	mov	r5, r0
 8017378:	e7cd      	b.n	8017316 <uxr_serialize_CREATE_Payload+0x9e>
 801737a:	68f1      	ldr	r1, [r6, #12]
 801737c:	4638      	mov	r0, r7
 801737e:	f003 fac3 	bl	801a908 <ucdr_serialize_string>
 8017382:	4605      	mov	r5, r0
 8017384:	e7eb      	b.n	801735e <uxr_serialize_CREATE_Payload+0xe6>
 8017386:	68f2      	ldr	r2, [r6, #12]
 8017388:	f106 0110 	add.w	r1, r6, #16
 801738c:	4638      	mov	r0, r7
 801738e:	f7f8 fa4b 	bl	800f828 <ucdr_serialize_sequence_uint8_t>
 8017392:	4605      	mov	r5, r0
 8017394:	e7e3      	b.n	801735e <uxr_serialize_CREATE_Payload+0xe6>
 8017396:	bf00      	nop

08017398 <uxr_deserialize_GET_INFO_Payload>:
 8017398:	b570      	push	{r4, r5, r6, lr}
 801739a:	2202      	movs	r2, #2
 801739c:	4605      	mov	r5, r0
 801739e:	460e      	mov	r6, r1
 80173a0:	f7fc fbde 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 80173a4:	2202      	movs	r2, #2
 80173a6:	4604      	mov	r4, r0
 80173a8:	4628      	mov	r0, r5
 80173aa:	18b1      	adds	r1, r6, r2
 80173ac:	f7fc fbd8 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 80173b0:	4603      	mov	r3, r0
 80173b2:	1d31      	adds	r1, r6, #4
 80173b4:	4628      	mov	r0, r5
 80173b6:	401c      	ands	r4, r3
 80173b8:	f7f7 fa04 	bl	800e7c4 <ucdr_deserialize_uint32_t>
 80173bc:	b2e4      	uxtb	r4, r4
 80173be:	4020      	ands	r0, r4
 80173c0:	bd70      	pop	{r4, r5, r6, pc}
 80173c2:	bf00      	nop

080173c4 <uxr_serialize_DELETE_Payload>:
 80173c4:	b570      	push	{r4, r5, r6, lr}
 80173c6:	2202      	movs	r2, #2
 80173c8:	4605      	mov	r5, r0
 80173ca:	460e      	mov	r6, r1
 80173cc:	f7fc fb64 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 80173d0:	2202      	movs	r2, #2
 80173d2:	4604      	mov	r4, r0
 80173d4:	4628      	mov	r0, r5
 80173d6:	18b1      	adds	r1, r6, r2
 80173d8:	f7fc fb5e 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 80173dc:	4020      	ands	r0, r4
 80173de:	b2c0      	uxtb	r0, r0
 80173e0:	bd70      	pop	{r4, r5, r6, pc}
 80173e2:	bf00      	nop

080173e4 <uxr_deserialize_STATUS_AGENT_Payload>:
 80173e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173e8:	460e      	mov	r6, r1
 80173ea:	4605      	mov	r5, r0
 80173ec:	f7f6 feba 	bl	800e164 <ucdr_deserialize_uint8_t>
 80173f0:	4604      	mov	r4, r0
 80173f2:	1c71      	adds	r1, r6, #1
 80173f4:	4628      	mov	r0, r5
 80173f6:	f7f6 feb5 	bl	800e164 <ucdr_deserialize_uint8_t>
 80173fa:	2204      	movs	r2, #4
 80173fc:	4681      	mov	r9, r0
 80173fe:	4628      	mov	r0, r5
 8017400:	18b1      	adds	r1, r6, r2
 8017402:	f7fc fbad 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8017406:	f106 0108 	add.w	r1, r6, #8
 801740a:	4680      	mov	r8, r0
 801740c:	2202      	movs	r2, #2
 801740e:	4628      	mov	r0, r5
 8017410:	f7fc fba6 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8017414:	ea04 0309 	and.w	r3, r4, r9
 8017418:	4607      	mov	r7, r0
 801741a:	2202      	movs	r2, #2
 801741c:	b2db      	uxtb	r3, r3
 801741e:	f106 010a 	add.w	r1, r6, #10
 8017422:	4628      	mov	r0, r5
 8017424:	ea03 0408 	and.w	r4, r3, r8
 8017428:	f7fc fb9a 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 801742c:	4603      	mov	r3, r0
 801742e:	4628      	mov	r0, r5
 8017430:	403c      	ands	r4, r7
 8017432:	f106 010c 	add.w	r1, r6, #12
 8017436:	461d      	mov	r5, r3
 8017438:	f7f6 fe66 	bl	800e108 <ucdr_deserialize_bool>
 801743c:	4025      	ands	r5, r4
 801743e:	4028      	ands	r0, r5
 8017440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08017444 <uxr_deserialize_STATUS_Payload>:
 8017444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017448:	2202      	movs	r2, #2
 801744a:	4606      	mov	r6, r0
 801744c:	460f      	mov	r7, r1
 801744e:	f7fc fb87 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 8017452:	2202      	movs	r2, #2
 8017454:	4605      	mov	r5, r0
 8017456:	4630      	mov	r0, r6
 8017458:	18b9      	adds	r1, r7, r2
 801745a:	f7fc fb81 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 801745e:	4680      	mov	r8, r0
 8017460:	1d39      	adds	r1, r7, #4
 8017462:	4630      	mov	r0, r6
 8017464:	f7f6 fe7e 	bl	800e164 <ucdr_deserialize_uint8_t>
 8017468:	ea05 0508 	and.w	r5, r5, r8
 801746c:	4604      	mov	r4, r0
 801746e:	1d79      	adds	r1, r7, #5
 8017470:	4630      	mov	r0, r6
 8017472:	402c      	ands	r4, r5
 8017474:	f7f6 fe76 	bl	800e164 <ucdr_deserialize_uint8_t>
 8017478:	4020      	ands	r0, r4
 801747a:	b2c0      	uxtb	r0, r0
 801747c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017480 <uxr_serialize_INFO_Payload>:
 8017480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017484:	2202      	movs	r2, #2
 8017486:	460c      	mov	r4, r1
 8017488:	4605      	mov	r5, r0
 801748a:	f7fc fb05 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 801748e:	2202      	movs	r2, #2
 8017490:	4680      	mov	r8, r0
 8017492:	4628      	mov	r0, r5
 8017494:	18a1      	adds	r1, r4, r2
 8017496:	f7fc faff 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 801749a:	4607      	mov	r7, r0
 801749c:	7921      	ldrb	r1, [r4, #4]
 801749e:	4628      	mov	r0, r5
 80174a0:	f7f6 fe4a 	bl	800e138 <ucdr_serialize_uint8_t>
 80174a4:	ea08 0807 	and.w	r8, r8, r7
 80174a8:	4606      	mov	r6, r0
 80174aa:	7961      	ldrb	r1, [r4, #5]
 80174ac:	4628      	mov	r0, r5
 80174ae:	ea06 0608 	and.w	r6, r6, r8
 80174b2:	f7f6 fe41 	bl	800e138 <ucdr_serialize_uint8_t>
 80174b6:	7a21      	ldrb	r1, [r4, #8]
 80174b8:	4030      	ands	r0, r6
 80174ba:	b2c7      	uxtb	r7, r0
 80174bc:	4628      	mov	r0, r5
 80174be:	f7f6 fe0d 	bl	800e0dc <ucdr_serialize_bool>
 80174c2:	7a23      	ldrb	r3, [r4, #8]
 80174c4:	4606      	mov	r6, r0
 80174c6:	b96b      	cbnz	r3, 80174e4 <uxr_serialize_INFO_Payload+0x64>
 80174c8:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80174cc:	4628      	mov	r0, r5
 80174ce:	f7f6 fe05 	bl	800e0dc <ucdr_serialize_bool>
 80174d2:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80174d6:	4030      	ands	r0, r6
 80174d8:	b2c6      	uxtb	r6, r0
 80174da:	b983      	cbnz	r3, 80174fe <uxr_serialize_INFO_Payload+0x7e>
 80174dc:	ea06 0007 	and.w	r0, r6, r7
 80174e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174e4:	7b21      	ldrb	r1, [r4, #12]
 80174e6:	4628      	mov	r0, r5
 80174e8:	f7f6 fe26 	bl	800e138 <ucdr_serialize_uint8_t>
 80174ec:	b188      	cbz	r0, 8017512 <uxr_serialize_INFO_Payload+0x92>
 80174ee:	f104 010c 	add.w	r1, r4, #12
 80174f2:	4628      	mov	r0, r5
 80174f4:	f7ff f9d8 	bl	80168a8 <uxr_serialize_ObjectVariant.part.0>
 80174f8:	4030      	ands	r0, r6
 80174fa:	b2c6      	uxtb	r6, r0
 80174fc:	e7e4      	b.n	80174c8 <uxr_serialize_INFO_Payload+0x48>
 80174fe:	f504 7108 	add.w	r1, r4, #544	; 0x220
 8017502:	4628      	mov	r0, r5
 8017504:	f7ff fdb8 	bl	8017078 <uxr_serialize_ActivityInfoVariant>
 8017508:	4006      	ands	r6, r0
 801750a:	ea06 0007 	and.w	r0, r6, r7
 801750e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017512:	4606      	mov	r6, r0
 8017514:	e7d8      	b.n	80174c8 <uxr_serialize_INFO_Payload+0x48>
 8017516:	bf00      	nop

08017518 <uxr_serialize_READ_DATA_Payload>:
 8017518:	b570      	push	{r4, r5, r6, lr}
 801751a:	2202      	movs	r2, #2
 801751c:	4605      	mov	r5, r0
 801751e:	460e      	mov	r6, r1
 8017520:	f7fc faba 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017524:	2202      	movs	r2, #2
 8017526:	4604      	mov	r4, r0
 8017528:	4628      	mov	r0, r5
 801752a:	18b1      	adds	r1, r6, r2
 801752c:	f7fc fab4 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017530:	4603      	mov	r3, r0
 8017532:	1d31      	adds	r1, r6, #4
 8017534:	4628      	mov	r0, r5
 8017536:	401c      	ands	r4, r3
 8017538:	f7ff fe5e 	bl	80171f8 <uxr_serialize_ReadSpecification>
 801753c:	b2e4      	uxtb	r4, r4
 801753e:	4020      	ands	r0, r4
 8017540:	bd70      	pop	{r4, r5, r6, pc}
 8017542:	bf00      	nop

08017544 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8017544:	b570      	push	{r4, r5, r6, lr}
 8017546:	2202      	movs	r2, #2
 8017548:	4605      	mov	r5, r0
 801754a:	460e      	mov	r6, r1
 801754c:	f7fc faa4 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017550:	2202      	movs	r2, #2
 8017552:	4604      	mov	r4, r0
 8017554:	4628      	mov	r0, r5
 8017556:	18b1      	adds	r1, r6, r2
 8017558:	f7fc fa9e 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 801755c:	4020      	ands	r0, r4
 801755e:	b2c0      	uxtb	r0, r0
 8017560:	bd70      	pop	{r4, r5, r6, pc}
 8017562:	bf00      	nop

08017564 <uxr_serialize_ACKNACK_Payload>:
 8017564:	b570      	push	{r4, r5, r6, lr}
 8017566:	460c      	mov	r4, r1
 8017568:	4605      	mov	r5, r0
 801756a:	460e      	mov	r6, r1
 801756c:	f834 1b02 	ldrh.w	r1, [r4], #2
 8017570:	f7f6 fe0e 	bl	800e190 <ucdr_serialize_uint16_t>
 8017574:	2202      	movs	r2, #2
 8017576:	4621      	mov	r1, r4
 8017578:	4604      	mov	r4, r0
 801757a:	4628      	mov	r0, r5
 801757c:	f7fc fa8c 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017580:	4603      	mov	r3, r0
 8017582:	7931      	ldrb	r1, [r6, #4]
 8017584:	4628      	mov	r0, r5
 8017586:	401c      	ands	r4, r3
 8017588:	f7f6 fdd6 	bl	800e138 <ucdr_serialize_uint8_t>
 801758c:	b2e4      	uxtb	r4, r4
 801758e:	4020      	ands	r0, r4
 8017590:	bd70      	pop	{r4, r5, r6, pc}
 8017592:	bf00      	nop

08017594 <uxr_deserialize_ACKNACK_Payload>:
 8017594:	b570      	push	{r4, r5, r6, lr}
 8017596:	460e      	mov	r6, r1
 8017598:	4605      	mov	r5, r0
 801759a:	f7f6 fef9 	bl	800e390 <ucdr_deserialize_uint16_t>
 801759e:	2202      	movs	r2, #2
 80175a0:	4604      	mov	r4, r0
 80175a2:	4628      	mov	r0, r5
 80175a4:	18b1      	adds	r1, r6, r2
 80175a6:	f7fc fadb 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 80175aa:	4603      	mov	r3, r0
 80175ac:	1d31      	adds	r1, r6, #4
 80175ae:	4628      	mov	r0, r5
 80175b0:	401c      	ands	r4, r3
 80175b2:	f7f6 fdd7 	bl	800e164 <ucdr_deserialize_uint8_t>
 80175b6:	b2e4      	uxtb	r4, r4
 80175b8:	4020      	ands	r0, r4
 80175ba:	bd70      	pop	{r4, r5, r6, pc}

080175bc <uxr_serialize_HEARTBEAT_Payload>:
 80175bc:	b570      	push	{r4, r5, r6, lr}
 80175be:	460d      	mov	r5, r1
 80175c0:	4606      	mov	r6, r0
 80175c2:	8809      	ldrh	r1, [r1, #0]
 80175c4:	f7f6 fde4 	bl	800e190 <ucdr_serialize_uint16_t>
 80175c8:	8869      	ldrh	r1, [r5, #2]
 80175ca:	4604      	mov	r4, r0
 80175cc:	4630      	mov	r0, r6
 80175ce:	f7f6 fddf 	bl	800e190 <ucdr_serialize_uint16_t>
 80175d2:	4603      	mov	r3, r0
 80175d4:	7929      	ldrb	r1, [r5, #4]
 80175d6:	4630      	mov	r0, r6
 80175d8:	401c      	ands	r4, r3
 80175da:	f7f6 fdad 	bl	800e138 <ucdr_serialize_uint8_t>
 80175de:	b2e4      	uxtb	r4, r4
 80175e0:	4020      	ands	r0, r4
 80175e2:	bd70      	pop	{r4, r5, r6, pc}

080175e4 <uxr_deserialize_HEARTBEAT_Payload>:
 80175e4:	b570      	push	{r4, r5, r6, lr}
 80175e6:	460e      	mov	r6, r1
 80175e8:	4605      	mov	r5, r0
 80175ea:	f7f6 fed1 	bl	800e390 <ucdr_deserialize_uint16_t>
 80175ee:	4604      	mov	r4, r0
 80175f0:	1cb1      	adds	r1, r6, #2
 80175f2:	4628      	mov	r0, r5
 80175f4:	f7f6 fecc 	bl	800e390 <ucdr_deserialize_uint16_t>
 80175f8:	4603      	mov	r3, r0
 80175fa:	1d31      	adds	r1, r6, #4
 80175fc:	4628      	mov	r0, r5
 80175fe:	401c      	ands	r4, r3
 8017600:	f7f6 fdb0 	bl	800e164 <ucdr_deserialize_uint8_t>
 8017604:	b2e4      	uxtb	r4, r4
 8017606:	4020      	ands	r0, r4
 8017608:	bd70      	pop	{r4, r5, r6, pc}
 801760a:	bf00      	nop

0801760c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017610:	460e      	mov	r6, r1
 8017612:	4605      	mov	r5, r0
 8017614:	f7f7 fc58 	bl	800eec8 <ucdr_deserialize_int32_t>
 8017618:	4607      	mov	r7, r0
 801761a:	1d31      	adds	r1, r6, #4
 801761c:	4628      	mov	r0, r5
 801761e:	f7f7 f8d1 	bl	800e7c4 <ucdr_deserialize_uint32_t>
 8017622:	4680      	mov	r8, r0
 8017624:	f106 0108 	add.w	r1, r6, #8
 8017628:	4628      	mov	r0, r5
 801762a:	f7f7 fc4d 	bl	800eec8 <ucdr_deserialize_int32_t>
 801762e:	ea07 0708 	and.w	r7, r7, r8
 8017632:	4604      	mov	r4, r0
 8017634:	f106 010c 	add.w	r1, r6, #12
 8017638:	4628      	mov	r0, r5
 801763a:	403c      	ands	r4, r7
 801763c:	f7f7 f8c2 	bl	800e7c4 <ucdr_deserialize_uint32_t>
 8017640:	f106 0110 	add.w	r1, r6, #16
 8017644:	4004      	ands	r4, r0
 8017646:	4628      	mov	r0, r5
 8017648:	f7f7 fc3e 	bl	800eec8 <ucdr_deserialize_int32_t>
 801764c:	4603      	mov	r3, r0
 801764e:	b2e4      	uxtb	r4, r4
 8017650:	4628      	mov	r0, r5
 8017652:	461d      	mov	r5, r3
 8017654:	f106 0114 	add.w	r1, r6, #20
 8017658:	f7f7 f8b4 	bl	800e7c4 <ucdr_deserialize_uint32_t>
 801765c:	402c      	ands	r4, r5
 801765e:	4020      	ands	r0, r4
 8017660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017664 <uxr_serialize_SampleIdentity>:
 8017664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017668:	4604      	mov	r4, r0
 801766a:	460d      	mov	r5, r1
 801766c:	220c      	movs	r2, #12
 801766e:	f7fc fa13 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017672:	2203      	movs	r2, #3
 8017674:	f105 010c 	add.w	r1, r5, #12
 8017678:	4607      	mov	r7, r0
 801767a:	4620      	mov	r0, r4
 801767c:	f7fc fa0c 	bl	8013a98 <ucdr_serialize_array_uint8_t>
 8017680:	7be9      	ldrb	r1, [r5, #15]
 8017682:	4680      	mov	r8, r0
 8017684:	4620      	mov	r0, r4
 8017686:	f7f6 fd57 	bl	800e138 <ucdr_serialize_uint8_t>
 801768a:	6929      	ldr	r1, [r5, #16]
 801768c:	4606      	mov	r6, r0
 801768e:	4620      	mov	r0, r4
 8017690:	f7f7 fb82 	bl	800ed98 <ucdr_serialize_int32_t>
 8017694:	ea07 0708 	and.w	r7, r7, r8
 8017698:	4603      	mov	r3, r0
 801769a:	4620      	mov	r0, r4
 801769c:	403e      	ands	r6, r7
 801769e:	6969      	ldr	r1, [r5, #20]
 80176a0:	461c      	mov	r4, r3
 80176a2:	f7f6 ff5f 	bl	800e564 <ucdr_serialize_uint32_t>
 80176a6:	4034      	ands	r4, r6
 80176a8:	4020      	ands	r0, r4
 80176aa:	b2c0      	uxtb	r0, r0
 80176ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080176b0 <uxr_deserialize_SampleIdentity>:
 80176b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176b4:	4604      	mov	r4, r0
 80176b6:	460d      	mov	r5, r1
 80176b8:	220c      	movs	r2, #12
 80176ba:	f7fc fa51 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 80176be:	2203      	movs	r2, #3
 80176c0:	f105 010c 	add.w	r1, r5, #12
 80176c4:	4607      	mov	r7, r0
 80176c6:	4620      	mov	r0, r4
 80176c8:	f7fc fa4a 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 80176cc:	f105 010f 	add.w	r1, r5, #15
 80176d0:	4680      	mov	r8, r0
 80176d2:	4620      	mov	r0, r4
 80176d4:	f7f6 fd46 	bl	800e164 <ucdr_deserialize_uint8_t>
 80176d8:	f105 0110 	add.w	r1, r5, #16
 80176dc:	4606      	mov	r6, r0
 80176de:	4620      	mov	r0, r4
 80176e0:	f7f7 fbf2 	bl	800eec8 <ucdr_deserialize_int32_t>
 80176e4:	ea07 0708 	and.w	r7, r7, r8
 80176e8:	4603      	mov	r3, r0
 80176ea:	4620      	mov	r0, r4
 80176ec:	403e      	ands	r6, r7
 80176ee:	f105 0114 	add.w	r1, r5, #20
 80176f2:	461c      	mov	r4, r3
 80176f4:	f7f7 f866 	bl	800e7c4 <ucdr_deserialize_uint32_t>
 80176f8:	4034      	ands	r4, r6
 80176fa:	4020      	ands	r0, r4
 80176fc:	b2c0      	uxtb	r0, r0
 80176fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017702:	bf00      	nop

08017704 <rcl_client_get_rmw_handle>:
 8017704:	b118      	cbz	r0, 801770e <rcl_client_get_rmw_handle+0xa>
 8017706:	6800      	ldr	r0, [r0, #0]
 8017708:	b108      	cbz	r0, 801770e <rcl_client_get_rmw_handle+0xa>
 801770a:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801770e:	4770      	bx	lr

08017710 <rcl_send_request>:
 8017710:	b570      	push	{r4, r5, r6, lr}
 8017712:	b082      	sub	sp, #8
 8017714:	b1f8      	cbz	r0, 8017756 <rcl_send_request+0x46>
 8017716:	4604      	mov	r4, r0
 8017718:	6800      	ldr	r0, [r0, #0]
 801771a:	b1e0      	cbz	r0, 8017756 <rcl_send_request+0x46>
 801771c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8017720:	b1cb      	cbz	r3, 8017756 <rcl_send_request+0x46>
 8017722:	460e      	mov	r6, r1
 8017724:	b1e1      	cbz	r1, 8017760 <rcl_send_request+0x50>
 8017726:	4615      	mov	r5, r2
 8017728:	b1d2      	cbz	r2, 8017760 <rcl_send_request+0x50>
 801772a:	2105      	movs	r1, #5
 801772c:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8017730:	f002 fa2e 	bl	8019b90 <__atomic_load_8>
 8017734:	4602      	mov	r2, r0
 8017736:	460b      	mov	r3, r1
 8017738:	4631      	mov	r1, r6
 801773a:	e9c5 2300 	strd	r2, r3, [r5]
 801773e:	6823      	ldr	r3, [r4, #0]
 8017740:	462a      	mov	r2, r5
 8017742:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8017746:	f7fa ff17 	bl	8012578 <rmw_send_request>
 801774a:	4606      	mov	r6, r0
 801774c:	b160      	cbz	r0, 8017768 <rcl_send_request+0x58>
 801774e:	2601      	movs	r6, #1
 8017750:	4630      	mov	r0, r6
 8017752:	b002      	add	sp, #8
 8017754:	bd70      	pop	{r4, r5, r6, pc}
 8017756:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 801775a:	4630      	mov	r0, r6
 801775c:	b002      	add	sp, #8
 801775e:	bd70      	pop	{r4, r5, r6, pc}
 8017760:	260b      	movs	r6, #11
 8017762:	4630      	mov	r0, r6
 8017764:	b002      	add	sp, #8
 8017766:	bd70      	pop	{r4, r5, r6, pc}
 8017768:	6820      	ldr	r0, [r4, #0]
 801776a:	2105      	movs	r1, #5
 801776c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017770:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8017774:	9100      	str	r1, [sp, #0]
 8017776:	f002 fa77 	bl	8019c68 <__atomic_exchange_8>
 801777a:	4630      	mov	r0, r6
 801777c:	b002      	add	sp, #8
 801777e:	bd70      	pop	{r4, r5, r6, pc}

08017780 <rcl_take_response>:
 8017780:	b570      	push	{r4, r5, r6, lr}
 8017782:	468e      	mov	lr, r1
 8017784:	b08c      	sub	sp, #48	; 0x30
 8017786:	460c      	mov	r4, r1
 8017788:	4616      	mov	r6, r2
 801778a:	f10d 0c18 	add.w	ip, sp, #24
 801778e:	4605      	mov	r5, r0
 8017790:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017794:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017798:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801779c:	e88c 0003 	stmia.w	ip, {r0, r1}
 80177a0:	b35d      	cbz	r5, 80177fa <rcl_take_response+0x7a>
 80177a2:	682b      	ldr	r3, [r5, #0]
 80177a4:	b34b      	cbz	r3, 80177fa <rcl_take_response+0x7a>
 80177a6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 80177aa:	b330      	cbz	r0, 80177fa <rcl_take_response+0x7a>
 80177ac:	b346      	cbz	r6, 8017800 <rcl_take_response+0x80>
 80177ae:	2300      	movs	r3, #0
 80177b0:	4632      	mov	r2, r6
 80177b2:	a902      	add	r1, sp, #8
 80177b4:	f88d 3007 	strb.w	r3, [sp, #7]
 80177b8:	f10d 0307 	add.w	r3, sp, #7
 80177bc:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8017808 <rcl_take_response+0x88>
 80177c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80177c4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80177c8:	f7fa ffde 	bl	8012788 <rmw_take_response>
 80177cc:	4605      	mov	r5, r0
 80177ce:	b9c8      	cbnz	r0, 8017804 <rcl_take_response+0x84>
 80177d0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80177d4:	f240 13f5 	movw	r3, #501	; 0x1f5
 80177d8:	2a00      	cmp	r2, #0
 80177da:	bf08      	it	eq
 80177dc:	461d      	moveq	r5, r3
 80177de:	f10d 0e18 	add.w	lr, sp, #24
 80177e2:	46a4      	mov	ip, r4
 80177e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80177e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80177ec:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80177f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80177f4:	4628      	mov	r0, r5
 80177f6:	b00c      	add	sp, #48	; 0x30
 80177f8:	bd70      	pop	{r4, r5, r6, pc}
 80177fa:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 80177fe:	e7ee      	b.n	80177de <rcl_take_response+0x5e>
 8017800:	250b      	movs	r5, #11
 8017802:	e7ec      	b.n	80177de <rcl_take_response+0x5e>
 8017804:	2501      	movs	r5, #1
 8017806:	e7ea      	b.n	80177de <rcl_take_response+0x5e>
	...

08017810 <rcl_client_is_valid>:
 8017810:	b130      	cbz	r0, 8017820 <rcl_client_is_valid+0x10>
 8017812:	6800      	ldr	r0, [r0, #0]
 8017814:	b120      	cbz	r0, 8017820 <rcl_client_is_valid+0x10>
 8017816:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 801781a:	3800      	subs	r0, #0
 801781c:	bf18      	it	ne
 801781e:	2001      	movne	r0, #1
 8017820:	4770      	bx	lr
 8017822:	bf00      	nop

08017824 <rcl_convert_rmw_ret_to_rcl_ret>:
 8017824:	280b      	cmp	r0, #11
 8017826:	dc0d      	bgt.n	8017844 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8017828:	2800      	cmp	r0, #0
 801782a:	db09      	blt.n	8017840 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801782c:	280b      	cmp	r0, #11
 801782e:	d807      	bhi.n	8017840 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8017830:	e8df f000 	tbb	[pc, r0]
 8017834:	07060607 	.word	0x07060607
 8017838:	06060606 	.word	0x06060606
 801783c:	07070606 	.word	0x07070606
 8017840:	2001      	movs	r0, #1
 8017842:	4770      	bx	lr
 8017844:	28cb      	cmp	r0, #203	; 0xcb
 8017846:	bf18      	it	ne
 8017848:	2001      	movne	r0, #1
 801784a:	4770      	bx	lr

0801784c <rcl_get_zero_initialized_context>:
 801784c:	4a03      	ldr	r2, [pc, #12]	; (801785c <rcl_get_zero_initialized_context+0x10>)
 801784e:	4603      	mov	r3, r0
 8017850:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017854:	e883 0003 	stmia.w	r3, {r0, r1}
 8017858:	4618      	mov	r0, r3
 801785a:	4770      	bx	lr
 801785c:	0801e3a4 	.word	0x0801e3a4

08017860 <rcl_context_is_valid>:
 8017860:	b118      	cbz	r0, 801786a <rcl_context_is_valid+0xa>
 8017862:	6840      	ldr	r0, [r0, #4]
 8017864:	3800      	subs	r0, #0
 8017866:	bf18      	it	ne
 8017868:	2001      	movne	r0, #1
 801786a:	4770      	bx	lr

0801786c <__cleanup_context>:
 801786c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017870:	4606      	mov	r6, r0
 8017872:	2300      	movs	r3, #0
 8017874:	6800      	ldr	r0, [r0, #0]
 8017876:	6073      	str	r3, [r6, #4]
 8017878:	2800      	cmp	r0, #0
 801787a:	d049      	beq.n	8017910 <__cleanup_context+0xa4>
 801787c:	6947      	ldr	r7, [r0, #20]
 801787e:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017882:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8017886:	b137      	cbz	r7, 8017896 <__cleanup_context+0x2a>
 8017888:	3014      	adds	r0, #20
 801788a:	f7f8 f861 	bl	800f950 <rcl_init_options_fini>
 801788e:	4607      	mov	r7, r0
 8017890:	2800      	cmp	r0, #0
 8017892:	d144      	bne.n	801791e <__cleanup_context+0xb2>
 8017894:	6830      	ldr	r0, [r6, #0]
 8017896:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017898:	b143      	cbz	r3, 80178ac <__cleanup_context+0x40>
 801789a:	3028      	adds	r0, #40	; 0x28
 801789c:	f7fa fb74 	bl	8011f88 <rmw_context_fini>
 80178a0:	b118      	cbz	r0, 80178aa <__cleanup_context+0x3e>
 80178a2:	2f00      	cmp	r7, #0
 80178a4:	d03e      	beq.n	8017924 <__cleanup_context+0xb8>
 80178a6:	f7f9 fe33 	bl	8011510 <rcutils_reset_error>
 80178aa:	6830      	ldr	r0, [r6, #0]
 80178ac:	6a03      	ldr	r3, [r0, #32]
 80178ae:	b1db      	cbz	r3, 80178e8 <__cleanup_context+0x7c>
 80178b0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 80178b4:	2a01      	cmp	r2, #1
 80178b6:	f17c 0100 	sbcs.w	r1, ip, #0
 80178ba:	db11      	blt.n	80178e0 <__cleanup_context+0x74>
 80178bc:	2400      	movs	r4, #0
 80178be:	4625      	mov	r5, r4
 80178c0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80178c4:	4649      	mov	r1, r9
 80178c6:	b1b8      	cbz	r0, 80178f8 <__cleanup_context+0x8c>
 80178c8:	47c0      	blx	r8
 80178ca:	6833      	ldr	r3, [r6, #0]
 80178cc:	3401      	adds	r4, #1
 80178ce:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 80178d2:	f145 0500 	adc.w	r5, r5, #0
 80178d6:	6a1b      	ldr	r3, [r3, #32]
 80178d8:	4294      	cmp	r4, r2
 80178da:	eb75 010c 	sbcs.w	r1, r5, ip
 80178de:	dbef      	blt.n	80178c0 <__cleanup_context+0x54>
 80178e0:	4618      	mov	r0, r3
 80178e2:	4649      	mov	r1, r9
 80178e4:	47c0      	blx	r8
 80178e6:	6830      	ldr	r0, [r6, #0]
 80178e8:	4649      	mov	r1, r9
 80178ea:	47c0      	blx	r8
 80178ec:	2300      	movs	r3, #0
 80178ee:	4638      	mov	r0, r7
 80178f0:	e9c6 3300 	strd	r3, r3, [r6]
 80178f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178f8:	3401      	adds	r4, #1
 80178fa:	f145 0500 	adc.w	r5, r5, #0
 80178fe:	4294      	cmp	r4, r2
 8017900:	eb75 010c 	sbcs.w	r1, r5, ip
 8017904:	dbdc      	blt.n	80178c0 <__cleanup_context+0x54>
 8017906:	4618      	mov	r0, r3
 8017908:	4649      	mov	r1, r9
 801790a:	47c0      	blx	r8
 801790c:	6830      	ldr	r0, [r6, #0]
 801790e:	e7eb      	b.n	80178e8 <__cleanup_context+0x7c>
 8017910:	4607      	mov	r7, r0
 8017912:	2300      	movs	r3, #0
 8017914:	4638      	mov	r0, r7
 8017916:	e9c6 3300 	strd	r3, r3, [r6]
 801791a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801791e:	f7f9 fdf7 	bl	8011510 <rcutils_reset_error>
 8017922:	e7b7      	b.n	8017894 <__cleanup_context+0x28>
 8017924:	f7ff ff7e 	bl	8017824 <rcl_convert_rmw_ret_to_rcl_ret>
 8017928:	4607      	mov	r7, r0
 801792a:	e7bc      	b.n	80178a6 <__cleanup_context+0x3a>

0801792c <rcl_get_zero_initialized_guard_condition>:
 801792c:	4a03      	ldr	r2, [pc, #12]	; (801793c <rcl_get_zero_initialized_guard_condition+0x10>)
 801792e:	4603      	mov	r3, r0
 8017930:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017934:	e883 0003 	stmia.w	r3, {r0, r1}
 8017938:	4618      	mov	r0, r3
 801793a:	4770      	bx	lr
 801793c:	0801e3ac 	.word	0x0801e3ac

08017940 <rcl_guard_condition_init_from_rmw>:
 8017940:	b082      	sub	sp, #8
 8017942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017946:	b086      	sub	sp, #24
 8017948:	4604      	mov	r4, r0
 801794a:	460e      	mov	r6, r1
 801794c:	4615      	mov	r5, r2
 801794e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8017952:	f10d 0e04 	add.w	lr, sp, #4
 8017956:	f84c 3f04 	str.w	r3, [ip, #4]!
 801795a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801795e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017962:	f8dc 3000 	ldr.w	r3, [ip]
 8017966:	a801      	add	r0, sp, #4
 8017968:	f8ce 3000 	str.w	r3, [lr]
 801796c:	f7f9 fd92 	bl	8011494 <rcutils_allocator_is_valid>
 8017970:	f080 0301 	eor.w	r3, r0, #1
 8017974:	b2db      	uxtb	r3, r3
 8017976:	bb3b      	cbnz	r3, 80179c8 <rcl_guard_condition_init_from_rmw+0x88>
 8017978:	b334      	cbz	r4, 80179c8 <rcl_guard_condition_init_from_rmw+0x88>
 801797a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801797e:	f1b8 0f00 	cmp.w	r8, #0
 8017982:	d11a      	bne.n	80179ba <rcl_guard_condition_init_from_rmw+0x7a>
 8017984:	b305      	cbz	r5, 80179c8 <rcl_guard_condition_init_from_rmw+0x88>
 8017986:	4628      	mov	r0, r5
 8017988:	f7ff ff6a 	bl	8017860 <rcl_context_is_valid>
 801798c:	b1f0      	cbz	r0, 80179cc <rcl_guard_condition_init_from_rmw+0x8c>
 801798e:	9b01      	ldr	r3, [sp, #4]
 8017990:	201c      	movs	r0, #28
 8017992:	9905      	ldr	r1, [sp, #20]
 8017994:	4798      	blx	r3
 8017996:	4607      	mov	r7, r0
 8017998:	6060      	str	r0, [r4, #4]
 801799a:	b320      	cbz	r0, 80179e6 <rcl_guard_condition_init_from_rmw+0xa6>
 801799c:	b1c6      	cbz	r6, 80179d0 <rcl_guard_condition_init_from_rmw+0x90>
 801799e:	6006      	str	r6, [r0, #0]
 80179a0:	f880 8004 	strb.w	r8, [r0, #4]
 80179a4:	ac01      	add	r4, sp, #4
 80179a6:	f107 0c08 	add.w	ip, r7, #8
 80179aa:	2500      	movs	r5, #0
 80179ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80179ae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80179b2:	6823      	ldr	r3, [r4, #0]
 80179b4:	f8cc 3000 	str.w	r3, [ip]
 80179b8:	e000      	b.n	80179bc <rcl_guard_condition_init_from_rmw+0x7c>
 80179ba:	2564      	movs	r5, #100	; 0x64
 80179bc:	4628      	mov	r0, r5
 80179be:	b006      	add	sp, #24
 80179c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80179c4:	b002      	add	sp, #8
 80179c6:	4770      	bx	lr
 80179c8:	250b      	movs	r5, #11
 80179ca:	e7f7      	b.n	80179bc <rcl_guard_condition_init_from_rmw+0x7c>
 80179cc:	2565      	movs	r5, #101	; 0x65
 80179ce:	e7f5      	b.n	80179bc <rcl_guard_condition_init_from_rmw+0x7c>
 80179d0:	6828      	ldr	r0, [r5, #0]
 80179d2:	3028      	adds	r0, #40	; 0x28
 80179d4:	f002 fd56 	bl	801a484 <rmw_create_guard_condition>
 80179d8:	6038      	str	r0, [r7, #0]
 80179da:	6867      	ldr	r7, [r4, #4]
 80179dc:	683e      	ldr	r6, [r7, #0]
 80179de:	b126      	cbz	r6, 80179ea <rcl_guard_condition_init_from_rmw+0xaa>
 80179e0:	2301      	movs	r3, #1
 80179e2:	713b      	strb	r3, [r7, #4]
 80179e4:	e7de      	b.n	80179a4 <rcl_guard_condition_init_from_rmw+0x64>
 80179e6:	250a      	movs	r5, #10
 80179e8:	e7e8      	b.n	80179bc <rcl_guard_condition_init_from_rmw+0x7c>
 80179ea:	9b02      	ldr	r3, [sp, #8]
 80179ec:	4638      	mov	r0, r7
 80179ee:	9905      	ldr	r1, [sp, #20]
 80179f0:	2501      	movs	r5, #1
 80179f2:	4798      	blx	r3
 80179f4:	6066      	str	r6, [r4, #4]
 80179f6:	e7e1      	b.n	80179bc <rcl_guard_condition_init_from_rmw+0x7c>

080179f8 <rcl_guard_condition_fini>:
 80179f8:	b570      	push	{r4, r5, r6, lr}
 80179fa:	b082      	sub	sp, #8
 80179fc:	b1f0      	cbz	r0, 8017a3c <rcl_guard_condition_fini+0x44>
 80179fe:	6843      	ldr	r3, [r0, #4]
 8017a00:	4604      	mov	r4, r0
 8017a02:	b163      	cbz	r3, 8017a1e <rcl_guard_condition_fini+0x26>
 8017a04:	6818      	ldr	r0, [r3, #0]
 8017a06:	68de      	ldr	r6, [r3, #12]
 8017a08:	6999      	ldr	r1, [r3, #24]
 8017a0a:	b160      	cbz	r0, 8017a26 <rcl_guard_condition_fini+0x2e>
 8017a0c:	791d      	ldrb	r5, [r3, #4]
 8017a0e:	b965      	cbnz	r5, 8017a2a <rcl_guard_condition_fini+0x32>
 8017a10:	4618      	mov	r0, r3
 8017a12:	47b0      	blx	r6
 8017a14:	2300      	movs	r3, #0
 8017a16:	4628      	mov	r0, r5
 8017a18:	6063      	str	r3, [r4, #4]
 8017a1a:	b002      	add	sp, #8
 8017a1c:	bd70      	pop	{r4, r5, r6, pc}
 8017a1e:	461d      	mov	r5, r3
 8017a20:	4628      	mov	r0, r5
 8017a22:	b002      	add	sp, #8
 8017a24:	bd70      	pop	{r4, r5, r6, pc}
 8017a26:	4605      	mov	r5, r0
 8017a28:	e7f2      	b.n	8017a10 <rcl_guard_condition_fini+0x18>
 8017a2a:	9101      	str	r1, [sp, #4]
 8017a2c:	f002 fd40 	bl	801a4b0 <rmw_destroy_guard_condition>
 8017a30:	1e05      	subs	r5, r0, #0
 8017a32:	6863      	ldr	r3, [r4, #4]
 8017a34:	9901      	ldr	r1, [sp, #4]
 8017a36:	bf18      	it	ne
 8017a38:	2501      	movne	r5, #1
 8017a3a:	e7e9      	b.n	8017a10 <rcl_guard_condition_fini+0x18>
 8017a3c:	250b      	movs	r5, #11
 8017a3e:	4628      	mov	r0, r5
 8017a40:	b002      	add	sp, #8
 8017a42:	bd70      	pop	{r4, r5, r6, pc}

08017a44 <rcl_guard_condition_get_default_options>:
 8017a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a46:	b087      	sub	sp, #28
 8017a48:	4606      	mov	r6, r0
 8017a4a:	4c0b      	ldr	r4, [pc, #44]	; (8017a78 <rcl_guard_condition_get_default_options+0x34>)
 8017a4c:	4668      	mov	r0, sp
 8017a4e:	f7f9 fd13 	bl	8011478 <rcutils_get_default_allocator>
 8017a52:	46ee      	mov	lr, sp
 8017a54:	46a4      	mov	ip, r4
 8017a56:	4625      	mov	r5, r4
 8017a58:	4634      	mov	r4, r6
 8017a5a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017a5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a64:	f8de 7000 	ldr.w	r7, [lr]
 8017a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a6a:	4630      	mov	r0, r6
 8017a6c:	f8cc 7000 	str.w	r7, [ip]
 8017a70:	6027      	str	r7, [r4, #0]
 8017a72:	b007      	add	sp, #28
 8017a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a76:	bf00      	nop
 8017a78:	200129e0 	.word	0x200129e0

08017a7c <rcl_guard_condition_get_rmw_handle>:
 8017a7c:	b110      	cbz	r0, 8017a84 <rcl_guard_condition_get_rmw_handle+0x8>
 8017a7e:	6840      	ldr	r0, [r0, #4]
 8017a80:	b100      	cbz	r0, 8017a84 <rcl_guard_condition_get_rmw_handle+0x8>
 8017a82:	6800      	ldr	r0, [r0, #0]
 8017a84:	4770      	bx	lr
 8017a86:	bf00      	nop

08017a88 <rcl_init>:
 8017a88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a8c:	1e05      	subs	r5, r0, #0
 8017a8e:	b09e      	sub	sp, #120	; 0x78
 8017a90:	460e      	mov	r6, r1
 8017a92:	4690      	mov	r8, r2
 8017a94:	461f      	mov	r7, r3
 8017a96:	f340 809f 	ble.w	8017bd8 <rcl_init+0x150>
 8017a9a:	2900      	cmp	r1, #0
 8017a9c:	f000 809f 	beq.w	8017bde <rcl_init+0x156>
 8017aa0:	f1a1 0e04 	sub.w	lr, r1, #4
 8017aa4:	f04f 0c00 	mov.w	ip, #0
 8017aa8:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8017aac:	f10c 0c01 	add.w	ip, ip, #1
 8017ab0:	2c00      	cmp	r4, #0
 8017ab2:	f000 8094 	beq.w	8017bde <rcl_init+0x156>
 8017ab6:	4565      	cmp	r5, ip
 8017ab8:	d1f6      	bne.n	8017aa8 <rcl_init+0x20>
 8017aba:	f1b8 0f00 	cmp.w	r8, #0
 8017abe:	f000 808e 	beq.w	8017bde <rcl_init+0x156>
 8017ac2:	f8d8 4000 	ldr.w	r4, [r8]
 8017ac6:	2c00      	cmp	r4, #0
 8017ac8:	f000 8089 	beq.w	8017bde <rcl_init+0x156>
 8017acc:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8017ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017ad2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017ad6:	6823      	ldr	r3, [r4, #0]
 8017ad8:	a819      	add	r0, sp, #100	; 0x64
 8017ada:	f8cc 3000 	str.w	r3, [ip]
 8017ade:	f7f9 fcd9 	bl	8011494 <rcutils_allocator_is_valid>
 8017ae2:	f080 0001 	eor.w	r0, r0, #1
 8017ae6:	b2c0      	uxtb	r0, r0
 8017ae8:	2800      	cmp	r0, #0
 8017aea:	d178      	bne.n	8017bde <rcl_init+0x156>
 8017aec:	2f00      	cmp	r7, #0
 8017aee:	d076      	beq.n	8017bde <rcl_init+0x156>
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d178      	bne.n	8017be8 <rcl_init+0x160>
 8017af6:	2178      	movs	r1, #120	; 0x78
 8017af8:	2001      	movs	r0, #1
 8017afa:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8017afe:	4798      	blx	r3
 8017b00:	4604      	mov	r4, r0
 8017b02:	6038      	str	r0, [r7, #0]
 8017b04:	2800      	cmp	r0, #0
 8017b06:	f000 80b6 	beq.w	8017c76 <rcl_init+0x1ee>
 8017b0a:	a802      	add	r0, sp, #8
 8017b0c:	f002 fa4c 	bl	8019fa8 <rmw_get_zero_initialized_context>
 8017b10:	a902      	add	r1, sp, #8
 8017b12:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8017b16:	2250      	movs	r2, #80	; 0x50
 8017b18:	f004 fd41 	bl	801c59e <memcpy>
 8017b1c:	ac19      	add	r4, sp, #100	; 0x64
 8017b1e:	f8d7 e000 	ldr.w	lr, [r7]
 8017b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017b24:	46f4      	mov	ip, lr
 8017b26:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017b2a:	6823      	ldr	r3, [r4, #0]
 8017b2c:	f10e 0114 	add.w	r1, lr, #20
 8017b30:	4640      	mov	r0, r8
 8017b32:	f8cc 3000 	str.w	r3, [ip]
 8017b36:	f7f7 ff35 	bl	800f9a4 <rcl_init_options_copy>
 8017b3a:	4604      	mov	r4, r0
 8017b3c:	2800      	cmp	r0, #0
 8017b3e:	d144      	bne.n	8017bca <rcl_init+0x142>
 8017b40:	f8d7 9000 	ldr.w	r9, [r7]
 8017b44:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8017b48:	f8c9 0020 	str.w	r0, [r9, #32]
 8017b4c:	f8c9 5018 	str.w	r5, [r9, #24]
 8017b50:	f8c9 801c 	str.w	r8, [r9, #28]
 8017b54:	2d00      	cmp	r5, #0
 8017b56:	d04e      	beq.n	8017bf6 <rcl_init+0x16e>
 8017b58:	2e00      	cmp	r6, #0
 8017b5a:	d04c      	beq.n	8017bf6 <rcl_init+0x16e>
 8017b5c:	2104      	movs	r1, #4
 8017b5e:	4628      	mov	r0, r5
 8017b60:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8017b64:	4798      	blx	r3
 8017b66:	f8c9 0020 	str.w	r0, [r9, #32]
 8017b6a:	f8d7 9000 	ldr.w	r9, [r7]
 8017b6e:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8017b72:	46ca      	mov	sl, r9
 8017b74:	b343      	cbz	r3, 8017bc8 <rcl_init+0x140>
 8017b76:	2d01      	cmp	r5, #1
 8017b78:	f178 0300 	sbcs.w	r3, r8, #0
 8017b7c:	db3b      	blt.n	8017bf6 <rcl_init+0x16e>
 8017b7e:	2400      	movs	r4, #0
 8017b80:	3e04      	subs	r6, #4
 8017b82:	46a1      	mov	r9, r4
 8017b84:	e00b      	b.n	8017b9e <rcl_init+0x116>
 8017b86:	6831      	ldr	r1, [r6, #0]
 8017b88:	f004 fd09 	bl	801c59e <memcpy>
 8017b8c:	3401      	adds	r4, #1
 8017b8e:	f149 0900 	adc.w	r9, r9, #0
 8017b92:	45c8      	cmp	r8, r9
 8017b94:	bf08      	it	eq
 8017b96:	42a5      	cmpeq	r5, r4
 8017b98:	d02b      	beq.n	8017bf2 <rcl_init+0x16a>
 8017b9a:	f8d7 a000 	ldr.w	sl, [r7]
 8017b9e:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8017ba2:	f7e8 fb57 	bl	8000254 <strlen>
 8017ba6:	1c42      	adds	r2, r0, #1
 8017ba8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017baa:	4610      	mov	r0, r2
 8017bac:	991d      	ldr	r1, [sp, #116]	; 0x74
 8017bae:	f8da a020 	ldr.w	sl, [sl, #32]
 8017bb2:	9201      	str	r2, [sp, #4]
 8017bb4:	4798      	blx	r3
 8017bb6:	683b      	ldr	r3, [r7, #0]
 8017bb8:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8017bbc:	6a1b      	ldr	r3, [r3, #32]
 8017bbe:	9a01      	ldr	r2, [sp, #4]
 8017bc0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017bc4:	2800      	cmp	r0, #0
 8017bc6:	d1de      	bne.n	8017b86 <rcl_init+0xfe>
 8017bc8:	240a      	movs	r4, #10
 8017bca:	4638      	mov	r0, r7
 8017bcc:	f7ff fe4e 	bl	801786c <__cleanup_context>
 8017bd0:	4620      	mov	r0, r4
 8017bd2:	b01e      	add	sp, #120	; 0x78
 8017bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bd8:	2900      	cmp	r1, #0
 8017bda:	f43f af6e 	beq.w	8017aba <rcl_init+0x32>
 8017bde:	240b      	movs	r4, #11
 8017be0:	4620      	mov	r0, r4
 8017be2:	b01e      	add	sp, #120	; 0x78
 8017be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017be8:	2464      	movs	r4, #100	; 0x64
 8017bea:	4620      	mov	r0, r4
 8017bec:	b01e      	add	sp, #120	; 0x78
 8017bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bf2:	f8d7 9000 	ldr.w	r9, [r7]
 8017bf6:	4926      	ldr	r1, [pc, #152]	; (8017c90 <rcl_init+0x208>)
 8017bf8:	680b      	ldr	r3, [r1, #0]
 8017bfa:	3301      	adds	r3, #1
 8017bfc:	d036      	beq.n	8017c6c <rcl_init+0x1e4>
 8017bfe:	461a      	mov	r2, r3
 8017c00:	2400      	movs	r4, #0
 8017c02:	600b      	str	r3, [r1, #0]
 8017c04:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8017c08:	607b      	str	r3, [r7, #4]
 8017c0a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017c0c:	3301      	adds	r3, #1
 8017c0e:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8017c12:	d034      	beq.n	8017c7e <rcl_init+0x1f6>
 8017c14:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8017c18:	b93b      	cbnz	r3, 8017c2a <rcl_init+0x1a2>
 8017c1a:	3030      	adds	r0, #48	; 0x30
 8017c1c:	f000 f83a 	bl	8017c94 <rcl_get_localhost_only>
 8017c20:	4604      	mov	r4, r0
 8017c22:	2800      	cmp	r0, #0
 8017c24:	d1d1      	bne.n	8017bca <rcl_init+0x142>
 8017c26:	683b      	ldr	r3, [r7, #0]
 8017c28:	6958      	ldr	r0, [r3, #20]
 8017c2a:	aa18      	add	r2, sp, #96	; 0x60
 8017c2c:	a917      	add	r1, sp, #92	; 0x5c
 8017c2e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017c30:	f000 fc38 	bl	80184a4 <rcl_validate_enclave_name>
 8017c34:	4604      	mov	r4, r0
 8017c36:	2800      	cmp	r0, #0
 8017c38:	d1c7      	bne.n	8017bca <rcl_init+0x142>
 8017c3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017c3c:	b9eb      	cbnz	r3, 8017c7a <rcl_init+0x1f2>
 8017c3e:	6839      	ldr	r1, [r7, #0]
 8017c40:	694b      	ldr	r3, [r1, #20]
 8017c42:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8017c46:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017c48:	f000 f9c8 	bl	8017fdc <rcl_get_security_options_from_environment>
 8017c4c:	4604      	mov	r4, r0
 8017c4e:	2800      	cmp	r0, #0
 8017c50:	d1bb      	bne.n	8017bca <rcl_init+0x142>
 8017c52:	6839      	ldr	r1, [r7, #0]
 8017c54:	6948      	ldr	r0, [r1, #20]
 8017c56:	3128      	adds	r1, #40	; 0x28
 8017c58:	3018      	adds	r0, #24
 8017c5a:	f7fa f85f 	bl	8011d1c <rmw_init>
 8017c5e:	4604      	mov	r4, r0
 8017c60:	2800      	cmp	r0, #0
 8017c62:	d0bd      	beq.n	8017be0 <rcl_init+0x158>
 8017c64:	f7ff fdde 	bl	8017824 <rcl_convert_rmw_ret_to_rcl_ret>
 8017c68:	4604      	mov	r4, r0
 8017c6a:	e7ae      	b.n	8017bca <rcl_init+0x142>
 8017c6c:	2201      	movs	r2, #1
 8017c6e:	461c      	mov	r4, r3
 8017c70:	600a      	str	r2, [r1, #0]
 8017c72:	4613      	mov	r3, r2
 8017c74:	e7c6      	b.n	8017c04 <rcl_init+0x17c>
 8017c76:	240a      	movs	r4, #10
 8017c78:	e7b2      	b.n	8017be0 <rcl_init+0x158>
 8017c7a:	2401      	movs	r4, #1
 8017c7c:	e7a5      	b.n	8017bca <rcl_init+0x142>
 8017c7e:	3024      	adds	r0, #36	; 0x24
 8017c80:	f003 fbc6 	bl	801b410 <rcl_get_default_domain_id>
 8017c84:	4604      	mov	r4, r0
 8017c86:	2800      	cmp	r0, #0
 8017c88:	d19f      	bne.n	8017bca <rcl_init+0x142>
 8017c8a:	683b      	ldr	r3, [r7, #0]
 8017c8c:	6958      	ldr	r0, [r3, #20]
 8017c8e:	e7c1      	b.n	8017c14 <rcl_init+0x18c>
 8017c90:	200129f4 	.word	0x200129f4

08017c94 <rcl_get_localhost_only>:
 8017c94:	b510      	push	{r4, lr}
 8017c96:	2300      	movs	r3, #0
 8017c98:	b082      	sub	sp, #8
 8017c9a:	9301      	str	r3, [sp, #4]
 8017c9c:	b1b8      	cbz	r0, 8017cce <rcl_get_localhost_only+0x3a>
 8017c9e:	4604      	mov	r4, r0
 8017ca0:	a901      	add	r1, sp, #4
 8017ca2:	480c      	ldr	r0, [pc, #48]	; (8017cd4 <rcl_get_localhost_only+0x40>)
 8017ca4:	f7f9 fc04 	bl	80114b0 <rcutils_get_env>
 8017ca8:	b110      	cbz	r0, 8017cb0 <rcl_get_localhost_only+0x1c>
 8017caa:	2001      	movs	r0, #1
 8017cac:	b002      	add	sp, #8
 8017cae:	bd10      	pop	{r4, pc}
 8017cb0:	9b01      	ldr	r3, [sp, #4]
 8017cb2:	b113      	cbz	r3, 8017cba <rcl_get_localhost_only+0x26>
 8017cb4:	781a      	ldrb	r2, [r3, #0]
 8017cb6:	2a31      	cmp	r2, #49	; 0x31
 8017cb8:	d004      	beq.n	8017cc4 <rcl_get_localhost_only+0x30>
 8017cba:	2302      	movs	r3, #2
 8017cbc:	2000      	movs	r0, #0
 8017cbe:	7023      	strb	r3, [r4, #0]
 8017cc0:	b002      	add	sp, #8
 8017cc2:	bd10      	pop	{r4, pc}
 8017cc4:	785b      	ldrb	r3, [r3, #1]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d1f7      	bne.n	8017cba <rcl_get_localhost_only+0x26>
 8017cca:	2301      	movs	r3, #1
 8017ccc:	e7f6      	b.n	8017cbc <rcl_get_localhost_only+0x28>
 8017cce:	200b      	movs	r0, #11
 8017cd0:	b002      	add	sp, #8
 8017cd2:	bd10      	pop	{r4, pc}
 8017cd4:	0801e3b4 	.word	0x0801e3b4

08017cd8 <rcl_node_resolve_name>:
 8017cd8:	b082      	sub	sp, #8
 8017cda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cde:	b091      	sub	sp, #68	; 0x44
 8017ce0:	ac1a      	add	r4, sp, #104	; 0x68
 8017ce2:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 8017ce6:	e884 000c 	stmia.w	r4, {r2, r3}
 8017cea:	2800      	cmp	r0, #0
 8017cec:	d03d      	beq.n	8017d6a <rcl_node_resolve_name+0x92>
 8017cee:	460c      	mov	r4, r1
 8017cf0:	4605      	mov	r5, r0
 8017cf2:	f7f8 f839 	bl	800fd68 <rcl_node_get_options>
 8017cf6:	2800      	cmp	r0, #0
 8017cf8:	d03a      	beq.n	8017d70 <rcl_node_resolve_name+0x98>
 8017cfa:	4628      	mov	r0, r5
 8017cfc:	f7f8 f824 	bl	800fd48 <rcl_node_get_name>
 8017d00:	4606      	mov	r6, r0
 8017d02:	4628      	mov	r0, r5
 8017d04:	ad0b      	add	r5, sp, #44	; 0x2c
 8017d06:	f7f8 f827 	bl	800fd58 <rcl_node_get_namespace>
 8017d0a:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 8017d0e:	4607      	mov	r7, r0
 8017d10:	46ac      	mov	ip, r5
 8017d12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017d16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017d1a:	f8de 3000 	ldr.w	r3, [lr]
 8017d1e:	f8cc 3000 	str.w	r3, [ip]
 8017d22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017d24:	b30b      	cbz	r3, 8017d6a <rcl_node_resolve_name+0x92>
 8017d26:	4689      	mov	r9, r1
 8017d28:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017d2c:	f002 f80e 	bl	8019d4c <rcutils_get_zero_initialized_string_map>
 8017d30:	ab10      	add	r3, sp, #64	; 0x40
 8017d32:	9008      	str	r0, [sp, #32]
 8017d34:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8017d38:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017d3c:	2100      	movs	r1, #0
 8017d3e:	a808      	add	r0, sp, #32
 8017d40:	e895 000c 	ldmia.w	r5, {r2, r3}
 8017d44:	f002 f878 	bl	8019e38 <rcutils_string_map_init>
 8017d48:	4683      	mov	fp, r0
 8017d4a:	b1a0      	cbz	r0, 8017d76 <rcl_node_resolve_name+0x9e>
 8017d4c:	f7f9 fbc8 	bl	80114e0 <rcutils_get_error_string>
 8017d50:	f7f9 fbde 	bl	8011510 <rcutils_reset_error>
 8017d54:	f1bb 0f0a 	cmp.w	fp, #10
 8017d58:	bf18      	it	ne
 8017d5a:	f04f 0b01 	movne.w	fp, #1
 8017d5e:	4658      	mov	r0, fp
 8017d60:	b011      	add	sp, #68	; 0x44
 8017d62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d66:	b002      	add	sp, #8
 8017d68:	4770      	bx	lr
 8017d6a:	f04f 0b0b 	mov.w	fp, #11
 8017d6e:	e7f6      	b.n	8017d5e <rcl_node_resolve_name+0x86>
 8017d70:	f04f 0b01 	mov.w	fp, #1
 8017d74:	e7f3      	b.n	8017d5e <rcl_node_resolve_name+0x86>
 8017d76:	9009      	str	r0, [sp, #36]	; 0x24
 8017d78:	9007      	str	r0, [sp, #28]
 8017d7a:	a808      	add	r0, sp, #32
 8017d7c:	f003 fcdc 	bl	801b738 <rcl_get_default_topic_name_substitutions>
 8017d80:	4683      	mov	fp, r0
 8017d82:	b180      	cbz	r0, 8017da6 <rcl_node_resolve_name+0xce>
 8017d84:	280a      	cmp	r0, #10
 8017d86:	a808      	add	r0, sp, #32
 8017d88:	bf18      	it	ne
 8017d8a:	f04f 0b01 	movne.w	fp, #1
 8017d8e:	f002 f893 	bl	8019eb8 <rcutils_string_map_fini>
 8017d92:	4604      	mov	r4, r0
 8017d94:	2800      	cmp	r0, #0
 8017d96:	d15b      	bne.n	8017e50 <rcl_node_resolve_name+0x178>
 8017d98:	4651      	mov	r1, sl
 8017d9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d9c:	47c8      	blx	r9
 8017d9e:	4651      	mov	r1, sl
 8017da0:	4620      	mov	r0, r4
 8017da2:	47c8      	blx	r9
 8017da4:	e7db      	b.n	8017d5e <rcl_node_resolve_name+0x86>
 8017da6:	ab09      	add	r3, sp, #36	; 0x24
 8017da8:	46ec      	mov	ip, sp
 8017daa:	9305      	str	r3, [sp, #20]
 8017dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017dae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017db2:	682b      	ldr	r3, [r5, #0]
 8017db4:	463a      	mov	r2, r7
 8017db6:	4631      	mov	r1, r6
 8017db8:	4620      	mov	r0, r4
 8017dba:	f8cc 3000 	str.w	r3, [ip]
 8017dbe:	ab08      	add	r3, sp, #32
 8017dc0:	f003 fb5a 	bl	801b478 <rcl_expand_topic_name>
 8017dc4:	4683      	mov	fp, r0
 8017dc6:	b9d8      	cbnz	r0, 8017e00 <rcl_node_resolve_name+0x128>
 8017dc8:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017dca:	4602      	mov	r2, r0
 8017dcc:	9009      	str	r0, [sp, #36]	; 0x24
 8017dce:	a90a      	add	r1, sp, #40	; 0x28
 8017dd0:	4620      	mov	r0, r4
 8017dd2:	f002 f985 	bl	801a0e0 <rmw_validate_full_topic_name>
 8017dd6:	bb50      	cbnz	r0, 8017e2e <rcl_node_resolve_name+0x156>
 8017dd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8017dda:	2d00      	cmp	r5, #0
 8017ddc:	d140      	bne.n	8017e60 <rcl_node_resolve_name+0x188>
 8017dde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017de0:	a808      	add	r0, sp, #32
 8017de2:	601c      	str	r4, [r3, #0]
 8017de4:	f002 f868 	bl	8019eb8 <rcutils_string_map_fini>
 8017de8:	4683      	mov	fp, r0
 8017dea:	2800      	cmp	r0, #0
 8017dec:	d043      	beq.n	8017e76 <rcl_node_resolve_name+0x19e>
 8017dee:	f7f9 fb77 	bl	80114e0 <rcutils_get_error_string>
 8017df2:	46a8      	mov	r8, r5
 8017df4:	f04f 0b01 	mov.w	fp, #1
 8017df8:	462c      	mov	r4, r5
 8017dfa:	f7f9 fb89 	bl	8011510 <rcutils_reset_error>
 8017dfe:	e00a      	b.n	8017e16 <rcl_node_resolve_name+0x13e>
 8017e00:	2867      	cmp	r0, #103	; 0x67
 8017e02:	bf14      	ite	ne
 8017e04:	f04f 0800 	movne.w	r8, #0
 8017e08:	f008 0801 	andeq.w	r8, r8, #1
 8017e0c:	9c07      	ldr	r4, [sp, #28]
 8017e0e:	a808      	add	r0, sp, #32
 8017e10:	f002 f852 	bl	8019eb8 <rcutils_string_map_fini>
 8017e14:	bb50      	cbnz	r0, 8017e6c <rcl_node_resolve_name+0x194>
 8017e16:	4651      	mov	r1, sl
 8017e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e1a:	47c8      	blx	r9
 8017e1c:	4651      	mov	r1, sl
 8017e1e:	4620      	mov	r0, r4
 8017e20:	47c8      	blx	r9
 8017e22:	f1b8 0f00 	cmp.w	r8, #0
 8017e26:	bf18      	it	ne
 8017e28:	f04f 0b68 	movne.w	fp, #104	; 0x68
 8017e2c:	e797      	b.n	8017d5e <rcl_node_resolve_name+0x86>
 8017e2e:	f7f9 fb57 	bl	80114e0 <rcutils_get_error_string>
 8017e32:	f7f9 fb6d 	bl	8011510 <rcutils_reset_error>
 8017e36:	a808      	add	r0, sp, #32
 8017e38:	f002 f83e 	bl	8019eb8 <rcutils_string_map_fini>
 8017e3c:	b998      	cbnz	r0, 8017e66 <rcl_node_resolve_name+0x18e>
 8017e3e:	4651      	mov	r1, sl
 8017e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e42:	47c8      	blx	r9
 8017e44:	4651      	mov	r1, sl
 8017e46:	4620      	mov	r0, r4
 8017e48:	f04f 0b01 	mov.w	fp, #1
 8017e4c:	47c8      	blx	r9
 8017e4e:	e786      	b.n	8017d5e <rcl_node_resolve_name+0x86>
 8017e50:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8017e54:	f7f9 fb44 	bl	80114e0 <rcutils_get_error_string>
 8017e58:	f7f9 fb5a 	bl	8011510 <rcutils_reset_error>
 8017e5c:	4644      	mov	r4, r8
 8017e5e:	e7da      	b.n	8017e16 <rcl_node_resolve_name+0x13e>
 8017e60:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017e64:	e7d3      	b.n	8017e0e <rcl_node_resolve_name+0x136>
 8017e66:	46d8      	mov	r8, fp
 8017e68:	f04f 0b01 	mov.w	fp, #1
 8017e6c:	f7f9 fb38 	bl	80114e0 <rcutils_get_error_string>
 8017e70:	f7f9 fb4e 	bl	8011510 <rcutils_reset_error>
 8017e74:	e7cf      	b.n	8017e16 <rcl_node_resolve_name+0x13e>
 8017e76:	4651      	mov	r1, sl
 8017e78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e7a:	47c8      	blx	r9
 8017e7c:	4651      	mov	r1, sl
 8017e7e:	4658      	mov	r0, fp
 8017e80:	47c8      	blx	r9
 8017e82:	e76c      	b.n	8017d5e <rcl_node_resolve_name+0x86>

08017e84 <exact_match_lookup>:
 8017e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e86:	f102 0708 	add.w	r7, r2, #8
 8017e8a:	460b      	mov	r3, r1
 8017e8c:	b085      	sub	sp, #20
 8017e8e:	4614      	mov	r4, r2
 8017e90:	4606      	mov	r6, r0
 8017e92:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017e96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	4919      	ldr	r1, [pc, #100]	; (8017f04 <exact_match_lookup+0x80>)
 8017e9e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8017ea2:	f001 ff1b 	bl	8019cdc <rcutils_join_path>
 8017ea6:	7833      	ldrb	r3, [r6, #0]
 8017ea8:	4605      	mov	r5, r0
 8017eaa:	2b2f      	cmp	r3, #47	; 0x2f
 8017eac:	d023      	beq.n	8017ef6 <exact_match_lookup+0x72>
 8017eae:	f104 030c 	add.w	r3, r4, #12
 8017eb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017eb6:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017eba:	1c70      	adds	r0, r6, #1
 8017ebc:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017ec0:	f001 ff12 	bl	8019ce8 <rcutils_to_native_path>
 8017ec4:	4606      	mov	r6, r0
 8017ec6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8017eca:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017ece:	4631      	mov	r1, r6
 8017ed0:	4628      	mov	r0, r5
 8017ed2:	e894 000c 	ldmia.w	r4, {r2, r3}
 8017ed6:	f001 ff01 	bl	8019cdc <rcutils_join_path>
 8017eda:	4603      	mov	r3, r0
 8017edc:	4630      	mov	r0, r6
 8017ede:	6862      	ldr	r2, [r4, #4]
 8017ee0:	461e      	mov	r6, r3
 8017ee2:	6921      	ldr	r1, [r4, #16]
 8017ee4:	4790      	blx	r2
 8017ee6:	4628      	mov	r0, r5
 8017ee8:	4635      	mov	r5, r6
 8017eea:	6863      	ldr	r3, [r4, #4]
 8017eec:	6921      	ldr	r1, [r4, #16]
 8017eee:	4798      	blx	r3
 8017ef0:	4628      	mov	r0, r5
 8017ef2:	b005      	add	sp, #20
 8017ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ef6:	7873      	ldrb	r3, [r6, #1]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d1d8      	bne.n	8017eae <exact_match_lookup+0x2a>
 8017efc:	4628      	mov	r0, r5
 8017efe:	b005      	add	sp, #20
 8017f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f02:	bf00      	nop
 8017f04:	0801e404 	.word	0x0801e404

08017f08 <rcl_get_secure_root>:
 8017f08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017f0c:	b085      	sub	sp, #20
 8017f0e:	b168      	cbz	r0, 8017f2c <rcl_get_secure_root+0x24>
 8017f10:	4607      	mov	r7, r0
 8017f12:	4608      	mov	r0, r1
 8017f14:	460c      	mov	r4, r1
 8017f16:	f7f9 fabd 	bl	8011494 <rcutils_allocator_is_valid>
 8017f1a:	b138      	cbz	r0, 8017f2c <rcl_get_secure_root+0x24>
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	482d      	ldr	r0, [pc, #180]	; (8017fd4 <rcl_get_secure_root+0xcc>)
 8017f20:	a903      	add	r1, sp, #12
 8017f22:	9303      	str	r3, [sp, #12]
 8017f24:	f7f9 fac4 	bl	80114b0 <rcutils_get_env>
 8017f28:	4605      	mov	r5, r0
 8017f2a:	b120      	cbz	r0, 8017f36 <rcl_get_secure_root+0x2e>
 8017f2c:	2500      	movs	r5, #0
 8017f2e:	4628      	mov	r0, r5
 8017f30:	b005      	add	sp, #20
 8017f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f36:	9b03      	ldr	r3, [sp, #12]
 8017f38:	781a      	ldrb	r2, [r3, #0]
 8017f3a:	2a00      	cmp	r2, #0
 8017f3c:	d0f6      	beq.n	8017f2c <rcl_get_secure_root+0x24>
 8017f3e:	f104 090c 	add.w	r9, r4, #12
 8017f42:	e899 0003 	ldmia.w	r9, {r0, r1}
 8017f46:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017f50:	f7f9 fc34 	bl	80117bc <rcutils_strdup>
 8017f54:	4680      	mov	r8, r0
 8017f56:	2800      	cmp	r0, #0
 8017f58:	d0e8      	beq.n	8017f2c <rcl_get_secure_root+0x24>
 8017f5a:	a903      	add	r1, sp, #12
 8017f5c:	481e      	ldr	r0, [pc, #120]	; (8017fd8 <rcl_get_secure_root+0xd0>)
 8017f5e:	9503      	str	r5, [sp, #12]
 8017f60:	f7f9 faa6 	bl	80114b0 <rcutils_get_env>
 8017f64:	b160      	cbz	r0, 8017f80 <rcl_get_secure_root+0x78>
 8017f66:	2600      	movs	r6, #0
 8017f68:	4630      	mov	r0, r6
 8017f6a:	6863      	ldr	r3, [r4, #4]
 8017f6c:	6921      	ldr	r1, [r4, #16]
 8017f6e:	4798      	blx	r3
 8017f70:	4640      	mov	r0, r8
 8017f72:	6863      	ldr	r3, [r4, #4]
 8017f74:	6921      	ldr	r1, [r4, #16]
 8017f76:	4798      	blx	r3
 8017f78:	4628      	mov	r0, r5
 8017f7a:	b005      	add	sp, #20
 8017f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f80:	9b03      	ldr	r3, [sp, #12]
 8017f82:	781e      	ldrb	r6, [r3, #0]
 8017f84:	b1f6      	cbz	r6, 8017fc4 <rcl_get_secure_root+0xbc>
 8017f86:	e899 0003 	ldmia.w	r9, {r0, r1}
 8017f8a:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017f8e:	4618      	mov	r0, r3
 8017f90:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017f94:	f7f9 fc12 	bl	80117bc <rcutils_strdup>
 8017f98:	4606      	mov	r6, r0
 8017f9a:	2800      	cmp	r0, #0
 8017f9c:	d0e3      	beq.n	8017f66 <rcl_get_secure_root+0x5e>
 8017f9e:	4622      	mov	r2, r4
 8017fa0:	4641      	mov	r1, r8
 8017fa2:	f7ff ff6f 	bl	8017e84 <exact_match_lookup>
 8017fa6:	4605      	mov	r5, r0
 8017fa8:	2d00      	cmp	r5, #0
 8017faa:	d0dd      	beq.n	8017f68 <rcl_get_secure_root+0x60>
 8017fac:	4628      	mov	r0, r5
 8017fae:	f001 fe93 	bl	8019cd8 <rcutils_is_directory>
 8017fb2:	4603      	mov	r3, r0
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	d1d7      	bne.n	8017f68 <rcl_get_secure_root+0x60>
 8017fb8:	4628      	mov	r0, r5
 8017fba:	6921      	ldr	r1, [r4, #16]
 8017fbc:	461d      	mov	r5, r3
 8017fbe:	6863      	ldr	r3, [r4, #4]
 8017fc0:	4798      	blx	r3
 8017fc2:	e7d1      	b.n	8017f68 <rcl_get_secure_root+0x60>
 8017fc4:	4622      	mov	r2, r4
 8017fc6:	4638      	mov	r0, r7
 8017fc8:	4641      	mov	r1, r8
 8017fca:	f7ff ff5b 	bl	8017e84 <exact_match_lookup>
 8017fce:	4605      	mov	r5, r0
 8017fd0:	e7ea      	b.n	8017fa8 <rcl_get_secure_root+0xa0>
 8017fd2:	bf00      	nop
 8017fd4:	0801e410 	.word	0x0801e410
 8017fd8:	0801e428 	.word	0x0801e428

08017fdc <rcl_get_security_options_from_environment>:
 8017fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fe0:	b082      	sub	sp, #8
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	4606      	mov	r6, r0
 8017fe6:	460f      	mov	r7, r1
 8017fe8:	4821      	ldr	r0, [pc, #132]	; (8018070 <rcl_get_security_options_from_environment+0x94>)
 8017fea:	a901      	add	r1, sp, #4
 8017fec:	4690      	mov	r8, r2
 8017fee:	9301      	str	r3, [sp, #4]
 8017ff0:	f7f9 fa5e 	bl	80114b0 <rcutils_get_env>
 8017ff4:	b120      	cbz	r0, 8018000 <rcl_get_security_options_from_environment+0x24>
 8017ff6:	2501      	movs	r5, #1
 8017ff8:	4628      	mov	r0, r5
 8017ffa:	b002      	add	sp, #8
 8017ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018000:	4604      	mov	r4, r0
 8018002:	491c      	ldr	r1, [pc, #112]	; (8018074 <rcl_get_security_options_from_environment+0x98>)
 8018004:	9801      	ldr	r0, [sp, #4]
 8018006:	f7e8 f91b 	bl	8000240 <strcmp>
 801800a:	4605      	mov	r5, r0
 801800c:	b9f0      	cbnz	r0, 801804c <rcl_get_security_options_from_environment+0x70>
 801800e:	9001      	str	r0, [sp, #4]
 8018010:	f1b8 0f00 	cmp.w	r8, #0
 8018014:	d021      	beq.n	801805a <rcl_get_security_options_from_environment+0x7e>
 8018016:	a901      	add	r1, sp, #4
 8018018:	4817      	ldr	r0, [pc, #92]	; (8018078 <rcl_get_security_options_from_environment+0x9c>)
 801801a:	f7f9 fa49 	bl	80114b0 <rcutils_get_env>
 801801e:	2800      	cmp	r0, #0
 8018020:	d1e9      	bne.n	8017ff6 <rcl_get_security_options_from_environment+0x1a>
 8018022:	4916      	ldr	r1, [pc, #88]	; (801807c <rcl_get_security_options_from_environment+0xa0>)
 8018024:	9801      	ldr	r0, [sp, #4]
 8018026:	f7e8 f90b 	bl	8000240 <strcmp>
 801802a:	4603      	mov	r3, r0
 801802c:	4639      	mov	r1, r7
 801802e:	4630      	mov	r0, r6
 8018030:	fab3 f383 	clz	r3, r3
 8018034:	095b      	lsrs	r3, r3, #5
 8018036:	f888 3000 	strb.w	r3, [r8]
 801803a:	f7ff ff65 	bl	8017f08 <rcl_get_secure_root>
 801803e:	b170      	cbz	r0, 801805e <rcl_get_security_options_from_environment+0x82>
 8018040:	f8c8 0004 	str.w	r0, [r8, #4]
 8018044:	4628      	mov	r0, r5
 8018046:	b002      	add	sp, #8
 8018048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801804c:	4625      	mov	r5, r4
 801804e:	f888 4000 	strb.w	r4, [r8]
 8018052:	4628      	mov	r0, r5
 8018054:	b002      	add	sp, #8
 8018056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801805a:	250b      	movs	r5, #11
 801805c:	e7cc      	b.n	8017ff8 <rcl_get_security_options_from_environment+0x1c>
 801805e:	f898 5000 	ldrb.w	r5, [r8]
 8018062:	f1a5 0501 	sub.w	r5, r5, #1
 8018066:	fab5 f585 	clz	r5, r5
 801806a:	096d      	lsrs	r5, r5, #5
 801806c:	e7c4      	b.n	8017ff8 <rcl_get_security_options_from_environment+0x1c>
 801806e:	bf00      	nop
 8018070:	0801e3c8 	.word	0x0801e3c8
 8018074:	0801e3dc 	.word	0x0801e3dc
 8018078:	0801e3e4 	.word	0x0801e3e4
 801807c:	0801e3fc 	.word	0x0801e3fc

08018080 <rcl_get_system_time>:
 8018080:	4608      	mov	r0, r1
 8018082:	f7f9 bbd9 	b.w	8011838 <rcutils_system_time_now>
 8018086:	bf00      	nop

08018088 <rcl_get_steady_time>:
 8018088:	4608      	mov	r0, r1
 801808a:	f7f9 bbfb 	b.w	8011884 <rcutils_steady_time_now>
 801808e:	bf00      	nop

08018090 <rcl_get_ros_time>:
 8018090:	7a03      	ldrb	r3, [r0, #8]
 8018092:	b510      	push	{r4, lr}
 8018094:	460c      	mov	r4, r1
 8018096:	b143      	cbz	r3, 80180aa <rcl_get_ros_time+0x1a>
 8018098:	2105      	movs	r1, #5
 801809a:	f001 fd79 	bl	8019b90 <__atomic_load_8>
 801809e:	4602      	mov	r2, r0
 80180a0:	460b      	mov	r3, r1
 80180a2:	2000      	movs	r0, #0
 80180a4:	e9c4 2300 	strd	r2, r3, [r4]
 80180a8:	bd10      	pop	{r4, pc}
 80180aa:	4608      	mov	r0, r1
 80180ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80180b0:	f7f9 bbc2 	b.w	8011838 <rcutils_system_time_now>

080180b4 <rcl_clock_init>:
 80180b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80180b6:	4605      	mov	r5, r0
 80180b8:	4610      	mov	r0, r2
 80180ba:	4614      	mov	r4, r2
 80180bc:	460e      	mov	r6, r1
 80180be:	f7f9 f9e9 	bl	8011494 <rcutils_allocator_is_valid>
 80180c2:	b128      	cbz	r0, 80180d0 <rcl_clock_init+0x1c>
 80180c4:	2d03      	cmp	r5, #3
 80180c6:	d803      	bhi.n	80180d0 <rcl_clock_init+0x1c>
 80180c8:	e8df f005 	tbb	[pc, r5]
 80180cc:	0659301f 	.word	0x0659301f
 80180d0:	f04f 0c0b 	mov.w	ip, #11
 80180d4:	4660      	mov	r0, ip
 80180d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80180d8:	2c00      	cmp	r4, #0
 80180da:	d0f9      	beq.n	80180d0 <rcl_clock_init+0x1c>
 80180dc:	fab6 f386 	clz	r3, r6
 80180e0:	095b      	lsrs	r3, r3, #5
 80180e2:	2e00      	cmp	r6, #0
 80180e4:	d0f4      	beq.n	80180d0 <rcl_clock_init+0x1c>
 80180e6:	6133      	str	r3, [r6, #16]
 80180e8:	469c      	mov	ip, r3
 80180ea:	f106 0514 	add.w	r5, r6, #20
 80180ee:	4f32      	ldr	r7, [pc, #200]	; (80181b8 <rcl_clock_init+0x104>)
 80180f0:	f04f 0e03 	mov.w	lr, #3
 80180f4:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80180f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80180fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80180fc:	6823      	ldr	r3, [r4, #0]
 80180fe:	4660      	mov	r0, ip
 8018100:	602b      	str	r3, [r5, #0]
 8018102:	60f7      	str	r7, [r6, #12]
 8018104:	f886 e000 	strb.w	lr, [r6]
 8018108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801810a:	2e00      	cmp	r6, #0
 801810c:	d0e0      	beq.n	80180d0 <rcl_clock_init+0x1c>
 801810e:	2300      	movs	r3, #0
 8018110:	f106 0514 	add.w	r5, r6, #20
 8018114:	7033      	strb	r3, [r6, #0]
 8018116:	469c      	mov	ip, r3
 8018118:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801811c:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8018120:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018122:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8018124:	6823      	ldr	r3, [r4, #0]
 8018126:	4660      	mov	r0, ip
 8018128:	602b      	str	r3, [r5, #0]
 801812a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801812c:	2c00      	cmp	r4, #0
 801812e:	d0cf      	beq.n	80180d0 <rcl_clock_init+0x1c>
 8018130:	fab6 f586 	clz	r5, r6
 8018134:	096d      	lsrs	r5, r5, #5
 8018136:	2e00      	cmp	r6, #0
 8018138:	d0ca      	beq.n	80180d0 <rcl_clock_init+0x1c>
 801813a:	46a6      	mov	lr, r4
 801813c:	7035      	strb	r5, [r6, #0]
 801813e:	f106 0c14 	add.w	ip, r6, #20
 8018142:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018146:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801814a:	e9c6 5503 	strd	r5, r5, [r6, #12]
 801814e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018152:	f8de 3000 	ldr.w	r3, [lr]
 8018156:	2010      	movs	r0, #16
 8018158:	f8cc 3000 	str.w	r3, [ip]
 801815c:	6823      	ldr	r3, [r4, #0]
 801815e:	6921      	ldr	r1, [r4, #16]
 8018160:	4798      	blx	r3
 8018162:	6130      	str	r0, [r6, #16]
 8018164:	b320      	cbz	r0, 80181b0 <rcl_clock_init+0xfc>
 8018166:	2200      	movs	r2, #0
 8018168:	2300      	movs	r3, #0
 801816a:	46ac      	mov	ip, r5
 801816c:	7205      	strb	r5, [r0, #8]
 801816e:	e9c0 2300 	strd	r2, r3, [r0]
 8018172:	4a12      	ldr	r2, [pc, #72]	; (80181bc <rcl_clock_init+0x108>)
 8018174:	2301      	movs	r3, #1
 8018176:	4660      	mov	r0, ip
 8018178:	60f2      	str	r2, [r6, #12]
 801817a:	7033      	strb	r3, [r6, #0]
 801817c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801817e:	2c00      	cmp	r4, #0
 8018180:	d0a6      	beq.n	80180d0 <rcl_clock_init+0x1c>
 8018182:	fab6 f386 	clz	r3, r6
 8018186:	095b      	lsrs	r3, r3, #5
 8018188:	2e00      	cmp	r6, #0
 801818a:	d0a1      	beq.n	80180d0 <rcl_clock_init+0x1c>
 801818c:	6133      	str	r3, [r6, #16]
 801818e:	469c      	mov	ip, r3
 8018190:	f106 0514 	add.w	r5, r6, #20
 8018194:	f8df e028 	ldr.w	lr, [pc, #40]	; 80181c0 <rcl_clock_init+0x10c>
 8018198:	2702      	movs	r7, #2
 801819a:	e9c6 3301 	strd	r3, r3, [r6, #4]
 801819e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80181a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80181a2:	6823      	ldr	r3, [r4, #0]
 80181a4:	4660      	mov	r0, ip
 80181a6:	602b      	str	r3, [r5, #0]
 80181a8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80181ac:	7037      	strb	r7, [r6, #0]
 80181ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181b0:	f04f 0c0a 	mov.w	ip, #10
 80181b4:	e78e      	b.n	80180d4 <rcl_clock_init+0x20>
 80181b6:	bf00      	nop
 80181b8:	08018089 	.word	0x08018089
 80181bc:	08018091 	.word	0x08018091
 80181c0:	08018081 	.word	0x08018081

080181c4 <rcl_clock_get_now>:
 80181c4:	b140      	cbz	r0, 80181d8 <rcl_clock_get_now+0x14>
 80181c6:	b139      	cbz	r1, 80181d8 <rcl_clock_get_now+0x14>
 80181c8:	7803      	ldrb	r3, [r0, #0]
 80181ca:	b11b      	cbz	r3, 80181d4 <rcl_clock_get_now+0x10>
 80181cc:	68c3      	ldr	r3, [r0, #12]
 80181ce:	b10b      	cbz	r3, 80181d4 <rcl_clock_get_now+0x10>
 80181d0:	6900      	ldr	r0, [r0, #16]
 80181d2:	4718      	bx	r3
 80181d4:	2001      	movs	r0, #1
 80181d6:	4770      	bx	lr
 80181d8:	200b      	movs	r0, #11
 80181da:	4770      	bx	lr

080181dc <rcl_timer_call>:
 80181dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e0:	b087      	sub	sp, #28
 80181e2:	2800      	cmp	r0, #0
 80181e4:	d06c      	beq.n	80182c0 <rcl_timer_call+0xe4>
 80181e6:	6803      	ldr	r3, [r0, #0]
 80181e8:	4604      	mov	r4, r0
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d062      	beq.n	80182b4 <rcl_timer_call+0xd8>
 80181ee:	f3bf 8f5b 	dmb	ish
 80181f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80181f6:	f3bf 8f5b 	dmb	ish
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d14f      	bne.n	801829e <rcl_timer_call+0xc2>
 80181fe:	6803      	ldr	r3, [r0, #0]
 8018200:	a904      	add	r1, sp, #16
 8018202:	6818      	ldr	r0, [r3, #0]
 8018204:	f7ff ffde 	bl	80181c4 <rcl_clock_get_now>
 8018208:	4605      	mov	r5, r0
 801820a:	2800      	cmp	r0, #0
 801820c:	d149      	bne.n	80182a2 <rcl_timer_call+0xc6>
 801820e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018212:	2b00      	cmp	r3, #0
 8018214:	db49      	blt.n	80182aa <rcl_timer_call+0xce>
 8018216:	2605      	movs	r6, #5
 8018218:	6820      	ldr	r0, [r4, #0]
 801821a:	9600      	str	r6, [sp, #0]
 801821c:	3020      	adds	r0, #32
 801821e:	f001 fd23 	bl	8019c68 <__atomic_exchange_8>
 8018222:	6823      	ldr	r3, [r4, #0]
 8018224:	4680      	mov	r8, r0
 8018226:	f3bf 8f5b 	dmb	ish
 801822a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801822e:	f3bf 8f5b 	dmb	ish
 8018232:	6820      	ldr	r0, [r4, #0]
 8018234:	4689      	mov	r9, r1
 8018236:	4631      	mov	r1, r6
 8018238:	3028      	adds	r0, #40	; 0x28
 801823a:	f001 fca9 	bl	8019b90 <__atomic_load_8>
 801823e:	460f      	mov	r7, r1
 8018240:	4631      	mov	r1, r6
 8018242:	4606      	mov	r6, r0
 8018244:	6820      	ldr	r0, [r4, #0]
 8018246:	3018      	adds	r0, #24
 8018248:	f001 fca2 	bl	8019b90 <__atomic_load_8>
 801824c:	4602      	mov	r2, r0
 801824e:	9804      	ldr	r0, [sp, #16]
 8018250:	460b      	mov	r3, r1
 8018252:	18b6      	adds	r6, r6, r2
 8018254:	f8dd c014 	ldr.w	ip, [sp, #20]
 8018258:	4692      	mov	sl, r2
 801825a:	eb47 0701 	adc.w	r7, r7, r1
 801825e:	4286      	cmp	r6, r0
 8018260:	eb77 010c 	sbcs.w	r1, r7, ip
 8018264:	da04      	bge.n	8018270 <rcl_timer_call+0x94>
 8018266:	ea53 0102 	orrs.w	r1, r3, r2
 801826a:	d12e      	bne.n	80182ca <rcl_timer_call+0xee>
 801826c:	4606      	mov	r6, r0
 801826e:	4667      	mov	r7, ip
 8018270:	6820      	ldr	r0, [r4, #0]
 8018272:	2105      	movs	r1, #5
 8018274:	4632      	mov	r2, r6
 8018276:	463b      	mov	r3, r7
 8018278:	3028      	adds	r0, #40	; 0x28
 801827a:	9100      	str	r1, [sp, #0]
 801827c:	f001 fcbe 	bl	8019bfc <__atomic_store_8>
 8018280:	f1bb 0f00 	cmp.w	fp, #0
 8018284:	d00d      	beq.n	80182a2 <rcl_timer_call+0xc6>
 8018286:	9a04      	ldr	r2, [sp, #16]
 8018288:	4620      	mov	r0, r4
 801828a:	9b05      	ldr	r3, [sp, #20]
 801828c:	ebb2 0208 	subs.w	r2, r2, r8
 8018290:	eb63 0309 	sbc.w	r3, r3, r9
 8018294:	47d8      	blx	fp
 8018296:	4628      	mov	r0, r5
 8018298:	b007      	add	sp, #28
 801829a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801829e:	f240 3521 	movw	r5, #801	; 0x321
 80182a2:	4628      	mov	r0, r5
 80182a4:	b007      	add	sp, #28
 80182a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182aa:	2501      	movs	r5, #1
 80182ac:	4628      	mov	r0, r5
 80182ae:	b007      	add	sp, #28
 80182b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182b4:	f44f 7548 	mov.w	r5, #800	; 0x320
 80182b8:	4628      	mov	r0, r5
 80182ba:	b007      	add	sp, #28
 80182bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182c0:	250b      	movs	r5, #11
 80182c2:	4628      	mov	r0, r5
 80182c4:	b007      	add	sp, #28
 80182c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182ca:	1b80      	subs	r0, r0, r6
 80182cc:	eb6c 0107 	sbc.w	r1, ip, r7
 80182d0:	3801      	subs	r0, #1
 80182d2:	f161 0100 	sbc.w	r1, r1, #0
 80182d6:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80182da:	f7e8 f819 	bl	8000310 <__aeabi_ldivmod>
 80182de:	9b02      	ldr	r3, [sp, #8]
 80182e0:	3001      	adds	r0, #1
 80182e2:	f141 0100 	adc.w	r1, r1, #0
 80182e6:	fb00 f303 	mul.w	r3, r0, r3
 80182ea:	fb01 330a 	mla	r3, r1, sl, r3
 80182ee:	fba0 0a0a 	umull	r0, sl, r0, sl
 80182f2:	1986      	adds	r6, r0, r6
 80182f4:	4453      	add	r3, sl
 80182f6:	eb43 0707 	adc.w	r7, r3, r7
 80182fa:	e7b9      	b.n	8018270 <rcl_timer_call+0x94>

080182fc <rcl_timer_is_ready>:
 80182fc:	b570      	push	{r4, r5, r6, lr}
 80182fe:	b082      	sub	sp, #8
 8018300:	b380      	cbz	r0, 8018364 <rcl_timer_is_ready+0x68>
 8018302:	6803      	ldr	r3, [r0, #0]
 8018304:	4604      	mov	r4, r0
 8018306:	b38b      	cbz	r3, 801836c <rcl_timer_is_ready+0x70>
 8018308:	460d      	mov	r5, r1
 801830a:	b359      	cbz	r1, 8018364 <rcl_timer_is_ready+0x68>
 801830c:	f3bf 8f5b 	dmb	ish
 8018310:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8018314:	f3bf 8f5b 	dmb	ish
 8018318:	b953      	cbnz	r3, 8018330 <rcl_timer_is_ready+0x34>
 801831a:	6803      	ldr	r3, [r0, #0]
 801831c:	4669      	mov	r1, sp
 801831e:	6818      	ldr	r0, [r3, #0]
 8018320:	f7ff ff50 	bl	80181c4 <rcl_clock_get_now>
 8018324:	4606      	mov	r6, r0
 8018326:	b148      	cbz	r0, 801833c <rcl_timer_is_ready+0x40>
 8018328:	f240 3321 	movw	r3, #801	; 0x321
 801832c:	4298      	cmp	r0, r3
 801832e:	d102      	bne.n	8018336 <rcl_timer_is_ready+0x3a>
 8018330:	2300      	movs	r3, #0
 8018332:	461e      	mov	r6, r3
 8018334:	702b      	strb	r3, [r5, #0]
 8018336:	4630      	mov	r0, r6
 8018338:	b002      	add	sp, #8
 801833a:	bd70      	pop	{r4, r5, r6, pc}
 801833c:	6820      	ldr	r0, [r4, #0]
 801833e:	2105      	movs	r1, #5
 8018340:	3028      	adds	r0, #40	; 0x28
 8018342:	f001 fc25 	bl	8019b90 <__atomic_load_8>
 8018346:	9b00      	ldr	r3, [sp, #0]
 8018348:	1ac0      	subs	r0, r0, r3
 801834a:	9b01      	ldr	r3, [sp, #4]
 801834c:	eb61 0103 	sbc.w	r1, r1, r3
 8018350:	2801      	cmp	r0, #1
 8018352:	4630      	mov	r0, r6
 8018354:	f171 0300 	sbcs.w	r3, r1, #0
 8018358:	bfb4      	ite	lt
 801835a:	2301      	movlt	r3, #1
 801835c:	2300      	movge	r3, #0
 801835e:	702b      	strb	r3, [r5, #0]
 8018360:	b002      	add	sp, #8
 8018362:	bd70      	pop	{r4, r5, r6, pc}
 8018364:	260b      	movs	r6, #11
 8018366:	4630      	mov	r0, r6
 8018368:	b002      	add	sp, #8
 801836a:	bd70      	pop	{r4, r5, r6, pc}
 801836c:	f44f 7648 	mov.w	r6, #800	; 0x320
 8018370:	e7e1      	b.n	8018336 <rcl_timer_is_ready+0x3a>
 8018372:	bf00      	nop

08018374 <rcl_timer_get_time_until_next_call>:
 8018374:	b570      	push	{r4, r5, r6, lr}
 8018376:	b082      	sub	sp, #8
 8018378:	b330      	cbz	r0, 80183c8 <rcl_timer_get_time_until_next_call+0x54>
 801837a:	6803      	ldr	r3, [r0, #0]
 801837c:	4604      	mov	r4, r0
 801837e:	b33b      	cbz	r3, 80183d0 <rcl_timer_get_time_until_next_call+0x5c>
 8018380:	460d      	mov	r5, r1
 8018382:	b309      	cbz	r1, 80183c8 <rcl_timer_get_time_until_next_call+0x54>
 8018384:	f3bf 8f5b 	dmb	ish
 8018388:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801838c:	f3bf 8f5b 	dmb	ish
 8018390:	b9ab      	cbnz	r3, 80183be <rcl_timer_get_time_until_next_call+0x4a>
 8018392:	6803      	ldr	r3, [r0, #0]
 8018394:	4669      	mov	r1, sp
 8018396:	6818      	ldr	r0, [r3, #0]
 8018398:	f7ff ff14 	bl	80181c4 <rcl_clock_get_now>
 801839c:	4606      	mov	r6, r0
 801839e:	b958      	cbnz	r0, 80183b8 <rcl_timer_get_time_until_next_call+0x44>
 80183a0:	6820      	ldr	r0, [r4, #0]
 80183a2:	2105      	movs	r1, #5
 80183a4:	3028      	adds	r0, #40	; 0x28
 80183a6:	f001 fbf3 	bl	8019b90 <__atomic_load_8>
 80183aa:	9b00      	ldr	r3, [sp, #0]
 80183ac:	1ac0      	subs	r0, r0, r3
 80183ae:	9b01      	ldr	r3, [sp, #4]
 80183b0:	eb61 0103 	sbc.w	r1, r1, r3
 80183b4:	6028      	str	r0, [r5, #0]
 80183b6:	6069      	str	r1, [r5, #4]
 80183b8:	4630      	mov	r0, r6
 80183ba:	b002      	add	sp, #8
 80183bc:	bd70      	pop	{r4, r5, r6, pc}
 80183be:	f240 3621 	movw	r6, #801	; 0x321
 80183c2:	4630      	mov	r0, r6
 80183c4:	b002      	add	sp, #8
 80183c6:	bd70      	pop	{r4, r5, r6, pc}
 80183c8:	260b      	movs	r6, #11
 80183ca:	4630      	mov	r0, r6
 80183cc:	b002      	add	sp, #8
 80183ce:	bd70      	pop	{r4, r5, r6, pc}
 80183d0:	f44f 7648 	mov.w	r6, #800	; 0x320
 80183d4:	e7f0      	b.n	80183b8 <rcl_timer_get_time_until_next_call+0x44>
 80183d6:	bf00      	nop

080183d8 <rcl_timer_get_guard_condition>:
 80183d8:	b130      	cbz	r0, 80183e8 <rcl_timer_get_guard_condition+0x10>
 80183da:	6800      	ldr	r0, [r0, #0]
 80183dc:	b120      	cbz	r0, 80183e8 <rcl_timer_get_guard_condition+0x10>
 80183de:	68c3      	ldr	r3, [r0, #12]
 80183e0:	b10b      	cbz	r3, 80183e6 <rcl_timer_get_guard_condition+0xe>
 80183e2:	3008      	adds	r0, #8
 80183e4:	4770      	bx	lr
 80183e6:	4618      	mov	r0, r3
 80183e8:	4770      	bx	lr
 80183ea:	bf00      	nop

080183ec <rcl_validate_enclave_name_with_size>:
 80183ec:	2800      	cmp	r0, #0
 80183ee:	d049      	beq.n	8018484 <rcl_validate_enclave_name_with_size+0x98>
 80183f0:	b570      	push	{r4, r5, r6, lr}
 80183f2:	4615      	mov	r5, r2
 80183f4:	b0c2      	sub	sp, #264	; 0x108
 80183f6:	b19a      	cbz	r2, 8018420 <rcl_validate_enclave_name_with_size+0x34>
 80183f8:	461e      	mov	r6, r3
 80183fa:	466a      	mov	r2, sp
 80183fc:	ab01      	add	r3, sp, #4
 80183fe:	460c      	mov	r4, r1
 8018400:	f7f9 faa6 	bl	8011950 <rmw_validate_namespace_with_size>
 8018404:	4684      	mov	ip, r0
 8018406:	b9b8      	cbnz	r0, 8018438 <rcl_validate_enclave_name_with_size+0x4c>
 8018408:	9900      	ldr	r1, [sp, #0]
 801840a:	b171      	cbz	r1, 801842a <rcl_validate_enclave_name_with_size+0x3e>
 801840c:	2907      	cmp	r1, #7
 801840e:	d019      	beq.n	8018444 <rcl_validate_enclave_name_with_size+0x58>
 8018410:	1e4b      	subs	r3, r1, #1
 8018412:	2b05      	cmp	r3, #5
 8018414:	d83a      	bhi.n	801848c <rcl_validate_enclave_name_with_size+0xa0>
 8018416:	e8df f003 	tbb	[pc, r3]
 801841a:	2926      	.short	0x2926
 801841c:	1d322f2c 	.word	0x1d322f2c
 8018420:	f04f 0c0b 	mov.w	ip, #11
 8018424:	4660      	mov	r0, ip
 8018426:	b042      	add	sp, #264	; 0x108
 8018428:	bd70      	pop	{r4, r5, r6, pc}
 801842a:	2907      	cmp	r1, #7
 801842c:	d00a      	beq.n	8018444 <rcl_validate_enclave_name_with_size+0x58>
 801842e:	2300      	movs	r3, #0
 8018430:	4660      	mov	r0, ip
 8018432:	602b      	str	r3, [r5, #0]
 8018434:	b042      	add	sp, #264	; 0x108
 8018436:	bd70      	pop	{r4, r5, r6, pc}
 8018438:	f7ff f9f4 	bl	8017824 <rcl_convert_rmw_ret_to_rcl_ret>
 801843c:	4684      	mov	ip, r0
 801843e:	4660      	mov	r0, ip
 8018440:	b042      	add	sp, #264	; 0x108
 8018442:	bd70      	pop	{r4, r5, r6, pc}
 8018444:	2cff      	cmp	r4, #255	; 0xff
 8018446:	d9f2      	bls.n	801842e <rcl_validate_enclave_name_with_size+0x42>
 8018448:	6029      	str	r1, [r5, #0]
 801844a:	2e00      	cmp	r6, #0
 801844c:	d0ea      	beq.n	8018424 <rcl_validate_enclave_name_with_size+0x38>
 801844e:	23fe      	movs	r3, #254	; 0xfe
 8018450:	6033      	str	r3, [r6, #0]
 8018452:	e7e7      	b.n	8018424 <rcl_validate_enclave_name_with_size+0x38>
 8018454:	2306      	movs	r3, #6
 8018456:	602b      	str	r3, [r5, #0]
 8018458:	2e00      	cmp	r6, #0
 801845a:	d0e3      	beq.n	8018424 <rcl_validate_enclave_name_with_size+0x38>
 801845c:	9b01      	ldr	r3, [sp, #4]
 801845e:	4660      	mov	r0, ip
 8018460:	6033      	str	r3, [r6, #0]
 8018462:	b042      	add	sp, #264	; 0x108
 8018464:	bd70      	pop	{r4, r5, r6, pc}
 8018466:	2301      	movs	r3, #1
 8018468:	602b      	str	r3, [r5, #0]
 801846a:	e7f5      	b.n	8018458 <rcl_validate_enclave_name_with_size+0x6c>
 801846c:	2302      	movs	r3, #2
 801846e:	602b      	str	r3, [r5, #0]
 8018470:	e7f2      	b.n	8018458 <rcl_validate_enclave_name_with_size+0x6c>
 8018472:	2303      	movs	r3, #3
 8018474:	602b      	str	r3, [r5, #0]
 8018476:	e7ef      	b.n	8018458 <rcl_validate_enclave_name_with_size+0x6c>
 8018478:	2304      	movs	r3, #4
 801847a:	602b      	str	r3, [r5, #0]
 801847c:	e7ec      	b.n	8018458 <rcl_validate_enclave_name_with_size+0x6c>
 801847e:	2305      	movs	r3, #5
 8018480:	602b      	str	r3, [r5, #0]
 8018482:	e7e9      	b.n	8018458 <rcl_validate_enclave_name_with_size+0x6c>
 8018484:	f04f 0c0b 	mov.w	ip, #11
 8018488:	4660      	mov	r0, ip
 801848a:	4770      	bx	lr
 801848c:	460b      	mov	r3, r1
 801848e:	4a04      	ldr	r2, [pc, #16]	; (80184a0 <rcl_validate_enclave_name_with_size+0xb4>)
 8018490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018494:	a802      	add	r0, sp, #8
 8018496:	f7f9 f943 	bl	8011720 <rcutils_snprintf>
 801849a:	f04f 0c01 	mov.w	ip, #1
 801849e:	e7c1      	b.n	8018424 <rcl_validate_enclave_name_with_size+0x38>
 80184a0:	0801e448 	.word	0x0801e448

080184a4 <rcl_validate_enclave_name>:
 80184a4:	b168      	cbz	r0, 80184c2 <rcl_validate_enclave_name+0x1e>
 80184a6:	b570      	push	{r4, r5, r6, lr}
 80184a8:	460d      	mov	r5, r1
 80184aa:	4616      	mov	r6, r2
 80184ac:	4604      	mov	r4, r0
 80184ae:	f7e7 fed1 	bl	8000254 <strlen>
 80184b2:	4633      	mov	r3, r6
 80184b4:	4601      	mov	r1, r0
 80184b6:	462a      	mov	r2, r5
 80184b8:	4620      	mov	r0, r4
 80184ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80184be:	f7ff bf95 	b.w	80183ec <rcl_validate_enclave_name_with_size>
 80184c2:	200b      	movs	r0, #11
 80184c4:	4770      	bx	lr
 80184c6:	bf00      	nop

080184c8 <rcl_get_zero_initialized_wait_set>:
 80184c8:	b510      	push	{r4, lr}
 80184ca:	4c08      	ldr	r4, [pc, #32]	; (80184ec <rcl_get_zero_initialized_wait_set+0x24>)
 80184cc:	4686      	mov	lr, r0
 80184ce:	4684      	mov	ip, r0
 80184d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80184d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80184dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80184de:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80184e2:	6823      	ldr	r3, [r4, #0]
 80184e4:	4670      	mov	r0, lr
 80184e6:	f8cc 3000 	str.w	r3, [ip]
 80184ea:	bd10      	pop	{r4, pc}
 80184ec:	0801e4a8 	.word	0x0801e4a8

080184f0 <rcl_wait_set_is_valid>:
 80184f0:	b118      	cbz	r0, 80184fa <rcl_wait_set_is_valid+0xa>
 80184f2:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80184f4:	3800      	subs	r0, #0
 80184f6:	bf18      	it	ne
 80184f8:	2001      	movne	r0, #1
 80184fa:	4770      	bx	lr

080184fc <rcl_wait_set_fini>:
 80184fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018500:	b082      	sub	sp, #8
 8018502:	2800      	cmp	r0, #0
 8018504:	f000 8095 	beq.w	8018632 <rcl_wait_set_fini+0x136>
 8018508:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801850a:	4604      	mov	r4, r0
 801850c:	2e00      	cmp	r6, #0
 801850e:	f000 808c 	beq.w	801862a <rcl_wait_set_fini+0x12e>
 8018512:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 8018514:	f002 f9c0 	bl	801a898 <rmw_destroy_wait_set>
 8018518:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801851a:	1e06      	subs	r6, r0, #0
 801851c:	bf18      	it	ne
 801851e:	f44f 7661 	movne.w	r6, #900	; 0x384
 8018522:	2d00      	cmp	r5, #0
 8018524:	f000 8081 	beq.w	801862a <rcl_wait_set_fini+0x12e>
 8018528:	2700      	movs	r7, #0
 801852a:	6820      	ldr	r0, [r4, #0]
 801852c:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8018530:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8018532:	6067      	str	r7, [r4, #4]
 8018534:	602f      	str	r7, [r5, #0]
 8018536:	b120      	cbz	r0, 8018542 <rcl_wait_set_fini+0x46>
 8018538:	9101      	str	r1, [sp, #4]
 801853a:	47c0      	blx	r8
 801853c:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801853e:	9901      	ldr	r1, [sp, #4]
 8018540:	6027      	str	r7, [r4, #0]
 8018542:	68a8      	ldr	r0, [r5, #8]
 8018544:	b120      	cbz	r0, 8018550 <rcl_wait_set_fini+0x54>
 8018546:	47c0      	blx	r8
 8018548:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801854a:	2300      	movs	r3, #0
 801854c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8018550:	f04f 0800 	mov.w	r8, #0
 8018554:	68a0      	ldr	r0, [r4, #8]
 8018556:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8018558:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801855a:	f8c4 800c 	str.w	r8, [r4, #12]
 801855e:	f8c5 800c 	str.w	r8, [r5, #12]
 8018562:	b128      	cbz	r0, 8018570 <rcl_wait_set_fini+0x74>
 8018564:	47b8      	blx	r7
 8018566:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8018568:	f8c4 8008 	str.w	r8, [r4, #8]
 801856c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801856e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8018570:	f04f 0800 	mov.w	r8, #0
 8018574:	6968      	ldr	r0, [r5, #20]
 8018576:	f8c5 8010 	str.w	r8, [r5, #16]
 801857a:	b128      	cbz	r0, 8018588 <rcl_wait_set_fini+0x8c>
 801857c:	47b8      	blx	r7
 801857e:	f8c5 8014 	str.w	r8, [r5, #20]
 8018582:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8018584:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8018586:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8018588:	f04f 0800 	mov.w	r8, #0
 801858c:	6920      	ldr	r0, [r4, #16]
 801858e:	f8c4 8014 	str.w	r8, [r4, #20]
 8018592:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 8018596:	b128      	cbz	r0, 80185a4 <rcl_wait_set_fini+0xa8>
 8018598:	47b8      	blx	r7
 801859a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801859c:	f8c4 8010 	str.w	r8, [r4, #16]
 80185a0:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 80185a2:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80185a4:	f04f 0800 	mov.w	r8, #0
 80185a8:	69a0      	ldr	r0, [r4, #24]
 80185aa:	f8c4 801c 	str.w	r8, [r4, #28]
 80185ae:	f8c5 8018 	str.w	r8, [r5, #24]
 80185b2:	b128      	cbz	r0, 80185c0 <rcl_wait_set_fini+0xc4>
 80185b4:	9101      	str	r1, [sp, #4]
 80185b6:	47b8      	blx	r7
 80185b8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80185ba:	9901      	ldr	r1, [sp, #4]
 80185bc:	f8c4 8018 	str.w	r8, [r4, #24]
 80185c0:	6a28      	ldr	r0, [r5, #32]
 80185c2:	b120      	cbz	r0, 80185ce <rcl_wait_set_fini+0xd2>
 80185c4:	47b8      	blx	r7
 80185c6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80185c8:	2300      	movs	r3, #0
 80185ca:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80185ce:	2700      	movs	r7, #0
 80185d0:	6a20      	ldr	r0, [r4, #32]
 80185d2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80185d6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80185d8:	6267      	str	r7, [r4, #36]	; 0x24
 80185da:	626f      	str	r7, [r5, #36]	; 0x24
 80185dc:	b120      	cbz	r0, 80185e8 <rcl_wait_set_fini+0xec>
 80185de:	9101      	str	r1, [sp, #4]
 80185e0:	47c0      	blx	r8
 80185e2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80185e4:	9901      	ldr	r1, [sp, #4]
 80185e6:	6227      	str	r7, [r4, #32]
 80185e8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80185ea:	b120      	cbz	r0, 80185f6 <rcl_wait_set_fini+0xfa>
 80185ec:	47c0      	blx	r8
 80185ee:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80185f0:	2300      	movs	r3, #0
 80185f2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80185f6:	2700      	movs	r7, #0
 80185f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80185fa:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80185fe:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8018600:	62e7      	str	r7, [r4, #44]	; 0x2c
 8018602:	632f      	str	r7, [r5, #48]	; 0x30
 8018604:	b120      	cbz	r0, 8018610 <rcl_wait_set_fini+0x114>
 8018606:	9101      	str	r1, [sp, #4]
 8018608:	47c0      	blx	r8
 801860a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801860c:	9901      	ldr	r1, [sp, #4]
 801860e:	62a7      	str	r7, [r4, #40]	; 0x28
 8018610:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 8018612:	b120      	cbz	r0, 801861e <rcl_wait_set_fini+0x122>
 8018614:	47c0      	blx	r8
 8018616:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8018618:	2300      	movs	r3, #0
 801861a:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 801861e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8018620:	4628      	mov	r0, r5
 8018622:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8018624:	4798      	blx	r3
 8018626:	2300      	movs	r3, #0
 8018628:	6323      	str	r3, [r4, #48]	; 0x30
 801862a:	4630      	mov	r0, r6
 801862c:	b002      	add	sp, #8
 801862e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018632:	260b      	movs	r6, #11
 8018634:	4630      	mov	r0, r6
 8018636:	b002      	add	sp, #8
 8018638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801863c <rcl_wait_set_add_subscription>:
 801863c:	b318      	cbz	r0, 8018686 <rcl_wait_set_add_subscription+0x4a>
 801863e:	b538      	push	{r3, r4, r5, lr}
 8018640:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018642:	4604      	mov	r4, r0
 8018644:	b30b      	cbz	r3, 801868a <rcl_wait_set_add_subscription+0x4e>
 8018646:	b319      	cbz	r1, 8018690 <rcl_wait_set_add_subscription+0x54>
 8018648:	681d      	ldr	r5, [r3, #0]
 801864a:	6840      	ldr	r0, [r0, #4]
 801864c:	4285      	cmp	r5, r0
 801864e:	d217      	bcs.n	8018680 <rcl_wait_set_add_subscription+0x44>
 8018650:	1c68      	adds	r0, r5, #1
 8018652:	6018      	str	r0, [r3, #0]
 8018654:	6823      	ldr	r3, [r4, #0]
 8018656:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801865a:	b102      	cbz	r2, 801865e <rcl_wait_set_add_subscription+0x22>
 801865c:	6015      	str	r5, [r2, #0]
 801865e:	4608      	mov	r0, r1
 8018660:	f7f7 ff30 	bl	80104c4 <rcl_subscription_get_rmw_handle>
 8018664:	b150      	cbz	r0, 801867c <rcl_wait_set_add_subscription+0x40>
 8018666:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018668:	6842      	ldr	r2, [r0, #4]
 801866a:	2000      	movs	r0, #0
 801866c:	689b      	ldr	r3, [r3, #8]
 801866e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018672:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018674:	6853      	ldr	r3, [r2, #4]
 8018676:	3301      	adds	r3, #1
 8018678:	6053      	str	r3, [r2, #4]
 801867a:	bd38      	pop	{r3, r4, r5, pc}
 801867c:	2001      	movs	r0, #1
 801867e:	bd38      	pop	{r3, r4, r5, pc}
 8018680:	f240 3086 	movw	r0, #902	; 0x386
 8018684:	bd38      	pop	{r3, r4, r5, pc}
 8018686:	200b      	movs	r0, #11
 8018688:	4770      	bx	lr
 801868a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801868e:	bd38      	pop	{r3, r4, r5, pc}
 8018690:	200b      	movs	r0, #11
 8018692:	bd38      	pop	{r3, r4, r5, pc}

08018694 <rcl_wait_set_clear>:
 8018694:	2800      	cmp	r0, #0
 8018696:	d074      	beq.n	8018782 <rcl_wait_set_clear+0xee>
 8018698:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801869a:	b510      	push	{r4, lr}
 801869c:	4604      	mov	r4, r0
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d071      	beq.n	8018786 <rcl_wait_set_clear+0xf2>
 80186a2:	6800      	ldr	r0, [r0, #0]
 80186a4:	b138      	cbz	r0, 80186b6 <rcl_wait_set_clear+0x22>
 80186a6:	6862      	ldr	r2, [r4, #4]
 80186a8:	2100      	movs	r1, #0
 80186aa:	0092      	lsls	r2, r2, #2
 80186ac:	f003 feae 	bl	801c40c <memset>
 80186b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80186b2:	2200      	movs	r2, #0
 80186b4:	601a      	str	r2, [r3, #0]
 80186b6:	68a0      	ldr	r0, [r4, #8]
 80186b8:	b138      	cbz	r0, 80186ca <rcl_wait_set_clear+0x36>
 80186ba:	68e2      	ldr	r2, [r4, #12]
 80186bc:	2100      	movs	r1, #0
 80186be:	0092      	lsls	r2, r2, #2
 80186c0:	f003 fea4 	bl	801c40c <memset>
 80186c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80186c6:	2200      	movs	r2, #0
 80186c8:	60da      	str	r2, [r3, #12]
 80186ca:	69a0      	ldr	r0, [r4, #24]
 80186cc:	b138      	cbz	r0, 80186de <rcl_wait_set_clear+0x4a>
 80186ce:	69e2      	ldr	r2, [r4, #28]
 80186d0:	2100      	movs	r1, #0
 80186d2:	0092      	lsls	r2, r2, #2
 80186d4:	f003 fe9a 	bl	801c40c <memset>
 80186d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80186da:	2200      	movs	r2, #0
 80186dc:	619a      	str	r2, [r3, #24]
 80186de:	6a20      	ldr	r0, [r4, #32]
 80186e0:	b138      	cbz	r0, 80186f2 <rcl_wait_set_clear+0x5e>
 80186e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80186e4:	2100      	movs	r1, #0
 80186e6:	0092      	lsls	r2, r2, #2
 80186e8:	f003 fe90 	bl	801c40c <memset>
 80186ec:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80186ee:	2200      	movs	r2, #0
 80186f0:	625a      	str	r2, [r3, #36]	; 0x24
 80186f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80186f4:	b138      	cbz	r0, 8018706 <rcl_wait_set_clear+0x72>
 80186f6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80186f8:	2100      	movs	r1, #0
 80186fa:	0092      	lsls	r2, r2, #2
 80186fc:	f003 fe86 	bl	801c40c <memset>
 8018700:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018702:	2200      	movs	r2, #0
 8018704:	631a      	str	r2, [r3, #48]	; 0x30
 8018706:	6920      	ldr	r0, [r4, #16]
 8018708:	b138      	cbz	r0, 801871a <rcl_wait_set_clear+0x86>
 801870a:	6962      	ldr	r2, [r4, #20]
 801870c:	2100      	movs	r1, #0
 801870e:	0092      	lsls	r2, r2, #2
 8018710:	f003 fe7c 	bl	801c40c <memset>
 8018714:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018716:	2200      	movs	r2, #0
 8018718:	641a      	str	r2, [r3, #64]	; 0x40
 801871a:	6898      	ldr	r0, [r3, #8]
 801871c:	b138      	cbz	r0, 801872e <rcl_wait_set_clear+0x9a>
 801871e:	685a      	ldr	r2, [r3, #4]
 8018720:	2100      	movs	r1, #0
 8018722:	0092      	lsls	r2, r2, #2
 8018724:	f003 fe72 	bl	801c40c <memset>
 8018728:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801872a:	2200      	movs	r2, #0
 801872c:	605a      	str	r2, [r3, #4]
 801872e:	6958      	ldr	r0, [r3, #20]
 8018730:	b138      	cbz	r0, 8018742 <rcl_wait_set_clear+0xae>
 8018732:	691a      	ldr	r2, [r3, #16]
 8018734:	2100      	movs	r1, #0
 8018736:	0092      	lsls	r2, r2, #2
 8018738:	f003 fe68 	bl	801c40c <memset>
 801873c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801873e:	2200      	movs	r2, #0
 8018740:	611a      	str	r2, [r3, #16]
 8018742:	6a18      	ldr	r0, [r3, #32]
 8018744:	b138      	cbz	r0, 8018756 <rcl_wait_set_clear+0xc2>
 8018746:	69da      	ldr	r2, [r3, #28]
 8018748:	2100      	movs	r1, #0
 801874a:	0092      	lsls	r2, r2, #2
 801874c:	f003 fe5e 	bl	801c40c <memset>
 8018750:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018752:	2200      	movs	r2, #0
 8018754:	61da      	str	r2, [r3, #28]
 8018756:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8018758:	b138      	cbz	r0, 801876a <rcl_wait_set_clear+0xd6>
 801875a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801875c:	2100      	movs	r1, #0
 801875e:	0092      	lsls	r2, r2, #2
 8018760:	f003 fe54 	bl	801c40c <memset>
 8018764:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018766:	2200      	movs	r2, #0
 8018768:	629a      	str	r2, [r3, #40]	; 0x28
 801876a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 801876c:	b140      	cbz	r0, 8018780 <rcl_wait_set_clear+0xec>
 801876e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8018770:	2100      	movs	r1, #0
 8018772:	0092      	lsls	r2, r2, #2
 8018774:	f003 fe4a 	bl	801c40c <memset>
 8018778:	2300      	movs	r3, #0
 801877a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801877c:	4618      	mov	r0, r3
 801877e:	6353      	str	r3, [r2, #52]	; 0x34
 8018780:	bd10      	pop	{r4, pc}
 8018782:	200b      	movs	r0, #11
 8018784:	4770      	bx	lr
 8018786:	f44f 7061 	mov.w	r0, #900	; 0x384
 801878a:	bd10      	pop	{r4, pc}

0801878c <rcl_wait_set_resize>:
 801878c:	2800      	cmp	r0, #0
 801878e:	f000 8180 	beq.w	8018a92 <rcl_wait_set_resize+0x306>
 8018792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018796:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8018798:	b083      	sub	sp, #12
 801879a:	4605      	mov	r5, r0
 801879c:	2c00      	cmp	r4, #0
 801879e:	f000 817a 	beq.w	8018a96 <rcl_wait_set_resize+0x30a>
 80187a2:	f04f 0900 	mov.w	r9, #0
 80187a6:	461f      	mov	r7, r3
 80187a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80187ac:	4688      	mov	r8, r1
 80187ae:	4616      	mov	r6, r2
 80187b0:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 80187b4:	f8c0 9004 	str.w	r9, [r0, #4]
 80187b8:	f8c4 9000 	str.w	r9, [r4]
 80187bc:	2900      	cmp	r1, #0
 80187be:	f000 80bf 	beq.w	8018940 <rcl_wait_set_resize+0x1b4>
 80187c2:	008c      	lsls	r4, r1, #2
 80187c4:	4652      	mov	r2, sl
 80187c6:	6800      	ldr	r0, [r0, #0]
 80187c8:	4621      	mov	r1, r4
 80187ca:	9301      	str	r3, [sp, #4]
 80187cc:	4798      	blx	r3
 80187ce:	9b01      	ldr	r3, [sp, #4]
 80187d0:	6028      	str	r0, [r5, #0]
 80187d2:	2800      	cmp	r0, #0
 80187d4:	f000 80f6 	beq.w	80189c4 <rcl_wait_set_resize+0x238>
 80187d8:	4622      	mov	r2, r4
 80187da:	4649      	mov	r1, r9
 80187dc:	9301      	str	r3, [sp, #4]
 80187de:	f003 fe15 	bl	801c40c <memset>
 80187e2:	f8c5 8004 	str.w	r8, [r5, #4]
 80187e6:	4652      	mov	r2, sl
 80187e8:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 80187ec:	4621      	mov	r1, r4
 80187ee:	9b01      	ldr	r3, [sp, #4]
 80187f0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80187f4:	f8c8 9004 	str.w	r9, [r8, #4]
 80187f8:	4798      	blx	r3
 80187fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80187fc:	f8c8 0008 	str.w	r0, [r8, #8]
 8018800:	689b      	ldr	r3, [r3, #8]
 8018802:	2b00      	cmp	r3, #0
 8018804:	f000 814a 	beq.w	8018a9c <rcl_wait_set_resize+0x310>
 8018808:	4622      	mov	r2, r4
 801880a:	4649      	mov	r1, r9
 801880c:	4618      	mov	r0, r3
 801880e:	f003 fdfd 	bl	801c40c <memset>
 8018812:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8018814:	f04f 0800 	mov.w	r8, #0
 8018818:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801881c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8018820:	f8c5 800c 	str.w	r8, [r5, #12]
 8018824:	f8c4 800c 	str.w	r8, [r4, #12]
 8018828:	2e00      	cmp	r6, #0
 801882a:	f040 809b 	bne.w	8018964 <rcl_wait_set_resize+0x1d8>
 801882e:	68a8      	ldr	r0, [r5, #8]
 8018830:	b128      	cbz	r0, 801883e <rcl_wait_set_resize+0xb2>
 8018832:	4649      	mov	r1, r9
 8018834:	4790      	blx	r2
 8018836:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8018838:	60ae      	str	r6, [r5, #8]
 801883a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801883e:	f04f 0800 	mov.w	r8, #0
 8018842:	19f6      	adds	r6, r6, r7
 8018844:	f8c4 8010 	str.w	r8, [r4, #16]
 8018848:	f040 80a2 	bne.w	8018990 <rcl_wait_set_resize+0x204>
 801884c:	6960      	ldr	r0, [r4, #20]
 801884e:	b130      	cbz	r0, 801885e <rcl_wait_set_resize+0xd2>
 8018850:	4649      	mov	r1, r9
 8018852:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8018854:	4798      	blx	r3
 8018856:	6166      	str	r6, [r4, #20]
 8018858:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801885a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801885e:	2600      	movs	r6, #0
 8018860:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8018864:	616e      	str	r6, [r5, #20]
 8018866:	6426      	str	r6, [r4, #64]	; 0x40
 8018868:	2f00      	cmp	r7, #0
 801886a:	f040 80af 	bne.w	80189cc <rcl_wait_set_resize+0x240>
 801886e:	6928      	ldr	r0, [r5, #16]
 8018870:	b138      	cbz	r0, 8018882 <rcl_wait_set_resize+0xf6>
 8018872:	4649      	mov	r1, r9
 8018874:	47d0      	blx	sl
 8018876:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8018878:	612f      	str	r7, [r5, #16]
 801887a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 801887e:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8018882:	2600      	movs	r6, #0
 8018884:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018886:	61ee      	str	r6, [r5, #28]
 8018888:	61a6      	str	r6, [r4, #24]
 801888a:	2b00      	cmp	r3, #0
 801888c:	f040 8093 	bne.w	80189b6 <rcl_wait_set_resize+0x22a>
 8018890:	69a8      	ldr	r0, [r5, #24]
 8018892:	b120      	cbz	r0, 801889e <rcl_wait_set_resize+0x112>
 8018894:	4649      	mov	r1, r9
 8018896:	47d0      	blx	sl
 8018898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801889a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801889c:	61ab      	str	r3, [r5, #24]
 801889e:	6a20      	ldr	r0, [r4, #32]
 80188a0:	b128      	cbz	r0, 80188ae <rcl_wait_set_resize+0x122>
 80188a2:	4649      	mov	r1, r9
 80188a4:	47d0      	blx	sl
 80188a6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80188a8:	2300      	movs	r3, #0
 80188aa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80188ae:	2600      	movs	r6, #0
 80188b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188b2:	6da7      	ldr	r7, [r4, #88]	; 0x58
 80188b4:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 80188b8:	626e      	str	r6, [r5, #36]	; 0x24
 80188ba:	6266      	str	r6, [r4, #36]	; 0x24
 80188bc:	2b00      	cmp	r3, #0
 80188be:	f000 8098 	beq.w	80189f2 <rcl_wait_set_resize+0x266>
 80188c2:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80188c6:	463a      	mov	r2, r7
 80188c8:	6a28      	ldr	r0, [r5, #32]
 80188ca:	4651      	mov	r1, sl
 80188cc:	47c8      	blx	r9
 80188ce:	6228      	str	r0, [r5, #32]
 80188d0:	2800      	cmp	r0, #0
 80188d2:	d077      	beq.n	80189c4 <rcl_wait_set_resize+0x238>
 80188d4:	4652      	mov	r2, sl
 80188d6:	4631      	mov	r1, r6
 80188d8:	f003 fd98 	bl	801c40c <memset>
 80188dc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80188de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80188e0:	463a      	mov	r2, r7
 80188e2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80188e4:	4651      	mov	r1, sl
 80188e6:	626b      	str	r3, [r5, #36]	; 0x24
 80188e8:	62a6      	str	r6, [r4, #40]	; 0x28
 80188ea:	47c8      	blx	r9
 80188ec:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80188ee:	62e0      	str	r0, [r4, #44]	; 0x2c
 80188f0:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80188f2:	2c00      	cmp	r4, #0
 80188f4:	f000 80f2 	beq.w	8018adc <rcl_wait_set_resize+0x350>
 80188f8:	4620      	mov	r0, r4
 80188fa:	4652      	mov	r2, sl
 80188fc:	4631      	mov	r1, r6
 80188fe:	f003 fd85 	bl	801c40c <memset>
 8018902:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8018904:	2600      	movs	r6, #0
 8018906:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018908:	6da7      	ldr	r7, [r4, #88]	; 0x58
 801890a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 801890e:	62ee      	str	r6, [r5, #44]	; 0x2c
 8018910:	6326      	str	r6, [r4, #48]	; 0x30
 8018912:	2b00      	cmp	r3, #0
 8018914:	f040 8097 	bne.w	8018a46 <rcl_wait_set_resize+0x2ba>
 8018918:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 801891a:	b120      	cbz	r0, 8018926 <rcl_wait_set_resize+0x19a>
 801891c:	4639      	mov	r1, r7
 801891e:	47c0      	blx	r8
 8018920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018922:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8018924:	62ab      	str	r3, [r5, #40]	; 0x28
 8018926:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8018928:	2800      	cmp	r0, #0
 801892a:	d04c      	beq.n	80189c6 <rcl_wait_set_resize+0x23a>
 801892c:	4639      	mov	r1, r7
 801892e:	47c0      	blx	r8
 8018930:	2300      	movs	r3, #0
 8018932:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8018934:	4618      	mov	r0, r3
 8018936:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 801893a:	b003      	add	sp, #12
 801893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018940:	6800      	ldr	r0, [r0, #0]
 8018942:	b120      	cbz	r0, 801894e <rcl_wait_set_resize+0x1c2>
 8018944:	4651      	mov	r1, sl
 8018946:	47d8      	blx	fp
 8018948:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801894a:	f8c5 8000 	str.w	r8, [r5]
 801894e:	68a0      	ldr	r0, [r4, #8]
 8018950:	2800      	cmp	r0, #0
 8018952:	f43f af5f 	beq.w	8018814 <rcl_wait_set_resize+0x88>
 8018956:	4651      	mov	r1, sl
 8018958:	47d8      	blx	fp
 801895a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 801895c:	2300      	movs	r3, #0
 801895e:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8018962:	e757      	b.n	8018814 <rcl_wait_set_resize+0x88>
 8018964:	00b4      	lsls	r4, r6, #2
 8018966:	464a      	mov	r2, r9
 8018968:	68a8      	ldr	r0, [r5, #8]
 801896a:	4621      	mov	r1, r4
 801896c:	4798      	blx	r3
 801896e:	60a8      	str	r0, [r5, #8]
 8018970:	b340      	cbz	r0, 80189c4 <rcl_wait_set_resize+0x238>
 8018972:	4622      	mov	r2, r4
 8018974:	4641      	mov	r1, r8
 8018976:	f003 fd49 	bl	801c40c <memset>
 801897a:	f04f 0800 	mov.w	r8, #0
 801897e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8018980:	60ee      	str	r6, [r5, #12]
 8018982:	19f6      	adds	r6, r6, r7
 8018984:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8018988:	f8c4 8010 	str.w	r8, [r4, #16]
 801898c:	f43f af5e 	beq.w	801884c <rcl_wait_set_resize+0xc0>
 8018990:	00b6      	lsls	r6, r6, #2
 8018992:	464a      	mov	r2, r9
 8018994:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8018996:	6960      	ldr	r0, [r4, #20]
 8018998:	4631      	mov	r1, r6
 801899a:	4798      	blx	r3
 801899c:	4681      	mov	r9, r0
 801899e:	6160      	str	r0, [r4, #20]
 80189a0:	2800      	cmp	r0, #0
 80189a2:	f000 8084 	beq.w	8018aae <rcl_wait_set_resize+0x322>
 80189a6:	4632      	mov	r2, r6
 80189a8:	4641      	mov	r1, r8
 80189aa:	f003 fd2f 	bl	801c40c <memset>
 80189ae:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80189b0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80189b4:	e753      	b.n	801885e <rcl_wait_set_resize+0xd2>
 80189b6:	009c      	lsls	r4, r3, #2
 80189b8:	464a      	mov	r2, r9
 80189ba:	69a8      	ldr	r0, [r5, #24]
 80189bc:	4621      	mov	r1, r4
 80189be:	47c0      	blx	r8
 80189c0:	61a8      	str	r0, [r5, #24]
 80189c2:	bb40      	cbnz	r0, 8018a16 <rcl_wait_set_resize+0x28a>
 80189c4:	200a      	movs	r0, #10
 80189c6:	b003      	add	sp, #12
 80189c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189cc:	00bc      	lsls	r4, r7, #2
 80189ce:	464a      	mov	r2, r9
 80189d0:	6928      	ldr	r0, [r5, #16]
 80189d2:	4621      	mov	r1, r4
 80189d4:	47c0      	blx	r8
 80189d6:	6128      	str	r0, [r5, #16]
 80189d8:	2800      	cmp	r0, #0
 80189da:	d0f3      	beq.n	80189c4 <rcl_wait_set_resize+0x238>
 80189dc:	4622      	mov	r2, r4
 80189de:	4631      	mov	r1, r6
 80189e0:	f003 fd14 	bl	801c40c <memset>
 80189e4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80189e6:	616f      	str	r7, [r5, #20]
 80189e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80189ec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 80189f0:	e747      	b.n	8018882 <rcl_wait_set_resize+0xf6>
 80189f2:	6a28      	ldr	r0, [r5, #32]
 80189f4:	b120      	cbz	r0, 8018a00 <rcl_wait_set_resize+0x274>
 80189f6:	4639      	mov	r1, r7
 80189f8:	47c0      	blx	r8
 80189fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80189fc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 80189fe:	622b      	str	r3, [r5, #32]
 8018a00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8018a02:	2800      	cmp	r0, #0
 8018a04:	f43f af7e 	beq.w	8018904 <rcl_wait_set_resize+0x178>
 8018a08:	4639      	mov	r1, r7
 8018a0a:	47c0      	blx	r8
 8018a0c:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8018a0e:	2300      	movs	r3, #0
 8018a10:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8018a14:	e776      	b.n	8018904 <rcl_wait_set_resize+0x178>
 8018a16:	4622      	mov	r2, r4
 8018a18:	4631      	mov	r1, r6
 8018a1a:	f003 fcf7 	bl	801c40c <memset>
 8018a1e:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8018a20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018a22:	464a      	mov	r2, r9
 8018a24:	6a38      	ldr	r0, [r7, #32]
 8018a26:	4621      	mov	r1, r4
 8018a28:	61eb      	str	r3, [r5, #28]
 8018a2a:	61fe      	str	r6, [r7, #28]
 8018a2c:	47c0      	blx	r8
 8018a2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018a30:	6238      	str	r0, [r7, #32]
 8018a32:	6a1f      	ldr	r7, [r3, #32]
 8018a34:	2f00      	cmp	r7, #0
 8018a36:	d04a      	beq.n	8018ace <rcl_wait_set_resize+0x342>
 8018a38:	4622      	mov	r2, r4
 8018a3a:	4631      	mov	r1, r6
 8018a3c:	4638      	mov	r0, r7
 8018a3e:	f003 fce5 	bl	801c40c <memset>
 8018a42:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8018a44:	e733      	b.n	80188ae <rcl_wait_set_resize+0x122>
 8018a46:	009c      	lsls	r4, r3, #2
 8018a48:	463a      	mov	r2, r7
 8018a4a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8018a4c:	4621      	mov	r1, r4
 8018a4e:	47c8      	blx	r9
 8018a50:	62a8      	str	r0, [r5, #40]	; 0x28
 8018a52:	2800      	cmp	r0, #0
 8018a54:	d0b6      	beq.n	80189c4 <rcl_wait_set_resize+0x238>
 8018a56:	4622      	mov	r2, r4
 8018a58:	4631      	mov	r1, r6
 8018a5a:	f003 fcd7 	bl	801c40c <memset>
 8018a5e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8018a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a64:	463a      	mov	r2, r7
 8018a66:	4621      	mov	r1, r4
 8018a68:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8018a6c:	62eb      	str	r3, [r5, #44]	; 0x2c
 8018a6e:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8018a72:	47c8      	blx	r9
 8018a74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018a76:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8018a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d034      	beq.n	8018aea <rcl_wait_set_resize+0x35e>
 8018a80:	4622      	mov	r2, r4
 8018a82:	4631      	mov	r1, r6
 8018a84:	4618      	mov	r0, r3
 8018a86:	f003 fcc1 	bl	801c40c <memset>
 8018a8a:	4630      	mov	r0, r6
 8018a8c:	b003      	add	sp, #12
 8018a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a92:	200b      	movs	r0, #11
 8018a94:	4770      	bx	lr
 8018a96:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018a9a:	e794      	b.n	80189c6 <rcl_wait_set_resize+0x23a>
 8018a9c:	6828      	ldr	r0, [r5, #0]
 8018a9e:	4651      	mov	r1, sl
 8018aa0:	9301      	str	r3, [sp, #4]
 8018aa2:	47d8      	blx	fp
 8018aa4:	9b01      	ldr	r3, [sp, #4]
 8018aa6:	200a      	movs	r0, #10
 8018aa8:	e9c5 3300 	strd	r3, r3, [r5]
 8018aac:	e78b      	b.n	80189c6 <rcl_wait_set_resize+0x23a>
 8018aae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018ab0:	68a8      	ldr	r0, [r5, #8]
 8018ab2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8018ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ab6:	4798      	blx	r3
 8018ab8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018aba:	6928      	ldr	r0, [r5, #16]
 8018abc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018abe:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8018ac0:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8018ac4:	4790      	blx	r2
 8018ac6:	200a      	movs	r0, #10
 8018ac8:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8018acc:	e77b      	b.n	80189c6 <rcl_wait_set_resize+0x23a>
 8018ace:	69a8      	ldr	r0, [r5, #24]
 8018ad0:	4649      	mov	r1, r9
 8018ad2:	47d0      	blx	sl
 8018ad4:	200a      	movs	r0, #10
 8018ad6:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8018ada:	e774      	b.n	80189c6 <rcl_wait_set_resize+0x23a>
 8018adc:	6a28      	ldr	r0, [r5, #32]
 8018ade:	4639      	mov	r1, r7
 8018ae0:	47c0      	blx	r8
 8018ae2:	200a      	movs	r0, #10
 8018ae4:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8018ae8:	e76d      	b.n	80189c6 <rcl_wait_set_resize+0x23a>
 8018aea:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8018aec:	4639      	mov	r1, r7
 8018aee:	9301      	str	r3, [sp, #4]
 8018af0:	47c0      	blx	r8
 8018af2:	9b01      	ldr	r3, [sp, #4]
 8018af4:	200a      	movs	r0, #10
 8018af6:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8018afa:	e764      	b.n	80189c6 <rcl_wait_set_resize+0x23a>

08018afc <rcl_wait_set_init>:
 8018afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b00:	b085      	sub	sp, #20
 8018b02:	4605      	mov	r5, r0
 8018b04:	460e      	mov	r6, r1
 8018b06:	4617      	mov	r7, r2
 8018b08:	a812      	add	r0, sp, #72	; 0x48
 8018b0a:	4698      	mov	r8, r3
 8018b0c:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8018b10:	f7f8 fcc0 	bl	8011494 <rcutils_allocator_is_valid>
 8018b14:	2d00      	cmp	r5, #0
 8018b16:	d072      	beq.n	8018bfe <rcl_wait_set_init+0x102>
 8018b18:	f080 0001 	eor.w	r0, r0, #1
 8018b1c:	b2c0      	uxtb	r0, r0
 8018b1e:	2800      	cmp	r0, #0
 8018b20:	d16d      	bne.n	8018bfe <rcl_wait_set_init+0x102>
 8018b22:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8018b26:	f1ba 0f00 	cmp.w	sl, #0
 8018b2a:	d004      	beq.n	8018b36 <rcl_wait_set_init+0x3a>
 8018b2c:	2464      	movs	r4, #100	; 0x64
 8018b2e:	4620      	mov	r0, r4
 8018b30:	b005      	add	sp, #20
 8018b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b36:	f1b9 0f00 	cmp.w	r9, #0
 8018b3a:	d060      	beq.n	8018bfe <rcl_wait_set_init+0x102>
 8018b3c:	4648      	mov	r0, r9
 8018b3e:	f7fe fe8f 	bl	8017860 <rcl_context_is_valid>
 8018b42:	2800      	cmp	r0, #0
 8018b44:	d068      	beq.n	8018c18 <rcl_wait_set_init+0x11c>
 8018b46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b48:	205c      	movs	r0, #92	; 0x5c
 8018b4a:	9916      	ldr	r1, [sp, #88]	; 0x58
 8018b4c:	4798      	blx	r3
 8018b4e:	6328      	str	r0, [r5, #48]	; 0x30
 8018b50:	2800      	cmp	r0, #0
 8018b52:	d063      	beq.n	8018c1c <rcl_wait_set_init+0x120>
 8018b54:	225c      	movs	r2, #92	; 0x5c
 8018b56:	4651      	mov	r1, sl
 8018b58:	f003 fc58 	bl	801c40c <memset>
 8018b5c:	ac12      	add	r4, sp, #72	; 0x48
 8018b5e:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8018b62:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8018b66:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8018b6a:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8018b6e:	eb03 0e02 	add.w	lr, r3, r2
 8018b72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b74:	f8d9 9000 	ldr.w	r9, [r9]
 8018b78:	449e      	add	lr, r3
 8018b7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018b7c:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8018b80:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8018b84:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8018b88:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8018b8c:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8018b90:	44be      	add	lr, r7
 8018b92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018b96:	6823      	ldr	r3, [r4, #0]
 8018b98:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8018b9c:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8018ba0:	f8cc 3000 	str.w	r3, [ip]
 8018ba4:	f001 fe6e 	bl	801a884 <rmw_create_wait_set>
 8018ba8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018baa:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8018bae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018bb0:	b350      	cbz	r0, 8018c08 <rcl_wait_set_init+0x10c>
 8018bb2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8018bb4:	4643      	mov	r3, r8
 8018bb6:	463a      	mov	r2, r7
 8018bb8:	4631      	mov	r1, r6
 8018bba:	9402      	str	r4, [sp, #8]
 8018bbc:	4628      	mov	r0, r5
 8018bbe:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8018bc0:	9401      	str	r4, [sp, #4]
 8018bc2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018bc4:	9400      	str	r4, [sp, #0]
 8018bc6:	f7ff fde1 	bl	801878c <rcl_wait_set_resize>
 8018bca:	4604      	mov	r4, r0
 8018bcc:	2800      	cmp	r0, #0
 8018bce:	d0ae      	beq.n	8018b2e <rcl_wait_set_init+0x32>
 8018bd0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018bd2:	bb2b      	cbnz	r3, 8018c20 <rcl_wait_set_init+0x124>
 8018bd4:	2600      	movs	r6, #0
 8018bd6:	4628      	mov	r0, r5
 8018bd8:	4633      	mov	r3, r6
 8018bda:	4632      	mov	r2, r6
 8018bdc:	4631      	mov	r1, r6
 8018bde:	9600      	str	r6, [sp, #0]
 8018be0:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8018be4:	f7ff fdd2 	bl	801878c <rcl_wait_set_resize>
 8018be8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8018bea:	2800      	cmp	r0, #0
 8018bec:	d09f      	beq.n	8018b2e <rcl_wait_set_init+0x32>
 8018bee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8018bf0:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8018bf2:	4798      	blx	r3
 8018bf4:	4620      	mov	r0, r4
 8018bf6:	632e      	str	r6, [r5, #48]	; 0x30
 8018bf8:	b005      	add	sp, #20
 8018bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018bfe:	240b      	movs	r4, #11
 8018c00:	4620      	mov	r0, r4
 8018c02:	b005      	add	sp, #20
 8018c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c08:	2401      	movs	r4, #1
 8018c0a:	f001 fe45 	bl	801a898 <rmw_destroy_wait_set>
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	bf18      	it	ne
 8018c12:	f44f 7461 	movne.w	r4, #900	; 0x384
 8018c16:	e7dd      	b.n	8018bd4 <rcl_wait_set_init+0xd8>
 8018c18:	2465      	movs	r4, #101	; 0x65
 8018c1a:	e788      	b.n	8018b2e <rcl_wait_set_init+0x32>
 8018c1c:	240a      	movs	r4, #10
 8018c1e:	e786      	b.n	8018b2e <rcl_wait_set_init+0x32>
 8018c20:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8018c22:	e7f2      	b.n	8018c0a <rcl_wait_set_init+0x10e>

08018c24 <rcl_wait_set_add_guard_condition>:
 8018c24:	b318      	cbz	r0, 8018c6e <rcl_wait_set_add_guard_condition+0x4a>
 8018c26:	b538      	push	{r3, r4, r5, lr}
 8018c28:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018c2a:	4604      	mov	r4, r0
 8018c2c:	b30b      	cbz	r3, 8018c72 <rcl_wait_set_add_guard_condition+0x4e>
 8018c2e:	b319      	cbz	r1, 8018c78 <rcl_wait_set_add_guard_condition+0x54>
 8018c30:	68dd      	ldr	r5, [r3, #12]
 8018c32:	68c0      	ldr	r0, [r0, #12]
 8018c34:	4285      	cmp	r5, r0
 8018c36:	d217      	bcs.n	8018c68 <rcl_wait_set_add_guard_condition+0x44>
 8018c38:	1c68      	adds	r0, r5, #1
 8018c3a:	60d8      	str	r0, [r3, #12]
 8018c3c:	68a3      	ldr	r3, [r4, #8]
 8018c3e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018c42:	b102      	cbz	r2, 8018c46 <rcl_wait_set_add_guard_condition+0x22>
 8018c44:	6015      	str	r5, [r2, #0]
 8018c46:	4608      	mov	r0, r1
 8018c48:	f7fe ff18 	bl	8017a7c <rcl_guard_condition_get_rmw_handle>
 8018c4c:	b150      	cbz	r0, 8018c64 <rcl_wait_set_add_guard_condition+0x40>
 8018c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018c50:	6842      	ldr	r2, [r0, #4]
 8018c52:	2000      	movs	r0, #0
 8018c54:	695b      	ldr	r3, [r3, #20]
 8018c56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018c5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018c5c:	6913      	ldr	r3, [r2, #16]
 8018c5e:	3301      	adds	r3, #1
 8018c60:	6113      	str	r3, [r2, #16]
 8018c62:	bd38      	pop	{r3, r4, r5, pc}
 8018c64:	2001      	movs	r0, #1
 8018c66:	bd38      	pop	{r3, r4, r5, pc}
 8018c68:	f240 3086 	movw	r0, #902	; 0x386
 8018c6c:	bd38      	pop	{r3, r4, r5, pc}
 8018c6e:	200b      	movs	r0, #11
 8018c70:	4770      	bx	lr
 8018c72:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018c76:	bd38      	pop	{r3, r4, r5, pc}
 8018c78:	200b      	movs	r0, #11
 8018c7a:	bd38      	pop	{r3, r4, r5, pc}

08018c7c <rcl_wait_set_add_timer>:
 8018c7c:	b328      	cbz	r0, 8018cca <rcl_wait_set_add_timer+0x4e>
 8018c7e:	b538      	push	{r3, r4, r5, lr}
 8018c80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018c82:	4604      	mov	r4, r0
 8018c84:	b31b      	cbz	r3, 8018cce <rcl_wait_set_add_timer+0x52>
 8018c86:	b329      	cbz	r1, 8018cd4 <rcl_wait_set_add_timer+0x58>
 8018c88:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8018c8a:	6965      	ldr	r5, [r4, #20]
 8018c8c:	42a8      	cmp	r0, r5
 8018c8e:	d219      	bcs.n	8018cc4 <rcl_wait_set_add_timer+0x48>
 8018c90:	1c45      	adds	r5, r0, #1
 8018c92:	641d      	str	r5, [r3, #64]	; 0x40
 8018c94:	6923      	ldr	r3, [r4, #16]
 8018c96:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8018c9a:	b102      	cbz	r2, 8018c9e <rcl_wait_set_add_timer+0x22>
 8018c9c:	6010      	str	r0, [r2, #0]
 8018c9e:	4608      	mov	r0, r1
 8018ca0:	f7ff fb9a 	bl	80183d8 <rcl_timer_get_guard_condition>
 8018ca4:	b168      	cbz	r0, 8018cc2 <rcl_wait_set_add_timer+0x46>
 8018ca6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018ca8:	68e3      	ldr	r3, [r4, #12]
 8018caa:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8018cac:	3b01      	subs	r3, #1
 8018cae:	441d      	add	r5, r3
 8018cb0:	f7fe fee4 	bl	8017a7c <rcl_guard_condition_get_rmw_handle>
 8018cb4:	b180      	cbz	r0, 8018cd8 <rcl_wait_set_add_timer+0x5c>
 8018cb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018cb8:	6842      	ldr	r2, [r0, #4]
 8018cba:	2000      	movs	r0, #0
 8018cbc:	695b      	ldr	r3, [r3, #20]
 8018cbe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018cc2:	bd38      	pop	{r3, r4, r5, pc}
 8018cc4:	f240 3086 	movw	r0, #902	; 0x386
 8018cc8:	bd38      	pop	{r3, r4, r5, pc}
 8018cca:	200b      	movs	r0, #11
 8018ccc:	4770      	bx	lr
 8018cce:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018cd2:	bd38      	pop	{r3, r4, r5, pc}
 8018cd4:	200b      	movs	r0, #11
 8018cd6:	bd38      	pop	{r3, r4, r5, pc}
 8018cd8:	2001      	movs	r0, #1
 8018cda:	bd38      	pop	{r3, r4, r5, pc}

08018cdc <rcl_wait_set_add_client>:
 8018cdc:	b318      	cbz	r0, 8018d26 <rcl_wait_set_add_client+0x4a>
 8018cde:	b538      	push	{r3, r4, r5, lr}
 8018ce0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018ce2:	4604      	mov	r4, r0
 8018ce4:	b30b      	cbz	r3, 8018d2a <rcl_wait_set_add_client+0x4e>
 8018ce6:	b319      	cbz	r1, 8018d30 <rcl_wait_set_add_client+0x54>
 8018ce8:	699d      	ldr	r5, [r3, #24]
 8018cea:	69c0      	ldr	r0, [r0, #28]
 8018cec:	4285      	cmp	r5, r0
 8018cee:	d217      	bcs.n	8018d20 <rcl_wait_set_add_client+0x44>
 8018cf0:	1c68      	adds	r0, r5, #1
 8018cf2:	6198      	str	r0, [r3, #24]
 8018cf4:	69a3      	ldr	r3, [r4, #24]
 8018cf6:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018cfa:	b102      	cbz	r2, 8018cfe <rcl_wait_set_add_client+0x22>
 8018cfc:	6015      	str	r5, [r2, #0]
 8018cfe:	4608      	mov	r0, r1
 8018d00:	f7fe fd00 	bl	8017704 <rcl_client_get_rmw_handle>
 8018d04:	b150      	cbz	r0, 8018d1c <rcl_wait_set_add_client+0x40>
 8018d06:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018d08:	6842      	ldr	r2, [r0, #4]
 8018d0a:	2000      	movs	r0, #0
 8018d0c:	6a1b      	ldr	r3, [r3, #32]
 8018d0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018d12:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018d14:	69d3      	ldr	r3, [r2, #28]
 8018d16:	3301      	adds	r3, #1
 8018d18:	61d3      	str	r3, [r2, #28]
 8018d1a:	bd38      	pop	{r3, r4, r5, pc}
 8018d1c:	2001      	movs	r0, #1
 8018d1e:	bd38      	pop	{r3, r4, r5, pc}
 8018d20:	f240 3086 	movw	r0, #902	; 0x386
 8018d24:	bd38      	pop	{r3, r4, r5, pc}
 8018d26:	200b      	movs	r0, #11
 8018d28:	4770      	bx	lr
 8018d2a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018d2e:	bd38      	pop	{r3, r4, r5, pc}
 8018d30:	200b      	movs	r0, #11
 8018d32:	bd38      	pop	{r3, r4, r5, pc}

08018d34 <rcl_wait_set_add_service>:
 8018d34:	b318      	cbz	r0, 8018d7e <rcl_wait_set_add_service+0x4a>
 8018d36:	b538      	push	{r3, r4, r5, lr}
 8018d38:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018d3a:	4604      	mov	r4, r0
 8018d3c:	b30b      	cbz	r3, 8018d82 <rcl_wait_set_add_service+0x4e>
 8018d3e:	b319      	cbz	r1, 8018d88 <rcl_wait_set_add_service+0x54>
 8018d40:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8018d42:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8018d44:	4285      	cmp	r5, r0
 8018d46:	d217      	bcs.n	8018d78 <rcl_wait_set_add_service+0x44>
 8018d48:	1c68      	adds	r0, r5, #1
 8018d4a:	6258      	str	r0, [r3, #36]	; 0x24
 8018d4c:	6a23      	ldr	r3, [r4, #32]
 8018d4e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8018d52:	b102      	cbz	r2, 8018d56 <rcl_wait_set_add_service+0x22>
 8018d54:	6015      	str	r5, [r2, #0]
 8018d56:	4608      	mov	r0, r1
 8018d58:	f7f7 fa14 	bl	8010184 <rcl_service_get_rmw_handle>
 8018d5c:	b150      	cbz	r0, 8018d74 <rcl_wait_set_add_service+0x40>
 8018d5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018d60:	6842      	ldr	r2, [r0, #4]
 8018d62:	2000      	movs	r0, #0
 8018d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018d66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018d6a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018d6c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8018d6e:	3301      	adds	r3, #1
 8018d70:	6293      	str	r3, [r2, #40]	; 0x28
 8018d72:	bd38      	pop	{r3, r4, r5, pc}
 8018d74:	2001      	movs	r0, #1
 8018d76:	bd38      	pop	{r3, r4, r5, pc}
 8018d78:	f240 3086 	movw	r0, #902	; 0x386
 8018d7c:	bd38      	pop	{r3, r4, r5, pc}
 8018d7e:	200b      	movs	r0, #11
 8018d80:	4770      	bx	lr
 8018d82:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018d86:	bd38      	pop	{r3, r4, r5, pc}
 8018d88:	200b      	movs	r0, #11
 8018d8a:	bd38      	pop	{r3, r4, r5, pc}
 8018d8c:	0000      	movs	r0, r0
	...

08018d90 <rcl_wait>:
 8018d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d94:	ed2d 8b02 	vpush	{d8}
 8018d98:	b08d      	sub	sp, #52	; 0x34
 8018d9a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018d9e:	2800      	cmp	r0, #0
 8018da0:	f000 814f 	beq.w	8019042 <rcl_wait+0x2b2>
 8018da4:	6b06      	ldr	r6, [r0, #48]	; 0x30
 8018da6:	4605      	mov	r5, r0
 8018da8:	2e00      	cmp	r6, #0
 8018daa:	f000 811a 	beq.w	8018fe2 <rcl_wait+0x252>
 8018dae:	6843      	ldr	r3, [r0, #4]
 8018db0:	b983      	cbnz	r3, 8018dd4 <rcl_wait+0x44>
 8018db2:	68eb      	ldr	r3, [r5, #12]
 8018db4:	b973      	cbnz	r3, 8018dd4 <rcl_wait+0x44>
 8018db6:	696b      	ldr	r3, [r5, #20]
 8018db8:	b963      	cbnz	r3, 8018dd4 <rcl_wait+0x44>
 8018dba:	69eb      	ldr	r3, [r5, #28]
 8018dbc:	b953      	cbnz	r3, 8018dd4 <rcl_wait+0x44>
 8018dbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018dc0:	b943      	cbnz	r3, 8018dd4 <rcl_wait+0x44>
 8018dc2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8018dc4:	b933      	cbnz	r3, 8018dd4 <rcl_wait+0x44>
 8018dc6:	f240 3085 	movw	r0, #901	; 0x385
 8018dca:	b00d      	add	sp, #52	; 0x34
 8018dcc:	ecbd 8b02 	vpop	{d8}
 8018dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dd4:	9b04      	ldr	r3, [sp, #16]
 8018dd6:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8018dd8:	2b01      	cmp	r3, #1
 8018dda:	9b05      	ldr	r3, [sp, #20]
 8018ddc:	f173 0300 	sbcs.w	r3, r3, #0
 8018de0:	f2c0 80f8 	blt.w	8018fd4 <rcl_wait+0x244>
 8018de4:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8018de8:	2a00      	cmp	r2, #0
 8018dea:	f000 810f 	beq.w	801900c <rcl_wait+0x27c>
 8018dee:	2400      	movs	r4, #0
 8018df0:	4613      	mov	r3, r2
 8018df2:	f240 3921 	movw	r9, #801	; 0x321
 8018df6:	4632      	mov	r2, r6
 8018df8:	46a2      	mov	sl, r4
 8018dfa:	46a3      	mov	fp, r4
 8018dfc:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8019060 <rcl_wait+0x2d0>
 8018e00:	e014      	b.n	8018e2c <rcl_wait+0x9c>
 8018e02:	2800      	cmp	r0, #0
 8018e04:	d1e1      	bne.n	8018dca <rcl_wait+0x3a>
 8018e06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8018e0a:	4542      	cmp	r2, r8
 8018e0c:	eb73 0107 	sbcs.w	r1, r3, r7
 8018e10:	da03      	bge.n	8018e1a <rcl_wait+0x8a>
 8018e12:	4690      	mov	r8, r2
 8018e14:	461f      	mov	r7, r3
 8018e16:	f04f 0b01 	mov.w	fp, #1
 8018e1a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8018e1c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8018e1e:	3401      	adds	r4, #1
 8018e20:	f14a 0a00 	adc.w	sl, sl, #0
 8018e24:	429c      	cmp	r4, r3
 8018e26:	f17a 0100 	sbcs.w	r1, sl, #0
 8018e2a:	d228      	bcs.n	8018e7e <rcl_wait+0xee>
 8018e2c:	6928      	ldr	r0, [r5, #16]
 8018e2e:	a908      	add	r1, sp, #32
 8018e30:	00a6      	lsls	r6, r4, #2
 8018e32:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8018e36:	2800      	cmp	r0, #0
 8018e38:	d0f1      	beq.n	8018e1e <rcl_wait+0x8e>
 8018e3a:	68eb      	ldr	r3, [r5, #12]
 8018e3c:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8018e40:	4423      	add	r3, r4
 8018e42:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8018e46:	f1be 0f00 	cmp.w	lr, #0
 8018e4a:	d006      	beq.n	8018e5a <rcl_wait+0xca>
 8018e4c:	6913      	ldr	r3, [r2, #16]
 8018e4e:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8018e52:	3301      	adds	r3, #1
 8018e54:	6113      	str	r3, [r2, #16]
 8018e56:	692b      	ldr	r3, [r5, #16]
 8018e58:	5998      	ldr	r0, [r3, r6]
 8018e5a:	ed8d 8b08 	vstr	d8, [sp, #32]
 8018e5e:	f7ff fa89 	bl	8018374 <rcl_timer_get_time_until_next_call>
 8018e62:	4548      	cmp	r0, r9
 8018e64:	d1cd      	bne.n	8018e02 <rcl_wait+0x72>
 8018e66:	692b      	ldr	r3, [r5, #16]
 8018e68:	2200      	movs	r2, #0
 8018e6a:	3401      	adds	r4, #1
 8018e6c:	519a      	str	r2, [r3, r6]
 8018e6e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8018e70:	f14a 0a00 	adc.w	sl, sl, #0
 8018e74:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8018e76:	429c      	cmp	r4, r3
 8018e78:	f17a 0100 	sbcs.w	r1, sl, #0
 8018e7c:	d3d6      	bcc.n	8018e2c <rcl_wait+0x9c>
 8018e7e:	4659      	mov	r1, fp
 8018e80:	4616      	mov	r6, r2
 8018e82:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8018e86:	4313      	orrs	r3, r2
 8018e88:	f040 80b4 	bne.w	8018ff4 <rcl_wait+0x264>
 8018e8c:	2300      	movs	r3, #0
 8018e8e:	2200      	movs	r2, #0
 8018e90:	460c      	mov	r4, r1
 8018e92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8018e96:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018e9a:	ab08      	add	r3, sp, #32
 8018e9c:	9302      	str	r3, [sp, #8]
 8018e9e:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8018ea2:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 8018ea4:	f106 0110 	add.w	r1, r6, #16
 8018ea8:	9300      	str	r3, [sp, #0]
 8018eaa:	1d30      	adds	r0, r6, #4
 8018eac:	f106 031c 	add.w	r3, r6, #28
 8018eb0:	9201      	str	r2, [sp, #4]
 8018eb2:	f106 0228 	add.w	r2, r6, #40	; 0x28
 8018eb6:	f001 fb81 	bl	801a5bc <rmw_wait>
 8018eba:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018ebc:	4680      	mov	r8, r0
 8018ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018ec0:	b1e2      	cbz	r2, 8018efc <rcl_wait+0x16c>
 8018ec2:	f04f 0900 	mov.w	r9, #0
 8018ec6:	464f      	mov	r7, r9
 8018ec8:	692a      	ldr	r2, [r5, #16]
 8018eca:	f10d 011f 	add.w	r1, sp, #31
 8018ece:	ea4f 0689 	mov.w	r6, r9, lsl #2
 8018ed2:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 8018ed6:	b160      	cbz	r0, 8018ef2 <rcl_wait+0x162>
 8018ed8:	f88d 701f 	strb.w	r7, [sp, #31]
 8018edc:	f7ff fa0e 	bl	80182fc <rcl_timer_is_ready>
 8018ee0:	2800      	cmp	r0, #0
 8018ee2:	f47f af72 	bne.w	8018dca <rcl_wait+0x3a>
 8018ee6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8018eea:	b90b      	cbnz	r3, 8018ef0 <rcl_wait+0x160>
 8018eec:	692a      	ldr	r2, [r5, #16]
 8018eee:	5193      	str	r3, [r2, r6]
 8018ef0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018ef2:	f109 0901 	add.w	r9, r9, #1
 8018ef6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8018ef8:	454a      	cmp	r2, r9
 8018efa:	d8e5      	bhi.n	8018ec8 <rcl_wait+0x138>
 8018efc:	f038 0002 	bics.w	r0, r8, #2
 8018f00:	d176      	bne.n	8018ff0 <rcl_wait+0x260>
 8018f02:	686f      	ldr	r7, [r5, #4]
 8018f04:	b17f      	cbz	r7, 8018f26 <rcl_wait+0x196>
 8018f06:	4602      	mov	r2, r0
 8018f08:	e002      	b.n	8018f10 <rcl_wait+0x180>
 8018f0a:	3201      	adds	r2, #1
 8018f0c:	42ba      	cmp	r2, r7
 8018f0e:	d00a      	beq.n	8018f26 <rcl_wait+0x196>
 8018f10:	6899      	ldr	r1, [r3, #8]
 8018f12:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018f16:	2900      	cmp	r1, #0
 8018f18:	d1f7      	bne.n	8018f0a <rcl_wait+0x17a>
 8018f1a:	682e      	ldr	r6, [r5, #0]
 8018f1c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018f20:	3201      	adds	r2, #1
 8018f22:	42ba      	cmp	r2, r7
 8018f24:	d1f4      	bne.n	8018f10 <rcl_wait+0x180>
 8018f26:	68ef      	ldr	r7, [r5, #12]
 8018f28:	b17f      	cbz	r7, 8018f4a <rcl_wait+0x1ba>
 8018f2a:	2200      	movs	r2, #0
 8018f2c:	e002      	b.n	8018f34 <rcl_wait+0x1a4>
 8018f2e:	3201      	adds	r2, #1
 8018f30:	42ba      	cmp	r2, r7
 8018f32:	d00a      	beq.n	8018f4a <rcl_wait+0x1ba>
 8018f34:	6959      	ldr	r1, [r3, #20]
 8018f36:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018f3a:	2900      	cmp	r1, #0
 8018f3c:	d1f7      	bne.n	8018f2e <rcl_wait+0x19e>
 8018f3e:	68ae      	ldr	r6, [r5, #8]
 8018f40:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018f44:	3201      	adds	r2, #1
 8018f46:	42ba      	cmp	r2, r7
 8018f48:	d1f4      	bne.n	8018f34 <rcl_wait+0x1a4>
 8018f4a:	69ef      	ldr	r7, [r5, #28]
 8018f4c:	b17f      	cbz	r7, 8018f6e <rcl_wait+0x1de>
 8018f4e:	2200      	movs	r2, #0
 8018f50:	e002      	b.n	8018f58 <rcl_wait+0x1c8>
 8018f52:	3201      	adds	r2, #1
 8018f54:	42ba      	cmp	r2, r7
 8018f56:	d00a      	beq.n	8018f6e <rcl_wait+0x1de>
 8018f58:	6a19      	ldr	r1, [r3, #32]
 8018f5a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018f5e:	2900      	cmp	r1, #0
 8018f60:	d1f7      	bne.n	8018f52 <rcl_wait+0x1c2>
 8018f62:	69ae      	ldr	r6, [r5, #24]
 8018f64:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018f68:	3201      	adds	r2, #1
 8018f6a:	42ba      	cmp	r2, r7
 8018f6c:	d1f4      	bne.n	8018f58 <rcl_wait+0x1c8>
 8018f6e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8018f70:	b17f      	cbz	r7, 8018f92 <rcl_wait+0x202>
 8018f72:	2200      	movs	r2, #0
 8018f74:	e002      	b.n	8018f7c <rcl_wait+0x1ec>
 8018f76:	3201      	adds	r2, #1
 8018f78:	42ba      	cmp	r2, r7
 8018f7a:	d00a      	beq.n	8018f92 <rcl_wait+0x202>
 8018f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018f7e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018f82:	2900      	cmp	r1, #0
 8018f84:	d1f7      	bne.n	8018f76 <rcl_wait+0x1e6>
 8018f86:	6a2e      	ldr	r6, [r5, #32]
 8018f88:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018f8c:	3201      	adds	r2, #1
 8018f8e:	42ba      	cmp	r2, r7
 8018f90:	d1f4      	bne.n	8018f7c <rcl_wait+0x1ec>
 8018f92:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 8018f94:	b17f      	cbz	r7, 8018fb6 <rcl_wait+0x226>
 8018f96:	2200      	movs	r2, #0
 8018f98:	e002      	b.n	8018fa0 <rcl_wait+0x210>
 8018f9a:	3201      	adds	r2, #1
 8018f9c:	42ba      	cmp	r2, r7
 8018f9e:	d00a      	beq.n	8018fb6 <rcl_wait+0x226>
 8018fa0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8018fa2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018fa6:	2900      	cmp	r1, #0
 8018fa8:	d1f7      	bne.n	8018f9a <rcl_wait+0x20a>
 8018faa:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8018fac:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018fb0:	3201      	adds	r2, #1
 8018fb2:	42ba      	cmp	r2, r7
 8018fb4:	d1f4      	bne.n	8018fa0 <rcl_wait+0x210>
 8018fb6:	f1b8 0f02 	cmp.w	r8, #2
 8018fba:	f47f af06 	bne.w	8018dca <rcl_wait+0x3a>
 8018fbe:	f084 0301 	eor.w	r3, r4, #1
 8018fc2:	b2db      	uxtb	r3, r3
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	bf18      	it	ne
 8018fc8:	2002      	movne	r0, #2
 8018fca:	b00d      	add	sp, #52	; 0x34
 8018fcc:	ecbd 8b02 	vpop	{d8}
 8018fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd4:	2a00      	cmp	r2, #0
 8018fd6:	d03a      	beq.n	801904e <rcl_wait+0x2be>
 8018fd8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8018fdc:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8018fe0:	e705      	b.n	8018dee <rcl_wait+0x5e>
 8018fe2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018fe6:	b00d      	add	sp, #52	; 0x34
 8018fe8:	ecbd 8b02 	vpop	{d8}
 8018fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018ff0:	2001      	movs	r0, #1
 8018ff2:	e6ea      	b.n	8018dca <rcl_wait+0x3a>
 8018ff4:	9b04      	ldr	r3, [sp, #16]
 8018ff6:	460c      	mov	r4, r1
 8018ff8:	2b01      	cmp	r3, #1
 8018ffa:	9b05      	ldr	r3, [sp, #20]
 8018ffc:	f173 0300 	sbcs.w	r3, r3, #0
 8019000:	bfa8      	it	ge
 8019002:	f044 0401 	orrge.w	r4, r4, #1
 8019006:	b914      	cbnz	r4, 801900e <rcl_wait+0x27e>
 8019008:	4623      	mov	r3, r4
 801900a:	e747      	b.n	8018e9c <rcl_wait+0x10c>
 801900c:	4611      	mov	r1, r2
 801900e:	2f00      	cmp	r7, #0
 8019010:	da02      	bge.n	8019018 <rcl_wait+0x288>
 8019012:	f04f 0800 	mov.w	r8, #0
 8019016:	4647      	mov	r7, r8
 8019018:	460c      	mov	r4, r1
 801901a:	4640      	mov	r0, r8
 801901c:	4639      	mov	r1, r7
 801901e:	a312      	add	r3, pc, #72	; (adr r3, 8019068 <rcl_wait+0x2d8>)
 8019020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019024:	f7e7 f974 	bl	8000310 <__aeabi_ldivmod>
 8019028:	a30f      	add	r3, pc, #60	; (adr r3, 8019068 <rcl_wait+0x2d8>)
 801902a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801902e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019032:	4640      	mov	r0, r8
 8019034:	4639      	mov	r1, r7
 8019036:	f7e7 f96b 	bl	8000310 <__aeabi_ldivmod>
 801903a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801903e:	ab08      	add	r3, sp, #32
 8019040:	e72c      	b.n	8018e9c <rcl_wait+0x10c>
 8019042:	200b      	movs	r0, #11
 8019044:	b00d      	add	sp, #52	; 0x34
 8019046:	ecbd 8b02 	vpop	{d8}
 801904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801904e:	4611      	mov	r1, r2
 8019050:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8019054:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8019058:	e713      	b.n	8018e82 <rcl_wait+0xf2>
 801905a:	bf00      	nop
 801905c:	f3af 8000 	nop.w
 8019060:	ffffffff 	.word	0xffffffff
 8019064:	7fffffff 	.word	0x7fffffff
 8019068:	3b9aca00 	.word	0x3b9aca00
 801906c:	00000000 	.word	0x00000000

08019070 <rcl_action_take_goal_response>:
 8019070:	2800      	cmp	r0, #0
 8019072:	d039      	beq.n	80190e8 <rcl_action_take_goal_response+0x78>
 8019074:	b570      	push	{r4, r5, r6, lr}
 8019076:	4604      	mov	r4, r0
 8019078:	6800      	ldr	r0, [r0, #0]
 801907a:	b380      	cbz	r0, 80190de <rcl_action_take_goal_response+0x6e>
 801907c:	460e      	mov	r6, r1
 801907e:	4615      	mov	r5, r2
 8019080:	f7fe fbc6 	bl	8017810 <rcl_client_is_valid>
 8019084:	b330      	cbz	r0, 80190d4 <rcl_action_take_goal_response+0x64>
 8019086:	6820      	ldr	r0, [r4, #0]
 8019088:	3004      	adds	r0, #4
 801908a:	f7fe fbc1 	bl	8017810 <rcl_client_is_valid>
 801908e:	b308      	cbz	r0, 80190d4 <rcl_action_take_goal_response+0x64>
 8019090:	6820      	ldr	r0, [r4, #0]
 8019092:	3008      	adds	r0, #8
 8019094:	f7fe fbbc 	bl	8017810 <rcl_client_is_valid>
 8019098:	b1e0      	cbz	r0, 80190d4 <rcl_action_take_goal_response+0x64>
 801909a:	6820      	ldr	r0, [r4, #0]
 801909c:	300c      	adds	r0, #12
 801909e:	f7f7 fa17 	bl	80104d0 <rcl_subscription_is_valid>
 80190a2:	b1b8      	cbz	r0, 80190d4 <rcl_action_take_goal_response+0x64>
 80190a4:	6820      	ldr	r0, [r4, #0]
 80190a6:	3010      	adds	r0, #16
 80190a8:	f7f7 fa12 	bl	80104d0 <rcl_subscription_is_valid>
 80190ac:	b190      	cbz	r0, 80190d4 <rcl_action_take_goal_response+0x64>
 80190ae:	b1cd      	cbz	r5, 80190e4 <rcl_action_take_goal_response+0x74>
 80190b0:	b1c6      	cbz	r6, 80190e4 <rcl_action_take_goal_response+0x74>
 80190b2:	462a      	mov	r2, r5
 80190b4:	4631      	mov	r1, r6
 80190b6:	6820      	ldr	r0, [r4, #0]
 80190b8:	f7fe fb62 	bl	8017780 <rcl_take_response>
 80190bc:	b148      	cbz	r0, 80190d2 <rcl_action_take_goal_response+0x62>
 80190be:	280a      	cmp	r0, #10
 80190c0:	d007      	beq.n	80190d2 <rcl_action_take_goal_response+0x62>
 80190c2:	f240 12f5 	movw	r2, #501	; 0x1f5
 80190c6:	f640 0337 	movw	r3, #2103	; 0x837
 80190ca:	4290      	cmp	r0, r2
 80190cc:	bf0c      	ite	eq
 80190ce:	4618      	moveq	r0, r3
 80190d0:	2001      	movne	r0, #1
 80190d2:	bd70      	pop	{r4, r5, r6, pc}
 80190d4:	f7f8 fa1c 	bl	8011510 <rcutils_reset_error>
 80190d8:	f640 0036 	movw	r0, #2102	; 0x836
 80190dc:	bd70      	pop	{r4, r5, r6, pc}
 80190de:	f640 0036 	movw	r0, #2102	; 0x836
 80190e2:	bd70      	pop	{r4, r5, r6, pc}
 80190e4:	200b      	movs	r0, #11
 80190e6:	bd70      	pop	{r4, r5, r6, pc}
 80190e8:	f640 0036 	movw	r0, #2102	; 0x836
 80190ec:	4770      	bx	lr
 80190ee:	bf00      	nop

080190f0 <rcl_action_send_result_request>:
 80190f0:	b390      	cbz	r0, 8019158 <rcl_action_send_result_request+0x68>
 80190f2:	b570      	push	{r4, r5, r6, lr}
 80190f4:	4604      	mov	r4, r0
 80190f6:	6800      	ldr	r0, [r0, #0]
 80190f8:	b348      	cbz	r0, 801914e <rcl_action_send_result_request+0x5e>
 80190fa:	460e      	mov	r6, r1
 80190fc:	4615      	mov	r5, r2
 80190fe:	f7fe fb87 	bl	8017810 <rcl_client_is_valid>
 8019102:	b1f8      	cbz	r0, 8019144 <rcl_action_send_result_request+0x54>
 8019104:	6820      	ldr	r0, [r4, #0]
 8019106:	3004      	adds	r0, #4
 8019108:	f7fe fb82 	bl	8017810 <rcl_client_is_valid>
 801910c:	b1d0      	cbz	r0, 8019144 <rcl_action_send_result_request+0x54>
 801910e:	6820      	ldr	r0, [r4, #0]
 8019110:	3008      	adds	r0, #8
 8019112:	f7fe fb7d 	bl	8017810 <rcl_client_is_valid>
 8019116:	b1a8      	cbz	r0, 8019144 <rcl_action_send_result_request+0x54>
 8019118:	6820      	ldr	r0, [r4, #0]
 801911a:	300c      	adds	r0, #12
 801911c:	f7f7 f9d8 	bl	80104d0 <rcl_subscription_is_valid>
 8019120:	b180      	cbz	r0, 8019144 <rcl_action_send_result_request+0x54>
 8019122:	6820      	ldr	r0, [r4, #0]
 8019124:	3010      	adds	r0, #16
 8019126:	f7f7 f9d3 	bl	80104d0 <rcl_subscription_is_valid>
 801912a:	b158      	cbz	r0, 8019144 <rcl_action_send_result_request+0x54>
 801912c:	b195      	cbz	r5, 8019154 <rcl_action_send_result_request+0x64>
 801912e:	b18e      	cbz	r6, 8019154 <rcl_action_send_result_request+0x64>
 8019130:	6820      	ldr	r0, [r4, #0]
 8019132:	462a      	mov	r2, r5
 8019134:	4631      	mov	r1, r6
 8019136:	3008      	adds	r0, #8
 8019138:	f7fe faea 	bl	8017710 <rcl_send_request>
 801913c:	3800      	subs	r0, #0
 801913e:	bf18      	it	ne
 8019140:	2001      	movne	r0, #1
 8019142:	bd70      	pop	{r4, r5, r6, pc}
 8019144:	f7f8 f9e4 	bl	8011510 <rcutils_reset_error>
 8019148:	f640 0036 	movw	r0, #2102	; 0x836
 801914c:	bd70      	pop	{r4, r5, r6, pc}
 801914e:	f640 0036 	movw	r0, #2102	; 0x836
 8019152:	bd70      	pop	{r4, r5, r6, pc}
 8019154:	200b      	movs	r0, #11
 8019156:	bd70      	pop	{r4, r5, r6, pc}
 8019158:	f640 0036 	movw	r0, #2102	; 0x836
 801915c:	4770      	bx	lr
 801915e:	bf00      	nop

08019160 <rcl_action_take_result_response>:
 8019160:	2800      	cmp	r0, #0
 8019162:	d03a      	beq.n	80191da <rcl_action_take_result_response+0x7a>
 8019164:	b570      	push	{r4, r5, r6, lr}
 8019166:	4604      	mov	r4, r0
 8019168:	6800      	ldr	r0, [r0, #0]
 801916a:	b388      	cbz	r0, 80191d0 <rcl_action_take_result_response+0x70>
 801916c:	460e      	mov	r6, r1
 801916e:	4615      	mov	r5, r2
 8019170:	f7fe fb4e 	bl	8017810 <rcl_client_is_valid>
 8019174:	b338      	cbz	r0, 80191c6 <rcl_action_take_result_response+0x66>
 8019176:	6820      	ldr	r0, [r4, #0]
 8019178:	3004      	adds	r0, #4
 801917a:	f7fe fb49 	bl	8017810 <rcl_client_is_valid>
 801917e:	b310      	cbz	r0, 80191c6 <rcl_action_take_result_response+0x66>
 8019180:	6820      	ldr	r0, [r4, #0]
 8019182:	3008      	adds	r0, #8
 8019184:	f7fe fb44 	bl	8017810 <rcl_client_is_valid>
 8019188:	b1e8      	cbz	r0, 80191c6 <rcl_action_take_result_response+0x66>
 801918a:	6820      	ldr	r0, [r4, #0]
 801918c:	300c      	adds	r0, #12
 801918e:	f7f7 f99f 	bl	80104d0 <rcl_subscription_is_valid>
 8019192:	b1c0      	cbz	r0, 80191c6 <rcl_action_take_result_response+0x66>
 8019194:	6820      	ldr	r0, [r4, #0]
 8019196:	3010      	adds	r0, #16
 8019198:	f7f7 f99a 	bl	80104d0 <rcl_subscription_is_valid>
 801919c:	b198      	cbz	r0, 80191c6 <rcl_action_take_result_response+0x66>
 801919e:	b1d5      	cbz	r5, 80191d6 <rcl_action_take_result_response+0x76>
 80191a0:	b1ce      	cbz	r6, 80191d6 <rcl_action_take_result_response+0x76>
 80191a2:	6820      	ldr	r0, [r4, #0]
 80191a4:	462a      	mov	r2, r5
 80191a6:	4631      	mov	r1, r6
 80191a8:	3008      	adds	r0, #8
 80191aa:	f7fe fae9 	bl	8017780 <rcl_take_response>
 80191ae:	b148      	cbz	r0, 80191c4 <rcl_action_take_result_response+0x64>
 80191b0:	280a      	cmp	r0, #10
 80191b2:	d007      	beq.n	80191c4 <rcl_action_take_result_response+0x64>
 80191b4:	f240 12f5 	movw	r2, #501	; 0x1f5
 80191b8:	f640 0337 	movw	r3, #2103	; 0x837
 80191bc:	4290      	cmp	r0, r2
 80191be:	bf0c      	ite	eq
 80191c0:	4618      	moveq	r0, r3
 80191c2:	2001      	movne	r0, #1
 80191c4:	bd70      	pop	{r4, r5, r6, pc}
 80191c6:	f7f8 f9a3 	bl	8011510 <rcutils_reset_error>
 80191ca:	f640 0036 	movw	r0, #2102	; 0x836
 80191ce:	bd70      	pop	{r4, r5, r6, pc}
 80191d0:	f640 0036 	movw	r0, #2102	; 0x836
 80191d4:	bd70      	pop	{r4, r5, r6, pc}
 80191d6:	200b      	movs	r0, #11
 80191d8:	bd70      	pop	{r4, r5, r6, pc}
 80191da:	f640 0036 	movw	r0, #2102	; 0x836
 80191de:	4770      	bx	lr

080191e0 <rcl_action_take_cancel_response>:
 80191e0:	2800      	cmp	r0, #0
 80191e2:	d03a      	beq.n	801925a <rcl_action_take_cancel_response+0x7a>
 80191e4:	b570      	push	{r4, r5, r6, lr}
 80191e6:	4604      	mov	r4, r0
 80191e8:	6800      	ldr	r0, [r0, #0]
 80191ea:	b388      	cbz	r0, 8019250 <rcl_action_take_cancel_response+0x70>
 80191ec:	460e      	mov	r6, r1
 80191ee:	4615      	mov	r5, r2
 80191f0:	f7fe fb0e 	bl	8017810 <rcl_client_is_valid>
 80191f4:	b338      	cbz	r0, 8019246 <rcl_action_take_cancel_response+0x66>
 80191f6:	6820      	ldr	r0, [r4, #0]
 80191f8:	3004      	adds	r0, #4
 80191fa:	f7fe fb09 	bl	8017810 <rcl_client_is_valid>
 80191fe:	b310      	cbz	r0, 8019246 <rcl_action_take_cancel_response+0x66>
 8019200:	6820      	ldr	r0, [r4, #0]
 8019202:	3008      	adds	r0, #8
 8019204:	f7fe fb04 	bl	8017810 <rcl_client_is_valid>
 8019208:	b1e8      	cbz	r0, 8019246 <rcl_action_take_cancel_response+0x66>
 801920a:	6820      	ldr	r0, [r4, #0]
 801920c:	300c      	adds	r0, #12
 801920e:	f7f7 f95f 	bl	80104d0 <rcl_subscription_is_valid>
 8019212:	b1c0      	cbz	r0, 8019246 <rcl_action_take_cancel_response+0x66>
 8019214:	6820      	ldr	r0, [r4, #0]
 8019216:	3010      	adds	r0, #16
 8019218:	f7f7 f95a 	bl	80104d0 <rcl_subscription_is_valid>
 801921c:	b198      	cbz	r0, 8019246 <rcl_action_take_cancel_response+0x66>
 801921e:	b1d5      	cbz	r5, 8019256 <rcl_action_take_cancel_response+0x76>
 8019220:	b1ce      	cbz	r6, 8019256 <rcl_action_take_cancel_response+0x76>
 8019222:	6820      	ldr	r0, [r4, #0]
 8019224:	462a      	mov	r2, r5
 8019226:	4631      	mov	r1, r6
 8019228:	3004      	adds	r0, #4
 801922a:	f7fe faa9 	bl	8017780 <rcl_take_response>
 801922e:	b148      	cbz	r0, 8019244 <rcl_action_take_cancel_response+0x64>
 8019230:	280a      	cmp	r0, #10
 8019232:	d007      	beq.n	8019244 <rcl_action_take_cancel_response+0x64>
 8019234:	f240 12f5 	movw	r2, #501	; 0x1f5
 8019238:	f640 0337 	movw	r3, #2103	; 0x837
 801923c:	4290      	cmp	r0, r2
 801923e:	bf0c      	ite	eq
 8019240:	4618      	moveq	r0, r3
 8019242:	2001      	movne	r0, #1
 8019244:	bd70      	pop	{r4, r5, r6, pc}
 8019246:	f7f8 f963 	bl	8011510 <rcutils_reset_error>
 801924a:	f640 0036 	movw	r0, #2102	; 0x836
 801924e:	bd70      	pop	{r4, r5, r6, pc}
 8019250:	f640 0036 	movw	r0, #2102	; 0x836
 8019254:	bd70      	pop	{r4, r5, r6, pc}
 8019256:	200b      	movs	r0, #11
 8019258:	bd70      	pop	{r4, r5, r6, pc}
 801925a:	f640 0036 	movw	r0, #2102	; 0x836
 801925e:	4770      	bx	lr

08019260 <rcl_action_take_feedback>:
 8019260:	2800      	cmp	r0, #0
 8019262:	d038      	beq.n	80192d6 <rcl_action_take_feedback+0x76>
 8019264:	b530      	push	{r4, r5, lr}
 8019266:	4604      	mov	r4, r0
 8019268:	6800      	ldr	r0, [r0, #0]
 801926a:	b091      	sub	sp, #68	; 0x44
 801926c:	b378      	cbz	r0, 80192ce <rcl_action_take_feedback+0x6e>
 801926e:	460d      	mov	r5, r1
 8019270:	f7fe face 	bl	8017810 <rcl_client_is_valid>
 8019274:	b328      	cbz	r0, 80192c2 <rcl_action_take_feedback+0x62>
 8019276:	6820      	ldr	r0, [r4, #0]
 8019278:	3004      	adds	r0, #4
 801927a:	f7fe fac9 	bl	8017810 <rcl_client_is_valid>
 801927e:	b300      	cbz	r0, 80192c2 <rcl_action_take_feedback+0x62>
 8019280:	6820      	ldr	r0, [r4, #0]
 8019282:	3008      	adds	r0, #8
 8019284:	f7fe fac4 	bl	8017810 <rcl_client_is_valid>
 8019288:	b1d8      	cbz	r0, 80192c2 <rcl_action_take_feedback+0x62>
 801928a:	6820      	ldr	r0, [r4, #0]
 801928c:	300c      	adds	r0, #12
 801928e:	f7f7 f91f 	bl	80104d0 <rcl_subscription_is_valid>
 8019292:	b1b0      	cbz	r0, 80192c2 <rcl_action_take_feedback+0x62>
 8019294:	6820      	ldr	r0, [r4, #0]
 8019296:	3010      	adds	r0, #16
 8019298:	f7f7 f91a 	bl	80104d0 <rcl_subscription_is_valid>
 801929c:	b188      	cbz	r0, 80192c2 <rcl_action_take_feedback+0x62>
 801929e:	b1ed      	cbz	r5, 80192dc <rcl_action_take_feedback+0x7c>
 80192a0:	6820      	ldr	r0, [r4, #0]
 80192a2:	2300      	movs	r3, #0
 80192a4:	466a      	mov	r2, sp
 80192a6:	4629      	mov	r1, r5
 80192a8:	300c      	adds	r0, #12
 80192aa:	f7f7 f8b5 	bl	8010418 <rcl_take>
 80192ae:	b160      	cbz	r0, 80192ca <rcl_action_take_feedback+0x6a>
 80192b0:	f240 1391 	movw	r3, #401	; 0x191
 80192b4:	4298      	cmp	r0, r3
 80192b6:	d014      	beq.n	80192e2 <rcl_action_take_feedback+0x82>
 80192b8:	280a      	cmp	r0, #10
 80192ba:	bf18      	it	ne
 80192bc:	2001      	movne	r0, #1
 80192be:	b011      	add	sp, #68	; 0x44
 80192c0:	bd30      	pop	{r4, r5, pc}
 80192c2:	f7f8 f925 	bl	8011510 <rcutils_reset_error>
 80192c6:	f640 0036 	movw	r0, #2102	; 0x836
 80192ca:	b011      	add	sp, #68	; 0x44
 80192cc:	bd30      	pop	{r4, r5, pc}
 80192ce:	f640 0036 	movw	r0, #2102	; 0x836
 80192d2:	b011      	add	sp, #68	; 0x44
 80192d4:	bd30      	pop	{r4, r5, pc}
 80192d6:	f640 0036 	movw	r0, #2102	; 0x836
 80192da:	4770      	bx	lr
 80192dc:	200b      	movs	r0, #11
 80192de:	b011      	add	sp, #68	; 0x44
 80192e0:	bd30      	pop	{r4, r5, pc}
 80192e2:	f640 0037 	movw	r0, #2103	; 0x837
 80192e6:	e7f0      	b.n	80192ca <rcl_action_take_feedback+0x6a>

080192e8 <rcl_action_wait_set_add_action_client>:
 80192e8:	2800      	cmp	r0, #0
 80192ea:	d048      	beq.n	801937e <rcl_action_wait_set_add_action_client+0x96>
 80192ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192ee:	460c      	mov	r4, r1
 80192f0:	2900      	cmp	r1, #0
 80192f2:	d03c      	beq.n	801936e <rcl_action_wait_set_add_action_client+0x86>
 80192f4:	4605      	mov	r5, r0
 80192f6:	6808      	ldr	r0, [r1, #0]
 80192f8:	2800      	cmp	r0, #0
 80192fa:	d038      	beq.n	801936e <rcl_action_wait_set_add_action_client+0x86>
 80192fc:	4617      	mov	r7, r2
 80192fe:	461e      	mov	r6, r3
 8019300:	f7fe fa86 	bl	8017810 <rcl_client_is_valid>
 8019304:	b3b0      	cbz	r0, 8019374 <rcl_action_wait_set_add_action_client+0x8c>
 8019306:	6820      	ldr	r0, [r4, #0]
 8019308:	3004      	adds	r0, #4
 801930a:	f7fe fa81 	bl	8017810 <rcl_client_is_valid>
 801930e:	b388      	cbz	r0, 8019374 <rcl_action_wait_set_add_action_client+0x8c>
 8019310:	6820      	ldr	r0, [r4, #0]
 8019312:	3008      	adds	r0, #8
 8019314:	f7fe fa7c 	bl	8017810 <rcl_client_is_valid>
 8019318:	b360      	cbz	r0, 8019374 <rcl_action_wait_set_add_action_client+0x8c>
 801931a:	6820      	ldr	r0, [r4, #0]
 801931c:	300c      	adds	r0, #12
 801931e:	f7f7 f8d7 	bl	80104d0 <rcl_subscription_is_valid>
 8019322:	b338      	cbz	r0, 8019374 <rcl_action_wait_set_add_action_client+0x8c>
 8019324:	6820      	ldr	r0, [r4, #0]
 8019326:	3010      	adds	r0, #16
 8019328:	f7f7 f8d2 	bl	80104d0 <rcl_subscription_is_valid>
 801932c:	b310      	cbz	r0, 8019374 <rcl_action_wait_set_add_action_client+0x8c>
 801932e:	6821      	ldr	r1, [r4, #0]
 8019330:	4628      	mov	r0, r5
 8019332:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 8019336:	f7ff fcd1 	bl	8018cdc <rcl_wait_set_add_client>
 801933a:	b9b8      	cbnz	r0, 801936c <rcl_action_wait_set_add_action_client+0x84>
 801933c:	6821      	ldr	r1, [r4, #0]
 801933e:	4628      	mov	r0, r5
 8019340:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 8019344:	3104      	adds	r1, #4
 8019346:	f7ff fcc9 	bl	8018cdc <rcl_wait_set_add_client>
 801934a:	b978      	cbnz	r0, 801936c <rcl_action_wait_set_add_action_client+0x84>
 801934c:	6821      	ldr	r1, [r4, #0]
 801934e:	4628      	mov	r0, r5
 8019350:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 8019354:	3108      	adds	r1, #8
 8019356:	f7ff fcc1 	bl	8018cdc <rcl_wait_set_add_client>
 801935a:	b938      	cbnz	r0, 801936c <rcl_action_wait_set_add_action_client+0x84>
 801935c:	6821      	ldr	r1, [r4, #0]
 801935e:	4628      	mov	r0, r5
 8019360:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 8019364:	310c      	adds	r1, #12
 8019366:	f7ff f969 	bl	801863c <rcl_wait_set_add_subscription>
 801936a:	b158      	cbz	r0, 8019384 <rcl_action_wait_set_add_action_client+0x9c>
 801936c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801936e:	f640 0036 	movw	r0, #2102	; 0x836
 8019372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019374:	f7f8 f8cc 	bl	8011510 <rcutils_reset_error>
 8019378:	f640 0036 	movw	r0, #2102	; 0x836
 801937c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801937e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8019382:	4770      	bx	lr
 8019384:	6821      	ldr	r1, [r4, #0]
 8019386:	4628      	mov	r0, r5
 8019388:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 801938c:	3110      	adds	r1, #16
 801938e:	f7ff f955 	bl	801863c <rcl_wait_set_add_subscription>
 8019392:	2800      	cmp	r0, #0
 8019394:	d1ea      	bne.n	801936c <rcl_action_wait_set_add_action_client+0x84>
 8019396:	b11f      	cbz	r7, 80193a0 <rcl_action_wait_set_add_action_client+0xb8>
 8019398:	6823      	ldr	r3, [r4, #0]
 801939a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 801939e:	603b      	str	r3, [r7, #0]
 80193a0:	2e00      	cmp	r6, #0
 80193a2:	d0e3      	beq.n	801936c <rcl_action_wait_set_add_action_client+0x84>
 80193a4:	6823      	ldr	r3, [r4, #0]
 80193a6:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80193aa:	6033      	str	r3, [r6, #0]
 80193ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193ae:	bf00      	nop

080193b0 <rcl_action_client_wait_set_get_entities_ready>:
 80193b0:	2800      	cmp	r0, #0
 80193b2:	d050      	beq.n	8019456 <rcl_action_client_wait_set_get_entities_ready+0xa6>
 80193b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193b8:	460c      	mov	r4, r1
 80193ba:	2900      	cmp	r1, #0
 80193bc:	d03e      	beq.n	801943c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80193be:	4605      	mov	r5, r0
 80193c0:	6808      	ldr	r0, [r1, #0]
 80193c2:	2800      	cmp	r0, #0
 80193c4:	d03a      	beq.n	801943c <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80193c6:	4616      	mov	r6, r2
 80193c8:	461f      	mov	r7, r3
 80193ca:	f7fe fa21 	bl	8017810 <rcl_client_is_valid>
 80193ce:	2800      	cmp	r0, #0
 80193d0:	d038      	beq.n	8019444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80193d2:	6820      	ldr	r0, [r4, #0]
 80193d4:	3004      	adds	r0, #4
 80193d6:	f7fe fa1b 	bl	8017810 <rcl_client_is_valid>
 80193da:	2800      	cmp	r0, #0
 80193dc:	d032      	beq.n	8019444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80193de:	6820      	ldr	r0, [r4, #0]
 80193e0:	3008      	adds	r0, #8
 80193e2:	f7fe fa15 	bl	8017810 <rcl_client_is_valid>
 80193e6:	b368      	cbz	r0, 8019444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80193e8:	6820      	ldr	r0, [r4, #0]
 80193ea:	300c      	adds	r0, #12
 80193ec:	f7f7 f870 	bl	80104d0 <rcl_subscription_is_valid>
 80193f0:	b340      	cbz	r0, 8019444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80193f2:	6820      	ldr	r0, [r4, #0]
 80193f4:	3010      	adds	r0, #16
 80193f6:	f7f7 f86b 	bl	80104d0 <rcl_subscription_is_valid>
 80193fa:	b318      	cbz	r0, 8019444 <rcl_action_client_wait_set_get_entities_ready+0x94>
 80193fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8019400:	2a00      	cmp	r2, #0
 8019402:	bf18      	it	ne
 8019404:	2b00      	cmpne	r3, #0
 8019406:	9b08      	ldr	r3, [sp, #32]
 8019408:	bf0c      	ite	eq
 801940a:	2101      	moveq	r1, #1
 801940c:	2100      	movne	r1, #0
 801940e:	2b00      	cmp	r3, #0
 8019410:	bf08      	it	eq
 8019412:	f041 0101 	orreq.w	r1, r1, #1
 8019416:	2f00      	cmp	r7, #0
 8019418:	bf08      	it	eq
 801941a:	f041 0101 	orreq.w	r1, r1, #1
 801941e:	b9b9      	cbnz	r1, 8019450 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8019420:	b1b6      	cbz	r6, 8019450 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8019422:	6823      	ldr	r3, [r4, #0]
 8019424:	686c      	ldr	r4, [r5, #4]
 8019426:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 801942a:	428a      	cmp	r2, r1
 801942c:	4610      	mov	r0, r2
 801942e:	bf38      	it	cc
 8019430:	4608      	movcc	r0, r1
 8019432:	4284      	cmp	r4, r0
 8019434:	d812      	bhi.n	801945c <rcl_action_client_wait_set_get_entities_ready+0xac>
 8019436:	2001      	movs	r0, #1
 8019438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801943c:	f640 0036 	movw	r0, #2102	; 0x836
 8019440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019444:	f7f8 f864 	bl	8011510 <rcutils_reset_error>
 8019448:	f640 0036 	movw	r0, #2102	; 0x836
 801944c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019450:	200b      	movs	r0, #11
 8019452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019456:	f44f 7061 	mov.w	r0, #900	; 0x384
 801945a:	4770      	bx	lr
 801945c:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8019460:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 8019464:	45f0      	cmp	r8, lr
 8019466:	4640      	mov	r0, r8
 8019468:	69ec      	ldr	r4, [r5, #28]
 801946a:	bf38      	it	cc
 801946c:	4670      	movcc	r0, lr
 801946e:	4560      	cmp	r0, ip
 8019470:	bf38      	it	cc
 8019472:	4660      	movcc	r0, ip
 8019474:	4284      	cmp	r4, r0
 8019476:	d9de      	bls.n	8019436 <rcl_action_client_wait_set_get_entities_ready+0x86>
 8019478:	f8d5 9018 	ldr.w	r9, [r5, #24]
 801947c:	682d      	ldr	r5, [r5, #0]
 801947e:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8019482:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8019486:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801948a:	1a18      	subs	r0, r3, r0
 801948c:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8019490:	f103 0c0c 	add.w	ip, r3, #12
 8019494:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8019498:	fab0 f080 	clz	r0, r0
 801949c:	eba5 050c 	sub.w	r5, r5, ip
 80194a0:	0940      	lsrs	r0, r0, #5
 80194a2:	fab5 f585 	clz	r5, r5
 80194a6:	096d      	lsrs	r5, r5, #5
 80194a8:	7035      	strb	r5, [r6, #0]
 80194aa:	f103 0510 	add.w	r5, r3, #16
 80194ae:	1b64      	subs	r4, r4, r5
 80194b0:	9d08      	ldr	r5, [sp, #32]
 80194b2:	fab4 f484 	clz	r4, r4
 80194b6:	0964      	lsrs	r4, r4, #5
 80194b8:	703c      	strb	r4, [r7, #0]
 80194ba:	1d1c      	adds	r4, r3, #4
 80194bc:	3308      	adds	r3, #8
 80194be:	7028      	strb	r0, [r5, #0]
 80194c0:	1b09      	subs	r1, r1, r4
 80194c2:	2000      	movs	r0, #0
 80194c4:	1ad3      	subs	r3, r2, r3
 80194c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80194c8:	fab1 f181 	clz	r1, r1
 80194cc:	fab3 f383 	clz	r3, r3
 80194d0:	0949      	lsrs	r1, r1, #5
 80194d2:	095b      	lsrs	r3, r3, #5
 80194d4:	7011      	strb	r1, [r2, #0]
 80194d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80194d8:	7013      	strb	r3, [r2, #0]
 80194da:	e7b1      	b.n	8019440 <rcl_action_client_wait_set_get_entities_ready+0x90>

080194dc <rcl_action_take_goal_request>:
 80194dc:	2800      	cmp	r0, #0
 80194de:	d039      	beq.n	8019554 <rcl_action_take_goal_request+0x78>
 80194e0:	b570      	push	{r4, r5, r6, lr}
 80194e2:	4604      	mov	r4, r0
 80194e4:	6800      	ldr	r0, [r0, #0]
 80194e6:	b380      	cbz	r0, 801954a <rcl_action_take_goal_request+0x6e>
 80194e8:	460e      	mov	r6, r1
 80194ea:	4615      	mov	r5, r2
 80194ec:	f7f6 fea8 	bl	8010240 <rcl_service_is_valid>
 80194f0:	b330      	cbz	r0, 8019540 <rcl_action_take_goal_request+0x64>
 80194f2:	6820      	ldr	r0, [r4, #0]
 80194f4:	3004      	adds	r0, #4
 80194f6:	f7f6 fea3 	bl	8010240 <rcl_service_is_valid>
 80194fa:	b308      	cbz	r0, 8019540 <rcl_action_take_goal_request+0x64>
 80194fc:	6820      	ldr	r0, [r4, #0]
 80194fe:	3008      	adds	r0, #8
 8019500:	f7f6 fe9e 	bl	8010240 <rcl_service_is_valid>
 8019504:	b1e0      	cbz	r0, 8019540 <rcl_action_take_goal_request+0x64>
 8019506:	6820      	ldr	r0, [r4, #0]
 8019508:	300c      	adds	r0, #12
 801950a:	f7f6 fd5d 	bl	800ffc8 <rcl_publisher_is_valid>
 801950e:	b1b8      	cbz	r0, 8019540 <rcl_action_take_goal_request+0x64>
 8019510:	6820      	ldr	r0, [r4, #0]
 8019512:	3010      	adds	r0, #16
 8019514:	f7f6 fd58 	bl	800ffc8 <rcl_publisher_is_valid>
 8019518:	b190      	cbz	r0, 8019540 <rcl_action_take_goal_request+0x64>
 801951a:	b1cd      	cbz	r5, 8019550 <rcl_action_take_goal_request+0x74>
 801951c:	b1c6      	cbz	r6, 8019550 <rcl_action_take_goal_request+0x74>
 801951e:	462a      	mov	r2, r5
 8019520:	4631      	mov	r1, r6
 8019522:	6820      	ldr	r0, [r4, #0]
 8019524:	f7f6 fe34 	bl	8010190 <rcl_take_request>
 8019528:	b148      	cbz	r0, 801953e <rcl_action_take_goal_request+0x62>
 801952a:	280a      	cmp	r0, #10
 801952c:	d007      	beq.n	801953e <rcl_action_take_goal_request+0x62>
 801952e:	f240 2259 	movw	r2, #601	; 0x259
 8019532:	f640 0399 	movw	r3, #2201	; 0x899
 8019536:	4290      	cmp	r0, r2
 8019538:	bf0c      	ite	eq
 801953a:	4618      	moveq	r0, r3
 801953c:	2001      	movne	r0, #1
 801953e:	bd70      	pop	{r4, r5, r6, pc}
 8019540:	f7f7 ffe6 	bl	8011510 <rcutils_reset_error>
 8019544:	f640 0098 	movw	r0, #2200	; 0x898
 8019548:	bd70      	pop	{r4, r5, r6, pc}
 801954a:	f640 0098 	movw	r0, #2200	; 0x898
 801954e:	bd70      	pop	{r4, r5, r6, pc}
 8019550:	200b      	movs	r0, #11
 8019552:	bd70      	pop	{r4, r5, r6, pc}
 8019554:	f640 0098 	movw	r0, #2200	; 0x898
 8019558:	4770      	bx	lr
 801955a:	bf00      	nop

0801955c <rcl_action_send_goal_response>:
 801955c:	b388      	cbz	r0, 80195c2 <rcl_action_send_goal_response+0x66>
 801955e:	b570      	push	{r4, r5, r6, lr}
 8019560:	4604      	mov	r4, r0
 8019562:	6800      	ldr	r0, [r0, #0]
 8019564:	b340      	cbz	r0, 80195b8 <rcl_action_send_goal_response+0x5c>
 8019566:	460e      	mov	r6, r1
 8019568:	4615      	mov	r5, r2
 801956a:	f7f6 fe69 	bl	8010240 <rcl_service_is_valid>
 801956e:	b1f0      	cbz	r0, 80195ae <rcl_action_send_goal_response+0x52>
 8019570:	6820      	ldr	r0, [r4, #0]
 8019572:	3004      	adds	r0, #4
 8019574:	f7f6 fe64 	bl	8010240 <rcl_service_is_valid>
 8019578:	b1c8      	cbz	r0, 80195ae <rcl_action_send_goal_response+0x52>
 801957a:	6820      	ldr	r0, [r4, #0]
 801957c:	3008      	adds	r0, #8
 801957e:	f7f6 fe5f 	bl	8010240 <rcl_service_is_valid>
 8019582:	b1a0      	cbz	r0, 80195ae <rcl_action_send_goal_response+0x52>
 8019584:	6820      	ldr	r0, [r4, #0]
 8019586:	300c      	adds	r0, #12
 8019588:	f7f6 fd1e 	bl	800ffc8 <rcl_publisher_is_valid>
 801958c:	b178      	cbz	r0, 80195ae <rcl_action_send_goal_response+0x52>
 801958e:	6820      	ldr	r0, [r4, #0]
 8019590:	3010      	adds	r0, #16
 8019592:	f7f6 fd19 	bl	800ffc8 <rcl_publisher_is_valid>
 8019596:	b150      	cbz	r0, 80195ae <rcl_action_send_goal_response+0x52>
 8019598:	b18d      	cbz	r5, 80195be <rcl_action_send_goal_response+0x62>
 801959a:	b186      	cbz	r6, 80195be <rcl_action_send_goal_response+0x62>
 801959c:	462a      	mov	r2, r5
 801959e:	4631      	mov	r1, r6
 80195a0:	6820      	ldr	r0, [r4, #0]
 80195a2:	f7f6 fe35 	bl	8010210 <rcl_send_response>
 80195a6:	3800      	subs	r0, #0
 80195a8:	bf18      	it	ne
 80195aa:	2001      	movne	r0, #1
 80195ac:	bd70      	pop	{r4, r5, r6, pc}
 80195ae:	f7f7 ffaf 	bl	8011510 <rcutils_reset_error>
 80195b2:	f640 0098 	movw	r0, #2200	; 0x898
 80195b6:	bd70      	pop	{r4, r5, r6, pc}
 80195b8:	f640 0098 	movw	r0, #2200	; 0x898
 80195bc:	bd70      	pop	{r4, r5, r6, pc}
 80195be:	200b      	movs	r0, #11
 80195c0:	bd70      	pop	{r4, r5, r6, pc}
 80195c2:	f640 0098 	movw	r0, #2200	; 0x898
 80195c6:	4770      	bx	lr

080195c8 <rcl_action_take_result_request>:
 80195c8:	2800      	cmp	r0, #0
 80195ca:	d03a      	beq.n	8019642 <rcl_action_take_result_request+0x7a>
 80195cc:	b570      	push	{r4, r5, r6, lr}
 80195ce:	4604      	mov	r4, r0
 80195d0:	6800      	ldr	r0, [r0, #0]
 80195d2:	b388      	cbz	r0, 8019638 <rcl_action_take_result_request+0x70>
 80195d4:	460e      	mov	r6, r1
 80195d6:	4615      	mov	r5, r2
 80195d8:	f7f6 fe32 	bl	8010240 <rcl_service_is_valid>
 80195dc:	b338      	cbz	r0, 801962e <rcl_action_take_result_request+0x66>
 80195de:	6820      	ldr	r0, [r4, #0]
 80195e0:	3004      	adds	r0, #4
 80195e2:	f7f6 fe2d 	bl	8010240 <rcl_service_is_valid>
 80195e6:	b310      	cbz	r0, 801962e <rcl_action_take_result_request+0x66>
 80195e8:	6820      	ldr	r0, [r4, #0]
 80195ea:	3008      	adds	r0, #8
 80195ec:	f7f6 fe28 	bl	8010240 <rcl_service_is_valid>
 80195f0:	b1e8      	cbz	r0, 801962e <rcl_action_take_result_request+0x66>
 80195f2:	6820      	ldr	r0, [r4, #0]
 80195f4:	300c      	adds	r0, #12
 80195f6:	f7f6 fce7 	bl	800ffc8 <rcl_publisher_is_valid>
 80195fa:	b1c0      	cbz	r0, 801962e <rcl_action_take_result_request+0x66>
 80195fc:	6820      	ldr	r0, [r4, #0]
 80195fe:	3010      	adds	r0, #16
 8019600:	f7f6 fce2 	bl	800ffc8 <rcl_publisher_is_valid>
 8019604:	b198      	cbz	r0, 801962e <rcl_action_take_result_request+0x66>
 8019606:	b1d5      	cbz	r5, 801963e <rcl_action_take_result_request+0x76>
 8019608:	b1ce      	cbz	r6, 801963e <rcl_action_take_result_request+0x76>
 801960a:	6820      	ldr	r0, [r4, #0]
 801960c:	462a      	mov	r2, r5
 801960e:	4631      	mov	r1, r6
 8019610:	3008      	adds	r0, #8
 8019612:	f7f6 fdbd 	bl	8010190 <rcl_take_request>
 8019616:	b148      	cbz	r0, 801962c <rcl_action_take_result_request+0x64>
 8019618:	280a      	cmp	r0, #10
 801961a:	d007      	beq.n	801962c <rcl_action_take_result_request+0x64>
 801961c:	f240 2259 	movw	r2, #601	; 0x259
 8019620:	f640 0399 	movw	r3, #2201	; 0x899
 8019624:	4290      	cmp	r0, r2
 8019626:	bf0c      	ite	eq
 8019628:	4618      	moveq	r0, r3
 801962a:	2001      	movne	r0, #1
 801962c:	bd70      	pop	{r4, r5, r6, pc}
 801962e:	f7f7 ff6f 	bl	8011510 <rcutils_reset_error>
 8019632:	f640 0098 	movw	r0, #2200	; 0x898
 8019636:	bd70      	pop	{r4, r5, r6, pc}
 8019638:	f640 0098 	movw	r0, #2200	; 0x898
 801963c:	bd70      	pop	{r4, r5, r6, pc}
 801963e:	200b      	movs	r0, #11
 8019640:	bd70      	pop	{r4, r5, r6, pc}
 8019642:	f640 0098 	movw	r0, #2200	; 0x898
 8019646:	4770      	bx	lr

08019648 <rcl_action_take_cancel_request>:
 8019648:	2800      	cmp	r0, #0
 801964a:	d03a      	beq.n	80196c2 <rcl_action_take_cancel_request+0x7a>
 801964c:	b570      	push	{r4, r5, r6, lr}
 801964e:	4604      	mov	r4, r0
 8019650:	6800      	ldr	r0, [r0, #0]
 8019652:	b388      	cbz	r0, 80196b8 <rcl_action_take_cancel_request+0x70>
 8019654:	460e      	mov	r6, r1
 8019656:	4615      	mov	r5, r2
 8019658:	f7f6 fdf2 	bl	8010240 <rcl_service_is_valid>
 801965c:	b338      	cbz	r0, 80196ae <rcl_action_take_cancel_request+0x66>
 801965e:	6820      	ldr	r0, [r4, #0]
 8019660:	3004      	adds	r0, #4
 8019662:	f7f6 fded 	bl	8010240 <rcl_service_is_valid>
 8019666:	b310      	cbz	r0, 80196ae <rcl_action_take_cancel_request+0x66>
 8019668:	6820      	ldr	r0, [r4, #0]
 801966a:	3008      	adds	r0, #8
 801966c:	f7f6 fde8 	bl	8010240 <rcl_service_is_valid>
 8019670:	b1e8      	cbz	r0, 80196ae <rcl_action_take_cancel_request+0x66>
 8019672:	6820      	ldr	r0, [r4, #0]
 8019674:	300c      	adds	r0, #12
 8019676:	f7f6 fca7 	bl	800ffc8 <rcl_publisher_is_valid>
 801967a:	b1c0      	cbz	r0, 80196ae <rcl_action_take_cancel_request+0x66>
 801967c:	6820      	ldr	r0, [r4, #0]
 801967e:	3010      	adds	r0, #16
 8019680:	f7f6 fca2 	bl	800ffc8 <rcl_publisher_is_valid>
 8019684:	b198      	cbz	r0, 80196ae <rcl_action_take_cancel_request+0x66>
 8019686:	b1d5      	cbz	r5, 80196be <rcl_action_take_cancel_request+0x76>
 8019688:	b1ce      	cbz	r6, 80196be <rcl_action_take_cancel_request+0x76>
 801968a:	6820      	ldr	r0, [r4, #0]
 801968c:	462a      	mov	r2, r5
 801968e:	4631      	mov	r1, r6
 8019690:	3004      	adds	r0, #4
 8019692:	f7f6 fd7d 	bl	8010190 <rcl_take_request>
 8019696:	b148      	cbz	r0, 80196ac <rcl_action_take_cancel_request+0x64>
 8019698:	280a      	cmp	r0, #10
 801969a:	d007      	beq.n	80196ac <rcl_action_take_cancel_request+0x64>
 801969c:	f240 2259 	movw	r2, #601	; 0x259
 80196a0:	f640 0399 	movw	r3, #2201	; 0x899
 80196a4:	4290      	cmp	r0, r2
 80196a6:	bf0c      	ite	eq
 80196a8:	4618      	moveq	r0, r3
 80196aa:	2001      	movne	r0, #1
 80196ac:	bd70      	pop	{r4, r5, r6, pc}
 80196ae:	f7f7 ff2f 	bl	8011510 <rcutils_reset_error>
 80196b2:	f640 0098 	movw	r0, #2200	; 0x898
 80196b6:	bd70      	pop	{r4, r5, r6, pc}
 80196b8:	f640 0098 	movw	r0, #2200	; 0x898
 80196bc:	bd70      	pop	{r4, r5, r6, pc}
 80196be:	200b      	movs	r0, #11
 80196c0:	bd70      	pop	{r4, r5, r6, pc}
 80196c2:	f640 0098 	movw	r0, #2200	; 0x898
 80196c6:	4770      	bx	lr

080196c8 <rcl_action_send_cancel_response>:
 80196c8:	b390      	cbz	r0, 8019730 <rcl_action_send_cancel_response+0x68>
 80196ca:	b570      	push	{r4, r5, r6, lr}
 80196cc:	4604      	mov	r4, r0
 80196ce:	6800      	ldr	r0, [r0, #0]
 80196d0:	b348      	cbz	r0, 8019726 <rcl_action_send_cancel_response+0x5e>
 80196d2:	460e      	mov	r6, r1
 80196d4:	4615      	mov	r5, r2
 80196d6:	f7f6 fdb3 	bl	8010240 <rcl_service_is_valid>
 80196da:	b1f8      	cbz	r0, 801971c <rcl_action_send_cancel_response+0x54>
 80196dc:	6820      	ldr	r0, [r4, #0]
 80196de:	3004      	adds	r0, #4
 80196e0:	f7f6 fdae 	bl	8010240 <rcl_service_is_valid>
 80196e4:	b1d0      	cbz	r0, 801971c <rcl_action_send_cancel_response+0x54>
 80196e6:	6820      	ldr	r0, [r4, #0]
 80196e8:	3008      	adds	r0, #8
 80196ea:	f7f6 fda9 	bl	8010240 <rcl_service_is_valid>
 80196ee:	b1a8      	cbz	r0, 801971c <rcl_action_send_cancel_response+0x54>
 80196f0:	6820      	ldr	r0, [r4, #0]
 80196f2:	300c      	adds	r0, #12
 80196f4:	f7f6 fc68 	bl	800ffc8 <rcl_publisher_is_valid>
 80196f8:	b180      	cbz	r0, 801971c <rcl_action_send_cancel_response+0x54>
 80196fa:	6820      	ldr	r0, [r4, #0]
 80196fc:	3010      	adds	r0, #16
 80196fe:	f7f6 fc63 	bl	800ffc8 <rcl_publisher_is_valid>
 8019702:	b158      	cbz	r0, 801971c <rcl_action_send_cancel_response+0x54>
 8019704:	b195      	cbz	r5, 801972c <rcl_action_send_cancel_response+0x64>
 8019706:	b18e      	cbz	r6, 801972c <rcl_action_send_cancel_response+0x64>
 8019708:	6820      	ldr	r0, [r4, #0]
 801970a:	462a      	mov	r2, r5
 801970c:	4631      	mov	r1, r6
 801970e:	3004      	adds	r0, #4
 8019710:	f7f6 fd7e 	bl	8010210 <rcl_send_response>
 8019714:	3800      	subs	r0, #0
 8019716:	bf18      	it	ne
 8019718:	2001      	movne	r0, #1
 801971a:	bd70      	pop	{r4, r5, r6, pc}
 801971c:	f7f7 fef8 	bl	8011510 <rcutils_reset_error>
 8019720:	f640 0098 	movw	r0, #2200	; 0x898
 8019724:	bd70      	pop	{r4, r5, r6, pc}
 8019726:	f640 0098 	movw	r0, #2200	; 0x898
 801972a:	bd70      	pop	{r4, r5, r6, pc}
 801972c:	200b      	movs	r0, #11
 801972e:	bd70      	pop	{r4, r5, r6, pc}
 8019730:	f640 0098 	movw	r0, #2200	; 0x898
 8019734:	4770      	bx	lr
 8019736:	bf00      	nop

08019738 <rcl_action_wait_set_add_action_server>:
 8019738:	2800      	cmp	r0, #0
 801973a:	d04d      	beq.n	80197d8 <rcl_action_wait_set_add_action_server+0xa0>
 801973c:	b570      	push	{r4, r5, r6, lr}
 801973e:	460c      	mov	r4, r1
 8019740:	b159      	cbz	r1, 801975a <rcl_action_wait_set_add_action_server+0x22>
 8019742:	4605      	mov	r5, r0
 8019744:	6808      	ldr	r0, [r1, #0]
 8019746:	b140      	cbz	r0, 801975a <rcl_action_wait_set_add_action_server+0x22>
 8019748:	4616      	mov	r6, r2
 801974a:	f7f6 fd79 	bl	8010240 <rcl_service_is_valid>
 801974e:	b120      	cbz	r0, 801975a <rcl_action_wait_set_add_action_server+0x22>
 8019750:	6820      	ldr	r0, [r4, #0]
 8019752:	3004      	adds	r0, #4
 8019754:	f7f6 fd74 	bl	8010240 <rcl_service_is_valid>
 8019758:	b910      	cbnz	r0, 8019760 <rcl_action_wait_set_add_action_server+0x28>
 801975a:	f640 0098 	movw	r0, #2200	; 0x898
 801975e:	bd70      	pop	{r4, r5, r6, pc}
 8019760:	6820      	ldr	r0, [r4, #0]
 8019762:	3008      	adds	r0, #8
 8019764:	f7f6 fd6c 	bl	8010240 <rcl_service_is_valid>
 8019768:	2800      	cmp	r0, #0
 801976a:	d0f6      	beq.n	801975a <rcl_action_wait_set_add_action_server+0x22>
 801976c:	6820      	ldr	r0, [r4, #0]
 801976e:	300c      	adds	r0, #12
 8019770:	f7f6 fc42 	bl	800fff8 <rcl_publisher_is_valid_except_context>
 8019774:	2800      	cmp	r0, #0
 8019776:	d0f0      	beq.n	801975a <rcl_action_wait_set_add_action_server+0x22>
 8019778:	6820      	ldr	r0, [r4, #0]
 801977a:	3010      	adds	r0, #16
 801977c:	f7f6 fc3c 	bl	800fff8 <rcl_publisher_is_valid_except_context>
 8019780:	2800      	cmp	r0, #0
 8019782:	d0ea      	beq.n	801975a <rcl_action_wait_set_add_action_server+0x22>
 8019784:	6821      	ldr	r1, [r4, #0]
 8019786:	4628      	mov	r0, r5
 8019788:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 801978c:	f7ff fad2 	bl	8018d34 <rcl_wait_set_add_service>
 8019790:	2800      	cmp	r0, #0
 8019792:	d1e4      	bne.n	801975e <rcl_action_wait_set_add_action_server+0x26>
 8019794:	6821      	ldr	r1, [r4, #0]
 8019796:	4628      	mov	r0, r5
 8019798:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 801979c:	3104      	adds	r1, #4
 801979e:	f7ff fac9 	bl	8018d34 <rcl_wait_set_add_service>
 80197a2:	2800      	cmp	r0, #0
 80197a4:	d1db      	bne.n	801975e <rcl_action_wait_set_add_action_server+0x26>
 80197a6:	6821      	ldr	r1, [r4, #0]
 80197a8:	4628      	mov	r0, r5
 80197aa:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 80197ae:	3108      	adds	r1, #8
 80197b0:	f7ff fac0 	bl	8018d34 <rcl_wait_set_add_service>
 80197b4:	2800      	cmp	r0, #0
 80197b6:	d1d2      	bne.n	801975e <rcl_action_wait_set_add_action_server+0x26>
 80197b8:	6821      	ldr	r1, [r4, #0]
 80197ba:	4628      	mov	r0, r5
 80197bc:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 80197c0:	3114      	adds	r1, #20
 80197c2:	f7ff fa5b 	bl	8018c7c <rcl_wait_set_add_timer>
 80197c6:	2800      	cmp	r0, #0
 80197c8:	d1c9      	bne.n	801975e <rcl_action_wait_set_add_action_server+0x26>
 80197ca:	2e00      	cmp	r6, #0
 80197cc:	d0c7      	beq.n	801975e <rcl_action_wait_set_add_action_server+0x26>
 80197ce:	6823      	ldr	r3, [r4, #0]
 80197d0:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80197d4:	6033      	str	r3, [r6, #0]
 80197d6:	bd70      	pop	{r4, r5, r6, pc}
 80197d8:	f44f 7061 	mov.w	r0, #900	; 0x384
 80197dc:	4770      	bx	lr
 80197de:	bf00      	nop

080197e0 <rcl_action_server_wait_set_get_entities_ready>:
 80197e0:	2800      	cmp	r0, #0
 80197e2:	d067      	beq.n	80198b4 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 80197e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197e8:	460c      	mov	r4, r1
 80197ea:	b161      	cbz	r1, 8019806 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80197ec:	4605      	mov	r5, r0
 80197ee:	6808      	ldr	r0, [r1, #0]
 80197f0:	b148      	cbz	r0, 8019806 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80197f2:	4616      	mov	r6, r2
 80197f4:	4698      	mov	r8, r3
 80197f6:	f7f6 fd23 	bl	8010240 <rcl_service_is_valid>
 80197fa:	b120      	cbz	r0, 8019806 <rcl_action_server_wait_set_get_entities_ready+0x26>
 80197fc:	6820      	ldr	r0, [r4, #0]
 80197fe:	3004      	adds	r0, #4
 8019800:	f7f6 fd1e 	bl	8010240 <rcl_service_is_valid>
 8019804:	b918      	cbnz	r0, 801980e <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8019806:	f640 0098 	movw	r0, #2200	; 0x898
 801980a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801980e:	6820      	ldr	r0, [r4, #0]
 8019810:	3008      	adds	r0, #8
 8019812:	f7f6 fd15 	bl	8010240 <rcl_service_is_valid>
 8019816:	2800      	cmp	r0, #0
 8019818:	d0f5      	beq.n	8019806 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801981a:	6820      	ldr	r0, [r4, #0]
 801981c:	300c      	adds	r0, #12
 801981e:	f7f6 fbeb 	bl	800fff8 <rcl_publisher_is_valid_except_context>
 8019822:	2800      	cmp	r0, #0
 8019824:	d0ef      	beq.n	8019806 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019826:	6820      	ldr	r0, [r4, #0]
 8019828:	3010      	adds	r0, #16
 801982a:	f7f6 fbe5 	bl	800fff8 <rcl_publisher_is_valid_except_context>
 801982e:	2800      	cmp	r0, #0
 8019830:	d0e9      	beq.n	8019806 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8019832:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019836:	2a00      	cmp	r2, #0
 8019838:	bf18      	it	ne
 801983a:	2b00      	cmpne	r3, #0
 801983c:	bf0c      	ite	eq
 801983e:	2101      	moveq	r1, #1
 8019840:	2100      	movne	r1, #0
 8019842:	f1b8 0f00 	cmp.w	r8, #0
 8019846:	bf08      	it	eq
 8019848:	f041 0101 	orreq.w	r1, r1, #1
 801984c:	bba9      	cbnz	r1, 80198ba <rcl_action_server_wait_set_get_entities_ready+0xda>
 801984e:	b3a6      	cbz	r6, 80198ba <rcl_action_server_wait_set_get_entities_ready+0xda>
 8019850:	6821      	ldr	r1, [r4, #0]
 8019852:	2000      	movs	r0, #0
 8019854:	692c      	ldr	r4, [r5, #16]
 8019856:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 801985a:	6a2f      	ldr	r7, [r5, #32]
 801985c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019860:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 8019864:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8019868:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 801986c:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8019870:	1a64      	subs	r4, r4, r1
 8019872:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 8019876:	fab4 f484 	clz	r4, r4
 801987a:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 801987e:	0964      	lsrs	r4, r4, #5
 8019880:	7034      	strb	r4, [r6, #0]
 8019882:	1d0c      	adds	r4, r1, #4
 8019884:	1b2c      	subs	r4, r5, r4
 8019886:	fab4 f484 	clz	r4, r4
 801988a:	0964      	lsrs	r4, r4, #5
 801988c:	f888 4000 	strb.w	r4, [r8]
 8019890:	f101 0408 	add.w	r4, r1, #8
 8019894:	1b1b      	subs	r3, r3, r4
 8019896:	9c06      	ldr	r4, [sp, #24]
 8019898:	fab3 f383 	clz	r3, r3
 801989c:	095b      	lsrs	r3, r3, #5
 801989e:	7023      	strb	r3, [r4, #0]
 80198a0:	f101 0314 	add.w	r3, r1, #20
 80198a4:	1ad3      	subs	r3, r2, r3
 80198a6:	9a07      	ldr	r2, [sp, #28]
 80198a8:	fab3 f383 	clz	r3, r3
 80198ac:	095b      	lsrs	r3, r3, #5
 80198ae:	7013      	strb	r3, [r2, #0]
 80198b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198b4:	f44f 7061 	mov.w	r0, #900	; 0x384
 80198b8:	4770      	bx	lr
 80198ba:	200b      	movs	r0, #11
 80198bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080198c0 <_execute_event_handler>:
 80198c0:	2002      	movs	r0, #2
 80198c2:	4770      	bx	lr

080198c4 <_cancel_goal_event_handler>:
 80198c4:	2003      	movs	r0, #3
 80198c6:	4770      	bx	lr

080198c8 <_succeed_event_handler>:
 80198c8:	2004      	movs	r0, #4
 80198ca:	4770      	bx	lr

080198cc <_abort_event_handler>:
 80198cc:	2006      	movs	r0, #6
 80198ce:	4770      	bx	lr

080198d0 <_canceled_event_handler>:
 80198d0:	2005      	movs	r0, #5
 80198d2:	4770      	bx	lr

080198d4 <rcl_action_transition_goal_state>:
 80198d4:	b2c2      	uxtb	r2, r0
 80198d6:	2a06      	cmp	r2, #6
 80198d8:	d810      	bhi.n	80198fc <rcl_action_transition_goal_state+0x28>
 80198da:	2904      	cmp	r1, #4
 80198dc:	d80e      	bhi.n	80198fc <rcl_action_transition_goal_state+0x28>
 80198de:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 80198e2:	b410      	push	{r4}
 80198e4:	1853      	adds	r3, r2, r1
 80198e6:	4c06      	ldr	r4, [pc, #24]	; (8019900 <rcl_action_transition_goal_state+0x2c>)
 80198e8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80198ec:	b113      	cbz	r3, 80198f4 <rcl_action_transition_goal_state+0x20>
 80198ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198f2:	4718      	bx	r3
 80198f4:	2000      	movs	r0, #0
 80198f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80198fa:	4770      	bx	lr
 80198fc:	2000      	movs	r0, #0
 80198fe:	4770      	bx	lr
 8019900:	0801e4dc 	.word	0x0801e4dc

08019904 <rcl_action_get_zero_initialized_cancel_response>:
 8019904:	b510      	push	{r4, lr}
 8019906:	4c07      	ldr	r4, [pc, #28]	; (8019924 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8019908:	4686      	mov	lr, r0
 801990a:	4684      	mov	ip, r0
 801990c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801990e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019912:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019914:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019918:	6823      	ldr	r3, [r4, #0]
 801991a:	4670      	mov	r0, lr
 801991c:	f8cc 3000 	str.w	r3, [ip]
 8019920:	bd10      	pop	{r4, pc}
 8019922:	bf00      	nop
 8019924:	0801e568 	.word	0x0801e568

08019928 <rclc_action_send_result_request>:
 8019928:	b1d0      	cbz	r0, 8019960 <rclc_action_send_result_request+0x38>
 801992a:	4684      	mov	ip, r0
 801992c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8019930:	b500      	push	{lr}
 8019932:	b087      	sub	sp, #28
 8019934:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8019938:	f8dc 2011 	ldr.w	r2, [ip, #17]
 801993c:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8019940:	f10d 0e08 	add.w	lr, sp, #8
 8019944:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019948:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801994c:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8019950:	a902      	add	r1, sp, #8
 8019952:	3010      	adds	r0, #16
 8019954:	f7ff fbcc 	bl	80190f0 <rcl_action_send_result_request>
 8019958:	b920      	cbnz	r0, 8019964 <rclc_action_send_result_request+0x3c>
 801995a:	b007      	add	sp, #28
 801995c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019960:	200b      	movs	r0, #11
 8019962:	4770      	bx	lr
 8019964:	9001      	str	r0, [sp, #4]
 8019966:	f7f7 fdd3 	bl	8011510 <rcutils_reset_error>
 801996a:	9801      	ldr	r0, [sp, #4]
 801996c:	b007      	add	sp, #28
 801996e:	f85d fb04 	ldr.w	pc, [sp], #4
 8019972:	bf00      	nop

08019974 <rclc_action_take_goal_handle>:
 8019974:	b160      	cbz	r0, 8019990 <rclc_action_take_goal_handle+0x1c>
 8019976:	6883      	ldr	r3, [r0, #8]
 8019978:	b143      	cbz	r3, 801998c <rclc_action_take_goal_handle+0x18>
 801997a:	6819      	ldr	r1, [r3, #0]
 801997c:	2200      	movs	r2, #0
 801997e:	6081      	str	r1, [r0, #8]
 8019980:	721a      	strb	r2, [r3, #8]
 8019982:	68c1      	ldr	r1, [r0, #12]
 8019984:	621a      	str	r2, [r3, #32]
 8019986:	849a      	strh	r2, [r3, #36]	; 0x24
 8019988:	6019      	str	r1, [r3, #0]
 801998a:	60c3      	str	r3, [r0, #12]
 801998c:	4618      	mov	r0, r3
 801998e:	4770      	bx	lr
 8019990:	4603      	mov	r3, r0
 8019992:	e7fb      	b.n	801998c <rclc_action_take_goal_handle+0x18>

08019994 <rclc_action_remove_used_goal_handle>:
 8019994:	b180      	cbz	r0, 80199b8 <rclc_action_remove_used_goal_handle+0x24>
 8019996:	b179      	cbz	r1, 80199b8 <rclc_action_remove_used_goal_handle+0x24>
 8019998:	68c3      	ldr	r3, [r0, #12]
 801999a:	4299      	cmp	r1, r3
 801999c:	d00d      	beq.n	80199ba <rclc_action_remove_used_goal_handle+0x26>
 801999e:	b12b      	cbz	r3, 80199ac <rclc_action_remove_used_goal_handle+0x18>
 80199a0:	681a      	ldr	r2, [r3, #0]
 80199a2:	4291      	cmp	r1, r2
 80199a4:	d003      	beq.n	80199ae <rclc_action_remove_used_goal_handle+0x1a>
 80199a6:	4613      	mov	r3, r2
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	d1f9      	bne.n	80199a0 <rclc_action_remove_used_goal_handle+0xc>
 80199ac:	4770      	bx	lr
 80199ae:	680a      	ldr	r2, [r1, #0]
 80199b0:	601a      	str	r2, [r3, #0]
 80199b2:	6883      	ldr	r3, [r0, #8]
 80199b4:	600b      	str	r3, [r1, #0]
 80199b6:	6081      	str	r1, [r0, #8]
 80199b8:	4770      	bx	lr
 80199ba:	680b      	ldr	r3, [r1, #0]
 80199bc:	60c3      	str	r3, [r0, #12]
 80199be:	e7f8      	b.n	80199b2 <rclc_action_remove_used_goal_handle+0x1e>

080199c0 <rclc_action_find_goal_handle_by_uuid>:
 80199c0:	b538      	push	{r3, r4, r5, lr}
 80199c2:	b181      	cbz	r1, 80199e6 <rclc_action_find_goal_handle_by_uuid+0x26>
 80199c4:	b178      	cbz	r0, 80199e6 <rclc_action_find_goal_handle_by_uuid+0x26>
 80199c6:	68c4      	ldr	r4, [r0, #12]
 80199c8:	460d      	mov	r5, r1
 80199ca:	b914      	cbnz	r4, 80199d2 <rclc_action_find_goal_handle_by_uuid+0x12>
 80199cc:	e009      	b.n	80199e2 <rclc_action_find_goal_handle_by_uuid+0x22>
 80199ce:	6824      	ldr	r4, [r4, #0]
 80199d0:	b13c      	cbz	r4, 80199e2 <rclc_action_find_goal_handle_by_uuid+0x22>
 80199d2:	f104 0009 	add.w	r0, r4, #9
 80199d6:	2210      	movs	r2, #16
 80199d8:	4629      	mov	r1, r5
 80199da:	f002 fced 	bl	801c3b8 <memcmp>
 80199de:	2800      	cmp	r0, #0
 80199e0:	d1f5      	bne.n	80199ce <rclc_action_find_goal_handle_by_uuid+0xe>
 80199e2:	4620      	mov	r0, r4
 80199e4:	bd38      	pop	{r3, r4, r5, pc}
 80199e6:	2400      	movs	r4, #0
 80199e8:	4620      	mov	r0, r4
 80199ea:	bd38      	pop	{r3, r4, r5, pc}

080199ec <rclc_action_find_first_handle_by_status>:
 80199ec:	b140      	cbz	r0, 8019a00 <rclc_action_find_first_handle_by_status+0x14>
 80199ee:	68c0      	ldr	r0, [r0, #12]
 80199f0:	b910      	cbnz	r0, 80199f8 <rclc_action_find_first_handle_by_status+0xc>
 80199f2:	e005      	b.n	8019a00 <rclc_action_find_first_handle_by_status+0x14>
 80199f4:	6800      	ldr	r0, [r0, #0]
 80199f6:	b118      	cbz	r0, 8019a00 <rclc_action_find_first_handle_by_status+0x14>
 80199f8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80199fc:	428b      	cmp	r3, r1
 80199fe:	d1f9      	bne.n	80199f4 <rclc_action_find_first_handle_by_status+0x8>
 8019a00:	4770      	bx	lr
 8019a02:	bf00      	nop

08019a04 <rclc_action_find_first_terminated_handle>:
 8019a04:	b140      	cbz	r0, 8019a18 <rclc_action_find_first_terminated_handle+0x14>
 8019a06:	68c0      	ldr	r0, [r0, #12]
 8019a08:	b910      	cbnz	r0, 8019a10 <rclc_action_find_first_terminated_handle+0xc>
 8019a0a:	e005      	b.n	8019a18 <rclc_action_find_first_terminated_handle+0x14>
 8019a0c:	6800      	ldr	r0, [r0, #0]
 8019a0e:	b118      	cbz	r0, 8019a18 <rclc_action_find_first_terminated_handle+0x14>
 8019a10:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8019a14:	2b03      	cmp	r3, #3
 8019a16:	ddf9      	ble.n	8019a0c <rclc_action_find_first_terminated_handle+0x8>
 8019a18:	4770      	bx	lr
 8019a1a:	bf00      	nop

08019a1c <rclc_action_find_handle_by_goal_request_sequence_number>:
 8019a1c:	b170      	cbz	r0, 8019a3c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8019a1e:	68c0      	ldr	r0, [r0, #12]
 8019a20:	b160      	cbz	r0, 8019a3c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8019a22:	b410      	push	{r4}
 8019a24:	e001      	b.n	8019a2a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8019a26:	6800      	ldr	r0, [r0, #0]
 8019a28:	b128      	cbz	r0, 8019a36 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8019a2a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8019a2e:	4299      	cmp	r1, r3
 8019a30:	bf08      	it	eq
 8019a32:	4294      	cmpeq	r4, r2
 8019a34:	d1f7      	bne.n	8019a26 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8019a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a3a:	4770      	bx	lr
 8019a3c:	4770      	bx	lr
 8019a3e:	bf00      	nop

08019a40 <rclc_action_find_handle_by_result_request_sequence_number>:
 8019a40:	b170      	cbz	r0, 8019a60 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8019a42:	68c0      	ldr	r0, [r0, #12]
 8019a44:	b160      	cbz	r0, 8019a60 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8019a46:	b410      	push	{r4}
 8019a48:	e001      	b.n	8019a4e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8019a4a:	6800      	ldr	r0, [r0, #0]
 8019a4c:	b128      	cbz	r0, 8019a5a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8019a4e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8019a52:	4299      	cmp	r1, r3
 8019a54:	bf08      	it	eq
 8019a56:	4294      	cmpeq	r4, r2
 8019a58:	d1f7      	bne.n	8019a4a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8019a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a5e:	4770      	bx	lr
 8019a60:	4770      	bx	lr
 8019a62:	bf00      	nop

08019a64 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8019a64:	b170      	cbz	r0, 8019a84 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8019a66:	68c0      	ldr	r0, [r0, #12]
 8019a68:	b160      	cbz	r0, 8019a84 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8019a6a:	b410      	push	{r4}
 8019a6c:	e001      	b.n	8019a72 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8019a6e:	6800      	ldr	r0, [r0, #0]
 8019a70:	b128      	cbz	r0, 8019a7e <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8019a72:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8019a76:	4299      	cmp	r1, r3
 8019a78:	bf08      	it	eq
 8019a7a:	4294      	cmpeq	r4, r2
 8019a7c:	d1f7      	bne.n	8019a6e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8019a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a82:	4770      	bx	lr
 8019a84:	4770      	bx	lr
 8019a86:	bf00      	nop

08019a88 <rclc_action_find_first_handle_with_goal_response>:
 8019a88:	b140      	cbz	r0, 8019a9c <rclc_action_find_first_handle_with_goal_response+0x14>
 8019a8a:	68c0      	ldr	r0, [r0, #12]
 8019a8c:	b910      	cbnz	r0, 8019a94 <rclc_action_find_first_handle_with_goal_response+0xc>
 8019a8e:	e005      	b.n	8019a9c <rclc_action_find_first_handle_with_goal_response+0x14>
 8019a90:	6800      	ldr	r0, [r0, #0]
 8019a92:	b118      	cbz	r0, 8019a9c <rclc_action_find_first_handle_with_goal_response+0x14>
 8019a94:	f890 3020 	ldrb.w	r3, [r0, #32]
 8019a98:	2b00      	cmp	r3, #0
 8019a9a:	d0f9      	beq.n	8019a90 <rclc_action_find_first_handle_with_goal_response+0x8>
 8019a9c:	4770      	bx	lr
 8019a9e:	bf00      	nop

08019aa0 <rclc_action_find_first_handle_with_result_response>:
 8019aa0:	b140      	cbz	r0, 8019ab4 <rclc_action_find_first_handle_with_result_response+0x14>
 8019aa2:	68c0      	ldr	r0, [r0, #12]
 8019aa4:	b910      	cbnz	r0, 8019aac <rclc_action_find_first_handle_with_result_response+0xc>
 8019aa6:	e005      	b.n	8019ab4 <rclc_action_find_first_handle_with_result_response+0x14>
 8019aa8:	6800      	ldr	r0, [r0, #0]
 8019aaa:	b118      	cbz	r0, 8019ab4 <rclc_action_find_first_handle_with_result_response+0x14>
 8019aac:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8019ab0:	2b00      	cmp	r3, #0
 8019ab2:	d0f9      	beq.n	8019aa8 <rclc_action_find_first_handle_with_result_response+0x8>
 8019ab4:	4770      	bx	lr
 8019ab6:	bf00      	nop

08019ab8 <rclc_action_server_response_goal_request>:
 8019ab8:	b198      	cbz	r0, 8019ae2 <rclc_action_server_response_goal_request+0x2a>
 8019aba:	2200      	movs	r2, #0
 8019abc:	460b      	mov	r3, r1
 8019abe:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8019ac2:	b510      	push	{r4, lr}
 8019ac4:	6844      	ldr	r4, [r0, #4]
 8019ac6:	b086      	sub	sp, #24
 8019ac8:	f104 0010 	add.w	r0, r4, #16
 8019acc:	9205      	str	r2, [sp, #20]
 8019ace:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8019ad2:	aa03      	add	r2, sp, #12
 8019ad4:	f88d 300c 	strb.w	r3, [sp, #12]
 8019ad8:	f7ff fd40 	bl	801955c <rcl_action_send_goal_response>
 8019adc:	b918      	cbnz	r0, 8019ae6 <rclc_action_server_response_goal_request+0x2e>
 8019ade:	b006      	add	sp, #24
 8019ae0:	bd10      	pop	{r4, pc}
 8019ae2:	200b      	movs	r0, #11
 8019ae4:	4770      	bx	lr
 8019ae6:	9001      	str	r0, [sp, #4]
 8019ae8:	f7f7 fd12 	bl	8011510 <rcutils_reset_error>
 8019aec:	9801      	ldr	r0, [sp, #4]
 8019aee:	b006      	add	sp, #24
 8019af0:	bd10      	pop	{r4, pc}
 8019af2:	bf00      	nop
 8019af4:	0000      	movs	r0, r0
	...

08019af8 <rclc_action_server_goal_cancel_accept>:
 8019af8:	b310      	cbz	r0, 8019b40 <rclc_action_server_goal_cancel_accept+0x48>
 8019afa:	b510      	push	{r4, lr}
 8019afc:	b090      	sub	sp, #64	; 0x40
 8019afe:	4604      	mov	r4, r0
 8019b00:	a806      	add	r0, sp, #24
 8019b02:	f7ff feff 	bl	8019904 <rcl_action_get_zero_initialized_cancel_response>
 8019b06:	2300      	movs	r3, #0
 8019b08:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8019b0c:	46ec      	mov	ip, sp
 8019b0e:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8019b12:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8019b16:	f88d 3018 	strb.w	r3, [sp, #24]
 8019b1a:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8019b1e:	f8cd d01c 	str.w	sp, [sp, #28]
 8019b22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019b26:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8019b48 <rclc_action_server_goal_cancel_accept+0x50>
 8019b2a:	6860      	ldr	r0, [r4, #4]
 8019b2c:	aa06      	add	r2, sp, #24
 8019b2e:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8019b32:	3010      	adds	r0, #16
 8019b34:	ed8d 7b08 	vstr	d7, [sp, #32]
 8019b38:	f7ff fdc6 	bl	80196c8 <rcl_action_send_cancel_response>
 8019b3c:	b010      	add	sp, #64	; 0x40
 8019b3e:	bd10      	pop	{r4, pc}
 8019b40:	200b      	movs	r0, #11
 8019b42:	4770      	bx	lr
 8019b44:	f3af 8000 	nop.w
 8019b48:	00000001 	.word	0x00000001
 8019b4c:	00000001 	.word	0x00000001

08019b50 <rclc_action_server_goal_cancel_reject>:
 8019b50:	b082      	sub	sp, #8
 8019b52:	b530      	push	{r4, r5, lr}
 8019b54:	b08b      	sub	sp, #44	; 0x2c
 8019b56:	ac0e      	add	r4, sp, #56	; 0x38
 8019b58:	e884 000c 	stmia.w	r4, {r2, r3}
 8019b5c:	b188      	cbz	r0, 8019b82 <rclc_action_server_goal_cancel_reject+0x32>
 8019b5e:	4604      	mov	r4, r0
 8019b60:	a801      	add	r0, sp, #4
 8019b62:	460d      	mov	r5, r1
 8019b64:	f7ff fece 	bl	8019904 <rcl_action_get_zero_initialized_cancel_response>
 8019b68:	aa01      	add	r2, sp, #4
 8019b6a:	a90e      	add	r1, sp, #56	; 0x38
 8019b6c:	f104 0010 	add.w	r0, r4, #16
 8019b70:	f88d 5004 	strb.w	r5, [sp, #4]
 8019b74:	f7ff fda8 	bl	80196c8 <rcl_action_send_cancel_response>
 8019b78:	b00b      	add	sp, #44	; 0x2c
 8019b7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b7e:	b002      	add	sp, #8
 8019b80:	4770      	bx	lr
 8019b82:	200b      	movs	r0, #11
 8019b84:	b00b      	add	sp, #44	; 0x2c
 8019b86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019b8a:	b002      	add	sp, #8
 8019b8c:	4770      	bx	lr
 8019b8e:	bf00      	nop

08019b90 <__atomic_load_8>:
 8019b90:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8019b94:	4a16      	ldr	r2, [pc, #88]	; (8019bf0 <__atomic_load_8+0x60>)
 8019b96:	4b17      	ldr	r3, [pc, #92]	; (8019bf4 <__atomic_load_8+0x64>)
 8019b98:	f04f 0c01 	mov.w	ip, #1
 8019b9c:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8019ba0:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8019ba4:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8019ba8:	fb02 f101 	mul.w	r1, r2, r1
 8019bac:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8019bb0:	fba3 2301 	umull	r2, r3, r3, r1
 8019bb4:	091b      	lsrs	r3, r3, #4
 8019bb6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8019bba:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8019bbe:	b4d0      	push	{r4, r6, r7}
 8019bc0:	1ac9      	subs	r1, r1, r3
 8019bc2:	4c0d      	ldr	r4, [pc, #52]	; (8019bf8 <__atomic_load_8+0x68>)
 8019bc4:	1862      	adds	r2, r4, r1
 8019bc6:	e8d2 3f4f 	ldrexb	r3, [r2]
 8019bca:	e8c2 cf46 	strexb	r6, ip, [r2]
 8019bce:	2e00      	cmp	r6, #0
 8019bd0:	d1f9      	bne.n	8019bc6 <__atomic_load_8+0x36>
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	f3bf 8f5b 	dmb	ish
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d1f4      	bne.n	8019bc6 <__atomic_load_8+0x36>
 8019bdc:	e9d0 6700 	ldrd	r6, r7, [r0]
 8019be0:	f3bf 8f5b 	dmb	ish
 8019be4:	5463      	strb	r3, [r4, r1]
 8019be6:	4630      	mov	r0, r6
 8019be8:	4639      	mov	r1, r7
 8019bea:	bcd0      	pop	{r4, r6, r7}
 8019bec:	4770      	bx	lr
 8019bee:	bf00      	nop
 8019bf0:	27d4eb2d 	.word	0x27d4eb2d
 8019bf4:	b21642c9 	.word	0xb21642c9
 8019bf8:	200129f8 	.word	0x200129f8

08019bfc <__atomic_store_8>:
 8019bfc:	b570      	push	{r4, r5, r6, lr}
 8019bfe:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8019c02:	4916      	ldr	r1, [pc, #88]	; (8019c5c <__atomic_store_8+0x60>)
 8019c04:	4c16      	ldr	r4, [pc, #88]	; (8019c60 <__atomic_store_8+0x64>)
 8019c06:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8019c0a:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8019c0e:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8019c12:	fb01 fe0e 	mul.w	lr, r1, lr
 8019c16:	4913      	ldr	r1, [pc, #76]	; (8019c64 <__atomic_store_8+0x68>)
 8019c18:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8019c1c:	fba1 510e 	umull	r5, r1, r1, lr
 8019c20:	f04f 0501 	mov.w	r5, #1
 8019c24:	0909      	lsrs	r1, r1, #4
 8019c26:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8019c2a:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8019c2e:	ebae 0e01 	sub.w	lr, lr, r1
 8019c32:	eb04 0c0e 	add.w	ip, r4, lr
 8019c36:	e8dc 1f4f 	ldrexb	r1, [ip]
 8019c3a:	e8cc 5f46 	strexb	r6, r5, [ip]
 8019c3e:	2e00      	cmp	r6, #0
 8019c40:	d1f9      	bne.n	8019c36 <__atomic_store_8+0x3a>
 8019c42:	b2c9      	uxtb	r1, r1
 8019c44:	f3bf 8f5b 	dmb	ish
 8019c48:	2900      	cmp	r1, #0
 8019c4a:	d1f4      	bne.n	8019c36 <__atomic_store_8+0x3a>
 8019c4c:	e9c0 2300 	strd	r2, r3, [r0]
 8019c50:	f3bf 8f5b 	dmb	ish
 8019c54:	f804 100e 	strb.w	r1, [r4, lr]
 8019c58:	bd70      	pop	{r4, r5, r6, pc}
 8019c5a:	bf00      	nop
 8019c5c:	27d4eb2d 	.word	0x27d4eb2d
 8019c60:	200129f8 	.word	0x200129f8
 8019c64:	b21642c9 	.word	0xb21642c9

08019c68 <__atomic_exchange_8>:
 8019c68:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8019c6c:	4917      	ldr	r1, [pc, #92]	; (8019ccc <__atomic_exchange_8+0x64>)
 8019c6e:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 8019c72:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8019c76:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8019c7a:	fb01 fc0c 	mul.w	ip, r1, ip
 8019c7e:	4914      	ldr	r1, [pc, #80]	; (8019cd0 <__atomic_exchange_8+0x68>)
 8019c80:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8019c84:	b570      	push	{r4, r5, r6, lr}
 8019c86:	4686      	mov	lr, r0
 8019c88:	fba1 010c 	umull	r0, r1, r1, ip
 8019c8c:	4d11      	ldr	r5, [pc, #68]	; (8019cd4 <__atomic_exchange_8+0x6c>)
 8019c8e:	f04f 0001 	mov.w	r0, #1
 8019c92:	0909      	lsrs	r1, r1, #4
 8019c94:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8019c98:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8019c9c:	ebac 0c01 	sub.w	ip, ip, r1
 8019ca0:	eb05 010c 	add.w	r1, r5, ip
 8019ca4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8019ca8:	e8c1 0f46 	strexb	r6, r0, [r1]
 8019cac:	2e00      	cmp	r6, #0
 8019cae:	d1f9      	bne.n	8019ca4 <__atomic_exchange_8+0x3c>
 8019cb0:	b2e4      	uxtb	r4, r4
 8019cb2:	f3bf 8f5b 	dmb	ish
 8019cb6:	2c00      	cmp	r4, #0
 8019cb8:	d1f4      	bne.n	8019ca4 <__atomic_exchange_8+0x3c>
 8019cba:	e9de 0100 	ldrd	r0, r1, [lr]
 8019cbe:	e9ce 2300 	strd	r2, r3, [lr]
 8019cc2:	f3bf 8f5b 	dmb	ish
 8019cc6:	f805 400c 	strb.w	r4, [r5, ip]
 8019cca:	bd70      	pop	{r4, r5, r6, pc}
 8019ccc:	27d4eb2d 	.word	0x27d4eb2d
 8019cd0:	b21642c9 	.word	0xb21642c9
 8019cd4:	200129f8 	.word	0x200129f8

08019cd8 <rcutils_is_directory>:
 8019cd8:	2000      	movs	r0, #0
 8019cda:	4770      	bx	lr

08019cdc <rcutils_join_path>:
 8019cdc:	b082      	sub	sp, #8
 8019cde:	2000      	movs	r0, #0
 8019ce0:	e88d 000c 	stmia.w	sp, {r2, r3}
 8019ce4:	b002      	add	sp, #8
 8019ce6:	4770      	bx	lr

08019ce8 <rcutils_to_native_path>:
 8019ce8:	b084      	sub	sp, #16
 8019cea:	2000      	movs	r0, #0
 8019cec:	f10d 0c04 	add.w	ip, sp, #4
 8019cf0:	b004      	add	sp, #16
 8019cf2:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 8019cf6:	4770      	bx	lr

08019cf8 <rcutils_string_array_fini>:
 8019cf8:	b328      	cbz	r0, 8019d46 <rcutils_string_array_fini+0x4e>
 8019cfa:	b570      	push	{r4, r5, r6, lr}
 8019cfc:	4604      	mov	r4, r0
 8019cfe:	6840      	ldr	r0, [r0, #4]
 8019d00:	b1e0      	cbz	r0, 8019d3c <rcutils_string_array_fini+0x44>
 8019d02:	f104 0008 	add.w	r0, r4, #8
 8019d06:	f7f7 fbc5 	bl	8011494 <rcutils_allocator_is_valid>
 8019d0a:	b1c0      	cbz	r0, 8019d3e <rcutils_string_array_fini+0x46>
 8019d0c:	6823      	ldr	r3, [r4, #0]
 8019d0e:	b1c3      	cbz	r3, 8019d42 <rcutils_string_array_fini+0x4a>
 8019d10:	2500      	movs	r5, #0
 8019d12:	6860      	ldr	r0, [r4, #4]
 8019d14:	462e      	mov	r6, r5
 8019d16:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019d1a:	68e3      	ldr	r3, [r4, #12]
 8019d1c:	69a1      	ldr	r1, [r4, #24]
 8019d1e:	4798      	blx	r3
 8019d20:	e9d4 3000 	ldrd	r3, r0, [r4]
 8019d24:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019d28:	3501      	adds	r5, #1
 8019d2a:	429d      	cmp	r5, r3
 8019d2c:	d3f3      	bcc.n	8019d16 <rcutils_string_array_fini+0x1e>
 8019d2e:	68e3      	ldr	r3, [r4, #12]
 8019d30:	69a1      	ldr	r1, [r4, #24]
 8019d32:	4798      	blx	r3
 8019d34:	2300      	movs	r3, #0
 8019d36:	4618      	mov	r0, r3
 8019d38:	e9c4 3300 	strd	r3, r3, [r4]
 8019d3c:	bd70      	pop	{r4, r5, r6, pc}
 8019d3e:	200b      	movs	r0, #11
 8019d40:	bd70      	pop	{r4, r5, r6, pc}
 8019d42:	6860      	ldr	r0, [r4, #4]
 8019d44:	e7f3      	b.n	8019d2e <rcutils_string_array_fini+0x36>
 8019d46:	200b      	movs	r0, #11
 8019d48:	4770      	bx	lr
 8019d4a:	bf00      	nop

08019d4c <rcutils_get_zero_initialized_string_map>:
 8019d4c:	2000      	movs	r0, #0
 8019d4e:	4b01      	ldr	r3, [pc, #4]	; (8019d54 <rcutils_get_zero_initialized_string_map+0x8>)
 8019d50:	6018      	str	r0, [r3, #0]
 8019d52:	4770      	bx	lr
 8019d54:	20012a10 	.word	0x20012a10

08019d58 <rcutils_string_map_reserve>:
 8019d58:	2800      	cmp	r0, #0
 8019d5a:	d05e      	beq.n	8019e1a <rcutils_string_map_reserve+0xc2>
 8019d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d60:	460c      	mov	r4, r1
 8019d62:	6801      	ldr	r1, [r0, #0]
 8019d64:	b082      	sub	sp, #8
 8019d66:	4605      	mov	r5, r0
 8019d68:	b129      	cbz	r1, 8019d76 <rcutils_string_map_reserve+0x1e>
 8019d6a:	68cb      	ldr	r3, [r1, #12]
 8019d6c:	42a3      	cmp	r3, r4
 8019d6e:	d906      	bls.n	8019d7e <rcutils_string_map_reserve+0x26>
 8019d70:	461c      	mov	r4, r3
 8019d72:	2900      	cmp	r1, #0
 8019d74:	d1f9      	bne.n	8019d6a <rcutils_string_map_reserve+0x12>
 8019d76:	201f      	movs	r0, #31
 8019d78:	b002      	add	sp, #8
 8019d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d7e:	688b      	ldr	r3, [r1, #8]
 8019d80:	42a3      	cmp	r3, r4
 8019d82:	d046      	beq.n	8019e12 <rcutils_string_map_reserve+0xba>
 8019d84:	6a0e      	ldr	r6, [r1, #32]
 8019d86:	2c00      	cmp	r4, #0
 8019d88:	d033      	beq.n	8019df2 <rcutils_string_map_reserve+0x9a>
 8019d8a:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8019d8e:	d242      	bcs.n	8019e16 <rcutils_string_map_reserve+0xbe>
 8019d90:	00a7      	lsls	r7, r4, #2
 8019d92:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8019d96:	6808      	ldr	r0, [r1, #0]
 8019d98:	4632      	mov	r2, r6
 8019d9a:	4639      	mov	r1, r7
 8019d9c:	47c0      	blx	r8
 8019d9e:	2800      	cmp	r0, #0
 8019da0:	d039      	beq.n	8019e16 <rcutils_string_map_reserve+0xbe>
 8019da2:	682b      	ldr	r3, [r5, #0]
 8019da4:	4632      	mov	r2, r6
 8019da6:	4639      	mov	r1, r7
 8019da8:	6018      	str	r0, [r3, #0]
 8019daa:	6858      	ldr	r0, [r3, #4]
 8019dac:	47c0      	blx	r8
 8019dae:	2800      	cmp	r0, #0
 8019db0:	d031      	beq.n	8019e16 <rcutils_string_map_reserve+0xbe>
 8019db2:	682d      	ldr	r5, [r5, #0]
 8019db4:	68ab      	ldr	r3, [r5, #8]
 8019db6:	6068      	str	r0, [r5, #4]
 8019db8:	42a3      	cmp	r3, r4
 8019dba:	d225      	bcs.n	8019e08 <rcutils_string_map_reserve+0xb0>
 8019dbc:	682a      	ldr	r2, [r5, #0]
 8019dbe:	eb00 0c07 	add.w	ip, r0, r7
 8019dc2:	0099      	lsls	r1, r3, #2
 8019dc4:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8019dc8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8019dcc:	45e6      	cmp	lr, ip
 8019dce:	d203      	bcs.n	8019dd8 <rcutils_string_map_reserve+0x80>
 8019dd0:	eb02 0c07 	add.w	ip, r2, r7
 8019dd4:	4566      	cmp	r6, ip
 8019dd6:	d322      	bcc.n	8019e1e <rcutils_string_map_reserve+0xc6>
 8019dd8:	1ae3      	subs	r3, r4, r3
 8019dda:	4670      	mov	r0, lr
 8019ddc:	2100      	movs	r1, #0
 8019dde:	009a      	lsls	r2, r3, #2
 8019de0:	9201      	str	r2, [sp, #4]
 8019de2:	f002 fb13 	bl	801c40c <memset>
 8019de6:	9a01      	ldr	r2, [sp, #4]
 8019de8:	2100      	movs	r1, #0
 8019dea:	4630      	mov	r0, r6
 8019dec:	f002 fb0e 	bl	801c40c <memset>
 8019df0:	e00a      	b.n	8019e08 <rcutils_string_map_reserve+0xb0>
 8019df2:	694f      	ldr	r7, [r1, #20]
 8019df4:	6808      	ldr	r0, [r1, #0]
 8019df6:	4631      	mov	r1, r6
 8019df8:	47b8      	blx	r7
 8019dfa:	682b      	ldr	r3, [r5, #0]
 8019dfc:	4631      	mov	r1, r6
 8019dfe:	6858      	ldr	r0, [r3, #4]
 8019e00:	601c      	str	r4, [r3, #0]
 8019e02:	47b8      	blx	r7
 8019e04:	682d      	ldr	r5, [r5, #0]
 8019e06:	606c      	str	r4, [r5, #4]
 8019e08:	2000      	movs	r0, #0
 8019e0a:	60ac      	str	r4, [r5, #8]
 8019e0c:	b002      	add	sp, #8
 8019e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e12:	2000      	movs	r0, #0
 8019e14:	e7b0      	b.n	8019d78 <rcutils_string_map_reserve+0x20>
 8019e16:	200a      	movs	r0, #10
 8019e18:	e7ae      	b.n	8019d78 <rcutils_string_map_reserve+0x20>
 8019e1a:	200b      	movs	r0, #11
 8019e1c:	4770      	bx	lr
 8019e1e:	1f0b      	subs	r3, r1, #4
 8019e20:	4418      	add	r0, r3
 8019e22:	4413      	add	r3, r2
 8019e24:	3a04      	subs	r2, #4
 8019e26:	4417      	add	r7, r2
 8019e28:	2200      	movs	r2, #0
 8019e2a:	f843 2f04 	str.w	r2, [r3, #4]!
 8019e2e:	42bb      	cmp	r3, r7
 8019e30:	f840 2f04 	str.w	r2, [r0, #4]!
 8019e34:	d1f9      	bne.n	8019e2a <rcutils_string_map_reserve+0xd2>
 8019e36:	e7e7      	b.n	8019e08 <rcutils_string_map_reserve+0xb0>

08019e38 <rcutils_string_map_init>:
 8019e38:	b082      	sub	sp, #8
 8019e3a:	b570      	push	{r4, r5, r6, lr}
 8019e3c:	ac04      	add	r4, sp, #16
 8019e3e:	e884 000c 	stmia.w	r4, {r2, r3}
 8019e42:	b380      	cbz	r0, 8019ea6 <rcutils_string_map_init+0x6e>
 8019e44:	6806      	ldr	r6, [r0, #0]
 8019e46:	4604      	mov	r4, r0
 8019e48:	b12e      	cbz	r6, 8019e56 <rcutils_string_map_init+0x1e>
 8019e4a:	251e      	movs	r5, #30
 8019e4c:	4628      	mov	r0, r5
 8019e4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019e52:	b002      	add	sp, #8
 8019e54:	4770      	bx	lr
 8019e56:	a804      	add	r0, sp, #16
 8019e58:	460d      	mov	r5, r1
 8019e5a:	f7f7 fb1b 	bl	8011494 <rcutils_allocator_is_valid>
 8019e5e:	b310      	cbz	r0, 8019ea6 <rcutils_string_map_init+0x6e>
 8019e60:	9b04      	ldr	r3, [sp, #16]
 8019e62:	2024      	movs	r0, #36	; 0x24
 8019e64:	9908      	ldr	r1, [sp, #32]
 8019e66:	4798      	blx	r3
 8019e68:	6020      	str	r0, [r4, #0]
 8019e6a:	b310      	cbz	r0, 8019eb2 <rcutils_string_map_init+0x7a>
 8019e6c:	f10d 0e10 	add.w	lr, sp, #16
 8019e70:	f100 0c10 	add.w	ip, r0, #16
 8019e74:	e9c0 6600 	strd	r6, r6, [r0]
 8019e78:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8019e7c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019e80:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019e84:	f8de 3000 	ldr.w	r3, [lr]
 8019e88:	4629      	mov	r1, r5
 8019e8a:	4620      	mov	r0, r4
 8019e8c:	f8cc 3000 	str.w	r3, [ip]
 8019e90:	f7ff ff62 	bl	8019d58 <rcutils_string_map_reserve>
 8019e94:	4605      	mov	r5, r0
 8019e96:	2800      	cmp	r0, #0
 8019e98:	d0d8      	beq.n	8019e4c <rcutils_string_map_init+0x14>
 8019e9a:	9b05      	ldr	r3, [sp, #20]
 8019e9c:	9908      	ldr	r1, [sp, #32]
 8019e9e:	6820      	ldr	r0, [r4, #0]
 8019ea0:	4798      	blx	r3
 8019ea2:	6026      	str	r6, [r4, #0]
 8019ea4:	e7d2      	b.n	8019e4c <rcutils_string_map_init+0x14>
 8019ea6:	250b      	movs	r5, #11
 8019ea8:	4628      	mov	r0, r5
 8019eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019eae:	b002      	add	sp, #8
 8019eb0:	4770      	bx	lr
 8019eb2:	250a      	movs	r5, #10
 8019eb4:	e7ca      	b.n	8019e4c <rcutils_string_map_init+0x14>
 8019eb6:	bf00      	nop

08019eb8 <rcutils_string_map_fini>:
 8019eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ebc:	b082      	sub	sp, #8
 8019ebe:	2800      	cmp	r0, #0
 8019ec0:	d03a      	beq.n	8019f38 <rcutils_string_map_fini+0x80>
 8019ec2:	6804      	ldr	r4, [r0, #0]
 8019ec4:	4606      	mov	r6, r0
 8019ec6:	2c00      	cmp	r4, #0
 8019ec8:	d032      	beq.n	8019f30 <rcutils_string_map_fini+0x78>
 8019eca:	68a3      	ldr	r3, [r4, #8]
 8019ecc:	b32b      	cbz	r3, 8019f1a <rcutils_string_map_fini+0x62>
 8019ece:	2500      	movs	r5, #0
 8019ed0:	6822      	ldr	r2, [r4, #0]
 8019ed2:	462f      	mov	r7, r5
 8019ed4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8019ed8:	b1e0      	cbz	r0, 8019f14 <rcutils_string_map_fini+0x5c>
 8019eda:	6a21      	ldr	r1, [r4, #32]
 8019edc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8019ee0:	9101      	str	r1, [sp, #4]
 8019ee2:	47c0      	blx	r8
 8019ee4:	9901      	ldr	r1, [sp, #4]
 8019ee6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8019eea:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8019eee:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8019ef2:	47c0      	blx	r8
 8019ef4:	68e3      	ldr	r3, [r4, #12]
 8019ef6:	6862      	ldr	r2, [r4, #4]
 8019ef8:	3b01      	subs	r3, #1
 8019efa:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8019efe:	3501      	adds	r5, #1
 8019f00:	60e3      	str	r3, [r4, #12]
 8019f02:	6834      	ldr	r4, [r6, #0]
 8019f04:	68a3      	ldr	r3, [r4, #8]
 8019f06:	429d      	cmp	r5, r3
 8019f08:	d207      	bcs.n	8019f1a <rcutils_string_map_fini+0x62>
 8019f0a:	6822      	ldr	r2, [r4, #0]
 8019f0c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8019f10:	2800      	cmp	r0, #0
 8019f12:	d1e2      	bne.n	8019eda <rcutils_string_map_fini+0x22>
 8019f14:	3501      	adds	r5, #1
 8019f16:	429d      	cmp	r5, r3
 8019f18:	d3dc      	bcc.n	8019ed4 <rcutils_string_map_fini+0x1c>
 8019f1a:	2100      	movs	r1, #0
 8019f1c:	4630      	mov	r0, r6
 8019f1e:	f7ff ff1b 	bl	8019d58 <rcutils_string_map_reserve>
 8019f22:	4604      	mov	r4, r0
 8019f24:	b920      	cbnz	r0, 8019f30 <rcutils_string_map_fini+0x78>
 8019f26:	6830      	ldr	r0, [r6, #0]
 8019f28:	6943      	ldr	r3, [r0, #20]
 8019f2a:	6a01      	ldr	r1, [r0, #32]
 8019f2c:	4798      	blx	r3
 8019f2e:	6034      	str	r4, [r6, #0]
 8019f30:	4620      	mov	r0, r4
 8019f32:	b002      	add	sp, #8
 8019f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f38:	240b      	movs	r4, #11
 8019f3a:	4620      	mov	r0, r4
 8019f3c:	b002      	add	sp, #8
 8019f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f42:	bf00      	nop

08019f44 <rcutils_string_map_getn>:
 8019f44:	b378      	cbz	r0, 8019fa6 <rcutils_string_map_getn+0x62>
 8019f46:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f4a:	f8d0 b000 	ldr.w	fp, [r0]
 8019f4e:	f1bb 0f00 	cmp.w	fp, #0
 8019f52:	d01f      	beq.n	8019f94 <rcutils_string_map_getn+0x50>
 8019f54:	fab1 f481 	clz	r4, r1
 8019f58:	4688      	mov	r8, r1
 8019f5a:	0964      	lsrs	r4, r4, #5
 8019f5c:	b1d1      	cbz	r1, 8019f94 <rcutils_string_map_getn+0x50>
 8019f5e:	f8db 7008 	ldr.w	r7, [fp, #8]
 8019f62:	f8db 6000 	ldr.w	r6, [fp]
 8019f66:	b1af      	cbz	r7, 8019f94 <rcutils_string_map_getn+0x50>
 8019f68:	4691      	mov	r9, r2
 8019f6a:	3e04      	subs	r6, #4
 8019f6c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8019f70:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8019f74:	3401      	adds	r4, #1
 8019f76:	4628      	mov	r0, r5
 8019f78:	b155      	cbz	r5, 8019f90 <rcutils_string_map_getn+0x4c>
 8019f7a:	f7e6 f96b 	bl	8000254 <strlen>
 8019f7e:	4602      	mov	r2, r0
 8019f80:	4629      	mov	r1, r5
 8019f82:	4640      	mov	r0, r8
 8019f84:	454a      	cmp	r2, r9
 8019f86:	bf38      	it	cc
 8019f88:	464a      	movcc	r2, r9
 8019f8a:	f002 fa54 	bl	801c436 <strncmp>
 8019f8e:	b120      	cbz	r0, 8019f9a <rcutils_string_map_getn+0x56>
 8019f90:	42a7      	cmp	r7, r4
 8019f92:	d1eb      	bne.n	8019f6c <rcutils_string_map_getn+0x28>
 8019f94:	2000      	movs	r0, #0
 8019f96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f9a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8019f9e:	f853 000a 	ldr.w	r0, [r3, sl]
 8019fa2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fa6:	4770      	bx	lr

08019fa8 <rmw_get_zero_initialized_context>:
 8019fa8:	b510      	push	{r4, lr}
 8019faa:	4604      	mov	r4, r0
 8019fac:	3010      	adds	r0, #16
 8019fae:	f7f7 fc8f 	bl	80118d0 <rmw_get_zero_initialized_init_options>
 8019fb2:	2300      	movs	r3, #0
 8019fb4:	4620      	mov	r0, r4
 8019fb6:	60a3      	str	r3, [r4, #8]
 8019fb8:	64a3      	str	r3, [r4, #72]	; 0x48
 8019fba:	64e3      	str	r3, [r4, #76]	; 0x4c
 8019fbc:	ed9f 7b02 	vldr	d7, [pc, #8]	; 8019fc8 <rmw_get_zero_initialized_context+0x20>
 8019fc0:	ed84 7b00 	vstr	d7, [r4]
 8019fc4:	bd10      	pop	{r4, pc}
 8019fc6:	bf00      	nop
	...

08019fd0 <rmw_time_equal>:
 8019fd0:	b4f0      	push	{r4, r5, r6, r7}
 8019fd2:	b084      	sub	sp, #16
 8019fd4:	ac04      	add	r4, sp, #16
 8019fd6:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8019fda:	4603      	mov	r3, r0
 8019fdc:	4925      	ldr	r1, [pc, #148]	; (801a074 <rmw_time_equal+0xa4>)
 8019fde:	9d01      	ldr	r5, [sp, #4]
 8019fe0:	4610      	mov	r0, r2
 8019fe2:	4299      	cmp	r1, r3
 8019fe4:	f04f 0202 	mov.w	r2, #2
 8019fe8:	9e03      	ldr	r6, [sp, #12]
 8019fea:	41aa      	sbcs	r2, r5
 8019fec:	d330      	bcc.n	801a050 <rmw_time_equal+0x80>
 8019fee:	4c22      	ldr	r4, [pc, #136]	; (801a078 <rmw_time_equal+0xa8>)
 8019ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019ff4:	fba3 3204 	umull	r3, r2, r3, r4
 8019ff8:	fb04 2205 	mla	r2, r4, r5, r2
 8019ffc:	43dd      	mvns	r5, r3
 8019ffe:	1a8c      	subs	r4, r1, r2
 801a000:	4285      	cmp	r5, r0
 801a002:	41b4      	sbcs	r4, r6
 801a004:	d332      	bcc.n	801a06c <rmw_time_equal+0x9c>
 801a006:	eb10 0c03 	adds.w	ip, r0, r3
 801a00a:	eb42 0106 	adc.w	r1, r2, r6
 801a00e:	4819      	ldr	r0, [pc, #100]	; (801a074 <rmw_time_equal+0xa4>)
 801a010:	2202      	movs	r2, #2
 801a012:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a014:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801a016:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 801a01a:	4298      	cmp	r0, r3
 801a01c:	41b2      	sbcs	r2, r6
 801a01e:	d31c      	bcc.n	801a05a <rmw_time_equal+0x8a>
 801a020:	4c15      	ldr	r4, [pc, #84]	; (801a078 <rmw_time_equal+0xa8>)
 801a022:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a026:	fba3 3204 	umull	r3, r2, r3, r4
 801a02a:	fb04 2206 	mla	r2, r4, r6, r2
 801a02e:	43de      	mvns	r6, r3
 801a030:	1a84      	subs	r4, r0, r2
 801a032:	42ae      	cmp	r6, r5
 801a034:	41bc      	sbcs	r4, r7
 801a036:	d315      	bcc.n	801a064 <rmw_time_equal+0x94>
 801a038:	195b      	adds	r3, r3, r5
 801a03a:	eb42 0207 	adc.w	r2, r2, r7
 801a03e:	428a      	cmp	r2, r1
 801a040:	bf08      	it	eq
 801a042:	4563      	cmpeq	r3, ip
 801a044:	bf0c      	ite	eq
 801a046:	2001      	moveq	r0, #1
 801a048:	2000      	movne	r0, #0
 801a04a:	b004      	add	sp, #16
 801a04c:	bcf0      	pop	{r4, r5, r6, r7}
 801a04e:	4770      	bx	lr
 801a050:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801a054:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a058:	e7d9      	b.n	801a00e <rmw_time_equal+0x3e>
 801a05a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a05e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801a062:	e7ec      	b.n	801a03e <rmw_time_equal+0x6e>
 801a064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a068:	4602      	mov	r2, r0
 801a06a:	e7e8      	b.n	801a03e <rmw_time_equal+0x6e>
 801a06c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801a070:	e7cd      	b.n	801a00e <rmw_time_equal+0x3e>
 801a072:	bf00      	nop
 801a074:	25c17d04 	.word	0x25c17d04
 801a078:	3b9aca00 	.word	0x3b9aca00

0801a07c <rmw_time_total_nsec>:
 801a07c:	b470      	push	{r4, r5, r6}
 801a07e:	b085      	sub	sp, #20
 801a080:	ac04      	add	r4, sp, #16
 801a082:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801a086:	4603      	mov	r3, r0
 801a088:	4913      	ldr	r1, [pc, #76]	; (801a0d8 <rmw_time_total_nsec+0x5c>)
 801a08a:	9d01      	ldr	r5, [sp, #4]
 801a08c:	4610      	mov	r0, r2
 801a08e:	4299      	cmp	r1, r3
 801a090:	f04f 0202 	mov.w	r2, #2
 801a094:	9e03      	ldr	r6, [sp, #12]
 801a096:	41aa      	sbcs	r2, r5
 801a098:	d311      	bcc.n	801a0be <rmw_time_total_nsec+0x42>
 801a09a:	4c10      	ldr	r4, [pc, #64]	; (801a0dc <rmw_time_total_nsec+0x60>)
 801a09c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a0a0:	fba3 3204 	umull	r3, r2, r3, r4
 801a0a4:	fb04 2205 	mla	r2, r4, r5, r2
 801a0a8:	43dd      	mvns	r5, r3
 801a0aa:	1a8c      	subs	r4, r1, r2
 801a0ac:	4285      	cmp	r5, r0
 801a0ae:	41b4      	sbcs	r4, r6
 801a0b0:	d30c      	bcc.n	801a0cc <rmw_time_total_nsec+0x50>
 801a0b2:	1818      	adds	r0, r3, r0
 801a0b4:	eb42 0106 	adc.w	r1, r2, r6
 801a0b8:	b005      	add	sp, #20
 801a0ba:	bc70      	pop	{r4, r5, r6}
 801a0bc:	4770      	bx	lr
 801a0be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0c2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a0c6:	b005      	add	sp, #20
 801a0c8:	bc70      	pop	{r4, r5, r6}
 801a0ca:	4770      	bx	lr
 801a0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0d0:	b005      	add	sp, #20
 801a0d2:	bc70      	pop	{r4, r5, r6}
 801a0d4:	4770      	bx	lr
 801a0d6:	bf00      	nop
 801a0d8:	25c17d04 	.word	0x25c17d04
 801a0dc:	3b9aca00 	.word	0x3b9aca00

0801a0e0 <rmw_validate_full_topic_name>:
 801a0e0:	2800      	cmp	r0, #0
 801a0e2:	d05d      	beq.n	801a1a0 <rmw_validate_full_topic_name+0xc0>
 801a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a0e8:	460d      	mov	r5, r1
 801a0ea:	2900      	cmp	r1, #0
 801a0ec:	d05a      	beq.n	801a1a4 <rmw_validate_full_topic_name+0xc4>
 801a0ee:	4604      	mov	r4, r0
 801a0f0:	4616      	mov	r6, r2
 801a0f2:	f7e6 f8af 	bl	8000254 <strlen>
 801a0f6:	b150      	cbz	r0, 801a10e <rmw_validate_full_topic_name+0x2e>
 801a0f8:	7823      	ldrb	r3, [r4, #0]
 801a0fa:	2b2f      	cmp	r3, #47	; 0x2f
 801a0fc:	d00e      	beq.n	801a11c <rmw_validate_full_topic_name+0x3c>
 801a0fe:	2302      	movs	r3, #2
 801a100:	602b      	str	r3, [r5, #0]
 801a102:	b146      	cbz	r6, 801a116 <rmw_validate_full_topic_name+0x36>
 801a104:	2300      	movs	r3, #0
 801a106:	4618      	mov	r0, r3
 801a108:	6033      	str	r3, [r6, #0]
 801a10a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a10e:	2301      	movs	r3, #1
 801a110:	602b      	str	r3, [r5, #0]
 801a112:	2e00      	cmp	r6, #0
 801a114:	d1f6      	bne.n	801a104 <rmw_validate_full_topic_name+0x24>
 801a116:	2000      	movs	r0, #0
 801a118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a11c:	1e43      	subs	r3, r0, #1
 801a11e:	5ce2      	ldrb	r2, [r4, r3]
 801a120:	2a2f      	cmp	r2, #47	; 0x2f
 801a122:	d041      	beq.n	801a1a8 <rmw_validate_full_topic_name+0xc8>
 801a124:	1e62      	subs	r2, r4, #1
 801a126:	f1c4 0e01 	rsb	lr, r4, #1
 801a12a:	eb02 0800 	add.w	r8, r2, r0
 801a12e:	eb0e 0702 	add.w	r7, lr, r2
 801a132:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801a136:	f023 0120 	bic.w	r1, r3, #32
 801a13a:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 801a13e:	3941      	subs	r1, #65	; 0x41
 801a140:	2919      	cmp	r1, #25
 801a142:	d90f      	bls.n	801a164 <rmw_validate_full_topic_name+0x84>
 801a144:	f1bc 0f0a 	cmp.w	ip, #10
 801a148:	d90c      	bls.n	801a164 <rmw_validate_full_topic_name+0x84>
 801a14a:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 801a14e:	fab3 f383 	clz	r3, r3
 801a152:	095b      	lsrs	r3, r3, #5
 801a154:	b933      	cbnz	r3, 801a164 <rmw_validate_full_topic_name+0x84>
 801a156:	2204      	movs	r2, #4
 801a158:	602a      	str	r2, [r5, #0]
 801a15a:	2e00      	cmp	r6, #0
 801a15c:	d0db      	beq.n	801a116 <rmw_validate_full_topic_name+0x36>
 801a15e:	4618      	mov	r0, r3
 801a160:	6037      	str	r7, [r6, #0]
 801a162:	e7d2      	b.n	801a10a <rmw_validate_full_topic_name+0x2a>
 801a164:	4542      	cmp	r2, r8
 801a166:	d1e2      	bne.n	801a12e <rmw_validate_full_topic_name+0x4e>
 801a168:	2301      	movs	r3, #1
 801a16a:	4f1a      	ldr	r7, [pc, #104]	; (801a1d4 <rmw_validate_full_topic_name+0xf4>)
 801a16c:	e004      	b.n	801a178 <rmw_validate_full_topic_name+0x98>
 801a16e:	4298      	cmp	r0, r3
 801a170:	f104 0401 	add.w	r4, r4, #1
 801a174:	4613      	mov	r3, r2
 801a176:	d91c      	bls.n	801a1b2 <rmw_validate_full_topic_name+0xd2>
 801a178:	4298      	cmp	r0, r3
 801a17a:	f103 0201 	add.w	r2, r3, #1
 801a17e:	d0f6      	beq.n	801a16e <rmw_validate_full_topic_name+0x8e>
 801a180:	7821      	ldrb	r1, [r4, #0]
 801a182:	292f      	cmp	r1, #47	; 0x2f
 801a184:	d1f3      	bne.n	801a16e <rmw_validate_full_topic_name+0x8e>
 801a186:	7861      	ldrb	r1, [r4, #1]
 801a188:	292f      	cmp	r1, #47	; 0x2f
 801a18a:	d01e      	beq.n	801a1ca <rmw_validate_full_topic_name+0xea>
 801a18c:	5dc9      	ldrb	r1, [r1, r7]
 801a18e:	0749      	lsls	r1, r1, #29
 801a190:	d5ed      	bpl.n	801a16e <rmw_validate_full_topic_name+0x8e>
 801a192:	2206      	movs	r2, #6
 801a194:	602a      	str	r2, [r5, #0]
 801a196:	2e00      	cmp	r6, #0
 801a198:	d0bd      	beq.n	801a116 <rmw_validate_full_topic_name+0x36>
 801a19a:	2000      	movs	r0, #0
 801a19c:	6033      	str	r3, [r6, #0]
 801a19e:	e7b4      	b.n	801a10a <rmw_validate_full_topic_name+0x2a>
 801a1a0:	200b      	movs	r0, #11
 801a1a2:	4770      	bx	lr
 801a1a4:	200b      	movs	r0, #11
 801a1a6:	e7b0      	b.n	801a10a <rmw_validate_full_topic_name+0x2a>
 801a1a8:	2203      	movs	r2, #3
 801a1aa:	602a      	str	r2, [r5, #0]
 801a1ac:	2e00      	cmp	r6, #0
 801a1ae:	d1f4      	bne.n	801a19a <rmw_validate_full_topic_name+0xba>
 801a1b0:	e7b1      	b.n	801a116 <rmw_validate_full_topic_name+0x36>
 801a1b2:	28f7      	cmp	r0, #247	; 0xf7
 801a1b4:	d803      	bhi.n	801a1be <rmw_validate_full_topic_name+0xde>
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	4618      	mov	r0, r3
 801a1ba:	602b      	str	r3, [r5, #0]
 801a1bc:	e7a5      	b.n	801a10a <rmw_validate_full_topic_name+0x2a>
 801a1be:	2307      	movs	r3, #7
 801a1c0:	602b      	str	r3, [r5, #0]
 801a1c2:	2e00      	cmp	r6, #0
 801a1c4:	d0a7      	beq.n	801a116 <rmw_validate_full_topic_name+0x36>
 801a1c6:	23f6      	movs	r3, #246	; 0xf6
 801a1c8:	e7e7      	b.n	801a19a <rmw_validate_full_topic_name+0xba>
 801a1ca:	2205      	movs	r2, #5
 801a1cc:	602a      	str	r2, [r5, #0]
 801a1ce:	2e00      	cmp	r6, #0
 801a1d0:	d1e3      	bne.n	801a19a <rmw_validate_full_topic_name+0xba>
 801a1d2:	e7a0      	b.n	801a116 <rmw_validate_full_topic_name+0x36>
 801a1d4:	0801e64c 	.word	0x0801e64c

0801a1d8 <on_status>:
 801a1d8:	b082      	sub	sp, #8
 801a1da:	b002      	add	sp, #8
 801a1dc:	4770      	bx	lr
 801a1de:	bf00      	nop

0801a1e0 <on_topic>:
 801a1e0:	4a23      	ldr	r2, [pc, #140]	; (801a270 <on_topic+0x90>)
 801a1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a1e6:	6812      	ldr	r2, [r2, #0]
 801a1e8:	b094      	sub	sp, #80	; 0x50
 801a1ea:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801a1ec:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 801a1f0:	9113      	str	r1, [sp, #76]	; 0x4c
 801a1f2:	9312      	str	r3, [sp, #72]	; 0x48
 801a1f4:	b3c2      	cbz	r2, 801a268 <on_topic+0x88>
 801a1f6:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 801a1fa:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 801a1fe:	e001      	b.n	801a204 <on_topic+0x24>
 801a200:	6852      	ldr	r2, [r2, #4]
 801a202:	b38a      	cbz	r2, 801a268 <on_topic+0x88>
 801a204:	6894      	ldr	r4, [r2, #8]
 801a206:	8aa3      	ldrh	r3, [r4, #20]
 801a208:	428b      	cmp	r3, r1
 801a20a:	d1f9      	bne.n	801a200 <on_topic+0x20>
 801a20c:	7da3      	ldrb	r3, [r4, #22]
 801a20e:	4283      	cmp	r3, r0
 801a210:	d1f6      	bne.n	801a200 <on_topic+0x20>
 801a212:	2248      	movs	r2, #72	; 0x48
 801a214:	f104 0130 	add.w	r1, r4, #48	; 0x30
 801a218:	4668      	mov	r0, sp
 801a21a:	f002 f9c0 	bl	801c59e <memcpy>
 801a21e:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801a222:	4620      	mov	r0, r4
 801a224:	cb0c      	ldmia	r3, {r2, r3}
 801a226:	f7f8 fff7 	bl	8013218 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a22a:	4607      	mov	r7, r0
 801a22c:	b1e0      	cbz	r0, 801a268 <on_topic+0x88>
 801a22e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801a232:	462a      	mov	r2, r5
 801a234:	4630      	mov	r0, r6
 801a236:	f108 0110 	add.w	r1, r8, #16
 801a23a:	f7f9 fc91 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 801a23e:	b930      	cbnz	r0, 801a24e <on_topic+0x6e>
 801a240:	4639      	mov	r1, r7
 801a242:	480c      	ldr	r0, [pc, #48]	; (801a274 <on_topic+0x94>)
 801a244:	b014      	add	sp, #80	; 0x50
 801a246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a24a:	f000 b8bd 	b.w	801a3c8 <put_memory>
 801a24e:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801a252:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801a256:	f000 fb33 	bl	801a8c0 <rmw_uros_epoch_nanos>
 801a25a:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 801a25e:	2305      	movs	r3, #5
 801a260:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a264:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 801a268:	b014      	add	sp, #80	; 0x50
 801a26a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a26e:	bf00      	nop
 801a270:	200129ac 	.word	0x200129ac
 801a274:	2001299c 	.word	0x2001299c

0801a278 <on_request>:
 801a278:	4824      	ldr	r0, [pc, #144]	; (801a30c <on_request+0x94>)
 801a27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a27e:	6800      	ldr	r0, [r0, #0]
 801a280:	b094      	sub	sp, #80	; 0x50
 801a282:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801a284:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801a288:	9113      	str	r1, [sp, #76]	; 0x4c
 801a28a:	2800      	cmp	r0, #0
 801a28c:	d03b      	beq.n	801a306 <on_request+0x8e>
 801a28e:	461d      	mov	r5, r3
 801a290:	e001      	b.n	801a296 <on_request+0x1e>
 801a292:	6840      	ldr	r0, [r0, #4]
 801a294:	b3b8      	cbz	r0, 801a306 <on_request+0x8e>
 801a296:	6884      	ldr	r4, [r0, #8]
 801a298:	8b21      	ldrh	r1, [r4, #24]
 801a29a:	4291      	cmp	r1, r2
 801a29c:	d1f9      	bne.n	801a292 <on_request+0x1a>
 801a29e:	2248      	movs	r2, #72	; 0x48
 801a2a0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801a2a4:	4668      	mov	r0, sp
 801a2a6:	f002 f97a 	bl	801c59e <memcpy>
 801a2aa:	f104 0320 	add.w	r3, r4, #32
 801a2ae:	4620      	mov	r0, r4
 801a2b0:	cb0c      	ldmia	r3, {r2, r3}
 801a2b2:	f7f8 ffb1 	bl	8013218 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a2b6:	4680      	mov	r8, r0
 801a2b8:	b328      	cbz	r0, 801a306 <on_request+0x8e>
 801a2ba:	4630      	mov	r0, r6
 801a2bc:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a2c0:	463a      	mov	r2, r7
 801a2c2:	f106 0110 	add.w	r1, r6, #16
 801a2c6:	f7f9 fc4b 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 801a2ca:	b930      	cbnz	r0, 801a2da <on_request+0x62>
 801a2cc:	4641      	mov	r1, r8
 801a2ce:	4810      	ldr	r0, [pc, #64]	; (801a310 <on_request+0x98>)
 801a2d0:	b014      	add	sp, #80	; 0x50
 801a2d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2d6:	f000 b877 	b.w	801a3c8 <put_memory>
 801a2da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801a2dc:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 801a2e0:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801a2e4:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801a2e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801a2ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 801a2f0:	e88c 0003 	stmia.w	ip, {r0, r1}
 801a2f4:	f000 fae4 	bl	801a8c0 <rmw_uros_epoch_nanos>
 801a2f8:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801a2fc:	2303      	movs	r3, #3
 801a2fe:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a302:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801a306:	b014      	add	sp, #80	; 0x50
 801a308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a30c:	2001297c 	.word	0x2001297c
 801a310:	2001299c 	.word	0x2001299c

0801a314 <on_reply>:
 801a314:	4822      	ldr	r0, [pc, #136]	; (801a3a0 <on_reply+0x8c>)
 801a316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a31a:	6800      	ldr	r0, [r0, #0]
 801a31c:	b094      	sub	sp, #80	; 0x50
 801a31e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801a320:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801a324:	9113      	str	r1, [sp, #76]	; 0x4c
 801a326:	b3b8      	cbz	r0, 801a398 <on_reply+0x84>
 801a328:	461d      	mov	r5, r3
 801a32a:	e001      	b.n	801a330 <on_reply+0x1c>
 801a32c:	6840      	ldr	r0, [r0, #4]
 801a32e:	b398      	cbz	r0, 801a398 <on_reply+0x84>
 801a330:	6884      	ldr	r4, [r0, #8]
 801a332:	8b21      	ldrh	r1, [r4, #24]
 801a334:	4291      	cmp	r1, r2
 801a336:	d1f9      	bne.n	801a32c <on_reply+0x18>
 801a338:	2248      	movs	r2, #72	; 0x48
 801a33a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801a33e:	4668      	mov	r0, sp
 801a340:	f002 f92d 	bl	801c59e <memcpy>
 801a344:	f104 0320 	add.w	r3, r4, #32
 801a348:	4620      	mov	r0, r4
 801a34a:	cb0c      	ldmia	r3, {r2, r3}
 801a34c:	f7f8 ff64 	bl	8013218 <rmw_uxrce_get_static_input_buffer_for_entity>
 801a350:	4680      	mov	r8, r0
 801a352:	b308      	cbz	r0, 801a398 <on_reply+0x84>
 801a354:	4630      	mov	r0, r6
 801a356:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801a35a:	463a      	mov	r2, r7
 801a35c:	f106 0110 	add.w	r1, r6, #16
 801a360:	f7f9 fbfe 	bl	8013b60 <ucdr_deserialize_array_uint8_t>
 801a364:	b930      	cbnz	r0, 801a374 <on_reply+0x60>
 801a366:	4641      	mov	r1, r8
 801a368:	480e      	ldr	r0, [pc, #56]	; (801a3a4 <on_reply+0x90>)
 801a36a:	b014      	add	sp, #80	; 0x50
 801a36c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a370:	f000 b82a 	b.w	801a3c8 <put_memory>
 801a374:	2200      	movs	r2, #0
 801a376:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 801a37a:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 801a37e:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801a382:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801a386:	f000 fa9b 	bl	801a8c0 <rmw_uros_epoch_nanos>
 801a38a:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 801a38e:	2304      	movs	r3, #4
 801a390:	e942 0102 	strd	r0, r1, [r2, #-8]
 801a394:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 801a398:	b014      	add	sp, #80	; 0x50
 801a39a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a39e:	bf00      	nop
 801a3a0:	2000e08c 	.word	0x2000e08c
 801a3a4:	2001299c 	.word	0x2001299c

0801a3a8 <get_memory>:
 801a3a8:	4603      	mov	r3, r0
 801a3aa:	6840      	ldr	r0, [r0, #4]
 801a3ac:	b158      	cbz	r0, 801a3c6 <get_memory+0x1e>
 801a3ae:	6842      	ldr	r2, [r0, #4]
 801a3b0:	605a      	str	r2, [r3, #4]
 801a3b2:	b10a      	cbz	r2, 801a3b8 <get_memory+0x10>
 801a3b4:	2100      	movs	r1, #0
 801a3b6:	6011      	str	r1, [r2, #0]
 801a3b8:	681a      	ldr	r2, [r3, #0]
 801a3ba:	6042      	str	r2, [r0, #4]
 801a3bc:	b102      	cbz	r2, 801a3c0 <get_memory+0x18>
 801a3be:	6010      	str	r0, [r2, #0]
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	6002      	str	r2, [r0, #0]
 801a3c4:	6018      	str	r0, [r3, #0]
 801a3c6:	4770      	bx	lr

0801a3c8 <put_memory>:
 801a3c8:	680b      	ldr	r3, [r1, #0]
 801a3ca:	b10b      	cbz	r3, 801a3d0 <put_memory+0x8>
 801a3cc:	684a      	ldr	r2, [r1, #4]
 801a3ce:	605a      	str	r2, [r3, #4]
 801a3d0:	684a      	ldr	r2, [r1, #4]
 801a3d2:	b102      	cbz	r2, 801a3d6 <put_memory+0xe>
 801a3d4:	6013      	str	r3, [r2, #0]
 801a3d6:	6803      	ldr	r3, [r0, #0]
 801a3d8:	428b      	cmp	r3, r1
 801a3da:	6843      	ldr	r3, [r0, #4]
 801a3dc:	bf08      	it	eq
 801a3de:	6002      	streq	r2, [r0, #0]
 801a3e0:	604b      	str	r3, [r1, #4]
 801a3e2:	b103      	cbz	r3, 801a3e6 <put_memory+0x1e>
 801a3e4:	6019      	str	r1, [r3, #0]
 801a3e6:	2300      	movs	r3, #0
 801a3e8:	600b      	str	r3, [r1, #0]
 801a3ea:	6041      	str	r1, [r0, #4]
 801a3ec:	4770      	bx	lr
 801a3ee:	bf00      	nop

0801a3f0 <rmw_destroy_client>:
 801a3f0:	b570      	push	{r4, r5, r6, lr}
 801a3f2:	b128      	cbz	r0, 801a400 <rmw_destroy_client+0x10>
 801a3f4:	4604      	mov	r4, r0
 801a3f6:	6800      	ldr	r0, [r0, #0]
 801a3f8:	460d      	mov	r5, r1
 801a3fa:	f7f9 f921 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 801a3fe:	b910      	cbnz	r0, 801a406 <rmw_destroy_client+0x16>
 801a400:	2401      	movs	r4, #1
 801a402:	4620      	mov	r0, r4
 801a404:	bd70      	pop	{r4, r5, r6, pc}
 801a406:	6863      	ldr	r3, [r4, #4]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d0f9      	beq.n	801a400 <rmw_destroy_client+0x10>
 801a40c:	2d00      	cmp	r5, #0
 801a40e:	d0f7      	beq.n	801a400 <rmw_destroy_client+0x10>
 801a410:	6828      	ldr	r0, [r5, #0]
 801a412:	f7f9 f915 	bl	8013640 <is_uxrce_rmw_identifier_valid>
 801a416:	2800      	cmp	r0, #0
 801a418:	d0f2      	beq.n	801a400 <rmw_destroy_client+0x10>
 801a41a:	686e      	ldr	r6, [r5, #4]
 801a41c:	2e00      	cmp	r6, #0
 801a41e:	d0ef      	beq.n	801a400 <rmw_destroy_client+0x10>
 801a420:	6864      	ldr	r4, [r4, #4]
 801a422:	6932      	ldr	r2, [r6, #16]
 801a424:	6920      	ldr	r0, [r4, #16]
 801a426:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a42a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a42e:	6819      	ldr	r1, [r3, #0]
 801a430:	f7f9 ff62 	bl	80142f8 <uxr_buffer_cancel_data>
 801a434:	4602      	mov	r2, r0
 801a436:	6920      	ldr	r0, [r4, #16]
 801a438:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a43c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a440:	f7f8 ffec 	bl	801341c <run_xrce_session>
 801a444:	6920      	ldr	r0, [r4, #16]
 801a446:	6932      	ldr	r2, [r6, #16]
 801a448:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a44c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a450:	6819      	ldr	r1, [r3, #0]
 801a452:	f7f9 fbed 	bl	8013c30 <uxr_buffer_delete_entity>
 801a456:	4602      	mov	r2, r0
 801a458:	6920      	ldr	r0, [r4, #16]
 801a45a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a45e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a462:	f7f8 ffdb 	bl	801341c <run_xrce_session>
 801a466:	4603      	mov	r3, r0
 801a468:	4628      	mov	r0, r5
 801a46a:	2b00      	cmp	r3, #0
 801a46c:	bf14      	ite	ne
 801a46e:	2400      	movne	r4, #0
 801a470:	2402      	moveq	r4, #2
 801a472:	f7f8 feaf 	bl	80131d4 <rmw_uxrce_fini_client_memory>
 801a476:	e7c4      	b.n	801a402 <rmw_destroy_client+0x12>

0801a478 <rmw_get_implementation_identifier>:
 801a478:	4b01      	ldr	r3, [pc, #4]	; (801a480 <rmw_get_implementation_identifier+0x8>)
 801a47a:	6818      	ldr	r0, [r3, #0]
 801a47c:	4770      	bx	lr
 801a47e:	bf00      	nop
 801a480:	0801e5a4 	.word	0x0801e5a4

0801a484 <rmw_create_guard_condition>:
 801a484:	b538      	push	{r3, r4, r5, lr}
 801a486:	4605      	mov	r5, r0
 801a488:	4808      	ldr	r0, [pc, #32]	; (801a4ac <rmw_create_guard_condition+0x28>)
 801a48a:	f7ff ff8d 	bl	801a3a8 <get_memory>
 801a48e:	4603      	mov	r3, r0
 801a490:	b148      	cbz	r0, 801a4a6 <rmw_create_guard_condition+0x22>
 801a492:	6884      	ldr	r4, [r0, #8]
 801a494:	2300      	movs	r3, #0
 801a496:	61e5      	str	r5, [r4, #28]
 801a498:	7423      	strb	r3, [r4, #16]
 801a49a:	f7ff ffed 	bl	801a478 <rmw_get_implementation_identifier>
 801a49e:	f104 0314 	add.w	r3, r4, #20
 801a4a2:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	bd38      	pop	{r3, r4, r5, pc}
 801a4aa:	bf00      	nop
 801a4ac:	2001293c 	.word	0x2001293c

0801a4b0 <rmw_destroy_guard_condition>:
 801a4b0:	b508      	push	{r3, lr}
 801a4b2:	4b08      	ldr	r3, [pc, #32]	; (801a4d4 <rmw_destroy_guard_condition+0x24>)
 801a4b4:	6819      	ldr	r1, [r3, #0]
 801a4b6:	b911      	cbnz	r1, 801a4be <rmw_destroy_guard_condition+0xe>
 801a4b8:	e00a      	b.n	801a4d0 <rmw_destroy_guard_condition+0x20>
 801a4ba:	6849      	ldr	r1, [r1, #4]
 801a4bc:	b141      	cbz	r1, 801a4d0 <rmw_destroy_guard_condition+0x20>
 801a4be:	688b      	ldr	r3, [r1, #8]
 801a4c0:	3314      	adds	r3, #20
 801a4c2:	4298      	cmp	r0, r3
 801a4c4:	d1f9      	bne.n	801a4ba <rmw_destroy_guard_condition+0xa>
 801a4c6:	4803      	ldr	r0, [pc, #12]	; (801a4d4 <rmw_destroy_guard_condition+0x24>)
 801a4c8:	f7ff ff7e 	bl	801a3c8 <put_memory>
 801a4cc:	2000      	movs	r0, #0
 801a4ce:	bd08      	pop	{r3, pc}
 801a4d0:	2001      	movs	r0, #1
 801a4d2:	bd08      	pop	{r3, pc}
 801a4d4:	2001293c 	.word	0x2001293c

0801a4d8 <create_topic>:
 801a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4dc:	4605      	mov	r5, r0
 801a4de:	b084      	sub	sp, #16
 801a4e0:	4822      	ldr	r0, [pc, #136]	; (801a56c <create_topic+0x94>)
 801a4e2:	460f      	mov	r7, r1
 801a4e4:	4616      	mov	r6, r2
 801a4e6:	f7ff ff5f 	bl	801a3a8 <get_memory>
 801a4ea:	4604      	mov	r4, r0
 801a4ec:	2800      	cmp	r0, #0
 801a4ee:	d039      	beq.n	801a564 <create_topic+0x8c>
 801a4f0:	692b      	ldr	r3, [r5, #16]
 801a4f2:	2102      	movs	r1, #2
 801a4f4:	6884      	ldr	r4, [r0, #8]
 801a4f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a4fa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801a574 <create_topic+0x9c>
 801a4fe:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 801a502:	1c42      	adds	r2, r0, #1
 801a504:	e9c4 6505 	strd	r6, r5, [r4, #20]
 801a508:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 801a50c:	f7f9 fe8a 	bl	8014224 <uxr_object_id>
 801a510:	223c      	movs	r2, #60	; 0x3c
 801a512:	6120      	str	r0, [r4, #16]
 801a514:	4641      	mov	r1, r8
 801a516:	4638      	mov	r0, r7
 801a518:	f7f9 f87a 	bl	8013610 <generate_topic_name>
 801a51c:	b1f0      	cbz	r0, 801a55c <create_topic+0x84>
 801a51e:	4f14      	ldr	r7, [pc, #80]	; (801a570 <create_topic+0x98>)
 801a520:	4630      	mov	r0, r6
 801a522:	2264      	movs	r2, #100	; 0x64
 801a524:	4639      	mov	r1, r7
 801a526:	f7f9 f845 	bl	80135b4 <generate_type_name>
 801a52a:	b1b8      	cbz	r0, 801a55c <create_topic+0x84>
 801a52c:	6928      	ldr	r0, [r5, #16]
 801a52e:	2106      	movs	r1, #6
 801a530:	696b      	ldr	r3, [r5, #20]
 801a532:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801a536:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a53a:	f8cd 8000 	str.w	r8, [sp]
 801a53e:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801a542:	6811      	ldr	r1, [r2, #0]
 801a544:	6922      	ldr	r2, [r4, #16]
 801a546:	f7f9 fbf1 	bl	8013d2c <uxr_buffer_create_topic_bin>
 801a54a:	4602      	mov	r2, r0
 801a54c:	6928      	ldr	r0, [r5, #16]
 801a54e:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801a552:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801a556:	f7f8 ff61 	bl	801341c <run_xrce_session>
 801a55a:	b918      	cbnz	r0, 801a564 <create_topic+0x8c>
 801a55c:	4620      	mov	r0, r4
 801a55e:	2400      	movs	r4, #0
 801a560:	f7f8 fe4e 	bl	8013200 <rmw_uxrce_fini_topic_memory>
 801a564:	4620      	mov	r0, r4
 801a566:	b004      	add	sp, #16
 801a568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a56c:	200129bc 	.word	0x200129bc
 801a570:	20012a50 	.word	0x20012a50
 801a574:	20012a14 	.word	0x20012a14

0801a578 <destroy_topic>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	6985      	ldr	r5, [r0, #24]
 801a57c:	b1dd      	cbz	r5, 801a5b6 <destroy_topic+0x3e>
 801a57e:	4604      	mov	r4, r0
 801a580:	6928      	ldr	r0, [r5, #16]
 801a582:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801a586:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a58a:	6922      	ldr	r2, [r4, #16]
 801a58c:	6819      	ldr	r1, [r3, #0]
 801a58e:	f7f9 fb4f 	bl	8013c30 <uxr_buffer_delete_entity>
 801a592:	4602      	mov	r2, r0
 801a594:	6928      	ldr	r0, [r5, #16]
 801a596:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801a59a:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801a59e:	f7f8 ff3d 	bl	801341c <run_xrce_session>
 801a5a2:	4603      	mov	r3, r0
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	bf14      	ite	ne
 801a5aa:	2400      	movne	r4, #0
 801a5ac:	2402      	moveq	r4, #2
 801a5ae:	f7f8 fe27 	bl	8013200 <rmw_uxrce_fini_topic_memory>
 801a5b2:	4620      	mov	r0, r4
 801a5b4:	bd38      	pop	{r3, r4, r5, pc}
 801a5b6:	2401      	movs	r4, #1
 801a5b8:	4620      	mov	r0, r4
 801a5ba:	bd38      	pop	{r3, r4, r5, pc}

0801a5bc <rmw_wait>:
 801a5bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a5c0:	4698      	mov	r8, r3
 801a5c2:	ea40 0301 	orr.w	r3, r0, r1
 801a5c6:	b089      	sub	sp, #36	; 0x24
 801a5c8:	ea48 0303 	orr.w	r3, r8, r3
 801a5cc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801a5ce:	4313      	orrs	r3, r2
 801a5d0:	f000 8106 	beq.w	801a7e0 <rmw_wait+0x224>
 801a5d4:	4605      	mov	r5, r0
 801a5d6:	460e      	mov	r6, r1
 801a5d8:	4691      	mov	r9, r2
 801a5da:	b16c      	cbz	r4, 801a5f8 <rmw_wait+0x3c>
 801a5dc:	4ba6      	ldr	r3, [pc, #664]	; (801a878 <rmw_wait+0x2bc>)
 801a5de:	af04      	add	r7, sp, #16
 801a5e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801a5e2:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 801a5e6:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801a5ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a5ee:	f7ff fcef 	bl	8019fd0 <rmw_time_equal>
 801a5f2:	2800      	cmp	r0, #0
 801a5f4:	f000 810b 	beq.w	801a80e <rmw_wait+0x252>
 801a5f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a5fc:	f7f8 fe90 	bl	8013320 <rmw_uxrce_clean_expired_static_input_buffer>
 801a600:	4b9e      	ldr	r3, [pc, #632]	; (801a87c <rmw_wait+0x2c0>)
 801a602:	681c      	ldr	r4, [r3, #0]
 801a604:	b14c      	cbz	r4, 801a61a <rmw_wait+0x5e>
 801a606:	4623      	mov	r3, r4
 801a608:	2100      	movs	r1, #0
 801a60a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 801a60e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a612:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 801a616:	2b00      	cmp	r3, #0
 801a618:	d1f7      	bne.n	801a60a <rmw_wait+0x4e>
 801a61a:	f1b9 0f00 	cmp.w	r9, #0
 801a61e:	d011      	beq.n	801a644 <rmw_wait+0x88>
 801a620:	f8d9 1000 	ldr.w	r1, [r9]
 801a624:	b171      	cbz	r1, 801a644 <rmw_wait+0x88>
 801a626:	f8d9 c004 	ldr.w	ip, [r9, #4]
 801a62a:	2300      	movs	r3, #0
 801a62c:	2001      	movs	r0, #1
 801a62e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a632:	3301      	adds	r3, #1
 801a634:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801a636:	4299      	cmp	r1, r3
 801a638:	6912      	ldr	r2, [r2, #16]
 801a63a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a63e:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a642:	d1f4      	bne.n	801a62e <rmw_wait+0x72>
 801a644:	f1b8 0f00 	cmp.w	r8, #0
 801a648:	d011      	beq.n	801a66e <rmw_wait+0xb2>
 801a64a:	f8d8 1000 	ldr.w	r1, [r8]
 801a64e:	b171      	cbz	r1, 801a66e <rmw_wait+0xb2>
 801a650:	f8d8 c004 	ldr.w	ip, [r8, #4]
 801a654:	2300      	movs	r3, #0
 801a656:	2001      	movs	r0, #1
 801a658:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a65c:	3301      	adds	r3, #1
 801a65e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 801a660:	4299      	cmp	r1, r3
 801a662:	6912      	ldr	r2, [r2, #16]
 801a664:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a668:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a66c:	d1f4      	bne.n	801a658 <rmw_wait+0x9c>
 801a66e:	b185      	cbz	r5, 801a692 <rmw_wait+0xd6>
 801a670:	6829      	ldr	r1, [r5, #0]
 801a672:	b171      	cbz	r1, 801a692 <rmw_wait+0xd6>
 801a674:	f8d5 c004 	ldr.w	ip, [r5, #4]
 801a678:	2300      	movs	r3, #0
 801a67a:	2001      	movs	r0, #1
 801a67c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801a680:	3301      	adds	r3, #1
 801a682:	6a12      	ldr	r2, [r2, #32]
 801a684:	4299      	cmp	r1, r3
 801a686:	6912      	ldr	r2, [r2, #16]
 801a688:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a68c:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 801a690:	d1f4      	bne.n	801a67c <rmw_wait+0xc0>
 801a692:	b344      	cbz	r4, 801a6e6 <rmw_wait+0x12a>
 801a694:	4622      	mov	r2, r4
 801a696:	2300      	movs	r3, #0
 801a698:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801a69c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 801a6a0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 801a6a4:	440b      	add	r3, r1
 801a6a6:	b2db      	uxtb	r3, r3
 801a6a8:	2a00      	cmp	r2, #0
 801a6aa:	d1f5      	bne.n	801a698 <rmw_wait+0xdc>
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d05f      	beq.n	801a770 <rmw_wait+0x1b4>
 801a6b0:	1c7a      	adds	r2, r7, #1
 801a6b2:	d00d      	beq.n	801a6d0 <rmw_wait+0x114>
 801a6b4:	ee07 7a90 	vmov	s15, r7
 801a6b8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a6bc:	ee07 3a90 	vmov	s15, r3
 801a6c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801a6c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801a6c8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801a6cc:	ee17 7a90 	vmov	r7, s15
 801a6d0:	68a0      	ldr	r0, [r4, #8]
 801a6d2:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 801a6d6:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	f040 808d 	bne.w	801a7fa <rmw_wait+0x23e>
 801a6e0:	6864      	ldr	r4, [r4, #4]
 801a6e2:	2c00      	cmp	r4, #0
 801a6e4:	d1f4      	bne.n	801a6d0 <rmw_wait+0x114>
 801a6e6:	f1b9 0f00 	cmp.w	r9, #0
 801a6ea:	f000 80a1 	beq.w	801a830 <rmw_wait+0x274>
 801a6ee:	f8d9 7000 	ldr.w	r7, [r9]
 801a6f2:	2f00      	cmp	r7, #0
 801a6f4:	f000 80a4 	beq.w	801a840 <rmw_wait+0x284>
 801a6f8:	2400      	movs	r4, #0
 801a6fa:	4627      	mov	r7, r4
 801a6fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a700:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a704:	f7f8 fde2 	bl	80132cc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a708:	2800      	cmp	r0, #0
 801a70a:	d03b      	beq.n	801a784 <rmw_wait+0x1c8>
 801a70c:	3401      	adds	r4, #1
 801a70e:	f8d9 3000 	ldr.w	r3, [r9]
 801a712:	2701      	movs	r7, #1
 801a714:	42a3      	cmp	r3, r4
 801a716:	d8f1      	bhi.n	801a6fc <rmw_wait+0x140>
 801a718:	2701      	movs	r7, #1
 801a71a:	f1b8 0f00 	cmp.w	r8, #0
 801a71e:	d010      	beq.n	801a742 <rmw_wait+0x186>
 801a720:	f8d8 3000 	ldr.w	r3, [r8]
 801a724:	b16b      	cbz	r3, 801a742 <rmw_wait+0x186>
 801a726:	2400      	movs	r4, #0
 801a728:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801a72c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a730:	f7f8 fdcc 	bl	80132cc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a734:	b370      	cbz	r0, 801a794 <rmw_wait+0x1d8>
 801a736:	3401      	adds	r4, #1
 801a738:	f8d8 3000 	ldr.w	r3, [r8]
 801a73c:	2701      	movs	r7, #1
 801a73e:	42a3      	cmp	r3, r4
 801a740:	d8f2      	bhi.n	801a728 <rmw_wait+0x16c>
 801a742:	2d00      	cmp	r5, #0
 801a744:	d035      	beq.n	801a7b2 <rmw_wait+0x1f6>
 801a746:	682b      	ldr	r3, [r5, #0]
 801a748:	b39b      	cbz	r3, 801a7b2 <rmw_wait+0x1f6>
 801a74a:	2400      	movs	r4, #0
 801a74c:	686b      	ldr	r3, [r5, #4]
 801a74e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801a752:	f7f8 fdbb 	bl	80132cc <rmw_uxrce_find_static_input_buffer_by_owner>
 801a756:	b328      	cbz	r0, 801a7a4 <rmw_wait+0x1e8>
 801a758:	3401      	adds	r4, #1
 801a75a:	682b      	ldr	r3, [r5, #0]
 801a75c:	2701      	movs	r7, #1
 801a75e:	42a3      	cmp	r3, r4
 801a760:	d8f4      	bhi.n	801a74c <rmw_wait+0x190>
 801a762:	2e00      	cmp	r6, #0
 801a764:	d03c      	beq.n	801a7e0 <rmw_wait+0x224>
 801a766:	6834      	ldr	r4, [r6, #0]
 801a768:	2c00      	cmp	r4, #0
 801a76a:	d039      	beq.n	801a7e0 <rmw_wait+0x224>
 801a76c:	2701      	movs	r7, #1
 801a76e:	e023      	b.n	801a7b8 <rmw_wait+0x1fc>
 801a770:	68a0      	ldr	r0, [r4, #8]
 801a772:	2100      	movs	r1, #0
 801a774:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a778:	f7fa fb54 	bl	8014e24 <uxr_run_session_timeout>
 801a77c:	6864      	ldr	r4, [r4, #4]
 801a77e:	2c00      	cmp	r4, #0
 801a780:	d1f6      	bne.n	801a770 <rmw_wait+0x1b4>
 801a782:	e7b0      	b.n	801a6e6 <rmw_wait+0x12a>
 801a784:	e9d9 3200 	ldrd	r3, r2, [r9]
 801a788:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a78c:	3401      	adds	r4, #1
 801a78e:	42a3      	cmp	r3, r4
 801a790:	d8b4      	bhi.n	801a6fc <rmw_wait+0x140>
 801a792:	e7c2      	b.n	801a71a <rmw_wait+0x15e>
 801a794:	e9d8 3200 	ldrd	r3, r2, [r8]
 801a798:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a79c:	3401      	adds	r4, #1
 801a79e:	429c      	cmp	r4, r3
 801a7a0:	d3c2      	bcc.n	801a728 <rmw_wait+0x16c>
 801a7a2:	e7ce      	b.n	801a742 <rmw_wait+0x186>
 801a7a4:	e9d5 3200 	ldrd	r3, r2, [r5]
 801a7a8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801a7ac:	3401      	adds	r4, #1
 801a7ae:	42a3      	cmp	r3, r4
 801a7b0:	d8cc      	bhi.n	801a74c <rmw_wait+0x190>
 801a7b2:	b1a6      	cbz	r6, 801a7de <rmw_wait+0x222>
 801a7b4:	6834      	ldr	r4, [r6, #0]
 801a7b6:	b194      	cbz	r4, 801a7de <rmw_wait+0x222>
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	461d      	mov	r5, r3
 801a7bc:	e004      	b.n	801a7c8 <rmw_wait+0x20c>
 801a7be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 801a7c2:	3301      	adds	r3, #1
 801a7c4:	42a3      	cmp	r3, r4
 801a7c6:	d00a      	beq.n	801a7de <rmw_wait+0x222>
 801a7c8:	6870      	ldr	r0, [r6, #4]
 801a7ca:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801a7ce:	7c0a      	ldrb	r2, [r1, #16]
 801a7d0:	2a00      	cmp	r2, #0
 801a7d2:	d0f4      	beq.n	801a7be <rmw_wait+0x202>
 801a7d4:	3301      	adds	r3, #1
 801a7d6:	4617      	mov	r7, r2
 801a7d8:	740d      	strb	r5, [r1, #16]
 801a7da:	42a3      	cmp	r3, r4
 801a7dc:	d1f4      	bne.n	801a7c8 <rmw_wait+0x20c>
 801a7de:	b147      	cbz	r7, 801a7f2 <rmw_wait+0x236>
 801a7e0:	2000      	movs	r0, #0
 801a7e2:	b009      	add	sp, #36	; 0x24
 801a7e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7e8:	b11e      	cbz	r6, 801a7f2 <rmw_wait+0x236>
 801a7ea:	6834      	ldr	r4, [r6, #0]
 801a7ec:	462f      	mov	r7, r5
 801a7ee:	2c00      	cmp	r4, #0
 801a7f0:	d1e2      	bne.n	801a7b8 <rmw_wait+0x1fc>
 801a7f2:	2002      	movs	r0, #2
 801a7f4:	b009      	add	sp, #36	; 0x24
 801a7f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7fa:	4639      	mov	r1, r7
 801a7fc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a800:	f7fa fb2a 	bl	8014e58 <uxr_run_session_until_data>
 801a804:	6864      	ldr	r4, [r4, #4]
 801a806:	2c00      	cmp	r4, #0
 801a808:	f47f af62 	bne.w	801a6d0 <rmw_wait+0x114>
 801a80c:	e76b      	b.n	801a6e6 <rmw_wait+0x12a>
 801a80e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801a812:	f7ff fc33 	bl	801a07c <rmw_time_total_nsec>
 801a816:	2300      	movs	r3, #0
 801a818:	4a19      	ldr	r2, [pc, #100]	; (801a880 <rmw_wait+0x2c4>)
 801a81a:	f7e5 fdc9 	bl	80003b0 <__aeabi_uldivmod>
 801a81e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 801a822:	4607      	mov	r7, r0
 801a824:	f171 0300 	sbcs.w	r3, r1, #0
 801a828:	bfa8      	it	ge
 801a82a:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 801a82e:	e6e5      	b.n	801a5fc <rmw_wait+0x40>
 801a830:	f1b8 0f00 	cmp.w	r8, #0
 801a834:	d00f      	beq.n	801a856 <rmw_wait+0x29a>
 801a836:	f8d8 3000 	ldr.w	r3, [r8]
 801a83a:	b193      	cbz	r3, 801a862 <rmw_wait+0x2a6>
 801a83c:	464f      	mov	r7, r9
 801a83e:	e772      	b.n	801a726 <rmw_wait+0x16a>
 801a840:	f1b8 0f00 	cmp.w	r8, #0
 801a844:	d007      	beq.n	801a856 <rmw_wait+0x29a>
 801a846:	f8d8 3000 	ldr.w	r3, [r8]
 801a84a:	2b00      	cmp	r3, #0
 801a84c:	f47f af6b 	bne.w	801a726 <rmw_wait+0x16a>
 801a850:	b155      	cbz	r5, 801a868 <rmw_wait+0x2ac>
 801a852:	461f      	mov	r7, r3
 801a854:	e777      	b.n	801a746 <rmw_wait+0x18a>
 801a856:	2d00      	cmp	r5, #0
 801a858:	d0c6      	beq.n	801a7e8 <rmw_wait+0x22c>
 801a85a:	682b      	ldr	r3, [r5, #0]
 801a85c:	b143      	cbz	r3, 801a870 <rmw_wait+0x2b4>
 801a85e:	4647      	mov	r7, r8
 801a860:	e773      	b.n	801a74a <rmw_wait+0x18e>
 801a862:	b10d      	cbz	r5, 801a868 <rmw_wait+0x2ac>
 801a864:	464f      	mov	r7, r9
 801a866:	e76e      	b.n	801a746 <rmw_wait+0x18a>
 801a868:	462f      	mov	r7, r5
 801a86a:	2e00      	cmp	r6, #0
 801a86c:	d1a2      	bne.n	801a7b4 <rmw_wait+0x1f8>
 801a86e:	e7c0      	b.n	801a7f2 <rmw_wait+0x236>
 801a870:	4647      	mov	r7, r8
 801a872:	2e00      	cmp	r6, #0
 801a874:	d19e      	bne.n	801a7b4 <rmw_wait+0x1f8>
 801a876:	e7bc      	b.n	801a7f2 <rmw_wait+0x236>
 801a878:	0801d3b8 	.word	0x0801d3b8
 801a87c:	2001298c 	.word	0x2001298c
 801a880:	000f4240 	.word	0x000f4240

0801a884 <rmw_create_wait_set>:
 801a884:	b508      	push	{r3, lr}
 801a886:	4803      	ldr	r0, [pc, #12]	; (801a894 <rmw_create_wait_set+0x10>)
 801a888:	f7ff fd8e 	bl	801a3a8 <get_memory>
 801a88c:	b108      	cbz	r0, 801a892 <rmw_create_wait_set+0xe>
 801a88e:	6880      	ldr	r0, [r0, #8]
 801a890:	3010      	adds	r0, #16
 801a892:	bd08      	pop	{r3, pc}
 801a894:	200129cc 	.word	0x200129cc

0801a898 <rmw_destroy_wait_set>:
 801a898:	b508      	push	{r3, lr}
 801a89a:	4b08      	ldr	r3, [pc, #32]	; (801a8bc <rmw_destroy_wait_set+0x24>)
 801a89c:	6819      	ldr	r1, [r3, #0]
 801a89e:	b911      	cbnz	r1, 801a8a6 <rmw_destroy_wait_set+0xe>
 801a8a0:	e00a      	b.n	801a8b8 <rmw_destroy_wait_set+0x20>
 801a8a2:	6849      	ldr	r1, [r1, #4]
 801a8a4:	b141      	cbz	r1, 801a8b8 <rmw_destroy_wait_set+0x20>
 801a8a6:	688b      	ldr	r3, [r1, #8]
 801a8a8:	3310      	adds	r3, #16
 801a8aa:	4298      	cmp	r0, r3
 801a8ac:	d1f9      	bne.n	801a8a2 <rmw_destroy_wait_set+0xa>
 801a8ae:	4803      	ldr	r0, [pc, #12]	; (801a8bc <rmw_destroy_wait_set+0x24>)
 801a8b0:	f7ff fd8a 	bl	801a3c8 <put_memory>
 801a8b4:	2000      	movs	r0, #0
 801a8b6:	bd08      	pop	{r3, pc}
 801a8b8:	2001      	movs	r0, #1
 801a8ba:	bd08      	pop	{r3, pc}
 801a8bc:	200129cc 	.word	0x200129cc

0801a8c0 <rmw_uros_epoch_nanos>:
 801a8c0:	4b05      	ldr	r3, [pc, #20]	; (801a8d8 <rmw_uros_epoch_nanos+0x18>)
 801a8c2:	681b      	ldr	r3, [r3, #0]
 801a8c4:	b123      	cbz	r3, 801a8d0 <rmw_uros_epoch_nanos+0x10>
 801a8c6:	6898      	ldr	r0, [r3, #8]
 801a8c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801a8cc:	f7f9 bf20 	b.w	8014710 <uxr_epoch_nanos>
 801a8d0:	2000      	movs	r0, #0
 801a8d2:	2100      	movs	r1, #0
 801a8d4:	4770      	bx	lr
 801a8d6:	bf00      	nop
 801a8d8:	2001298c 	.word	0x2001298c

0801a8dc <std_msgs__msg__String__init>:
 801a8dc:	b538      	push	{r3, r4, r5, lr}
 801a8de:	4604      	mov	r4, r0
 801a8e0:	b128      	cbz	r0, 801a8ee <std_msgs__msg__String__init+0x12>
 801a8e2:	f7f8 fed3 	bl	801368c <rosidl_runtime_c__String__init>
 801a8e6:	4605      	mov	r5, r0
 801a8e8:	b120      	cbz	r0, 801a8f4 <std_msgs__msg__String__init+0x18>
 801a8ea:	4628      	mov	r0, r5
 801a8ec:	bd38      	pop	{r3, r4, r5, pc}
 801a8ee:	4605      	mov	r5, r0
 801a8f0:	4628      	mov	r0, r5
 801a8f2:	bd38      	pop	{r3, r4, r5, pc}
 801a8f4:	4620      	mov	r0, r4
 801a8f6:	f7f8 fedf 	bl	80136b8 <rosidl_runtime_c__String__fini>
 801a8fa:	4628      	mov	r0, r5
 801a8fc:	bd38      	pop	{r3, r4, r5, pc}
 801a8fe:	bf00      	nop

0801a900 <std_msgs__msg__String__fini>:
 801a900:	b108      	cbz	r0, 801a906 <std_msgs__msg__String__fini+0x6>
 801a902:	f7f8 bed9 	b.w	80136b8 <rosidl_runtime_c__String__fini>
 801a906:	4770      	bx	lr

0801a908 <ucdr_serialize_string>:
 801a908:	b510      	push	{r4, lr}
 801a90a:	b082      	sub	sp, #8
 801a90c:	4604      	mov	r4, r0
 801a90e:	4608      	mov	r0, r1
 801a910:	9101      	str	r1, [sp, #4]
 801a912:	f7e5 fc9f 	bl	8000254 <strlen>
 801a916:	4602      	mov	r2, r0
 801a918:	9901      	ldr	r1, [sp, #4]
 801a91a:	4620      	mov	r0, r4
 801a91c:	3201      	adds	r2, #1
 801a91e:	b002      	add	sp, #8
 801a920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a924:	f7f4 bf54 	b.w	800f7d0 <ucdr_serialize_sequence_char>

0801a928 <ucdr_deserialize_string>:
 801a928:	b500      	push	{lr}
 801a92a:	b083      	sub	sp, #12
 801a92c:	ab01      	add	r3, sp, #4
 801a92e:	f7f4 ff61 	bl	800f7f4 <ucdr_deserialize_sequence_char>
 801a932:	b003      	add	sp, #12
 801a934:	f85d fb04 	ldr.w	pc, [sp], #4

0801a938 <uxr_init_input_best_effort_stream>:
 801a938:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a93c:	8003      	strh	r3, [r0, #0]
 801a93e:	4770      	bx	lr

0801a940 <uxr_reset_input_best_effort_stream>:
 801a940:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a944:	8003      	strh	r3, [r0, #0]
 801a946:	4770      	bx	lr

0801a948 <uxr_receive_best_effort_message>:
 801a948:	b538      	push	{r3, r4, r5, lr}
 801a94a:	4604      	mov	r4, r0
 801a94c:	8800      	ldrh	r0, [r0, #0]
 801a94e:	460d      	mov	r5, r1
 801a950:	f000 fd46 	bl	801b3e0 <uxr_seq_num_cmp>
 801a954:	4603      	mov	r3, r0
 801a956:	0fc0      	lsrs	r0, r0, #31
 801a958:	2b00      	cmp	r3, #0
 801a95a:	bfb8      	it	lt
 801a95c:	8025      	strhlt	r5, [r4, #0]
 801a95e:	bd38      	pop	{r3, r4, r5, pc}

0801a960 <on_full_input_buffer>:
 801a960:	b570      	push	{r4, r5, r6, lr}
 801a962:	460c      	mov	r4, r1
 801a964:	4605      	mov	r5, r0
 801a966:	8908      	ldrh	r0, [r1, #8]
 801a968:	682b      	ldr	r3, [r5, #0]
 801a96a:	7d26      	ldrb	r6, [r4, #20]
 801a96c:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a970:	fbb2 f2f0 	udiv	r2, r2, r0
 801a974:	eba3 0c01 	sub.w	ip, r3, r1
 801a978:	fbbc fcf2 	udiv	ip, ip, r2
 801a97c:	f10c 0c01 	add.w	ip, ip, #1
 801a980:	fa1f f38c 	uxth.w	r3, ip
 801a984:	fbb3 fcf0 	udiv	ip, r3, r0
 801a988:	fb00 331c 	mls	r3, r0, ip, r3
 801a98c:	b29b      	uxth	r3, r3
 801a98e:	fb02 f303 	mul.w	r3, r2, r3
 801a992:	1d18      	adds	r0, r3, #4
 801a994:	4408      	add	r0, r1
 801a996:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a99a:	b116      	cbz	r6, 801a9a2 <on_full_input_buffer+0x42>
 801a99c:	2600      	movs	r6, #0
 801a99e:	f840 6c04 	str.w	r6, [r0, #-4]
 801a9a2:	2a03      	cmp	r2, #3
 801a9a4:	d801      	bhi.n	801a9aa <on_full_input_buffer+0x4a>
 801a9a6:	2001      	movs	r0, #1
 801a9a8:	bd70      	pop	{r4, r5, r6, pc}
 801a9aa:	3308      	adds	r3, #8
 801a9ac:	4628      	mov	r0, r5
 801a9ae:	3a04      	subs	r2, #4
 801a9b0:	4419      	add	r1, r3
 801a9b2:	692b      	ldr	r3, [r5, #16]
 801a9b4:	f7f4 fe90 	bl	800f6d8 <ucdr_init_buffer_origin>
 801a9b8:	4628      	mov	r0, r5
 801a9ba:	4622      	mov	r2, r4
 801a9bc:	4902      	ldr	r1, [pc, #8]	; (801a9c8 <on_full_input_buffer+0x68>)
 801a9be:	f7f4 fe67 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 801a9c2:	2000      	movs	r0, #0
 801a9c4:	bd70      	pop	{r4, r5, r6, pc}
 801a9c6:	bf00      	nop
 801a9c8:	0801a961 	.word	0x0801a961

0801a9cc <uxr_init_input_reliable_stream>:
 801a9cc:	b510      	push	{r4, lr}
 801a9ce:	e9c0 1200 	strd	r1, r2, [r0]
 801a9d2:	2400      	movs	r4, #0
 801a9d4:	9a02      	ldr	r2, [sp, #8]
 801a9d6:	8103      	strh	r3, [r0, #8]
 801a9d8:	6102      	str	r2, [r0, #16]
 801a9da:	7504      	strb	r4, [r0, #20]
 801a9dc:	b1c3      	cbz	r3, 801aa10 <uxr_init_input_reliable_stream+0x44>
 801a9de:	600c      	str	r4, [r1, #0]
 801a9e0:	8901      	ldrh	r1, [r0, #8]
 801a9e2:	2901      	cmp	r1, #1
 801a9e4:	d914      	bls.n	801aa10 <uxr_init_input_reliable_stream+0x44>
 801a9e6:	f04f 0c01 	mov.w	ip, #1
 801a9ea:	6843      	ldr	r3, [r0, #4]
 801a9ec:	f10c 0e01 	add.w	lr, ip, #1
 801a9f0:	fbbc f2f1 	udiv	r2, ip, r1
 801a9f4:	fbb3 f3f1 	udiv	r3, r3, r1
 801a9f8:	fb01 c212 	mls	r2, r1, r2, ip
 801a9fc:	fa1f fc8e 	uxth.w	ip, lr
 801aa00:	b292      	uxth	r2, r2
 801aa02:	fb02 f303 	mul.w	r3, r2, r3
 801aa06:	6802      	ldr	r2, [r0, #0]
 801aa08:	50d4      	str	r4, [r2, r3]
 801aa0a:	8901      	ldrh	r1, [r0, #8]
 801aa0c:	4561      	cmp	r1, ip
 801aa0e:	d8ec      	bhi.n	801a9ea <uxr_init_input_reliable_stream+0x1e>
 801aa10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa14:	60c3      	str	r3, [r0, #12]
 801aa16:	bd10      	pop	{r4, pc}

0801aa18 <uxr_reset_input_reliable_stream>:
 801aa18:	8901      	ldrh	r1, [r0, #8]
 801aa1a:	b1d9      	cbz	r1, 801aa54 <uxr_reset_input_reliable_stream+0x3c>
 801aa1c:	b510      	push	{r4, lr}
 801aa1e:	f04f 0e00 	mov.w	lr, #0
 801aa22:	46f4      	mov	ip, lr
 801aa24:	4674      	mov	r4, lr
 801aa26:	6843      	ldr	r3, [r0, #4]
 801aa28:	f10e 0e01 	add.w	lr, lr, #1
 801aa2c:	fbbc f2f1 	udiv	r2, ip, r1
 801aa30:	fbb3 f3f1 	udiv	r3, r3, r1
 801aa34:	fb01 c212 	mls	r2, r1, r2, ip
 801aa38:	fa1f fc8e 	uxth.w	ip, lr
 801aa3c:	b292      	uxth	r2, r2
 801aa3e:	fb02 f303 	mul.w	r3, r2, r3
 801aa42:	6802      	ldr	r2, [r0, #0]
 801aa44:	50d4      	str	r4, [r2, r3]
 801aa46:	8901      	ldrh	r1, [r0, #8]
 801aa48:	4561      	cmp	r1, ip
 801aa4a:	d8ec      	bhi.n	801aa26 <uxr_reset_input_reliable_stream+0xe>
 801aa4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa50:	60c3      	str	r3, [r0, #12]
 801aa52:	bd10      	pop	{r4, pc}
 801aa54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aa58:	60c3      	str	r3, [r0, #12]
 801aa5a:	4770      	bx	lr

0801aa5c <uxr_receive_reliable_message>:
 801aa5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801aa60:	4604      	mov	r4, r0
 801aa62:	460d      	mov	r5, r1
 801aa64:	8901      	ldrh	r1, [r0, #8]
 801aa66:	4617      	mov	r7, r2
 801aa68:	8980      	ldrh	r0, [r0, #12]
 801aa6a:	4698      	mov	r8, r3
 801aa6c:	f000 fcb0 	bl	801b3d0 <uxr_seq_num_add>
 801aa70:	4629      	mov	r1, r5
 801aa72:	4606      	mov	r6, r0
 801aa74:	89a0      	ldrh	r0, [r4, #12]
 801aa76:	f000 fcb3 	bl	801b3e0 <uxr_seq_num_cmp>
 801aa7a:	2800      	cmp	r0, #0
 801aa7c:	db0a      	blt.n	801aa94 <uxr_receive_reliable_message+0x38>
 801aa7e:	2600      	movs	r6, #0
 801aa80:	4629      	mov	r1, r5
 801aa82:	89e0      	ldrh	r0, [r4, #14]
 801aa84:	f000 fcac 	bl	801b3e0 <uxr_seq_num_cmp>
 801aa88:	2800      	cmp	r0, #0
 801aa8a:	da00      	bge.n	801aa8e <uxr_receive_reliable_message+0x32>
 801aa8c:	81e5      	strh	r5, [r4, #14]
 801aa8e:	4630      	mov	r0, r6
 801aa90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aa94:	4630      	mov	r0, r6
 801aa96:	4629      	mov	r1, r5
 801aa98:	f000 fca2 	bl	801b3e0 <uxr_seq_num_cmp>
 801aa9c:	2800      	cmp	r0, #0
 801aa9e:	dbee      	blt.n	801aa7e <uxr_receive_reliable_message+0x22>
 801aaa0:	6923      	ldr	r3, [r4, #16]
 801aaa2:	4638      	mov	r0, r7
 801aaa4:	4798      	blx	r3
 801aaa6:	4681      	mov	r9, r0
 801aaa8:	2101      	movs	r1, #1
 801aaaa:	89a0      	ldrh	r0, [r4, #12]
 801aaac:	f000 fc90 	bl	801b3d0 <uxr_seq_num_add>
 801aab0:	f1b9 0f00 	cmp.w	r9, #0
 801aab4:	bf08      	it	eq
 801aab6:	4285      	cmpeq	r5, r0
 801aab8:	bf0c      	ite	eq
 801aaba:	2601      	moveq	r6, #1
 801aabc:	2600      	movne	r6, #0
 801aabe:	d104      	bne.n	801aaca <uxr_receive_reliable_message+0x6e>
 801aac0:	2300      	movs	r3, #0
 801aac2:	9a08      	ldr	r2, [sp, #32]
 801aac4:	81a0      	strh	r0, [r4, #12]
 801aac6:	7013      	strb	r3, [r2, #0]
 801aac8:	e7da      	b.n	801aa80 <uxr_receive_reliable_message+0x24>
 801aaca:	8922      	ldrh	r2, [r4, #8]
 801aacc:	6863      	ldr	r3, [r4, #4]
 801aace:	fbb5 f0f2 	udiv	r0, r5, r2
 801aad2:	fbb3 f3f2 	udiv	r3, r3, r2
 801aad6:	fb02 5010 	mls	r0, r2, r0, r5
 801aada:	b280      	uxth	r0, r0
 801aadc:	fb03 f000 	mul.w	r0, r3, r0
 801aae0:	6823      	ldr	r3, [r4, #0]
 801aae2:	3004      	adds	r0, #4
 801aae4:	4418      	add	r0, r3
 801aae6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d1c7      	bne.n	801aa7e <uxr_receive_reliable_message+0x22>
 801aaee:	4639      	mov	r1, r7
 801aaf0:	4642      	mov	r2, r8
 801aaf2:	f001 fd54 	bl	801c59e <memcpy>
 801aaf6:	8921      	ldrh	r1, [r4, #8]
 801aaf8:	6863      	ldr	r3, [r4, #4]
 801aafa:	fbb5 f2f1 	udiv	r2, r5, r1
 801aafe:	fbb3 f3f1 	udiv	r3, r3, r1
 801ab02:	fb01 5212 	mls	r2, r1, r2, r5
 801ab06:	b292      	uxth	r2, r2
 801ab08:	fb02 f303 	mul.w	r3, r2, r3
 801ab0c:	6822      	ldr	r2, [r4, #0]
 801ab0e:	f842 8003 	str.w	r8, [r2, r3]
 801ab12:	2301      	movs	r3, #1
 801ab14:	9a08      	ldr	r2, [sp, #32]
 801ab16:	7013      	strb	r3, [r2, #0]
 801ab18:	f1b9 0f00 	cmp.w	r9, #0
 801ab1c:	d0af      	beq.n	801aa7e <uxr_receive_reliable_message+0x22>
 801ab1e:	89a6      	ldrh	r6, [r4, #12]
 801ab20:	2101      	movs	r1, #1
 801ab22:	4630      	mov	r0, r6
 801ab24:	f000 fc54 	bl	801b3d0 <uxr_seq_num_add>
 801ab28:	8921      	ldrh	r1, [r4, #8]
 801ab2a:	6863      	ldr	r3, [r4, #4]
 801ab2c:	4606      	mov	r6, r0
 801ab2e:	fbb0 f2f1 	udiv	r2, r0, r1
 801ab32:	fbb3 f3f1 	udiv	r3, r3, r1
 801ab36:	fb01 0212 	mls	r2, r1, r2, r0
 801ab3a:	6820      	ldr	r0, [r4, #0]
 801ab3c:	b292      	uxth	r2, r2
 801ab3e:	fb02 f303 	mul.w	r3, r2, r3
 801ab42:	3304      	adds	r3, #4
 801ab44:	4418      	add	r0, r3
 801ab46:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d097      	beq.n	801aa7e <uxr_receive_reliable_message+0x22>
 801ab4e:	6923      	ldr	r3, [r4, #16]
 801ab50:	4798      	blx	r3
 801ab52:	2802      	cmp	r0, #2
 801ab54:	d002      	beq.n	801ab5c <uxr_receive_reliable_message+0x100>
 801ab56:	2801      	cmp	r0, #1
 801ab58:	d0e2      	beq.n	801ab20 <uxr_receive_reliable_message+0xc4>
 801ab5a:	e790      	b.n	801aa7e <uxr_receive_reliable_message+0x22>
 801ab5c:	2601      	movs	r6, #1
 801ab5e:	e78f      	b.n	801aa80 <uxr_receive_reliable_message+0x24>

0801ab60 <uxr_next_input_reliable_buffer_available>:
 801ab60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab64:	4604      	mov	r4, r0
 801ab66:	460f      	mov	r7, r1
 801ab68:	8980      	ldrh	r0, [r0, #12]
 801ab6a:	2101      	movs	r1, #1
 801ab6c:	4690      	mov	r8, r2
 801ab6e:	f000 fc2f 	bl	801b3d0 <uxr_seq_num_add>
 801ab72:	8922      	ldrh	r2, [r4, #8]
 801ab74:	6866      	ldr	r6, [r4, #4]
 801ab76:	fbb0 f3f2 	udiv	r3, r0, r2
 801ab7a:	fbb6 f6f2 	udiv	r6, r6, r2
 801ab7e:	fb02 0313 	mls	r3, r2, r3, r0
 801ab82:	b29b      	uxth	r3, r3
 801ab84:	fb03 f606 	mul.w	r6, r3, r6
 801ab88:	6823      	ldr	r3, [r4, #0]
 801ab8a:	3604      	adds	r6, #4
 801ab8c:	441e      	add	r6, r3
 801ab8e:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801ab92:	f1b9 0f00 	cmp.w	r9, #0
 801ab96:	d023      	beq.n	801abe0 <uxr_next_input_reliable_buffer_available+0x80>
 801ab98:	4605      	mov	r5, r0
 801ab9a:	6923      	ldr	r3, [r4, #16]
 801ab9c:	4630      	mov	r0, r6
 801ab9e:	4798      	blx	r3
 801aba0:	4682      	mov	sl, r0
 801aba2:	b300      	cbz	r0, 801abe6 <uxr_next_input_reliable_buffer_available+0x86>
 801aba4:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801aba8:	2101      	movs	r1, #1
 801abaa:	4650      	mov	r0, sl
 801abac:	f000 fc10 	bl	801b3d0 <uxr_seq_num_add>
 801abb0:	8921      	ldrh	r1, [r4, #8]
 801abb2:	4682      	mov	sl, r0
 801abb4:	6863      	ldr	r3, [r4, #4]
 801abb6:	6820      	ldr	r0, [r4, #0]
 801abb8:	fbba f2f1 	udiv	r2, sl, r1
 801abbc:	fbb3 f3f1 	udiv	r3, r3, r1
 801abc0:	fb01 a212 	mls	r2, r1, r2, sl
 801abc4:	b292      	uxth	r2, r2
 801abc6:	fb02 f303 	mul.w	r3, r2, r3
 801abca:	3304      	adds	r3, #4
 801abcc:	4418      	add	r0, r3
 801abce:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801abd2:	b12b      	cbz	r3, 801abe0 <uxr_next_input_reliable_buffer_available+0x80>
 801abd4:	6923      	ldr	r3, [r4, #16]
 801abd6:	4798      	blx	r3
 801abd8:	2802      	cmp	r0, #2
 801abda:	d01b      	beq.n	801ac14 <uxr_next_input_reliable_buffer_available+0xb4>
 801abdc:	2801      	cmp	r0, #1
 801abde:	d0e3      	beq.n	801aba8 <uxr_next_input_reliable_buffer_available+0x48>
 801abe0:	2000      	movs	r0, #0
 801abe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abe6:	464a      	mov	r2, r9
 801abe8:	4631      	mov	r1, r6
 801abea:	4638      	mov	r0, r7
 801abec:	f7f4 fd7c 	bl	800f6e8 <ucdr_init_buffer>
 801abf0:	8921      	ldrh	r1, [r4, #8]
 801abf2:	6863      	ldr	r3, [r4, #4]
 801abf4:	2001      	movs	r0, #1
 801abf6:	fbb5 f2f1 	udiv	r2, r5, r1
 801abfa:	fbb3 f3f1 	udiv	r3, r3, r1
 801abfe:	fb01 5212 	mls	r2, r1, r2, r5
 801ac02:	b292      	uxth	r2, r2
 801ac04:	fb02 f303 	mul.w	r3, r2, r3
 801ac08:	6822      	ldr	r2, [r4, #0]
 801ac0a:	f842 a003 	str.w	sl, [r2, r3]
 801ac0e:	81a5      	strh	r5, [r4, #12]
 801ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac14:	8920      	ldrh	r0, [r4, #8]
 801ac16:	eb06 0108 	add.w	r1, r6, r8
 801ac1a:	6863      	ldr	r3, [r4, #4]
 801ac1c:	eba9 0208 	sub.w	r2, r9, r8
 801ac20:	fbb5 f6f0 	udiv	r6, r5, r0
 801ac24:	fbb3 f3f0 	udiv	r3, r3, r0
 801ac28:	fb00 5516 	mls	r5, r0, r6, r5
 801ac2c:	2000      	movs	r0, #0
 801ac2e:	b2ad      	uxth	r5, r5
 801ac30:	fb03 f505 	mul.w	r5, r3, r5
 801ac34:	6823      	ldr	r3, [r4, #0]
 801ac36:	5158      	str	r0, [r3, r5]
 801ac38:	4638      	mov	r0, r7
 801ac3a:	f7f4 fd55 	bl	800f6e8 <ucdr_init_buffer>
 801ac3e:	4638      	mov	r0, r7
 801ac40:	4622      	mov	r2, r4
 801ac42:	4903      	ldr	r1, [pc, #12]	; (801ac50 <uxr_next_input_reliable_buffer_available+0xf0>)
 801ac44:	f7f4 fd24 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 801ac48:	2001      	movs	r0, #1
 801ac4a:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801ac4e:	e7c8      	b.n	801abe2 <uxr_next_input_reliable_buffer_available+0x82>
 801ac50:	0801a961 	.word	0x0801a961

0801ac54 <uxr_process_heartbeat>:
 801ac54:	b538      	push	{r3, r4, r5, lr}
 801ac56:	4611      	mov	r1, r2
 801ac58:	4604      	mov	r4, r0
 801ac5a:	89c0      	ldrh	r0, [r0, #14]
 801ac5c:	4615      	mov	r5, r2
 801ac5e:	f000 fbbf 	bl	801b3e0 <uxr_seq_num_cmp>
 801ac62:	2800      	cmp	r0, #0
 801ac64:	bfb8      	it	lt
 801ac66:	81e5      	strhlt	r5, [r4, #14]
 801ac68:	bd38      	pop	{r3, r4, r5, pc}
 801ac6a:	bf00      	nop

0801ac6c <uxr_compute_acknack>:
 801ac6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ac70:	8903      	ldrh	r3, [r0, #8]
 801ac72:	4604      	mov	r4, r0
 801ac74:	460f      	mov	r7, r1
 801ac76:	8985      	ldrh	r5, [r0, #12]
 801ac78:	b1db      	cbz	r3, 801acb2 <uxr_compute_acknack+0x46>
 801ac7a:	4628      	mov	r0, r5
 801ac7c:	2601      	movs	r6, #1
 801ac7e:	e004      	b.n	801ac8a <uxr_compute_acknack+0x1e>
 801ac80:	4566      	cmp	r6, ip
 801ac82:	f106 0601 	add.w	r6, r6, #1
 801ac86:	d214      	bcs.n	801acb2 <uxr_compute_acknack+0x46>
 801ac88:	89a0      	ldrh	r0, [r4, #12]
 801ac8a:	b2b1      	uxth	r1, r6
 801ac8c:	f000 fba0 	bl	801b3d0 <uxr_seq_num_add>
 801ac90:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ac94:	fbb0 f2fc 	udiv	r2, r0, ip
 801ac98:	e9d4 1300 	ldrd	r1, r3, [r4]
 801ac9c:	fb0c 0212 	mls	r2, ip, r2, r0
 801aca0:	fbb3 f3fc 	udiv	r3, r3, ip
 801aca4:	b292      	uxth	r2, r2
 801aca6:	fb02 f303 	mul.w	r3, r2, r3
 801acaa:	58cb      	ldr	r3, [r1, r3]
 801acac:	2b00      	cmp	r3, #0
 801acae:	d1e7      	bne.n	801ac80 <uxr_compute_acknack+0x14>
 801acb0:	4605      	mov	r5, r0
 801acb2:	803d      	strh	r5, [r7, #0]
 801acb4:	2101      	movs	r1, #1
 801acb6:	89e6      	ldrh	r6, [r4, #14]
 801acb8:	4628      	mov	r0, r5
 801acba:	f000 fb8d 	bl	801b3d8 <uxr_seq_num_sub>
 801acbe:	4601      	mov	r1, r0
 801acc0:	4630      	mov	r0, r6
 801acc2:	f000 fb89 	bl	801b3d8 <uxr_seq_num_sub>
 801acc6:	4606      	mov	r6, r0
 801acc8:	b328      	cbz	r0, 801ad16 <uxr_compute_acknack+0xaa>
 801acca:	f04f 0900 	mov.w	r9, #0
 801acce:	f04f 0801 	mov.w	r8, #1
 801acd2:	464d      	mov	r5, r9
 801acd4:	fa1f f189 	uxth.w	r1, r9
 801acd8:	8838      	ldrh	r0, [r7, #0]
 801acda:	f000 fb79 	bl	801b3d0 <uxr_seq_num_add>
 801acde:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801ace2:	6861      	ldr	r1, [r4, #4]
 801ace4:	fa08 fe09 	lsl.w	lr, r8, r9
 801ace8:	6822      	ldr	r2, [r4, #0]
 801acea:	f109 0901 	add.w	r9, r9, #1
 801acee:	ea4e 0e05 	orr.w	lr, lr, r5
 801acf2:	fbb0 f3fc 	udiv	r3, r0, ip
 801acf6:	fbb1 f1fc 	udiv	r1, r1, ip
 801acfa:	fb03 001c 	mls	r0, r3, ip, r0
 801acfe:	b283      	uxth	r3, r0
 801ad00:	fb01 f303 	mul.w	r3, r1, r3
 801ad04:	58d3      	ldr	r3, [r2, r3]
 801ad06:	b90b      	cbnz	r3, 801ad0c <uxr_compute_acknack+0xa0>
 801ad08:	fa1f f58e 	uxth.w	r5, lr
 801ad0c:	454e      	cmp	r6, r9
 801ad0e:	d1e1      	bne.n	801acd4 <uxr_compute_acknack+0x68>
 801ad10:	4628      	mov	r0, r5
 801ad12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad16:	4605      	mov	r5, r0
 801ad18:	4628      	mov	r0, r5
 801ad1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ad1e:	bf00      	nop

0801ad20 <uxr_init_output_best_effort_stream>:
 801ad20:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801ad24:	6001      	str	r1, [r0, #0]
 801ad26:	7303      	strb	r3, [r0, #12]
 801ad28:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801ad2c:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801ad30:	4770      	bx	lr
 801ad32:	bf00      	nop

0801ad34 <uxr_reset_output_best_effort_stream>:
 801ad34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad38:	7b03      	ldrb	r3, [r0, #12]
 801ad3a:	81c2      	strh	r2, [r0, #14]
 801ad3c:	6043      	str	r3, [r0, #4]
 801ad3e:	4770      	bx	lr

0801ad40 <uxr_prepare_best_effort_buffer_to_write>:
 801ad40:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad42:	4604      	mov	r4, r0
 801ad44:	b083      	sub	sp, #12
 801ad46:	6840      	ldr	r0, [r0, #4]
 801ad48:	460d      	mov	r5, r1
 801ad4a:	4616      	mov	r6, r2
 801ad4c:	f7fb fa5c 	bl	8016208 <uxr_submessage_padding>
 801ad50:	6863      	ldr	r3, [r4, #4]
 801ad52:	4418      	add	r0, r3
 801ad54:	68a3      	ldr	r3, [r4, #8]
 801ad56:	1942      	adds	r2, r0, r5
 801ad58:	4293      	cmp	r3, r2
 801ad5a:	bf2c      	ite	cs
 801ad5c:	2701      	movcs	r7, #1
 801ad5e:	2700      	movcc	r7, #0
 801ad60:	d202      	bcs.n	801ad68 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801ad62:	4638      	mov	r0, r7
 801ad64:	b003      	add	sp, #12
 801ad66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad68:	9000      	str	r0, [sp, #0]
 801ad6a:	2300      	movs	r3, #0
 801ad6c:	4630      	mov	r0, r6
 801ad6e:	6821      	ldr	r1, [r4, #0]
 801ad70:	f7f4 fca8 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 801ad74:	6861      	ldr	r1, [r4, #4]
 801ad76:	4638      	mov	r0, r7
 801ad78:	4429      	add	r1, r5
 801ad7a:	6061      	str	r1, [r4, #4]
 801ad7c:	b003      	add	sp, #12
 801ad7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ad80 <uxr_prepare_best_effort_buffer_to_send>:
 801ad80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad84:	4604      	mov	r4, r0
 801ad86:	461d      	mov	r5, r3
 801ad88:	6840      	ldr	r0, [r0, #4]
 801ad8a:	7b23      	ldrb	r3, [r4, #12]
 801ad8c:	4298      	cmp	r0, r3
 801ad8e:	bf8c      	ite	hi
 801ad90:	2601      	movhi	r6, #1
 801ad92:	2600      	movls	r6, #0
 801ad94:	d802      	bhi.n	801ad9c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801ad96:	4630      	mov	r0, r6
 801ad98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad9c:	4688      	mov	r8, r1
 801ad9e:	89e0      	ldrh	r0, [r4, #14]
 801ada0:	2101      	movs	r1, #1
 801ada2:	4617      	mov	r7, r2
 801ada4:	f000 fb14 	bl	801b3d0 <uxr_seq_num_add>
 801ada8:	6823      	ldr	r3, [r4, #0]
 801adaa:	81e0      	strh	r0, [r4, #14]
 801adac:	8028      	strh	r0, [r5, #0]
 801adae:	4630      	mov	r0, r6
 801adb0:	f8c8 3000 	str.w	r3, [r8]
 801adb4:	6863      	ldr	r3, [r4, #4]
 801adb6:	603b      	str	r3, [r7, #0]
 801adb8:	7b23      	ldrb	r3, [r4, #12]
 801adba:	6063      	str	r3, [r4, #4]
 801adbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801adc0 <on_full_output_buffer>:
 801adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adc2:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801adc6:	460c      	mov	r4, r1
 801adc8:	6803      	ldr	r3, [r0, #0]
 801adca:	4605      	mov	r5, r0
 801adcc:	7b26      	ldrb	r6, [r4, #12]
 801adce:	e9d1 1200 	ldrd	r1, r2, [r1]
 801add2:	fbb2 f2fc 	udiv	r2, r2, ip
 801add6:	eba3 0e01 	sub.w	lr, r3, r1
 801adda:	6903      	ldr	r3, [r0, #16]
 801addc:	fbbe fef2 	udiv	lr, lr, r2
 801ade0:	f10e 0e01 	add.w	lr, lr, #1
 801ade4:	fa1f fe8e 	uxth.w	lr, lr
 801ade8:	fbbe f7fc 	udiv	r7, lr, ip
 801adec:	fb0c ec17 	mls	ip, ip, r7, lr
 801adf0:	fa1f fc8c 	uxth.w	ip, ip
 801adf4:	fb02 fc0c 	mul.w	ip, r2, ip
 801adf8:	f851 200c 	ldr.w	r2, [r1, ip]
 801adfc:	44b4      	add	ip, r6
 801adfe:	1b92      	subs	r2, r2, r6
 801ae00:	f10c 0c08 	add.w	ip, ip, #8
 801ae04:	3a04      	subs	r2, #4
 801ae06:	4461      	add	r1, ip
 801ae08:	f7f4 fc66 	bl	800f6d8 <ucdr_init_buffer_origin>
 801ae0c:	4628      	mov	r0, r5
 801ae0e:	4622      	mov	r2, r4
 801ae10:	4902      	ldr	r1, [pc, #8]	; (801ae1c <on_full_output_buffer+0x5c>)
 801ae12:	f7f4 fc3d 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 801ae16:	2000      	movs	r0, #0
 801ae18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae1a:	bf00      	nop
 801ae1c:	0801adc1 	.word	0x0801adc1

0801ae20 <uxr_init_output_reliable_stream>:
 801ae20:	b530      	push	{r4, r5, lr}
 801ae22:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801ae26:	8103      	strh	r3, [r0, #8]
 801ae28:	7304      	strb	r4, [r0, #12]
 801ae2a:	e9c0 1200 	strd	r1, r2, [r0]
 801ae2e:	b1e3      	cbz	r3, 801ae6a <uxr_init_output_reliable_stream+0x4a>
 801ae30:	600c      	str	r4, [r1, #0]
 801ae32:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ae36:	f1bc 0f01 	cmp.w	ip, #1
 801ae3a:	d916      	bls.n	801ae6a <uxr_init_output_reliable_stream+0x4a>
 801ae3c:	f04f 0e01 	mov.w	lr, #1
 801ae40:	6843      	ldr	r3, [r0, #4]
 801ae42:	f10e 0501 	add.w	r5, lr, #1
 801ae46:	7b04      	ldrb	r4, [r0, #12]
 801ae48:	6801      	ldr	r1, [r0, #0]
 801ae4a:	fbbe f2fc 	udiv	r2, lr, ip
 801ae4e:	fbb3 f3fc 	udiv	r3, r3, ip
 801ae52:	fb0c e212 	mls	r2, ip, r2, lr
 801ae56:	fa1f fe85 	uxth.w	lr, r5
 801ae5a:	b292      	uxth	r2, r2
 801ae5c:	fb02 f303 	mul.w	r3, r2, r3
 801ae60:	50cc      	str	r4, [r1, r3]
 801ae62:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801ae66:	45f4      	cmp	ip, lr
 801ae68:	d8ea      	bhi.n	801ae40 <uxr_init_output_reliable_stream+0x20>
 801ae6a:	4b07      	ldr	r3, [pc, #28]	; (801ae88 <uxr_init_output_reliable_stream+0x68>)
 801ae6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ae70:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ae74:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801ae78:	f8c0 300e 	str.w	r3, [r0, #14]
 801ae7c:	2300      	movs	r3, #0
 801ae7e:	8242      	strh	r2, [r0, #18]
 801ae80:	8403      	strh	r3, [r0, #32]
 801ae82:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801ae86:	bd30      	pop	{r4, r5, pc}
 801ae88:	ffff0000 	.word	0xffff0000
 801ae8c:	00000000 	.word	0x00000000

0801ae90 <uxr_reset_output_reliable_stream>:
 801ae90:	8901      	ldrh	r1, [r0, #8]
 801ae92:	b510      	push	{r4, lr}
 801ae94:	b1b1      	cbz	r1, 801aec4 <uxr_reset_output_reliable_stream+0x34>
 801ae96:	f04f 0e00 	mov.w	lr, #0
 801ae9a:	46f4      	mov	ip, lr
 801ae9c:	6843      	ldr	r3, [r0, #4]
 801ae9e:	f10e 0e01 	add.w	lr, lr, #1
 801aea2:	7b04      	ldrb	r4, [r0, #12]
 801aea4:	fbbc f2f1 	udiv	r2, ip, r1
 801aea8:	fbb3 f3f1 	udiv	r3, r3, r1
 801aeac:	fb01 c212 	mls	r2, r1, r2, ip
 801aeb0:	fa1f fc8e 	uxth.w	ip, lr
 801aeb4:	b292      	uxth	r2, r2
 801aeb6:	fb02 f303 	mul.w	r3, r2, r3
 801aeba:	6802      	ldr	r2, [r0, #0]
 801aebc:	50d4      	str	r4, [r2, r3]
 801aebe:	8901      	ldrh	r1, [r0, #8]
 801aec0:	4561      	cmp	r1, ip
 801aec2:	d8eb      	bhi.n	801ae9c <uxr_reset_output_reliable_stream+0xc>
 801aec4:	4b08      	ldr	r3, [pc, #32]	; (801aee8 <uxr_reset_output_reliable_stream+0x58>)
 801aec6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aeca:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801aee0 <uxr_reset_output_reliable_stream+0x50>
 801aece:	f8c0 300e 	str.w	r3, [r0, #14]
 801aed2:	2300      	movs	r3, #0
 801aed4:	8242      	strh	r2, [r0, #18]
 801aed6:	8403      	strh	r3, [r0, #32]
 801aed8:	ed80 7b06 	vstr	d7, [r0, #24]
 801aedc:	bd10      	pop	{r4, pc}
 801aede:	bf00      	nop
 801aee0:	ffffffff 	.word	0xffffffff
 801aee4:	7fffffff 	.word	0x7fffffff
 801aee8:	ffff0000 	.word	0xffff0000

0801aeec <uxr_prepare_reliable_buffer_to_write>:
 801aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aef0:	4604      	mov	r4, r0
 801aef2:	b091      	sub	sp, #68	; 0x44
 801aef4:	8900      	ldrh	r0, [r0, #8]
 801aef6:	468b      	mov	fp, r1
 801aef8:	89e6      	ldrh	r6, [r4, #14]
 801aefa:	9204      	str	r2, [sp, #16]
 801aefc:	6865      	ldr	r5, [r4, #4]
 801aefe:	6823      	ldr	r3, [r4, #0]
 801af00:	f894 900c 	ldrb.w	r9, [r4, #12]
 801af04:	fbb6 f2f0 	udiv	r2, r6, r0
 801af08:	fbb5 f5f0 	udiv	r5, r5, r0
 801af0c:	fb00 6212 	mls	r2, r0, r2, r6
 801af10:	1f2f      	subs	r7, r5, #4
 801af12:	b292      	uxth	r2, r2
 801af14:	fb05 3202 	mla	r2, r5, r2, r3
 801af18:	1d11      	adds	r1, r2, #4
 801af1a:	f8d2 8000 	ldr.w	r8, [r2]
 801af1e:	9103      	str	r1, [sp, #12]
 801af20:	2800      	cmp	r0, #0
 801af22:	f000 814a 	beq.w	801b1ba <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801af26:	f04f 0c00 	mov.w	ip, #0
 801af2a:	46e2      	mov	sl, ip
 801af2c:	4661      	mov	r1, ip
 801af2e:	f10c 0c01 	add.w	ip, ip, #1
 801af32:	fbb1 f2f0 	udiv	r2, r1, r0
 801af36:	fb00 1212 	mls	r2, r0, r2, r1
 801af3a:	fa1f f18c 	uxth.w	r1, ip
 801af3e:	b292      	uxth	r2, r2
 801af40:	fb05 f202 	mul.w	r2, r5, r2
 801af44:	589a      	ldr	r2, [r3, r2]
 801af46:	454a      	cmp	r2, r9
 801af48:	d103      	bne.n	801af52 <uxr_prepare_reliable_buffer_to_write+0x66>
 801af4a:	f10a 0a01 	add.w	sl, sl, #1
 801af4e:	fa1f fa8a 	uxth.w	sl, sl
 801af52:	4281      	cmp	r1, r0
 801af54:	d3eb      	bcc.n	801af2e <uxr_prepare_reliable_buffer_to_write+0x42>
 801af56:	4640      	mov	r0, r8
 801af58:	2104      	movs	r1, #4
 801af5a:	f8cd a014 	str.w	sl, [sp, #20]
 801af5e:	f7f4 fbc7 	bl	800f6f0 <ucdr_alignment>
 801af62:	4480      	add	r8, r0
 801af64:	eb08 020b 	add.w	r2, r8, fp
 801af68:	42ba      	cmp	r2, r7
 801af6a:	f240 80ca 	bls.w	801b102 <uxr_prepare_reliable_buffer_to_write+0x216>
 801af6e:	7b22      	ldrb	r2, [r4, #12]
 801af70:	445a      	add	r2, fp
 801af72:	42ba      	cmp	r2, r7
 801af74:	f240 80b2 	bls.w	801b0dc <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801af78:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801af7c:	b2bb      	uxth	r3, r7
 801af7e:	eba2 0209 	sub.w	r2, r2, r9
 801af82:	441a      	add	r2, r3
 801af84:	b292      	uxth	r2, r2
 801af86:	fb0a f902 	mul.w	r9, sl, r2
 801af8a:	9205      	str	r2, [sp, #20]
 801af8c:	45d9      	cmp	r9, fp
 801af8e:	9206      	str	r2, [sp, #24]
 801af90:	f0c0 80b3 	bcc.w	801b0fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801af94:	f108 0204 	add.w	r2, r8, #4
 801af98:	42ba      	cmp	r2, r7
 801af9a:	f080 80da 	bcs.w	801b152 <uxr_prepare_reliable_buffer_to_write+0x266>
 801af9e:	f1a3 0904 	sub.w	r9, r3, #4
 801afa2:	9b05      	ldr	r3, [sp, #20]
 801afa4:	eba9 0908 	sub.w	r9, r9, r8
 801afa8:	fa1f f989 	uxth.w	r9, r9
 801afac:	ebab 0b09 	sub.w	fp, fp, r9
 801afb0:	fbbb f2f3 	udiv	r2, fp, r3
 801afb4:	fb03 b312 	mls	r3, r3, r2, fp
 801afb8:	2b00      	cmp	r3, #0
 801afba:	f040 80c4 	bne.w	801b146 <uxr_prepare_reliable_buffer_to_write+0x25a>
 801afbe:	b293      	uxth	r3, r2
 801afc0:	4553      	cmp	r3, sl
 801afc2:	f200 809a 	bhi.w	801b0fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801afc6:	2b00      	cmp	r3, #0
 801afc8:	f000 80f9 	beq.w	801b1be <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801afcc:	f8cd 801c 	str.w	r8, [sp, #28]
 801afd0:	f04f 0a00 	mov.w	sl, #0
 801afd4:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801afd8:	f10d 0b20 	add.w	fp, sp, #32
 801afdc:	9505      	str	r5, [sp, #20]
 801afde:	461d      	mov	r5, r3
 801afe0:	e000      	b.n	801afe4 <uxr_prepare_reliable_buffer_to_write+0xf8>
 801afe2:	46c1      	mov	r9, r8
 801afe4:	8922      	ldrh	r2, [r4, #8]
 801afe6:	4658      	mov	r0, fp
 801afe8:	6863      	ldr	r3, [r4, #4]
 801afea:	f10a 0a01 	add.w	sl, sl, #1
 801afee:	fbb6 f1f2 	udiv	r1, r6, r2
 801aff2:	fbb3 f3f2 	udiv	r3, r3, r2
 801aff6:	fb02 6111 	mls	r1, r2, r1, r6
 801affa:	463a      	mov	r2, r7
 801affc:	b289      	uxth	r1, r1
 801affe:	fb03 f101 	mul.w	r1, r3, r1
 801b002:	6823      	ldr	r3, [r4, #0]
 801b004:	3104      	adds	r1, #4
 801b006:	4419      	add	r1, r3
 801b008:	2300      	movs	r3, #0
 801b00a:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801b00e:	f8cd c000 	str.w	ip, [sp]
 801b012:	f7f4 fb57 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 801b016:	464a      	mov	r2, r9
 801b018:	2300      	movs	r3, #0
 801b01a:	210d      	movs	r1, #13
 801b01c:	4658      	mov	r0, fp
 801b01e:	f7fb f8b3 	bl	8016188 <uxr_buffer_submessage_header>
 801b022:	8921      	ldrh	r1, [r4, #8]
 801b024:	6863      	ldr	r3, [r4, #4]
 801b026:	4630      	mov	r0, r6
 801b028:	fbb6 f2f1 	udiv	r2, r6, r1
 801b02c:	fbb3 f3f1 	udiv	r3, r3, r1
 801b030:	fb01 6212 	mls	r2, r1, r2, r6
 801b034:	2101      	movs	r1, #1
 801b036:	b292      	uxth	r2, r2
 801b038:	fb02 f303 	mul.w	r3, r2, r3
 801b03c:	6822      	ldr	r2, [r4, #0]
 801b03e:	50d7      	str	r7, [r2, r3]
 801b040:	f000 f9c6 	bl	801b3d0 <uxr_seq_num_add>
 801b044:	4606      	mov	r6, r0
 801b046:	fa1f f38a 	uxth.w	r3, sl
 801b04a:	429d      	cmp	r5, r3
 801b04c:	d8c9      	bhi.n	801afe2 <uxr_prepare_reliable_buffer_to_write+0xf6>
 801b04e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801b052:	9d05      	ldr	r5, [sp, #20]
 801b054:	8920      	ldrh	r0, [r4, #8]
 801b056:	463a      	mov	r2, r7
 801b058:	6863      	ldr	r3, [r4, #4]
 801b05a:	fbb6 f1f0 	udiv	r1, r6, r0
 801b05e:	fbb3 f3f0 	udiv	r3, r3, r0
 801b062:	fb00 6111 	mls	r1, r0, r1, r6
 801b066:	4658      	mov	r0, fp
 801b068:	b289      	uxth	r1, r1
 801b06a:	fb01 f303 	mul.w	r3, r1, r3
 801b06e:	6821      	ldr	r1, [r4, #0]
 801b070:	3304      	adds	r3, #4
 801b072:	4419      	add	r1, r3
 801b074:	2300      	movs	r3, #0
 801b076:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801b07a:	9700      	str	r7, [sp, #0]
 801b07c:	f7f4 fb22 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 801b080:	9f06      	ldr	r7, [sp, #24]
 801b082:	4658      	mov	r0, fp
 801b084:	2302      	movs	r3, #2
 801b086:	b2ba      	uxth	r2, r7
 801b088:	210d      	movs	r1, #13
 801b08a:	f7fb f87d 	bl	8016188 <uxr_buffer_submessage_header>
 801b08e:	f108 0104 	add.w	r1, r8, #4
 801b092:	9b03      	ldr	r3, [sp, #12]
 801b094:	f1a5 0208 	sub.w	r2, r5, #8
 801b098:	8925      	ldrh	r5, [r4, #8]
 801b09a:	440b      	add	r3, r1
 801b09c:	eba2 0208 	sub.w	r2, r2, r8
 801b0a0:	fbb6 f0f5 	udiv	r0, r6, r5
 801b0a4:	4619      	mov	r1, r3
 801b0a6:	6863      	ldr	r3, [r4, #4]
 801b0a8:	fb05 6010 	mls	r0, r5, r0, r6
 801b0ac:	fbb3 f3f5 	udiv	r3, r3, r5
 801b0b0:	b280      	uxth	r0, r0
 801b0b2:	6825      	ldr	r5, [r4, #0]
 801b0b4:	fb00 f303 	mul.w	r3, r0, r3
 801b0b8:	7b20      	ldrb	r0, [r4, #12]
 801b0ba:	3004      	adds	r0, #4
 801b0bc:	4438      	add	r0, r7
 801b0be:	50e8      	str	r0, [r5, r3]
 801b0c0:	9d04      	ldr	r5, [sp, #16]
 801b0c2:	4628      	mov	r0, r5
 801b0c4:	f7f4 fb10 	bl	800f6e8 <ucdr_init_buffer>
 801b0c8:	4628      	mov	r0, r5
 801b0ca:	4622      	mov	r2, r4
 801b0cc:	493d      	ldr	r1, [pc, #244]	; (801b1c4 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801b0ce:	f7f4 fadf 	bl	800f690 <ucdr_set_on_full_buffer_callback>
 801b0d2:	2001      	movs	r0, #1
 801b0d4:	81e6      	strh	r6, [r4, #14]
 801b0d6:	b011      	add	sp, #68	; 0x44
 801b0d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0dc:	2101      	movs	r1, #1
 801b0de:	89e0      	ldrh	r0, [r4, #14]
 801b0e0:	f000 f976 	bl	801b3d0 <uxr_seq_num_add>
 801b0e4:	4605      	mov	r5, r0
 801b0e6:	8921      	ldrh	r1, [r4, #8]
 801b0e8:	8a60      	ldrh	r0, [r4, #18]
 801b0ea:	f000 f971 	bl	801b3d0 <uxr_seq_num_add>
 801b0ee:	4601      	mov	r1, r0
 801b0f0:	4628      	mov	r0, r5
 801b0f2:	f000 f975 	bl	801b3e0 <uxr_seq_num_cmp>
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	dd44      	ble.n	801b184 <uxr_prepare_reliable_buffer_to_write+0x298>
 801b0fa:	2000      	movs	r0, #0
 801b0fc:	b011      	add	sp, #68	; 0x44
 801b0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b102:	8921      	ldrh	r1, [r4, #8]
 801b104:	8a60      	ldrh	r0, [r4, #18]
 801b106:	9205      	str	r2, [sp, #20]
 801b108:	f000 f962 	bl	801b3d0 <uxr_seq_num_add>
 801b10c:	4601      	mov	r1, r0
 801b10e:	4630      	mov	r0, r6
 801b110:	f000 f966 	bl	801b3e0 <uxr_seq_num_cmp>
 801b114:	2800      	cmp	r0, #0
 801b116:	9a05      	ldr	r2, [sp, #20]
 801b118:	dcef      	bgt.n	801b0fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b11a:	8925      	ldrh	r5, [r4, #8]
 801b11c:	e9d4 7300 	ldrd	r7, r3, [r4]
 801b120:	fbb6 f4f5 	udiv	r4, r6, r5
 801b124:	fbb3 f3f5 	udiv	r3, r3, r5
 801b128:	fb05 6414 	mls	r4, r5, r4, r6
 801b12c:	b2a4      	uxth	r4, r4
 801b12e:	fb04 f303 	mul.w	r3, r4, r3
 801b132:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801b136:	50fa      	str	r2, [r7, r3]
 801b138:	2300      	movs	r3, #0
 801b13a:	f8cd 8000 	str.w	r8, [sp]
 801b13e:	f7f4 fac1 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 801b142:	2001      	movs	r0, #1
 801b144:	e7da      	b.n	801b0fc <uxr_prepare_reliable_buffer_to_write+0x210>
 801b146:	3201      	adds	r2, #1
 801b148:	9306      	str	r3, [sp, #24]
 801b14a:	b293      	uxth	r3, r2
 801b14c:	4553      	cmp	r3, sl
 801b14e:	d8d4      	bhi.n	801b0fa <uxr_prepare_reliable_buffer_to_write+0x20e>
 801b150:	e739      	b.n	801afc6 <uxr_prepare_reliable_buffer_to_write+0xda>
 801b152:	4630      	mov	r0, r6
 801b154:	2101      	movs	r1, #1
 801b156:	9307      	str	r3, [sp, #28]
 801b158:	f000 f93a 	bl	801b3d0 <uxr_seq_num_add>
 801b15c:	4606      	mov	r6, r0
 801b15e:	8920      	ldrh	r0, [r4, #8]
 801b160:	6862      	ldr	r2, [r4, #4]
 801b162:	fbb6 f1f0 	udiv	r1, r6, r0
 801b166:	fbb2 f2f0 	udiv	r2, r2, r0
 801b16a:	fb00 6111 	mls	r1, r0, r1, r6
 801b16e:	b289      	uxth	r1, r1
 801b170:	fb01 f202 	mul.w	r2, r1, r2
 801b174:	6821      	ldr	r1, [r4, #0]
 801b176:	3204      	adds	r2, #4
 801b178:	188b      	adds	r3, r1, r2
 801b17a:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801b17e:	9303      	str	r3, [sp, #12]
 801b180:	9b07      	ldr	r3, [sp, #28]
 801b182:	e70c      	b.n	801af9e <uxr_prepare_reliable_buffer_to_write+0xb2>
 801b184:	8921      	ldrh	r1, [r4, #8]
 801b186:	6863      	ldr	r3, [r4, #4]
 801b188:	9804      	ldr	r0, [sp, #16]
 801b18a:	fbb5 f2f1 	udiv	r2, r5, r1
 801b18e:	fbb3 f3f1 	udiv	r3, r3, r1
 801b192:	fb01 5212 	mls	r2, r1, r2, r5
 801b196:	6821      	ldr	r1, [r4, #0]
 801b198:	b292      	uxth	r2, r2
 801b19a:	fb02 f303 	mul.w	r3, r2, r3
 801b19e:	7b22      	ldrb	r2, [r4, #12]
 801b1a0:	3304      	adds	r3, #4
 801b1a2:	445a      	add	r2, fp
 801b1a4:	4419      	add	r1, r3
 801b1a6:	f841 2c04 	str.w	r2, [r1, #-4]
 801b1aa:	7b23      	ldrb	r3, [r4, #12]
 801b1ac:	9300      	str	r3, [sp, #0]
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	f7f4 fa88 	bl	800f6c4 <ucdr_init_buffer_origin_offset>
 801b1b4:	2001      	movs	r0, #1
 801b1b6:	81e5      	strh	r5, [r4, #14]
 801b1b8:	e7a0      	b.n	801b0fc <uxr_prepare_reliable_buffer_to_write+0x210>
 801b1ba:	4682      	mov	sl, r0
 801b1bc:	e6cb      	b.n	801af56 <uxr_prepare_reliable_buffer_to_write+0x6a>
 801b1be:	f10d 0b20 	add.w	fp, sp, #32
 801b1c2:	e747      	b.n	801b054 <uxr_prepare_reliable_buffer_to_write+0x168>
 801b1c4:	0801adc1 	.word	0x0801adc1

0801b1c8 <uxr_prepare_next_reliable_buffer_to_send>:
 801b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1ca:	4604      	mov	r4, r0
 801b1cc:	461d      	mov	r5, r3
 801b1ce:	460f      	mov	r7, r1
 801b1d0:	8a00      	ldrh	r0, [r0, #16]
 801b1d2:	2101      	movs	r1, #1
 801b1d4:	4616      	mov	r6, r2
 801b1d6:	f000 f8fb 	bl	801b3d0 <uxr_seq_num_add>
 801b1da:	8028      	strh	r0, [r5, #0]
 801b1dc:	8922      	ldrh	r2, [r4, #8]
 801b1de:	6863      	ldr	r3, [r4, #4]
 801b1e0:	fbb0 f1f2 	udiv	r1, r0, r2
 801b1e4:	fbb3 f3f2 	udiv	r3, r3, r2
 801b1e8:	fb02 0c11 	mls	ip, r2, r1, r0
 801b1ec:	89e1      	ldrh	r1, [r4, #14]
 801b1ee:	fa1f fc8c 	uxth.w	ip, ip
 801b1f2:	fb0c fc03 	mul.w	ip, ip, r3
 801b1f6:	6823      	ldr	r3, [r4, #0]
 801b1f8:	f10c 0c04 	add.w	ip, ip, #4
 801b1fc:	4463      	add	r3, ip
 801b1fe:	603b      	str	r3, [r7, #0]
 801b200:	6823      	ldr	r3, [r4, #0]
 801b202:	449c      	add	ip, r3
 801b204:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801b208:	6033      	str	r3, [r6, #0]
 801b20a:	f000 f8e9 	bl	801b3e0 <uxr_seq_num_cmp>
 801b20e:	2800      	cmp	r0, #0
 801b210:	dd01      	ble.n	801b216 <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801b212:	2000      	movs	r0, #0
 801b214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b216:	7b23      	ldrb	r3, [r4, #12]
 801b218:	6832      	ldr	r2, [r6, #0]
 801b21a:	429a      	cmp	r2, r3
 801b21c:	d9f9      	bls.n	801b212 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b21e:	8a61      	ldrh	r1, [r4, #18]
 801b220:	8a20      	ldrh	r0, [r4, #16]
 801b222:	f000 f8d9 	bl	801b3d8 <uxr_seq_num_sub>
 801b226:	8923      	ldrh	r3, [r4, #8]
 801b228:	4283      	cmp	r3, r0
 801b22a:	d0f2      	beq.n	801b212 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801b22c:	8828      	ldrh	r0, [r5, #0]
 801b22e:	89e3      	ldrh	r3, [r4, #14]
 801b230:	8220      	strh	r0, [r4, #16]
 801b232:	4298      	cmp	r0, r3
 801b234:	d001      	beq.n	801b23a <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801b236:	2001      	movs	r0, #1
 801b238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b23a:	2101      	movs	r1, #1
 801b23c:	f000 f8c8 	bl	801b3d0 <uxr_seq_num_add>
 801b240:	4603      	mov	r3, r0
 801b242:	2001      	movs	r0, #1
 801b244:	81e3      	strh	r3, [r4, #14]
 801b246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b248 <uxr_update_output_stream_heartbeat_timestamp>:
 801b248:	b570      	push	{r4, r5, r6, lr}
 801b24a:	8a01      	ldrh	r1, [r0, #16]
 801b24c:	4604      	mov	r4, r0
 801b24e:	8a40      	ldrh	r0, [r0, #18]
 801b250:	4615      	mov	r5, r2
 801b252:	461e      	mov	r6, r3
 801b254:	f000 f8c4 	bl	801b3e0 <uxr_seq_num_cmp>
 801b258:	2800      	cmp	r0, #0
 801b25a:	db07      	blt.n	801b26c <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801b25c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b260:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801b264:	2000      	movs	r0, #0
 801b266:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801b26a:	bd70      	pop	{r4, r5, r6, pc}
 801b26c:	f894 0020 	ldrb.w	r0, [r4, #32]
 801b270:	b940      	cbnz	r0, 801b284 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801b272:	2301      	movs	r3, #1
 801b274:	f884 3020 	strb.w	r3, [r4, #32]
 801b278:	3564      	adds	r5, #100	; 0x64
 801b27a:	f146 0600 	adc.w	r6, r6, #0
 801b27e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801b282:	bd70      	pop	{r4, r5, r6, pc}
 801b284:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801b288:	4295      	cmp	r5, r2
 801b28a:	eb76 0303 	sbcs.w	r3, r6, r3
 801b28e:	db04      	blt.n	801b29a <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801b290:	1c43      	adds	r3, r0, #1
 801b292:	2001      	movs	r0, #1
 801b294:	f884 3020 	strb.w	r3, [r4, #32]
 801b298:	e7ee      	b.n	801b278 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801b29a:	2000      	movs	r0, #0
 801b29c:	e7ec      	b.n	801b278 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801b29e:	bf00      	nop

0801b2a0 <uxr_begin_output_nack_buffer_it>:
 801b2a0:	8a40      	ldrh	r0, [r0, #18]
 801b2a2:	4770      	bx	lr

0801b2a4 <uxr_next_reliable_nack_buffer_to_send>:
 801b2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2a8:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801b2ac:	b197      	cbz	r7, 801b2d4 <uxr_next_reliable_nack_buffer_to_send+0x30>
 801b2ae:	4680      	mov	r8, r0
 801b2b0:	460d      	mov	r5, r1
 801b2b2:	4616      	mov	r6, r2
 801b2b4:	461c      	mov	r4, r3
 801b2b6:	8818      	ldrh	r0, [r3, #0]
 801b2b8:	2101      	movs	r1, #1
 801b2ba:	f000 f889 	bl	801b3d0 <uxr_seq_num_add>
 801b2be:	8020      	strh	r0, [r4, #0]
 801b2c0:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801b2c4:	f000 f88c 	bl	801b3e0 <uxr_seq_num_cmp>
 801b2c8:	2800      	cmp	r0, #0
 801b2ca:	dd06      	ble.n	801b2da <uxr_next_reliable_nack_buffer_to_send+0x36>
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	461f      	mov	r7, r3
 801b2d0:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801b2d4:	4638      	mov	r0, r7
 801b2d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b2da:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801b2de:	8820      	ldrh	r0, [r4, #0]
 801b2e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b2e4:	fbb0 f3f2 	udiv	r3, r0, r2
 801b2e8:	fbb1 fcf2 	udiv	ip, r1, r2
 801b2ec:	fb02 0313 	mls	r3, r2, r3, r0
 801b2f0:	b29b      	uxth	r3, r3
 801b2f2:	fb03 fc0c 	mul.w	ip, r3, ip
 801b2f6:	f8d8 3000 	ldr.w	r3, [r8]
 801b2fa:	f10c 0c04 	add.w	ip, ip, #4
 801b2fe:	4463      	add	r3, ip
 801b300:	602b      	str	r3, [r5, #0]
 801b302:	f8d8 3000 	ldr.w	r3, [r8]
 801b306:	4463      	add	r3, ip
 801b308:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801b30c:	6033      	str	r3, [r6, #0]
 801b30e:	f898 200c 	ldrb.w	r2, [r8, #12]
 801b312:	429a      	cmp	r2, r3
 801b314:	d0d0      	beq.n	801b2b8 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801b316:	e7dd      	b.n	801b2d4 <uxr_next_reliable_nack_buffer_to_send+0x30>

0801b318 <uxr_process_acknack>:
 801b318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b31a:	4604      	mov	r4, r0
 801b31c:	460e      	mov	r6, r1
 801b31e:	4610      	mov	r0, r2
 801b320:	2101      	movs	r1, #1
 801b322:	f000 f859 	bl	801b3d8 <uxr_seq_num_sub>
 801b326:	8a61      	ldrh	r1, [r4, #18]
 801b328:	f000 f856 	bl	801b3d8 <uxr_seq_num_sub>
 801b32c:	b1c8      	cbz	r0, 801b362 <uxr_process_acknack+0x4a>
 801b32e:	4605      	mov	r5, r0
 801b330:	2700      	movs	r7, #0
 801b332:	2101      	movs	r1, #1
 801b334:	8a60      	ldrh	r0, [r4, #18]
 801b336:	f000 f84b 	bl	801b3d0 <uxr_seq_num_add>
 801b33a:	8923      	ldrh	r3, [r4, #8]
 801b33c:	6862      	ldr	r2, [r4, #4]
 801b33e:	3701      	adds	r7, #1
 801b340:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801b344:	6821      	ldr	r1, [r4, #0]
 801b346:	42bd      	cmp	r5, r7
 801b348:	8260      	strh	r0, [r4, #18]
 801b34a:	fbb0 fef3 	udiv	lr, r0, r3
 801b34e:	fbb2 f2f3 	udiv	r2, r2, r3
 801b352:	fb03 031e 	mls	r3, r3, lr, r0
 801b356:	b29b      	uxth	r3, r3
 801b358:	fb02 f303 	mul.w	r3, r2, r3
 801b35c:	f841 c003 	str.w	ip, [r1, r3]
 801b360:	d1e7      	bne.n	801b332 <uxr_process_acknack+0x1a>
 801b362:	3e00      	subs	r6, #0
 801b364:	f04f 0300 	mov.w	r3, #0
 801b368:	bf18      	it	ne
 801b36a:	2601      	movne	r6, #1
 801b36c:	f884 3020 	strb.w	r3, [r4, #32]
 801b370:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801b374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b376:	bf00      	nop

0801b378 <uxr_is_output_up_to_date>:
 801b378:	8a01      	ldrh	r1, [r0, #16]
 801b37a:	8a40      	ldrh	r0, [r0, #18]
 801b37c:	b508      	push	{r3, lr}
 801b37e:	f000 f82f 	bl	801b3e0 <uxr_seq_num_cmp>
 801b382:	fab0 f080 	clz	r0, r0
 801b386:	0940      	lsrs	r0, r0, #5
 801b388:	bd08      	pop	{r3, pc}
 801b38a:	bf00      	nop

0801b38c <get_available_free_slots>:
 801b38c:	8901      	ldrh	r1, [r0, #8]
 801b38e:	b1e1      	cbz	r1, 801b3ca <get_available_free_slots+0x3e>
 801b390:	6843      	ldr	r3, [r0, #4]
 801b392:	f04f 0c00 	mov.w	ip, #0
 801b396:	b530      	push	{r4, r5, lr}
 801b398:	fbb3 fef1 	udiv	lr, r3, r1
 801b39c:	6805      	ldr	r5, [r0, #0]
 801b39e:	4662      	mov	r2, ip
 801b3a0:	7b04      	ldrb	r4, [r0, #12]
 801b3a2:	4660      	mov	r0, ip
 801b3a4:	f10c 0c01 	add.w	ip, ip, #1
 801b3a8:	fbb2 f3f1 	udiv	r3, r2, r1
 801b3ac:	fb01 2313 	mls	r3, r1, r3, r2
 801b3b0:	fa1f f28c 	uxth.w	r2, ip
 801b3b4:	b29b      	uxth	r3, r3
 801b3b6:	fb0e f303 	mul.w	r3, lr, r3
 801b3ba:	58eb      	ldr	r3, [r5, r3]
 801b3bc:	429c      	cmp	r4, r3
 801b3be:	d101      	bne.n	801b3c4 <get_available_free_slots+0x38>
 801b3c0:	3001      	adds	r0, #1
 801b3c2:	b280      	uxth	r0, r0
 801b3c4:	428a      	cmp	r2, r1
 801b3c6:	d3ed      	bcc.n	801b3a4 <get_available_free_slots+0x18>
 801b3c8:	bd30      	pop	{r4, r5, pc}
 801b3ca:	4608      	mov	r0, r1
 801b3cc:	4770      	bx	lr
 801b3ce:	bf00      	nop

0801b3d0 <uxr_seq_num_add>:
 801b3d0:	4408      	add	r0, r1
 801b3d2:	b280      	uxth	r0, r0
 801b3d4:	4770      	bx	lr
 801b3d6:	bf00      	nop

0801b3d8 <uxr_seq_num_sub>:
 801b3d8:	1a40      	subs	r0, r0, r1
 801b3da:	b280      	uxth	r0, r0
 801b3dc:	4770      	bx	lr
 801b3de:	bf00      	nop

0801b3e0 <uxr_seq_num_cmp>:
 801b3e0:	4288      	cmp	r0, r1
 801b3e2:	d011      	beq.n	801b408 <uxr_seq_num_cmp+0x28>
 801b3e4:	d309      	bcc.n	801b3fa <uxr_seq_num_cmp+0x1a>
 801b3e6:	4288      	cmp	r0, r1
 801b3e8:	d910      	bls.n	801b40c <uxr_seq_num_cmp+0x2c>
 801b3ea:	1a40      	subs	r0, r0, r1
 801b3ec:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801b3f0:	bfd4      	ite	le
 801b3f2:	2001      	movle	r0, #1
 801b3f4:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801b3f8:	4770      	bx	lr
 801b3fa:	1a0b      	subs	r3, r1, r0
 801b3fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b400:	daf1      	bge.n	801b3e6 <uxr_seq_num_cmp+0x6>
 801b402:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b406:	4770      	bx	lr
 801b408:	2000      	movs	r0, #0
 801b40a:	4770      	bx	lr
 801b40c:	2001      	movs	r0, #1
 801b40e:	4770      	bx	lr

0801b410 <rcl_get_default_domain_id>:
 801b410:	b530      	push	{r4, r5, lr}
 801b412:	2300      	movs	r3, #0
 801b414:	b083      	sub	sp, #12
 801b416:	9300      	str	r3, [sp, #0]
 801b418:	b1d0      	cbz	r0, 801b450 <rcl_get_default_domain_id+0x40>
 801b41a:	4604      	mov	r4, r0
 801b41c:	4669      	mov	r1, sp
 801b41e:	4815      	ldr	r0, [pc, #84]	; (801b474 <rcl_get_default_domain_id+0x64>)
 801b420:	f7f6 f846 	bl	80114b0 <rcutils_get_env>
 801b424:	4602      	mov	r2, r0
 801b426:	b110      	cbz	r0, 801b42e <rcl_get_default_domain_id+0x1e>
 801b428:	2001      	movs	r0, #1
 801b42a:	b003      	add	sp, #12
 801b42c:	bd30      	pop	{r4, r5, pc}
 801b42e:	9b00      	ldr	r3, [sp, #0]
 801b430:	b18b      	cbz	r3, 801b456 <rcl_get_default_domain_id+0x46>
 801b432:	7818      	ldrb	r0, [r3, #0]
 801b434:	2800      	cmp	r0, #0
 801b436:	d0f8      	beq.n	801b42a <rcl_get_default_domain_id+0x1a>
 801b438:	a901      	add	r1, sp, #4
 801b43a:	4618      	mov	r0, r3
 801b43c:	9201      	str	r2, [sp, #4]
 801b43e:	f000 fc8f 	bl	801bd60 <strtoul>
 801b442:	4605      	mov	r5, r0
 801b444:	b150      	cbz	r0, 801b45c <rcl_get_default_domain_id+0x4c>
 801b446:	1c43      	adds	r3, r0, #1
 801b448:	d00d      	beq.n	801b466 <rcl_get_default_domain_id+0x56>
 801b44a:	2000      	movs	r0, #0
 801b44c:	6025      	str	r5, [r4, #0]
 801b44e:	e7ec      	b.n	801b42a <rcl_get_default_domain_id+0x1a>
 801b450:	200b      	movs	r0, #11
 801b452:	b003      	add	sp, #12
 801b454:	bd30      	pop	{r4, r5, pc}
 801b456:	4618      	mov	r0, r3
 801b458:	b003      	add	sp, #12
 801b45a:	bd30      	pop	{r4, r5, pc}
 801b45c:	9b01      	ldr	r3, [sp, #4]
 801b45e:	781b      	ldrb	r3, [r3, #0]
 801b460:	2b00      	cmp	r3, #0
 801b462:	d0f2      	beq.n	801b44a <rcl_get_default_domain_id+0x3a>
 801b464:	e7e0      	b.n	801b428 <rcl_get_default_domain_id+0x18>
 801b466:	f001 f865 	bl	801c534 <__errno>
 801b46a:	6803      	ldr	r3, [r0, #0]
 801b46c:	2b22      	cmp	r3, #34	; 0x22
 801b46e:	d1ec      	bne.n	801b44a <rcl_get_default_domain_id+0x3a>
 801b470:	e7da      	b.n	801b428 <rcl_get_default_domain_id+0x18>
 801b472:	bf00      	nop
 801b474:	0801e5a8 	.word	0x0801e5a8

0801b478 <rcl_expand_topic_name>:
 801b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b47c:	b08d      	sub	sp, #52	; 0x34
 801b47e:	4698      	mov	r8, r3
 801b480:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b482:	9207      	str	r2, [sp, #28]
 801b484:	2b00      	cmp	r3, #0
 801b486:	bf18      	it	ne
 801b488:	f1b8 0f00 	cmpne.w	r8, #0
 801b48c:	bf0c      	ite	eq
 801b48e:	2301      	moveq	r3, #1
 801b490:	2300      	movne	r3, #0
 801b492:	2a00      	cmp	r2, #0
 801b494:	bf08      	it	eq
 801b496:	f043 0301 	orreq.w	r3, r3, #1
 801b49a:	2900      	cmp	r1, #0
 801b49c:	bf08      	it	eq
 801b49e:	f043 0301 	orreq.w	r3, r3, #1
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d13d      	bne.n	801b522 <rcl_expand_topic_name+0xaa>
 801b4a6:	fab0 f280 	clz	r2, r0
 801b4aa:	4604      	mov	r4, r0
 801b4ac:	0952      	lsrs	r2, r2, #5
 801b4ae:	2800      	cmp	r0, #0
 801b4b0:	d037      	beq.n	801b522 <rcl_expand_topic_name+0xaa>
 801b4b2:	460f      	mov	r7, r1
 801b4b4:	a90b      	add	r1, sp, #44	; 0x2c
 801b4b6:	f000 f945 	bl	801b744 <rcl_validate_topic_name>
 801b4ba:	4605      	mov	r5, r0
 801b4bc:	bb68      	cbnz	r0, 801b51a <rcl_expand_topic_name+0xa2>
 801b4be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4c0:	2b00      	cmp	r3, #0
 801b4c2:	d137      	bne.n	801b534 <rcl_expand_topic_name+0xbc>
 801b4c4:	4602      	mov	r2, r0
 801b4c6:	a90b      	add	r1, sp, #44	; 0x2c
 801b4c8:	4638      	mov	r0, r7
 801b4ca:	f7f6 fab3 	bl	8011a34 <rmw_validate_node_name>
 801b4ce:	bb68      	cbnz	r0, 801b52c <rcl_expand_topic_name+0xb4>
 801b4d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d133      	bne.n	801b53e <rcl_expand_topic_name+0xc6>
 801b4d6:	462a      	mov	r2, r5
 801b4d8:	a90b      	add	r1, sp, #44	; 0x2c
 801b4da:	9807      	ldr	r0, [sp, #28]
 801b4dc:	f7f6 fa8c 	bl	80119f8 <rmw_validate_namespace>
 801b4e0:	bb20      	cbnz	r0, 801b52c <rcl_expand_topic_name+0xb4>
 801b4e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801b4e4:	2d00      	cmp	r5, #0
 801b4e6:	f040 80a2 	bne.w	801b62e <rcl_expand_topic_name+0x1b6>
 801b4ea:	217b      	movs	r1, #123	; 0x7b
 801b4ec:	4620      	mov	r0, r4
 801b4ee:	f000 ff95 	bl	801c41c <strchr>
 801b4f2:	7823      	ldrb	r3, [r4, #0]
 801b4f4:	4681      	mov	r9, r0
 801b4f6:	bb20      	cbnz	r0, 801b542 <rcl_expand_topic_name+0xca>
 801b4f8:	2b2f      	cmp	r3, #47	; 0x2f
 801b4fa:	d122      	bne.n	801b542 <rcl_expand_topic_name+0xca>
 801b4fc:	ab19      	add	r3, sp, #100	; 0x64
 801b4fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801b502:	ab16      	add	r3, sp, #88	; 0x58
 801b504:	e88d 0003 	stmia.w	sp, {r0, r1}
 801b508:	4620      	mov	r0, r4
 801b50a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801b50c:	f7f6 f956 	bl	80117bc <rcutils_strdup>
 801b510:	2800      	cmp	r0, #0
 801b512:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b514:	bf08      	it	eq
 801b516:	250a      	moveq	r5, #10
 801b518:	6018      	str	r0, [r3, #0]
 801b51a:	4628      	mov	r0, r5
 801b51c:	b00d      	add	sp, #52	; 0x34
 801b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b522:	250b      	movs	r5, #11
 801b524:	4628      	mov	r0, r5
 801b526:	b00d      	add	sp, #52	; 0x34
 801b528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b52c:	f7fc f97a 	bl	8017824 <rcl_convert_rmw_ret_to_rcl_ret>
 801b530:	4605      	mov	r5, r0
 801b532:	e7f2      	b.n	801b51a <rcl_expand_topic_name+0xa2>
 801b534:	2567      	movs	r5, #103	; 0x67
 801b536:	4628      	mov	r0, r5
 801b538:	b00d      	add	sp, #52	; 0x34
 801b53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b53e:	25c9      	movs	r5, #201	; 0xc9
 801b540:	e7eb      	b.n	801b51a <rcl_expand_topic_name+0xa2>
 801b542:	2b7e      	cmp	r3, #126	; 0x7e
 801b544:	d075      	beq.n	801b632 <rcl_expand_topic_name+0x1ba>
 801b546:	f1b9 0f00 	cmp.w	r9, #0
 801b54a:	f000 80c2 	beq.w	801b6d2 <rcl_expand_topic_name+0x25a>
 801b54e:	2300      	movs	r3, #0
 801b550:	46a2      	mov	sl, r4
 801b552:	461e      	mov	r6, r3
 801b554:	9508      	str	r5, [sp, #32]
 801b556:	4655      	mov	r5, sl
 801b558:	9409      	str	r4, [sp, #36]	; 0x24
 801b55a:	46b2      	mov	sl, r6
 801b55c:	464c      	mov	r4, r9
 801b55e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801b562:	2c00      	cmp	r4, #0
 801b564:	f000 80ae 	beq.w	801b6c4 <rcl_expand_topic_name+0x24c>
 801b568:	217d      	movs	r1, #125	; 0x7d
 801b56a:	4628      	mov	r0, r5
 801b56c:	f000 ff56 	bl	801c41c <strchr>
 801b570:	eba0 0904 	sub.w	r9, r0, r4
 801b574:	4621      	mov	r1, r4
 801b576:	4869      	ldr	r0, [pc, #420]	; (801b71c <rcl_expand_topic_name+0x2a4>)
 801b578:	f109 0601 	add.w	r6, r9, #1
 801b57c:	4632      	mov	r2, r6
 801b57e:	f000 ff5a 	bl	801c436 <strncmp>
 801b582:	2800      	cmp	r0, #0
 801b584:	d051      	beq.n	801b62a <rcl_expand_topic_name+0x1b2>
 801b586:	4632      	mov	r2, r6
 801b588:	4621      	mov	r1, r4
 801b58a:	4865      	ldr	r0, [pc, #404]	; (801b720 <rcl_expand_topic_name+0x2a8>)
 801b58c:	f000 ff53 	bl	801c436 <strncmp>
 801b590:	b128      	cbz	r0, 801b59e <rcl_expand_topic_name+0x126>
 801b592:	4632      	mov	r2, r6
 801b594:	4621      	mov	r1, r4
 801b596:	4863      	ldr	r0, [pc, #396]	; (801b724 <rcl_expand_topic_name+0x2ac>)
 801b598:	f000 ff4d 	bl	801c436 <strncmp>
 801b59c:	bb38      	cbnz	r0, 801b5ee <rcl_expand_topic_name+0x176>
 801b59e:	46d9      	mov	r9, fp
 801b5a0:	ab18      	add	r3, sp, #96	; 0x60
 801b5a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b5a6:	ab16      	add	r3, sp, #88	; 0x58
 801b5a8:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	4631      	mov	r1, r6
 801b5b0:	cb0c      	ldmia	r3, {r2, r3}
 801b5b2:	f7f6 f925 	bl	8011800 <rcutils_strndup>
 801b5b6:	4604      	mov	r4, r0
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	f000 80a3 	beq.w	801b704 <rcl_expand_topic_name+0x28c>
 801b5be:	464a      	mov	r2, r9
 801b5c0:	4628      	mov	r0, r5
 801b5c2:	ab16      	add	r3, sp, #88	; 0x58
 801b5c4:	4621      	mov	r1, r4
 801b5c6:	f7f5 fff9 	bl	80115bc <rcutils_repl_str>
 801b5ca:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b5cc:	4605      	mov	r5, r0
 801b5ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5d0:	4620      	mov	r0, r4
 801b5d2:	4798      	blx	r3
 801b5d4:	4650      	mov	r0, sl
 801b5d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b5d8:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b5da:	4798      	blx	r3
 801b5dc:	2d00      	cmp	r5, #0
 801b5de:	d06c      	beq.n	801b6ba <rcl_expand_topic_name+0x242>
 801b5e0:	217b      	movs	r1, #123	; 0x7b
 801b5e2:	4628      	mov	r0, r5
 801b5e4:	f000 ff1a 	bl	801c41c <strchr>
 801b5e8:	46aa      	mov	sl, r5
 801b5ea:	4604      	mov	r4, r0
 801b5ec:	e7b9      	b.n	801b562 <rcl_expand_topic_name+0xea>
 801b5ee:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801b5f2:	1c61      	adds	r1, r4, #1
 801b5f4:	4640      	mov	r0, r8
 801b5f6:	f7fe fca5 	bl	8019f44 <rcutils_string_map_getn>
 801b5fa:	4681      	mov	r9, r0
 801b5fc:	2800      	cmp	r0, #0
 801b5fe:	d1cf      	bne.n	801b5a0 <rcl_expand_topic_name+0x128>
 801b600:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b602:	aa18      	add	r2, sp, #96	; 0x60
 801b604:	2569      	movs	r5, #105	; 0x69
 801b606:	6018      	str	r0, [r3, #0]
 801b608:	ab16      	add	r3, sp, #88	; 0x58
 801b60a:	ca07      	ldmia	r2, {r0, r1, r2}
 801b60c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801b610:	4631      	mov	r1, r6
 801b612:	4620      	mov	r0, r4
 801b614:	cb0c      	ldmia	r3, {r2, r3}
 801b616:	f7f6 f8f3 	bl	8011800 <rcutils_strndup>
 801b61a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b61c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b61e:	4798      	blx	r3
 801b620:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b622:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b624:	4650      	mov	r0, sl
 801b626:	4798      	blx	r3
 801b628:	e777      	b.n	801b51a <rcl_expand_topic_name+0xa2>
 801b62a:	46b9      	mov	r9, r7
 801b62c:	e7b8      	b.n	801b5a0 <rcl_expand_topic_name+0x128>
 801b62e:	25ca      	movs	r5, #202	; 0xca
 801b630:	e773      	b.n	801b51a <rcl_expand_topic_name+0xa2>
 801b632:	9e07      	ldr	r6, [sp, #28]
 801b634:	4630      	mov	r0, r6
 801b636:	f7e4 fe0d 	bl	8000254 <strlen>
 801b63a:	4a3b      	ldr	r2, [pc, #236]	; (801b728 <rcl_expand_topic_name+0x2b0>)
 801b63c:	4b3b      	ldr	r3, [pc, #236]	; (801b72c <rcl_expand_topic_name+0x2b4>)
 801b63e:	9603      	str	r6, [sp, #12]
 801b640:	2801      	cmp	r0, #1
 801b642:	bf18      	it	ne
 801b644:	4613      	movne	r3, r2
 801b646:	9704      	str	r7, [sp, #16]
 801b648:	9302      	str	r3, [sp, #8]
 801b64a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b64c:	9300      	str	r3, [sp, #0]
 801b64e:	1c63      	adds	r3, r4, #1
 801b650:	9305      	str	r3, [sp, #20]
 801b652:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b656:	9301      	str	r3, [sp, #4]
 801b658:	ab16      	add	r3, sp, #88	; 0x58
 801b65a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b65c:	f7f5 ff74 	bl	8011548 <rcutils_format_string_limit>
 801b660:	4606      	mov	r6, r0
 801b662:	b350      	cbz	r0, 801b6ba <rcl_expand_topic_name+0x242>
 801b664:	f1b9 0f00 	cmp.w	r9, #0
 801b668:	d005      	beq.n	801b676 <rcl_expand_topic_name+0x1fe>
 801b66a:	217b      	movs	r1, #123	; 0x7b
 801b66c:	46b2      	mov	sl, r6
 801b66e:	f000 fed5 	bl	801c41c <strchr>
 801b672:	4681      	mov	r9, r0
 801b674:	e76e      	b.n	801b554 <rcl_expand_topic_name+0xdc>
 801b676:	7833      	ldrb	r3, [r6, #0]
 801b678:	2b2f      	cmp	r3, #47	; 0x2f
 801b67a:	d01b      	beq.n	801b6b4 <rcl_expand_topic_name+0x23c>
 801b67c:	9c07      	ldr	r4, [sp, #28]
 801b67e:	4620      	mov	r0, r4
 801b680:	f7e4 fde8 	bl	8000254 <strlen>
 801b684:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b688:	4a29      	ldr	r2, [pc, #164]	; (801b730 <rcl_expand_topic_name+0x2b8>)
 801b68a:	9301      	str	r3, [sp, #4]
 801b68c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801b68e:	9604      	str	r6, [sp, #16]
 801b690:	9300      	str	r3, [sp, #0]
 801b692:	4b28      	ldr	r3, [pc, #160]	; (801b734 <rcl_expand_topic_name+0x2bc>)
 801b694:	9403      	str	r4, [sp, #12]
 801b696:	2801      	cmp	r0, #1
 801b698:	bf18      	it	ne
 801b69a:	4613      	movne	r3, r2
 801b69c:	9302      	str	r3, [sp, #8]
 801b69e:	ab16      	add	r3, sp, #88	; 0x58
 801b6a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b6a2:	f7f5 ff51 	bl	8011548 <rcutils_format_string_limit>
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b6aa:	4630      	mov	r0, r6
 801b6ac:	991a      	ldr	r1, [sp, #104]	; 0x68
 801b6ae:	461e      	mov	r6, r3
 801b6b0:	4790      	blx	r2
 801b6b2:	b116      	cbz	r6, 801b6ba <rcl_expand_topic_name+0x242>
 801b6b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b6b6:	601e      	str	r6, [r3, #0]
 801b6b8:	e72f      	b.n	801b51a <rcl_expand_topic_name+0xa2>
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801b6be:	250a      	movs	r5, #10
 801b6c0:	6013      	str	r3, [r2, #0]
 801b6c2:	e72a      	b.n	801b51a <rcl_expand_topic_name+0xa2>
 801b6c4:	4653      	mov	r3, sl
 801b6c6:	4656      	mov	r6, sl
 801b6c8:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801b6cc:	2b00      	cmp	r3, #0
 801b6ce:	d1d2      	bne.n	801b676 <rcl_expand_topic_name+0x1fe>
 801b6d0:	7823      	ldrb	r3, [r4, #0]
 801b6d2:	2b2f      	cmp	r3, #47	; 0x2f
 801b6d4:	d01e      	beq.n	801b714 <rcl_expand_topic_name+0x29c>
 801b6d6:	9e07      	ldr	r6, [sp, #28]
 801b6d8:	4630      	mov	r0, r6
 801b6da:	f7e4 fdbb 	bl	8000254 <strlen>
 801b6de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801b6e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b6e4:	9603      	str	r6, [sp, #12]
 801b6e6:	9404      	str	r4, [sp, #16]
 801b6e8:	e9cd 2300 	strd	r2, r3, [sp]
 801b6ec:	4a10      	ldr	r2, [pc, #64]	; (801b730 <rcl_expand_topic_name+0x2b8>)
 801b6ee:	4b11      	ldr	r3, [pc, #68]	; (801b734 <rcl_expand_topic_name+0x2bc>)
 801b6f0:	2801      	cmp	r0, #1
 801b6f2:	bf18      	it	ne
 801b6f4:	4613      	movne	r3, r2
 801b6f6:	9302      	str	r3, [sp, #8]
 801b6f8:	ab16      	add	r3, sp, #88	; 0x58
 801b6fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b6fc:	f7f5 ff24 	bl	8011548 <rcutils_format_string_limit>
 801b700:	4606      	mov	r6, r0
 801b702:	e7d6      	b.n	801b6b2 <rcl_expand_topic_name+0x23a>
 801b704:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801b708:	4650      	mov	r0, sl
 801b70a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801b70c:	6014      	str	r4, [r2, #0]
 801b70e:	250a      	movs	r5, #10
 801b710:	4798      	blx	r3
 801b712:	e702      	b.n	801b51a <rcl_expand_topic_name+0xa2>
 801b714:	2300      	movs	r3, #0
 801b716:	461e      	mov	r6, r3
 801b718:	e7cc      	b.n	801b6b4 <rcl_expand_topic_name+0x23c>
 801b71a:	bf00      	nop
 801b71c:	0801e5c0 	.word	0x0801e5c0
 801b720:	0801e5c8 	.word	0x0801e5c8
 801b724:	0801e5d0 	.word	0x0801e5d0
 801b728:	0801e5b8 	.word	0x0801e5b8
 801b72c:	0801df40 	.word	0x0801df40
 801b730:	0801d944 	.word	0x0801d944
 801b734:	0801d93c 	.word	0x0801d93c

0801b738 <rcl_get_default_topic_name_substitutions>:
 801b738:	2800      	cmp	r0, #0
 801b73a:	bf0c      	ite	eq
 801b73c:	200b      	moveq	r0, #11
 801b73e:	2000      	movne	r0, #0
 801b740:	4770      	bx	lr
 801b742:	bf00      	nop

0801b744 <rcl_validate_topic_name>:
 801b744:	2800      	cmp	r0, #0
 801b746:	f000 8089 	beq.w	801b85c <rcl_validate_topic_name+0x118>
 801b74a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b74e:	460e      	mov	r6, r1
 801b750:	2900      	cmp	r1, #0
 801b752:	f000 8085 	beq.w	801b860 <rcl_validate_topic_name+0x11c>
 801b756:	4604      	mov	r4, r0
 801b758:	4617      	mov	r7, r2
 801b75a:	f7e4 fd7b 	bl	8000254 <strlen>
 801b75e:	b1b0      	cbz	r0, 801b78e <rcl_validate_topic_name+0x4a>
 801b760:	f894 e000 	ldrb.w	lr, [r4]
 801b764:	f8df c160 	ldr.w	ip, [pc, #352]	; 801b8c8 <rcl_validate_topic_name+0x184>
 801b768:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801b76c:	f013 0304 	ands.w	r3, r3, #4
 801b770:	d139      	bne.n	801b7e6 <rcl_validate_topic_name+0xa2>
 801b772:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801b776:	f814 2008 	ldrb.w	r2, [r4, r8]
 801b77a:	2a2f      	cmp	r2, #47	; 0x2f
 801b77c:	d10f      	bne.n	801b79e <rcl_validate_topic_name+0x5a>
 801b77e:	2202      	movs	r2, #2
 801b780:	6032      	str	r2, [r6, #0]
 801b782:	b3a7      	cbz	r7, 801b7ee <rcl_validate_topic_name+0xaa>
 801b784:	4618      	mov	r0, r3
 801b786:	f8c7 8000 	str.w	r8, [r7]
 801b78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b78e:	2301      	movs	r3, #1
 801b790:	6033      	str	r3, [r6, #0]
 801b792:	b367      	cbz	r7, 801b7ee <rcl_validate_topic_name+0xaa>
 801b794:	2300      	movs	r3, #0
 801b796:	4618      	mov	r0, r3
 801b798:	603b      	str	r3, [r7, #0]
 801b79a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b79e:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801b7a2:	461d      	mov	r5, r3
 801b7a4:	4619      	mov	r1, r3
 801b7a6:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b7aa:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801b7ae:	f1b9 0f09 	cmp.w	r9, #9
 801b7b2:	d91f      	bls.n	801b7f4 <rcl_validate_topic_name+0xb0>
 801b7b4:	f022 0920 	bic.w	r9, r2, #32
 801b7b8:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801b7bc:	f1b9 0f19 	cmp.w	r9, #25
 801b7c0:	d918      	bls.n	801b7f4 <rcl_validate_topic_name+0xb0>
 801b7c2:	2a5f      	cmp	r2, #95	; 0x5f
 801b7c4:	d024      	beq.n	801b810 <rcl_validate_topic_name+0xcc>
 801b7c6:	2a2f      	cmp	r2, #47	; 0x2f
 801b7c8:	d058      	beq.n	801b87c <rcl_validate_topic_name+0x138>
 801b7ca:	2a7e      	cmp	r2, #126	; 0x7e
 801b7cc:	d04a      	beq.n	801b864 <rcl_validate_topic_name+0x120>
 801b7ce:	2a7b      	cmp	r2, #123	; 0x7b
 801b7d0:	d05b      	beq.n	801b88a <rcl_validate_topic_name+0x146>
 801b7d2:	2a7d      	cmp	r2, #125	; 0x7d
 801b7d4:	d169      	bne.n	801b8aa <rcl_validate_topic_name+0x166>
 801b7d6:	2d00      	cmp	r5, #0
 801b7d8:	d15c      	bne.n	801b894 <rcl_validate_topic_name+0x150>
 801b7da:	2305      	movs	r3, #5
 801b7dc:	6033      	str	r3, [r6, #0]
 801b7de:	b137      	cbz	r7, 801b7ee <rcl_validate_topic_name+0xaa>
 801b7e0:	2000      	movs	r0, #0
 801b7e2:	6039      	str	r1, [r7, #0]
 801b7e4:	e7d9      	b.n	801b79a <rcl_validate_topic_name+0x56>
 801b7e6:	2304      	movs	r3, #4
 801b7e8:	6033      	str	r3, [r6, #0]
 801b7ea:	2f00      	cmp	r7, #0
 801b7ec:	d1d2      	bne.n	801b794 <rcl_validate_topic_name+0x50>
 801b7ee:	2000      	movs	r0, #0
 801b7f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7f4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b7f8:	0752      	lsls	r2, r2, #29
 801b7fa:	d509      	bpl.n	801b810 <rcl_validate_topic_name+0xcc>
 801b7fc:	2900      	cmp	r1, #0
 801b7fe:	bf0c      	ite	eq
 801b800:	2200      	moveq	r2, #0
 801b802:	f005 0201 	andne.w	r2, r5, #1
 801b806:	b11a      	cbz	r2, 801b810 <rcl_validate_topic_name+0xcc>
 801b808:	1e4d      	subs	r5, r1, #1
 801b80a:	429d      	cmp	r5, r3
 801b80c:	d031      	beq.n	801b872 <rcl_validate_topic_name+0x12e>
 801b80e:	4615      	mov	r5, r2
 801b810:	3101      	adds	r1, #1
 801b812:	4288      	cmp	r0, r1
 801b814:	d1c7      	bne.n	801b7a6 <rcl_validate_topic_name+0x62>
 801b816:	2d00      	cmp	r5, #0
 801b818:	d142      	bne.n	801b8a0 <rcl_validate_topic_name+0x15c>
 801b81a:	4628      	mov	r0, r5
 801b81c:	2301      	movs	r3, #1
 801b81e:	e00c      	b.n	801b83a <rcl_validate_topic_name+0xf6>
 801b820:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801b824:	d101      	bne.n	801b82a <rcl_validate_topic_name+0xe6>
 801b826:	2801      	cmp	r0, #1
 801b828:	d047      	beq.n	801b8ba <rcl_validate_topic_name+0x176>
 801b82a:	1c5a      	adds	r2, r3, #1
 801b82c:	428b      	cmp	r3, r1
 801b82e:	f100 0001 	add.w	r0, r0, #1
 801b832:	f104 0401 	add.w	r4, r4, #1
 801b836:	4613      	mov	r3, r2
 801b838:	d22e      	bcs.n	801b898 <rcl_validate_topic_name+0x154>
 801b83a:	4580      	cmp	r8, r0
 801b83c:	d0f5      	beq.n	801b82a <rcl_validate_topic_name+0xe6>
 801b83e:	7822      	ldrb	r2, [r4, #0]
 801b840:	2a2f      	cmp	r2, #47	; 0x2f
 801b842:	d1ed      	bne.n	801b820 <rcl_validate_topic_name+0xdc>
 801b844:	7862      	ldrb	r2, [r4, #1]
 801b846:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b84a:	0752      	lsls	r2, r2, #29
 801b84c:	d5ed      	bpl.n	801b82a <rcl_validate_topic_name+0xe6>
 801b84e:	2204      	movs	r2, #4
 801b850:	6032      	str	r2, [r6, #0]
 801b852:	2f00      	cmp	r7, #0
 801b854:	d0cb      	beq.n	801b7ee <rcl_validate_topic_name+0xaa>
 801b856:	2000      	movs	r0, #0
 801b858:	603b      	str	r3, [r7, #0]
 801b85a:	e79e      	b.n	801b79a <rcl_validate_topic_name+0x56>
 801b85c:	200b      	movs	r0, #11
 801b85e:	4770      	bx	lr
 801b860:	200b      	movs	r0, #11
 801b862:	e79a      	b.n	801b79a <rcl_validate_topic_name+0x56>
 801b864:	2900      	cmp	r1, #0
 801b866:	d0d3      	beq.n	801b810 <rcl_validate_topic_name+0xcc>
 801b868:	2306      	movs	r3, #6
 801b86a:	6033      	str	r3, [r6, #0]
 801b86c:	2f00      	cmp	r7, #0
 801b86e:	d1b7      	bne.n	801b7e0 <rcl_validate_topic_name+0x9c>
 801b870:	e7bd      	b.n	801b7ee <rcl_validate_topic_name+0xaa>
 801b872:	2309      	movs	r3, #9
 801b874:	6033      	str	r3, [r6, #0]
 801b876:	2f00      	cmp	r7, #0
 801b878:	d1b2      	bne.n	801b7e0 <rcl_validate_topic_name+0x9c>
 801b87a:	e7b8      	b.n	801b7ee <rcl_validate_topic_name+0xaa>
 801b87c:	2d00      	cmp	r5, #0
 801b87e:	d0c7      	beq.n	801b810 <rcl_validate_topic_name+0xcc>
 801b880:	2308      	movs	r3, #8
 801b882:	6033      	str	r3, [r6, #0]
 801b884:	2f00      	cmp	r7, #0
 801b886:	d1ab      	bne.n	801b7e0 <rcl_validate_topic_name+0x9c>
 801b888:	e7b1      	b.n	801b7ee <rcl_validate_topic_name+0xaa>
 801b88a:	2d00      	cmp	r5, #0
 801b88c:	d1f8      	bne.n	801b880 <rcl_validate_topic_name+0x13c>
 801b88e:	460b      	mov	r3, r1
 801b890:	2501      	movs	r5, #1
 801b892:	e7bd      	b.n	801b810 <rcl_validate_topic_name+0xcc>
 801b894:	2500      	movs	r5, #0
 801b896:	e7bb      	b.n	801b810 <rcl_validate_topic_name+0xcc>
 801b898:	2300      	movs	r3, #0
 801b89a:	4618      	mov	r0, r3
 801b89c:	6033      	str	r3, [r6, #0]
 801b89e:	e77c      	b.n	801b79a <rcl_validate_topic_name+0x56>
 801b8a0:	2205      	movs	r2, #5
 801b8a2:	6032      	str	r2, [r6, #0]
 801b8a4:	2f00      	cmp	r7, #0
 801b8a6:	d1d6      	bne.n	801b856 <rcl_validate_topic_name+0x112>
 801b8a8:	e7a1      	b.n	801b7ee <rcl_validate_topic_name+0xaa>
 801b8aa:	2d00      	cmp	r5, #0
 801b8ac:	bf14      	ite	ne
 801b8ae:	2308      	movne	r3, #8
 801b8b0:	2303      	moveq	r3, #3
 801b8b2:	6033      	str	r3, [r6, #0]
 801b8b4:	2f00      	cmp	r7, #0
 801b8b6:	d193      	bne.n	801b7e0 <rcl_validate_topic_name+0x9c>
 801b8b8:	e799      	b.n	801b7ee <rcl_validate_topic_name+0xaa>
 801b8ba:	2307      	movs	r3, #7
 801b8bc:	6033      	str	r3, [r6, #0]
 801b8be:	2f00      	cmp	r7, #0
 801b8c0:	d095      	beq.n	801b7ee <rcl_validate_topic_name+0xaa>
 801b8c2:	2301      	movs	r3, #1
 801b8c4:	e7c7      	b.n	801b856 <rcl_validate_topic_name+0x112>
 801b8c6:	bf00      	nop
 801b8c8:	0801e64c 	.word	0x0801e64c

0801b8cc <calloc>:
 801b8cc:	4b02      	ldr	r3, [pc, #8]	; (801b8d8 <calloc+0xc>)
 801b8ce:	460a      	mov	r2, r1
 801b8d0:	4601      	mov	r1, r0
 801b8d2:	6818      	ldr	r0, [r3, #0]
 801b8d4:	f000 b802 	b.w	801b8dc <_calloc_r>
 801b8d8:	200004d4 	.word	0x200004d4

0801b8dc <_calloc_r>:
 801b8dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b8de:	fba1 2402 	umull	r2, r4, r1, r2
 801b8e2:	b94c      	cbnz	r4, 801b8f8 <_calloc_r+0x1c>
 801b8e4:	4611      	mov	r1, r2
 801b8e6:	9201      	str	r2, [sp, #4]
 801b8e8:	f000 f898 	bl	801ba1c <_malloc_r>
 801b8ec:	9a01      	ldr	r2, [sp, #4]
 801b8ee:	4605      	mov	r5, r0
 801b8f0:	b930      	cbnz	r0, 801b900 <_calloc_r+0x24>
 801b8f2:	4628      	mov	r0, r5
 801b8f4:	b003      	add	sp, #12
 801b8f6:	bd30      	pop	{r4, r5, pc}
 801b8f8:	220c      	movs	r2, #12
 801b8fa:	6002      	str	r2, [r0, #0]
 801b8fc:	2500      	movs	r5, #0
 801b8fe:	e7f8      	b.n	801b8f2 <_calloc_r+0x16>
 801b900:	4621      	mov	r1, r4
 801b902:	f000 fd83 	bl	801c40c <memset>
 801b906:	e7f4      	b.n	801b8f2 <_calloc_r+0x16>

0801b908 <exit>:
 801b908:	b508      	push	{r3, lr}
 801b90a:	4b06      	ldr	r3, [pc, #24]	; (801b924 <exit+0x1c>)
 801b90c:	4604      	mov	r4, r0
 801b90e:	b113      	cbz	r3, 801b916 <exit+0xe>
 801b910:	2100      	movs	r1, #0
 801b912:	f3af 8000 	nop.w
 801b916:	4b04      	ldr	r3, [pc, #16]	; (801b928 <exit+0x20>)
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	b103      	cbz	r3, 801b91e <exit+0x16>
 801b91c:	4798      	blx	r3
 801b91e:	4620      	mov	r0, r4
 801b920:	f7e5 ff54 	bl	80017cc <_exit>
 801b924:	00000000 	.word	0x00000000
 801b928:	20012bf4 	.word	0x20012bf4

0801b92c <getenv>:
 801b92c:	b507      	push	{r0, r1, r2, lr}
 801b92e:	4b04      	ldr	r3, [pc, #16]	; (801b940 <getenv+0x14>)
 801b930:	4601      	mov	r1, r0
 801b932:	aa01      	add	r2, sp, #4
 801b934:	6818      	ldr	r0, [r3, #0]
 801b936:	f000 f805 	bl	801b944 <_findenv_r>
 801b93a:	b003      	add	sp, #12
 801b93c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b940:	200004d4 	.word	0x200004d4

0801b944 <_findenv_r>:
 801b944:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b948:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801b9b8 <_findenv_r+0x74>
 801b94c:	4607      	mov	r7, r0
 801b94e:	4689      	mov	r9, r1
 801b950:	4616      	mov	r6, r2
 801b952:	f000 fe51 	bl	801c5f8 <__env_lock>
 801b956:	f8da 4000 	ldr.w	r4, [sl]
 801b95a:	b134      	cbz	r4, 801b96a <_findenv_r+0x26>
 801b95c:	464b      	mov	r3, r9
 801b95e:	4698      	mov	r8, r3
 801b960:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b964:	b13a      	cbz	r2, 801b976 <_findenv_r+0x32>
 801b966:	2a3d      	cmp	r2, #61	; 0x3d
 801b968:	d1f9      	bne.n	801b95e <_findenv_r+0x1a>
 801b96a:	4638      	mov	r0, r7
 801b96c:	f000 fe4a 	bl	801c604 <__env_unlock>
 801b970:	2000      	movs	r0, #0
 801b972:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b976:	eba8 0809 	sub.w	r8, r8, r9
 801b97a:	46a3      	mov	fp, r4
 801b97c:	f854 0b04 	ldr.w	r0, [r4], #4
 801b980:	2800      	cmp	r0, #0
 801b982:	d0f2      	beq.n	801b96a <_findenv_r+0x26>
 801b984:	4642      	mov	r2, r8
 801b986:	4649      	mov	r1, r9
 801b988:	f000 fd55 	bl	801c436 <strncmp>
 801b98c:	2800      	cmp	r0, #0
 801b98e:	d1f4      	bne.n	801b97a <_findenv_r+0x36>
 801b990:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b994:	eb03 0508 	add.w	r5, r3, r8
 801b998:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b99c:	2b3d      	cmp	r3, #61	; 0x3d
 801b99e:	d1ec      	bne.n	801b97a <_findenv_r+0x36>
 801b9a0:	f8da 3000 	ldr.w	r3, [sl]
 801b9a4:	ebab 0303 	sub.w	r3, fp, r3
 801b9a8:	109b      	asrs	r3, r3, #2
 801b9aa:	4638      	mov	r0, r7
 801b9ac:	6033      	str	r3, [r6, #0]
 801b9ae:	f000 fe29 	bl	801c604 <__env_unlock>
 801b9b2:	1c68      	adds	r0, r5, #1
 801b9b4:	e7dd      	b.n	801b972 <_findenv_r+0x2e>
 801b9b6:	bf00      	nop
 801b9b8:	20000000 	.word	0x20000000

0801b9bc <malloc>:
 801b9bc:	4b02      	ldr	r3, [pc, #8]	; (801b9c8 <malloc+0xc>)
 801b9be:	4601      	mov	r1, r0
 801b9c0:	6818      	ldr	r0, [r3, #0]
 801b9c2:	f000 b82b 	b.w	801ba1c <_malloc_r>
 801b9c6:	bf00      	nop
 801b9c8:	200004d4 	.word	0x200004d4

0801b9cc <free>:
 801b9cc:	4b02      	ldr	r3, [pc, #8]	; (801b9d8 <free+0xc>)
 801b9ce:	4601      	mov	r1, r0
 801b9d0:	6818      	ldr	r0, [r3, #0]
 801b9d2:	f000 be1d 	b.w	801c610 <_free_r>
 801b9d6:	bf00      	nop
 801b9d8:	200004d4 	.word	0x200004d4

0801b9dc <sbrk_aligned>:
 801b9dc:	b570      	push	{r4, r5, r6, lr}
 801b9de:	4e0e      	ldr	r6, [pc, #56]	; (801ba18 <sbrk_aligned+0x3c>)
 801b9e0:	460c      	mov	r4, r1
 801b9e2:	6831      	ldr	r1, [r6, #0]
 801b9e4:	4605      	mov	r5, r0
 801b9e6:	b911      	cbnz	r1, 801b9ee <sbrk_aligned+0x12>
 801b9e8:	f000 fd82 	bl	801c4f0 <_sbrk_r>
 801b9ec:	6030      	str	r0, [r6, #0]
 801b9ee:	4621      	mov	r1, r4
 801b9f0:	4628      	mov	r0, r5
 801b9f2:	f000 fd7d 	bl	801c4f0 <_sbrk_r>
 801b9f6:	1c43      	adds	r3, r0, #1
 801b9f8:	d00a      	beq.n	801ba10 <sbrk_aligned+0x34>
 801b9fa:	1cc4      	adds	r4, r0, #3
 801b9fc:	f024 0403 	bic.w	r4, r4, #3
 801ba00:	42a0      	cmp	r0, r4
 801ba02:	d007      	beq.n	801ba14 <sbrk_aligned+0x38>
 801ba04:	1a21      	subs	r1, r4, r0
 801ba06:	4628      	mov	r0, r5
 801ba08:	f000 fd72 	bl	801c4f0 <_sbrk_r>
 801ba0c:	3001      	adds	r0, #1
 801ba0e:	d101      	bne.n	801ba14 <sbrk_aligned+0x38>
 801ba10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801ba14:	4620      	mov	r0, r4
 801ba16:	bd70      	pop	{r4, r5, r6, pc}
 801ba18:	20012ab8 	.word	0x20012ab8

0801ba1c <_malloc_r>:
 801ba1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ba20:	1ccd      	adds	r5, r1, #3
 801ba22:	f025 0503 	bic.w	r5, r5, #3
 801ba26:	3508      	adds	r5, #8
 801ba28:	2d0c      	cmp	r5, #12
 801ba2a:	bf38      	it	cc
 801ba2c:	250c      	movcc	r5, #12
 801ba2e:	2d00      	cmp	r5, #0
 801ba30:	4607      	mov	r7, r0
 801ba32:	db01      	blt.n	801ba38 <_malloc_r+0x1c>
 801ba34:	42a9      	cmp	r1, r5
 801ba36:	d905      	bls.n	801ba44 <_malloc_r+0x28>
 801ba38:	230c      	movs	r3, #12
 801ba3a:	603b      	str	r3, [r7, #0]
 801ba3c:	2600      	movs	r6, #0
 801ba3e:	4630      	mov	r0, r6
 801ba40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801bb18 <_malloc_r+0xfc>
 801ba48:	f000 f868 	bl	801bb1c <__malloc_lock>
 801ba4c:	f8d8 3000 	ldr.w	r3, [r8]
 801ba50:	461c      	mov	r4, r3
 801ba52:	bb5c      	cbnz	r4, 801baac <_malloc_r+0x90>
 801ba54:	4629      	mov	r1, r5
 801ba56:	4638      	mov	r0, r7
 801ba58:	f7ff ffc0 	bl	801b9dc <sbrk_aligned>
 801ba5c:	1c43      	adds	r3, r0, #1
 801ba5e:	4604      	mov	r4, r0
 801ba60:	d155      	bne.n	801bb0e <_malloc_r+0xf2>
 801ba62:	f8d8 4000 	ldr.w	r4, [r8]
 801ba66:	4626      	mov	r6, r4
 801ba68:	2e00      	cmp	r6, #0
 801ba6a:	d145      	bne.n	801baf8 <_malloc_r+0xdc>
 801ba6c:	2c00      	cmp	r4, #0
 801ba6e:	d048      	beq.n	801bb02 <_malloc_r+0xe6>
 801ba70:	6823      	ldr	r3, [r4, #0]
 801ba72:	4631      	mov	r1, r6
 801ba74:	4638      	mov	r0, r7
 801ba76:	eb04 0903 	add.w	r9, r4, r3
 801ba7a:	f000 fd39 	bl	801c4f0 <_sbrk_r>
 801ba7e:	4581      	cmp	r9, r0
 801ba80:	d13f      	bne.n	801bb02 <_malloc_r+0xe6>
 801ba82:	6821      	ldr	r1, [r4, #0]
 801ba84:	1a6d      	subs	r5, r5, r1
 801ba86:	4629      	mov	r1, r5
 801ba88:	4638      	mov	r0, r7
 801ba8a:	f7ff ffa7 	bl	801b9dc <sbrk_aligned>
 801ba8e:	3001      	adds	r0, #1
 801ba90:	d037      	beq.n	801bb02 <_malloc_r+0xe6>
 801ba92:	6823      	ldr	r3, [r4, #0]
 801ba94:	442b      	add	r3, r5
 801ba96:	6023      	str	r3, [r4, #0]
 801ba98:	f8d8 3000 	ldr.w	r3, [r8]
 801ba9c:	2b00      	cmp	r3, #0
 801ba9e:	d038      	beq.n	801bb12 <_malloc_r+0xf6>
 801baa0:	685a      	ldr	r2, [r3, #4]
 801baa2:	42a2      	cmp	r2, r4
 801baa4:	d12b      	bne.n	801bafe <_malloc_r+0xe2>
 801baa6:	2200      	movs	r2, #0
 801baa8:	605a      	str	r2, [r3, #4]
 801baaa:	e00f      	b.n	801bacc <_malloc_r+0xb0>
 801baac:	6822      	ldr	r2, [r4, #0]
 801baae:	1b52      	subs	r2, r2, r5
 801bab0:	d41f      	bmi.n	801baf2 <_malloc_r+0xd6>
 801bab2:	2a0b      	cmp	r2, #11
 801bab4:	d917      	bls.n	801bae6 <_malloc_r+0xca>
 801bab6:	1961      	adds	r1, r4, r5
 801bab8:	42a3      	cmp	r3, r4
 801baba:	6025      	str	r5, [r4, #0]
 801babc:	bf18      	it	ne
 801babe:	6059      	strne	r1, [r3, #4]
 801bac0:	6863      	ldr	r3, [r4, #4]
 801bac2:	bf08      	it	eq
 801bac4:	f8c8 1000 	streq.w	r1, [r8]
 801bac8:	5162      	str	r2, [r4, r5]
 801baca:	604b      	str	r3, [r1, #4]
 801bacc:	4638      	mov	r0, r7
 801bace:	f104 060b 	add.w	r6, r4, #11
 801bad2:	f000 f829 	bl	801bb28 <__malloc_unlock>
 801bad6:	f026 0607 	bic.w	r6, r6, #7
 801bada:	1d23      	adds	r3, r4, #4
 801badc:	1af2      	subs	r2, r6, r3
 801bade:	d0ae      	beq.n	801ba3e <_malloc_r+0x22>
 801bae0:	1b9b      	subs	r3, r3, r6
 801bae2:	50a3      	str	r3, [r4, r2]
 801bae4:	e7ab      	b.n	801ba3e <_malloc_r+0x22>
 801bae6:	42a3      	cmp	r3, r4
 801bae8:	6862      	ldr	r2, [r4, #4]
 801baea:	d1dd      	bne.n	801baa8 <_malloc_r+0x8c>
 801baec:	f8c8 2000 	str.w	r2, [r8]
 801baf0:	e7ec      	b.n	801bacc <_malloc_r+0xb0>
 801baf2:	4623      	mov	r3, r4
 801baf4:	6864      	ldr	r4, [r4, #4]
 801baf6:	e7ac      	b.n	801ba52 <_malloc_r+0x36>
 801baf8:	4634      	mov	r4, r6
 801bafa:	6876      	ldr	r6, [r6, #4]
 801bafc:	e7b4      	b.n	801ba68 <_malloc_r+0x4c>
 801bafe:	4613      	mov	r3, r2
 801bb00:	e7cc      	b.n	801ba9c <_malloc_r+0x80>
 801bb02:	230c      	movs	r3, #12
 801bb04:	603b      	str	r3, [r7, #0]
 801bb06:	4638      	mov	r0, r7
 801bb08:	f000 f80e 	bl	801bb28 <__malloc_unlock>
 801bb0c:	e797      	b.n	801ba3e <_malloc_r+0x22>
 801bb0e:	6025      	str	r5, [r4, #0]
 801bb10:	e7dc      	b.n	801bacc <_malloc_r+0xb0>
 801bb12:	605b      	str	r3, [r3, #4]
 801bb14:	deff      	udf	#255	; 0xff
 801bb16:	bf00      	nop
 801bb18:	20012ab4 	.word	0x20012ab4

0801bb1c <__malloc_lock>:
 801bb1c:	4801      	ldr	r0, [pc, #4]	; (801bb24 <__malloc_lock+0x8>)
 801bb1e:	f000 bd34 	b.w	801c58a <__retarget_lock_acquire_recursive>
 801bb22:	bf00      	nop
 801bb24:	20012bfd 	.word	0x20012bfd

0801bb28 <__malloc_unlock>:
 801bb28:	4801      	ldr	r0, [pc, #4]	; (801bb30 <__malloc_unlock+0x8>)
 801bb2a:	f000 bd2f 	b.w	801c58c <__retarget_lock_release_recursive>
 801bb2e:	bf00      	nop
 801bb30:	20012bfd 	.word	0x20012bfd

0801bb34 <srand>:
 801bb34:	b538      	push	{r3, r4, r5, lr}
 801bb36:	4b10      	ldr	r3, [pc, #64]	; (801bb78 <srand+0x44>)
 801bb38:	681d      	ldr	r5, [r3, #0]
 801bb3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801bb3c:	4604      	mov	r4, r0
 801bb3e:	b9b3      	cbnz	r3, 801bb6e <srand+0x3a>
 801bb40:	2018      	movs	r0, #24
 801bb42:	f7ff ff3b 	bl	801b9bc <malloc>
 801bb46:	4602      	mov	r2, r0
 801bb48:	6328      	str	r0, [r5, #48]	; 0x30
 801bb4a:	b920      	cbnz	r0, 801bb56 <srand+0x22>
 801bb4c:	4b0b      	ldr	r3, [pc, #44]	; (801bb7c <srand+0x48>)
 801bb4e:	480c      	ldr	r0, [pc, #48]	; (801bb80 <srand+0x4c>)
 801bb50:	2146      	movs	r1, #70	; 0x46
 801bb52:	f000 fd33 	bl	801c5bc <__assert_func>
 801bb56:	490b      	ldr	r1, [pc, #44]	; (801bb84 <srand+0x50>)
 801bb58:	4b0b      	ldr	r3, [pc, #44]	; (801bb88 <srand+0x54>)
 801bb5a:	e9c0 1300 	strd	r1, r3, [r0]
 801bb5e:	4b0b      	ldr	r3, [pc, #44]	; (801bb8c <srand+0x58>)
 801bb60:	6083      	str	r3, [r0, #8]
 801bb62:	230b      	movs	r3, #11
 801bb64:	8183      	strh	r3, [r0, #12]
 801bb66:	2100      	movs	r1, #0
 801bb68:	2001      	movs	r0, #1
 801bb6a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bb6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801bb70:	2200      	movs	r2, #0
 801bb72:	611c      	str	r4, [r3, #16]
 801bb74:	615a      	str	r2, [r3, #20]
 801bb76:	bd38      	pop	{r3, r4, r5, pc}
 801bb78:	200004d4 	.word	0x200004d4
 801bb7c:	0801e5dc 	.word	0x0801e5dc
 801bb80:	0801e5f3 	.word	0x0801e5f3
 801bb84:	abcd330e 	.word	0xabcd330e
 801bb88:	e66d1234 	.word	0xe66d1234
 801bb8c:	0005deec 	.word	0x0005deec

0801bb90 <rand>:
 801bb90:	4b16      	ldr	r3, [pc, #88]	; (801bbec <rand+0x5c>)
 801bb92:	b510      	push	{r4, lr}
 801bb94:	681c      	ldr	r4, [r3, #0]
 801bb96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801bb98:	b9b3      	cbnz	r3, 801bbc8 <rand+0x38>
 801bb9a:	2018      	movs	r0, #24
 801bb9c:	f7ff ff0e 	bl	801b9bc <malloc>
 801bba0:	4602      	mov	r2, r0
 801bba2:	6320      	str	r0, [r4, #48]	; 0x30
 801bba4:	b920      	cbnz	r0, 801bbb0 <rand+0x20>
 801bba6:	4b12      	ldr	r3, [pc, #72]	; (801bbf0 <rand+0x60>)
 801bba8:	4812      	ldr	r0, [pc, #72]	; (801bbf4 <rand+0x64>)
 801bbaa:	2152      	movs	r1, #82	; 0x52
 801bbac:	f000 fd06 	bl	801c5bc <__assert_func>
 801bbb0:	4911      	ldr	r1, [pc, #68]	; (801bbf8 <rand+0x68>)
 801bbb2:	4b12      	ldr	r3, [pc, #72]	; (801bbfc <rand+0x6c>)
 801bbb4:	e9c0 1300 	strd	r1, r3, [r0]
 801bbb8:	4b11      	ldr	r3, [pc, #68]	; (801bc00 <rand+0x70>)
 801bbba:	6083      	str	r3, [r0, #8]
 801bbbc:	230b      	movs	r3, #11
 801bbbe:	8183      	strh	r3, [r0, #12]
 801bbc0:	2100      	movs	r1, #0
 801bbc2:	2001      	movs	r0, #1
 801bbc4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801bbc8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801bbca:	480e      	ldr	r0, [pc, #56]	; (801bc04 <rand+0x74>)
 801bbcc:	690b      	ldr	r3, [r1, #16]
 801bbce:	694c      	ldr	r4, [r1, #20]
 801bbd0:	4a0d      	ldr	r2, [pc, #52]	; (801bc08 <rand+0x78>)
 801bbd2:	4358      	muls	r0, r3
 801bbd4:	fb02 0004 	mla	r0, r2, r4, r0
 801bbd8:	fba3 3202 	umull	r3, r2, r3, r2
 801bbdc:	3301      	adds	r3, #1
 801bbde:	eb40 0002 	adc.w	r0, r0, r2
 801bbe2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801bbe6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801bbea:	bd10      	pop	{r4, pc}
 801bbec:	200004d4 	.word	0x200004d4
 801bbf0:	0801e5dc 	.word	0x0801e5dc
 801bbf4:	0801e5f3 	.word	0x0801e5f3
 801bbf8:	abcd330e 	.word	0xabcd330e
 801bbfc:	e66d1234 	.word	0xe66d1234
 801bc00:	0005deec 	.word	0x0005deec
 801bc04:	5851f42d 	.word	0x5851f42d
 801bc08:	4c957f2d 	.word	0x4c957f2d

0801bc0c <realloc>:
 801bc0c:	4b02      	ldr	r3, [pc, #8]	; (801bc18 <realloc+0xc>)
 801bc0e:	460a      	mov	r2, r1
 801bc10:	4601      	mov	r1, r0
 801bc12:	6818      	ldr	r0, [r3, #0]
 801bc14:	f000 b802 	b.w	801bc1c <_realloc_r>
 801bc18:	200004d4 	.word	0x200004d4

0801bc1c <_realloc_r>:
 801bc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bc20:	4680      	mov	r8, r0
 801bc22:	4614      	mov	r4, r2
 801bc24:	460e      	mov	r6, r1
 801bc26:	b921      	cbnz	r1, 801bc32 <_realloc_r+0x16>
 801bc28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bc2c:	4611      	mov	r1, r2
 801bc2e:	f7ff bef5 	b.w	801ba1c <_malloc_r>
 801bc32:	b92a      	cbnz	r2, 801bc40 <_realloc_r+0x24>
 801bc34:	f000 fcec 	bl	801c610 <_free_r>
 801bc38:	4625      	mov	r5, r4
 801bc3a:	4628      	mov	r0, r5
 801bc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bc40:	f000 fd32 	bl	801c6a8 <_malloc_usable_size_r>
 801bc44:	4284      	cmp	r4, r0
 801bc46:	4607      	mov	r7, r0
 801bc48:	d802      	bhi.n	801bc50 <_realloc_r+0x34>
 801bc4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bc4e:	d812      	bhi.n	801bc76 <_realloc_r+0x5a>
 801bc50:	4621      	mov	r1, r4
 801bc52:	4640      	mov	r0, r8
 801bc54:	f7ff fee2 	bl	801ba1c <_malloc_r>
 801bc58:	4605      	mov	r5, r0
 801bc5a:	2800      	cmp	r0, #0
 801bc5c:	d0ed      	beq.n	801bc3a <_realloc_r+0x1e>
 801bc5e:	42bc      	cmp	r4, r7
 801bc60:	4622      	mov	r2, r4
 801bc62:	4631      	mov	r1, r6
 801bc64:	bf28      	it	cs
 801bc66:	463a      	movcs	r2, r7
 801bc68:	f000 fc99 	bl	801c59e <memcpy>
 801bc6c:	4631      	mov	r1, r6
 801bc6e:	4640      	mov	r0, r8
 801bc70:	f000 fcce 	bl	801c610 <_free_r>
 801bc74:	e7e1      	b.n	801bc3a <_realloc_r+0x1e>
 801bc76:	4635      	mov	r5, r6
 801bc78:	e7df      	b.n	801bc3a <_realloc_r+0x1e>
	...

0801bc7c <_strtoul_l.constprop.0>:
 801bc7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bc80:	4f36      	ldr	r7, [pc, #216]	; (801bd5c <_strtoul_l.constprop.0+0xe0>)
 801bc82:	4686      	mov	lr, r0
 801bc84:	460d      	mov	r5, r1
 801bc86:	4628      	mov	r0, r5
 801bc88:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bc8c:	5d3e      	ldrb	r6, [r7, r4]
 801bc8e:	f016 0608 	ands.w	r6, r6, #8
 801bc92:	d1f8      	bne.n	801bc86 <_strtoul_l.constprop.0+0xa>
 801bc94:	2c2d      	cmp	r4, #45	; 0x2d
 801bc96:	d130      	bne.n	801bcfa <_strtoul_l.constprop.0+0x7e>
 801bc98:	782c      	ldrb	r4, [r5, #0]
 801bc9a:	2601      	movs	r6, #1
 801bc9c:	1c85      	adds	r5, r0, #2
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d057      	beq.n	801bd52 <_strtoul_l.constprop.0+0xd6>
 801bca2:	2b10      	cmp	r3, #16
 801bca4:	d109      	bne.n	801bcba <_strtoul_l.constprop.0+0x3e>
 801bca6:	2c30      	cmp	r4, #48	; 0x30
 801bca8:	d107      	bne.n	801bcba <_strtoul_l.constprop.0+0x3e>
 801bcaa:	7828      	ldrb	r0, [r5, #0]
 801bcac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bcb0:	2858      	cmp	r0, #88	; 0x58
 801bcb2:	d149      	bne.n	801bd48 <_strtoul_l.constprop.0+0xcc>
 801bcb4:	786c      	ldrb	r4, [r5, #1]
 801bcb6:	2310      	movs	r3, #16
 801bcb8:	3502      	adds	r5, #2
 801bcba:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801bcbe:	2700      	movs	r7, #0
 801bcc0:	fbb8 f8f3 	udiv	r8, r8, r3
 801bcc4:	fb03 f908 	mul.w	r9, r3, r8
 801bcc8:	ea6f 0909 	mvn.w	r9, r9
 801bccc:	4638      	mov	r0, r7
 801bcce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bcd2:	f1bc 0f09 	cmp.w	ip, #9
 801bcd6:	d815      	bhi.n	801bd04 <_strtoul_l.constprop.0+0x88>
 801bcd8:	4664      	mov	r4, ip
 801bcda:	42a3      	cmp	r3, r4
 801bcdc:	dd23      	ble.n	801bd26 <_strtoul_l.constprop.0+0xaa>
 801bcde:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801bce2:	d007      	beq.n	801bcf4 <_strtoul_l.constprop.0+0x78>
 801bce4:	4580      	cmp	r8, r0
 801bce6:	d31b      	bcc.n	801bd20 <_strtoul_l.constprop.0+0xa4>
 801bce8:	d101      	bne.n	801bcee <_strtoul_l.constprop.0+0x72>
 801bcea:	45a1      	cmp	r9, r4
 801bcec:	db18      	blt.n	801bd20 <_strtoul_l.constprop.0+0xa4>
 801bcee:	fb00 4003 	mla	r0, r0, r3, r4
 801bcf2:	2701      	movs	r7, #1
 801bcf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bcf8:	e7e9      	b.n	801bcce <_strtoul_l.constprop.0+0x52>
 801bcfa:	2c2b      	cmp	r4, #43	; 0x2b
 801bcfc:	bf04      	itt	eq
 801bcfe:	782c      	ldrbeq	r4, [r5, #0]
 801bd00:	1c85      	addeq	r5, r0, #2
 801bd02:	e7cc      	b.n	801bc9e <_strtoul_l.constprop.0+0x22>
 801bd04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801bd08:	f1bc 0f19 	cmp.w	ip, #25
 801bd0c:	d801      	bhi.n	801bd12 <_strtoul_l.constprop.0+0x96>
 801bd0e:	3c37      	subs	r4, #55	; 0x37
 801bd10:	e7e3      	b.n	801bcda <_strtoul_l.constprop.0+0x5e>
 801bd12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801bd16:	f1bc 0f19 	cmp.w	ip, #25
 801bd1a:	d804      	bhi.n	801bd26 <_strtoul_l.constprop.0+0xaa>
 801bd1c:	3c57      	subs	r4, #87	; 0x57
 801bd1e:	e7dc      	b.n	801bcda <_strtoul_l.constprop.0+0x5e>
 801bd20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801bd24:	e7e6      	b.n	801bcf4 <_strtoul_l.constprop.0+0x78>
 801bd26:	1c7b      	adds	r3, r7, #1
 801bd28:	d106      	bne.n	801bd38 <_strtoul_l.constprop.0+0xbc>
 801bd2a:	2322      	movs	r3, #34	; 0x22
 801bd2c:	f8ce 3000 	str.w	r3, [lr]
 801bd30:	4638      	mov	r0, r7
 801bd32:	b932      	cbnz	r2, 801bd42 <_strtoul_l.constprop.0+0xc6>
 801bd34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bd38:	b106      	cbz	r6, 801bd3c <_strtoul_l.constprop.0+0xc0>
 801bd3a:	4240      	negs	r0, r0
 801bd3c:	2a00      	cmp	r2, #0
 801bd3e:	d0f9      	beq.n	801bd34 <_strtoul_l.constprop.0+0xb8>
 801bd40:	b107      	cbz	r7, 801bd44 <_strtoul_l.constprop.0+0xc8>
 801bd42:	1e69      	subs	r1, r5, #1
 801bd44:	6011      	str	r1, [r2, #0]
 801bd46:	e7f5      	b.n	801bd34 <_strtoul_l.constprop.0+0xb8>
 801bd48:	2430      	movs	r4, #48	; 0x30
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d1b5      	bne.n	801bcba <_strtoul_l.constprop.0+0x3e>
 801bd4e:	2308      	movs	r3, #8
 801bd50:	e7b3      	b.n	801bcba <_strtoul_l.constprop.0+0x3e>
 801bd52:	2c30      	cmp	r4, #48	; 0x30
 801bd54:	d0a9      	beq.n	801bcaa <_strtoul_l.constprop.0+0x2e>
 801bd56:	230a      	movs	r3, #10
 801bd58:	e7af      	b.n	801bcba <_strtoul_l.constprop.0+0x3e>
 801bd5a:	bf00      	nop
 801bd5c:	0801e64c 	.word	0x0801e64c

0801bd60 <strtoul>:
 801bd60:	4613      	mov	r3, r2
 801bd62:	460a      	mov	r2, r1
 801bd64:	4601      	mov	r1, r0
 801bd66:	4802      	ldr	r0, [pc, #8]	; (801bd70 <strtoul+0x10>)
 801bd68:	6800      	ldr	r0, [r0, #0]
 801bd6a:	f7ff bf87 	b.w	801bc7c <_strtoul_l.constprop.0>
 801bd6e:	bf00      	nop
 801bd70:	200004d4 	.word	0x200004d4

0801bd74 <std>:
 801bd74:	2300      	movs	r3, #0
 801bd76:	b510      	push	{r4, lr}
 801bd78:	4604      	mov	r4, r0
 801bd7a:	e9c0 3300 	strd	r3, r3, [r0]
 801bd7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bd82:	6083      	str	r3, [r0, #8]
 801bd84:	8181      	strh	r1, [r0, #12]
 801bd86:	6643      	str	r3, [r0, #100]	; 0x64
 801bd88:	81c2      	strh	r2, [r0, #14]
 801bd8a:	6183      	str	r3, [r0, #24]
 801bd8c:	4619      	mov	r1, r3
 801bd8e:	2208      	movs	r2, #8
 801bd90:	305c      	adds	r0, #92	; 0x5c
 801bd92:	f000 fb3b 	bl	801c40c <memset>
 801bd96:	4b0d      	ldr	r3, [pc, #52]	; (801bdcc <std+0x58>)
 801bd98:	6263      	str	r3, [r4, #36]	; 0x24
 801bd9a:	4b0d      	ldr	r3, [pc, #52]	; (801bdd0 <std+0x5c>)
 801bd9c:	62a3      	str	r3, [r4, #40]	; 0x28
 801bd9e:	4b0d      	ldr	r3, [pc, #52]	; (801bdd4 <std+0x60>)
 801bda0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bda2:	4b0d      	ldr	r3, [pc, #52]	; (801bdd8 <std+0x64>)
 801bda4:	6323      	str	r3, [r4, #48]	; 0x30
 801bda6:	4b0d      	ldr	r3, [pc, #52]	; (801bddc <std+0x68>)
 801bda8:	6224      	str	r4, [r4, #32]
 801bdaa:	429c      	cmp	r4, r3
 801bdac:	d006      	beq.n	801bdbc <std+0x48>
 801bdae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801bdb2:	4294      	cmp	r4, r2
 801bdb4:	d002      	beq.n	801bdbc <std+0x48>
 801bdb6:	33d0      	adds	r3, #208	; 0xd0
 801bdb8:	429c      	cmp	r4, r3
 801bdba:	d105      	bne.n	801bdc8 <std+0x54>
 801bdbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bdc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bdc4:	f000 bbe0 	b.w	801c588 <__retarget_lock_init_recursive>
 801bdc8:	bd10      	pop	{r4, pc}
 801bdca:	bf00      	nop
 801bdcc:	0801c195 	.word	0x0801c195
 801bdd0:	0801c1b7 	.word	0x0801c1b7
 801bdd4:	0801c1ef 	.word	0x0801c1ef
 801bdd8:	0801c213 	.word	0x0801c213
 801bddc:	20012abc 	.word	0x20012abc

0801bde0 <stdio_exit_handler>:
 801bde0:	4a02      	ldr	r2, [pc, #8]	; (801bdec <stdio_exit_handler+0xc>)
 801bde2:	4903      	ldr	r1, [pc, #12]	; (801bdf0 <stdio_exit_handler+0x10>)
 801bde4:	4803      	ldr	r0, [pc, #12]	; (801bdf4 <stdio_exit_handler+0x14>)
 801bde6:	f000 b869 	b.w	801bebc <_fwalk_sglue>
 801bdea:	bf00      	nop
 801bdec:	2000047c 	.word	0x2000047c
 801bdf0:	0801d01d 	.word	0x0801d01d
 801bdf4:	20000488 	.word	0x20000488

0801bdf8 <cleanup_stdio>:
 801bdf8:	6841      	ldr	r1, [r0, #4]
 801bdfa:	4b0c      	ldr	r3, [pc, #48]	; (801be2c <cleanup_stdio+0x34>)
 801bdfc:	4299      	cmp	r1, r3
 801bdfe:	b510      	push	{r4, lr}
 801be00:	4604      	mov	r4, r0
 801be02:	d001      	beq.n	801be08 <cleanup_stdio+0x10>
 801be04:	f001 f90a 	bl	801d01c <_fflush_r>
 801be08:	68a1      	ldr	r1, [r4, #8]
 801be0a:	4b09      	ldr	r3, [pc, #36]	; (801be30 <cleanup_stdio+0x38>)
 801be0c:	4299      	cmp	r1, r3
 801be0e:	d002      	beq.n	801be16 <cleanup_stdio+0x1e>
 801be10:	4620      	mov	r0, r4
 801be12:	f001 f903 	bl	801d01c <_fflush_r>
 801be16:	68e1      	ldr	r1, [r4, #12]
 801be18:	4b06      	ldr	r3, [pc, #24]	; (801be34 <cleanup_stdio+0x3c>)
 801be1a:	4299      	cmp	r1, r3
 801be1c:	d004      	beq.n	801be28 <cleanup_stdio+0x30>
 801be1e:	4620      	mov	r0, r4
 801be20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be24:	f001 b8fa 	b.w	801d01c <_fflush_r>
 801be28:	bd10      	pop	{r4, pc}
 801be2a:	bf00      	nop
 801be2c:	20012abc 	.word	0x20012abc
 801be30:	20012b24 	.word	0x20012b24
 801be34:	20012b8c 	.word	0x20012b8c

0801be38 <global_stdio_init.part.0>:
 801be38:	b510      	push	{r4, lr}
 801be3a:	4b0b      	ldr	r3, [pc, #44]	; (801be68 <global_stdio_init.part.0+0x30>)
 801be3c:	4c0b      	ldr	r4, [pc, #44]	; (801be6c <global_stdio_init.part.0+0x34>)
 801be3e:	4a0c      	ldr	r2, [pc, #48]	; (801be70 <global_stdio_init.part.0+0x38>)
 801be40:	601a      	str	r2, [r3, #0]
 801be42:	4620      	mov	r0, r4
 801be44:	2200      	movs	r2, #0
 801be46:	2104      	movs	r1, #4
 801be48:	f7ff ff94 	bl	801bd74 <std>
 801be4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801be50:	2201      	movs	r2, #1
 801be52:	2109      	movs	r1, #9
 801be54:	f7ff ff8e 	bl	801bd74 <std>
 801be58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801be5c:	2202      	movs	r2, #2
 801be5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be62:	2112      	movs	r1, #18
 801be64:	f7ff bf86 	b.w	801bd74 <std>
 801be68:	20012bf4 	.word	0x20012bf4
 801be6c:	20012abc 	.word	0x20012abc
 801be70:	0801bde1 	.word	0x0801bde1

0801be74 <__sfp_lock_acquire>:
 801be74:	4801      	ldr	r0, [pc, #4]	; (801be7c <__sfp_lock_acquire+0x8>)
 801be76:	f000 bb88 	b.w	801c58a <__retarget_lock_acquire_recursive>
 801be7a:	bf00      	nop
 801be7c:	20012bfe 	.word	0x20012bfe

0801be80 <__sfp_lock_release>:
 801be80:	4801      	ldr	r0, [pc, #4]	; (801be88 <__sfp_lock_release+0x8>)
 801be82:	f000 bb83 	b.w	801c58c <__retarget_lock_release_recursive>
 801be86:	bf00      	nop
 801be88:	20012bfe 	.word	0x20012bfe

0801be8c <__sinit>:
 801be8c:	b510      	push	{r4, lr}
 801be8e:	4604      	mov	r4, r0
 801be90:	f7ff fff0 	bl	801be74 <__sfp_lock_acquire>
 801be94:	6a23      	ldr	r3, [r4, #32]
 801be96:	b11b      	cbz	r3, 801bea0 <__sinit+0x14>
 801be98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801be9c:	f7ff bff0 	b.w	801be80 <__sfp_lock_release>
 801bea0:	4b04      	ldr	r3, [pc, #16]	; (801beb4 <__sinit+0x28>)
 801bea2:	6223      	str	r3, [r4, #32]
 801bea4:	4b04      	ldr	r3, [pc, #16]	; (801beb8 <__sinit+0x2c>)
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	2b00      	cmp	r3, #0
 801beaa:	d1f5      	bne.n	801be98 <__sinit+0xc>
 801beac:	f7ff ffc4 	bl	801be38 <global_stdio_init.part.0>
 801beb0:	e7f2      	b.n	801be98 <__sinit+0xc>
 801beb2:	bf00      	nop
 801beb4:	0801bdf9 	.word	0x0801bdf9
 801beb8:	20012bf4 	.word	0x20012bf4

0801bebc <_fwalk_sglue>:
 801bebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bec0:	4607      	mov	r7, r0
 801bec2:	4688      	mov	r8, r1
 801bec4:	4614      	mov	r4, r2
 801bec6:	2600      	movs	r6, #0
 801bec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801becc:	f1b9 0901 	subs.w	r9, r9, #1
 801bed0:	d505      	bpl.n	801bede <_fwalk_sglue+0x22>
 801bed2:	6824      	ldr	r4, [r4, #0]
 801bed4:	2c00      	cmp	r4, #0
 801bed6:	d1f7      	bne.n	801bec8 <_fwalk_sglue+0xc>
 801bed8:	4630      	mov	r0, r6
 801beda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bede:	89ab      	ldrh	r3, [r5, #12]
 801bee0:	2b01      	cmp	r3, #1
 801bee2:	d907      	bls.n	801bef4 <_fwalk_sglue+0x38>
 801bee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801bee8:	3301      	adds	r3, #1
 801beea:	d003      	beq.n	801bef4 <_fwalk_sglue+0x38>
 801beec:	4629      	mov	r1, r5
 801beee:	4638      	mov	r0, r7
 801bef0:	47c0      	blx	r8
 801bef2:	4306      	orrs	r6, r0
 801bef4:	3568      	adds	r5, #104	; 0x68
 801bef6:	e7e9      	b.n	801becc <_fwalk_sglue+0x10>

0801bef8 <_fwrite_r>:
 801bef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801befc:	9c08      	ldr	r4, [sp, #32]
 801befe:	468a      	mov	sl, r1
 801bf00:	4690      	mov	r8, r2
 801bf02:	fb02 f903 	mul.w	r9, r2, r3
 801bf06:	4606      	mov	r6, r0
 801bf08:	b118      	cbz	r0, 801bf12 <_fwrite_r+0x1a>
 801bf0a:	6a03      	ldr	r3, [r0, #32]
 801bf0c:	b90b      	cbnz	r3, 801bf12 <_fwrite_r+0x1a>
 801bf0e:	f7ff ffbd 	bl	801be8c <__sinit>
 801bf12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bf14:	07dd      	lsls	r5, r3, #31
 801bf16:	d405      	bmi.n	801bf24 <_fwrite_r+0x2c>
 801bf18:	89a3      	ldrh	r3, [r4, #12]
 801bf1a:	0598      	lsls	r0, r3, #22
 801bf1c:	d402      	bmi.n	801bf24 <_fwrite_r+0x2c>
 801bf1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf20:	f000 fb33 	bl	801c58a <__retarget_lock_acquire_recursive>
 801bf24:	89a3      	ldrh	r3, [r4, #12]
 801bf26:	0719      	lsls	r1, r3, #28
 801bf28:	d516      	bpl.n	801bf58 <_fwrite_r+0x60>
 801bf2a:	6923      	ldr	r3, [r4, #16]
 801bf2c:	b1a3      	cbz	r3, 801bf58 <_fwrite_r+0x60>
 801bf2e:	2500      	movs	r5, #0
 801bf30:	454d      	cmp	r5, r9
 801bf32:	d01f      	beq.n	801bf74 <_fwrite_r+0x7c>
 801bf34:	68a7      	ldr	r7, [r4, #8]
 801bf36:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801bf3a:	3f01      	subs	r7, #1
 801bf3c:	2f00      	cmp	r7, #0
 801bf3e:	60a7      	str	r7, [r4, #8]
 801bf40:	da04      	bge.n	801bf4c <_fwrite_r+0x54>
 801bf42:	69a3      	ldr	r3, [r4, #24]
 801bf44:	429f      	cmp	r7, r3
 801bf46:	db0f      	blt.n	801bf68 <_fwrite_r+0x70>
 801bf48:	290a      	cmp	r1, #10
 801bf4a:	d00d      	beq.n	801bf68 <_fwrite_r+0x70>
 801bf4c:	6823      	ldr	r3, [r4, #0]
 801bf4e:	1c5a      	adds	r2, r3, #1
 801bf50:	6022      	str	r2, [r4, #0]
 801bf52:	7019      	strb	r1, [r3, #0]
 801bf54:	3501      	adds	r5, #1
 801bf56:	e7eb      	b.n	801bf30 <_fwrite_r+0x38>
 801bf58:	4621      	mov	r1, r4
 801bf5a:	4630      	mov	r0, r6
 801bf5c:	f000 f9d4 	bl	801c308 <__swsetup_r>
 801bf60:	2800      	cmp	r0, #0
 801bf62:	d0e4      	beq.n	801bf2e <_fwrite_r+0x36>
 801bf64:	2500      	movs	r5, #0
 801bf66:	e005      	b.n	801bf74 <_fwrite_r+0x7c>
 801bf68:	4622      	mov	r2, r4
 801bf6a:	4630      	mov	r0, r6
 801bf6c:	f000 f98e 	bl	801c28c <__swbuf_r>
 801bf70:	3001      	adds	r0, #1
 801bf72:	d1ef      	bne.n	801bf54 <_fwrite_r+0x5c>
 801bf74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bf76:	07da      	lsls	r2, r3, #31
 801bf78:	d405      	bmi.n	801bf86 <_fwrite_r+0x8e>
 801bf7a:	89a3      	ldrh	r3, [r4, #12]
 801bf7c:	059b      	lsls	r3, r3, #22
 801bf7e:	d402      	bmi.n	801bf86 <_fwrite_r+0x8e>
 801bf80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf82:	f000 fb03 	bl	801c58c <__retarget_lock_release_recursive>
 801bf86:	fbb5 f0f8 	udiv	r0, r5, r8
 801bf8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801bf90 <fwrite>:
 801bf90:	b507      	push	{r0, r1, r2, lr}
 801bf92:	9300      	str	r3, [sp, #0]
 801bf94:	4613      	mov	r3, r2
 801bf96:	460a      	mov	r2, r1
 801bf98:	4601      	mov	r1, r0
 801bf9a:	4803      	ldr	r0, [pc, #12]	; (801bfa8 <fwrite+0x18>)
 801bf9c:	6800      	ldr	r0, [r0, #0]
 801bf9e:	f7ff ffab 	bl	801bef8 <_fwrite_r>
 801bfa2:	b003      	add	sp, #12
 801bfa4:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfa8:	200004d4 	.word	0x200004d4

0801bfac <iprintf>:
 801bfac:	b40f      	push	{r0, r1, r2, r3}
 801bfae:	b507      	push	{r0, r1, r2, lr}
 801bfb0:	4906      	ldr	r1, [pc, #24]	; (801bfcc <iprintf+0x20>)
 801bfb2:	ab04      	add	r3, sp, #16
 801bfb4:	6808      	ldr	r0, [r1, #0]
 801bfb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801bfba:	6881      	ldr	r1, [r0, #8]
 801bfbc:	9301      	str	r3, [sp, #4]
 801bfbe:	f000 fcfd 	bl	801c9bc <_vfiprintf_r>
 801bfc2:	b003      	add	sp, #12
 801bfc4:	f85d eb04 	ldr.w	lr, [sp], #4
 801bfc8:	b004      	add	sp, #16
 801bfca:	4770      	bx	lr
 801bfcc:	200004d4 	.word	0x200004d4

0801bfd0 <setvbuf>:
 801bfd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bfd4:	461d      	mov	r5, r3
 801bfd6:	4b54      	ldr	r3, [pc, #336]	; (801c128 <setvbuf+0x158>)
 801bfd8:	681f      	ldr	r7, [r3, #0]
 801bfda:	4604      	mov	r4, r0
 801bfdc:	460e      	mov	r6, r1
 801bfde:	4690      	mov	r8, r2
 801bfe0:	b127      	cbz	r7, 801bfec <setvbuf+0x1c>
 801bfe2:	6a3b      	ldr	r3, [r7, #32]
 801bfe4:	b913      	cbnz	r3, 801bfec <setvbuf+0x1c>
 801bfe6:	4638      	mov	r0, r7
 801bfe8:	f7ff ff50 	bl	801be8c <__sinit>
 801bfec:	f1b8 0f02 	cmp.w	r8, #2
 801bff0:	d006      	beq.n	801c000 <setvbuf+0x30>
 801bff2:	f1b8 0f01 	cmp.w	r8, #1
 801bff6:	f200 8094 	bhi.w	801c122 <setvbuf+0x152>
 801bffa:	2d00      	cmp	r5, #0
 801bffc:	f2c0 8091 	blt.w	801c122 <setvbuf+0x152>
 801c000:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c002:	07da      	lsls	r2, r3, #31
 801c004:	d405      	bmi.n	801c012 <setvbuf+0x42>
 801c006:	89a3      	ldrh	r3, [r4, #12]
 801c008:	059b      	lsls	r3, r3, #22
 801c00a:	d402      	bmi.n	801c012 <setvbuf+0x42>
 801c00c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c00e:	f000 fabc 	bl	801c58a <__retarget_lock_acquire_recursive>
 801c012:	4621      	mov	r1, r4
 801c014:	4638      	mov	r0, r7
 801c016:	f001 f801 	bl	801d01c <_fflush_r>
 801c01a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c01c:	b141      	cbz	r1, 801c030 <setvbuf+0x60>
 801c01e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c022:	4299      	cmp	r1, r3
 801c024:	d002      	beq.n	801c02c <setvbuf+0x5c>
 801c026:	4638      	mov	r0, r7
 801c028:	f000 faf2 	bl	801c610 <_free_r>
 801c02c:	2300      	movs	r3, #0
 801c02e:	6363      	str	r3, [r4, #52]	; 0x34
 801c030:	2300      	movs	r3, #0
 801c032:	61a3      	str	r3, [r4, #24]
 801c034:	6063      	str	r3, [r4, #4]
 801c036:	89a3      	ldrh	r3, [r4, #12]
 801c038:	0618      	lsls	r0, r3, #24
 801c03a:	d503      	bpl.n	801c044 <setvbuf+0x74>
 801c03c:	6921      	ldr	r1, [r4, #16]
 801c03e:	4638      	mov	r0, r7
 801c040:	f000 fae6 	bl	801c610 <_free_r>
 801c044:	89a3      	ldrh	r3, [r4, #12]
 801c046:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801c04a:	f023 0303 	bic.w	r3, r3, #3
 801c04e:	f1b8 0f02 	cmp.w	r8, #2
 801c052:	81a3      	strh	r3, [r4, #12]
 801c054:	d05f      	beq.n	801c116 <setvbuf+0x146>
 801c056:	ab01      	add	r3, sp, #4
 801c058:	466a      	mov	r2, sp
 801c05a:	4621      	mov	r1, r4
 801c05c:	4638      	mov	r0, r7
 801c05e:	f001 f817 	bl	801d090 <__swhatbuf_r>
 801c062:	89a3      	ldrh	r3, [r4, #12]
 801c064:	4318      	orrs	r0, r3
 801c066:	81a0      	strh	r0, [r4, #12]
 801c068:	bb2d      	cbnz	r5, 801c0b6 <setvbuf+0xe6>
 801c06a:	9d00      	ldr	r5, [sp, #0]
 801c06c:	4628      	mov	r0, r5
 801c06e:	f7ff fca5 	bl	801b9bc <malloc>
 801c072:	4606      	mov	r6, r0
 801c074:	2800      	cmp	r0, #0
 801c076:	d150      	bne.n	801c11a <setvbuf+0x14a>
 801c078:	f8dd 9000 	ldr.w	r9, [sp]
 801c07c:	45a9      	cmp	r9, r5
 801c07e:	d13e      	bne.n	801c0fe <setvbuf+0x12e>
 801c080:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c084:	2200      	movs	r2, #0
 801c086:	60a2      	str	r2, [r4, #8]
 801c088:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801c08c:	6022      	str	r2, [r4, #0]
 801c08e:	6122      	str	r2, [r4, #16]
 801c090:	2201      	movs	r2, #1
 801c092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c096:	6162      	str	r2, [r4, #20]
 801c098:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c09a:	f043 0302 	orr.w	r3, r3, #2
 801c09e:	07d1      	lsls	r1, r2, #31
 801c0a0:	81a3      	strh	r3, [r4, #12]
 801c0a2:	d404      	bmi.n	801c0ae <setvbuf+0xde>
 801c0a4:	059b      	lsls	r3, r3, #22
 801c0a6:	d402      	bmi.n	801c0ae <setvbuf+0xde>
 801c0a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c0aa:	f000 fa6f 	bl	801c58c <__retarget_lock_release_recursive>
 801c0ae:	4628      	mov	r0, r5
 801c0b0:	b003      	add	sp, #12
 801c0b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c0b6:	2e00      	cmp	r6, #0
 801c0b8:	d0d8      	beq.n	801c06c <setvbuf+0x9c>
 801c0ba:	6a3b      	ldr	r3, [r7, #32]
 801c0bc:	b913      	cbnz	r3, 801c0c4 <setvbuf+0xf4>
 801c0be:	4638      	mov	r0, r7
 801c0c0:	f7ff fee4 	bl	801be8c <__sinit>
 801c0c4:	f1b8 0f01 	cmp.w	r8, #1
 801c0c8:	bf08      	it	eq
 801c0ca:	89a3      	ldrheq	r3, [r4, #12]
 801c0cc:	6026      	str	r6, [r4, #0]
 801c0ce:	bf04      	itt	eq
 801c0d0:	f043 0301 	orreq.w	r3, r3, #1
 801c0d4:	81a3      	strheq	r3, [r4, #12]
 801c0d6:	89a3      	ldrh	r3, [r4, #12]
 801c0d8:	f013 0208 	ands.w	r2, r3, #8
 801c0dc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801c0e0:	d01d      	beq.n	801c11e <setvbuf+0x14e>
 801c0e2:	07da      	lsls	r2, r3, #31
 801c0e4:	bf41      	itttt	mi
 801c0e6:	2200      	movmi	r2, #0
 801c0e8:	426d      	negmi	r5, r5
 801c0ea:	60a2      	strmi	r2, [r4, #8]
 801c0ec:	61a5      	strmi	r5, [r4, #24]
 801c0ee:	bf58      	it	pl
 801c0f0:	60a5      	strpl	r5, [r4, #8]
 801c0f2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801c0f4:	f015 0501 	ands.w	r5, r5, #1
 801c0f8:	d0d4      	beq.n	801c0a4 <setvbuf+0xd4>
 801c0fa:	2500      	movs	r5, #0
 801c0fc:	e7d7      	b.n	801c0ae <setvbuf+0xde>
 801c0fe:	4648      	mov	r0, r9
 801c100:	f7ff fc5c 	bl	801b9bc <malloc>
 801c104:	4606      	mov	r6, r0
 801c106:	2800      	cmp	r0, #0
 801c108:	d0ba      	beq.n	801c080 <setvbuf+0xb0>
 801c10a:	89a3      	ldrh	r3, [r4, #12]
 801c10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c110:	81a3      	strh	r3, [r4, #12]
 801c112:	464d      	mov	r5, r9
 801c114:	e7d1      	b.n	801c0ba <setvbuf+0xea>
 801c116:	2500      	movs	r5, #0
 801c118:	e7b4      	b.n	801c084 <setvbuf+0xb4>
 801c11a:	46a9      	mov	r9, r5
 801c11c:	e7f5      	b.n	801c10a <setvbuf+0x13a>
 801c11e:	60a2      	str	r2, [r4, #8]
 801c120:	e7e7      	b.n	801c0f2 <setvbuf+0x122>
 801c122:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801c126:	e7c2      	b.n	801c0ae <setvbuf+0xde>
 801c128:	200004d4 	.word	0x200004d4

0801c12c <sniprintf>:
 801c12c:	b40c      	push	{r2, r3}
 801c12e:	b530      	push	{r4, r5, lr}
 801c130:	4b17      	ldr	r3, [pc, #92]	; (801c190 <sniprintf+0x64>)
 801c132:	1e0c      	subs	r4, r1, #0
 801c134:	681d      	ldr	r5, [r3, #0]
 801c136:	b09d      	sub	sp, #116	; 0x74
 801c138:	da08      	bge.n	801c14c <sniprintf+0x20>
 801c13a:	238b      	movs	r3, #139	; 0x8b
 801c13c:	602b      	str	r3, [r5, #0]
 801c13e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c142:	b01d      	add	sp, #116	; 0x74
 801c144:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c148:	b002      	add	sp, #8
 801c14a:	4770      	bx	lr
 801c14c:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c150:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c154:	bf14      	ite	ne
 801c156:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c15a:	4623      	moveq	r3, r4
 801c15c:	9304      	str	r3, [sp, #16]
 801c15e:	9307      	str	r3, [sp, #28]
 801c160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c164:	9002      	str	r0, [sp, #8]
 801c166:	9006      	str	r0, [sp, #24]
 801c168:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c16c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c16e:	ab21      	add	r3, sp, #132	; 0x84
 801c170:	a902      	add	r1, sp, #8
 801c172:	4628      	mov	r0, r5
 801c174:	9301      	str	r3, [sp, #4]
 801c176:	f000 faf9 	bl	801c76c <_svfiprintf_r>
 801c17a:	1c43      	adds	r3, r0, #1
 801c17c:	bfbc      	itt	lt
 801c17e:	238b      	movlt	r3, #139	; 0x8b
 801c180:	602b      	strlt	r3, [r5, #0]
 801c182:	2c00      	cmp	r4, #0
 801c184:	d0dd      	beq.n	801c142 <sniprintf+0x16>
 801c186:	9b02      	ldr	r3, [sp, #8]
 801c188:	2200      	movs	r2, #0
 801c18a:	701a      	strb	r2, [r3, #0]
 801c18c:	e7d9      	b.n	801c142 <sniprintf+0x16>
 801c18e:	bf00      	nop
 801c190:	200004d4 	.word	0x200004d4

0801c194 <__sread>:
 801c194:	b510      	push	{r4, lr}
 801c196:	460c      	mov	r4, r1
 801c198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c19c:	f000 f996 	bl	801c4cc <_read_r>
 801c1a0:	2800      	cmp	r0, #0
 801c1a2:	bfab      	itete	ge
 801c1a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c1a6:	89a3      	ldrhlt	r3, [r4, #12]
 801c1a8:	181b      	addge	r3, r3, r0
 801c1aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c1ae:	bfac      	ite	ge
 801c1b0:	6563      	strge	r3, [r4, #84]	; 0x54
 801c1b2:	81a3      	strhlt	r3, [r4, #12]
 801c1b4:	bd10      	pop	{r4, pc}

0801c1b6 <__swrite>:
 801c1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1ba:	461f      	mov	r7, r3
 801c1bc:	898b      	ldrh	r3, [r1, #12]
 801c1be:	05db      	lsls	r3, r3, #23
 801c1c0:	4605      	mov	r5, r0
 801c1c2:	460c      	mov	r4, r1
 801c1c4:	4616      	mov	r6, r2
 801c1c6:	d505      	bpl.n	801c1d4 <__swrite+0x1e>
 801c1c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1cc:	2302      	movs	r3, #2
 801c1ce:	2200      	movs	r2, #0
 801c1d0:	f000 f96a 	bl	801c4a8 <_lseek_r>
 801c1d4:	89a3      	ldrh	r3, [r4, #12]
 801c1d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c1da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c1de:	81a3      	strh	r3, [r4, #12]
 801c1e0:	4632      	mov	r2, r6
 801c1e2:	463b      	mov	r3, r7
 801c1e4:	4628      	mov	r0, r5
 801c1e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c1ea:	f000 b991 	b.w	801c510 <_write_r>

0801c1ee <__sseek>:
 801c1ee:	b510      	push	{r4, lr}
 801c1f0:	460c      	mov	r4, r1
 801c1f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c1f6:	f000 f957 	bl	801c4a8 <_lseek_r>
 801c1fa:	1c43      	adds	r3, r0, #1
 801c1fc:	89a3      	ldrh	r3, [r4, #12]
 801c1fe:	bf15      	itete	ne
 801c200:	6560      	strne	r0, [r4, #84]	; 0x54
 801c202:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c206:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c20a:	81a3      	strheq	r3, [r4, #12]
 801c20c:	bf18      	it	ne
 801c20e:	81a3      	strhne	r3, [r4, #12]
 801c210:	bd10      	pop	{r4, pc}

0801c212 <__sclose>:
 801c212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c216:	f000 b937 	b.w	801c488 <_close_r>

0801c21a <_vsniprintf_r>:
 801c21a:	b530      	push	{r4, r5, lr}
 801c21c:	4614      	mov	r4, r2
 801c21e:	2c00      	cmp	r4, #0
 801c220:	b09b      	sub	sp, #108	; 0x6c
 801c222:	4605      	mov	r5, r0
 801c224:	461a      	mov	r2, r3
 801c226:	da05      	bge.n	801c234 <_vsniprintf_r+0x1a>
 801c228:	238b      	movs	r3, #139	; 0x8b
 801c22a:	6003      	str	r3, [r0, #0]
 801c22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c230:	b01b      	add	sp, #108	; 0x6c
 801c232:	bd30      	pop	{r4, r5, pc}
 801c234:	f44f 7302 	mov.w	r3, #520	; 0x208
 801c238:	f8ad 300c 	strh.w	r3, [sp, #12]
 801c23c:	bf14      	ite	ne
 801c23e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801c242:	4623      	moveq	r3, r4
 801c244:	9302      	str	r3, [sp, #8]
 801c246:	9305      	str	r3, [sp, #20]
 801c248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c24c:	9100      	str	r1, [sp, #0]
 801c24e:	9104      	str	r1, [sp, #16]
 801c250:	f8ad 300e 	strh.w	r3, [sp, #14]
 801c254:	4669      	mov	r1, sp
 801c256:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c258:	f000 fa88 	bl	801c76c <_svfiprintf_r>
 801c25c:	1c43      	adds	r3, r0, #1
 801c25e:	bfbc      	itt	lt
 801c260:	238b      	movlt	r3, #139	; 0x8b
 801c262:	602b      	strlt	r3, [r5, #0]
 801c264:	2c00      	cmp	r4, #0
 801c266:	d0e3      	beq.n	801c230 <_vsniprintf_r+0x16>
 801c268:	9b00      	ldr	r3, [sp, #0]
 801c26a:	2200      	movs	r2, #0
 801c26c:	701a      	strb	r2, [r3, #0]
 801c26e:	e7df      	b.n	801c230 <_vsniprintf_r+0x16>

0801c270 <vsniprintf>:
 801c270:	b507      	push	{r0, r1, r2, lr}
 801c272:	9300      	str	r3, [sp, #0]
 801c274:	4613      	mov	r3, r2
 801c276:	460a      	mov	r2, r1
 801c278:	4601      	mov	r1, r0
 801c27a:	4803      	ldr	r0, [pc, #12]	; (801c288 <vsniprintf+0x18>)
 801c27c:	6800      	ldr	r0, [r0, #0]
 801c27e:	f7ff ffcc 	bl	801c21a <_vsniprintf_r>
 801c282:	b003      	add	sp, #12
 801c284:	f85d fb04 	ldr.w	pc, [sp], #4
 801c288:	200004d4 	.word	0x200004d4

0801c28c <__swbuf_r>:
 801c28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c28e:	460e      	mov	r6, r1
 801c290:	4614      	mov	r4, r2
 801c292:	4605      	mov	r5, r0
 801c294:	b118      	cbz	r0, 801c29e <__swbuf_r+0x12>
 801c296:	6a03      	ldr	r3, [r0, #32]
 801c298:	b90b      	cbnz	r3, 801c29e <__swbuf_r+0x12>
 801c29a:	f7ff fdf7 	bl	801be8c <__sinit>
 801c29e:	69a3      	ldr	r3, [r4, #24]
 801c2a0:	60a3      	str	r3, [r4, #8]
 801c2a2:	89a3      	ldrh	r3, [r4, #12]
 801c2a4:	071a      	lsls	r2, r3, #28
 801c2a6:	d525      	bpl.n	801c2f4 <__swbuf_r+0x68>
 801c2a8:	6923      	ldr	r3, [r4, #16]
 801c2aa:	b31b      	cbz	r3, 801c2f4 <__swbuf_r+0x68>
 801c2ac:	6823      	ldr	r3, [r4, #0]
 801c2ae:	6922      	ldr	r2, [r4, #16]
 801c2b0:	1a98      	subs	r0, r3, r2
 801c2b2:	6963      	ldr	r3, [r4, #20]
 801c2b4:	b2f6      	uxtb	r6, r6
 801c2b6:	4283      	cmp	r3, r0
 801c2b8:	4637      	mov	r7, r6
 801c2ba:	dc04      	bgt.n	801c2c6 <__swbuf_r+0x3a>
 801c2bc:	4621      	mov	r1, r4
 801c2be:	4628      	mov	r0, r5
 801c2c0:	f000 feac 	bl	801d01c <_fflush_r>
 801c2c4:	b9e0      	cbnz	r0, 801c300 <__swbuf_r+0x74>
 801c2c6:	68a3      	ldr	r3, [r4, #8]
 801c2c8:	3b01      	subs	r3, #1
 801c2ca:	60a3      	str	r3, [r4, #8]
 801c2cc:	6823      	ldr	r3, [r4, #0]
 801c2ce:	1c5a      	adds	r2, r3, #1
 801c2d0:	6022      	str	r2, [r4, #0]
 801c2d2:	701e      	strb	r6, [r3, #0]
 801c2d4:	6962      	ldr	r2, [r4, #20]
 801c2d6:	1c43      	adds	r3, r0, #1
 801c2d8:	429a      	cmp	r2, r3
 801c2da:	d004      	beq.n	801c2e6 <__swbuf_r+0x5a>
 801c2dc:	89a3      	ldrh	r3, [r4, #12]
 801c2de:	07db      	lsls	r3, r3, #31
 801c2e0:	d506      	bpl.n	801c2f0 <__swbuf_r+0x64>
 801c2e2:	2e0a      	cmp	r6, #10
 801c2e4:	d104      	bne.n	801c2f0 <__swbuf_r+0x64>
 801c2e6:	4621      	mov	r1, r4
 801c2e8:	4628      	mov	r0, r5
 801c2ea:	f000 fe97 	bl	801d01c <_fflush_r>
 801c2ee:	b938      	cbnz	r0, 801c300 <__swbuf_r+0x74>
 801c2f0:	4638      	mov	r0, r7
 801c2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2f4:	4621      	mov	r1, r4
 801c2f6:	4628      	mov	r0, r5
 801c2f8:	f000 f806 	bl	801c308 <__swsetup_r>
 801c2fc:	2800      	cmp	r0, #0
 801c2fe:	d0d5      	beq.n	801c2ac <__swbuf_r+0x20>
 801c300:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801c304:	e7f4      	b.n	801c2f0 <__swbuf_r+0x64>
	...

0801c308 <__swsetup_r>:
 801c308:	b538      	push	{r3, r4, r5, lr}
 801c30a:	4b2a      	ldr	r3, [pc, #168]	; (801c3b4 <__swsetup_r+0xac>)
 801c30c:	4605      	mov	r5, r0
 801c30e:	6818      	ldr	r0, [r3, #0]
 801c310:	460c      	mov	r4, r1
 801c312:	b118      	cbz	r0, 801c31c <__swsetup_r+0x14>
 801c314:	6a03      	ldr	r3, [r0, #32]
 801c316:	b90b      	cbnz	r3, 801c31c <__swsetup_r+0x14>
 801c318:	f7ff fdb8 	bl	801be8c <__sinit>
 801c31c:	89a3      	ldrh	r3, [r4, #12]
 801c31e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c322:	0718      	lsls	r0, r3, #28
 801c324:	d422      	bmi.n	801c36c <__swsetup_r+0x64>
 801c326:	06d9      	lsls	r1, r3, #27
 801c328:	d407      	bmi.n	801c33a <__swsetup_r+0x32>
 801c32a:	2309      	movs	r3, #9
 801c32c:	602b      	str	r3, [r5, #0]
 801c32e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c332:	81a3      	strh	r3, [r4, #12]
 801c334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c338:	e034      	b.n	801c3a4 <__swsetup_r+0x9c>
 801c33a:	0758      	lsls	r0, r3, #29
 801c33c:	d512      	bpl.n	801c364 <__swsetup_r+0x5c>
 801c33e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c340:	b141      	cbz	r1, 801c354 <__swsetup_r+0x4c>
 801c342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c346:	4299      	cmp	r1, r3
 801c348:	d002      	beq.n	801c350 <__swsetup_r+0x48>
 801c34a:	4628      	mov	r0, r5
 801c34c:	f000 f960 	bl	801c610 <_free_r>
 801c350:	2300      	movs	r3, #0
 801c352:	6363      	str	r3, [r4, #52]	; 0x34
 801c354:	89a3      	ldrh	r3, [r4, #12]
 801c356:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c35a:	81a3      	strh	r3, [r4, #12]
 801c35c:	2300      	movs	r3, #0
 801c35e:	6063      	str	r3, [r4, #4]
 801c360:	6923      	ldr	r3, [r4, #16]
 801c362:	6023      	str	r3, [r4, #0]
 801c364:	89a3      	ldrh	r3, [r4, #12]
 801c366:	f043 0308 	orr.w	r3, r3, #8
 801c36a:	81a3      	strh	r3, [r4, #12]
 801c36c:	6923      	ldr	r3, [r4, #16]
 801c36e:	b94b      	cbnz	r3, 801c384 <__swsetup_r+0x7c>
 801c370:	89a3      	ldrh	r3, [r4, #12]
 801c372:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c37a:	d003      	beq.n	801c384 <__swsetup_r+0x7c>
 801c37c:	4621      	mov	r1, r4
 801c37e:	4628      	mov	r0, r5
 801c380:	f000 feac 	bl	801d0dc <__smakebuf_r>
 801c384:	89a0      	ldrh	r0, [r4, #12]
 801c386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c38a:	f010 0301 	ands.w	r3, r0, #1
 801c38e:	d00a      	beq.n	801c3a6 <__swsetup_r+0x9e>
 801c390:	2300      	movs	r3, #0
 801c392:	60a3      	str	r3, [r4, #8]
 801c394:	6963      	ldr	r3, [r4, #20]
 801c396:	425b      	negs	r3, r3
 801c398:	61a3      	str	r3, [r4, #24]
 801c39a:	6923      	ldr	r3, [r4, #16]
 801c39c:	b943      	cbnz	r3, 801c3b0 <__swsetup_r+0xa8>
 801c39e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c3a2:	d1c4      	bne.n	801c32e <__swsetup_r+0x26>
 801c3a4:	bd38      	pop	{r3, r4, r5, pc}
 801c3a6:	0781      	lsls	r1, r0, #30
 801c3a8:	bf58      	it	pl
 801c3aa:	6963      	ldrpl	r3, [r4, #20]
 801c3ac:	60a3      	str	r3, [r4, #8]
 801c3ae:	e7f4      	b.n	801c39a <__swsetup_r+0x92>
 801c3b0:	2000      	movs	r0, #0
 801c3b2:	e7f7      	b.n	801c3a4 <__swsetup_r+0x9c>
 801c3b4:	200004d4 	.word	0x200004d4

0801c3b8 <memcmp>:
 801c3b8:	b510      	push	{r4, lr}
 801c3ba:	3901      	subs	r1, #1
 801c3bc:	4402      	add	r2, r0
 801c3be:	4290      	cmp	r0, r2
 801c3c0:	d101      	bne.n	801c3c6 <memcmp+0xe>
 801c3c2:	2000      	movs	r0, #0
 801c3c4:	e005      	b.n	801c3d2 <memcmp+0x1a>
 801c3c6:	7803      	ldrb	r3, [r0, #0]
 801c3c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801c3cc:	42a3      	cmp	r3, r4
 801c3ce:	d001      	beq.n	801c3d4 <memcmp+0x1c>
 801c3d0:	1b18      	subs	r0, r3, r4
 801c3d2:	bd10      	pop	{r4, pc}
 801c3d4:	3001      	adds	r0, #1
 801c3d6:	e7f2      	b.n	801c3be <memcmp+0x6>

0801c3d8 <memmove>:
 801c3d8:	4288      	cmp	r0, r1
 801c3da:	b510      	push	{r4, lr}
 801c3dc:	eb01 0402 	add.w	r4, r1, r2
 801c3e0:	d902      	bls.n	801c3e8 <memmove+0x10>
 801c3e2:	4284      	cmp	r4, r0
 801c3e4:	4623      	mov	r3, r4
 801c3e6:	d807      	bhi.n	801c3f8 <memmove+0x20>
 801c3e8:	1e43      	subs	r3, r0, #1
 801c3ea:	42a1      	cmp	r1, r4
 801c3ec:	d008      	beq.n	801c400 <memmove+0x28>
 801c3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c3f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c3f6:	e7f8      	b.n	801c3ea <memmove+0x12>
 801c3f8:	4402      	add	r2, r0
 801c3fa:	4601      	mov	r1, r0
 801c3fc:	428a      	cmp	r2, r1
 801c3fe:	d100      	bne.n	801c402 <memmove+0x2a>
 801c400:	bd10      	pop	{r4, pc}
 801c402:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c406:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c40a:	e7f7      	b.n	801c3fc <memmove+0x24>

0801c40c <memset>:
 801c40c:	4402      	add	r2, r0
 801c40e:	4603      	mov	r3, r0
 801c410:	4293      	cmp	r3, r2
 801c412:	d100      	bne.n	801c416 <memset+0xa>
 801c414:	4770      	bx	lr
 801c416:	f803 1b01 	strb.w	r1, [r3], #1
 801c41a:	e7f9      	b.n	801c410 <memset+0x4>

0801c41c <strchr>:
 801c41c:	b2c9      	uxtb	r1, r1
 801c41e:	4603      	mov	r3, r0
 801c420:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c424:	b11a      	cbz	r2, 801c42e <strchr+0x12>
 801c426:	428a      	cmp	r2, r1
 801c428:	d1f9      	bne.n	801c41e <strchr+0x2>
 801c42a:	4618      	mov	r0, r3
 801c42c:	4770      	bx	lr
 801c42e:	2900      	cmp	r1, #0
 801c430:	bf18      	it	ne
 801c432:	2300      	movne	r3, #0
 801c434:	e7f9      	b.n	801c42a <strchr+0xe>

0801c436 <strncmp>:
 801c436:	b510      	push	{r4, lr}
 801c438:	b16a      	cbz	r2, 801c456 <strncmp+0x20>
 801c43a:	3901      	subs	r1, #1
 801c43c:	1884      	adds	r4, r0, r2
 801c43e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c442:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801c446:	429a      	cmp	r2, r3
 801c448:	d103      	bne.n	801c452 <strncmp+0x1c>
 801c44a:	42a0      	cmp	r0, r4
 801c44c:	d001      	beq.n	801c452 <strncmp+0x1c>
 801c44e:	2a00      	cmp	r2, #0
 801c450:	d1f5      	bne.n	801c43e <strncmp+0x8>
 801c452:	1ad0      	subs	r0, r2, r3
 801c454:	bd10      	pop	{r4, pc}
 801c456:	4610      	mov	r0, r2
 801c458:	e7fc      	b.n	801c454 <strncmp+0x1e>

0801c45a <strstr>:
 801c45a:	780a      	ldrb	r2, [r1, #0]
 801c45c:	b570      	push	{r4, r5, r6, lr}
 801c45e:	b96a      	cbnz	r2, 801c47c <strstr+0x22>
 801c460:	bd70      	pop	{r4, r5, r6, pc}
 801c462:	429a      	cmp	r2, r3
 801c464:	d109      	bne.n	801c47a <strstr+0x20>
 801c466:	460c      	mov	r4, r1
 801c468:	4605      	mov	r5, r0
 801c46a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d0f6      	beq.n	801c460 <strstr+0x6>
 801c472:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801c476:	429e      	cmp	r6, r3
 801c478:	d0f7      	beq.n	801c46a <strstr+0x10>
 801c47a:	3001      	adds	r0, #1
 801c47c:	7803      	ldrb	r3, [r0, #0]
 801c47e:	2b00      	cmp	r3, #0
 801c480:	d1ef      	bne.n	801c462 <strstr+0x8>
 801c482:	4618      	mov	r0, r3
 801c484:	e7ec      	b.n	801c460 <strstr+0x6>
	...

0801c488 <_close_r>:
 801c488:	b538      	push	{r3, r4, r5, lr}
 801c48a:	4d06      	ldr	r5, [pc, #24]	; (801c4a4 <_close_r+0x1c>)
 801c48c:	2300      	movs	r3, #0
 801c48e:	4604      	mov	r4, r0
 801c490:	4608      	mov	r0, r1
 801c492:	602b      	str	r3, [r5, #0]
 801c494:	f7e5 f9dd 	bl	8001852 <_close>
 801c498:	1c43      	adds	r3, r0, #1
 801c49a:	d102      	bne.n	801c4a2 <_close_r+0x1a>
 801c49c:	682b      	ldr	r3, [r5, #0]
 801c49e:	b103      	cbz	r3, 801c4a2 <_close_r+0x1a>
 801c4a0:	6023      	str	r3, [r4, #0]
 801c4a2:	bd38      	pop	{r3, r4, r5, pc}
 801c4a4:	20012bf8 	.word	0x20012bf8

0801c4a8 <_lseek_r>:
 801c4a8:	b538      	push	{r3, r4, r5, lr}
 801c4aa:	4d07      	ldr	r5, [pc, #28]	; (801c4c8 <_lseek_r+0x20>)
 801c4ac:	4604      	mov	r4, r0
 801c4ae:	4608      	mov	r0, r1
 801c4b0:	4611      	mov	r1, r2
 801c4b2:	2200      	movs	r2, #0
 801c4b4:	602a      	str	r2, [r5, #0]
 801c4b6:	461a      	mov	r2, r3
 801c4b8:	f7e5 f9f2 	bl	80018a0 <_lseek>
 801c4bc:	1c43      	adds	r3, r0, #1
 801c4be:	d102      	bne.n	801c4c6 <_lseek_r+0x1e>
 801c4c0:	682b      	ldr	r3, [r5, #0]
 801c4c2:	b103      	cbz	r3, 801c4c6 <_lseek_r+0x1e>
 801c4c4:	6023      	str	r3, [r4, #0]
 801c4c6:	bd38      	pop	{r3, r4, r5, pc}
 801c4c8:	20012bf8 	.word	0x20012bf8

0801c4cc <_read_r>:
 801c4cc:	b538      	push	{r3, r4, r5, lr}
 801c4ce:	4d07      	ldr	r5, [pc, #28]	; (801c4ec <_read_r+0x20>)
 801c4d0:	4604      	mov	r4, r0
 801c4d2:	4608      	mov	r0, r1
 801c4d4:	4611      	mov	r1, r2
 801c4d6:	2200      	movs	r2, #0
 801c4d8:	602a      	str	r2, [r5, #0]
 801c4da:	461a      	mov	r2, r3
 801c4dc:	f7e5 f980 	bl	80017e0 <_read>
 801c4e0:	1c43      	adds	r3, r0, #1
 801c4e2:	d102      	bne.n	801c4ea <_read_r+0x1e>
 801c4e4:	682b      	ldr	r3, [r5, #0]
 801c4e6:	b103      	cbz	r3, 801c4ea <_read_r+0x1e>
 801c4e8:	6023      	str	r3, [r4, #0]
 801c4ea:	bd38      	pop	{r3, r4, r5, pc}
 801c4ec:	20012bf8 	.word	0x20012bf8

0801c4f0 <_sbrk_r>:
 801c4f0:	b538      	push	{r3, r4, r5, lr}
 801c4f2:	4d06      	ldr	r5, [pc, #24]	; (801c50c <_sbrk_r+0x1c>)
 801c4f4:	2300      	movs	r3, #0
 801c4f6:	4604      	mov	r4, r0
 801c4f8:	4608      	mov	r0, r1
 801c4fa:	602b      	str	r3, [r5, #0]
 801c4fc:	f7e5 f9de 	bl	80018bc <_sbrk>
 801c500:	1c43      	adds	r3, r0, #1
 801c502:	d102      	bne.n	801c50a <_sbrk_r+0x1a>
 801c504:	682b      	ldr	r3, [r5, #0]
 801c506:	b103      	cbz	r3, 801c50a <_sbrk_r+0x1a>
 801c508:	6023      	str	r3, [r4, #0]
 801c50a:	bd38      	pop	{r3, r4, r5, pc}
 801c50c:	20012bf8 	.word	0x20012bf8

0801c510 <_write_r>:
 801c510:	b538      	push	{r3, r4, r5, lr}
 801c512:	4d07      	ldr	r5, [pc, #28]	; (801c530 <_write_r+0x20>)
 801c514:	4604      	mov	r4, r0
 801c516:	4608      	mov	r0, r1
 801c518:	4611      	mov	r1, r2
 801c51a:	2200      	movs	r2, #0
 801c51c:	602a      	str	r2, [r5, #0]
 801c51e:	461a      	mov	r2, r3
 801c520:	f7e5 f97b 	bl	800181a <_write>
 801c524:	1c43      	adds	r3, r0, #1
 801c526:	d102      	bne.n	801c52e <_write_r+0x1e>
 801c528:	682b      	ldr	r3, [r5, #0]
 801c52a:	b103      	cbz	r3, 801c52e <_write_r+0x1e>
 801c52c:	6023      	str	r3, [r4, #0]
 801c52e:	bd38      	pop	{r3, r4, r5, pc}
 801c530:	20012bf8 	.word	0x20012bf8

0801c534 <__errno>:
 801c534:	4b01      	ldr	r3, [pc, #4]	; (801c53c <__errno+0x8>)
 801c536:	6818      	ldr	r0, [r3, #0]
 801c538:	4770      	bx	lr
 801c53a:	bf00      	nop
 801c53c:	200004d4 	.word	0x200004d4

0801c540 <__libc_init_array>:
 801c540:	b570      	push	{r4, r5, r6, lr}
 801c542:	4d0d      	ldr	r5, [pc, #52]	; (801c578 <__libc_init_array+0x38>)
 801c544:	4c0d      	ldr	r4, [pc, #52]	; (801c57c <__libc_init_array+0x3c>)
 801c546:	1b64      	subs	r4, r4, r5
 801c548:	10a4      	asrs	r4, r4, #2
 801c54a:	2600      	movs	r6, #0
 801c54c:	42a6      	cmp	r6, r4
 801c54e:	d109      	bne.n	801c564 <__libc_init_array+0x24>
 801c550:	4d0b      	ldr	r5, [pc, #44]	; (801c580 <__libc_init_array+0x40>)
 801c552:	4c0c      	ldr	r4, [pc, #48]	; (801c584 <__libc_init_array+0x44>)
 801c554:	f000 fe6c 	bl	801d230 <_init>
 801c558:	1b64      	subs	r4, r4, r5
 801c55a:	10a4      	asrs	r4, r4, #2
 801c55c:	2600      	movs	r6, #0
 801c55e:	42a6      	cmp	r6, r4
 801c560:	d105      	bne.n	801c56e <__libc_init_array+0x2e>
 801c562:	bd70      	pop	{r4, r5, r6, pc}
 801c564:	f855 3b04 	ldr.w	r3, [r5], #4
 801c568:	4798      	blx	r3
 801c56a:	3601      	adds	r6, #1
 801c56c:	e7ee      	b.n	801c54c <__libc_init_array+0xc>
 801c56e:	f855 3b04 	ldr.w	r3, [r5], #4
 801c572:	4798      	blx	r3
 801c574:	3601      	adds	r6, #1
 801c576:	e7f2      	b.n	801c55e <__libc_init_array+0x1e>
 801c578:	0801e7c4 	.word	0x0801e7c4
 801c57c:	0801e7c4 	.word	0x0801e7c4
 801c580:	0801e7c4 	.word	0x0801e7c4
 801c584:	0801e7d4 	.word	0x0801e7d4

0801c588 <__retarget_lock_init_recursive>:
 801c588:	4770      	bx	lr

0801c58a <__retarget_lock_acquire_recursive>:
 801c58a:	4770      	bx	lr

0801c58c <__retarget_lock_release_recursive>:
 801c58c:	4770      	bx	lr

0801c58e <strcpy>:
 801c58e:	4603      	mov	r3, r0
 801c590:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c594:	f803 2b01 	strb.w	r2, [r3], #1
 801c598:	2a00      	cmp	r2, #0
 801c59a:	d1f9      	bne.n	801c590 <strcpy+0x2>
 801c59c:	4770      	bx	lr

0801c59e <memcpy>:
 801c59e:	440a      	add	r2, r1
 801c5a0:	4291      	cmp	r1, r2
 801c5a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801c5a6:	d100      	bne.n	801c5aa <memcpy+0xc>
 801c5a8:	4770      	bx	lr
 801c5aa:	b510      	push	{r4, lr}
 801c5ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c5b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c5b4:	4291      	cmp	r1, r2
 801c5b6:	d1f9      	bne.n	801c5ac <memcpy+0xe>
 801c5b8:	bd10      	pop	{r4, pc}
	...

0801c5bc <__assert_func>:
 801c5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c5be:	4614      	mov	r4, r2
 801c5c0:	461a      	mov	r2, r3
 801c5c2:	4b09      	ldr	r3, [pc, #36]	; (801c5e8 <__assert_func+0x2c>)
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	4605      	mov	r5, r0
 801c5c8:	68d8      	ldr	r0, [r3, #12]
 801c5ca:	b14c      	cbz	r4, 801c5e0 <__assert_func+0x24>
 801c5cc:	4b07      	ldr	r3, [pc, #28]	; (801c5ec <__assert_func+0x30>)
 801c5ce:	9100      	str	r1, [sp, #0]
 801c5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c5d4:	4906      	ldr	r1, [pc, #24]	; (801c5f0 <__assert_func+0x34>)
 801c5d6:	462b      	mov	r3, r5
 801c5d8:	f000 fd48 	bl	801d06c <fiprintf>
 801c5dc:	f000 fddc 	bl	801d198 <abort>
 801c5e0:	4b04      	ldr	r3, [pc, #16]	; (801c5f4 <__assert_func+0x38>)
 801c5e2:	461c      	mov	r4, r3
 801c5e4:	e7f3      	b.n	801c5ce <__assert_func+0x12>
 801c5e6:	bf00      	nop
 801c5e8:	200004d4 	.word	0x200004d4
 801c5ec:	0801e74c 	.word	0x0801e74c
 801c5f0:	0801e759 	.word	0x0801e759
 801c5f4:	0801e787 	.word	0x0801e787

0801c5f8 <__env_lock>:
 801c5f8:	4801      	ldr	r0, [pc, #4]	; (801c600 <__env_lock+0x8>)
 801c5fa:	f7ff bfc6 	b.w	801c58a <__retarget_lock_acquire_recursive>
 801c5fe:	bf00      	nop
 801c600:	20012bfc 	.word	0x20012bfc

0801c604 <__env_unlock>:
 801c604:	4801      	ldr	r0, [pc, #4]	; (801c60c <__env_unlock+0x8>)
 801c606:	f7ff bfc1 	b.w	801c58c <__retarget_lock_release_recursive>
 801c60a:	bf00      	nop
 801c60c:	20012bfc 	.word	0x20012bfc

0801c610 <_free_r>:
 801c610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c612:	2900      	cmp	r1, #0
 801c614:	d044      	beq.n	801c6a0 <_free_r+0x90>
 801c616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c61a:	9001      	str	r0, [sp, #4]
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	f1a1 0404 	sub.w	r4, r1, #4
 801c622:	bfb8      	it	lt
 801c624:	18e4      	addlt	r4, r4, r3
 801c626:	f7ff fa79 	bl	801bb1c <__malloc_lock>
 801c62a:	4a1e      	ldr	r2, [pc, #120]	; (801c6a4 <_free_r+0x94>)
 801c62c:	9801      	ldr	r0, [sp, #4]
 801c62e:	6813      	ldr	r3, [r2, #0]
 801c630:	b933      	cbnz	r3, 801c640 <_free_r+0x30>
 801c632:	6063      	str	r3, [r4, #4]
 801c634:	6014      	str	r4, [r2, #0]
 801c636:	b003      	add	sp, #12
 801c638:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c63c:	f7ff ba74 	b.w	801bb28 <__malloc_unlock>
 801c640:	42a3      	cmp	r3, r4
 801c642:	d908      	bls.n	801c656 <_free_r+0x46>
 801c644:	6825      	ldr	r5, [r4, #0]
 801c646:	1961      	adds	r1, r4, r5
 801c648:	428b      	cmp	r3, r1
 801c64a:	bf01      	itttt	eq
 801c64c:	6819      	ldreq	r1, [r3, #0]
 801c64e:	685b      	ldreq	r3, [r3, #4]
 801c650:	1949      	addeq	r1, r1, r5
 801c652:	6021      	streq	r1, [r4, #0]
 801c654:	e7ed      	b.n	801c632 <_free_r+0x22>
 801c656:	461a      	mov	r2, r3
 801c658:	685b      	ldr	r3, [r3, #4]
 801c65a:	b10b      	cbz	r3, 801c660 <_free_r+0x50>
 801c65c:	42a3      	cmp	r3, r4
 801c65e:	d9fa      	bls.n	801c656 <_free_r+0x46>
 801c660:	6811      	ldr	r1, [r2, #0]
 801c662:	1855      	adds	r5, r2, r1
 801c664:	42a5      	cmp	r5, r4
 801c666:	d10b      	bne.n	801c680 <_free_r+0x70>
 801c668:	6824      	ldr	r4, [r4, #0]
 801c66a:	4421      	add	r1, r4
 801c66c:	1854      	adds	r4, r2, r1
 801c66e:	42a3      	cmp	r3, r4
 801c670:	6011      	str	r1, [r2, #0]
 801c672:	d1e0      	bne.n	801c636 <_free_r+0x26>
 801c674:	681c      	ldr	r4, [r3, #0]
 801c676:	685b      	ldr	r3, [r3, #4]
 801c678:	6053      	str	r3, [r2, #4]
 801c67a:	440c      	add	r4, r1
 801c67c:	6014      	str	r4, [r2, #0]
 801c67e:	e7da      	b.n	801c636 <_free_r+0x26>
 801c680:	d902      	bls.n	801c688 <_free_r+0x78>
 801c682:	230c      	movs	r3, #12
 801c684:	6003      	str	r3, [r0, #0]
 801c686:	e7d6      	b.n	801c636 <_free_r+0x26>
 801c688:	6825      	ldr	r5, [r4, #0]
 801c68a:	1961      	adds	r1, r4, r5
 801c68c:	428b      	cmp	r3, r1
 801c68e:	bf04      	itt	eq
 801c690:	6819      	ldreq	r1, [r3, #0]
 801c692:	685b      	ldreq	r3, [r3, #4]
 801c694:	6063      	str	r3, [r4, #4]
 801c696:	bf04      	itt	eq
 801c698:	1949      	addeq	r1, r1, r5
 801c69a:	6021      	streq	r1, [r4, #0]
 801c69c:	6054      	str	r4, [r2, #4]
 801c69e:	e7ca      	b.n	801c636 <_free_r+0x26>
 801c6a0:	b003      	add	sp, #12
 801c6a2:	bd30      	pop	{r4, r5, pc}
 801c6a4:	20012ab4 	.word	0x20012ab4

0801c6a8 <_malloc_usable_size_r>:
 801c6a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c6ac:	1f18      	subs	r0, r3, #4
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	bfbc      	itt	lt
 801c6b2:	580b      	ldrlt	r3, [r1, r0]
 801c6b4:	18c0      	addlt	r0, r0, r3
 801c6b6:	4770      	bx	lr

0801c6b8 <__ssputs_r>:
 801c6b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6bc:	688e      	ldr	r6, [r1, #8]
 801c6be:	461f      	mov	r7, r3
 801c6c0:	42be      	cmp	r6, r7
 801c6c2:	680b      	ldr	r3, [r1, #0]
 801c6c4:	4682      	mov	sl, r0
 801c6c6:	460c      	mov	r4, r1
 801c6c8:	4690      	mov	r8, r2
 801c6ca:	d82c      	bhi.n	801c726 <__ssputs_r+0x6e>
 801c6cc:	898a      	ldrh	r2, [r1, #12]
 801c6ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c6d2:	d026      	beq.n	801c722 <__ssputs_r+0x6a>
 801c6d4:	6965      	ldr	r5, [r4, #20]
 801c6d6:	6909      	ldr	r1, [r1, #16]
 801c6d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c6dc:	eba3 0901 	sub.w	r9, r3, r1
 801c6e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c6e4:	1c7b      	adds	r3, r7, #1
 801c6e6:	444b      	add	r3, r9
 801c6e8:	106d      	asrs	r5, r5, #1
 801c6ea:	429d      	cmp	r5, r3
 801c6ec:	bf38      	it	cc
 801c6ee:	461d      	movcc	r5, r3
 801c6f0:	0553      	lsls	r3, r2, #21
 801c6f2:	d527      	bpl.n	801c744 <__ssputs_r+0x8c>
 801c6f4:	4629      	mov	r1, r5
 801c6f6:	f7ff f991 	bl	801ba1c <_malloc_r>
 801c6fa:	4606      	mov	r6, r0
 801c6fc:	b360      	cbz	r0, 801c758 <__ssputs_r+0xa0>
 801c6fe:	6921      	ldr	r1, [r4, #16]
 801c700:	464a      	mov	r2, r9
 801c702:	f7ff ff4c 	bl	801c59e <memcpy>
 801c706:	89a3      	ldrh	r3, [r4, #12]
 801c708:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c70c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c710:	81a3      	strh	r3, [r4, #12]
 801c712:	6126      	str	r6, [r4, #16]
 801c714:	6165      	str	r5, [r4, #20]
 801c716:	444e      	add	r6, r9
 801c718:	eba5 0509 	sub.w	r5, r5, r9
 801c71c:	6026      	str	r6, [r4, #0]
 801c71e:	60a5      	str	r5, [r4, #8]
 801c720:	463e      	mov	r6, r7
 801c722:	42be      	cmp	r6, r7
 801c724:	d900      	bls.n	801c728 <__ssputs_r+0x70>
 801c726:	463e      	mov	r6, r7
 801c728:	6820      	ldr	r0, [r4, #0]
 801c72a:	4632      	mov	r2, r6
 801c72c:	4641      	mov	r1, r8
 801c72e:	f7ff fe53 	bl	801c3d8 <memmove>
 801c732:	68a3      	ldr	r3, [r4, #8]
 801c734:	1b9b      	subs	r3, r3, r6
 801c736:	60a3      	str	r3, [r4, #8]
 801c738:	6823      	ldr	r3, [r4, #0]
 801c73a:	4433      	add	r3, r6
 801c73c:	6023      	str	r3, [r4, #0]
 801c73e:	2000      	movs	r0, #0
 801c740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c744:	462a      	mov	r2, r5
 801c746:	f7ff fa69 	bl	801bc1c <_realloc_r>
 801c74a:	4606      	mov	r6, r0
 801c74c:	2800      	cmp	r0, #0
 801c74e:	d1e0      	bne.n	801c712 <__ssputs_r+0x5a>
 801c750:	6921      	ldr	r1, [r4, #16]
 801c752:	4650      	mov	r0, sl
 801c754:	f7ff ff5c 	bl	801c610 <_free_r>
 801c758:	230c      	movs	r3, #12
 801c75a:	f8ca 3000 	str.w	r3, [sl]
 801c75e:	89a3      	ldrh	r3, [r4, #12]
 801c760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c764:	81a3      	strh	r3, [r4, #12]
 801c766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c76a:	e7e9      	b.n	801c740 <__ssputs_r+0x88>

0801c76c <_svfiprintf_r>:
 801c76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c770:	4698      	mov	r8, r3
 801c772:	898b      	ldrh	r3, [r1, #12]
 801c774:	061b      	lsls	r3, r3, #24
 801c776:	b09d      	sub	sp, #116	; 0x74
 801c778:	4607      	mov	r7, r0
 801c77a:	460d      	mov	r5, r1
 801c77c:	4614      	mov	r4, r2
 801c77e:	d50e      	bpl.n	801c79e <_svfiprintf_r+0x32>
 801c780:	690b      	ldr	r3, [r1, #16]
 801c782:	b963      	cbnz	r3, 801c79e <_svfiprintf_r+0x32>
 801c784:	2140      	movs	r1, #64	; 0x40
 801c786:	f7ff f949 	bl	801ba1c <_malloc_r>
 801c78a:	6028      	str	r0, [r5, #0]
 801c78c:	6128      	str	r0, [r5, #16]
 801c78e:	b920      	cbnz	r0, 801c79a <_svfiprintf_r+0x2e>
 801c790:	230c      	movs	r3, #12
 801c792:	603b      	str	r3, [r7, #0]
 801c794:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c798:	e0d0      	b.n	801c93c <_svfiprintf_r+0x1d0>
 801c79a:	2340      	movs	r3, #64	; 0x40
 801c79c:	616b      	str	r3, [r5, #20]
 801c79e:	2300      	movs	r3, #0
 801c7a0:	9309      	str	r3, [sp, #36]	; 0x24
 801c7a2:	2320      	movs	r3, #32
 801c7a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c7a8:	f8cd 800c 	str.w	r8, [sp, #12]
 801c7ac:	2330      	movs	r3, #48	; 0x30
 801c7ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801c954 <_svfiprintf_r+0x1e8>
 801c7b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c7b6:	f04f 0901 	mov.w	r9, #1
 801c7ba:	4623      	mov	r3, r4
 801c7bc:	469a      	mov	sl, r3
 801c7be:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c7c2:	b10a      	cbz	r2, 801c7c8 <_svfiprintf_r+0x5c>
 801c7c4:	2a25      	cmp	r2, #37	; 0x25
 801c7c6:	d1f9      	bne.n	801c7bc <_svfiprintf_r+0x50>
 801c7c8:	ebba 0b04 	subs.w	fp, sl, r4
 801c7cc:	d00b      	beq.n	801c7e6 <_svfiprintf_r+0x7a>
 801c7ce:	465b      	mov	r3, fp
 801c7d0:	4622      	mov	r2, r4
 801c7d2:	4629      	mov	r1, r5
 801c7d4:	4638      	mov	r0, r7
 801c7d6:	f7ff ff6f 	bl	801c6b8 <__ssputs_r>
 801c7da:	3001      	adds	r0, #1
 801c7dc:	f000 80a9 	beq.w	801c932 <_svfiprintf_r+0x1c6>
 801c7e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c7e2:	445a      	add	r2, fp
 801c7e4:	9209      	str	r2, [sp, #36]	; 0x24
 801c7e6:	f89a 3000 	ldrb.w	r3, [sl]
 801c7ea:	2b00      	cmp	r3, #0
 801c7ec:	f000 80a1 	beq.w	801c932 <_svfiprintf_r+0x1c6>
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c7f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c7fa:	f10a 0a01 	add.w	sl, sl, #1
 801c7fe:	9304      	str	r3, [sp, #16]
 801c800:	9307      	str	r3, [sp, #28]
 801c802:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c806:	931a      	str	r3, [sp, #104]	; 0x68
 801c808:	4654      	mov	r4, sl
 801c80a:	2205      	movs	r2, #5
 801c80c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c810:	4850      	ldr	r0, [pc, #320]	; (801c954 <_svfiprintf_r+0x1e8>)
 801c812:	f7e3 fd2d 	bl	8000270 <memchr>
 801c816:	9a04      	ldr	r2, [sp, #16]
 801c818:	b9d8      	cbnz	r0, 801c852 <_svfiprintf_r+0xe6>
 801c81a:	06d0      	lsls	r0, r2, #27
 801c81c:	bf44      	itt	mi
 801c81e:	2320      	movmi	r3, #32
 801c820:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c824:	0711      	lsls	r1, r2, #28
 801c826:	bf44      	itt	mi
 801c828:	232b      	movmi	r3, #43	; 0x2b
 801c82a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c82e:	f89a 3000 	ldrb.w	r3, [sl]
 801c832:	2b2a      	cmp	r3, #42	; 0x2a
 801c834:	d015      	beq.n	801c862 <_svfiprintf_r+0xf6>
 801c836:	9a07      	ldr	r2, [sp, #28]
 801c838:	4654      	mov	r4, sl
 801c83a:	2000      	movs	r0, #0
 801c83c:	f04f 0c0a 	mov.w	ip, #10
 801c840:	4621      	mov	r1, r4
 801c842:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c846:	3b30      	subs	r3, #48	; 0x30
 801c848:	2b09      	cmp	r3, #9
 801c84a:	d94d      	bls.n	801c8e8 <_svfiprintf_r+0x17c>
 801c84c:	b1b0      	cbz	r0, 801c87c <_svfiprintf_r+0x110>
 801c84e:	9207      	str	r2, [sp, #28]
 801c850:	e014      	b.n	801c87c <_svfiprintf_r+0x110>
 801c852:	eba0 0308 	sub.w	r3, r0, r8
 801c856:	fa09 f303 	lsl.w	r3, r9, r3
 801c85a:	4313      	orrs	r3, r2
 801c85c:	9304      	str	r3, [sp, #16]
 801c85e:	46a2      	mov	sl, r4
 801c860:	e7d2      	b.n	801c808 <_svfiprintf_r+0x9c>
 801c862:	9b03      	ldr	r3, [sp, #12]
 801c864:	1d19      	adds	r1, r3, #4
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	9103      	str	r1, [sp, #12]
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	bfbb      	ittet	lt
 801c86e:	425b      	neglt	r3, r3
 801c870:	f042 0202 	orrlt.w	r2, r2, #2
 801c874:	9307      	strge	r3, [sp, #28]
 801c876:	9307      	strlt	r3, [sp, #28]
 801c878:	bfb8      	it	lt
 801c87a:	9204      	strlt	r2, [sp, #16]
 801c87c:	7823      	ldrb	r3, [r4, #0]
 801c87e:	2b2e      	cmp	r3, #46	; 0x2e
 801c880:	d10c      	bne.n	801c89c <_svfiprintf_r+0x130>
 801c882:	7863      	ldrb	r3, [r4, #1]
 801c884:	2b2a      	cmp	r3, #42	; 0x2a
 801c886:	d134      	bne.n	801c8f2 <_svfiprintf_r+0x186>
 801c888:	9b03      	ldr	r3, [sp, #12]
 801c88a:	1d1a      	adds	r2, r3, #4
 801c88c:	681b      	ldr	r3, [r3, #0]
 801c88e:	9203      	str	r2, [sp, #12]
 801c890:	2b00      	cmp	r3, #0
 801c892:	bfb8      	it	lt
 801c894:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c898:	3402      	adds	r4, #2
 801c89a:	9305      	str	r3, [sp, #20]
 801c89c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801c964 <_svfiprintf_r+0x1f8>
 801c8a0:	7821      	ldrb	r1, [r4, #0]
 801c8a2:	2203      	movs	r2, #3
 801c8a4:	4650      	mov	r0, sl
 801c8a6:	f7e3 fce3 	bl	8000270 <memchr>
 801c8aa:	b138      	cbz	r0, 801c8bc <_svfiprintf_r+0x150>
 801c8ac:	9b04      	ldr	r3, [sp, #16]
 801c8ae:	eba0 000a 	sub.w	r0, r0, sl
 801c8b2:	2240      	movs	r2, #64	; 0x40
 801c8b4:	4082      	lsls	r2, r0
 801c8b6:	4313      	orrs	r3, r2
 801c8b8:	3401      	adds	r4, #1
 801c8ba:	9304      	str	r3, [sp, #16]
 801c8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c8c0:	4825      	ldr	r0, [pc, #148]	; (801c958 <_svfiprintf_r+0x1ec>)
 801c8c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c8c6:	2206      	movs	r2, #6
 801c8c8:	f7e3 fcd2 	bl	8000270 <memchr>
 801c8cc:	2800      	cmp	r0, #0
 801c8ce:	d038      	beq.n	801c942 <_svfiprintf_r+0x1d6>
 801c8d0:	4b22      	ldr	r3, [pc, #136]	; (801c95c <_svfiprintf_r+0x1f0>)
 801c8d2:	bb1b      	cbnz	r3, 801c91c <_svfiprintf_r+0x1b0>
 801c8d4:	9b03      	ldr	r3, [sp, #12]
 801c8d6:	3307      	adds	r3, #7
 801c8d8:	f023 0307 	bic.w	r3, r3, #7
 801c8dc:	3308      	adds	r3, #8
 801c8de:	9303      	str	r3, [sp, #12]
 801c8e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c8e2:	4433      	add	r3, r6
 801c8e4:	9309      	str	r3, [sp, #36]	; 0x24
 801c8e6:	e768      	b.n	801c7ba <_svfiprintf_r+0x4e>
 801c8e8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c8ec:	460c      	mov	r4, r1
 801c8ee:	2001      	movs	r0, #1
 801c8f0:	e7a6      	b.n	801c840 <_svfiprintf_r+0xd4>
 801c8f2:	2300      	movs	r3, #0
 801c8f4:	3401      	adds	r4, #1
 801c8f6:	9305      	str	r3, [sp, #20]
 801c8f8:	4619      	mov	r1, r3
 801c8fa:	f04f 0c0a 	mov.w	ip, #10
 801c8fe:	4620      	mov	r0, r4
 801c900:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c904:	3a30      	subs	r2, #48	; 0x30
 801c906:	2a09      	cmp	r2, #9
 801c908:	d903      	bls.n	801c912 <_svfiprintf_r+0x1a6>
 801c90a:	2b00      	cmp	r3, #0
 801c90c:	d0c6      	beq.n	801c89c <_svfiprintf_r+0x130>
 801c90e:	9105      	str	r1, [sp, #20]
 801c910:	e7c4      	b.n	801c89c <_svfiprintf_r+0x130>
 801c912:	fb0c 2101 	mla	r1, ip, r1, r2
 801c916:	4604      	mov	r4, r0
 801c918:	2301      	movs	r3, #1
 801c91a:	e7f0      	b.n	801c8fe <_svfiprintf_r+0x192>
 801c91c:	ab03      	add	r3, sp, #12
 801c91e:	9300      	str	r3, [sp, #0]
 801c920:	462a      	mov	r2, r5
 801c922:	4b0f      	ldr	r3, [pc, #60]	; (801c960 <_svfiprintf_r+0x1f4>)
 801c924:	a904      	add	r1, sp, #16
 801c926:	4638      	mov	r0, r7
 801c928:	f3af 8000 	nop.w
 801c92c:	1c42      	adds	r2, r0, #1
 801c92e:	4606      	mov	r6, r0
 801c930:	d1d6      	bne.n	801c8e0 <_svfiprintf_r+0x174>
 801c932:	89ab      	ldrh	r3, [r5, #12]
 801c934:	065b      	lsls	r3, r3, #25
 801c936:	f53f af2d 	bmi.w	801c794 <_svfiprintf_r+0x28>
 801c93a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c93c:	b01d      	add	sp, #116	; 0x74
 801c93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c942:	ab03      	add	r3, sp, #12
 801c944:	9300      	str	r3, [sp, #0]
 801c946:	462a      	mov	r2, r5
 801c948:	4b05      	ldr	r3, [pc, #20]	; (801c960 <_svfiprintf_r+0x1f4>)
 801c94a:	a904      	add	r1, sp, #16
 801c94c:	4638      	mov	r0, r7
 801c94e:	f000 f9bd 	bl	801cccc <_printf_i>
 801c952:	e7eb      	b.n	801c92c <_svfiprintf_r+0x1c0>
 801c954:	0801e788 	.word	0x0801e788
 801c958:	0801e792 	.word	0x0801e792
 801c95c:	00000000 	.word	0x00000000
 801c960:	0801c6b9 	.word	0x0801c6b9
 801c964:	0801e78e 	.word	0x0801e78e

0801c968 <__sfputc_r>:
 801c968:	6893      	ldr	r3, [r2, #8]
 801c96a:	3b01      	subs	r3, #1
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	b410      	push	{r4}
 801c970:	6093      	str	r3, [r2, #8]
 801c972:	da08      	bge.n	801c986 <__sfputc_r+0x1e>
 801c974:	6994      	ldr	r4, [r2, #24]
 801c976:	42a3      	cmp	r3, r4
 801c978:	db01      	blt.n	801c97e <__sfputc_r+0x16>
 801c97a:	290a      	cmp	r1, #10
 801c97c:	d103      	bne.n	801c986 <__sfputc_r+0x1e>
 801c97e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c982:	f7ff bc83 	b.w	801c28c <__swbuf_r>
 801c986:	6813      	ldr	r3, [r2, #0]
 801c988:	1c58      	adds	r0, r3, #1
 801c98a:	6010      	str	r0, [r2, #0]
 801c98c:	7019      	strb	r1, [r3, #0]
 801c98e:	4608      	mov	r0, r1
 801c990:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c994:	4770      	bx	lr

0801c996 <__sfputs_r>:
 801c996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c998:	4606      	mov	r6, r0
 801c99a:	460f      	mov	r7, r1
 801c99c:	4614      	mov	r4, r2
 801c99e:	18d5      	adds	r5, r2, r3
 801c9a0:	42ac      	cmp	r4, r5
 801c9a2:	d101      	bne.n	801c9a8 <__sfputs_r+0x12>
 801c9a4:	2000      	movs	r0, #0
 801c9a6:	e007      	b.n	801c9b8 <__sfputs_r+0x22>
 801c9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9ac:	463a      	mov	r2, r7
 801c9ae:	4630      	mov	r0, r6
 801c9b0:	f7ff ffda 	bl	801c968 <__sfputc_r>
 801c9b4:	1c43      	adds	r3, r0, #1
 801c9b6:	d1f3      	bne.n	801c9a0 <__sfputs_r+0xa>
 801c9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c9bc <_vfiprintf_r>:
 801c9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9c0:	460d      	mov	r5, r1
 801c9c2:	b09d      	sub	sp, #116	; 0x74
 801c9c4:	4614      	mov	r4, r2
 801c9c6:	4698      	mov	r8, r3
 801c9c8:	4606      	mov	r6, r0
 801c9ca:	b118      	cbz	r0, 801c9d4 <_vfiprintf_r+0x18>
 801c9cc:	6a03      	ldr	r3, [r0, #32]
 801c9ce:	b90b      	cbnz	r3, 801c9d4 <_vfiprintf_r+0x18>
 801c9d0:	f7ff fa5c 	bl	801be8c <__sinit>
 801c9d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c9d6:	07d9      	lsls	r1, r3, #31
 801c9d8:	d405      	bmi.n	801c9e6 <_vfiprintf_r+0x2a>
 801c9da:	89ab      	ldrh	r3, [r5, #12]
 801c9dc:	059a      	lsls	r2, r3, #22
 801c9de:	d402      	bmi.n	801c9e6 <_vfiprintf_r+0x2a>
 801c9e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c9e2:	f7ff fdd2 	bl	801c58a <__retarget_lock_acquire_recursive>
 801c9e6:	89ab      	ldrh	r3, [r5, #12]
 801c9e8:	071b      	lsls	r3, r3, #28
 801c9ea:	d501      	bpl.n	801c9f0 <_vfiprintf_r+0x34>
 801c9ec:	692b      	ldr	r3, [r5, #16]
 801c9ee:	b99b      	cbnz	r3, 801ca18 <_vfiprintf_r+0x5c>
 801c9f0:	4629      	mov	r1, r5
 801c9f2:	4630      	mov	r0, r6
 801c9f4:	f7ff fc88 	bl	801c308 <__swsetup_r>
 801c9f8:	b170      	cbz	r0, 801ca18 <_vfiprintf_r+0x5c>
 801c9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c9fc:	07dc      	lsls	r4, r3, #31
 801c9fe:	d504      	bpl.n	801ca0a <_vfiprintf_r+0x4e>
 801ca00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ca04:	b01d      	add	sp, #116	; 0x74
 801ca06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca0a:	89ab      	ldrh	r3, [r5, #12]
 801ca0c:	0598      	lsls	r0, r3, #22
 801ca0e:	d4f7      	bmi.n	801ca00 <_vfiprintf_r+0x44>
 801ca10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ca12:	f7ff fdbb 	bl	801c58c <__retarget_lock_release_recursive>
 801ca16:	e7f3      	b.n	801ca00 <_vfiprintf_r+0x44>
 801ca18:	2300      	movs	r3, #0
 801ca1a:	9309      	str	r3, [sp, #36]	; 0x24
 801ca1c:	2320      	movs	r3, #32
 801ca1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ca22:	f8cd 800c 	str.w	r8, [sp, #12]
 801ca26:	2330      	movs	r3, #48	; 0x30
 801ca28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801cbdc <_vfiprintf_r+0x220>
 801ca2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ca30:	f04f 0901 	mov.w	r9, #1
 801ca34:	4623      	mov	r3, r4
 801ca36:	469a      	mov	sl, r3
 801ca38:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ca3c:	b10a      	cbz	r2, 801ca42 <_vfiprintf_r+0x86>
 801ca3e:	2a25      	cmp	r2, #37	; 0x25
 801ca40:	d1f9      	bne.n	801ca36 <_vfiprintf_r+0x7a>
 801ca42:	ebba 0b04 	subs.w	fp, sl, r4
 801ca46:	d00b      	beq.n	801ca60 <_vfiprintf_r+0xa4>
 801ca48:	465b      	mov	r3, fp
 801ca4a:	4622      	mov	r2, r4
 801ca4c:	4629      	mov	r1, r5
 801ca4e:	4630      	mov	r0, r6
 801ca50:	f7ff ffa1 	bl	801c996 <__sfputs_r>
 801ca54:	3001      	adds	r0, #1
 801ca56:	f000 80a9 	beq.w	801cbac <_vfiprintf_r+0x1f0>
 801ca5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ca5c:	445a      	add	r2, fp
 801ca5e:	9209      	str	r2, [sp, #36]	; 0x24
 801ca60:	f89a 3000 	ldrb.w	r3, [sl]
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	f000 80a1 	beq.w	801cbac <_vfiprintf_r+0x1f0>
 801ca6a:	2300      	movs	r3, #0
 801ca6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ca70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ca74:	f10a 0a01 	add.w	sl, sl, #1
 801ca78:	9304      	str	r3, [sp, #16]
 801ca7a:	9307      	str	r3, [sp, #28]
 801ca7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801ca80:	931a      	str	r3, [sp, #104]	; 0x68
 801ca82:	4654      	mov	r4, sl
 801ca84:	2205      	movs	r2, #5
 801ca86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ca8a:	4854      	ldr	r0, [pc, #336]	; (801cbdc <_vfiprintf_r+0x220>)
 801ca8c:	f7e3 fbf0 	bl	8000270 <memchr>
 801ca90:	9a04      	ldr	r2, [sp, #16]
 801ca92:	b9d8      	cbnz	r0, 801cacc <_vfiprintf_r+0x110>
 801ca94:	06d1      	lsls	r1, r2, #27
 801ca96:	bf44      	itt	mi
 801ca98:	2320      	movmi	r3, #32
 801ca9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ca9e:	0713      	lsls	r3, r2, #28
 801caa0:	bf44      	itt	mi
 801caa2:	232b      	movmi	r3, #43	; 0x2b
 801caa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801caa8:	f89a 3000 	ldrb.w	r3, [sl]
 801caac:	2b2a      	cmp	r3, #42	; 0x2a
 801caae:	d015      	beq.n	801cadc <_vfiprintf_r+0x120>
 801cab0:	9a07      	ldr	r2, [sp, #28]
 801cab2:	4654      	mov	r4, sl
 801cab4:	2000      	movs	r0, #0
 801cab6:	f04f 0c0a 	mov.w	ip, #10
 801caba:	4621      	mov	r1, r4
 801cabc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cac0:	3b30      	subs	r3, #48	; 0x30
 801cac2:	2b09      	cmp	r3, #9
 801cac4:	d94d      	bls.n	801cb62 <_vfiprintf_r+0x1a6>
 801cac6:	b1b0      	cbz	r0, 801caf6 <_vfiprintf_r+0x13a>
 801cac8:	9207      	str	r2, [sp, #28]
 801caca:	e014      	b.n	801caf6 <_vfiprintf_r+0x13a>
 801cacc:	eba0 0308 	sub.w	r3, r0, r8
 801cad0:	fa09 f303 	lsl.w	r3, r9, r3
 801cad4:	4313      	orrs	r3, r2
 801cad6:	9304      	str	r3, [sp, #16]
 801cad8:	46a2      	mov	sl, r4
 801cada:	e7d2      	b.n	801ca82 <_vfiprintf_r+0xc6>
 801cadc:	9b03      	ldr	r3, [sp, #12]
 801cade:	1d19      	adds	r1, r3, #4
 801cae0:	681b      	ldr	r3, [r3, #0]
 801cae2:	9103      	str	r1, [sp, #12]
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	bfbb      	ittet	lt
 801cae8:	425b      	neglt	r3, r3
 801caea:	f042 0202 	orrlt.w	r2, r2, #2
 801caee:	9307      	strge	r3, [sp, #28]
 801caf0:	9307      	strlt	r3, [sp, #28]
 801caf2:	bfb8      	it	lt
 801caf4:	9204      	strlt	r2, [sp, #16]
 801caf6:	7823      	ldrb	r3, [r4, #0]
 801caf8:	2b2e      	cmp	r3, #46	; 0x2e
 801cafa:	d10c      	bne.n	801cb16 <_vfiprintf_r+0x15a>
 801cafc:	7863      	ldrb	r3, [r4, #1]
 801cafe:	2b2a      	cmp	r3, #42	; 0x2a
 801cb00:	d134      	bne.n	801cb6c <_vfiprintf_r+0x1b0>
 801cb02:	9b03      	ldr	r3, [sp, #12]
 801cb04:	1d1a      	adds	r2, r3, #4
 801cb06:	681b      	ldr	r3, [r3, #0]
 801cb08:	9203      	str	r2, [sp, #12]
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	bfb8      	it	lt
 801cb0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801cb12:	3402      	adds	r4, #2
 801cb14:	9305      	str	r3, [sp, #20]
 801cb16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801cbec <_vfiprintf_r+0x230>
 801cb1a:	7821      	ldrb	r1, [r4, #0]
 801cb1c:	2203      	movs	r2, #3
 801cb1e:	4650      	mov	r0, sl
 801cb20:	f7e3 fba6 	bl	8000270 <memchr>
 801cb24:	b138      	cbz	r0, 801cb36 <_vfiprintf_r+0x17a>
 801cb26:	9b04      	ldr	r3, [sp, #16]
 801cb28:	eba0 000a 	sub.w	r0, r0, sl
 801cb2c:	2240      	movs	r2, #64	; 0x40
 801cb2e:	4082      	lsls	r2, r0
 801cb30:	4313      	orrs	r3, r2
 801cb32:	3401      	adds	r4, #1
 801cb34:	9304      	str	r3, [sp, #16]
 801cb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cb3a:	4829      	ldr	r0, [pc, #164]	; (801cbe0 <_vfiprintf_r+0x224>)
 801cb3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801cb40:	2206      	movs	r2, #6
 801cb42:	f7e3 fb95 	bl	8000270 <memchr>
 801cb46:	2800      	cmp	r0, #0
 801cb48:	d03f      	beq.n	801cbca <_vfiprintf_r+0x20e>
 801cb4a:	4b26      	ldr	r3, [pc, #152]	; (801cbe4 <_vfiprintf_r+0x228>)
 801cb4c:	bb1b      	cbnz	r3, 801cb96 <_vfiprintf_r+0x1da>
 801cb4e:	9b03      	ldr	r3, [sp, #12]
 801cb50:	3307      	adds	r3, #7
 801cb52:	f023 0307 	bic.w	r3, r3, #7
 801cb56:	3308      	adds	r3, #8
 801cb58:	9303      	str	r3, [sp, #12]
 801cb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb5c:	443b      	add	r3, r7
 801cb5e:	9309      	str	r3, [sp, #36]	; 0x24
 801cb60:	e768      	b.n	801ca34 <_vfiprintf_r+0x78>
 801cb62:	fb0c 3202 	mla	r2, ip, r2, r3
 801cb66:	460c      	mov	r4, r1
 801cb68:	2001      	movs	r0, #1
 801cb6a:	e7a6      	b.n	801caba <_vfiprintf_r+0xfe>
 801cb6c:	2300      	movs	r3, #0
 801cb6e:	3401      	adds	r4, #1
 801cb70:	9305      	str	r3, [sp, #20]
 801cb72:	4619      	mov	r1, r3
 801cb74:	f04f 0c0a 	mov.w	ip, #10
 801cb78:	4620      	mov	r0, r4
 801cb7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cb7e:	3a30      	subs	r2, #48	; 0x30
 801cb80:	2a09      	cmp	r2, #9
 801cb82:	d903      	bls.n	801cb8c <_vfiprintf_r+0x1d0>
 801cb84:	2b00      	cmp	r3, #0
 801cb86:	d0c6      	beq.n	801cb16 <_vfiprintf_r+0x15a>
 801cb88:	9105      	str	r1, [sp, #20]
 801cb8a:	e7c4      	b.n	801cb16 <_vfiprintf_r+0x15a>
 801cb8c:	fb0c 2101 	mla	r1, ip, r1, r2
 801cb90:	4604      	mov	r4, r0
 801cb92:	2301      	movs	r3, #1
 801cb94:	e7f0      	b.n	801cb78 <_vfiprintf_r+0x1bc>
 801cb96:	ab03      	add	r3, sp, #12
 801cb98:	9300      	str	r3, [sp, #0]
 801cb9a:	462a      	mov	r2, r5
 801cb9c:	4b12      	ldr	r3, [pc, #72]	; (801cbe8 <_vfiprintf_r+0x22c>)
 801cb9e:	a904      	add	r1, sp, #16
 801cba0:	4630      	mov	r0, r6
 801cba2:	f3af 8000 	nop.w
 801cba6:	4607      	mov	r7, r0
 801cba8:	1c78      	adds	r0, r7, #1
 801cbaa:	d1d6      	bne.n	801cb5a <_vfiprintf_r+0x19e>
 801cbac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cbae:	07d9      	lsls	r1, r3, #31
 801cbb0:	d405      	bmi.n	801cbbe <_vfiprintf_r+0x202>
 801cbb2:	89ab      	ldrh	r3, [r5, #12]
 801cbb4:	059a      	lsls	r2, r3, #22
 801cbb6:	d402      	bmi.n	801cbbe <_vfiprintf_r+0x202>
 801cbb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cbba:	f7ff fce7 	bl	801c58c <__retarget_lock_release_recursive>
 801cbbe:	89ab      	ldrh	r3, [r5, #12]
 801cbc0:	065b      	lsls	r3, r3, #25
 801cbc2:	f53f af1d 	bmi.w	801ca00 <_vfiprintf_r+0x44>
 801cbc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801cbc8:	e71c      	b.n	801ca04 <_vfiprintf_r+0x48>
 801cbca:	ab03      	add	r3, sp, #12
 801cbcc:	9300      	str	r3, [sp, #0]
 801cbce:	462a      	mov	r2, r5
 801cbd0:	4b05      	ldr	r3, [pc, #20]	; (801cbe8 <_vfiprintf_r+0x22c>)
 801cbd2:	a904      	add	r1, sp, #16
 801cbd4:	4630      	mov	r0, r6
 801cbd6:	f000 f879 	bl	801cccc <_printf_i>
 801cbda:	e7e4      	b.n	801cba6 <_vfiprintf_r+0x1ea>
 801cbdc:	0801e788 	.word	0x0801e788
 801cbe0:	0801e792 	.word	0x0801e792
 801cbe4:	00000000 	.word	0x00000000
 801cbe8:	0801c997 	.word	0x0801c997
 801cbec:	0801e78e 	.word	0x0801e78e

0801cbf0 <_printf_common>:
 801cbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cbf4:	4616      	mov	r6, r2
 801cbf6:	4699      	mov	r9, r3
 801cbf8:	688a      	ldr	r2, [r1, #8]
 801cbfa:	690b      	ldr	r3, [r1, #16]
 801cbfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801cc00:	4293      	cmp	r3, r2
 801cc02:	bfb8      	it	lt
 801cc04:	4613      	movlt	r3, r2
 801cc06:	6033      	str	r3, [r6, #0]
 801cc08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801cc0c:	4607      	mov	r7, r0
 801cc0e:	460c      	mov	r4, r1
 801cc10:	b10a      	cbz	r2, 801cc16 <_printf_common+0x26>
 801cc12:	3301      	adds	r3, #1
 801cc14:	6033      	str	r3, [r6, #0]
 801cc16:	6823      	ldr	r3, [r4, #0]
 801cc18:	0699      	lsls	r1, r3, #26
 801cc1a:	bf42      	ittt	mi
 801cc1c:	6833      	ldrmi	r3, [r6, #0]
 801cc1e:	3302      	addmi	r3, #2
 801cc20:	6033      	strmi	r3, [r6, #0]
 801cc22:	6825      	ldr	r5, [r4, #0]
 801cc24:	f015 0506 	ands.w	r5, r5, #6
 801cc28:	d106      	bne.n	801cc38 <_printf_common+0x48>
 801cc2a:	f104 0a19 	add.w	sl, r4, #25
 801cc2e:	68e3      	ldr	r3, [r4, #12]
 801cc30:	6832      	ldr	r2, [r6, #0]
 801cc32:	1a9b      	subs	r3, r3, r2
 801cc34:	42ab      	cmp	r3, r5
 801cc36:	dc26      	bgt.n	801cc86 <_printf_common+0x96>
 801cc38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801cc3c:	1e13      	subs	r3, r2, #0
 801cc3e:	6822      	ldr	r2, [r4, #0]
 801cc40:	bf18      	it	ne
 801cc42:	2301      	movne	r3, #1
 801cc44:	0692      	lsls	r2, r2, #26
 801cc46:	d42b      	bmi.n	801cca0 <_printf_common+0xb0>
 801cc48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801cc4c:	4649      	mov	r1, r9
 801cc4e:	4638      	mov	r0, r7
 801cc50:	47c0      	blx	r8
 801cc52:	3001      	adds	r0, #1
 801cc54:	d01e      	beq.n	801cc94 <_printf_common+0xa4>
 801cc56:	6823      	ldr	r3, [r4, #0]
 801cc58:	6922      	ldr	r2, [r4, #16]
 801cc5a:	f003 0306 	and.w	r3, r3, #6
 801cc5e:	2b04      	cmp	r3, #4
 801cc60:	bf02      	ittt	eq
 801cc62:	68e5      	ldreq	r5, [r4, #12]
 801cc64:	6833      	ldreq	r3, [r6, #0]
 801cc66:	1aed      	subeq	r5, r5, r3
 801cc68:	68a3      	ldr	r3, [r4, #8]
 801cc6a:	bf0c      	ite	eq
 801cc6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801cc70:	2500      	movne	r5, #0
 801cc72:	4293      	cmp	r3, r2
 801cc74:	bfc4      	itt	gt
 801cc76:	1a9b      	subgt	r3, r3, r2
 801cc78:	18ed      	addgt	r5, r5, r3
 801cc7a:	2600      	movs	r6, #0
 801cc7c:	341a      	adds	r4, #26
 801cc7e:	42b5      	cmp	r5, r6
 801cc80:	d11a      	bne.n	801ccb8 <_printf_common+0xc8>
 801cc82:	2000      	movs	r0, #0
 801cc84:	e008      	b.n	801cc98 <_printf_common+0xa8>
 801cc86:	2301      	movs	r3, #1
 801cc88:	4652      	mov	r2, sl
 801cc8a:	4649      	mov	r1, r9
 801cc8c:	4638      	mov	r0, r7
 801cc8e:	47c0      	blx	r8
 801cc90:	3001      	adds	r0, #1
 801cc92:	d103      	bne.n	801cc9c <_printf_common+0xac>
 801cc94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc9c:	3501      	adds	r5, #1
 801cc9e:	e7c6      	b.n	801cc2e <_printf_common+0x3e>
 801cca0:	18e1      	adds	r1, r4, r3
 801cca2:	1c5a      	adds	r2, r3, #1
 801cca4:	2030      	movs	r0, #48	; 0x30
 801cca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ccaa:	4422      	add	r2, r4
 801ccac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ccb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ccb4:	3302      	adds	r3, #2
 801ccb6:	e7c7      	b.n	801cc48 <_printf_common+0x58>
 801ccb8:	2301      	movs	r3, #1
 801ccba:	4622      	mov	r2, r4
 801ccbc:	4649      	mov	r1, r9
 801ccbe:	4638      	mov	r0, r7
 801ccc0:	47c0      	blx	r8
 801ccc2:	3001      	adds	r0, #1
 801ccc4:	d0e6      	beq.n	801cc94 <_printf_common+0xa4>
 801ccc6:	3601      	adds	r6, #1
 801ccc8:	e7d9      	b.n	801cc7e <_printf_common+0x8e>
	...

0801cccc <_printf_i>:
 801cccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ccd0:	7e0f      	ldrb	r7, [r1, #24]
 801ccd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801ccd4:	2f78      	cmp	r7, #120	; 0x78
 801ccd6:	4691      	mov	r9, r2
 801ccd8:	4680      	mov	r8, r0
 801ccda:	460c      	mov	r4, r1
 801ccdc:	469a      	mov	sl, r3
 801ccde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801cce2:	d807      	bhi.n	801ccf4 <_printf_i+0x28>
 801cce4:	2f62      	cmp	r7, #98	; 0x62
 801cce6:	d80a      	bhi.n	801ccfe <_printf_i+0x32>
 801cce8:	2f00      	cmp	r7, #0
 801ccea:	f000 80d4 	beq.w	801ce96 <_printf_i+0x1ca>
 801ccee:	2f58      	cmp	r7, #88	; 0x58
 801ccf0:	f000 80c0 	beq.w	801ce74 <_printf_i+0x1a8>
 801ccf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ccf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ccfc:	e03a      	b.n	801cd74 <_printf_i+0xa8>
 801ccfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801cd02:	2b15      	cmp	r3, #21
 801cd04:	d8f6      	bhi.n	801ccf4 <_printf_i+0x28>
 801cd06:	a101      	add	r1, pc, #4	; (adr r1, 801cd0c <_printf_i+0x40>)
 801cd08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801cd0c:	0801cd65 	.word	0x0801cd65
 801cd10:	0801cd79 	.word	0x0801cd79
 801cd14:	0801ccf5 	.word	0x0801ccf5
 801cd18:	0801ccf5 	.word	0x0801ccf5
 801cd1c:	0801ccf5 	.word	0x0801ccf5
 801cd20:	0801ccf5 	.word	0x0801ccf5
 801cd24:	0801cd79 	.word	0x0801cd79
 801cd28:	0801ccf5 	.word	0x0801ccf5
 801cd2c:	0801ccf5 	.word	0x0801ccf5
 801cd30:	0801ccf5 	.word	0x0801ccf5
 801cd34:	0801ccf5 	.word	0x0801ccf5
 801cd38:	0801ce7d 	.word	0x0801ce7d
 801cd3c:	0801cda5 	.word	0x0801cda5
 801cd40:	0801ce37 	.word	0x0801ce37
 801cd44:	0801ccf5 	.word	0x0801ccf5
 801cd48:	0801ccf5 	.word	0x0801ccf5
 801cd4c:	0801ce9f 	.word	0x0801ce9f
 801cd50:	0801ccf5 	.word	0x0801ccf5
 801cd54:	0801cda5 	.word	0x0801cda5
 801cd58:	0801ccf5 	.word	0x0801ccf5
 801cd5c:	0801ccf5 	.word	0x0801ccf5
 801cd60:	0801ce3f 	.word	0x0801ce3f
 801cd64:	682b      	ldr	r3, [r5, #0]
 801cd66:	1d1a      	adds	r2, r3, #4
 801cd68:	681b      	ldr	r3, [r3, #0]
 801cd6a:	602a      	str	r2, [r5, #0]
 801cd6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801cd70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801cd74:	2301      	movs	r3, #1
 801cd76:	e09f      	b.n	801ceb8 <_printf_i+0x1ec>
 801cd78:	6820      	ldr	r0, [r4, #0]
 801cd7a:	682b      	ldr	r3, [r5, #0]
 801cd7c:	0607      	lsls	r7, r0, #24
 801cd7e:	f103 0104 	add.w	r1, r3, #4
 801cd82:	6029      	str	r1, [r5, #0]
 801cd84:	d501      	bpl.n	801cd8a <_printf_i+0xbe>
 801cd86:	681e      	ldr	r6, [r3, #0]
 801cd88:	e003      	b.n	801cd92 <_printf_i+0xc6>
 801cd8a:	0646      	lsls	r6, r0, #25
 801cd8c:	d5fb      	bpl.n	801cd86 <_printf_i+0xba>
 801cd8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801cd92:	2e00      	cmp	r6, #0
 801cd94:	da03      	bge.n	801cd9e <_printf_i+0xd2>
 801cd96:	232d      	movs	r3, #45	; 0x2d
 801cd98:	4276      	negs	r6, r6
 801cd9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cd9e:	485a      	ldr	r0, [pc, #360]	; (801cf08 <_printf_i+0x23c>)
 801cda0:	230a      	movs	r3, #10
 801cda2:	e012      	b.n	801cdca <_printf_i+0xfe>
 801cda4:	682b      	ldr	r3, [r5, #0]
 801cda6:	6820      	ldr	r0, [r4, #0]
 801cda8:	1d19      	adds	r1, r3, #4
 801cdaa:	6029      	str	r1, [r5, #0]
 801cdac:	0605      	lsls	r5, r0, #24
 801cdae:	d501      	bpl.n	801cdb4 <_printf_i+0xe8>
 801cdb0:	681e      	ldr	r6, [r3, #0]
 801cdb2:	e002      	b.n	801cdba <_printf_i+0xee>
 801cdb4:	0641      	lsls	r1, r0, #25
 801cdb6:	d5fb      	bpl.n	801cdb0 <_printf_i+0xe4>
 801cdb8:	881e      	ldrh	r6, [r3, #0]
 801cdba:	4853      	ldr	r0, [pc, #332]	; (801cf08 <_printf_i+0x23c>)
 801cdbc:	2f6f      	cmp	r7, #111	; 0x6f
 801cdbe:	bf0c      	ite	eq
 801cdc0:	2308      	moveq	r3, #8
 801cdc2:	230a      	movne	r3, #10
 801cdc4:	2100      	movs	r1, #0
 801cdc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801cdca:	6865      	ldr	r5, [r4, #4]
 801cdcc:	60a5      	str	r5, [r4, #8]
 801cdce:	2d00      	cmp	r5, #0
 801cdd0:	bfa2      	ittt	ge
 801cdd2:	6821      	ldrge	r1, [r4, #0]
 801cdd4:	f021 0104 	bicge.w	r1, r1, #4
 801cdd8:	6021      	strge	r1, [r4, #0]
 801cdda:	b90e      	cbnz	r6, 801cde0 <_printf_i+0x114>
 801cddc:	2d00      	cmp	r5, #0
 801cdde:	d04b      	beq.n	801ce78 <_printf_i+0x1ac>
 801cde0:	4615      	mov	r5, r2
 801cde2:	fbb6 f1f3 	udiv	r1, r6, r3
 801cde6:	fb03 6711 	mls	r7, r3, r1, r6
 801cdea:	5dc7      	ldrb	r7, [r0, r7]
 801cdec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801cdf0:	4637      	mov	r7, r6
 801cdf2:	42bb      	cmp	r3, r7
 801cdf4:	460e      	mov	r6, r1
 801cdf6:	d9f4      	bls.n	801cde2 <_printf_i+0x116>
 801cdf8:	2b08      	cmp	r3, #8
 801cdfa:	d10b      	bne.n	801ce14 <_printf_i+0x148>
 801cdfc:	6823      	ldr	r3, [r4, #0]
 801cdfe:	07de      	lsls	r6, r3, #31
 801ce00:	d508      	bpl.n	801ce14 <_printf_i+0x148>
 801ce02:	6923      	ldr	r3, [r4, #16]
 801ce04:	6861      	ldr	r1, [r4, #4]
 801ce06:	4299      	cmp	r1, r3
 801ce08:	bfde      	ittt	le
 801ce0a:	2330      	movle	r3, #48	; 0x30
 801ce0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ce10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801ce14:	1b52      	subs	r2, r2, r5
 801ce16:	6122      	str	r2, [r4, #16]
 801ce18:	f8cd a000 	str.w	sl, [sp]
 801ce1c:	464b      	mov	r3, r9
 801ce1e:	aa03      	add	r2, sp, #12
 801ce20:	4621      	mov	r1, r4
 801ce22:	4640      	mov	r0, r8
 801ce24:	f7ff fee4 	bl	801cbf0 <_printf_common>
 801ce28:	3001      	adds	r0, #1
 801ce2a:	d14a      	bne.n	801cec2 <_printf_i+0x1f6>
 801ce2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ce30:	b004      	add	sp, #16
 801ce32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce36:	6823      	ldr	r3, [r4, #0]
 801ce38:	f043 0320 	orr.w	r3, r3, #32
 801ce3c:	6023      	str	r3, [r4, #0]
 801ce3e:	4833      	ldr	r0, [pc, #204]	; (801cf0c <_printf_i+0x240>)
 801ce40:	2778      	movs	r7, #120	; 0x78
 801ce42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ce46:	6823      	ldr	r3, [r4, #0]
 801ce48:	6829      	ldr	r1, [r5, #0]
 801ce4a:	061f      	lsls	r7, r3, #24
 801ce4c:	f851 6b04 	ldr.w	r6, [r1], #4
 801ce50:	d402      	bmi.n	801ce58 <_printf_i+0x18c>
 801ce52:	065f      	lsls	r7, r3, #25
 801ce54:	bf48      	it	mi
 801ce56:	b2b6      	uxthmi	r6, r6
 801ce58:	07df      	lsls	r7, r3, #31
 801ce5a:	bf48      	it	mi
 801ce5c:	f043 0320 	orrmi.w	r3, r3, #32
 801ce60:	6029      	str	r1, [r5, #0]
 801ce62:	bf48      	it	mi
 801ce64:	6023      	strmi	r3, [r4, #0]
 801ce66:	b91e      	cbnz	r6, 801ce70 <_printf_i+0x1a4>
 801ce68:	6823      	ldr	r3, [r4, #0]
 801ce6a:	f023 0320 	bic.w	r3, r3, #32
 801ce6e:	6023      	str	r3, [r4, #0]
 801ce70:	2310      	movs	r3, #16
 801ce72:	e7a7      	b.n	801cdc4 <_printf_i+0xf8>
 801ce74:	4824      	ldr	r0, [pc, #144]	; (801cf08 <_printf_i+0x23c>)
 801ce76:	e7e4      	b.n	801ce42 <_printf_i+0x176>
 801ce78:	4615      	mov	r5, r2
 801ce7a:	e7bd      	b.n	801cdf8 <_printf_i+0x12c>
 801ce7c:	682b      	ldr	r3, [r5, #0]
 801ce7e:	6826      	ldr	r6, [r4, #0]
 801ce80:	6961      	ldr	r1, [r4, #20]
 801ce82:	1d18      	adds	r0, r3, #4
 801ce84:	6028      	str	r0, [r5, #0]
 801ce86:	0635      	lsls	r5, r6, #24
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	d501      	bpl.n	801ce90 <_printf_i+0x1c4>
 801ce8c:	6019      	str	r1, [r3, #0]
 801ce8e:	e002      	b.n	801ce96 <_printf_i+0x1ca>
 801ce90:	0670      	lsls	r0, r6, #25
 801ce92:	d5fb      	bpl.n	801ce8c <_printf_i+0x1c0>
 801ce94:	8019      	strh	r1, [r3, #0]
 801ce96:	2300      	movs	r3, #0
 801ce98:	6123      	str	r3, [r4, #16]
 801ce9a:	4615      	mov	r5, r2
 801ce9c:	e7bc      	b.n	801ce18 <_printf_i+0x14c>
 801ce9e:	682b      	ldr	r3, [r5, #0]
 801cea0:	1d1a      	adds	r2, r3, #4
 801cea2:	602a      	str	r2, [r5, #0]
 801cea4:	681d      	ldr	r5, [r3, #0]
 801cea6:	6862      	ldr	r2, [r4, #4]
 801cea8:	2100      	movs	r1, #0
 801ceaa:	4628      	mov	r0, r5
 801ceac:	f7e3 f9e0 	bl	8000270 <memchr>
 801ceb0:	b108      	cbz	r0, 801ceb6 <_printf_i+0x1ea>
 801ceb2:	1b40      	subs	r0, r0, r5
 801ceb4:	6060      	str	r0, [r4, #4]
 801ceb6:	6863      	ldr	r3, [r4, #4]
 801ceb8:	6123      	str	r3, [r4, #16]
 801ceba:	2300      	movs	r3, #0
 801cebc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cec0:	e7aa      	b.n	801ce18 <_printf_i+0x14c>
 801cec2:	6923      	ldr	r3, [r4, #16]
 801cec4:	462a      	mov	r2, r5
 801cec6:	4649      	mov	r1, r9
 801cec8:	4640      	mov	r0, r8
 801ceca:	47d0      	blx	sl
 801cecc:	3001      	adds	r0, #1
 801cece:	d0ad      	beq.n	801ce2c <_printf_i+0x160>
 801ced0:	6823      	ldr	r3, [r4, #0]
 801ced2:	079b      	lsls	r3, r3, #30
 801ced4:	d413      	bmi.n	801cefe <_printf_i+0x232>
 801ced6:	68e0      	ldr	r0, [r4, #12]
 801ced8:	9b03      	ldr	r3, [sp, #12]
 801ceda:	4298      	cmp	r0, r3
 801cedc:	bfb8      	it	lt
 801cede:	4618      	movlt	r0, r3
 801cee0:	e7a6      	b.n	801ce30 <_printf_i+0x164>
 801cee2:	2301      	movs	r3, #1
 801cee4:	4632      	mov	r2, r6
 801cee6:	4649      	mov	r1, r9
 801cee8:	4640      	mov	r0, r8
 801ceea:	47d0      	blx	sl
 801ceec:	3001      	adds	r0, #1
 801ceee:	d09d      	beq.n	801ce2c <_printf_i+0x160>
 801cef0:	3501      	adds	r5, #1
 801cef2:	68e3      	ldr	r3, [r4, #12]
 801cef4:	9903      	ldr	r1, [sp, #12]
 801cef6:	1a5b      	subs	r3, r3, r1
 801cef8:	42ab      	cmp	r3, r5
 801cefa:	dcf2      	bgt.n	801cee2 <_printf_i+0x216>
 801cefc:	e7eb      	b.n	801ced6 <_printf_i+0x20a>
 801cefe:	2500      	movs	r5, #0
 801cf00:	f104 0619 	add.w	r6, r4, #25
 801cf04:	e7f5      	b.n	801cef2 <_printf_i+0x226>
 801cf06:	bf00      	nop
 801cf08:	0801e799 	.word	0x0801e799
 801cf0c:	0801e7aa 	.word	0x0801e7aa

0801cf10 <__sflush_r>:
 801cf10:	898a      	ldrh	r2, [r1, #12]
 801cf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf16:	4605      	mov	r5, r0
 801cf18:	0710      	lsls	r0, r2, #28
 801cf1a:	460c      	mov	r4, r1
 801cf1c:	d458      	bmi.n	801cfd0 <__sflush_r+0xc0>
 801cf1e:	684b      	ldr	r3, [r1, #4]
 801cf20:	2b00      	cmp	r3, #0
 801cf22:	dc05      	bgt.n	801cf30 <__sflush_r+0x20>
 801cf24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cf26:	2b00      	cmp	r3, #0
 801cf28:	dc02      	bgt.n	801cf30 <__sflush_r+0x20>
 801cf2a:	2000      	movs	r0, #0
 801cf2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cf32:	2e00      	cmp	r6, #0
 801cf34:	d0f9      	beq.n	801cf2a <__sflush_r+0x1a>
 801cf36:	2300      	movs	r3, #0
 801cf38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cf3c:	682f      	ldr	r7, [r5, #0]
 801cf3e:	6a21      	ldr	r1, [r4, #32]
 801cf40:	602b      	str	r3, [r5, #0]
 801cf42:	d032      	beq.n	801cfaa <__sflush_r+0x9a>
 801cf44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cf46:	89a3      	ldrh	r3, [r4, #12]
 801cf48:	075a      	lsls	r2, r3, #29
 801cf4a:	d505      	bpl.n	801cf58 <__sflush_r+0x48>
 801cf4c:	6863      	ldr	r3, [r4, #4]
 801cf4e:	1ac0      	subs	r0, r0, r3
 801cf50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cf52:	b10b      	cbz	r3, 801cf58 <__sflush_r+0x48>
 801cf54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cf56:	1ac0      	subs	r0, r0, r3
 801cf58:	2300      	movs	r3, #0
 801cf5a:	4602      	mov	r2, r0
 801cf5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cf5e:	6a21      	ldr	r1, [r4, #32]
 801cf60:	4628      	mov	r0, r5
 801cf62:	47b0      	blx	r6
 801cf64:	1c43      	adds	r3, r0, #1
 801cf66:	89a3      	ldrh	r3, [r4, #12]
 801cf68:	d106      	bne.n	801cf78 <__sflush_r+0x68>
 801cf6a:	6829      	ldr	r1, [r5, #0]
 801cf6c:	291d      	cmp	r1, #29
 801cf6e:	d82b      	bhi.n	801cfc8 <__sflush_r+0xb8>
 801cf70:	4a29      	ldr	r2, [pc, #164]	; (801d018 <__sflush_r+0x108>)
 801cf72:	410a      	asrs	r2, r1
 801cf74:	07d6      	lsls	r6, r2, #31
 801cf76:	d427      	bmi.n	801cfc8 <__sflush_r+0xb8>
 801cf78:	2200      	movs	r2, #0
 801cf7a:	6062      	str	r2, [r4, #4]
 801cf7c:	04d9      	lsls	r1, r3, #19
 801cf7e:	6922      	ldr	r2, [r4, #16]
 801cf80:	6022      	str	r2, [r4, #0]
 801cf82:	d504      	bpl.n	801cf8e <__sflush_r+0x7e>
 801cf84:	1c42      	adds	r2, r0, #1
 801cf86:	d101      	bne.n	801cf8c <__sflush_r+0x7c>
 801cf88:	682b      	ldr	r3, [r5, #0]
 801cf8a:	b903      	cbnz	r3, 801cf8e <__sflush_r+0x7e>
 801cf8c:	6560      	str	r0, [r4, #84]	; 0x54
 801cf8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cf90:	602f      	str	r7, [r5, #0]
 801cf92:	2900      	cmp	r1, #0
 801cf94:	d0c9      	beq.n	801cf2a <__sflush_r+0x1a>
 801cf96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cf9a:	4299      	cmp	r1, r3
 801cf9c:	d002      	beq.n	801cfa4 <__sflush_r+0x94>
 801cf9e:	4628      	mov	r0, r5
 801cfa0:	f7ff fb36 	bl	801c610 <_free_r>
 801cfa4:	2000      	movs	r0, #0
 801cfa6:	6360      	str	r0, [r4, #52]	; 0x34
 801cfa8:	e7c0      	b.n	801cf2c <__sflush_r+0x1c>
 801cfaa:	2301      	movs	r3, #1
 801cfac:	4628      	mov	r0, r5
 801cfae:	47b0      	blx	r6
 801cfb0:	1c41      	adds	r1, r0, #1
 801cfb2:	d1c8      	bne.n	801cf46 <__sflush_r+0x36>
 801cfb4:	682b      	ldr	r3, [r5, #0]
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	d0c5      	beq.n	801cf46 <__sflush_r+0x36>
 801cfba:	2b1d      	cmp	r3, #29
 801cfbc:	d001      	beq.n	801cfc2 <__sflush_r+0xb2>
 801cfbe:	2b16      	cmp	r3, #22
 801cfc0:	d101      	bne.n	801cfc6 <__sflush_r+0xb6>
 801cfc2:	602f      	str	r7, [r5, #0]
 801cfc4:	e7b1      	b.n	801cf2a <__sflush_r+0x1a>
 801cfc6:	89a3      	ldrh	r3, [r4, #12]
 801cfc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cfcc:	81a3      	strh	r3, [r4, #12]
 801cfce:	e7ad      	b.n	801cf2c <__sflush_r+0x1c>
 801cfd0:	690f      	ldr	r7, [r1, #16]
 801cfd2:	2f00      	cmp	r7, #0
 801cfd4:	d0a9      	beq.n	801cf2a <__sflush_r+0x1a>
 801cfd6:	0793      	lsls	r3, r2, #30
 801cfd8:	680e      	ldr	r6, [r1, #0]
 801cfda:	bf08      	it	eq
 801cfdc:	694b      	ldreq	r3, [r1, #20]
 801cfde:	600f      	str	r7, [r1, #0]
 801cfe0:	bf18      	it	ne
 801cfe2:	2300      	movne	r3, #0
 801cfe4:	eba6 0807 	sub.w	r8, r6, r7
 801cfe8:	608b      	str	r3, [r1, #8]
 801cfea:	f1b8 0f00 	cmp.w	r8, #0
 801cfee:	dd9c      	ble.n	801cf2a <__sflush_r+0x1a>
 801cff0:	6a21      	ldr	r1, [r4, #32]
 801cff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cff4:	4643      	mov	r3, r8
 801cff6:	463a      	mov	r2, r7
 801cff8:	4628      	mov	r0, r5
 801cffa:	47b0      	blx	r6
 801cffc:	2800      	cmp	r0, #0
 801cffe:	dc06      	bgt.n	801d00e <__sflush_r+0xfe>
 801d000:	89a3      	ldrh	r3, [r4, #12]
 801d002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d006:	81a3      	strh	r3, [r4, #12]
 801d008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d00c:	e78e      	b.n	801cf2c <__sflush_r+0x1c>
 801d00e:	4407      	add	r7, r0
 801d010:	eba8 0800 	sub.w	r8, r8, r0
 801d014:	e7e9      	b.n	801cfea <__sflush_r+0xda>
 801d016:	bf00      	nop
 801d018:	dfbffffe 	.word	0xdfbffffe

0801d01c <_fflush_r>:
 801d01c:	b538      	push	{r3, r4, r5, lr}
 801d01e:	690b      	ldr	r3, [r1, #16]
 801d020:	4605      	mov	r5, r0
 801d022:	460c      	mov	r4, r1
 801d024:	b913      	cbnz	r3, 801d02c <_fflush_r+0x10>
 801d026:	2500      	movs	r5, #0
 801d028:	4628      	mov	r0, r5
 801d02a:	bd38      	pop	{r3, r4, r5, pc}
 801d02c:	b118      	cbz	r0, 801d036 <_fflush_r+0x1a>
 801d02e:	6a03      	ldr	r3, [r0, #32]
 801d030:	b90b      	cbnz	r3, 801d036 <_fflush_r+0x1a>
 801d032:	f7fe ff2b 	bl	801be8c <__sinit>
 801d036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d0f3      	beq.n	801d026 <_fflush_r+0xa>
 801d03e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d040:	07d0      	lsls	r0, r2, #31
 801d042:	d404      	bmi.n	801d04e <_fflush_r+0x32>
 801d044:	0599      	lsls	r1, r3, #22
 801d046:	d402      	bmi.n	801d04e <_fflush_r+0x32>
 801d048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d04a:	f7ff fa9e 	bl	801c58a <__retarget_lock_acquire_recursive>
 801d04e:	4628      	mov	r0, r5
 801d050:	4621      	mov	r1, r4
 801d052:	f7ff ff5d 	bl	801cf10 <__sflush_r>
 801d056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d058:	07da      	lsls	r2, r3, #31
 801d05a:	4605      	mov	r5, r0
 801d05c:	d4e4      	bmi.n	801d028 <_fflush_r+0xc>
 801d05e:	89a3      	ldrh	r3, [r4, #12]
 801d060:	059b      	lsls	r3, r3, #22
 801d062:	d4e1      	bmi.n	801d028 <_fflush_r+0xc>
 801d064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d066:	f7ff fa91 	bl	801c58c <__retarget_lock_release_recursive>
 801d06a:	e7dd      	b.n	801d028 <_fflush_r+0xc>

0801d06c <fiprintf>:
 801d06c:	b40e      	push	{r1, r2, r3}
 801d06e:	b503      	push	{r0, r1, lr}
 801d070:	4601      	mov	r1, r0
 801d072:	ab03      	add	r3, sp, #12
 801d074:	4805      	ldr	r0, [pc, #20]	; (801d08c <fiprintf+0x20>)
 801d076:	f853 2b04 	ldr.w	r2, [r3], #4
 801d07a:	6800      	ldr	r0, [r0, #0]
 801d07c:	9301      	str	r3, [sp, #4]
 801d07e:	f7ff fc9d 	bl	801c9bc <_vfiprintf_r>
 801d082:	b002      	add	sp, #8
 801d084:	f85d eb04 	ldr.w	lr, [sp], #4
 801d088:	b003      	add	sp, #12
 801d08a:	4770      	bx	lr
 801d08c:	200004d4 	.word	0x200004d4

0801d090 <__swhatbuf_r>:
 801d090:	b570      	push	{r4, r5, r6, lr}
 801d092:	460c      	mov	r4, r1
 801d094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d098:	2900      	cmp	r1, #0
 801d09a:	b096      	sub	sp, #88	; 0x58
 801d09c:	4615      	mov	r5, r2
 801d09e:	461e      	mov	r6, r3
 801d0a0:	da0d      	bge.n	801d0be <__swhatbuf_r+0x2e>
 801d0a2:	89a3      	ldrh	r3, [r4, #12]
 801d0a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d0a8:	f04f 0100 	mov.w	r1, #0
 801d0ac:	bf0c      	ite	eq
 801d0ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d0b2:	2340      	movne	r3, #64	; 0x40
 801d0b4:	2000      	movs	r0, #0
 801d0b6:	6031      	str	r1, [r6, #0]
 801d0b8:	602b      	str	r3, [r5, #0]
 801d0ba:	b016      	add	sp, #88	; 0x58
 801d0bc:	bd70      	pop	{r4, r5, r6, pc}
 801d0be:	466a      	mov	r2, sp
 801d0c0:	f000 f848 	bl	801d154 <_fstat_r>
 801d0c4:	2800      	cmp	r0, #0
 801d0c6:	dbec      	blt.n	801d0a2 <__swhatbuf_r+0x12>
 801d0c8:	9901      	ldr	r1, [sp, #4]
 801d0ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d0ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d0d2:	4259      	negs	r1, r3
 801d0d4:	4159      	adcs	r1, r3
 801d0d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d0da:	e7eb      	b.n	801d0b4 <__swhatbuf_r+0x24>

0801d0dc <__smakebuf_r>:
 801d0dc:	898b      	ldrh	r3, [r1, #12]
 801d0de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d0e0:	079d      	lsls	r5, r3, #30
 801d0e2:	4606      	mov	r6, r0
 801d0e4:	460c      	mov	r4, r1
 801d0e6:	d507      	bpl.n	801d0f8 <__smakebuf_r+0x1c>
 801d0e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d0ec:	6023      	str	r3, [r4, #0]
 801d0ee:	6123      	str	r3, [r4, #16]
 801d0f0:	2301      	movs	r3, #1
 801d0f2:	6163      	str	r3, [r4, #20]
 801d0f4:	b002      	add	sp, #8
 801d0f6:	bd70      	pop	{r4, r5, r6, pc}
 801d0f8:	ab01      	add	r3, sp, #4
 801d0fa:	466a      	mov	r2, sp
 801d0fc:	f7ff ffc8 	bl	801d090 <__swhatbuf_r>
 801d100:	9900      	ldr	r1, [sp, #0]
 801d102:	4605      	mov	r5, r0
 801d104:	4630      	mov	r0, r6
 801d106:	f7fe fc89 	bl	801ba1c <_malloc_r>
 801d10a:	b948      	cbnz	r0, 801d120 <__smakebuf_r+0x44>
 801d10c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d110:	059a      	lsls	r2, r3, #22
 801d112:	d4ef      	bmi.n	801d0f4 <__smakebuf_r+0x18>
 801d114:	f023 0303 	bic.w	r3, r3, #3
 801d118:	f043 0302 	orr.w	r3, r3, #2
 801d11c:	81a3      	strh	r3, [r4, #12]
 801d11e:	e7e3      	b.n	801d0e8 <__smakebuf_r+0xc>
 801d120:	89a3      	ldrh	r3, [r4, #12]
 801d122:	6020      	str	r0, [r4, #0]
 801d124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d128:	81a3      	strh	r3, [r4, #12]
 801d12a:	9b00      	ldr	r3, [sp, #0]
 801d12c:	6163      	str	r3, [r4, #20]
 801d12e:	9b01      	ldr	r3, [sp, #4]
 801d130:	6120      	str	r0, [r4, #16]
 801d132:	b15b      	cbz	r3, 801d14c <__smakebuf_r+0x70>
 801d134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d138:	4630      	mov	r0, r6
 801d13a:	f000 f81d 	bl	801d178 <_isatty_r>
 801d13e:	b128      	cbz	r0, 801d14c <__smakebuf_r+0x70>
 801d140:	89a3      	ldrh	r3, [r4, #12]
 801d142:	f023 0303 	bic.w	r3, r3, #3
 801d146:	f043 0301 	orr.w	r3, r3, #1
 801d14a:	81a3      	strh	r3, [r4, #12]
 801d14c:	89a3      	ldrh	r3, [r4, #12]
 801d14e:	431d      	orrs	r5, r3
 801d150:	81a5      	strh	r5, [r4, #12]
 801d152:	e7cf      	b.n	801d0f4 <__smakebuf_r+0x18>

0801d154 <_fstat_r>:
 801d154:	b538      	push	{r3, r4, r5, lr}
 801d156:	4d07      	ldr	r5, [pc, #28]	; (801d174 <_fstat_r+0x20>)
 801d158:	2300      	movs	r3, #0
 801d15a:	4604      	mov	r4, r0
 801d15c:	4608      	mov	r0, r1
 801d15e:	4611      	mov	r1, r2
 801d160:	602b      	str	r3, [r5, #0]
 801d162:	f7e4 fb82 	bl	800186a <_fstat>
 801d166:	1c43      	adds	r3, r0, #1
 801d168:	d102      	bne.n	801d170 <_fstat_r+0x1c>
 801d16a:	682b      	ldr	r3, [r5, #0]
 801d16c:	b103      	cbz	r3, 801d170 <_fstat_r+0x1c>
 801d16e:	6023      	str	r3, [r4, #0]
 801d170:	bd38      	pop	{r3, r4, r5, pc}
 801d172:	bf00      	nop
 801d174:	20012bf8 	.word	0x20012bf8

0801d178 <_isatty_r>:
 801d178:	b538      	push	{r3, r4, r5, lr}
 801d17a:	4d06      	ldr	r5, [pc, #24]	; (801d194 <_isatty_r+0x1c>)
 801d17c:	2300      	movs	r3, #0
 801d17e:	4604      	mov	r4, r0
 801d180:	4608      	mov	r0, r1
 801d182:	602b      	str	r3, [r5, #0]
 801d184:	f7e4 fb81 	bl	800188a <_isatty>
 801d188:	1c43      	adds	r3, r0, #1
 801d18a:	d102      	bne.n	801d192 <_isatty_r+0x1a>
 801d18c:	682b      	ldr	r3, [r5, #0]
 801d18e:	b103      	cbz	r3, 801d192 <_isatty_r+0x1a>
 801d190:	6023      	str	r3, [r4, #0]
 801d192:	bd38      	pop	{r3, r4, r5, pc}
 801d194:	20012bf8 	.word	0x20012bf8

0801d198 <abort>:
 801d198:	b508      	push	{r3, lr}
 801d19a:	2006      	movs	r0, #6
 801d19c:	f000 f82c 	bl	801d1f8 <raise>
 801d1a0:	2001      	movs	r0, #1
 801d1a2:	f7e4 fb13 	bl	80017cc <_exit>

0801d1a6 <_raise_r>:
 801d1a6:	291f      	cmp	r1, #31
 801d1a8:	b538      	push	{r3, r4, r5, lr}
 801d1aa:	4604      	mov	r4, r0
 801d1ac:	460d      	mov	r5, r1
 801d1ae:	d904      	bls.n	801d1ba <_raise_r+0x14>
 801d1b0:	2316      	movs	r3, #22
 801d1b2:	6003      	str	r3, [r0, #0]
 801d1b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801d1b8:	bd38      	pop	{r3, r4, r5, pc}
 801d1ba:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d1bc:	b112      	cbz	r2, 801d1c4 <_raise_r+0x1e>
 801d1be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d1c2:	b94b      	cbnz	r3, 801d1d8 <_raise_r+0x32>
 801d1c4:	4620      	mov	r0, r4
 801d1c6:	f000 f831 	bl	801d22c <_getpid_r>
 801d1ca:	462a      	mov	r2, r5
 801d1cc:	4601      	mov	r1, r0
 801d1ce:	4620      	mov	r0, r4
 801d1d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d1d4:	f000 b818 	b.w	801d208 <_kill_r>
 801d1d8:	2b01      	cmp	r3, #1
 801d1da:	d00a      	beq.n	801d1f2 <_raise_r+0x4c>
 801d1dc:	1c59      	adds	r1, r3, #1
 801d1de:	d103      	bne.n	801d1e8 <_raise_r+0x42>
 801d1e0:	2316      	movs	r3, #22
 801d1e2:	6003      	str	r3, [r0, #0]
 801d1e4:	2001      	movs	r0, #1
 801d1e6:	e7e7      	b.n	801d1b8 <_raise_r+0x12>
 801d1e8:	2400      	movs	r4, #0
 801d1ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d1ee:	4628      	mov	r0, r5
 801d1f0:	4798      	blx	r3
 801d1f2:	2000      	movs	r0, #0
 801d1f4:	e7e0      	b.n	801d1b8 <_raise_r+0x12>
	...

0801d1f8 <raise>:
 801d1f8:	4b02      	ldr	r3, [pc, #8]	; (801d204 <raise+0xc>)
 801d1fa:	4601      	mov	r1, r0
 801d1fc:	6818      	ldr	r0, [r3, #0]
 801d1fe:	f7ff bfd2 	b.w	801d1a6 <_raise_r>
 801d202:	bf00      	nop
 801d204:	200004d4 	.word	0x200004d4

0801d208 <_kill_r>:
 801d208:	b538      	push	{r3, r4, r5, lr}
 801d20a:	4d07      	ldr	r5, [pc, #28]	; (801d228 <_kill_r+0x20>)
 801d20c:	2300      	movs	r3, #0
 801d20e:	4604      	mov	r4, r0
 801d210:	4608      	mov	r0, r1
 801d212:	4611      	mov	r1, r2
 801d214:	602b      	str	r3, [r5, #0]
 801d216:	f7e4 fac9 	bl	80017ac <_kill>
 801d21a:	1c43      	adds	r3, r0, #1
 801d21c:	d102      	bne.n	801d224 <_kill_r+0x1c>
 801d21e:	682b      	ldr	r3, [r5, #0]
 801d220:	b103      	cbz	r3, 801d224 <_kill_r+0x1c>
 801d222:	6023      	str	r3, [r4, #0]
 801d224:	bd38      	pop	{r3, r4, r5, pc}
 801d226:	bf00      	nop
 801d228:	20012bf8 	.word	0x20012bf8

0801d22c <_getpid_r>:
 801d22c:	f7e4 bab6 	b.w	800179c <_getpid>

0801d230 <_init>:
 801d230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d232:	bf00      	nop
 801d234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d236:	bc08      	pop	{r3}
 801d238:	469e      	mov	lr, r3
 801d23a:	4770      	bx	lr

0801d23c <_fini>:
 801d23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d23e:	bf00      	nop
 801d240:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d242:	bc08      	pop	{r3}
 801d244:	469e      	mov	lr, r3
 801d246:	4770      	bx	lr
