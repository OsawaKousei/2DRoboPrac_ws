
2DRoboPrac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c4e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000153c  0801c6e8  0801c6e8  0002c6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dc24  0801dc24  000303e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801dc24  0801dc24  0002dc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dc2c  0801dc2c  000303e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0801dc2c  0801dc2c  0002dc2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dc3c  0801dc3c  0002dc3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e0  20000000  0801dc40  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011298  200003e0  0801e020  000303e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20011678  0801e020  00031678  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000076  00000000  00000000  0003040e  2**0
                  CONTENTS, READONLY
 13 .debug_info   000272e4  00000000  00000000  00030484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055db  00000000  00000000  00057768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca8  00000000  00000000  0005cd48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000160c  00000000  00000000  0005e9f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002fad0  00000000  00000000  0005fffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000259a6  00000000  00000000  0008facc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001152f1  00000000  00000000  000b5472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000085e4  00000000  00000000  001ca764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001d2d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200003e0 	.word	0x200003e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801c6d0 	.word	0x0801c6d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200003e4 	.word	0x200003e4
 800023c:	0801c6d0 	.word	0x0801c6d0

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800032e:	f000 b9bb 	b.w	80006a8 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80006b8:	f00a fe52 	bl	800b360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80006bc:	4b5b      	ldr	r3, [pc, #364]	; (800082c <pvPortMallocMicroROS+0x180>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d101      	bne.n	80006c8 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80006c4:	f000 f98a 	bl	80009dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80006c8:	4b59      	ldr	r3, [pc, #356]	; (8000830 <pvPortMallocMicroROS+0x184>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	f040 8092 	bne.w	80007fa <pvPortMallocMicroROS+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d01f      	beq.n	800071c <pvPortMallocMicroROS+0x70>
			{
				xWantedSize += xHeapStructSize;
 80006dc:	2208      	movs	r2, #8
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	4413      	add	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d016      	beq.n	800071c <pvPortMallocMicroROS+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f023 0307 	bic.w	r3, r3, #7
 80006f4:	3308      	adds	r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d00c      	beq.n	800071c <pvPortMallocMicroROS+0x70>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000706:	b672      	cpsid	i
 8000708:	f383 8811 	msr	BASEPRI, r3
 800070c:	f3bf 8f6f 	isb	sy
 8000710:	f3bf 8f4f 	dsb	sy
 8000714:	b662      	cpsie	i
 8000716:	617b      	str	r3, [r7, #20]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000718:	bf00      	nop
 800071a:	e7fe      	b.n	800071a <pvPortMallocMicroROS+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d06b      	beq.n	80007fa <pvPortMallocMicroROS+0x14e>
 8000722:	4b44      	ldr	r3, [pc, #272]	; (8000834 <pvPortMallocMicroROS+0x188>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	429a      	cmp	r2, r3
 800072a:	d866      	bhi.n	80007fa <pvPortMallocMicroROS+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800072c:	4b42      	ldr	r3, [pc, #264]	; (8000838 <pvPortMallocMicroROS+0x18c>)
 800072e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000730:	4b41      	ldr	r3, [pc, #260]	; (8000838 <pvPortMallocMicroROS+0x18c>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000736:	e004      	b.n	8000742 <pvPortMallocMicroROS+0x96>
				{
					pxPreviousBlock = pxBlock;
 8000738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800073c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	d903      	bls.n	8000754 <pvPortMallocMicroROS+0xa8>
 800074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f1      	bne.n	8000738 <pvPortMallocMicroROS+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000754:	4b35      	ldr	r3, [pc, #212]	; (800082c <pvPortMallocMicroROS+0x180>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800075a:	429a      	cmp	r2, r3
 800075c:	d04d      	beq.n	80007fa <pvPortMallocMicroROS+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800075e:	6a3b      	ldr	r3, [r7, #32]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2208      	movs	r2, #8
 8000764:	4413      	add	r3, r2
 8000766:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	6a3b      	ldr	r3, [r7, #32]
 800076e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000772:	685a      	ldr	r2, [r3, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1ad2      	subs	r2, r2, r3
 8000778:	2308      	movs	r3, #8
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	429a      	cmp	r2, r3
 800077e:	d921      	bls.n	80007c4 <pvPortMallocMicroROS+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000788:	69bb      	ldr	r3, [r7, #24]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	2b00      	cmp	r3, #0
 8000790:	d00c      	beq.n	80007ac <pvPortMallocMicroROS+0x100>
	__asm volatile
 8000792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000796:	b672      	cpsid	i
 8000798:	f383 8811 	msr	BASEPRI, r3
 800079c:	f3bf 8f6f 	isb	sy
 80007a0:	f3bf 8f4f 	dsb	sy
 80007a4:	b662      	cpsie	i
 80007a6:	613b      	str	r3, [r7, #16]
}
 80007a8:	bf00      	nop
 80007aa:	e7fe      	b.n	80007aa <pvPortMallocMicroROS+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80007ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	1ad2      	subs	r2, r2, r3
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80007b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ba:	687a      	ldr	r2, [r7, #4]
 80007bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80007be:	69b8      	ldr	r0, [r7, #24]
 80007c0:	f000 f96e 	bl	8000aa0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	4a19      	ldr	r2, [pc, #100]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80007d2:	4b18      	ldr	r3, [pc, #96]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007d4:	681a      	ldr	r2, [r3, #0]
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <pvPortMallocMicroROS+0x190>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	429a      	cmp	r2, r3
 80007dc:	d203      	bcs.n	80007e6 <pvPortMallocMicroROS+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80007de:	4b15      	ldr	r3, [pc, #84]	; (8000834 <pvPortMallocMicroROS+0x188>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a16      	ldr	r2, [pc, #88]	; (800083c <pvPortMallocMicroROS+0x190>)
 80007e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80007e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e8:	685a      	ldr	r2, [r3, #4]
 80007ea:	4b11      	ldr	r3, [pc, #68]	; (8000830 <pvPortMallocMicroROS+0x184>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	431a      	orrs	r2, r3
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80007f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80007fa:	f00a fdbf 	bl	800b37c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	2b00      	cmp	r3, #0
 8000806:	d00c      	beq.n	8000822 <pvPortMallocMicroROS+0x176>
	__asm volatile
 8000808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800080c:	b672      	cpsid	i
 800080e:	f383 8811 	msr	BASEPRI, r3
 8000812:	f3bf 8f6f 	isb	sy
 8000816:	f3bf 8f4f 	dsb	sy
 800081a:	b662      	cpsie	i
 800081c:	60fb      	str	r3, [r7, #12]
}
 800081e:	bf00      	nop
 8000820:	e7fe      	b.n	8000820 <pvPortMallocMicroROS+0x174>
	return pvReturn;
 8000822:	69fb      	ldr	r3, [r7, #28]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3728      	adds	r7, #40	; 0x28
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	20004004 	.word	0x20004004
 8000830:	20004010 	.word	0x20004010
 8000834:	20004008 	.word	0x20004008
 8000838:	20003ffc 	.word	0x20003ffc
 800083c:	2000400c 	.word	0x2000400c

08000840 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d04c      	beq.n	80008ec <vPortFreeMicroROS+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000852:	2308      	movs	r3, #8
 8000854:	425b      	negs	r3, r3
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	685a      	ldr	r2, [r3, #4]
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4013      	ands	r3, r2
 800086a:	2b00      	cmp	r3, #0
 800086c:	d10c      	bne.n	8000888 <vPortFreeMicroROS+0x48>
	__asm volatile
 800086e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000872:	b672      	cpsid	i
 8000874:	f383 8811 	msr	BASEPRI, r3
 8000878:	f3bf 8f6f 	isb	sy
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	b662      	cpsie	i
 8000882:	60fb      	str	r3, [r7, #12]
}
 8000884:	bf00      	nop
 8000886:	e7fe      	b.n	8000886 <vPortFreeMicroROS+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000888:	693b      	ldr	r3, [r7, #16]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d00c      	beq.n	80008aa <vPortFreeMicroROS+0x6a>
	__asm volatile
 8000890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000894:	b672      	cpsid	i
 8000896:	f383 8811 	msr	BASEPRI, r3
 800089a:	f3bf 8f6f 	isb	sy
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	b662      	cpsie	i
 80008a4:	60bb      	str	r3, [r7, #8]
}
 80008a6:	bf00      	nop
 80008a8:	e7fe      	b.n	80008a8 <vPortFreeMicroROS+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80008aa:	693b      	ldr	r3, [r7, #16]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4013      	ands	r3, r2
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d019      	beq.n	80008ec <vPortFreeMicroROS+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d115      	bne.n	80008ec <vPortFreeMicroROS+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80008c0:	693b      	ldr	r3, [r7, #16]
 80008c2:	685a      	ldr	r2, [r3, #4]
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <vPortFreeMicroROS+0xb4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	43db      	mvns	r3, r3
 80008ca:	401a      	ands	r2, r3
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80008d0:	f00a fd46 	bl	800b360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <vPortFreeMicroROS+0xb8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <vPortFreeMicroROS+0xb8>)
 80008e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80008e2:	6938      	ldr	r0, [r7, #16]
 80008e4:	f000 f8dc 	bl	8000aa0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80008e8:	f00a fd48 	bl	800b37c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008ec:	bf00      	nop
 80008ee:	3718      	adds	r7, #24
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20004010 	.word	0x20004010
 80008f8:	20004008 	.word	0x20004008

080008fc <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80008fc:	b480      	push	{r7}
 80008fe:	b087      	sub	sp, #28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000908:	2308      	movs	r3, #8
 800090a:	425b      	negs	r3, r3
 800090c:	697a      	ldr	r2, [r7, #20]
 800090e:	4413      	add	r3, r2
 8000910:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	685a      	ldr	r2, [r3, #4]
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <getBlockSize+0x38>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	43db      	mvns	r3, r3
 8000920:	4013      	ands	r3, r2
 8000922:	60fb      	str	r3, [r7, #12]

	return count;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	371c      	adds	r7, #28
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	20004010 	.word	0x20004010

08000938 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000942:	f00a fd0d 	bl	800b360 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f7ff feb0 	bl	80006ac <pvPortMallocMicroROS>
 800094c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d017      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d014      	beq.n	8000984 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff ffce 	bl	80008fc <getBlockSize>
 8000960:	4603      	mov	r3, r0
 8000962:	2208      	movs	r2, #8
 8000964:	1a9b      	subs	r3, r3, r2
 8000966:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	429a      	cmp	r2, r3
 800096e:	d201      	bcs.n	8000974 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000974:	68fa      	ldr	r2, [r7, #12]
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	68b8      	ldr	r0, [r7, #8]
 800097a:	f01b f860 	bl	801ba3e <memcpy>

		vPortFreeMicroROS(pv);
 800097e:	6878      	ldr	r0, [r7, #4]
 8000980:	f7ff ff5e 	bl	8000840 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000984:	f00a fcfa 	bl	800b37c <xTaskResumeAll>

	return newmem;
 8000988:	68bb      	ldr	r3, [r7, #8]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b086      	sub	sp, #24
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800099c:	f00a fce0 	bl	800b360 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 80009aa:	6978      	ldr	r0, [r7, #20]
 80009ac:	f7ff fe7e 	bl	80006ac <pvPortMallocMicroROS>
 80009b0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	613b      	str	r3, [r7, #16]

  	while(count--)
 80009b6:	e004      	b.n	80009c2 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	613a      	str	r2, [r7, #16]
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  	while(count--)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	1e5a      	subs	r2, r3, #1
 80009c6:	617a      	str	r2, [r7, #20]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1f5      	bne.n	80009b8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 80009cc:	f00a fcd6 	bl	800b37c <xTaskResumeAll>
  	return mem;
 80009d0:	68fb      	ldr	r3, [r7, #12]
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80009e2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80009e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <prvHeapInit+0xac>)
 80009ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00c      	beq.n	8000a10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3307      	adds	r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	f023 0307 	bic.w	r3, r3, #7
 8000a02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000a04:	68ba      	ldr	r2, [r7, #8]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <prvHeapInit+0xac>)
 8000a0c:	4413      	add	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <prvHeapInit+0xb0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <prvHeapInit+0xb0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000a28:	2208      	movs	r2, #8
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	f023 0307 	bic.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <prvHeapInit+0xb4>)
 8000a3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <prvHeapInit+0xb4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <prvHeapInit+0xb4>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	68fa      	ldr	r2, [r7, #12]
 8000a56:	1ad2      	subs	r2, r2, r3
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <prvHeapInit+0xb4>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <prvHeapInit+0xb8>)
 8000a6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	4a09      	ldr	r2, [pc, #36]	; (8000a98 <prvHeapInit+0xbc>)
 8000a72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <prvHeapInit+0xc0>)
 8000a76:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000a7a:	601a      	str	r2, [r3, #0]
}
 8000a7c:	bf00      	nop
 8000a7e:	3714      	adds	r7, #20
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	200003fc 	.word	0x200003fc
 8000a8c:	20003ffc 	.word	0x20003ffc
 8000a90:	20004004 	.word	0x20004004
 8000a94:	2000400c 	.word	0x2000400c
 8000a98:	20004008 	.word	0x20004008
 8000a9c:	20004010 	.word	0x20004010

08000aa0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <prvInsertBlockIntoFreeList+0xac>)
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	e002      	b.n	8000ab4 <prvInsertBlockIntoFreeList+0x14>
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	429a      	cmp	r2, r3
 8000abc:	d8f7      	bhi.n	8000aae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	4413      	add	r3, r2
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d108      	bne.n	8000ae2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	685a      	ldr	r2, [r3, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	441a      	add	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	441a      	add	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	d118      	bne.n	8000b28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	4b15      	ldr	r3, [pc, #84]	; (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d00d      	beq.n	8000b1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685a      	ldr	r2, [r3, #4]
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	441a      	add	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e008      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <prvInsertBlockIntoFreeList+0xb0>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	e003      	b.n	8000b30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000b30:	68fa      	ldr	r2, [r7, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	d002      	beq.n	8000b3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20003ffc 	.word	0x20003ffc
 8000b50:	20004004 	.word	0x20004004

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	4b10      	ldr	r3, [pc, #64]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	4a0f      	ldr	r2, [pc, #60]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b64:	6313      	str	r3, [r2, #48]	; 0x30
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <MX_DMA_Init+0x48>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2105      	movs	r1, #5
 8000b76:	200c      	movs	r0, #12
 8000b78:	f001 fb4a 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b7c:	200c      	movs	r0, #12
 8000b7e:	f001 fb63 	bl	8002248 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2105      	movs	r1, #5
 8000b86:	200e      	movs	r0, #14
 8000b88:	f001 fb42 	bl	8002210 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000b8c:	200e      	movs	r0, #14
 8000b8e:	f001 fb5b 	bl	8002248 <HAL_NVIC_EnableIRQ>

}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	40023800 	.word	0x40023800

08000ba0 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bae:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000bb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bb4:	4904      	ldr	r1, [pc, #16]	; (8000bc8 <cubemx_transport_open+0x28>)
 8000bb6:	68f8      	ldr	r0, [r7, #12]
 8000bb8:	f005 fd16 	bl	80065e8 <HAL_UART_Receive_DMA>
    return true;
 8000bbc:	2301      	movs	r3, #1
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20004014 	.word	0x20004014

08000bcc <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000bda:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8000bdc:	68f8      	ldr	r0, [r7, #12]
 8000bde:	f005 fd47 	bl	8006670 <HAL_UART_DMAStop>
    return true;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
 8000bf8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c00:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c06:	2b20      	cmp	r3, #32
 8000c08:	d11a      	bne.n	8000c40 <cubemx_transport_write+0x54>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	68b9      	ldr	r1, [r7, #8]
 8000c12:	6978      	ldr	r0, [r7, #20]
 8000c14:	f005 fc6c 	bl	80064f0 <HAL_UART_Transmit_DMA>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c1c:	e002      	b.n	8000c24 <cubemx_transport_write+0x38>
            osDelay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f009 fb34 	bl	800a28c <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8000c24:	7cfb      	ldrb	r3, [r7, #19]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d103      	bne.n	8000c32 <cubemx_transport_write+0x46>
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8000c2e:	2b20      	cmp	r3, #32
 8000c30:	d1f5      	bne.n	8000c1e <cubemx_transport_write+0x32>
        }

        return (ret == HAL_OK) ? len : 0;
 8000c32:	7cfb      	ldrb	r3, [r7, #19]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d101      	bne.n	8000c3c <cubemx_transport_write+0x50>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	e002      	b.n	8000c42 <cubemx_transport_write+0x56>
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	e000      	b.n	8000c42 <cubemx_transport_write+0x56>
    }else{
        return 0;
 8000c40:	2300      	movs	r3, #0
    }
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8000c60:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c66:	b672      	cpsid	i
}
 8000c68:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8000c76:	4a1c      	ldr	r2, [pc, #112]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000c78:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000c7a:	b662      	cpsie	i
}
 8000c7c:	bf00      	nop
        __enable_irq();
        ms_used++;
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3301      	adds	r3, #1
 8000c82:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f009 fb01 	bl	800a28c <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8000c8a:	4b18      	ldr	r3, [pc, #96]	; (8000cec <cubemx_transport_read+0xa0>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d103      	bne.n	8000c9e <cubemx_transport_read+0x52>
 8000c96:	69fa      	ldr	r2, [r7, #28]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dbe3      	blt.n	8000c66 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000ca2:	e011      	b.n	8000cc8 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <cubemx_transport_read+0xa0>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	440b      	add	r3, r1
 8000cae:	4910      	ldr	r1, [pc, #64]	; (8000cf0 <cubemx_transport_read+0xa4>)
 8000cb0:	5c8a      	ldrb	r2, [r1, r2]
 8000cb2:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8000cb4:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cc0:	6013      	str	r3, [r2, #0]
        wrote++;
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <cubemx_transport_read+0xa0>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <cubemx_transport_read+0x9c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d003      	beq.n	8000cdc <cubemx_transport_read+0x90>
 8000cd4:	69ba      	ldr	r2, [r7, #24]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3e3      	bcc.n	8000ca4 <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20004818 	.word	0x20004818
 8000cec:	20004814 	.word	0x20004814
 8000cf0:	20004014 	.word	0x20004014

08000cf4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <MX_FREERTOS_Init+0x18>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <MX_FREERTOS_Init+0x1c>)
 8000cfe:	f009 fa1f 	bl	800a140 <osThreadNew>
 8000d02:	4603      	mov	r3, r0
 8000d04:	4a03      	ldr	r2, [pc, #12]	; (8000d14 <MX_FREERTOS_Init+0x20>)
 8000d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000d08:	bf00      	nop
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	0801c830 	.word	0x0801c830
 8000d10:	08000fd1 	.word	0x08000fd1
 8000d14:	20004880 	.word	0x20004880

08000d18 <duty_limmiter>:
  * @param  argument: Not used
  * @retval None
  */
//duty制限
double limit = 150.0;
double duty_limmiter(double input){
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	ed87 0b00 	vstr	d0, [r7]
	if(input > limit){
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <duty_limmiter+0x48>)
 8000d24:	ed93 7b00 	vldr	d7, [r3]
 8000d28:	ed97 6b00 	vldr	d6, [r7]
 8000d2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d34:	dd04      	ble.n	8000d40 <duty_limmiter+0x28>
		input = 150.0;
 8000d36:	a308      	add	r3, pc, #32	; (adr r3, 8000d58 <duty_limmiter+0x40>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	e9c7 2300 	strd	r2, r3, [r7]
	}
	return input;
 8000d40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d44:	ec43 2b17 	vmov	d7, r2, r3
}
 8000d48:	eeb0 0b47 	vmov.f64	d0, d7
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	00000000 	.word	0x00000000
 8000d5c:	4062c000 	.word	0x4062c000
 8000d60:	20000000 	.word	0x20000000
 8000d64:	00000000 	.word	0x00000000

08000d68 <run_motor>:
//駆動用関数
void run_motor(double m1,double m2){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	ed87 0b02 	vstr	d0, [r7, #8]
 8000d72:	ed87 1b00 	vstr	d1, [r7]

	//初期化
	HAL_GPIO_WritePin(GPIOB, M11_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d7c:	485e      	ldr	r0, [pc, #376]	; (8000ef8 <run_motor+0x190>)
 8000d7e:	f002 f833 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M12_Pin, GPIO_PIN_RESET);
 8000d82:	2200      	movs	r2, #0
 8000d84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d88:	485b      	ldr	r0, [pc, #364]	; (8000ef8 <run_motor+0x190>)
 8000d8a:	f002 f82d 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M21_Pin, GPIO_PIN_RESET);
 8000d8e:	2200      	movs	r2, #0
 8000d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d94:	4858      	ldr	r0, [pc, #352]	; (8000ef8 <run_motor+0x190>)
 8000d96:	f002 f827 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M22_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da0:	4855      	ldr	r0, [pc, #340]	; (8000ef8 <run_motor+0x190>)
 8000da2:	f002 f821 	bl	8002de8 <HAL_GPIO_WritePin>
	//入力値の大きさでdutyを変えるコードにすべき



	//前進・後進を設定
	if(m1 > 0){
 8000da6:	ed97 7b02 	vldr	d7, [r7, #8]
 8000daa:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db2:	dd1f      	ble.n	8000df4 <run_motor+0x8c>
		HAL_GPIO_WritePin(GPIOB, M11_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dba:	484f      	ldr	r0, [pc, #316]	; (8000ef8 <run_motor+0x190>)
 8000dbc:	f002 f814 	bl	8002de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M12_Pin, GPIO_PIN_SET);
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc6:	484c      	ldr	r0, [pc, #304]	; (8000ef8 <run_motor+0x190>)
 8000dc8:	f002 f80e 	bl	8002de8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_limmiter(m1*160.0));
 8000dcc:	ed97 7b02 	vldr	d7, [r7, #8]
 8000dd0:	ed9f 6b47 	vldr	d6, [pc, #284]	; 8000ef0 <run_motor+0x188>
 8000dd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000dd8:	eeb0 0b47 	vmov.f64	d0, d7
 8000ddc:	f7ff ff9c 	bl	8000d18 <duty_limmiter>
 8000de0:	eeb0 7b40 	vmov.f64	d7, d0
 8000de4:	4b45      	ldr	r3, [pc, #276]	; (8000efc <run_motor+0x194>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dec:	ee17 2a90 	vmov	r2, s15
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
 8000df2:	e027      	b.n	8000e44 <run_motor+0xdc>
	}else if(m1 < 0){
 8000df4:	ed97 7b02 	vldr	d7, [r7, #8]
 8000df8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	d520      	bpl.n	8000e44 <run_motor+0xdc>
		HAL_GPIO_WritePin(GPIOB, M11_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e08:	483b      	ldr	r0, [pc, #236]	; (8000ef8 <run_motor+0x190>)
 8000e0a:	f001 ffed 	bl	8002de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M12_Pin, GPIO_PIN_RESET);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e14:	4838      	ldr	r0, [pc, #224]	; (8000ef8 <run_motor+0x190>)
 8000e16:	f001 ffe7 	bl	8002de8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_limmiter(m1*160.0*-1.0));
 8000e1a:	ed97 7b02 	vldr	d7, [r7, #8]
 8000e1e:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8000ef0 <run_motor+0x188>
 8000e22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e26:	eeb1 7b47 	vneg.f64	d7, d7
 8000e2a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e2e:	f7ff ff73 	bl	8000d18 <duty_limmiter>
 8000e32:	eeb0 7b40 	vmov.f64	d7, d0
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <run_motor+0x194>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e3e:	ee17 2a90 	vmov	r2, s15
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34
	}

	if(m2 > 0){
 8000e44:	ed97 7b00 	vldr	d7, [r7]
 8000e48:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e50:	dd1f      	ble.n	8000e92 <run_motor+0x12a>
		HAL_GPIO_WritePin(GPIOB, M21_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	4827      	ldr	r0, [pc, #156]	; (8000ef8 <run_motor+0x190>)
 8000e5a:	f001 ffc5 	bl	8002de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M22_Pin, GPIO_PIN_SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	4824      	ldr	r0, [pc, #144]	; (8000ef8 <run_motor+0x190>)
 8000e66:	f001 ffbf 	bl	8002de8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_limmiter(m2*160.0));
 8000e6a:	ed97 7b00 	vldr	d7, [r7]
 8000e6e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8000ef0 <run_motor+0x188>
 8000e72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e76:	eeb0 0b47 	vmov.f64	d0, d7
 8000e7a:	f7ff ff4d 	bl	8000d18 <duty_limmiter>
 8000e7e:	eeb0 7b40 	vmov.f64	d7, d0
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <run_motor+0x194>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000e8a:	ee17 2a90 	vmov	r2, s15
 8000e8e:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_GPIO_WritePin(GPIOB, M21_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, M22_Pin, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_limmiter(m2*160.0*-1.0));
	}

}
 8000e90:	e028      	b.n	8000ee4 <run_motor+0x17c>
	}else if(m2 < 0){
 8000e92:	ed97 7b00 	vldr	d7, [r7]
 8000e96:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9e:	d400      	bmi.n	8000ea2 <run_motor+0x13a>
}
 8000ea0:	e020      	b.n	8000ee4 <run_motor+0x17c>
		HAL_GPIO_WritePin(GPIOB, M21_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ea8:	4813      	ldr	r0, [pc, #76]	; (8000ef8 <run_motor+0x190>)
 8000eaa:	f001 ff9d 	bl	8002de8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, M22_Pin, GPIO_PIN_RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	4810      	ldr	r0, [pc, #64]	; (8000ef8 <run_motor+0x190>)
 8000eb6:	f001 ff97 	bl	8002de8 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty_limmiter(m2*160.0*-1.0));
 8000eba:	ed97 7b00 	vldr	d7, [r7]
 8000ebe:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000ef0 <run_motor+0x188>
 8000ec2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ec6:	eeb1 7b47 	vneg.f64	d7, d7
 8000eca:	eeb0 0b47 	vmov.f64	d0, d7
 8000ece:	f7ff ff23 	bl	8000d18 <duty_limmiter>
 8000ed2:	eeb0 7b40 	vmov.f64	d7, d0
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <run_motor+0x194>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ede:	ee17 2a90 	vmov	r2, s15
 8000ee2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	f3af 8000 	nop.w
 8000ef0:	00000000 	.word	0x00000000
 8000ef4:	40640000 	.word	0x40640000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	2000781c 	.word	0x2000781c

08000f00 <service_callback>:
// サービスのコールバック関数を定義
void service_callback(const void *request, void *response)
{
 8000f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f04:	b084      	sub	sp, #16
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
	// リクエストとレスポンスを適切な型にキャスト
	custom_test_msgs__srv__AddThreeInts_Request *_req = (custom_test_msgs__srv__AddThreeInts_Request *)request;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	60fb      	str	r3, [r7, #12]
	custom_test_msgs__srv__AddThreeInts_Response *_res = (custom_test_msgs__srv__AddThreeInts_Response *)response;
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	60bb      	str	r3, [r7, #8]
	// 1秒スリープ（重い処理の代わり）
	osDelay(1000);
 8000f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f18:	f009 f9b8 	bl	800a28c <osDelay>
	// レスポンスに合計値をセット
	_res->sum = _req->a + _req->b + _req->c;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f28:	1884      	adds	r4, r0, r2
 8000f2a:	eb41 0503 	adc.w	r5, r1, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000f34:	eb14 0802 	adds.w	r8, r4, r2
 8000f38:	eb45 0903 	adc.w	r9, r5, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	e9c3 8900 	strd	r8, r9, [r3]
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000f4c <subscription_callback>:

void subscription_callback(const void * msgin)
{
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	 // Cast received message to used type
	  const drive_msgs__msg__DiffDrive * sub = (const drive_msgs__msg__DiffDrive *)msgin;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24

	  char hearing[] = "I'm hearing from f7";
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <subscription_callback+0x70>)
 8000f5a:	f107 040c 	add.w	r4, r7, #12
 8000f5e:	461d      	mov	r5, r3
 8000f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f64:	682b      	ldr	r3, [r5, #0]
 8000f66:	6023      	str	r3, [r4, #0]
	  rosidl_runtime_c__String__assignn(&pub.data, hearing, sizeof(hearing));
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2214      	movs	r2, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4813      	ldr	r0, [pc, #76]	; (8000fc0 <subscription_callback+0x74>)
 8000f72:	f011 fddd 	bl	8012b30 <rosidl_runtime_c__String__assignn>

	  //データのpublish
	  RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8000f76:	2200      	movs	r2, #0
 8000f78:	4911      	ldr	r1, [pc, #68]	; (8000fc0 <subscription_callback+0x74>)
 8000f7a:	4812      	ldr	r0, [pc, #72]	; (8000fc4 <subscription_callback+0x78>)
 8000f7c:	f00e f9f4 	bl	800f368 <rcl_publish>
 8000f80:	6238      	str	r0, [r7, #32]
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d004      	beq.n	8000f92 <subscription_callback+0x46>
 8000f88:	6a3a      	ldr	r2, [r7, #32]
 8000f8a:	21d9      	movs	r1, #217	; 0xd9
 8000f8c:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <subscription_callback+0x7c>)
 8000f8e:	f01a fa01 	bl	801b394 <iprintf>

	  run_motor(sub->m1,sub->m2);
 8000f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f94:	ed93 7b04 	vldr	d7, [r3, #16]
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	ed93 6b06 	vldr	d6, [r3, #24]
 8000f9e:	eeb0 1b46 	vmov.f64	d1, d6
 8000fa2:	eeb0 0b47 	vmov.f64	d0, d7
 8000fa6:	f7ff fedf 	bl	8000d68 <run_motor>

	  HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <subscription_callback+0x80>)
 8000fb0:	f001 ff1a 	bl	8002de8 <HAL_GPIO_WritePin>
}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	0801c720 	.word	0x0801c720
 8000fc0:	20004870 	.word	0x20004870
 8000fc4:	2000487c 	.word	0x2000487c
 8000fc8:	0801c6f4 	.word	0x0801c6f4
 8000fcc:	40020400 	.word	0x40020400

08000fd0 <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b0ec      	sub	sp, #432	; 0x1b0
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8000fda:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8000fde:	6018      	str	r0, [r3, #0]
  /* init code for USB_DEVICE */
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN StartDefaultTask */
  // micro-ROSの初期化
  	printf("start default task");
 8000fe0:	48bd      	ldr	r0, [pc, #756]	; (80012d8 <StartDefaultTask+0x308>)
 8000fe2:	f01a f9d7 	bl	801b394 <iprintf>
  	rmw_uros_set_custom_transport(
 8000fe6:	4bbd      	ldr	r3, [pc, #756]	; (80012dc <StartDefaultTask+0x30c>)
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	4bbd      	ldr	r3, [pc, #756]	; (80012e0 <StartDefaultTask+0x310>)
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	4bbd      	ldr	r3, [pc, #756]	; (80012e4 <StartDefaultTask+0x314>)
 8000ff0:	4abd      	ldr	r2, [pc, #756]	; (80012e8 <StartDefaultTask+0x318>)
 8000ff2:	49be      	ldr	r1, [pc, #760]	; (80012ec <StartDefaultTask+0x31c>)
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f00f ff71 	bl	8010edc <rmw_uros_set_custom_transport>
  	    cubemx_transport_open,
  	    cubemx_transport_close,
  	    cubemx_transport_write,
  	    cubemx_transport_read);

  	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000ffa:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00f fc02 	bl	8010808 <rcutils_get_zero_initialized_allocator>
  	freeRTOS_allocator.allocate = microros_allocate;
 8001004:	4bba      	ldr	r3, [pc, #744]	; (80012f0 <StartDefaultTask+0x320>)
 8001006:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  	freeRTOS_allocator.deallocate = microros_deallocate;
 800100a:	4bba      	ldr	r3, [pc, #744]	; (80012f4 <StartDefaultTask+0x324>)
 800100c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  	freeRTOS_allocator.reallocate = microros_reallocate;
 8001010:	4bb9      	ldr	r3, [pc, #740]	; (80012f8 <StartDefaultTask+0x328>)
 8001012:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001016:	4bb9      	ldr	r3, [pc, #740]	; (80012fc <StartDefaultTask+0x32c>)
 8001018:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 800101c:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8001020:	4618      	mov	r0, r3
 8001022:	f00f fbff 	bl	8010824 <rcutils_set_default_allocator>
 8001026:	4603      	mov	r3, r0
 8001028:	f083 0301 	eor.w	r3, r3, #1
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <StartDefaultTask+0x6a>
  		printf("Error on default allocators (line %d)\n", __LINE__);
 8001032:	21f5      	movs	r1, #245	; 0xf5
 8001034:	48b2      	ldr	r0, [pc, #712]	; (8001300 <StartDefaultTask+0x330>)
 8001036:	f01a f9ad 	bl	801b394 <iprintf>
  	}

      // ここからサービスサーバの実装
  	setvbuf(stdout, NULL, _IONBF, BUFSIZ);
 800103a:	4bb2      	ldr	r3, [pc, #712]	; (8001304 <StartDefaultTask+0x334>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6898      	ldr	r0, [r3, #8]
 8001040:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001044:	2202      	movs	r2, #2
 8001046:	2100      	movs	r1, #0
 8001048:	f01a fa12 	bl	801b470 <setvbuf>
  	rcl_init_options_t init_options = rcl_get_zero_initialized_init_options();
 800104c:	f00d fe0c 	bl	800ec68 <rcl_get_zero_initialized_init_options>
 8001050:	4603      	mov	r3, r0
 8001052:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  	rcl_allocator_t allocator = rcl_get_default_allocator();
 8001056:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800105a:	4618      	mov	r0, r3
 800105c:	f00f fc00 	bl	8010860 <rcutils_get_default_allocator>
  	rclc_support_t support;
  	rcl_node_t node = rcl_get_zero_initialized_node();
 8001060:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001064:	4618      	mov	r0, r3
 8001066:	f00d ff07 	bl	800ee78 <rcl_get_zero_initialized_node>
  	rcl_service_t service = rcl_get_zero_initialized_service();
 800106a:	f00e f9c3 	bl	800f3f4 <rcl_get_zero_initialized_service>
 800106e:	4603      	mov	r3, r0
 8001070:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  	publisher = rcl_get_zero_initialized_publisher();
 8001074:	f00e f8aa 	bl	800f1cc <rcl_get_zero_initialized_publisher>
 8001078:	4603      	mov	r3, r0
 800107a:	4aa3      	ldr	r2, [pc, #652]	; (8001308 <StartDefaultTask+0x338>)
 800107c:	6013      	str	r3, [r2, #0]
  	rcl_subscription_t subscriber = rcl_get_zero_initialized_subscription();
 800107e:	f00e fadd 	bl	800f63c <rcl_get_zero_initialized_subscription>
 8001082:	4603      	mov	r3, r0
 8001084:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  	rclc_executor_t executor = rclc_executor_get_zero_initialized_executor();
 8001088:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800108c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001090:	4618      	mov	r0, r3
 8001092:	f00e ff63 	bl	800ff5c <rclc_executor_get_zero_initialized_executor>
  	rcl_node_options_t node_ops = rcl_node_get_default_options();
 8001096:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 800109a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800109e:	4618      	mov	r0, r3
 80010a0:	f00e f864 	bl	800f16c <rcl_node_get_default_options>

  	RCCHECK(rcl_init_options_init(&init_options, allocator));
 80010a4:	f507 74b4 	add.w	r4, r7, #360	; 0x168
 80010a8:	466a      	mov	r2, sp
 80010aa:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80010ae:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010b2:	e882 0003 	stmia.w	r2, {r0, r1}
 80010b6:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80010ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010bc:	4620      	mov	r0, r4
 80010be:	f00d fdd5 	bl	800ec6c <rcl_init_options_init>
 80010c2:	f8c7 01a4 	str.w	r0, [r7, #420]	; 0x1a4
 80010c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d006      	beq.n	80010dc <StartDefaultTask+0x10c>
 80010ce:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80010d2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80010d6:	488d      	ldr	r0, [pc, #564]	; (800130c <StartDefaultTask+0x33c>)
 80010d8:	f01a f95c 	bl	801b394 <iprintf>
      // ROS_DOMAIN_IDの設定。
  	RCCHECK(rcl_init_options_set_domain_id(&init_options, 0));
 80010dc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f00d fec0 	bl	800ee68 <rcl_init_options_set_domain_id>
 80010e8:	f8c7 01a0 	str.w	r0, [r7, #416]	; 0x1a0
 80010ec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d006      	beq.n	8001102 <StartDefaultTask+0x132>
 80010f4:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 80010f8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80010fc:	4883      	ldr	r0, [pc, #524]	; (800130c <StartDefaultTask+0x33c>)
 80010fe:	f01a f949 	bl	801b394 <iprintf>
  	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001102:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001106:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800110a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800110e:	9300      	str	r3, [sp, #0]
 8001110:	4613      	mov	r3, r2
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	f00f fa4f 	bl	80105b8 <rclc_support_init_with_options>
      // ノードの作成
  	RCCHECK(rclc_node_init_with_options(&node, "f7_node", "", &support, &node_ops));
 800111a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800111e:	f507 708c 	add.w	r0, r7, #280	; 0x118
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4613      	mov	r3, r2
 800112a:	4a79      	ldr	r2, [pc, #484]	; (8001310 <StartDefaultTask+0x340>)
 800112c:	4979      	ldr	r1, [pc, #484]	; (8001314 <StartDefaultTask+0x344>)
 800112e:	f00f fa79 	bl	8010624 <rclc_node_init_with_options>
 8001132:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 8001136:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <StartDefaultTask+0x17c>
 800113e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001142:	f240 1109 	movw	r1, #265	; 0x109
 8001146:	4871      	ldr	r0, [pc, #452]	; (800130c <StartDefaultTask+0x33c>)
 8001148:	f01a f924 	bl	801b394 <iprintf>
      // サービスの作成
  	RCCHECK(rclc_service_init_default(&service, &node, ROSIDL_GET_SRV_TYPE_SUPPORT(custom_test_msgs, srv, AddThreeInts), "add_three_ints"));
 800114c:	f00b ffe2 	bl	800d114 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>
 8001150:	4602      	mov	r2, r0
 8001152:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001156:	f507 708a 	add.w	r0, r7, #276	; 0x114
 800115a:	4b6f      	ldr	r3, [pc, #444]	; (8001318 <StartDefaultTask+0x348>)
 800115c:	f00f fad8 	bl	8010710 <rclc_service_init_default>
 8001160:	f8c7 0198 	str.w	r0, [r7, #408]	; 0x198
 8001164:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <StartDefaultTask+0x1aa>
 800116c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001170:	f240 110b 	movw	r1, #267	; 0x10b
 8001174:	4865      	ldr	r0, [pc, #404]	; (800130c <StartDefaultTask+0x33c>)
 8001176:	f01a f90d 	bl	801b394 <iprintf>

  	 //publisherの作成
	RCCHECK(rclc_publisher_init_default(
 800117a:	f011 fd69 	bl	8012c50 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>
 800117e:	4602      	mov	r2, r0
 8001180:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001184:	4b65      	ldr	r3, [pc, #404]	; (800131c <StartDefaultTask+0x34c>)
 8001186:	4860      	ldr	r0, [pc, #384]	; (8001308 <StartDefaultTask+0x338>)
 8001188:	f00f fa88 	bl	801069c <rclc_publisher_init_default>
 800118c:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8001190:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <StartDefaultTask+0x1d6>
 8001198:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800119c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80011a0:	485a      	ldr	r0, [pc, #360]	; (800130c <StartDefaultTask+0x33c>)
 80011a2:	f01a f8f7 	bl	801b394 <iprintf>
	  &node,
	  ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, String),
	  "/from_f767zi"));

	 //subscriberの作成
		RCCHECK(rclc_subscription_init_default(
 80011a6:	f00c f8cd 	bl	800d344 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>
 80011aa:	4602      	mov	r2, r0
 80011ac:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80011b0:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80011b4:	4b5a      	ldr	r3, [pc, #360]	; (8001320 <StartDefaultTask+0x350>)
 80011b6:	f00f fae5 	bl	8010784 <rclc_subscription_init_default>
 80011ba:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
 80011be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <StartDefaultTask+0x204>
 80011c6:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80011ca:	f240 1115 	movw	r1, #277	; 0x115
 80011ce:	484f      	ldr	r0, [pc, #316]	; (800130c <StartDefaultTask+0x33c>)
 80011d0:	f01a f8e0 	bl	801b394 <iprintf>
		  &subscriber,
		  &node,
		  ROSIDL_GET_MSG_TYPE_SUPPORT(drive_msgs, msg, DiffDrive),
		  "/cmd_ras"));
      // エグゼキューターの作成。三番目の引数はextecuterに登録するコールバック関数の数。
  	RCCHECK(rclc_executor_init(&executor, &support.context, 2, &allocator));
 80011d4:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 80011d8:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80011dc:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80011e0:	2202      	movs	r2, #2
 80011e2:	f00e fec5 	bl	800ff70 <rclc_executor_init>
 80011e6:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
 80011ea:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d006      	beq.n	8001200 <StartDefaultTask+0x230>
 80011f2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80011f6:	f240 111b 	movw	r1, #283	; 0x11b
 80011fa:	4844      	ldr	r0, [pc, #272]	; (800130c <StartDefaultTask+0x33c>)
 80011fc:	f01a f8ca 	bl	801b394 <iprintf>

      // エグゼキューターにサービスを追加
  	RCCHECK(rclc_executor_add_service(&executor, &service, &req, &res, &service_callback));
 8001200:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8001204:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001208:	4b46      	ldr	r3, [pc, #280]	; (8001324 <StartDefaultTask+0x354>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <StartDefaultTask+0x358>)
 800120e:	4a47      	ldr	r2, [pc, #284]	; (800132c <StartDefaultTask+0x35c>)
 8001210:	f00e ff68 	bl	80100e4 <rclc_executor_add_service>
 8001214:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
 8001218:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <StartDefaultTask+0x25e>
 8001220:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8001224:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8001228:	4838      	ldr	r0, [pc, #224]	; (800130c <StartDefaultTask+0x33c>)
 800122a:	f01a f8b3 	bl	801b394 <iprintf>
  	RCCHECK(rclc_executor_add_subscription(
 800122e:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001232:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8001236:	2300      	movs	r3, #0
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <StartDefaultTask+0x360>)
 800123c:	4a3d      	ldr	r2, [pc, #244]	; (8001334 <StartDefaultTask+0x364>)
 800123e:	f00e ff13 	bl	8010068 <rclc_executor_add_subscription>
 8001242:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8001246:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800124a:	2b00      	cmp	r3, #0
 800124c:	d006      	beq.n	800125c <StartDefaultTask+0x28c>
 800124e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8001252:	f240 111f 	movw	r1, #287	; 0x11f
 8001256:	482d      	ldr	r0, [pc, #180]	; (800130c <StartDefaultTask+0x33c>)
 8001258:	f01a f89c 	bl	801b394 <iprintf>
  		  &executor, &subscriber, &sub,
  		  &subscription_callback, ON_NEW_DATA));

    //配列データを扱うときの処理
    rosidl_runtime_c__String__init(&pub);
 800125c:	4836      	ldr	r0, [pc, #216]	; (8001338 <StartDefaultTask+0x368>)
 800125e:	f011 fc09 	bl	8012a74 <rosidl_runtime_c__String__init>
    char hello[] = "initialized from f7";
 8001262:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001266:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800126a:	4a34      	ldr	r2, [pc, #208]	; (800133c <StartDefaultTask+0x36c>)
 800126c:	461c      	mov	r4, r3
 800126e:	4615      	mov	r5, r2
 8001270:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001274:	682b      	ldr	r3, [r5, #0]
 8001276:	6023      	str	r3, [r4, #0]
    rosidl_runtime_c__String__assignn(&pub.data, hello, sizeof(hello));
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	2214      	movs	r2, #20
 800127e:	4619      	mov	r1, r3
 8001280:	482d      	ldr	r0, [pc, #180]	; (8001338 <StartDefaultTask+0x368>)
 8001282:	f011 fc55 	bl	8012b30 <rosidl_runtime_c__String__assignn>

    RCSOFTCHECK(rcl_publish(&publisher, &pub, NULL));
 8001286:	2200      	movs	r2, #0
 8001288:	492b      	ldr	r1, [pc, #172]	; (8001338 <StartDefaultTask+0x368>)
 800128a:	481f      	ldr	r0, [pc, #124]	; (8001308 <StartDefaultTask+0x338>)
 800128c:	f00e f86c 	bl	800f368 <rcl_publish>
 8001290:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
 8001294:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <StartDefaultTask+0x2da>
 800129c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80012a0:	f44f 7194 	mov.w	r1, #296	; 0x128
 80012a4:	4826      	ldr	r0, [pc, #152]	; (8001340 <StartDefaultTask+0x370>)
 80012a6:	f01a f875 	bl	801b394 <iprintf>

    //初期化
    HAL_GPIO_WritePin(GPIOB, LD2_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	4825      	ldr	r0, [pc, #148]	; (8001344 <StartDefaultTask+0x374>)
 80012b0:	f001 fd9a 	bl	8002de8 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
	  // エグゼキューターを実行してリクエストを処理
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80012b4:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80012b8:	a305      	add	r3, pc, #20	; (adr r3, 80012d0 <StartDefaultTask+0x300>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	4608      	mov	r0, r1
 80012c0:	f00f f940 	bl	8010544 <rclc_executor_spin_some>

	  osDelay(100);
 80012c4:	2064      	movs	r0, #100	; 0x64
 80012c6:	f008 ffe1 	bl	800a28c <osDelay>
	  rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 80012ca:	e7f3      	b.n	80012b4 <StartDefaultTask+0x2e4>
 80012cc:	f3af 8000 	nop.w
 80012d0:	05f5e100 	.word	0x05f5e100
 80012d4:	00000000 	.word	0x00000000
 80012d8:	0801c734 	.word	0x0801c734
 80012dc:	08000c4d 	.word	0x08000c4d
 80012e0:	08000bed 	.word	0x08000bed
 80012e4:	08000bcd 	.word	0x08000bcd
 80012e8:	08000ba1 	.word	0x08000ba1
 80012ec:	20007868 	.word	0x20007868
 80012f0:	080015bd 	.word	0x080015bd
 80012f4:	08001601 	.word	0x08001601
 80012f8:	08001639 	.word	0x08001639
 80012fc:	080016a5 	.word	0x080016a5
 8001300:	0801c748 	.word	0x0801c748
 8001304:	200003dc 	.word	0x200003dc
 8001308:	2000487c 	.word	0x2000487c
 800130c:	0801c770 	.word	0x0801c770
 8001310:	0801c79c 	.word	0x0801c79c
 8001314:	0801c7a0 	.word	0x0801c7a0
 8001318:	0801c7a8 	.word	0x0801c7a8
 800131c:	0801c7b8 	.word	0x0801c7b8
 8001320:	0801c7c8 	.word	0x0801c7c8
 8001324:	08000f01 	.word	0x08000f01
 8001328:	20004838 	.word	0x20004838
 800132c:	20004820 	.word	0x20004820
 8001330:	08000f4d 	.word	0x08000f4d
 8001334:	20004840 	.word	0x20004840
 8001338:	20004870 	.word	0x20004870
 800133c:	0801c7d4 	.word	0x0801c7d4
 8001340:	0801c6f4 	.word	0x0801c6f4
 8001344:	40020400 	.word	0x40020400

08001348 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <MX_GPIO_Init+0xc0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a29      	ldr	r2, [pc, #164]	; (8001408 <MX_GPIO_Init+0xc0>)
 8001364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <MX_GPIO_Init+0xc0>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001376:	4b24      	ldr	r3, [pc, #144]	; (8001408 <MX_GPIO_Init+0xc0>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a23      	ldr	r2, [pc, #140]	; (8001408 <MX_GPIO_Init+0xc0>)
 800137c:	f043 0310 	orr.w	r3, r3, #16
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b21      	ldr	r3, [pc, #132]	; (8001408 <MX_GPIO_Init+0xc0>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b1e      	ldr	r3, [pc, #120]	; (8001408 <MX_GPIO_Init+0xc0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a1d      	ldr	r2, [pc, #116]	; (8001408 <MX_GPIO_Init+0xc0>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <MX_GPIO_Init+0xc0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a6:	4b18      	ldr	r3, [pc, #96]	; (8001408 <MX_GPIO_Init+0xc0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a17      	ldr	r2, [pc, #92]	; (8001408 <MX_GPIO_Init+0xc0>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <MX_GPIO_Init+0xc0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b12      	ldr	r3, [pc, #72]	; (8001408 <MX_GPIO_Init+0xc0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a11      	ldr	r2, [pc, #68]	; (8001408 <MX_GPIO_Init+0xc0>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <MX_GPIO_Init+0xc0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	603b      	str	r3, [r7, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6178 	mov.w	r1, #3968	; 0xf80
 80013dc:	480b      	ldr	r0, [pc, #44]	; (800140c <MX_GPIO_Init+0xc4>)
 80013de:	f001 fd03 	bl	8002de8 <HAL_GPIO_WritePin>
                          |M22_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = M11_Pin|M12_Pin|LD2_Pin|M21_Pin
 80013e2:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 80013e6:	617b      	str	r3, [r7, #20]
                          |M22_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_GPIO_Init+0xc4>)
 80013fc:	f001 fb48 	bl	8002a90 <HAL_GPIO_Init>

}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400

08001410 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
    HAL_UART_Transmit(&huart3, &ch, 1, 500);
 800141a:	1df9      	adds	r1, r7, #7
 800141c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001420:	2201      	movs	r2, #1
 8001422:	4804      	ldr	r0, [pc, #16]	; (8001434 <__io_putchar+0x24>)
 8001424:	f004 ffe0 	bl	80063e8 <HAL_UART_Transmit>
    return ch;
 8001428:	79fb      	ldrb	r3, [r7, #7]
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20007868 	.word	0x20007868

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800143c:	f000 fe03 	bl	8002046 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001440:	f000 f840 	bl	80014c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001444:	f7ff ff80 	bl	8001348 <MX_GPIO_Init>
  MX_DMA_Init();
 8001448:	f7ff fb84 	bl	8000b54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800144c:	f000 fcd2 	bl	8001df4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001450:	f000 fbdc 	bl	8001c0c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  printf("startProgram\r\n");
 8001454:	4818      	ldr	r0, [pc, #96]	; (80014b8 <main+0x80>)
 8001456:	f01a f803 	bl	801b460 <puts>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800145a:	2100      	movs	r1, #0
 800145c:	4817      	ldr	r0, [pc, #92]	; (80014bc <main+0x84>)
 800145e:	f003 ffd1 	bl	8005404 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001462:	2104      	movs	r1, #4
 8001464:	4815      	ldr	r0, [pc, #84]	; (80014bc <main+0x84>)
 8001466:	f003 ffcd 	bl	8005404 <HAL_TIM_PWM_Start>

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800146a:	4b14      	ldr	r3, [pc, #80]	; (80014bc <main+0x84>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2200      	movs	r2, #0
 8001470:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <main+0x84>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2200      	movs	r2, #0
 8001478:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_GPIO_WritePin(GPIOB, M11_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001480:	480f      	ldr	r0, [pc, #60]	; (80014c0 <main+0x88>)
 8001482:	f001 fcb1 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M12_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <main+0x88>)
 800148e:	f001 fcab 	bl	8002de8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, M21_Pin, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <main+0x88>)
 800149a:	f001 fca5 	bl	8002de8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, M22_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a4:	4806      	ldr	r0, [pc, #24]	; (80014c0 <main+0x88>)
 80014a6:	f001 fc9f 	bl	8002de8 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80014aa:	f008 fddf 	bl	800a06c <osKernelInitialize>
  MX_FREERTOS_Init();
 80014ae:	f7ff fc21 	bl	8000cf4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80014b2:	f008 fe0f 	bl	800a0d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <main+0x7e>
 80014b8:	0801c7e8 	.word	0x0801c7e8
 80014bc:	2000781c 	.word	0x2000781c
 80014c0:	40020400 	.word	0x40020400

080014c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b094      	sub	sp, #80	; 0x50
 80014c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	2234      	movs	r2, #52	; 0x34
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f01a f9ea 	bl	801b8ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <SystemClock_Config+0xc8>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	4a27      	ldr	r2, [pc, #156]	; (800158c <SystemClock_Config+0xc8>)
 80014ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f2:	6413      	str	r3, [r2, #64]	; 0x40
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <SystemClock_Config+0xc8>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001500:	4b23      	ldr	r3, [pc, #140]	; (8001590 <SystemClock_Config+0xcc>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a22      	ldr	r2, [pc, #136]	; (8001590 <SystemClock_Config+0xcc>)
 8001506:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <SystemClock_Config+0xcc>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001514:	603b      	str	r3, [r7, #0]
 8001516:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001518:	2301      	movs	r3, #1
 800151a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800151c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001520:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001522:	2302      	movs	r3, #2
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001526:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800152a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800152c:	2308      	movs	r3, #8
 800152e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001530:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001534:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001536:	2302      	movs	r3, #2
 8001538:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800153a:	2302      	movs	r3, #2
 800153c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800153e:	2302      	movs	r3, #2
 8001540:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001542:	f107 031c 	add.w	r3, r7, #28
 8001546:	4618      	mov	r0, r3
 8001548:	f002 fcfc 	bl	8003f44 <HAL_RCC_OscConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001552:	f000 f82e 	bl	80015b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2302      	movs	r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001562:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001566:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800156e:	f107 0308 	add.w	r3, r7, #8
 8001572:	2105      	movs	r1, #5
 8001574:	4618      	mov	r0, r3
 8001576:	f002 ff93 	bl	80044a0 <HAL_RCC_ClockConfig>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001580:	f000 f817 	bl	80015b2 <Error_Handler>
  }
}
 8001584:	bf00      	nop
 8001586:	3750      	adds	r7, #80	; 0x50
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a4:	d101      	bne.n	80015aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015a6:	f000 fd5b 	bl	8002060 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80015b6:	b672      	cpsid	i
}
 80015b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ba:	e7fe      	b.n	80015ba <Error_Handler+0x8>

080015bc <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <microros_allocate+0x3c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	461a      	mov	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4413      	add	r3, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <microros_allocate+0x3c>)
 80015d4:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <microros_allocate+0x40>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <microros_allocate+0x40>)
 80015e4:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff f860 	bl	80006ac <pvPortMallocMicroROS>
 80015ec:	4603      	mov	r3, r0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	200077c0 	.word	0x200077c0
 80015fc:	200077c4 	.word	0x200077c4

08001600 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00c      	beq.n	800162a <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f7ff f973 	bl	80008fc <getBlockSize>
 8001616:	4603      	mov	r3, r0
 8001618:	4a06      	ldr	r2, [pc, #24]	; (8001634 <microros_deallocate+0x34>)
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	461a      	mov	r2, r3
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <microros_deallocate+0x34>)
 8001622:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff f90b 	bl	8000840 <vPortFreeMicroROS>
  }
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200077c4 	.word	0x200077c4

08001638 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <microros_reallocate+0x64>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	461a      	mov	r2, r3
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	4413      	add	r3, r2
 800164e:	461a      	mov	r2, r3
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <microros_reallocate+0x64>)
 8001652:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <microros_reallocate+0x68>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	4413      	add	r3, r2
 800165e:	461a      	mov	r2, r3
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <microros_reallocate+0x68>)
 8001662:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d104      	bne.n	8001674 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 800166a:	68b8      	ldr	r0, [r7, #8]
 800166c:	f7ff f81e 	bl	80006ac <pvPortMallocMicroROS>
 8001670:	4603      	mov	r3, r0
 8001672:	e00e      	b.n	8001692 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff f941 	bl	80008fc <getBlockSize>
 800167a:	4603      	mov	r3, r0
 800167c:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <microros_reallocate+0x68>)
 800167e:	6812      	ldr	r2, [r2, #0]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	461a      	mov	r2, r3
 8001684:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <microros_reallocate+0x68>)
 8001686:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	68f8      	ldr	r0, [r7, #12]
 800168c:	f7ff f954 	bl	8000938 <pvPortReallocMicroROS>
 8001690:	4603      	mov	r3, r0
  }
}
 8001692:	4618      	mov	r0, r3
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200077c0 	.word	0x200077c0
 80016a0:	200077c4 	.word	0x200077c4

080016a4 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	68ba      	ldr	r2, [r7, #8]
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	4a0c      	ldr	r2, [pc, #48]	; (80016ec <microros_zero_allocate+0x48>)
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	461a      	mov	r2, r3
 80016c0:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <microros_zero_allocate+0x48>)
 80016c2:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <microros_zero_allocate+0x4c>)
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	4413      	add	r3, r2
 80016d2:	461a      	mov	r2, r3
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <microros_zero_allocate+0x4c>)
 80016d6:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	f7ff f959 	bl	8000992 <pvPortCallocMicroROS>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200077c0 	.word	0x200077c0
 80016f0:	200077c4 	.word	0x200077c4
 80016f4:	00000000 	.word	0x00000000

080016f8 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 80016f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 800170a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800170e:	a320      	add	r3, pc, #128	; (adr r3, 8001790 <UTILS_NanosecondsToTimespec+0x98>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe fdfc 	bl	8000310 <__aeabi_ldivmod>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001722:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001726:	a31a      	add	r3, pc, #104	; (adr r3, 8001790 <UTILS_NanosecondsToTimespec+0x98>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7fe fdf0 	bl	8000310 <__aeabi_ldivmod>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	da20      	bge.n	800177e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a11      	ldr	r2, [pc, #68]	; (8001788 <UTILS_NanosecondsToTimespec+0x90>)
 8001742:	fb82 1203 	smull	r1, r2, r2, r3
 8001746:	1712      	asrs	r2, r2, #28
 8001748:	17db      	asrs	r3, r3, #31
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	6979      	ldr	r1, [r7, #20]
 8001758:	17c8      	asrs	r0, r1, #31
 800175a:	460c      	mov	r4, r1
 800175c:	4605      	mov	r5, r0
 800175e:	ebb2 0804 	subs.w	r8, r2, r4
 8001762:	eb63 0905 	sbc.w	r9, r3, r5
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	4906      	ldr	r1, [pc, #24]	; (800178c <UTILS_NanosecondsToTimespec+0x94>)
 8001774:	fb01 f303 	mul.w	r3, r1, r3
 8001778:	441a      	add	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	609a      	str	r2, [r3, #8]
    }
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001788:	44b82fa1 	.word	0x44b82fa1
 800178c:	3b9aca00 	.word	0x3b9aca00
 8001790:	3b9aca00 	.word	0x3b9aca00
 8001794:	00000000 	.word	0x00000000

08001798 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800179c:	b08e      	sub	sp, #56	; 0x38
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6278      	str	r0, [r7, #36]	; 0x24
 80017a2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80017a4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017a8:	2300      	movs	r3, #0
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	f04f 0300 	mov.w	r3, #0
 80017b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80017ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017be:	4618      	mov	r0, r3
 80017c0:	f00a f862 	bl	800b888 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80017c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c6:	17da      	asrs	r2, r3, #31
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	61fa      	str	r2, [r7, #28]
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	f04f 0300 	mov.w	r3, #0
 80017d4:	69b9      	ldr	r1, [r7, #24]
 80017d6:	000b      	movs	r3, r1
 80017d8:	2200      	movs	r2, #0
 80017da:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 80017de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e0:	2200      	movs	r2, #0
 80017e2:	461c      	mov	r4, r3
 80017e4:	4615      	mov	r5, r2
 80017e6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017ea:	1911      	adds	r1, r2, r4
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	416b      	adcs	r3, r5
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017f6:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 80017fa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	f04f 0400 	mov.w	r4, #0
 8001806:	f04f 0500 	mov.w	r5, #0
 800180a:	015d      	lsls	r5, r3, #5
 800180c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001810:	0154      	lsls	r4, r2, #5
 8001812:	4622      	mov	r2, r4
 8001814:	462b      	mov	r3, r5
 8001816:	ebb2 0800 	subs.w	r8, r2, r0
 800181a:	eb63 0901 	sbc.w	r9, r3, r1
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800182a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800182e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001832:	4690      	mov	r8, r2
 8001834:	4699      	mov	r9, r3
 8001836:	eb18 0a00 	adds.w	sl, r8, r0
 800183a:	eb49 0b01 	adc.w	fp, r9, r1
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800184a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800184e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001852:	ebb2 040a 	subs.w	r4, r2, sl
 8001856:	603c      	str	r4, [r7, #0]
 8001858:	eb63 030b 	sbc.w	r3, r3, fp
 800185c:	607b      	str	r3, [r7, #4]
 800185e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001862:	4623      	mov	r3, r4
 8001864:	181b      	adds	r3, r3, r0
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	462b      	mov	r3, r5
 800186a:	eb41 0303 	adc.w	r3, r1, r3
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	6a3a      	ldr	r2, [r7, #32]
 8001872:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001876:	f7ff ff3f 	bl	80016f8 <UTILS_NanosecondsToTimespec>

    return 0;
 800187a:	2300      	movs	r3, #0
 800187c:	4618      	mov	r0, r3
 800187e:	3738      	adds	r7, #56	; 0x38
 8001880:	46bd      	mov	sp, r7
 8001882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <HAL_MspInit+0x4c>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	4a10      	ldr	r2, [pc, #64]	; (80018d4 <HAL_MspInit+0x4c>)
 8001894:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001898:	6413      	str	r3, [r2, #64]	; 0x40
 800189a:	4b0e      	ldr	r3, [pc, #56]	; (80018d4 <HAL_MspInit+0x4c>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_MspInit+0x4c>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_MspInit+0x4c>)
 80018ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b0:	6453      	str	r3, [r2, #68]	; 0x44
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_MspInit+0x4c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018be:	2200      	movs	r2, #0
 80018c0:	210f      	movs	r1, #15
 80018c2:	f06f 0001 	mvn.w	r0, #1
 80018c6:	f000 fca3 	bl	8002210 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800

080018d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b08e      	sub	sp, #56	; 0x38
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80018e8:	4b34      	ldr	r3, [pc, #208]	; (80019bc <HAL_InitTick+0xe4>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	4a33      	ldr	r2, [pc, #204]	; (80019bc <HAL_InitTick+0xe4>)
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	6413      	str	r3, [r2, #64]	; 0x40
 80018f4:	4b31      	ldr	r3, [pc, #196]	; (80019bc <HAL_InitTick+0xe4>)
 80018f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001900:	f107 0210 	add.w	r2, r7, #16
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4611      	mov	r1, r2
 800190a:	4618      	mov	r0, r3
 800190c:	f002 ffee 	bl	80048ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800191a:	f002 ffbf 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 800191e:	6378      	str	r0, [r7, #52]	; 0x34
 8001920:	e004      	b.n	800192c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001922:	f002 ffbb 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8001926:	4603      	mov	r3, r0
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800192c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800192e:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <HAL_InitTick+0xe8>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	0c9b      	lsrs	r3, r3, #18
 8001936:	3b01      	subs	r3, #1
 8001938:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800193a:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <HAL_InitTick+0xec>)
 800193c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001940:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001942:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_InitTick+0xec>)
 8001944:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001948:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800194a:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <HAL_InitTick+0xec>)
 800194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <HAL_InitTick+0xec>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <HAL_InitTick+0xec>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b19      	ldr	r3, [pc, #100]	; (80019c4 <HAL_InitTick+0xec>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001962:	4818      	ldr	r0, [pc, #96]	; (80019c4 <HAL_InitTick+0xec>)
 8001964:	f003 fc1c 	bl	80051a0 <HAL_TIM_Base_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800196e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001972:	2b00      	cmp	r3, #0
 8001974:	d11b      	bne.n	80019ae <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001976:	4813      	ldr	r0, [pc, #76]	; (80019c4 <HAL_InitTick+0xec>)
 8001978:	f003 fc74 	bl	8005264 <HAL_TIM_Base_Start_IT>
 800197c:	4603      	mov	r3, r0
 800197e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001986:	2b00      	cmp	r3, #0
 8001988:	d111      	bne.n	80019ae <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800198a:	201c      	movs	r0, #28
 800198c:	f000 fc5c 	bl	8002248 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2b0f      	cmp	r3, #15
 8001994:	d808      	bhi.n	80019a8 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001996:	2200      	movs	r2, #0
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	201c      	movs	r0, #28
 800199c:	f000 fc38 	bl	8002210 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019a0:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_InitTick+0xf0>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e002      	b.n	80019ae <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80019ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3738      	adds	r7, #56	; 0x38
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	431bde83 	.word	0x431bde83
 80019c4:	200077c8 	.word	0x200077c8
 80019c8:	20000010 	.word	0x20000010

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <DMA1_Stream1_IRQHandler+0x10>)
 80019fe:	f000 fdd1 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200078f0 	.word	0x200078f0

08001a0c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <DMA1_Stream3_IRQHandler+0x10>)
 8001a12:	f000 fdc7 	bl	80025a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	20007950 	.word	0x20007950

08001a20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <TIM2_IRQHandler+0x10>)
 8001a26:	f003 fde7 	bl	80055f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200077c8 	.word	0x200077c8

08001a34 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <USART3_IRQHandler+0x10>)
 8001a3a:	f004 feab 	bl	8006794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20007868 	.word	0x20007868

08001a48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <OTG_FS_IRQHandler+0x10>)
 8001a4e:	f001 f9e4 	bl	8002e1a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000c300 	.word	0x2000c300

08001a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_kill>:

int _kill(int pid, int sig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a76:	f019 ffad 	bl	801b9d4 <__errno>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2216      	movs	r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_exit>:

void _exit (int status)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffe7 	bl	8001a6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a9e:	e7fe      	b.n	8001a9e <_exit+0x12>

08001aa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e00a      	b.n	8001ac8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab2:	f3af 8000 	nop.w
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	60ba      	str	r2, [r7, #8]
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf0      	blt.n	8001ab2 <_read+0x12>
  }

  return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e009      	b.n	8001b00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	60ba      	str	r2, [r7, #8]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fc8b 	bl	8001410 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf1      	blt.n	8001aec <_write+0x12>
  }
  return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_close>:

int _close(int file)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_isatty>:

int _isatty(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f019 ff12 	bl	801b9d4 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20080000 	.word	0x20080000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	20007818 	.word	0x20007818
 8001be4:	20011678 	.word	0x20011678

08001be8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b096      	sub	sp, #88	; 0x58
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
 8001c26:	605a      	str	r2, [r3, #4]
 8001c28:	609a      	str	r2, [r3, #8]
 8001c2a:	60da      	str	r2, [r3, #12]
 8001c2c:	611a      	str	r2, [r3, #16]
 8001c2e:	615a      	str	r2, [r3, #20]
 8001c30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	222c      	movs	r2, #44	; 0x2c
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f019 fe37 	bl	801b8ac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001c40:	4a3f      	ldr	r2, [pc, #252]	; (8001d40 <MX_TIM1_Init+0x134>)
 8001c42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8001c44:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c4a:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8001c50:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001c52:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c58:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c6a:	4834      	ldr	r0, [pc, #208]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001c6c:	f003 fb72 	bl	8005354 <HAL_TIM_PWM_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c76:	f7ff fc9c 	bl	80015b2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482b      	ldr	r0, [pc, #172]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001c8e:	f004 fa33 	bl	80060f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001c98:	f7ff fc8b 	bl	80015b2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c9c:	2360      	movs	r3, #96	; 0x60
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cac:	2300      	movs	r3, #0
 8001cae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	481e      	ldr	r0, [pc, #120]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001cc2:	f003 fdb9 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ccc:	f7ff fc71 	bl	80015b2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4818      	ldr	r0, [pc, #96]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001cda:	f003 fdad 	bl	8005838 <HAL_TIM_PWM_ConfigChannel>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001ce4:	f7ff fc65 	bl	80015b2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d0e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4807      	ldr	r0, [pc, #28]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001d1e:	f004 fa79 	bl	8006214 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001d28:	f7ff fc43 	bl	80015b2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d2c:	4803      	ldr	r0, [pc, #12]	; (8001d3c <MX_TIM1_Init+0x130>)
 8001d2e:	f000 f829 	bl	8001d84 <HAL_TIM_MspPostInit>

}
 8001d32:	bf00      	nop
 8001d34:	3758      	adds	r7, #88	; 0x58
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	2000781c 	.word	0x2000781c
 8001d40:	40010000 	.word	0x40010000

08001d44 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_TIM_PWM_MspInit+0x38>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d10b      	bne.n	8001d6e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d56:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a09      	ldr	r2, [pc, #36]	; (8001d80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40010000 	.word	0x40010000
 8001d80:	40023800 	.word	0x40023800

08001d84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b088      	sub	sp, #32
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <HAL_TIM_MspPostInit+0x64>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d11c      	bne.n	8001de0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001da6:	4b11      	ldr	r3, [pc, #68]	; (8001dec <HAL_TIM_MspPostInit+0x68>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a10      	ldr	r2, [pc, #64]	; (8001dec <HAL_TIM_MspPostInit+0x68>)
 8001dac:	f043 0310 	orr.w	r3, r3, #16
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <HAL_TIM_MspPostInit+0x68>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0310 	and.w	r3, r3, #16
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001dbe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001dc2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dd4:	f107 030c 	add.w	r3, r7, #12
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4805      	ldr	r0, [pc, #20]	; (8001df0 <HAL_TIM_MspPostInit+0x6c>)
 8001ddc:	f000 fe58 	bl	8002a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001de0:	bf00      	nop
 8001de2:	3720      	adds	r7, #32
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40021000 	.word	0x40021000

08001df4 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001df8:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <MX_USART3_UART_Init+0x5c>)
 8001dfc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e1a:	220c      	movs	r2, #12
 8001e1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e2a:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e36:	4805      	ldr	r0, [pc, #20]	; (8001e4c <MX_USART3_UART_Init+0x58>)
 8001e38:	f004 fa88 	bl	800634c <HAL_UART_Init>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e42:	f7ff fbb6 	bl	80015b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20007868 	.word	0x20007868
 8001e50:	40004800 	.word	0x40004800

08001e54 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b0ae      	sub	sp, #184	; 0xb8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2290      	movs	r2, #144	; 0x90
 8001e72:	2100      	movs	r1, #0
 8001e74:	4618      	mov	r0, r3
 8001e76:	f019 fd19 	bl	801b8ac <memset>
  if(uartHandle->Instance==USART3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a56      	ldr	r2, [pc, #344]	; (8001fd8 <HAL_UART_MspInit+0x184>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	f040 80a4 	bne.w	8001fce <HAL_UART_MspInit+0x17a>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e8a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 fd5b 	bl	8004950 <HAL_RCCEx_PeriphCLKConfig>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001ea0:	f7ff fb87 	bl	80015b2 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ea4:	4b4d      	ldr	r3, [pc, #308]	; (8001fdc <HAL_UART_MspInit+0x188>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <HAL_UART_MspInit+0x188>)
 8001eaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eae:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb0:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_UART_MspInit+0x188>)
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ebc:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_UART_MspInit+0x188>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	4a46      	ldr	r2, [pc, #280]	; (8001fdc <HAL_UART_MspInit+0x188>)
 8001ec2:	f043 0308 	orr.w	r3, r3, #8
 8001ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec8:	4b44      	ldr	r3, [pc, #272]	; (8001fdc <HAL_UART_MspInit+0x188>)
 8001eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ed4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001eee:	2307      	movs	r3, #7
 8001ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ef4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4839      	ldr	r0, [pc, #228]	; (8001fe0 <HAL_UART_MspInit+0x18c>)
 8001efc:	f000 fdc8 	bl	8002a90 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001f00:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f02:	4a39      	ldr	r2, [pc, #228]	; (8001fe8 <HAL_UART_MspInit+0x194>)
 8001f04:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001f06:	4b37      	ldr	r3, [pc, #220]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f0c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0e:	4b35      	ldr	r3, [pc, #212]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f14:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f1a:	4b32      	ldr	r3, [pc, #200]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f20:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f22:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f28:	4b2e      	ldr	r3, [pc, #184]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f34:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f36:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f3c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f3e:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001f44:	4827      	ldr	r0, [pc, #156]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f46:	f000 f98d 	bl	8002264 <HAL_DMA_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001f50:	f7ff fb2f 	bl	80015b2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a23      	ldr	r2, [pc, #140]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f58:	675a      	str	r2, [r3, #116]	; 0x74
 8001f5a:	4a22      	ldr	r2, [pc, #136]	; (8001fe4 <HAL_UART_MspInit+0x190>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001f60:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f62:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <HAL_UART_MspInit+0x19c>)
 8001f64:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f6c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f70:	2240      	movs	r2, #64	; 0x40
 8001f72:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f74:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f80:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f82:	4b1a      	ldr	r3, [pc, #104]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001f8e:	4b17      	ldr	r3, [pc, #92]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f94:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f96:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f9a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001fa2:	4812      	ldr	r0, [pc, #72]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001fa4:	f000 f95e 	bl	8002264 <HAL_DMA_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_UART_MspInit+0x15e>
    {
      Error_Handler();
 8001fae:	f7ff fb00 	bl	80015b2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a0d      	ldr	r2, [pc, #52]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001fb6:	671a      	str	r2, [r3, #112]	; 0x70
 8001fb8:	4a0c      	ldr	r2, [pc, #48]	; (8001fec <HAL_UART_MspInit+0x198>)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	2027      	movs	r0, #39	; 0x27
 8001fc4:	f000 f924 	bl	8002210 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fc8:	2027      	movs	r0, #39	; 0x27
 8001fca:	f000 f93d 	bl	8002248 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fce:	bf00      	nop
 8001fd0:	37b8      	adds	r7, #184	; 0xb8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40004800 	.word	0x40004800
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	200078f0 	.word	0x200078f0
 8001fe8:	40026028 	.word	0x40026028
 8001fec:	20007950 	.word	0x20007950
 8001ff0:	40026058 	.word	0x40026058

08001ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ff4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800202c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff8:	480d      	ldr	r0, [pc, #52]	; (8002030 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ffa:	490e      	ldr	r1, [pc, #56]	; (8002034 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ffc:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002000:	e002      	b.n	8002008 <LoopCopyDataInit>

08002002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002006:	3304      	adds	r3, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800200c:	d3f9      	bcc.n	8002002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002010:	4c0b      	ldr	r4, [pc, #44]	; (8002040 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002014:	e001      	b.n	800201a <LoopFillZerobss>

08002016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002018:	3204      	adds	r2, #4

0800201a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800201c:	d3fb      	bcc.n	8002016 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800201e:	f7ff fde3 	bl	8001be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002022:	f019 fcdd 	bl	801b9e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002026:	f7ff fa07 	bl	8001438 <main>
  bx  lr    
 800202a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800202c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002034:	200003e0 	.word	0x200003e0
  ldr r2, =_sidata
 8002038:	0801dc40 	.word	0x0801dc40
  ldr r2, =_sbss
 800203c:	200003e0 	.word	0x200003e0
  ldr r4, =_ebss
 8002040:	20011678 	.word	0x20011678

08002044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002044:	e7fe      	b.n	8002044 <ADC_IRQHandler>

08002046 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204a:	2003      	movs	r0, #3
 800204c:	f000 f8d5 	bl	80021fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002050:	200f      	movs	r0, #15
 8002052:	f7ff fc41 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002056:	f7ff fc17 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000014 	.word	0x20000014
 8002084:	200079b0 	.word	0x200079b0

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	200079b0 	.word	0x200079b0

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <__NVIC_SetPriorityGrouping+0x40>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <__NVIC_SetPriorityGrouping+0x40>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00
 80020e4:	05fa0000 	.word	0x05fa0000

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <__NVIC_EnableIRQ+0x38>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e100 	.word	0xe000e100

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	; (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ff4c 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002222:	f7ff ff61 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 8002226:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	68b9      	ldr	r1, [r7, #8]
 800222c:	6978      	ldr	r0, [r7, #20]
 800222e:	f7ff ffb1 	bl	8002194 <NVIC_EncodePriority>
 8002232:	4602      	mov	r2, r0
 8002234:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff ff80 	bl	8002140 <__NVIC_SetPriority>
}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	4603      	mov	r3, r0
 8002250:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff54 	bl	8002104 <__NVIC_EnableIRQ>
}
 800225c:	bf00      	nop
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ff0a 	bl	8002088 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e099      	b.n	80023b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a0:	e00f      	b.n	80022c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022a2:	f7ff fef1 	bl	8002088 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d908      	bls.n	80022c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2220      	movs	r2, #32
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2203      	movs	r2, #3
 80022ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e078      	b.n	80023b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1e8      	bne.n	80022a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_DMA_Init+0x158>)
 80022dc:	4013      	ands	r3, r2
 80022de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685a      	ldr	r2, [r3, #4]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002306:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	4313      	orrs	r3, r2
 8002312:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002318:	2b04      	cmp	r3, #4
 800231a:	d107      	bne.n	800232c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	4313      	orrs	r3, r2
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f023 0307 	bic.w	r3, r3, #7
 8002342:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	4313      	orrs	r3, r2
 800234c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	2b04      	cmp	r3, #4
 8002354:	d117      	bne.n	8002386 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4313      	orrs	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f000 fb15 	bl	8002998 <DMA_CheckFifoParam>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2240      	movs	r2, #64	; 0x40
 8002378:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002382:	2301      	movs	r3, #1
 8002384:	e016      	b.n	80023b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 facc 	bl	800292c <DMA_CalcBaseAndBitshift>
 8002394:	4603      	mov	r3, r0
 8002396:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239c:	223f      	movs	r2, #63	; 0x3f
 800239e:	409a      	lsls	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	e010803f 	.word	0xe010803f

080023c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
 80023cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023ce:	2300      	movs	r3, #0
 80023d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_DMA_Start_IT+0x26>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e048      	b.n	8002478 <HAL_DMA_Start_IT+0xb8>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d137      	bne.n	800246a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	68b9      	ldr	r1, [r7, #8]
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fa5e 	bl	80028d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002418:	223f      	movs	r2, #63	; 0x3f
 800241a:	409a      	lsls	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0216 	orr.w	r2, r2, #22
 800242e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800243e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002444:	2b00      	cmp	r3, #0
 8002446:	d007      	beq.n	8002458 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0208 	orr.w	r2, r2, #8
 8002456:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0201 	orr.w	r2, r2, #1
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	e005      	b.n	8002476 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002472:	2302      	movs	r3, #2
 8002474:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002476:	7dfb      	ldrb	r3, [r7, #23]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248e:	f7ff fdfb 	bl	8002088 <HAL_GetTick>
 8002492:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b02      	cmp	r3, #2
 800249e:	d008      	beq.n	80024b2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2280      	movs	r2, #128	; 0x80
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e052      	b.n	8002558 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0216 	bic.w	r2, r2, #22
 80024c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024d0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <HAL_DMA_Abort+0x62>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d007      	beq.n	80024f2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0208 	bic.w	r2, r2, #8
 80024f0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002502:	e013      	b.n	800252c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002504:	f7ff fdc0 	bl	8002088 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b05      	cmp	r3, #5
 8002510:	d90c      	bls.n	800252c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2220      	movs	r2, #32
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2203      	movs	r2, #3
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e015      	b.n	8002558 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1e4      	bne.n	8002504 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	223f      	movs	r2, #63	; 0x3f
 8002540:	409a      	lsls	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d004      	beq.n	800257e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2280      	movs	r2, #128	; 0x80
 8002578:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00c      	b.n	8002598 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2205      	movs	r2, #5
 8002582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80025b0:	4b8e      	ldr	r3, [pc, #568]	; (80027ec <HAL_DMA_IRQHandler+0x248>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a8e      	ldr	r2, [pc, #568]	; (80027f0 <HAL_DMA_IRQHandler+0x24c>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0a9b      	lsrs	r3, r3, #10
 80025bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	2208      	movs	r2, #8
 80025d0:	409a      	lsls	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01a      	beq.n	8002610 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0204 	bic.w	r2, r2, #4
 80025f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	2208      	movs	r2, #8
 80025fe:	409a      	lsls	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002614:	2201      	movs	r2, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	2b00      	cmp	r3, #0
 800262c:	d00b      	beq.n	8002646 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	2201      	movs	r2, #1
 8002634:	409a      	lsls	r2, r3
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f043 0202 	orr.w	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264a:	2204      	movs	r2, #4
 800264c:	409a      	lsls	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d012      	beq.n	800267c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00b      	beq.n	800267c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	2204      	movs	r2, #4
 800266a:	409a      	lsls	r2, r3
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002674:	f043 0204 	orr.w	r2, r3, #4
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002680:	2210      	movs	r2, #16
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4013      	ands	r3, r2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d043      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d03c      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	2210      	movs	r2, #16
 80026a0:	409a      	lsls	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d018      	beq.n	80026e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d108      	bne.n	80026d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d024      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
 80026d2:	e01f      	b.n	8002714 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01b      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	4798      	blx	r3
 80026e4:	e016      	b.n	8002714 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d107      	bne.n	8002704 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0208 	bic.w	r2, r2, #8
 8002702:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	2220      	movs	r2, #32
 800271a:	409a      	lsls	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 808f 	beq.w	8002844 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8087 	beq.w	8002844 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2220      	movs	r2, #32
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b05      	cmp	r3, #5
 800274c:	d136      	bne.n	80027bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f022 0216 	bic.w	r2, r2, #22
 800275c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800276c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d103      	bne.n	800277e <HAL_DMA_IRQHandler+0x1da>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 0208 	bic.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	223f      	movs	r2, #63	; 0x3f
 8002794:	409a      	lsls	r2, r3
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07e      	beq.n	80028b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
        }
        return;
 80027ba:	e079      	b.n	80028b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01d      	beq.n	8002806 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d10d      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d031      	beq.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
 80027e8:	e02c      	b.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
 80027ea:	bf00      	nop
 80027ec:	2000000c 	.word	0x2000000c
 80027f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d023      	beq.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
 8002804:	e01e      	b.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10f      	bne.n	8002834 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0210 	bic.w	r2, r2, #16
 8002822:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	2b00      	cmp	r3, #0
 800284a:	d032      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002850:	f003 0301 	and.w	r3, r3, #1
 8002854:	2b00      	cmp	r3, #0
 8002856:	d022      	beq.n	800289e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2205      	movs	r2, #5
 800285c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	3301      	adds	r3, #1
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d307      	bcc.n	800288c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f2      	bne.n	8002870 <HAL_DMA_IRQHandler+0x2cc>
 800288a:	e000      	b.n	800288e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800288c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	4798      	blx	r3
 80028ae:	e000      	b.n	80028b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028b0:	bf00      	nop
    }
  }
}
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b40      	cmp	r3, #64	; 0x40
 80028fc:	d108      	bne.n	8002910 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800290e:	e007      	b.n	8002920 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	60da      	str	r2, [r3, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr

0800292c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	3b10      	subs	r3, #16
 800293c:	4a13      	ldr	r2, [pc, #76]	; (800298c <DMA_CalcBaseAndBitshift+0x60>)
 800293e:	fba2 2303 	umull	r2, r3, r2, r3
 8002942:	091b      	lsrs	r3, r3, #4
 8002944:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <DMA_CalcBaseAndBitshift+0x64>)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4413      	add	r3, r2
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b03      	cmp	r3, #3
 8002958:	d908      	bls.n	800296c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <DMA_CalcBaseAndBitshift+0x68>)
 8002962:	4013      	ands	r3, r2
 8002964:	1d1a      	adds	r2, r3, #4
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	659a      	str	r2, [r3, #88]	; 0x58
 800296a:	e006      	b.n	800297a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b08      	ldr	r3, [pc, #32]	; (8002994 <DMA_CalcBaseAndBitshift+0x68>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800297e:	4618      	mov	r0, r3
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	aaaaaaab 	.word	0xaaaaaaab
 8002990:	0801c86c 	.word	0x0801c86c
 8002994:	fffffc00 	.word	0xfffffc00

08002998 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d11f      	bne.n	80029f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d856      	bhi.n	8002a66 <DMA_CheckFifoParam+0xce>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <DMA_CheckFifoParam+0x28>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029d1 	.word	0x080029d1
 80029c4:	080029e3 	.word	0x080029e3
 80029c8:	080029d1 	.word	0x080029d1
 80029cc:	08002a67 	.word	0x08002a67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d046      	beq.n	8002a6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e0:	e043      	b.n	8002a6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029ea:	d140      	bne.n	8002a6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f0:	e03d      	b.n	8002a6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029fa:	d121      	bne.n	8002a40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d837      	bhi.n	8002a72 <DMA_CheckFifoParam+0xda>
 8002a02:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <DMA_CheckFifoParam+0x70>)
 8002a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a08:	08002a19 	.word	0x08002a19
 8002a0c:	08002a1f 	.word	0x08002a1f
 8002a10:	08002a19 	.word	0x08002a19
 8002a14:	08002a31 	.word	0x08002a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e030      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d025      	beq.n	8002a76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a2e:	e022      	b.n	8002a76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a38:	d11f      	bne.n	8002a7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a3e:	e01c      	b.n	8002a7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d903      	bls.n	8002a4e <DMA_CheckFifoParam+0xb6>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d003      	beq.n	8002a54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a4c:	e018      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
      break;
 8002a52:	e015      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00e      	beq.n	8002a7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      break;
 8002a64:	e00b      	b.n	8002a7e <DMA_CheckFifoParam+0xe6>
      break;
 8002a66:	bf00      	nop
 8002a68:	e00a      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e008      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6e:	bf00      	nop
 8002a70:	e006      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
 8002a74:	e004      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <DMA_CheckFifoParam+0xe8>
      break;
 8002a7e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop

08002a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b089      	sub	sp, #36	; 0x24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	e175      	b.n	8002d9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	f040 8164 	bne.w	8002d96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d005      	beq.n	8002ae6 <HAL_GPIO_Init+0x56>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d130      	bne.n	8002b48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	005b      	lsls	r3, r3, #1
 8002af0:	2203      	movs	r2, #3
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	4013      	ands	r3, r2
 8002afc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68da      	ldr	r2, [r3, #12]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	f003 0201 	and.w	r2, r3, #1
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d017      	beq.n	8002b84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	2203      	movs	r2, #3
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	689a      	ldr	r2, [r3, #8]
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	fa02 f303 	lsl.w	r3, r2, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d123      	bne.n	8002bd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	08da      	lsrs	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3208      	adds	r2, #8
 8002b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	220f      	movs	r2, #15
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691a      	ldr	r2, [r3, #16]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	08da      	lsrs	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3208      	adds	r2, #8
 8002bd2:	69b9      	ldr	r1, [r7, #24]
 8002bd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	2203      	movs	r2, #3
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4013      	ands	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f003 0203 	and.w	r2, r3, #3
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 80be 	beq.w	8002d96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1a:	4b66      	ldr	r3, [pc, #408]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	4a65      	ldr	r2, [pc, #404]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002c20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c24:	6453      	str	r3, [r2, #68]	; 0x44
 8002c26:	4b63      	ldr	r3, [pc, #396]	; (8002db4 <HAL_GPIO_Init+0x324>)
 8002c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002c32:	4a61      	ldr	r2, [pc, #388]	; (8002db8 <HAL_GPIO_Init+0x328>)
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3302      	adds	r3, #2
 8002c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	220f      	movs	r2, #15
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_GPIO_Init+0x32c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d037      	beq.n	8002cce <HAL_GPIO_Init+0x23e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <HAL_GPIO_Init+0x330>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d031      	beq.n	8002cca <HAL_GPIO_Init+0x23a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_GPIO_Init+0x334>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d02b      	beq.n	8002cc6 <HAL_GPIO_Init+0x236>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a55      	ldr	r2, [pc, #340]	; (8002dc8 <HAL_GPIO_Init+0x338>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d025      	beq.n	8002cc2 <HAL_GPIO_Init+0x232>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a54      	ldr	r2, [pc, #336]	; (8002dcc <HAL_GPIO_Init+0x33c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d01f      	beq.n	8002cbe <HAL_GPIO_Init+0x22e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a53      	ldr	r2, [pc, #332]	; (8002dd0 <HAL_GPIO_Init+0x340>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d019      	beq.n	8002cba <HAL_GPIO_Init+0x22a>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a52      	ldr	r2, [pc, #328]	; (8002dd4 <HAL_GPIO_Init+0x344>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d013      	beq.n	8002cb6 <HAL_GPIO_Init+0x226>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a51      	ldr	r2, [pc, #324]	; (8002dd8 <HAL_GPIO_Init+0x348>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00d      	beq.n	8002cb2 <HAL_GPIO_Init+0x222>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a50      	ldr	r2, [pc, #320]	; (8002ddc <HAL_GPIO_Init+0x34c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <HAL_GPIO_Init+0x21e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4f      	ldr	r2, [pc, #316]	; (8002de0 <HAL_GPIO_Init+0x350>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_GPIO_Init+0x21a>
 8002ca6:	2309      	movs	r3, #9
 8002ca8:	e012      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002caa:	230a      	movs	r3, #10
 8002cac:	e010      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cae:	2308      	movs	r3, #8
 8002cb0:	e00e      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cb2:	2307      	movs	r3, #7
 8002cb4:	e00c      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cb6:	2306      	movs	r3, #6
 8002cb8:	e00a      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cba:	2305      	movs	r3, #5
 8002cbc:	e008      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cbe:	2304      	movs	r3, #4
 8002cc0:	e006      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e004      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	e002      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <HAL_GPIO_Init+0x240>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	69fa      	ldr	r2, [r7, #28]
 8002cd2:	f002 0203 	and.w	r2, r2, #3
 8002cd6:	0092      	lsls	r2, r2, #2
 8002cd8:	4093      	lsls	r3, r2
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002ce0:	4935      	ldr	r1, [pc, #212]	; (8002db8 <HAL_GPIO_Init+0x328>)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cee:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d12:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d18:	4b32      	ldr	r3, [pc, #200]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	4013      	ands	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d3c:	4a29      	ldr	r2, [pc, #164]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d42:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d66:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	43db      	mvns	r3, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d90:	4a14      	ldr	r2, [pc, #80]	; (8002de4 <HAL_GPIO_Init+0x354>)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	61fb      	str	r3, [r7, #28]
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	2b0f      	cmp	r3, #15
 8002da0:	f67f ae86 	bls.w	8002ab0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002da4:	bf00      	nop
 8002da6:	bf00      	nop
 8002da8:	3724      	adds	r7, #36	; 0x24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40013800 	.word	0x40013800
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	40020400 	.word	0x40020400
 8002dc4:	40020800 	.word	0x40020800
 8002dc8:	40020c00 	.word	0x40020c00
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	40021400 	.word	0x40021400
 8002dd4:	40021800 	.word	0x40021800
 8002dd8:	40021c00 	.word	0x40021c00
 8002ddc:	40022000 	.word	0x40022000
 8002de0:	40022400 	.word	0x40022400
 8002de4:	40013c00 	.word	0x40013c00

08002de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	807b      	strh	r3, [r7, #2]
 8002df4:	4613      	mov	r3, r2
 8002df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002df8:	787b      	ldrb	r3, [r7, #1]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d003      	beq.n	8002e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dfe:	887a      	ldrh	r2, [r7, #2]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002e04:	e003      	b.n	8002e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	041a      	lsls	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	619a      	str	r2, [r3, #24]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr

08002e1a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e1a:	b590      	push	{r4, r7, lr}
 8002e1c:	b08d      	sub	sp, #52	; 0x34
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f005 feac 	bl	8008b8e <USB_GetMode>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f040 84b7 	bne.w	80037ac <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f005 fe10 	bl	8008a68 <USB_ReadInterrupts>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 84ad 	beq.w	80037aa <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 fdfd 	bl	8008a68 <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d107      	bne.n	8002e88 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f002 0202 	and.w	r2, r2, #2
 8002e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f005 fdeb 	bl	8008a68 <USB_ReadInterrupts>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f003 0310 	and.w	r3, r3, #16
 8002e98:	2b10      	cmp	r3, #16
 8002e9a:	d161      	bne.n	8002f60 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0210 	bic.w	r2, r2, #16
 8002eaa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	6a1b      	ldr	r3, [r3, #32]
 8002eb0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	f003 020f 	and.w	r2, r3, #15
 8002eb8:	4613      	mov	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3304      	adds	r3, #4
 8002eca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	0c5b      	lsrs	r3, r3, #17
 8002ed0:	f003 030f 	and.w	r3, r3, #15
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d124      	bne.n	8002f22 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d035      	beq.n	8002f50 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	091b      	lsrs	r3, r3, #4
 8002eec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	6a38      	ldr	r0, [r7, #32]
 8002ef8:	f005 fc64 	bl	80087c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	691a      	ldr	r2, [r3, #16]
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f08:	441a      	add	r2, r3
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	6a1a      	ldr	r2, [r3, #32]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	091b      	lsrs	r3, r3, #4
 8002f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f1a:	441a      	add	r2, r3
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	621a      	str	r2, [r3, #32]
 8002f20:	e016      	b.n	8002f50 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	0c5b      	lsrs	r3, r3, #17
 8002f26:	f003 030f 	and.w	r3, r3, #15
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d110      	bne.n	8002f50 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f34:	2208      	movs	r2, #8
 8002f36:	4619      	mov	r1, r3
 8002f38:	6a38      	ldr	r0, [r7, #32]
 8002f3a:	f005 fc43 	bl	80087c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	6a1a      	ldr	r2, [r3, #32]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	091b      	lsrs	r3, r3, #4
 8002f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f4a:	441a      	add	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699a      	ldr	r2, [r3, #24]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0210 	orr.w	r2, r2, #16
 8002f5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f005 fd7f 	bl	8008a68 <USB_ReadInterrupts>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f74:	f040 80a7 	bne.w	80030c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f005 fd84 	bl	8008a8e <USB_ReadDevAllOutEpInterrupt>
 8002f86:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f88:	e099      	b.n	80030be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 808e 	beq.w	80030b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f005 fda8 	bl	8008af6 <USB_ReadDevOutEPInterrupt>
 8002fa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00c      	beq.n	8002fcc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fe8e 	bl	8003ce8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00c      	beq.n	8002ff0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 ff64 	bl	8003eb8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d008      	beq.n	800300c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	015a      	lsls	r2, r3, #5
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	4413      	add	r3, r2
 8003002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003006:	461a      	mov	r2, r3
 8003008:	2310      	movs	r3, #16
 800300a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d030      	beq.n	8003078 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	d109      	bne.n	8003036 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003030:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003034:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4413      	add	r3, r2
 8003048:	3304      	adds	r3, #4
 800304a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	78db      	ldrb	r3, [r3, #3]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d108      	bne.n	8003066 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	2200      	movs	r2, #0
 8003058:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	b2db      	uxtb	r3, r3
 800305e:	4619      	mov	r1, r3
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f009 fea5 	bl	800cdb0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003072:	461a      	mov	r2, r3
 8003074:	2302      	movs	r3, #2
 8003076:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f003 0320 	and.w	r3, r3, #32
 800307e:	2b00      	cmp	r3, #0
 8003080:	d008      	beq.n	8003094 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	015a      	lsls	r2, r3, #5
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	4413      	add	r3, r2
 800308a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308e:	461a      	mov	r2, r3
 8003090:	2320      	movs	r3, #32
 8003092:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d009      	beq.n	80030b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	015a      	lsls	r2, r3, #5
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	4413      	add	r3, r2
 80030a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030aa:	461a      	mov	r2, r3
 80030ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	3301      	adds	r3, #1
 80030b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80030be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f47f af62 	bne.w	8002f8a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f005 fccc 	bl	8008a68 <USB_ReadInterrupts>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80030da:	f040 80db 	bne.w	8003294 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f005 fced 	bl	8008ac2 <USB_ReadDevAllInEpInterrupt>
 80030e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80030ee:	e0cd      	b.n	800328c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80c2 	beq.w	8003280 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f005 fd13 	bl	8008b32 <USB_ReadDevInEPInterrupt>
 800310c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b00      	cmp	r3, #0
 8003116:	d057      	beq.n	80031c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	2201      	movs	r2, #1
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43db      	mvns	r3, r3
 8003132:	69f9      	ldr	r1, [r7, #28]
 8003134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003138:	4013      	ands	r3, r2
 800313a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313e:	015a      	lsls	r2, r3, #5
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003148:	461a      	mov	r2, r3
 800314a:	2301      	movs	r3, #1
 800314c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d132      	bne.n	80031bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	4613      	mov	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	4413      	add	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	440b      	add	r3, r1
 8003164:	334c      	adds	r3, #76	; 0x4c
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	4613      	mov	r3, r2
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4403      	add	r3, r0
 8003176:	3348      	adds	r3, #72	; 0x48
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4419      	add	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003180:	4613      	mov	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4413      	add	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4403      	add	r3, r0
 800318a:	334c      	adds	r3, #76	; 0x4c
 800318c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	2b00      	cmp	r3, #0
 8003192:	d113      	bne.n	80031bc <HAL_PCD_IRQHandler+0x3a2>
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	3354      	adds	r3, #84	; 0x54
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d108      	bne.n	80031bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031b4:	461a      	mov	r2, r3
 80031b6:	2101      	movs	r1, #1
 80031b8:	f005 fd1c 	bl	8008bf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	4619      	mov	r1, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f009 fd6f 	bl	800cca6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d008      	beq.n	80031e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	015a      	lsls	r2, r3, #5
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	4413      	add	r3, r2
 80031da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031de:	461a      	mov	r2, r3
 80031e0:	2308      	movs	r3, #8
 80031e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f003 0310 	and.w	r3, r3, #16
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d008      	beq.n	8003200 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fa:	461a      	mov	r2, r3
 80031fc:	2310      	movs	r3, #16
 80031fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003216:	461a      	mov	r2, r3
 8003218:	2340      	movs	r3, #64	; 0x40
 800321a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d023      	beq.n	800326e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003228:	6a38      	ldr	r0, [r7, #32]
 800322a:	f004 fd55 	bl	8007cd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800322e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003230:	4613      	mov	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	3338      	adds	r3, #56	; 0x38
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4413      	add	r3, r2
 800323e:	3304      	adds	r3, #4
 8003240:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	78db      	ldrb	r3, [r3, #3]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d108      	bne.n	800325c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2200      	movs	r2, #0
 800324e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f009 fdbc 	bl	800cdd4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	461a      	mov	r2, r3
 800326a:	2302      	movs	r3, #2
 800326c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003278:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 fca6 	bl	8003bcc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	3301      	adds	r3, #1
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	2b00      	cmp	r3, #0
 8003290:	f47f af2e 	bne.w	80030f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f005 fbe5 	bl	8008a68 <USB_ReadInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032a8:	d122      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032b8:	f023 0301 	bic.w	r3, r3, #1
 80032bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d108      	bne.n	80032da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80032d0:	2100      	movs	r1, #0
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f009 fe9e 	bl	800d014 <HAL_PCDEx_LPM_Callback>
 80032d8:	e002      	b.n	80032e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f009 fd5a 	bl	800cd94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80032ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f005 fbb7 	bl	8008a68 <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003304:	d112      	bne.n	800332c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f009 fd16 	bl	800cd48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800332a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f005 fb99 	bl	8008a68 <USB_ReadInterrupts>
 8003336:	4603      	mov	r3, r0
 8003338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800333c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003340:	d121      	bne.n	8003386 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695a      	ldr	r2, [r3, #20]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003350:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003358:	2b00      	cmp	r3, #0
 800335a:	d111      	bne.n	8003380 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	f003 020f 	and.w	r2, r3, #15
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003376:	2101      	movs	r1, #1
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f009 fe4b 	bl	800d014 <HAL_PCDEx_LPM_Callback>
 800337e:	e002      	b.n	8003386 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f009 fce1 	bl	800cd48 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f005 fb6c 	bl	8008a68 <USB_ReadInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339a:	f040 80b7 	bne.w	800350c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	69fa      	ldr	r2, [r7, #28]
 80033a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033ac:	f023 0301 	bic.w	r3, r3, #1
 80033b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2110      	movs	r1, #16
 80033b8:	4618      	mov	r0, r3
 80033ba:	f004 fc8d 	bl	8007cd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033be:	2300      	movs	r3, #0
 80033c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c2:	e046      	b.n	8003452 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80033c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d0:	461a      	mov	r2, r3
 80033d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033e8:	0151      	lsls	r1, r2, #5
 80033ea:	69fa      	ldr	r2, [r7, #28]
 80033ec:	440a      	add	r2, r1
 80033ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80033f6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80033f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003404:	461a      	mov	r2, r3
 8003406:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800340a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800340c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340e:	015a      	lsls	r2, r3, #5
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800341c:	0151      	lsls	r1, r2, #5
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	440a      	add	r2, r1
 8003422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003426:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800342a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800342c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800343c:	0151      	lsls	r1, r2, #5
 800343e:	69fa      	ldr	r2, [r7, #28]
 8003440:	440a      	add	r2, r1
 8003442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800344a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344e:	3301      	adds	r3, #1
 8003450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003458:	429a      	cmp	r2, r3
 800345a:	d3b3      	bcc.n	80033c4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003462:	69db      	ldr	r3, [r3, #28]
 8003464:	69fa      	ldr	r2, [r7, #28]
 8003466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800346a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800346e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003474:	2b00      	cmp	r3, #0
 8003476:	d016      	beq.n	80034a6 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800347e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003488:	f043 030b 	orr.w	r3, r3, #11
 800348c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800349e:	f043 030b 	orr.w	r3, r3, #11
 80034a2:	6453      	str	r3, [r2, #68]	; 0x44
 80034a4:	e015      	b.n	80034d2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b4:	4619      	mov	r1, r3
 80034b6:	f242 032b 	movw	r3, #8235	; 0x202b
 80034ba:	4313      	orrs	r3, r2
 80034bc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	69fa      	ldr	r2, [r7, #28]
 80034c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034cc:	f043 030b 	orr.w	r3, r3, #11
 80034d0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80034e4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f005 fb7c 	bl	8008bf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800350a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f005 faa9 	bl	8008a68 <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800351c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003520:	d124      	bne.n	800356c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f005 fb40 	bl	8008bac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f004 fc05 	bl	8007d40 <USB_GetDevSpeed>
 8003536:	4603      	mov	r3, r0
 8003538:	461a      	mov	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681c      	ldr	r4, [r3, #0]
 8003542:	f001 f99f 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 8003546:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800354c:	b2db      	uxtb	r3, r3
 800354e:	461a      	mov	r2, r3
 8003550:	4620      	mov	r0, r4
 8003552:	f004 fb1f 	bl	8007b94 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f009 fbcd 	bl	800ccf6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800356a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f005 fa79 	bl	8008a68 <USB_ReadInterrupts>
 8003576:	4603      	mov	r3, r0
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b08      	cmp	r3, #8
 800357e:	d10a      	bne.n	8003596 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f009 fbaa 	bl	800ccda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f002 0208 	and.w	r2, r2, #8
 8003594:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f005 fa64 	bl	8008a68 <USB_ReadInterrupts>
 80035a0:	4603      	mov	r3, r0
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b80      	cmp	r3, #128	; 0x80
 80035a8:	d122      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035b6:	2301      	movs	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	e014      	b.n	80035e6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d105      	bne.n	80035e0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 fac5 	bl	8003b6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	3301      	adds	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d3e5      	bcc.n	80035bc <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f005 fa37 	bl	8008a68 <USB_ReadInterrupts>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003604:	d13b      	bne.n	800367e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003606:	2301      	movs	r3, #1
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
 800360a:	e02b      	b.n	8003664 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	015a      	lsls	r2, r3, #5
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	4413      	add	r3, r2
 8003614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800361c:	6879      	ldr	r1, [r7, #4]
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	4613      	mov	r3, r2
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	3340      	adds	r3, #64	; 0x40
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d115      	bne.n	800365e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003632:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003634:	2b00      	cmp	r3, #0
 8003636:	da12      	bge.n	800365e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363c:	4613      	mov	r3, r2
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	4413      	add	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	333f      	adds	r3, #63	; 0x3f
 8003648:	2201      	movs	r2, #1
 800364a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003654:	b2db      	uxtb	r3, r3
 8003656:	4619      	mov	r1, r3
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fa86 	bl	8003b6a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	3301      	adds	r3, #1
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800366a:	429a      	cmp	r2, r3
 800366c:	d3ce      	bcc.n	800360c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800367c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f005 f9f0 	bl	8008a68 <USB_ReadInterrupts>
 8003688:	4603      	mov	r3, r0
 800368a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800368e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003692:	d155      	bne.n	8003740 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003694:	2301      	movs	r3, #1
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
 8003698:	e045      	b.n	8003726 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	4413      	add	r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d12e      	bne.n	8003720 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	da2b      	bge.n	8003720 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80036d4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80036d8:	429a      	cmp	r2, r3
 80036da:	d121      	bne.n	8003720 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e0:	4613      	mov	r3, r2
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80036fa:	6a3b      	ldr	r3, [r7, #32]
 80036fc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10a      	bne.n	8003720 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003718:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800371c:	6053      	str	r3, [r2, #4]
            break;
 800371e:	e007      	b.n	8003730 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003722:	3301      	adds	r3, #1
 8003724:	627b      	str	r3, [r7, #36]	; 0x24
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800372c:	429a      	cmp	r2, r3
 800372e:	d3b4      	bcc.n	800369a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800373e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f005 f98f 	bl	8008a68 <USB_ReadInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003754:	d10a      	bne.n	800376c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f009 fb4e 	bl	800cdf8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800376a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f005 f979 	bl	8008a68 <USB_ReadInterrupts>
 8003776:	4603      	mov	r3, r0
 8003778:	f003 0304 	and.w	r3, r3, #4
 800377c:	2b04      	cmp	r3, #4
 800377e:	d115      	bne.n	80037ac <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f009 fb3e 	bl	800ce14 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	e000      	b.n	80037ac <HAL_PCD_IRQHandler+0x992>
      return;
 80037aa:	bf00      	nop
    }
  }
}
 80037ac:	3734      	adds	r7, #52	; 0x34
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd90      	pop	{r4, r7, pc}

080037b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b082      	sub	sp, #8
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_PCD_SetAddress+0x1a>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e013      	b.n	80037f4 <HAL_PCD_SetAddress+0x42>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	78fa      	ldrb	r2, [r7, #3]
 80037d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	4611      	mov	r1, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f005 f919 	bl	8008a1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	4608      	mov	r0, r1
 8003806:	4611      	mov	r1, r2
 8003808:	461a      	mov	r2, r3
 800380a:	4603      	mov	r3, r0
 800380c:	70fb      	strb	r3, [r7, #3]
 800380e:	460b      	mov	r3, r1
 8003810:	803b      	strh	r3, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800381a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800381e:	2b00      	cmp	r3, #0
 8003820:	da0f      	bge.n	8003842 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 020f 	and.w	r2, r3, #15
 8003828:	4613      	mov	r3, r2
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	4413      	add	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	3338      	adds	r3, #56	; 0x38
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	4413      	add	r3, r2
 8003836:	3304      	adds	r3, #4
 8003838:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	705a      	strb	r2, [r3, #1]
 8003840:	e00f      	b.n	8003862 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	f003 020f 	and.w	r2, r3, #15
 8003848:	4613      	mov	r3, r2
 800384a:	00db      	lsls	r3, r3, #3
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	4413      	add	r3, r2
 8003858:	3304      	adds	r3, #4
 800385a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003862:	78fb      	ldrb	r3, [r7, #3]
 8003864:	f003 030f 	and.w	r3, r3, #15
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800386e:	883a      	ldrh	r2, [r7, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	78ba      	ldrb	r2, [r7, #2]
 8003878:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	785b      	ldrb	r3, [r3, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800388c:	78bb      	ldrb	r3, [r7, #2]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d102      	bne.n	8003898 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d101      	bne.n	80038a6 <HAL_PCD_EP_Open+0xaa>
 80038a2:	2302      	movs	r3, #2
 80038a4:	e00e      	b.n	80038c4 <HAL_PCD_EP_Open+0xc8>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68f9      	ldr	r1, [r7, #12]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f004 fa69 	bl	8007d8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80038c2:	7afb      	ldrb	r3, [r7, #11]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	460b      	mov	r3, r1
 80038da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	f003 020f 	and.w	r2, r3, #15
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4413      	add	r3, r2
 80038f2:	3304      	adds	r3, #4
 80038f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2200      	movs	r2, #0
 8003906:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	2200      	movs	r2, #0
 800390c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800390e:	7afb      	ldrb	r3, [r7, #11]
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	b2da      	uxtb	r2, r3
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d102      	bne.n	8003928 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	f003 030f 	and.w	r3, r3, #15
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6818      	ldr	r0, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	b2db      	uxtb	r3, r3
 800393c:	461a      	mov	r2, r3
 800393e:	6979      	ldr	r1, [r7, #20]
 8003940:	f004 fcfc 	bl	800833c <USB_EP0StartXfer>
 8003944:	e008      	b.n	8003958 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6818      	ldr	r0, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	461a      	mov	r2, r3
 8003952:	6979      	ldr	r1, [r7, #20]
 8003954:	f004 faa2 	bl	8007e9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b086      	sub	sp, #24
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	607a      	str	r2, [r7, #4]
 800396c:	603b      	str	r3, [r7, #0]
 800396e:	460b      	mov	r3, r1
 8003970:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003972:	7afb      	ldrb	r3, [r7, #11]
 8003974:	f003 020f 	and.w	r2, r3, #15
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	3338      	adds	r3, #56	; 0x38
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	3304      	adds	r3, #4
 8003988:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2200      	movs	r2, #0
 800399a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2201      	movs	r2, #1
 80039a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a2:	7afb      	ldrb	r3, [r7, #11]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	b2da      	uxtb	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d102      	bne.n	80039bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039bc:	7afb      	ldrb	r3, [r7, #11]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	461a      	mov	r2, r3
 80039d2:	6979      	ldr	r1, [r7, #20]
 80039d4:	f004 fcb2 	bl	800833c <USB_EP0StartXfer>
 80039d8:	e008      	b.n	80039ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6818      	ldr	r0, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	6979      	ldr	r1, [r7, #20]
 80039e8:	f004 fa58 	bl	8007e9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3718      	adds	r7, #24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
 80039fe:	460b      	mov	r3, r1
 8003a00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	f003 020f 	and.w	r2, r3, #15
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d901      	bls.n	8003a14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e050      	b.n	8003ab6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	da0f      	bge.n	8003a3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	4613      	mov	r3, r2
 8003a24:	00db      	lsls	r3, r3, #3
 8003a26:	4413      	add	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	3338      	adds	r3, #56	; 0x38
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	3304      	adds	r3, #4
 8003a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	705a      	strb	r2, [r3, #1]
 8003a3a:	e00d      	b.n	8003a58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	3304      	adds	r3, #4
 8003a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_PCD_EP_SetStall+0x82>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e01e      	b.n	8003ab6 <HAL_PCD_EP_SetStall+0xc0>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68f9      	ldr	r1, [r7, #12]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f004 fef4 	bl	8008874 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a8c:	78fb      	ldrb	r3, [r7, #3]
 8003a8e:	f003 030f 	and.w	r3, r3, #15
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6818      	ldr	r0, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	b2d9      	uxtb	r1, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f005 f8a4 	bl	8008bf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003aca:	78fb      	ldrb	r3, [r7, #3]
 8003acc:	f003 020f 	and.w	r2, r3, #15
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d901      	bls.n	8003adc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e042      	b.n	8003b62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003adc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	da0f      	bge.n	8003b04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ae4:	78fb      	ldrb	r3, [r7, #3]
 8003ae6:	f003 020f 	and.w	r2, r3, #15
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	3338      	adds	r3, #56	; 0x38
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4413      	add	r3, r2
 8003af8:	3304      	adds	r3, #4
 8003afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	705a      	strb	r2, [r3, #1]
 8003b02:	e00f      	b.n	8003b24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b04:	78fb      	ldrb	r3, [r7, #3]
 8003b06:	f003 020f 	and.w	r2, r3, #15
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4413      	add	r3, r2
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d101      	bne.n	8003b44 <HAL_PCD_EP_ClrStall+0x86>
 8003b40:	2302      	movs	r3, #2
 8003b42:	e00e      	b.n	8003b62 <HAL_PCD_EP_ClrStall+0xa4>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68f9      	ldr	r1, [r7, #12]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 fefc 	bl	8008950 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b084      	sub	sp, #16
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
 8003b72:	460b      	mov	r3, r1
 8003b74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	da0c      	bge.n	8003b98 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b7e:	78fb      	ldrb	r3, [r7, #3]
 8003b80:	f003 020f 	and.w	r2, r3, #15
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	3338      	adds	r3, #56	; 0x38
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	3304      	adds	r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	e00c      	b.n	8003bb2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b98:	78fb      	ldrb	r3, [r7, #3]
 8003b9a:	f003 020f 	and.w	r2, r3, #15
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	3304      	adds	r3, #4
 8003bb0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 fd1b 	bl	80085f4 <USB_EPStopXfer>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bc2:	7afb      	ldrb	r3, [r7, #11]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b08a      	sub	sp, #40	; 0x28
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	3338      	adds	r3, #56	; 0x38
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1a      	ldr	r2, [r3, #32]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d901      	bls.n	8003c04 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e06c      	b.n	8003cde <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	699a      	ldr	r2, [r3, #24]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6a1b      	ldr	r3, [r3, #32]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d902      	bls.n	8003c20 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	3303      	adds	r3, #3
 8003c24:	089b      	lsrs	r3, r3, #2
 8003c26:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c28:	e02b      	b.n	8003c82 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d902      	bls.n	8003c46 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3303      	adds	r3, #3
 8003c4a:	089b      	lsrs	r3, r3, #2
 8003c4c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6919      	ldr	r1, [r3, #16]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	b2da      	uxtb	r2, r3
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	9300      	str	r3, [sp, #0]
 8003c62:	4603      	mov	r3, r0
 8003c64:	6978      	ldr	r0, [r7, #20]
 8003c66:	f004 fd6f 	bl	8008748 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	691a      	ldr	r2, [r3, #16]
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	441a      	add	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6a1a      	ldr	r2, [r3, #32]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d809      	bhi.n	8003cac <PCD_WriteEmptyTxFifo+0xe0>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a1a      	ldr	r2, [r3, #32]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d203      	bcs.n	8003cac <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d1be      	bne.n	8003c2a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	699a      	ldr	r2, [r3, #24]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d811      	bhi.n	8003cdc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	43db      	mvns	r3, r3
 8003cd2:	6939      	ldr	r1, [r7, #16]
 8003cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd8:	4013      	ands	r3, r2
 8003cda:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3720      	adds	r7, #32
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b088      	sub	sp, #32
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf8:	69fb      	ldr	r3, [r7, #28]
 8003cfa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	333c      	adds	r3, #60	; 0x3c
 8003d00:	3304      	adds	r3, #4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d17b      	bne.n	8003e16 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f003 0308 	and.w	r3, r3, #8
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4a61      	ldr	r2, [pc, #388]	; (8003eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	f240 80b9 	bls.w	8003ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f000 80b3 	beq.w	8003ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d50:	6093      	str	r3, [r2, #8]
 8003d52:	e0a7      	b.n	8003ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2320      	movs	r3, #32
 8003d6e:	6093      	str	r3, [r2, #8]
 8003d70:	e098      	b.n	8003ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f040 8093 	bne.w	8003ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	4a4b      	ldr	r2, [pc, #300]	; (8003eb0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d90f      	bls.n	8003da6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da2:	6093      	str	r3, [r2, #8]
 8003da4:	e07e      	b.n	8003ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	4413      	add	r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	4413      	add	r3, r2
 8003db8:	3304      	adds	r3, #4
 8003dba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	0159      	lsls	r1, r3, #5
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	440b      	add	r3, r1
 8003dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd2:	1ad2      	subs	r2, r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d114      	bne.n	8003e08 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003df0:	461a      	mov	r2, r3
 8003df2:	2101      	movs	r1, #1
 8003df4:	f004 fefe 	bl	8008bf4 <USB_EP0_OutStart>
 8003df8:	e006      	b.n	8003e08 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	441a      	add	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f008 ff2e 	bl	800cc70 <HAL_PCD_DataOutStageCallback>
 8003e14:	e046      	b.n	8003ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	4a26      	ldr	r2, [pc, #152]	; (8003eb4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d124      	bne.n	8003e68 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00a      	beq.n	8003e3e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	461a      	mov	r2, r3
 8003e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e3a:	6093      	str	r3, [r2, #8]
 8003e3c:	e032      	b.n	8003ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d008      	beq.n	8003e5a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e54:	461a      	mov	r2, r3
 8003e56:	2320      	movs	r3, #32
 8003e58:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	4619      	mov	r1, r3
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f008 ff05 	bl	800cc70 <HAL_PCD_DataOutStageCallback>
 8003e66:	e01d      	b.n	8003ea4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d114      	bne.n	8003e98 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d108      	bne.n	8003e98 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e90:	461a      	mov	r2, r3
 8003e92:	2100      	movs	r1, #0
 8003e94:	f004 feae 	bl	8008bf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f008 fee6 	bl	800cc70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3720      	adds	r7, #32
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	4f54300a 	.word	0x4f54300a
 8003eb4:	4f54310a 	.word	0x4f54310a

08003eb8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	333c      	adds	r3, #60	; 0x3c
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	015a      	lsls	r2, r3, #5
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4413      	add	r3, r2
 8003ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d90e      	bls.n	8003f0c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d009      	beq.n	8003f0c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f04:	461a      	mov	r2, r3
 8003f06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f0a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f008 fe9d 	bl	800cc4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d90c      	bls.n	8003f34 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d108      	bne.n	8003f34 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2101      	movs	r1, #1
 8003f30:	f004 fe60 	bl	8008bf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	4f54300a 	.word	0x4f54300a

08003f44 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e29b      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	f000 8087 	beq.w	8004076 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f68:	4b96      	ldr	r3, [pc, #600]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b04      	cmp	r3, #4
 8003f72:	d00c      	beq.n	8003f8e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f74:	4b93      	ldr	r3, [pc, #588]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f003 030c 	and.w	r3, r3, #12
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d112      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62>
 8003f80:	4b90      	ldr	r3, [pc, #576]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8c:	d10b      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d06c      	beq.n	8004074 <HAL_RCC_OscConfig+0x130>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d168      	bne.n	8004074 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e275      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x7a>
 8003fb0:	4b84      	ldr	r3, [pc, #528]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a83      	ldr	r2, [pc, #524]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fba:	6013      	str	r3, [r2, #0]
 8003fbc:	e02e      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x9c>
 8003fc6:	4b7f      	ldr	r3, [pc, #508]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a7e      	ldr	r2, [pc, #504]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b7c      	ldr	r3, [pc, #496]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a7b      	ldr	r2, [pc, #492]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0xc0>
 8003fea:	4b76      	ldr	r3, [pc, #472]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a75      	ldr	r2, [pc, #468]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b73      	ldr	r3, [pc, #460]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a72      	ldr	r2, [pc, #456]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xd8>
 8004004:	4b6f      	ldr	r3, [pc, #444]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b6c      	ldr	r3, [pc, #432]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6b      	ldr	r2, [pc, #428]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004024:	f7fe f830 	bl	8002088 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800402c:	f7fe f82c 	bl	8002088 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e229      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b61      	ldr	r3, [pc, #388]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xe8>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fe f81c 	bl	8002088 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004054:	f7fe f818 	bl	8002088 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e215      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	4b57      	ldr	r3, [pc, #348]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x110>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d069      	beq.n	8004156 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004082:	4b50      	ldr	r3, [pc, #320]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b4d      	ldr	r3, [pc, #308]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b08      	cmp	r3, #8
 8004098:	d11c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x190>
 800409a:	4b4a      	ldr	r3, [pc, #296]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	4b47      	ldr	r3, [pc, #284]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCC_OscConfig+0x17a>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e1e9      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b41      	ldr	r3, [pc, #260]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	493d      	ldr	r1, [pc, #244]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	e040      	b.n	8004156 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d023      	beq.n	8004124 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040dc:	4b39      	ldr	r3, [pc, #228]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a38      	ldr	r2, [pc, #224]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80040e2:	f043 0301 	orr.w	r3, r3, #1
 80040e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd ffce 	bl	8002088 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f0:	f7fd ffca 	bl	8002088 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e1c7      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004102:	4b30      	ldr	r3, [pc, #192]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0f0      	beq.n	80040f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b2d      	ldr	r3, [pc, #180]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4929      	ldr	r1, [pc, #164]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
 8004122:	e018      	b.n	8004156 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004124:	4b27      	ldr	r3, [pc, #156]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a26      	ldr	r2, [pc, #152]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800412a:	f023 0301 	bic.w	r3, r3, #1
 800412e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004130:	f7fd ffaa 	bl	8002088 <HAL_GetTick>
 8004134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004136:	e008      	b.n	800414a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004138:	f7fd ffa6 	bl	8002088 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	2b02      	cmp	r3, #2
 8004144:	d901      	bls.n	800414a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e1a3      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800414a:	4b1e      	ldr	r3, [pc, #120]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1f0      	bne.n	8004138 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0308 	and.w	r3, r3, #8
 800415e:	2b00      	cmp	r3, #0
 8004160:	d038      	beq.n	80041d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d019      	beq.n	800419e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800416a:	4b16      	ldr	r3, [pc, #88]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 800416c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416e:	4a15      	ldr	r2, [pc, #84]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004176:	f7fd ff87 	bl	8002088 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417e:	f7fd ff83 	bl	8002088 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e180      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 8004192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0f0      	beq.n	800417e <HAL_RCC_OscConfig+0x23a>
 800419c:	e01a      	b.n	80041d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80041a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a2:	4a08      	ldr	r2, [pc, #32]	; (80041c4 <HAL_RCC_OscConfig+0x280>)
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041aa:	f7fd ff6d 	bl	8002088 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041b2:	f7fd ff69 	bl	8002088 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d903      	bls.n	80041c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e166      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
 80041c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c8:	4b92      	ldr	r3, [pc, #584]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80041ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1ee      	bne.n	80041b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 80a4 	beq.w	800432a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041e2:	4b8c      	ldr	r3, [pc, #560]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10d      	bne.n	800420a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ee:	4b89      	ldr	r3, [pc, #548]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a88      	ldr	r2, [pc, #544]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b86      	ldr	r3, [pc, #536]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420a:	4b83      	ldr	r3, [pc, #524]	; (8004418 <HAL_RCC_OscConfig+0x4d4>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d118      	bne.n	8004248 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004216:	4b80      	ldr	r3, [pc, #512]	; (8004418 <HAL_RCC_OscConfig+0x4d4>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a7f      	ldr	r2, [pc, #508]	; (8004418 <HAL_RCC_OscConfig+0x4d4>)
 800421c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004222:	f7fd ff31 	bl	8002088 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422a:	f7fd ff2d 	bl	8002088 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b64      	cmp	r3, #100	; 0x64
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e12a      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800423c:	4b76      	ldr	r3, [pc, #472]	; (8004418 <HAL_RCC_OscConfig+0x4d4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x31a>
 8004250:	4b70      	ldr	r3, [pc, #448]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a6f      	ldr	r2, [pc, #444]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	e02d      	b.n	80042ba <HAL_RCC_OscConfig+0x376>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x33c>
 8004266:	4b6b      	ldr	r3, [pc, #428]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a6a      	ldr	r2, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	4b68      	ldr	r3, [pc, #416]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a67      	ldr	r2, [pc, #412]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004278:	f023 0304 	bic.w	r3, r3, #4
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	e01c      	b.n	80042ba <HAL_RCC_OscConfig+0x376>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2b05      	cmp	r3, #5
 8004286:	d10c      	bne.n	80042a2 <HAL_RCC_OscConfig+0x35e>
 8004288:	4b62      	ldr	r3, [pc, #392]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	4a61      	ldr	r2, [pc, #388]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800428e:	f043 0304 	orr.w	r3, r3, #4
 8004292:	6713      	str	r3, [r2, #112]	; 0x70
 8004294:	4b5f      	ldr	r3, [pc, #380]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a5e      	ldr	r2, [pc, #376]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e00b      	b.n	80042ba <HAL_RCC_OscConfig+0x376>
 80042a2:	4b5c      	ldr	r3, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4a5b      	ldr	r2, [pc, #364]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	f023 0301 	bic.w	r3, r3, #1
 80042ac:	6713      	str	r3, [r2, #112]	; 0x70
 80042ae:	4b59      	ldr	r3, [pc, #356]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b2:	4a58      	ldr	r2, [pc, #352]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80042b4:	f023 0304 	bic.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d015      	beq.n	80042ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c2:	f7fd fee1 	bl	8002088 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042c8:	e00a      	b.n	80042e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ca:	f7fd fedd 	bl	8002088 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d8:	4293      	cmp	r3, r2
 80042da:	d901      	bls.n	80042e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e0d8      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	4b4c      	ldr	r3, [pc, #304]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0ee      	beq.n	80042ca <HAL_RCC_OscConfig+0x386>
 80042ec:	e014      	b.n	8004318 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ee:	f7fd fecb 	bl	8002088 <HAL_GetTick>
 80042f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f4:	e00a      	b.n	800430c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f6:	f7fd fec7 	bl	8002088 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	f241 3288 	movw	r2, #5000	; 0x1388
 8004304:	4293      	cmp	r3, r2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e0c2      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430c:	4b41      	ldr	r3, [pc, #260]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1ee      	bne.n	80042f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431e:	4b3d      	ldr	r3, [pc, #244]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a3c      	ldr	r2, [pc, #240]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f000 80ae 	beq.w	8004490 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004334:	4b37      	ldr	r3, [pc, #220]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f003 030c 	and.w	r3, r3, #12
 800433c:	2b08      	cmp	r3, #8
 800433e:	d06d      	beq.n	800441c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	2b02      	cmp	r3, #2
 8004346:	d14b      	bne.n	80043e0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004348:	4b32      	ldr	r3, [pc, #200]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a31      	ldr	r2, [pc, #196]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 800434e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fd fe98 	bl	8002088 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800435c:	f7fd fe94 	bl	8002088 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e091      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	4b29      	ldr	r3, [pc, #164]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a1b      	ldr	r3, [r3, #32]
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	431a      	orrs	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	3b01      	subs	r3, #1
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	071b      	lsls	r3, r3, #28
 80043a6:	491b      	ldr	r1, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043ac:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a18      	ldr	r2, [pc, #96]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd fe66 	bl	8002088 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fe62 	bl	8002088 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e05f      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d2:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x47c>
 80043de:	e057      	b.n	8004490 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a0b      	ldr	r2, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 80043e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ec:	f7fd fe4c 	bl	8002088 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f4:	f7fd fe48 	bl	8002088 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e045      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_RCC_OscConfig+0x4d0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1f0      	bne.n	80043f4 <HAL_RCC_OscConfig+0x4b0>
 8004412:	e03d      	b.n	8004490 <HAL_RCC_OscConfig+0x54c>
 8004414:	40023800 	.word	0x40023800
 8004418:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800441c:	4b1f      	ldr	r3, [pc, #124]	; (800449c <HAL_RCC_OscConfig+0x558>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d030      	beq.n	800448c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d129      	bne.n	800448c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d122      	bne.n	800448c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004452:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004454:	4293      	cmp	r3, r2
 8004456:	d119      	bne.n	800448c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	3b01      	subs	r3, #1
 8004466:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d10f      	bne.n	800448c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d107      	bne.n	800448c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004486:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004488:	429a      	cmp	r2, r3
 800448a:	d001      	beq.n	8004490 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40023800 	.word	0x40023800

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0d0      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b6a      	ldr	r3, [pc, #424]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b67      	ldr	r3, [pc, #412]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 020f 	bic.w	r2, r3, #15
 80044ce:	4965      	ldr	r1, [pc, #404]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b63      	ldr	r3, [pc, #396]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b8      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d020      	beq.n	8004536 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004500:	4b59      	ldr	r3, [pc, #356]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	4a58      	ldr	r2, [pc, #352]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800450a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004518:	4b53      	ldr	r3, [pc, #332]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	4a52      	ldr	r2, [pc, #328]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800451e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004522:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004524:	4b50      	ldr	r3, [pc, #320]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	494d      	ldr	r1, [pc, #308]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d040      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d107      	bne.n	800455a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800454a:	4b47      	ldr	r3, [pc, #284]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d115      	bne.n	8004582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e07f      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d107      	bne.n	8004572 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004562:	4b41      	ldr	r3, [pc, #260]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e073      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004572:	4b3d      	ldr	r3, [pc, #244]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e06b      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004582:	4b39      	ldr	r3, [pc, #228]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f023 0203 	bic.w	r2, r3, #3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	4936      	ldr	r1, [pc, #216]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004590:	4313      	orrs	r3, r2
 8004592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004594:	f7fd fd78 	bl	8002088 <HAL_GetTick>
 8004598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7fd fd74 	bl	8002088 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e053      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b2:	4b2d      	ldr	r3, [pc, #180]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f003 020c 	and.w	r2, r3, #12
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d1eb      	bne.n	800459c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045c4:	4b27      	ldr	r3, [pc, #156]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 030f 	and.w	r3, r3, #15
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d210      	bcs.n	80045f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d2:	4b24      	ldr	r3, [pc, #144]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 020f 	bic.w	r2, r3, #15
 80045da:	4922      	ldr	r1, [pc, #136]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	4313      	orrs	r3, r2
 80045e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d001      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e032      	b.n	800465a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0304 	and.w	r3, r3, #4
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004600:	4b19      	ldr	r3, [pc, #100]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	4916      	ldr	r1, [pc, #88]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d009      	beq.n	8004632 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800461e:	4b12      	ldr	r3, [pc, #72]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	490e      	ldr	r1, [pc, #56]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004632:	f000 f821 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8004636:	4602      	mov	r2, r0
 8004638:	4b0b      	ldr	r3, [pc, #44]	; (8004668 <HAL_RCC_ClockConfig+0x1c8>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	091b      	lsrs	r3, r3, #4
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	490a      	ldr	r1, [pc, #40]	; (800466c <HAL_RCC_ClockConfig+0x1cc>)
 8004644:	5ccb      	ldrb	r3, [r1, r3]
 8004646:	fa22 f303 	lsr.w	r3, r2, r3
 800464a:	4a09      	ldr	r2, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1d0>)
 800464c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800464e:	4b09      	ldr	r3, [pc, #36]	; (8004674 <HAL_RCC_ClockConfig+0x1d4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd f940 	bl	80018d8 <HAL_InitTick>

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40023c00 	.word	0x40023c00
 8004668:	40023800 	.word	0x40023800
 800466c:	0801c854 	.word	0x0801c854
 8004670:	2000000c 	.word	0x2000000c
 8004674:	20000010 	.word	0x20000010

08004678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800467c:	b094      	sub	sp, #80	; 0x50
 800467e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004680:	2300      	movs	r3, #0
 8004682:	647b      	str	r3, [r7, #68]	; 0x44
 8004684:	2300      	movs	r3, #0
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004688:	2300      	movs	r3, #0
 800468a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800468c:	2300      	movs	r3, #0
 800468e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004690:	4b79      	ldr	r3, [pc, #484]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b08      	cmp	r3, #8
 800469a:	d00d      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0x40>
 800469c:	2b08      	cmp	r3, #8
 800469e:	f200 80e1 	bhi.w	8004864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x34>
 80046a6:	2b04      	cmp	r3, #4
 80046a8:	d003      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046aa:	e0db      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ac:	4b73      	ldr	r3, [pc, #460]	; (800487c <HAL_RCC_GetSysClockFreq+0x204>)
 80046ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b0:	e0db      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <HAL_RCC_GetSysClockFreq+0x208>)
 80046b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80046b6:	e0d8      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b8:	4b6f      	ldr	r3, [pc, #444]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80046c2:	4b6d      	ldr	r3, [pc, #436]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d063      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ce:	4b6a      	ldr	r3, [pc, #424]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	099b      	lsrs	r3, r3, #6
 80046d4:	2200      	movs	r2, #0
 80046d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80046d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80046da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e0:	633b      	str	r3, [r7, #48]	; 0x30
 80046e2:	2300      	movs	r3, #0
 80046e4:	637b      	str	r3, [r7, #52]	; 0x34
 80046e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046ea:	4622      	mov	r2, r4
 80046ec:	462b      	mov	r3, r5
 80046ee:	f04f 0000 	mov.w	r0, #0
 80046f2:	f04f 0100 	mov.w	r1, #0
 80046f6:	0159      	lsls	r1, r3, #5
 80046f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046fc:	0150      	lsls	r0, r2, #5
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4621      	mov	r1, r4
 8004704:	1a51      	subs	r1, r2, r1
 8004706:	6139      	str	r1, [r7, #16]
 8004708:	4629      	mov	r1, r5
 800470a:	eb63 0301 	sbc.w	r3, r3, r1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800471c:	4659      	mov	r1, fp
 800471e:	018b      	lsls	r3, r1, #6
 8004720:	4651      	mov	r1, sl
 8004722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004726:	4651      	mov	r1, sl
 8004728:	018a      	lsls	r2, r1, #6
 800472a:	4651      	mov	r1, sl
 800472c:	ebb2 0801 	subs.w	r8, r2, r1
 8004730:	4659      	mov	r1, fp
 8004732:	eb63 0901 	sbc.w	r9, r3, r1
 8004736:	f04f 0200 	mov.w	r2, #0
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474a:	4690      	mov	r8, r2
 800474c:	4699      	mov	r9, r3
 800474e:	4623      	mov	r3, r4
 8004750:	eb18 0303 	adds.w	r3, r8, r3
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	462b      	mov	r3, r5
 8004758:	eb49 0303 	adc.w	r3, r9, r3
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800476a:	4629      	mov	r1, r5
 800476c:	024b      	lsls	r3, r1, #9
 800476e:	4621      	mov	r1, r4
 8004770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004774:	4621      	mov	r1, r4
 8004776:	024a      	lsls	r2, r1, #9
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800477e:	2200      	movs	r2, #0
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
 8004782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004788:	f7fb fe12 	bl	80003b0 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4613      	mov	r3, r2
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004794:	e058      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004796:	4b38      	ldr	r3, [pc, #224]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	099b      	lsrs	r3, r3, #6
 800479c:	2200      	movs	r2, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	4611      	mov	r1, r2
 80047a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	2300      	movs	r3, #0
 80047aa:	627b      	str	r3, [r7, #36]	; 0x24
 80047ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047b0:	4642      	mov	r2, r8
 80047b2:	464b      	mov	r3, r9
 80047b4:	f04f 0000 	mov.w	r0, #0
 80047b8:	f04f 0100 	mov.w	r1, #0
 80047bc:	0159      	lsls	r1, r3, #5
 80047be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c2:	0150      	lsls	r0, r2, #5
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4641      	mov	r1, r8
 80047ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80047ce:	4649      	mov	r1, r9
 80047d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047e8:	ebb2 040a 	subs.w	r4, r2, sl
 80047ec:	eb63 050b 	sbc.w	r5, r3, fp
 80047f0:	f04f 0200 	mov.w	r2, #0
 80047f4:	f04f 0300 	mov.w	r3, #0
 80047f8:	00eb      	lsls	r3, r5, #3
 80047fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047fe:	00e2      	lsls	r2, r4, #3
 8004800:	4614      	mov	r4, r2
 8004802:	461d      	mov	r5, r3
 8004804:	4643      	mov	r3, r8
 8004806:	18e3      	adds	r3, r4, r3
 8004808:	603b      	str	r3, [r7, #0]
 800480a:	464b      	mov	r3, r9
 800480c:	eb45 0303 	adc.w	r3, r5, r3
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481e:	4629      	mov	r1, r5
 8004820:	028b      	lsls	r3, r1, #10
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004828:	4621      	mov	r1, r4
 800482a:	028a      	lsls	r2, r1, #10
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004832:	2200      	movs	r2, #0
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	61fa      	str	r2, [r7, #28]
 8004838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800483c:	f7fb fdb8 	bl	80003b0 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_GetSysClockFreq+0x200>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	3301      	adds	r3, #1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800485a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004862:	e002      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <HAL_RCC_GetSysClockFreq+0x204>)
 8004866:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800486c:	4618      	mov	r0, r3
 800486e:	3750      	adds	r7, #80	; 0x50
 8004870:	46bd      	mov	sp, r7
 8004872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	00f42400 	.word	0x00f42400
 8004880:	007a1200 	.word	0x007a1200

08004884 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	; (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	2000000c 	.word	0x2000000c

0800489c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a0:	f7ff fff0 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	; (80048c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	0801c864 	.word	0x0801c864

080048c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c8:	f7ff ffdc 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0b5b      	lsrs	r3, r3, #13
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	; (80048e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	0801c864 	.word	0x0801c864

080048ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	220f      	movs	r2, #15
 80048fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048fc:	4b12      	ldr	r3, [pc, #72]	; (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0203 	and.w	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004908:	4b0f      	ldr	r3, [pc, #60]	; (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004920:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800492e:	4b07      	ldr	r3, [pc, #28]	; (800494c <HAL_RCC_GetClockConfig+0x60>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 020f 	and.w	r2, r3, #15
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	40023c00 	.word	0x40023c00

08004950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b088      	sub	sp, #32
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004958:	2300      	movs	r3, #0
 800495a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800495c:	2300      	movs	r3, #0
 800495e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004960:	2300      	movs	r3, #0
 8004962:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004964:	2300      	movs	r3, #0
 8004966:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d012      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004978:	4b69      	ldr	r3, [pc, #420]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	4a68      	ldr	r2, [pc, #416]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800497e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004982:	6093      	str	r3, [r2, #8]
 8004984:	4b66      	ldr	r3, [pc, #408]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	4964      	ldr	r1, [pc, #400]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004996:	2b00      	cmp	r3, #0
 8004998:	d101      	bne.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800499a:	2301      	movs	r3, #1
 800499c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d017      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049aa:	4b5d      	ldr	r3, [pc, #372]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b8:	4959      	ldr	r1, [pc, #356]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c8:	d101      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049d6:	2301      	movs	r3, #1
 80049d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d017      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049e6:	4b4e      	ldr	r3, [pc, #312]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ec:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	494a      	ldr	r1, [pc, #296]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a04:	d101      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a06:	2301      	movs	r3, #1
 8004a08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a12:	2301      	movs	r3, #1
 8004a14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a22:	2301      	movs	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 808b 	beq.w	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a34:	4b3a      	ldr	r3, [pc, #232]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	4a39      	ldr	r2, [pc, #228]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a40:	4b37      	ldr	r3, [pc, #220]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a4c:	4b35      	ldr	r3, [pc, #212]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a34      	ldr	r2, [pc, #208]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a58:	f7fd fb16 	bl	8002088 <HAL_GetTick>
 8004a5c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a60:	f7fd fb12 	bl	8002088 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e38f      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a72:	4b2c      	ldr	r3, [pc, #176]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a7e:	4b28      	ldr	r3, [pc, #160]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a86:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d035      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d02e      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a9c:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aa6:	4b1e      	ldr	r3, [pc, #120]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a1d      	ldr	r2, [pc, #116]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ab2:	4b1b      	ldr	r3, [pc, #108]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab6:	4a1a      	ldr	r2, [pc, #104]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004abc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004abe:	4a18      	ldr	r2, [pc, #96]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ac4:	4b16      	ldr	r3, [pc, #88]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d114      	bne.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad0:	f7fd fada 	bl	8002088 <HAL_GetTick>
 8004ad4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad6:	e00a      	b.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ad8:	f7fd fad6 	bl	8002088 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e351      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0ee      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b06:	d111      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b08:	4b05      	ldr	r3, [pc, #20]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b14:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b16:	400b      	ands	r3, r1
 8004b18:	4901      	ldr	r1, [pc, #4]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	608b      	str	r3, [r1, #8]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40007000 	.word	0x40007000
 8004b28:	0ffffcff 	.word	0x0ffffcff
 8004b2c:	4bac      	ldr	r3, [pc, #688]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	4aab      	ldr	r2, [pc, #684]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b32:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b36:	6093      	str	r3, [r2, #8]
 8004b38:	4ba9      	ldr	r3, [pc, #676]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b3a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b44:	49a6      	ldr	r1, [pc, #664]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d010      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b56:	4ba2      	ldr	r3, [pc, #648]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b5c:	4aa0      	ldr	r2, [pc, #640]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b66:	4b9e      	ldr	r3, [pc, #632]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b68:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b70:	499b      	ldr	r1, [pc, #620]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b84:	4b96      	ldr	r3, [pc, #600]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b92:	4993      	ldr	r1, [pc, #588]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ba6:	4b8e      	ldr	r3, [pc, #568]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bb4:	498a      	ldr	r1, [pc, #552]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bc8:	4b85      	ldr	r3, [pc, #532]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd6:	4982      	ldr	r1, [pc, #520]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bea:	4b7d      	ldr	r3, [pc, #500]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4979      	ldr	r1, [pc, #484]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00a      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c0c:	4b74      	ldr	r3, [pc, #464]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c1a:	4971      	ldr	r1, [pc, #452]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c2e:	4b6c      	ldr	r3, [pc, #432]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c34:	f023 020c 	bic.w	r2, r3, #12
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c3c:	4968      	ldr	r1, [pc, #416]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c50:	4b63      	ldr	r3, [pc, #396]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c56:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c5e:	4960      	ldr	r1, [pc, #384]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c72:	4b5b      	ldr	r3, [pc, #364]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	4957      	ldr	r1, [pc, #348]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c94:	4b52      	ldr	r3, [pc, #328]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca2:	494f      	ldr	r1, [pc, #316]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cbc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	4946      	ldr	r1, [pc, #280]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cd8:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cde:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ce6:	493e      	ldr	r1, [pc, #248]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004cfa:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d08:	4935      	ldr	r1, [pc, #212]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d1c:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2a:	492d      	ldr	r1, [pc, #180]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d011      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d3e:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d4c:	4924      	ldr	r1, [pc, #144]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d5c:	d101      	bne.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d001      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d7e:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d84:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8c:	4914      	ldr	r1, [pc, #80]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d00b      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004da0:	4b0f      	ldr	r3, [pc, #60]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db0:	490b      	ldr	r1, [pc, #44]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00f      	beq.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd4:	4902      	ldr	r1, [pc, #8]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ddc:	e002      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004dde:	bf00      	nop
 8004de0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00b      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004df0:	4b8a      	ldr	r3, [pc, #552]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e00:	4986      	ldr	r1, [pc, #536]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00b      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004e14:	4b81      	ldr	r3, [pc, #516]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e24:	497d      	ldr	r1, [pc, #500]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d006      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	f000 80d6 	beq.w	8004fec <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e40:	4b76      	ldr	r3, [pc, #472]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a75      	ldr	r2, [pc, #468]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e4c:	f7fd f91c 	bl	8002088 <HAL_GetTick>
 8004e50:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004e54:	f7fd f918 	bl	8002088 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b64      	cmp	r3, #100	; 0x64
 8004e60:	d901      	bls.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e195      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e66:	4b6d      	ldr	r3, [pc, #436]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d021      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11d      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e86:	4b65      	ldr	r3, [pc, #404]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e8c:	0c1b      	lsrs	r3, r3, #16
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e94:	4b61      	ldr	r3, [pc, #388]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9a:	0e1b      	lsrs	r3, r3, #24
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	019a      	lsls	r2, r3, #6
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	041b      	lsls	r3, r3, #16
 8004eac:	431a      	orrs	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	071b      	lsls	r3, r3, #28
 8004eba:	4958      	ldr	r1, [pc, #352]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d004      	beq.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d02e      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eec:	d129      	bne.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004eee:	4b4b      	ldr	r3, [pc, #300]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef4:	0c1b      	lsrs	r3, r3, #16
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004efc:	4b47      	ldr	r3, [pc, #284]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f02:	0f1b      	lsrs	r3, r3, #28
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	019a      	lsls	r2, r3, #6
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	041b      	lsls	r3, r3, #16
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	061b      	lsls	r3, r3, #24
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	071b      	lsls	r3, r3, #28
 8004f22:	493e      	ldr	r1, [pc, #248]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f2a:	4b3c      	ldr	r3, [pc, #240]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f30:	f023 021f 	bic.w	r2, r3, #31
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	4938      	ldr	r1, [pc, #224]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d01d      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004f4e:	4b33      	ldr	r3, [pc, #204]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f54:	0e1b      	lsrs	r3, r3, #24
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f5c:	4b2f      	ldr	r3, [pc, #188]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f62:	0f1b      	lsrs	r3, r3, #28
 8004f64:	f003 0307 	and.w	r3, r3, #7
 8004f68:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	019a      	lsls	r2, r3, #6
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	041b      	lsls	r3, r3, #16
 8004f76:	431a      	orrs	r2, r3
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	061b      	lsls	r3, r3, #24
 8004f7c:	431a      	orrs	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	071b      	lsls	r3, r3, #28
 8004f82:	4926      	ldr	r1, [pc, #152]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d011      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	019a      	lsls	r2, r3, #6
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	041b      	lsls	r3, r3, #16
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	061b      	lsls	r3, r3, #24
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	071b      	lsls	r3, r3, #28
 8004fb2:	491a      	ldr	r1, [pc, #104]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004fba:	4b18      	ldr	r3, [pc, #96]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a17      	ldr	r2, [pc, #92]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fc0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc6:	f7fd f85f 	bl	8002088 <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fcc:	e008      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004fce:	f7fd f85b 	bl	8002088 <HAL_GetTick>
 8004fd2:	4602      	mov	r2, r0
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	1ad3      	subs	r3, r2, r3
 8004fd8:	2b64      	cmp	r3, #100	; 0x64
 8004fda:	d901      	bls.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e0d8      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004fe0:	4b0e      	ldr	r3, [pc, #56]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f0      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	f040 80ce 	bne.w	8005190 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a08      	ldr	r2, [pc, #32]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ffa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005000:	f7fd f842 	bl	8002088 <HAL_GetTick>
 8005004:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005006:	e00b      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005008:	f7fd f83e 	bl	8002088 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d904      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0bb      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005020:	4b5e      	ldr	r3, [pc, #376]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005028:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502c:	d0ec      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d003      	beq.n	8005042 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800504a:	2b00      	cmp	r3, #0
 800504c:	d02e      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	2b00      	cmp	r3, #0
 8005054:	d12a      	bne.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005056:	4b51      	ldr	r3, [pc, #324]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	0c1b      	lsrs	r3, r3, #16
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005064:	4b4d      	ldr	r3, [pc, #308]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506a:	0f1b      	lsrs	r3, r3, #28
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	019a      	lsls	r2, r3, #6
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	061b      	lsls	r3, r3, #24
 8005084:	431a      	orrs	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	071b      	lsls	r3, r3, #28
 800508a:	4944      	ldr	r1, [pc, #272]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005092:	4b42      	ldr	r3, [pc, #264]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005098:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a0:	3b01      	subs	r3, #1
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	493d      	ldr	r1, [pc, #244]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d022      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050c0:	d11d      	bne.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050c2:	4b36      	ldr	r3, [pc, #216]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c8:	0e1b      	lsrs	r3, r3, #24
 80050ca:	f003 030f 	and.w	r3, r3, #15
 80050ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80050d0:	4b32      	ldr	r3, [pc, #200]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	0f1b      	lsrs	r3, r3, #28
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	019a      	lsls	r2, r3, #6
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	041b      	lsls	r3, r3, #16
 80050ea:	431a      	orrs	r2, r3
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	061b      	lsls	r3, r3, #24
 80050f0:	431a      	orrs	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	071b      	lsls	r3, r3, #28
 80050f6:	4929      	ldr	r1, [pc, #164]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d028      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800510a:	4b24      	ldr	r3, [pc, #144]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	0e1b      	lsrs	r3, r3, #24
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005118:	4b20      	ldr	r3, [pc, #128]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800511a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511e:	0c1b      	lsrs	r3, r3, #16
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	019a      	lsls	r2, r3, #6
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	041b      	lsls	r3, r3, #16
 8005130:	431a      	orrs	r2, r3
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	061b      	lsls	r3, r3, #24
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	69db      	ldr	r3, [r3, #28]
 800513c:	071b      	lsls	r3, r3, #28
 800513e:	4917      	ldr	r1, [pc, #92]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005154:	4911      	ldr	r1, [pc, #68]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800515c:	4b0f      	ldr	r3, [pc, #60]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a0e      	ldr	r2, [pc, #56]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005166:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005168:	f7fc ff8e 	bl	8002088 <HAL_GetTick>
 800516c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005170:	f7fc ff8a 	bl	8002088 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e007      	b.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005182:	4b06      	ldr	r3, [pc, #24]	; (800519c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800518a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800518e:	d1ef      	bne.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3720      	adds	r7, #32
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40023800 	.word	0x40023800

080051a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d101      	bne.n	80051b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e049      	b.n	8005246 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d106      	bne.n	80051cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f841 	bl	800524e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3304      	adds	r3, #4
 80051dc:	4619      	mov	r1, r3
 80051de:	4610      	mov	r0, r2
 80051e0:	f000 fc66 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005256:	bf00      	nop
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b01      	cmp	r3, #1
 8005276:	d001      	beq.n	800527c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e054      	b.n	8005326 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f042 0201 	orr.w	r2, r2, #1
 8005292:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a26      	ldr	r2, [pc, #152]	; (8005334 <HAL_TIM_Base_Start_IT+0xd0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d022      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x80>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a6:	d01d      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x80>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a22      	ldr	r2, [pc, #136]	; (8005338 <HAL_TIM_Base_Start_IT+0xd4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d018      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x80>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a21      	ldr	r2, [pc, #132]	; (800533c <HAL_TIM_Base_Start_IT+0xd8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <HAL_TIM_Base_Start_IT+0xdc>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00e      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x80>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <HAL_TIM_Base_Start_IT+0xe0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d009      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x80>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1c      	ldr	r2, [pc, #112]	; (8005348 <HAL_TIM_Base_Start_IT+0xe4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d004      	beq.n	80052e4 <HAL_TIM_Base_Start_IT+0x80>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1b      	ldr	r2, [pc, #108]	; (800534c <HAL_TIM_Base_Start_IT+0xe8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d115      	bne.n	8005310 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	4b19      	ldr	r3, [pc, #100]	; (8005350 <HAL_TIM_Base_Start_IT+0xec>)
 80052ec:	4013      	ands	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b06      	cmp	r3, #6
 80052f4:	d015      	beq.n	8005322 <HAL_TIM_Base_Start_IT+0xbe>
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fc:	d011      	beq.n	8005322 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0201 	orr.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530e:	e008      	b.n	8005322 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	e000      	b.n	8005324 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005322:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40010000 	.word	0x40010000
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40000c00 	.word	0x40000c00
 8005344:	40010400 	.word	0x40010400
 8005348:	40014000 	.word	0x40014000
 800534c:	40001800 	.word	0x40001800
 8005350:	00010007 	.word	0x00010007

08005354 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e049      	b.n	80053fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fc fce2 	bl	8001d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f000 fb8c 	bl	8005ab0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d109      	bne.n	8005428 <HAL_TIM_PWM_Start+0x24>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	bf14      	ite	ne
 8005420:	2301      	movne	r3, #1
 8005422:	2300      	moveq	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	e03c      	b.n	80054a2 <HAL_TIM_PWM_Start+0x9e>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b04      	cmp	r3, #4
 800542c:	d109      	bne.n	8005442 <HAL_TIM_PWM_Start+0x3e>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b01      	cmp	r3, #1
 8005438:	bf14      	ite	ne
 800543a:	2301      	movne	r3, #1
 800543c:	2300      	moveq	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	e02f      	b.n	80054a2 <HAL_TIM_PWM_Start+0x9e>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d109      	bne.n	800545c <HAL_TIM_PWM_Start+0x58>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b01      	cmp	r3, #1
 8005452:	bf14      	ite	ne
 8005454:	2301      	movne	r3, #1
 8005456:	2300      	moveq	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	e022      	b.n	80054a2 <HAL_TIM_PWM_Start+0x9e>
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b0c      	cmp	r3, #12
 8005460:	d109      	bne.n	8005476 <HAL_TIM_PWM_Start+0x72>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b01      	cmp	r3, #1
 800546c:	bf14      	ite	ne
 800546e:	2301      	movne	r3, #1
 8005470:	2300      	moveq	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	e015      	b.n	80054a2 <HAL_TIM_PWM_Start+0x9e>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b10      	cmp	r3, #16
 800547a:	d109      	bne.n	8005490 <HAL_TIM_PWM_Start+0x8c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	e008      	b.n	80054a2 <HAL_TIM_PWM_Start+0x9e>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b01      	cmp	r3, #1
 800549a:	bf14      	ite	ne
 800549c:	2301      	movne	r3, #1
 800549e:	2300      	moveq	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e092      	b.n	80055d0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <HAL_TIM_PWM_Start+0xb6>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2202      	movs	r2, #2
 80054b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054b8:	e023      	b.n	8005502 <HAL_TIM_PWM_Start+0xfe>
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b04      	cmp	r3, #4
 80054be:	d104      	bne.n	80054ca <HAL_TIM_PWM_Start+0xc6>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2202      	movs	r2, #2
 80054c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c8:	e01b      	b.n	8005502 <HAL_TIM_PWM_Start+0xfe>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d104      	bne.n	80054da <HAL_TIM_PWM_Start+0xd6>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2202      	movs	r2, #2
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d8:	e013      	b.n	8005502 <HAL_TIM_PWM_Start+0xfe>
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b0c      	cmp	r3, #12
 80054de:	d104      	bne.n	80054ea <HAL_TIM_PWM_Start+0xe6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2202      	movs	r2, #2
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054e8:	e00b      	b.n	8005502 <HAL_TIM_PWM_Start+0xfe>
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b10      	cmp	r3, #16
 80054ee:	d104      	bne.n	80054fa <HAL_TIM_PWM_Start+0xf6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054f8:	e003      	b.n	8005502 <HAL_TIM_PWM_Start+0xfe>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2202      	movs	r2, #2
 80054fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2201      	movs	r2, #1
 8005508:	6839      	ldr	r1, [r7, #0]
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fdce 	bl	80060ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a30      	ldr	r2, [pc, #192]	; (80055d8 <HAL_TIM_PWM_Start+0x1d4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIM_PWM_Start+0x120>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2f      	ldr	r2, [pc, #188]	; (80055dc <HAL_TIM_PWM_Start+0x1d8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d101      	bne.n	8005528 <HAL_TIM_PWM_Start+0x124>
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <HAL_TIM_PWM_Start+0x126>
 8005528:	2300      	movs	r3, #0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800553c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a25      	ldr	r2, [pc, #148]	; (80055d8 <HAL_TIM_PWM_Start+0x1d4>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d022      	beq.n	800558e <HAL_TIM_PWM_Start+0x18a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d01d      	beq.n	800558e <HAL_TIM_PWM_Start+0x18a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a22      	ldr	r2, [pc, #136]	; (80055e0 <HAL_TIM_PWM_Start+0x1dc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d018      	beq.n	800558e <HAL_TIM_PWM_Start+0x18a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a20      	ldr	r2, [pc, #128]	; (80055e4 <HAL_TIM_PWM_Start+0x1e0>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_TIM_PWM_Start+0x18a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1f      	ldr	r2, [pc, #124]	; (80055e8 <HAL_TIM_PWM_Start+0x1e4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00e      	beq.n	800558e <HAL_TIM_PWM_Start+0x18a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_TIM_PWM_Start+0x1d8>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d009      	beq.n	800558e <HAL_TIM_PWM_Start+0x18a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1b      	ldr	r2, [pc, #108]	; (80055ec <HAL_TIM_PWM_Start+0x1e8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d004      	beq.n	800558e <HAL_TIM_PWM_Start+0x18a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a19      	ldr	r2, [pc, #100]	; (80055f0 <HAL_TIM_PWM_Start+0x1ec>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d115      	bne.n	80055ba <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <HAL_TIM_PWM_Start+0x1f0>)
 8005596:	4013      	ands	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2b06      	cmp	r3, #6
 800559e:	d015      	beq.n	80055cc <HAL_TIM_PWM_Start+0x1c8>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a6:	d011      	beq.n	80055cc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f042 0201 	orr.w	r2, r2, #1
 80055b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b8:	e008      	b.n	80055cc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	601a      	str	r2, [r3, #0]
 80055ca:	e000      	b.n	80055ce <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010400 	.word	0x40010400
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40001800 	.word	0x40001800
 80055f4:	00010007 	.word	0x00010007

080055f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b02      	cmp	r3, #2
 800560c:	d122      	bne.n	8005654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b02      	cmp	r3, #2
 800561a:	d11b      	bne.n	8005654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0202 	mvn.w	r2, #2
 8005624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f003 0303 	and.w	r3, r3, #3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d003      	beq.n	8005642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 fa1a 	bl	8005a74 <HAL_TIM_IC_CaptureCallback>
 8005640:	e005      	b.n	800564e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa0c 	bl	8005a60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 fa1d 	bl	8005a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	f003 0304 	and.w	r3, r3, #4
 800565e:	2b04      	cmp	r3, #4
 8005660:	d122      	bne.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b04      	cmp	r3, #4
 800566e:	d11b      	bne.n	80056a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f06f 0204 	mvn.w	r2, #4
 8005678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2202      	movs	r2, #2
 800567e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f9f0 	bl	8005a74 <HAL_TIM_IC_CaptureCallback>
 8005694:	e005      	b.n	80056a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f9e2 	bl	8005a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f9f3 	bl	8005a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b08      	cmp	r3, #8
 80056b4:	d122      	bne.n	80056fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d11b      	bne.n	80056fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f06f 0208 	mvn.w	r2, #8
 80056cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2204      	movs	r2, #4
 80056d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f9c6 	bl	8005a74 <HAL_TIM_IC_CaptureCallback>
 80056e8:	e005      	b.n	80056f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f9b8 	bl	8005a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f9c9 	bl	8005a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0310 	and.w	r3, r3, #16
 8005706:	2b10      	cmp	r3, #16
 8005708:	d122      	bne.n	8005750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f003 0310 	and.w	r3, r3, #16
 8005714:	2b10      	cmp	r3, #16
 8005716:	d11b      	bne.n	8005750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0210 	mvn.w	r2, #16
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2208      	movs	r2, #8
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f99c 	bl	8005a74 <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f98e 	bl	8005a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f99f 	bl	8005a88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d10e      	bne.n	800577c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d107      	bne.n	800577c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f06f 0201 	mvn.w	r2, #1
 8005774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fb ff0c 	bl	8001594 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005786:	2b80      	cmp	r3, #128	; 0x80
 8005788:	d10e      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005794:	2b80      	cmp	r3, #128	; 0x80
 8005796:	d107      	bne.n	80057a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 fdbe 	bl	8006324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057b6:	d10e      	bne.n	80057d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c2:	2b80      	cmp	r3, #128	; 0x80
 80057c4:	d107      	bne.n	80057d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fdb1 	bl	8006338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	691b      	ldr	r3, [r3, #16]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b40      	cmp	r3, #64	; 0x40
 80057e2:	d10e      	bne.n	8005802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b40      	cmp	r3, #64	; 0x40
 80057f0:	d107      	bne.n	8005802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f94d 	bl	8005a9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b20      	cmp	r3, #32
 800580e:	d10e      	bne.n	800582e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b20      	cmp	r3, #32
 800581c:	d107      	bne.n	800582e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f06f 0220 	mvn.w	r2, #32
 8005826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 fd71 	bl	8006310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800582e:	bf00      	nop
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005852:	2302      	movs	r3, #2
 8005854:	e0ff      	b.n	8005a56 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b14      	cmp	r3, #20
 8005862:	f200 80f0 	bhi.w	8005a46 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005866:	a201      	add	r2, pc, #4	; (adr r2, 800586c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586c:	080058c1 	.word	0x080058c1
 8005870:	08005a47 	.word	0x08005a47
 8005874:	08005a47 	.word	0x08005a47
 8005878:	08005a47 	.word	0x08005a47
 800587c:	08005901 	.word	0x08005901
 8005880:	08005a47 	.word	0x08005a47
 8005884:	08005a47 	.word	0x08005a47
 8005888:	08005a47 	.word	0x08005a47
 800588c:	08005943 	.word	0x08005943
 8005890:	08005a47 	.word	0x08005a47
 8005894:	08005a47 	.word	0x08005a47
 8005898:	08005a47 	.word	0x08005a47
 800589c:	08005983 	.word	0x08005983
 80058a0:	08005a47 	.word	0x08005a47
 80058a4:	08005a47 	.word	0x08005a47
 80058a8:	08005a47 	.word	0x08005a47
 80058ac:	080059c5 	.word	0x080059c5
 80058b0:	08005a47 	.word	0x08005a47
 80058b4:	08005a47 	.word	0x08005a47
 80058b8:	08005a47 	.word	0x08005a47
 80058bc:	08005a05 	.word	0x08005a05
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 f992 	bl	8005bf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0208 	orr.w	r2, r2, #8
 80058da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0204 	bic.w	r2, r2, #4
 80058ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6999      	ldr	r1, [r3, #24]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	619a      	str	r2, [r3, #24]
      break;
 80058fe:	e0a5      	b.n	8005a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 f9e4 	bl	8005cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800591a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800592a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6999      	ldr	r1, [r3, #24]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	021a      	lsls	r2, r3, #8
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	619a      	str	r2, [r3, #24]
      break;
 8005940:	e084      	b.n	8005a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	4618      	mov	r0, r3
 800594a:	f000 fa3b 	bl	8005dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0208 	orr.w	r2, r2, #8
 800595c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0204 	bic.w	r2, r2, #4
 800596c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69d9      	ldr	r1, [r3, #28]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	61da      	str	r2, [r3, #28]
      break;
 8005980:	e064      	b.n	8005a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 fa91 	bl	8005eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800599c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69d9      	ldr	r1, [r3, #28]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	021a      	lsls	r2, r3, #8
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	61da      	str	r2, [r3, #28]
      break;
 80059c2:	e043      	b.n	8005a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 fac8 	bl	8005f60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0208 	orr.w	r2, r2, #8
 80059de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0204 	bic.w	r2, r2, #4
 80059ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691a      	ldr	r2, [r3, #16]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a02:	e023      	b.n	8005a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68b9      	ldr	r1, [r7, #8]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f000 fafa 	bl	8006004 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a2e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005a44:	e002      	b.n	8005a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop

08005a60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a7c:	bf00      	nop
 8005a7e:	370c      	adds	r7, #12
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a90:	bf00      	nop
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a40      	ldr	r2, [pc, #256]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d00f      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a3d      	ldr	r2, [pc, #244]	; (8005bc8 <TIM_Base_SetConfig+0x118>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a3c      	ldr	r2, [pc, #240]	; (8005bcc <TIM_Base_SetConfig+0x11c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a3b      	ldr	r2, [pc, #236]	; (8005bd0 <TIM_Base_SetConfig+0x120>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_Base_SetConfig+0x40>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a3a      	ldr	r2, [pc, #232]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d108      	bne.n	8005b02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d02b      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b10:	d027      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a2c      	ldr	r2, [pc, #176]	; (8005bc8 <TIM_Base_SetConfig+0x118>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d023      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <TIM_Base_SetConfig+0x11c>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d01f      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a2a      	ldr	r2, [pc, #168]	; (8005bd0 <TIM_Base_SetConfig+0x120>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d01b      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a29      	ldr	r2, [pc, #164]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d017      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a28      	ldr	r2, [pc, #160]	; (8005bd8 <TIM_Base_SetConfig+0x128>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d013      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a27      	ldr	r2, [pc, #156]	; (8005bdc <TIM_Base_SetConfig+0x12c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00f      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a26      	ldr	r2, [pc, #152]	; (8005be0 <TIM_Base_SetConfig+0x130>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d00b      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a25      	ldr	r2, [pc, #148]	; (8005be4 <TIM_Base_SetConfig+0x134>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d007      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a24      	ldr	r2, [pc, #144]	; (8005be8 <TIM_Base_SetConfig+0x138>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d003      	beq.n	8005b62 <TIM_Base_SetConfig+0xb2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a23      	ldr	r2, [pc, #140]	; (8005bec <TIM_Base_SetConfig+0x13c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d108      	bne.n	8005b74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	695b      	ldr	r3, [r3, #20]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <TIM_Base_SetConfig+0x114>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d003      	beq.n	8005ba8 <TIM_Base_SetConfig+0xf8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	4a0c      	ldr	r2, [pc, #48]	; (8005bd4 <TIM_Base_SetConfig+0x124>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d103      	bne.n	8005bb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	615a      	str	r2, [r3, #20]
}
 8005bb6:	bf00      	nop
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40010400 	.word	0x40010400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40014400 	.word	0x40014400
 8005be0:	40014800 	.word	0x40014800
 8005be4:	40001800 	.word	0x40001800
 8005be8:	40001c00 	.word	0x40001c00
 8005bec:	40002000 	.word	0x40002000

08005bf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	f023 0201 	bic.w	r2, r3, #1
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <TIM_OC1_SetConfig+0xd8>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 0303 	bic.w	r3, r3, #3
 8005c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68fa      	ldr	r2, [r7, #12]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f023 0302 	bic.w	r3, r3, #2
 8005c38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4a21      	ldr	r2, [pc, #132]	; (8005ccc <TIM_OC1_SetConfig+0xdc>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d003      	beq.n	8005c54 <TIM_OC1_SetConfig+0x64>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a20      	ldr	r2, [pc, #128]	; (8005cd0 <TIM_OC1_SetConfig+0xe0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d10c      	bne.n	8005c6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0308 	bic.w	r3, r3, #8
 8005c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f023 0304 	bic.w	r3, r3, #4
 8005c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a16      	ldr	r2, [pc, #88]	; (8005ccc <TIM_OC1_SetConfig+0xdc>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d003      	beq.n	8005c7e <TIM_OC1_SetConfig+0x8e>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a15      	ldr	r2, [pc, #84]	; (8005cd0 <TIM_OC1_SetConfig+0xe0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d111      	bne.n	8005ca2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	621a      	str	r2, [r3, #32]
}
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	fffeff8f 	.word	0xfffeff8f
 8005ccc:	40010000 	.word	0x40010000
 8005cd0:	40010400 	.word	0x40010400

08005cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a1b      	ldr	r3, [r3, #32]
 8005ce2:	f023 0210 	bic.w	r2, r3, #16
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4b2e      	ldr	r3, [pc, #184]	; (8005db8 <TIM_OC2_SetConfig+0xe4>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	021b      	lsls	r3, r3, #8
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f023 0320 	bic.w	r3, r3, #32
 8005d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	011b      	lsls	r3, r3, #4
 8005d26:	697a      	ldr	r2, [r7, #20]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a23      	ldr	r2, [pc, #140]	; (8005dbc <TIM_OC2_SetConfig+0xe8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d003      	beq.n	8005d3c <TIM_OC2_SetConfig+0x68>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4a22      	ldr	r2, [pc, #136]	; (8005dc0 <TIM_OC2_SetConfig+0xec>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d10d      	bne.n	8005d58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a18      	ldr	r2, [pc, #96]	; (8005dbc <TIM_OC2_SetConfig+0xe8>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC2_SetConfig+0x94>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <TIM_OC2_SetConfig+0xec>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d113      	bne.n	8005d90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	697a      	ldr	r2, [r7, #20]
 8005da8:	621a      	str	r2, [r3, #32]
}
 8005daa:	bf00      	nop
 8005dac:	371c      	adds	r7, #28
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	feff8fff 	.word	0xfeff8fff
 8005dbc:	40010000 	.word	0x40010000
 8005dc0:	40010400 	.word	0x40010400

08005dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a1b      	ldr	r3, [r3, #32]
 8005dde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4b2d      	ldr	r3, [pc, #180]	; (8005ea4 <TIM_OC3_SetConfig+0xe0>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 0303 	bic.w	r3, r3, #3
 8005dfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a22      	ldr	r2, [pc, #136]	; (8005ea8 <TIM_OC3_SetConfig+0xe4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_OC3_SetConfig+0x66>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a21      	ldr	r2, [pc, #132]	; (8005eac <TIM_OC3_SetConfig+0xe8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10d      	bne.n	8005e46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	021b      	lsls	r3, r3, #8
 8005e38:	697a      	ldr	r2, [r7, #20]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <TIM_OC3_SetConfig+0xe4>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d003      	beq.n	8005e56 <TIM_OC3_SetConfig+0x92>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a16      	ldr	r2, [pc, #88]	; (8005eac <TIM_OC3_SetConfig+0xe8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d113      	bne.n	8005e7e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	699b      	ldr	r3, [r3, #24]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	693a      	ldr	r2, [r7, #16]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	685a      	ldr	r2, [r3, #4]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	621a      	str	r2, [r3, #32]
}
 8005e98:	bf00      	nop
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	fffeff8f 	.word	0xfffeff8f
 8005ea8:	40010000 	.word	0x40010000
 8005eac:	40010400 	.word	0x40010400

08005eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4b1e      	ldr	r3, [pc, #120]	; (8005f54 <TIM_OC4_SetConfig+0xa4>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	021b      	lsls	r3, r3, #8
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	031b      	lsls	r3, r3, #12
 8005f02:	693a      	ldr	r2, [r7, #16]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a13      	ldr	r2, [pc, #76]	; (8005f58 <TIM_OC4_SetConfig+0xa8>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d003      	beq.n	8005f18 <TIM_OC4_SetConfig+0x68>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a12      	ldr	r2, [pc, #72]	; (8005f5c <TIM_OC4_SetConfig+0xac>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d109      	bne.n	8005f2c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	019b      	lsls	r3, r3, #6
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	697a      	ldr	r2, [r7, #20]
 8005f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	693a      	ldr	r2, [r7, #16]
 8005f44:	621a      	str	r2, [r3, #32]
}
 8005f46:	bf00      	nop
 8005f48:	371c      	adds	r7, #28
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	feff8fff 	.word	0xfeff8fff
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40010400 	.word	0x40010400

08005f60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6a1b      	ldr	r3, [r3, #32]
 8005f7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f88:	68fa      	ldr	r2, [r7, #12]
 8005f8a:	4b1b      	ldr	r3, [pc, #108]	; (8005ff8 <TIM_OC5_SetConfig+0x98>)
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a12      	ldr	r2, [pc, #72]	; (8005ffc <TIM_OC5_SetConfig+0x9c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <TIM_OC5_SetConfig+0x5e>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a11      	ldr	r2, [pc, #68]	; (8006000 <TIM_OC5_SetConfig+0xa0>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d109      	bne.n	8005fd2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	021b      	lsls	r3, r3, #8
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	621a      	str	r2, [r3, #32]
}
 8005fec:	bf00      	nop
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	fffeff8f 	.word	0xfffeff8f
 8005ffc:	40010000 	.word	0x40010000
 8006000:	40010400 	.word	0x40010400

08006004 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4b1c      	ldr	r3, [pc, #112]	; (80060a0 <TIM_OC6_SetConfig+0x9c>)
 8006030:	4013      	ands	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	051b      	lsls	r3, r3, #20
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	4313      	orrs	r3, r2
 8006052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a13      	ldr	r2, [pc, #76]	; (80060a4 <TIM_OC6_SetConfig+0xa0>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d003      	beq.n	8006064 <TIM_OC6_SetConfig+0x60>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a12      	ldr	r2, [pc, #72]	; (80060a8 <TIM_OC6_SetConfig+0xa4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d109      	bne.n	8006078 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800606a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	621a      	str	r2, [r3, #32]
}
 8006092:	bf00      	nop
 8006094:	371c      	adds	r7, #28
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	feff8fff 	.word	0xfeff8fff
 80060a4:	40010000 	.word	0x40010000
 80060a8:	40010400 	.word	0x40010400

080060ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	f003 031f 	and.w	r3, r3, #31
 80060be:	2201      	movs	r2, #1
 80060c0:	fa02 f303 	lsl.w	r3, r2, r3
 80060c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6a1a      	ldr	r2, [r3, #32]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	43db      	mvns	r3, r3
 80060ce:	401a      	ands	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	fa01 f303 	lsl.w	r3, r1, r3
 80060e4:	431a      	orrs	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
}
 80060ea:	bf00      	nop
 80060ec:	371c      	adds	r7, #28
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b085      	sub	sp, #20
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006108:	2b01      	cmp	r3, #1
 800610a:	d101      	bne.n	8006110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800610c:	2302      	movs	r3, #2
 800610e:	e06d      	b.n	80061ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a30      	ldr	r2, [pc, #192]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a2f      	ldr	r2, [pc, #188]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d108      	bne.n	8006156 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800614a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	4313      	orrs	r3, r2
 8006154:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a20      	ldr	r2, [pc, #128]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d022      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006182:	d01d      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1d      	ldr	r2, [pc, #116]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d018      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1c      	ldr	r2, [pc, #112]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d013      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1a      	ldr	r2, [pc, #104]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d00e      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a15      	ldr	r2, [pc, #84]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d009      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a16      	ldr	r2, [pc, #88]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d004      	beq.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a15      	ldr	r2, [pc, #84]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d10c      	bne.n	80061da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ea:	2300      	movs	r3, #0
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3714      	adds	r7, #20
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	40010000 	.word	0x40010000
 80061fc:	40010400 	.word	0x40010400
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40014000 	.word	0x40014000
 8006210:	40001800 	.word	0x40001800

08006214 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800622c:	2302      	movs	r3, #2
 800622e:	e065      	b.n	80062fc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	4313      	orrs	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	4313      	orrs	r3, r2
 8006260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4313      	orrs	r3, r2
 800626e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	4313      	orrs	r3, r2
 8006298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	041b      	lsls	r3, r3, #16
 80062a6:	4313      	orrs	r3, r2
 80062a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a16      	ldr	r2, [pc, #88]	; (8006308 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d004      	beq.n	80062be <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a14      	ldr	r2, [pc, #80]	; (800630c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d115      	bne.n	80062ea <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	051b      	lsls	r3, r3, #20
 80062ca:	4313      	orrs	r3, r2
 80062cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	69db      	ldr	r3, [r3, #28]
 80062d8:	4313      	orrs	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	40010000 	.word	0x40010000
 800630c:	40010400 	.word	0x40010400

08006310 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b082      	sub	sp, #8
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e040      	b.n	80063e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fb fd70 	bl	8001e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2224      	movs	r2, #36	; 0x24
 8006378:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f022 0201 	bic.w	r2, r2, #1
 8006388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fd32 	bl	8006df4 <UART_SetConfig>
 8006390:	4603      	mov	r3, r0
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e022      	b.n	80063e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d002      	beq.n	80063a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 ff8a 	bl	80072bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0201 	orr.w	r2, r2, #1
 80063d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 f811 	bl	8007400 <UART_CheckIdleState>
 80063de:	4603      	mov	r3, r0
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08a      	sub	sp, #40	; 0x28
 80063ec:	af02      	add	r7, sp, #8
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	4613      	mov	r3, r2
 80063f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	d171      	bne.n	80064e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <HAL_UART_Transmit+0x24>
 8006406:	88fb      	ldrh	r3, [r7, #6]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d101      	bne.n	8006410 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e06a      	b.n	80064e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2221      	movs	r2, #33	; 0x21
 800641c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800641e:	f7fb fe33 	bl	8002088 <HAL_GetTick>
 8006422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	88fa      	ldrh	r2, [r7, #6]
 8006428:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	88fa      	ldrh	r2, [r7, #6]
 8006430:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800643c:	d108      	bne.n	8006450 <HAL_UART_Transmit+0x68>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d104      	bne.n	8006450 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006446:	2300      	movs	r3, #0
 8006448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e003      	b.n	8006458 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006454:	2300      	movs	r3, #0
 8006456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006458:	e02c      	b.n	80064b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2200      	movs	r2, #0
 8006462:	2180      	movs	r1, #128	; 0x80
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f001 f818 	bl	800749a <UART_WaitOnFlagUntilTimeout>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d001      	beq.n	8006474 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e038      	b.n	80064e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	881b      	ldrh	r3, [r3, #0]
 800647e:	461a      	mov	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006488:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	3302      	adds	r3, #2
 800648e:	61bb      	str	r3, [r7, #24]
 8006490:	e007      	b.n	80064a2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	781a      	ldrb	r2, [r3, #0]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	3301      	adds	r3, #1
 80064a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1cc      	bne.n	800645a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2200      	movs	r2, #0
 80064c8:	2140      	movs	r1, #64	; 0x40
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 ffe5 	bl	800749a <UART_WaitOnFlagUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e005      	b.n	80064e6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e000      	b.n	80064e6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80064e4:	2302      	movs	r3, #2
  }
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3720      	adds	r7, #32
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	; 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006502:	2b20      	cmp	r3, #32
 8006504:	d165      	bne.n	80065d2 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <HAL_UART_Transmit_DMA+0x22>
 800650c:	88fb      	ldrh	r3, [r7, #6]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e05e      	b.n	80065d4 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	88fa      	ldrh	r2, [r7, #6]
 8006520:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2221      	movs	r2, #33	; 0x21
 8006538:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	2b00      	cmp	r3, #0
 8006540:	d027      	beq.n	8006592 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006546:	4a25      	ldr	r2, [pc, #148]	; (80065dc <HAL_UART_Transmit_DMA+0xec>)
 8006548:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	4a24      	ldr	r2, [pc, #144]	; (80065e0 <HAL_UART_Transmit_DMA+0xf0>)
 8006550:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006556:	4a23      	ldr	r2, [pc, #140]	; (80065e4 <HAL_UART_Transmit_DMA+0xf4>)
 8006558:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655e:	2200      	movs	r2, #0
 8006560:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800656a:	4619      	mov	r1, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	3328      	adds	r3, #40	; 0x28
 8006572:	461a      	mov	r2, r3
 8006574:	88fb      	ldrh	r3, [r7, #6]
 8006576:	f7fb ff23 	bl	80023c0 <HAL_DMA_Start_IT>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d008      	beq.n	8006592 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2210      	movs	r2, #16
 8006584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2220      	movs	r2, #32
 800658c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e020      	b.n	80065d4 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2240      	movs	r2, #64	; 0x40
 8006598:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3308      	adds	r3, #8
 80065a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	e853 3f00 	ldrex	r3, [r3]
 80065a8:	613b      	str	r3, [r7, #16]
   return(result);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	3308      	adds	r3, #8
 80065b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ba:	623a      	str	r2, [r7, #32]
 80065bc:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	69f9      	ldr	r1, [r7, #28]
 80065c0:	6a3a      	ldr	r2, [r7, #32]
 80065c2:	e841 2300 	strex	r3, r2, [r1]
 80065c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d1e5      	bne.n	800659a <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80065ce:	2300      	movs	r3, #0
 80065d0:	e000      	b.n	80065d4 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80065d2:	2302      	movs	r3, #2
  }
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3728      	adds	r7, #40	; 0x28
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	0800787d 	.word	0x0800787d
 80065e0:	08007913 	.word	0x08007913
 80065e4:	08007a95 	.word	0x08007a95

080065e8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	4613      	mov	r3, r2
 80065f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	d132      	bne.n	8006666 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d002      	beq.n	800660c <HAL_UART_Receive_DMA+0x24>
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d101      	bne.n	8006610 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	e02b      	b.n	8006668 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d018      	beq.n	8006656 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	613b      	str	r3, [r7, #16]
   return(result);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	623b      	str	r3, [r7, #32]
 8006644:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	69f9      	ldr	r1, [r7, #28]
 8006648:	6a3a      	ldr	r2, [r7, #32]
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e6      	bne.n	8006624 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006656:	88fb      	ldrh	r3, [r7, #6]
 8006658:	461a      	mov	r2, r3
 800665a:	68b9      	ldr	r1, [r7, #8]
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 ffe3 	bl	8007628 <UART_Start_Receive_DMA>
 8006662:	4603      	mov	r3, r0
 8006664:	e000      	b.n	8006668 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8006666:	2302      	movs	r3, #2
  }
}
 8006668:	4618      	mov	r0, r3
 800666a:	3728      	adds	r7, #40	; 0x28
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b090      	sub	sp, #64	; 0x40
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800667c:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006684:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006690:	2b80      	cmp	r3, #128	; 0x80
 8006692:	d139      	bne.n	8006708 <HAL_UART_DMAStop+0x98>
 8006694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006696:	2b21      	cmp	r3, #33	; 0x21
 8006698:	d136      	bne.n	8006708 <HAL_UART_DMAStop+0x98>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3308      	adds	r3, #8
 80066a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066b0:	637b      	str	r3, [r7, #52]	; 0x34
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3308      	adds	r3, #8
 80066b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <HAL_UART_DMAStop+0x2a>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d015      	beq.n	8006702 <HAL_UART_DMAStop+0x92>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066da:	4618      	mov	r0, r3
 80066dc:	f7fb fed0 	bl	8002480 <HAL_DMA_Abort>
 80066e0:	4603      	mov	r3, r0
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00d      	beq.n	8006702 <HAL_UART_DMAStop+0x92>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fc f8e4 	bl	80028b8 <HAL_DMA_GetError>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b20      	cmp	r3, #32
 80066f4:	d105      	bne.n	8006702 <HAL_UART_DMAStop+0x92>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2210      	movs	r2, #16
 80066fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e044      	b.n	800678c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f001 f830 	bl	8007768 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d139      	bne.n	800678a <HAL_UART_DMAStop+0x11a>
 8006716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006718:	2b22      	cmp	r3, #34	; 0x22
 800671a:	d136      	bne.n	800678a <HAL_UART_DMAStop+0x11a>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3308      	adds	r3, #8
 8006722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	60bb      	str	r3, [r7, #8]
   return(result);
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006732:	633b      	str	r3, [r7, #48]	; 0x30
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3308      	adds	r3, #8
 800673a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800673c:	61ba      	str	r2, [r7, #24]
 800673e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6979      	ldr	r1, [r7, #20]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	613b      	str	r3, [r7, #16]
   return(result);
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e5      	bne.n	800671c <HAL_UART_DMAStop+0xac>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006754:	2b00      	cmp	r3, #0
 8006756:	d015      	beq.n	8006784 <HAL_UART_DMAStop+0x114>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675c:	4618      	mov	r0, r3
 800675e:	f7fb fe8f 	bl	8002480 <HAL_DMA_Abort>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00d      	beq.n	8006784 <HAL_UART_DMAStop+0x114>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676c:	4618      	mov	r0, r3
 800676e:	f7fc f8a3 	bl	80028b8 <HAL_DMA_GetError>
 8006772:	4603      	mov	r3, r0
 8006774:	2b20      	cmp	r3, #32
 8006776:	d105      	bne.n	8006784 <HAL_UART_DMAStop+0x114>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2210      	movs	r2, #16
 800677c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e003      	b.n	800678c <HAL_UART_DMAStop+0x11c>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 f815 	bl	80077b4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3740      	adds	r7, #64	; 0x40
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b0ba      	sub	sp, #232	; 0xe8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80067be:	f640 030f 	movw	r3, #2063	; 0x80f
 80067c2:	4013      	ands	r3, r2
 80067c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80067c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d115      	bne.n	80067fc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80067d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00f      	beq.n	80067fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80067dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067e0:	f003 0320 	and.w	r3, r3, #32
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d009      	beq.n	80067fc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 82ac 	beq.w	8006d4a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	4798      	blx	r3
      }
      return;
 80067fa:	e2a6      	b.n	8006d4a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80067fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8117 	beq.w	8006a34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d106      	bne.n	8006820 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006812:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006816:	4b85      	ldr	r3, [pc, #532]	; (8006a2c <HAL_UART_IRQHandler+0x298>)
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 810a 	beq.w	8006a34 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d011      	beq.n	8006850 <HAL_UART_IRQHandler+0xbc>
 800682c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00b      	beq.n	8006850 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2201      	movs	r2, #1
 800683e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006846:	f043 0201 	orr.w	r2, r3, #1
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d011      	beq.n	8006880 <HAL_UART_IRQHandler+0xec>
 800685c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006860:	f003 0301 	and.w	r3, r3, #1
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00b      	beq.n	8006880 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2202      	movs	r2, #2
 800686e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006876:	f043 0204 	orr.w	r2, r3, #4
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006884:	f003 0304 	and.w	r3, r3, #4
 8006888:	2b00      	cmp	r3, #0
 800688a:	d011      	beq.n	80068b0 <HAL_UART_IRQHandler+0x11c>
 800688c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d00b      	beq.n	80068b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2204      	movs	r2, #4
 800689e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068a6:	f043 0202 	orr.w	r2, r3, #2
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d017      	beq.n	80068ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d105      	bne.n	80068d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80068c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00b      	beq.n	80068ec <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2208      	movs	r2, #8
 80068da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068e2:	f043 0208 	orr.w	r2, r3, #8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80068ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d012      	beq.n	800691e <HAL_UART_IRQHandler+0x18a>
 80068f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006900:	2b00      	cmp	r3, #0
 8006902:	d00c      	beq.n	800691e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800690c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006914:	f043 0220 	orr.w	r2, r3, #32
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 8212 	beq.w	8006d4e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800692a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00d      	beq.n	8006952 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006958:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006966:	2b40      	cmp	r3, #64	; 0x40
 8006968:	d005      	beq.n	8006976 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800696a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800696e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006972:	2b00      	cmp	r3, #0
 8006974:	d04f      	beq.n	8006a16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 ff1c 	bl	80077b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d141      	bne.n	8006a0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3308      	adds	r3, #8
 8006990:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80069a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80069a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3308      	adds	r3, #8
 80069b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80069b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1d9      	bne.n	800698a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d013      	beq.n	8006a06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069e2:	4a13      	ldr	r2, [pc, #76]	; (8006a30 <HAL_UART_IRQHandler+0x29c>)
 80069e4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fb fdb8 	bl	8002560 <HAL_DMA_Abort_IT>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d017      	beq.n	8006a26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a04:	e00f      	b.n	8006a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f000 f9d4 	bl	8006db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	e00b      	b.n	8006a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 f9d0 	bl	8006db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a14:	e007      	b.n	8006a26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f9cc 	bl	8006db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006a24:	e193      	b.n	8006d4e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a26:	bf00      	nop
    return;
 8006a28:	e191      	b.n	8006d4e <HAL_UART_IRQHandler+0x5ba>
 8006a2a:	bf00      	nop
 8006a2c:	04000120 	.word	0x04000120
 8006a30:	08007b13 	.word	0x08007b13

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	f040 814c 	bne.w	8006cd6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	f000 8145 	beq.w	8006cd6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 813e 	beq.w	8006cd6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2210      	movs	r2, #16
 8006a60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	f040 80b6 	bne.w	8006bde <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f000 8165 	beq.w	8006d52 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006a8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a92:	429a      	cmp	r2, r3
 8006a94:	f080 815d 	bcs.w	8006d52 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006aac:	f000 8086 	beq.w	8006bbc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006abc:	e853 3f00 	ldrex	r3, [r3]
 8006ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006ade:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1da      	bne.n	8006ab0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3308      	adds	r3, #8
 8006b00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b0c:	f023 0301 	bic.w	r3, r3, #1
 8006b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b2a:	e841 2300 	strex	r3, r2, [r1]
 8006b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1e1      	bne.n	8006afa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b40:	e853 3f00 	ldrex	r3, [r3]
 8006b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3308      	adds	r3, #8
 8006b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b62:	e841 2300 	strex	r3, r2, [r1]
 8006b66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1e3      	bne.n	8006b36 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b8c:	f023 0310 	bic.w	r3, r3, #16
 8006b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ba0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e4      	bne.n	8006b7c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fb fc62 	bl	8002480 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2202      	movs	r2, #2
 8006bc0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f8f6 	bl	8006dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bdc:	e0b9      	b.n	8006d52 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80ab 	beq.w	8006d56 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f000 80a6 	beq.w	8006d56 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c1e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c34:	e841 2300 	strex	r3, r2, [r1]
 8006c38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1e4      	bne.n	8006c0a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3308      	adds	r3, #8
 8006c46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	623b      	str	r3, [r7, #32]
   return(result);
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	f023 0301 	bic.w	r3, r3, #1
 8006c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	3308      	adds	r3, #8
 8006c60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c64:	633a      	str	r2, [r7, #48]	; 0x30
 8006c66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c6c:	e841 2300 	strex	r3, r2, [r1]
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1e3      	bne.n	8006c40 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f023 0310 	bic.w	r3, r3, #16
 8006ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006cae:	61fb      	str	r3, [r7, #28]
 8006cb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	69b9      	ldr	r1, [r7, #24]
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	617b      	str	r3, [r7, #20]
   return(result);
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e4      	bne.n	8006c8c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ccc:	4619      	mov	r1, r3
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 f87a 	bl	8006dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cd4:	e03f      	b.n	8006d56 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <HAL_UART_IRQHandler+0x56c>
 8006ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d008      	beq.n	8006d00 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cf6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f871 	bl	8006de0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cfe:	e02d      	b.n	8006d5c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00e      	beq.n	8006d2a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d008      	beq.n	8006d2a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d01c      	beq.n	8006d5a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	4798      	blx	r3
    }
    return;
 8006d28:	e017      	b.n	8006d5a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d012      	beq.n	8006d5c <HAL_UART_IRQHandler+0x5c8>
 8006d36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00c      	beq.n	8006d5c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fefb 	bl	8007b3e <UART_EndTransmit_IT>
    return;
 8006d48:	e008      	b.n	8006d5c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006d4a:	bf00      	nop
 8006d4c:	e006      	b.n	8006d5c <HAL_UART_IRQHandler+0x5c8>
    return;
 8006d4e:	bf00      	nop
 8006d50:	e004      	b.n	8006d5c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006d52:	bf00      	nop
 8006d54:	e002      	b.n	8006d5c <HAL_UART_IRQHandler+0x5c8>
      return;
 8006d56:	bf00      	nop
 8006d58:	e000      	b.n	8006d5c <HAL_UART_IRQHandler+0x5c8>
    return;
 8006d5a:	bf00      	nop
  }

}
 8006d5c:	37e8      	adds	r7, #232	; 0xe8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop

08006d64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006da8:	bf00      	nop
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	695b      	ldr	r3, [r3, #20]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	69db      	ldr	r3, [r3, #28]
 8006e14:	4313      	orrs	r3, r2
 8006e16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	4ba6      	ldr	r3, [pc, #664]	; (80070b8 <UART_SetConfig+0x2c4>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	687a      	ldr	r2, [r7, #4]
 8006e24:	6812      	ldr	r2, [r2, #0]
 8006e26:	6979      	ldr	r1, [r7, #20]
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a1b      	ldr	r3, [r3, #32]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	430a      	orrs	r2, r1
 8006e64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a94      	ldr	r2, [pc, #592]	; (80070bc <UART_SetConfig+0x2c8>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d120      	bne.n	8006eb2 <UART_SetConfig+0xbe>
 8006e70:	4b93      	ldr	r3, [pc, #588]	; (80070c0 <UART_SetConfig+0x2cc>)
 8006e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d816      	bhi.n	8006eac <UART_SetConfig+0xb8>
 8006e7e:	a201      	add	r2, pc, #4	; (adr r2, 8006e84 <UART_SetConfig+0x90>)
 8006e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e84:	08006e95 	.word	0x08006e95
 8006e88:	08006ea1 	.word	0x08006ea1
 8006e8c:	08006e9b 	.word	0x08006e9b
 8006e90:	08006ea7 	.word	0x08006ea7
 8006e94:	2301      	movs	r3, #1
 8006e96:	77fb      	strb	r3, [r7, #31]
 8006e98:	e150      	b.n	800713c <UART_SetConfig+0x348>
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	77fb      	strb	r3, [r7, #31]
 8006e9e:	e14d      	b.n	800713c <UART_SetConfig+0x348>
 8006ea0:	2304      	movs	r3, #4
 8006ea2:	77fb      	strb	r3, [r7, #31]
 8006ea4:	e14a      	b.n	800713c <UART_SetConfig+0x348>
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	77fb      	strb	r3, [r7, #31]
 8006eaa:	e147      	b.n	800713c <UART_SetConfig+0x348>
 8006eac:	2310      	movs	r3, #16
 8006eae:	77fb      	strb	r3, [r7, #31]
 8006eb0:	e144      	b.n	800713c <UART_SetConfig+0x348>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a83      	ldr	r2, [pc, #524]	; (80070c4 <UART_SetConfig+0x2d0>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d132      	bne.n	8006f22 <UART_SetConfig+0x12e>
 8006ebc:	4b80      	ldr	r3, [pc, #512]	; (80070c0 <UART_SetConfig+0x2cc>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec2:	f003 030c 	and.w	r3, r3, #12
 8006ec6:	2b0c      	cmp	r3, #12
 8006ec8:	d828      	bhi.n	8006f1c <UART_SetConfig+0x128>
 8006eca:	a201      	add	r2, pc, #4	; (adr r2, 8006ed0 <UART_SetConfig+0xdc>)
 8006ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed0:	08006f05 	.word	0x08006f05
 8006ed4:	08006f1d 	.word	0x08006f1d
 8006ed8:	08006f1d 	.word	0x08006f1d
 8006edc:	08006f1d 	.word	0x08006f1d
 8006ee0:	08006f11 	.word	0x08006f11
 8006ee4:	08006f1d 	.word	0x08006f1d
 8006ee8:	08006f1d 	.word	0x08006f1d
 8006eec:	08006f1d 	.word	0x08006f1d
 8006ef0:	08006f0b 	.word	0x08006f0b
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f1d 	.word	0x08006f1d
 8006efc:	08006f1d 	.word	0x08006f1d
 8006f00:	08006f17 	.word	0x08006f17
 8006f04:	2300      	movs	r3, #0
 8006f06:	77fb      	strb	r3, [r7, #31]
 8006f08:	e118      	b.n	800713c <UART_SetConfig+0x348>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	77fb      	strb	r3, [r7, #31]
 8006f0e:	e115      	b.n	800713c <UART_SetConfig+0x348>
 8006f10:	2304      	movs	r3, #4
 8006f12:	77fb      	strb	r3, [r7, #31]
 8006f14:	e112      	b.n	800713c <UART_SetConfig+0x348>
 8006f16:	2308      	movs	r3, #8
 8006f18:	77fb      	strb	r3, [r7, #31]
 8006f1a:	e10f      	b.n	800713c <UART_SetConfig+0x348>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	77fb      	strb	r3, [r7, #31]
 8006f20:	e10c      	b.n	800713c <UART_SetConfig+0x348>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a68      	ldr	r2, [pc, #416]	; (80070c8 <UART_SetConfig+0x2d4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d120      	bne.n	8006f6e <UART_SetConfig+0x17a>
 8006f2c:	4b64      	ldr	r3, [pc, #400]	; (80070c0 <UART_SetConfig+0x2cc>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f36:	2b30      	cmp	r3, #48	; 0x30
 8006f38:	d013      	beq.n	8006f62 <UART_SetConfig+0x16e>
 8006f3a:	2b30      	cmp	r3, #48	; 0x30
 8006f3c:	d814      	bhi.n	8006f68 <UART_SetConfig+0x174>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d009      	beq.n	8006f56 <UART_SetConfig+0x162>
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d810      	bhi.n	8006f68 <UART_SetConfig+0x174>
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <UART_SetConfig+0x15c>
 8006f4a:	2b10      	cmp	r3, #16
 8006f4c:	d006      	beq.n	8006f5c <UART_SetConfig+0x168>
 8006f4e:	e00b      	b.n	8006f68 <UART_SetConfig+0x174>
 8006f50:	2300      	movs	r3, #0
 8006f52:	77fb      	strb	r3, [r7, #31]
 8006f54:	e0f2      	b.n	800713c <UART_SetConfig+0x348>
 8006f56:	2302      	movs	r3, #2
 8006f58:	77fb      	strb	r3, [r7, #31]
 8006f5a:	e0ef      	b.n	800713c <UART_SetConfig+0x348>
 8006f5c:	2304      	movs	r3, #4
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e0ec      	b.n	800713c <UART_SetConfig+0x348>
 8006f62:	2308      	movs	r3, #8
 8006f64:	77fb      	strb	r3, [r7, #31]
 8006f66:	e0e9      	b.n	800713c <UART_SetConfig+0x348>
 8006f68:	2310      	movs	r3, #16
 8006f6a:	77fb      	strb	r3, [r7, #31]
 8006f6c:	e0e6      	b.n	800713c <UART_SetConfig+0x348>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a56      	ldr	r2, [pc, #344]	; (80070cc <UART_SetConfig+0x2d8>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d120      	bne.n	8006fba <UART_SetConfig+0x1c6>
 8006f78:	4b51      	ldr	r3, [pc, #324]	; (80070c0 <UART_SetConfig+0x2cc>)
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f82:	2bc0      	cmp	r3, #192	; 0xc0
 8006f84:	d013      	beq.n	8006fae <UART_SetConfig+0x1ba>
 8006f86:	2bc0      	cmp	r3, #192	; 0xc0
 8006f88:	d814      	bhi.n	8006fb4 <UART_SetConfig+0x1c0>
 8006f8a:	2b80      	cmp	r3, #128	; 0x80
 8006f8c:	d009      	beq.n	8006fa2 <UART_SetConfig+0x1ae>
 8006f8e:	2b80      	cmp	r3, #128	; 0x80
 8006f90:	d810      	bhi.n	8006fb4 <UART_SetConfig+0x1c0>
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <UART_SetConfig+0x1a8>
 8006f96:	2b40      	cmp	r3, #64	; 0x40
 8006f98:	d006      	beq.n	8006fa8 <UART_SetConfig+0x1b4>
 8006f9a:	e00b      	b.n	8006fb4 <UART_SetConfig+0x1c0>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	77fb      	strb	r3, [r7, #31]
 8006fa0:	e0cc      	b.n	800713c <UART_SetConfig+0x348>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	77fb      	strb	r3, [r7, #31]
 8006fa6:	e0c9      	b.n	800713c <UART_SetConfig+0x348>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	77fb      	strb	r3, [r7, #31]
 8006fac:	e0c6      	b.n	800713c <UART_SetConfig+0x348>
 8006fae:	2308      	movs	r3, #8
 8006fb0:	77fb      	strb	r3, [r7, #31]
 8006fb2:	e0c3      	b.n	800713c <UART_SetConfig+0x348>
 8006fb4:	2310      	movs	r3, #16
 8006fb6:	77fb      	strb	r3, [r7, #31]
 8006fb8:	e0c0      	b.n	800713c <UART_SetConfig+0x348>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a44      	ldr	r2, [pc, #272]	; (80070d0 <UART_SetConfig+0x2dc>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d125      	bne.n	8007010 <UART_SetConfig+0x21c>
 8006fc4:	4b3e      	ldr	r3, [pc, #248]	; (80070c0 <UART_SetConfig+0x2cc>)
 8006fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd2:	d017      	beq.n	8007004 <UART_SetConfig+0x210>
 8006fd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd8:	d817      	bhi.n	800700a <UART_SetConfig+0x216>
 8006fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fde:	d00b      	beq.n	8006ff8 <UART_SetConfig+0x204>
 8006fe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fe4:	d811      	bhi.n	800700a <UART_SetConfig+0x216>
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <UART_SetConfig+0x1fe>
 8006fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fee:	d006      	beq.n	8006ffe <UART_SetConfig+0x20a>
 8006ff0:	e00b      	b.n	800700a <UART_SetConfig+0x216>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	77fb      	strb	r3, [r7, #31]
 8006ff6:	e0a1      	b.n	800713c <UART_SetConfig+0x348>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	77fb      	strb	r3, [r7, #31]
 8006ffc:	e09e      	b.n	800713c <UART_SetConfig+0x348>
 8006ffe:	2304      	movs	r3, #4
 8007000:	77fb      	strb	r3, [r7, #31]
 8007002:	e09b      	b.n	800713c <UART_SetConfig+0x348>
 8007004:	2308      	movs	r3, #8
 8007006:	77fb      	strb	r3, [r7, #31]
 8007008:	e098      	b.n	800713c <UART_SetConfig+0x348>
 800700a:	2310      	movs	r3, #16
 800700c:	77fb      	strb	r3, [r7, #31]
 800700e:	e095      	b.n	800713c <UART_SetConfig+0x348>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a2f      	ldr	r2, [pc, #188]	; (80070d4 <UART_SetConfig+0x2e0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d125      	bne.n	8007066 <UART_SetConfig+0x272>
 800701a:	4b29      	ldr	r3, [pc, #164]	; (80070c0 <UART_SetConfig+0x2cc>)
 800701c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007020:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007024:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007028:	d017      	beq.n	800705a <UART_SetConfig+0x266>
 800702a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800702e:	d817      	bhi.n	8007060 <UART_SetConfig+0x26c>
 8007030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007034:	d00b      	beq.n	800704e <UART_SetConfig+0x25a>
 8007036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800703a:	d811      	bhi.n	8007060 <UART_SetConfig+0x26c>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <UART_SetConfig+0x254>
 8007040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007044:	d006      	beq.n	8007054 <UART_SetConfig+0x260>
 8007046:	e00b      	b.n	8007060 <UART_SetConfig+0x26c>
 8007048:	2301      	movs	r3, #1
 800704a:	77fb      	strb	r3, [r7, #31]
 800704c:	e076      	b.n	800713c <UART_SetConfig+0x348>
 800704e:	2302      	movs	r3, #2
 8007050:	77fb      	strb	r3, [r7, #31]
 8007052:	e073      	b.n	800713c <UART_SetConfig+0x348>
 8007054:	2304      	movs	r3, #4
 8007056:	77fb      	strb	r3, [r7, #31]
 8007058:	e070      	b.n	800713c <UART_SetConfig+0x348>
 800705a:	2308      	movs	r3, #8
 800705c:	77fb      	strb	r3, [r7, #31]
 800705e:	e06d      	b.n	800713c <UART_SetConfig+0x348>
 8007060:	2310      	movs	r3, #16
 8007062:	77fb      	strb	r3, [r7, #31]
 8007064:	e06a      	b.n	800713c <UART_SetConfig+0x348>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a1b      	ldr	r2, [pc, #108]	; (80070d8 <UART_SetConfig+0x2e4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d138      	bne.n	80070e2 <UART_SetConfig+0x2ee>
 8007070:	4b13      	ldr	r3, [pc, #76]	; (80070c0 <UART_SetConfig+0x2cc>)
 8007072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007076:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800707a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800707e:	d017      	beq.n	80070b0 <UART_SetConfig+0x2bc>
 8007080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007084:	d82a      	bhi.n	80070dc <UART_SetConfig+0x2e8>
 8007086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800708a:	d00b      	beq.n	80070a4 <UART_SetConfig+0x2b0>
 800708c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007090:	d824      	bhi.n	80070dc <UART_SetConfig+0x2e8>
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <UART_SetConfig+0x2aa>
 8007096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800709a:	d006      	beq.n	80070aa <UART_SetConfig+0x2b6>
 800709c:	e01e      	b.n	80070dc <UART_SetConfig+0x2e8>
 800709e:	2300      	movs	r3, #0
 80070a0:	77fb      	strb	r3, [r7, #31]
 80070a2:	e04b      	b.n	800713c <UART_SetConfig+0x348>
 80070a4:	2302      	movs	r3, #2
 80070a6:	77fb      	strb	r3, [r7, #31]
 80070a8:	e048      	b.n	800713c <UART_SetConfig+0x348>
 80070aa:	2304      	movs	r3, #4
 80070ac:	77fb      	strb	r3, [r7, #31]
 80070ae:	e045      	b.n	800713c <UART_SetConfig+0x348>
 80070b0:	2308      	movs	r3, #8
 80070b2:	77fb      	strb	r3, [r7, #31]
 80070b4:	e042      	b.n	800713c <UART_SetConfig+0x348>
 80070b6:	bf00      	nop
 80070b8:	efff69f3 	.word	0xefff69f3
 80070bc:	40011000 	.word	0x40011000
 80070c0:	40023800 	.word	0x40023800
 80070c4:	40004400 	.word	0x40004400
 80070c8:	40004800 	.word	0x40004800
 80070cc:	40004c00 	.word	0x40004c00
 80070d0:	40005000 	.word	0x40005000
 80070d4:	40011400 	.word	0x40011400
 80070d8:	40007800 	.word	0x40007800
 80070dc:	2310      	movs	r3, #16
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e02c      	b.n	800713c <UART_SetConfig+0x348>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a72      	ldr	r2, [pc, #456]	; (80072b0 <UART_SetConfig+0x4bc>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d125      	bne.n	8007138 <UART_SetConfig+0x344>
 80070ec:	4b71      	ldr	r3, [pc, #452]	; (80072b4 <UART_SetConfig+0x4c0>)
 80070ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80070fa:	d017      	beq.n	800712c <UART_SetConfig+0x338>
 80070fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007100:	d817      	bhi.n	8007132 <UART_SetConfig+0x33e>
 8007102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007106:	d00b      	beq.n	8007120 <UART_SetConfig+0x32c>
 8007108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800710c:	d811      	bhi.n	8007132 <UART_SetConfig+0x33e>
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <UART_SetConfig+0x326>
 8007112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007116:	d006      	beq.n	8007126 <UART_SetConfig+0x332>
 8007118:	e00b      	b.n	8007132 <UART_SetConfig+0x33e>
 800711a:	2300      	movs	r3, #0
 800711c:	77fb      	strb	r3, [r7, #31]
 800711e:	e00d      	b.n	800713c <UART_SetConfig+0x348>
 8007120:	2302      	movs	r3, #2
 8007122:	77fb      	strb	r3, [r7, #31]
 8007124:	e00a      	b.n	800713c <UART_SetConfig+0x348>
 8007126:	2304      	movs	r3, #4
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	e007      	b.n	800713c <UART_SetConfig+0x348>
 800712c:	2308      	movs	r3, #8
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e004      	b.n	800713c <UART_SetConfig+0x348>
 8007132:	2310      	movs	r3, #16
 8007134:	77fb      	strb	r3, [r7, #31]
 8007136:	e001      	b.n	800713c <UART_SetConfig+0x348>
 8007138:	2310      	movs	r3, #16
 800713a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	69db      	ldr	r3, [r3, #28]
 8007140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007144:	d15b      	bne.n	80071fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007146:	7ffb      	ldrb	r3, [r7, #31]
 8007148:	2b08      	cmp	r3, #8
 800714a:	d828      	bhi.n	800719e <UART_SetConfig+0x3aa>
 800714c:	a201      	add	r2, pc, #4	; (adr r2, 8007154 <UART_SetConfig+0x360>)
 800714e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007152:	bf00      	nop
 8007154:	08007179 	.word	0x08007179
 8007158:	08007181 	.word	0x08007181
 800715c:	08007189 	.word	0x08007189
 8007160:	0800719f 	.word	0x0800719f
 8007164:	0800718f 	.word	0x0800718f
 8007168:	0800719f 	.word	0x0800719f
 800716c:	0800719f 	.word	0x0800719f
 8007170:	0800719f 	.word	0x0800719f
 8007174:	08007197 	.word	0x08007197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007178:	f7fd fb90 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 800717c:	61b8      	str	r0, [r7, #24]
        break;
 800717e:	e013      	b.n	80071a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007180:	f7fd fba0 	bl	80048c4 <HAL_RCC_GetPCLK2Freq>
 8007184:	61b8      	str	r0, [r7, #24]
        break;
 8007186:	e00f      	b.n	80071a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007188:	4b4b      	ldr	r3, [pc, #300]	; (80072b8 <UART_SetConfig+0x4c4>)
 800718a:	61bb      	str	r3, [r7, #24]
        break;
 800718c:	e00c      	b.n	80071a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800718e:	f7fd fa73 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 8007192:	61b8      	str	r0, [r7, #24]
        break;
 8007194:	e008      	b.n	80071a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800719a:	61bb      	str	r3, [r7, #24]
        break;
 800719c:	e004      	b.n	80071a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800719e:	2300      	movs	r3, #0
 80071a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	77bb      	strb	r3, [r7, #30]
        break;
 80071a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d074      	beq.n	8007298 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	005a      	lsls	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	085b      	lsrs	r3, r3, #1
 80071b8:	441a      	add	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b0f      	cmp	r3, #15
 80071c8:	d916      	bls.n	80071f8 <UART_SetConfig+0x404>
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d0:	d212      	bcs.n	80071f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	f023 030f 	bic.w	r3, r3, #15
 80071da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	89fb      	ldrh	r3, [r7, #14]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	89fa      	ldrh	r2, [r7, #14]
 80071f4:	60da      	str	r2, [r3, #12]
 80071f6:	e04f      	b.n	8007298 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
 80071fa:	77bb      	strb	r3, [r7, #30]
 80071fc:	e04c      	b.n	8007298 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80071fe:	7ffb      	ldrb	r3, [r7, #31]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d828      	bhi.n	8007256 <UART_SetConfig+0x462>
 8007204:	a201      	add	r2, pc, #4	; (adr r2, 800720c <UART_SetConfig+0x418>)
 8007206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720a:	bf00      	nop
 800720c:	08007231 	.word	0x08007231
 8007210:	08007239 	.word	0x08007239
 8007214:	08007241 	.word	0x08007241
 8007218:	08007257 	.word	0x08007257
 800721c:	08007247 	.word	0x08007247
 8007220:	08007257 	.word	0x08007257
 8007224:	08007257 	.word	0x08007257
 8007228:	08007257 	.word	0x08007257
 800722c:	0800724f 	.word	0x0800724f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007230:	f7fd fb34 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8007234:	61b8      	str	r0, [r7, #24]
        break;
 8007236:	e013      	b.n	8007260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007238:	f7fd fb44 	bl	80048c4 <HAL_RCC_GetPCLK2Freq>
 800723c:	61b8      	str	r0, [r7, #24]
        break;
 800723e:	e00f      	b.n	8007260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007240:	4b1d      	ldr	r3, [pc, #116]	; (80072b8 <UART_SetConfig+0x4c4>)
 8007242:	61bb      	str	r3, [r7, #24]
        break;
 8007244:	e00c      	b.n	8007260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007246:	f7fd fa17 	bl	8004678 <HAL_RCC_GetSysClockFreq>
 800724a:	61b8      	str	r0, [r7, #24]
        break;
 800724c:	e008      	b.n	8007260 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800724e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007252:	61bb      	str	r3, [r7, #24]
        break;
 8007254:	e004      	b.n	8007260 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007256:	2300      	movs	r3, #0
 8007258:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	77bb      	strb	r3, [r7, #30]
        break;
 800725e:	bf00      	nop
    }

    if (pclk != 0U)
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d018      	beq.n	8007298 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	085a      	lsrs	r2, r3, #1
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	441a      	add	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b0f      	cmp	r3, #15
 800727e:	d909      	bls.n	8007294 <UART_SetConfig+0x4a0>
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007286:	d205      	bcs.n	8007294 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	b29a      	uxth	r2, r3
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	60da      	str	r2, [r3, #12]
 8007292:	e001      	b.n	8007298 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80072a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3720      	adds	r7, #32
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	40007c00 	.word	0x40007c00
 80072b4:	40023800 	.word	0x40023800
 80072b8:	00f42400 	.word	0x00f42400

080072bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c8:	f003 0301 	and.w	r3, r3, #1
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d00a      	beq.n	80072e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00a      	beq.n	8007308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	430a      	orrs	r2, r1
 8007306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00a      	beq.n	800732a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	430a      	orrs	r2, r1
 8007328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	f003 0308 	and.w	r3, r3, #8
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00a      	beq.n	800734c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	430a      	orrs	r2, r1
 800734a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	f003 0310 	and.w	r3, r3, #16
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00a      	beq.n	800736e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	430a      	orrs	r2, r1
 800736c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00a      	beq.n	8007390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	430a      	orrs	r2, r1
 800738e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d01a      	beq.n	80073d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ba:	d10a      	bne.n	80073d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	430a      	orrs	r2, r1
 80073f2:	605a      	str	r2, [r3, #4]
  }
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af02      	add	r7, sp, #8
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007410:	f7fa fe3a 	bl	8002088 <HAL_GetTick>
 8007414:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b08      	cmp	r3, #8
 8007422:	d10e      	bne.n	8007442 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f831 	bl	800749a <UART_WaitOnFlagUntilTimeout>
 8007438:	4603      	mov	r3, r0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800743e:	2303      	movs	r3, #3
 8007440:	e027      	b.n	8007492 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 0304 	and.w	r3, r3, #4
 800744c:	2b04      	cmp	r3, #4
 800744e:	d10e      	bne.n	800746e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007450:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f81b 	bl	800749a <UART_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d001      	beq.n	800746e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e011      	b.n	8007492 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2220      	movs	r2, #32
 8007472:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800749a:	b580      	push	{r7, lr}
 800749c:	b09c      	sub	sp, #112	; 0x70
 800749e:	af00      	add	r7, sp, #0
 80074a0:	60f8      	str	r0, [r7, #12]
 80074a2:	60b9      	str	r1, [r7, #8]
 80074a4:	603b      	str	r3, [r7, #0]
 80074a6:	4613      	mov	r3, r2
 80074a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074aa:	e0a7      	b.n	80075fc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074b2:	f000 80a3 	beq.w	80075fc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b6:	f7fa fde7 	bl	8002088 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <UART_WaitOnFlagUntilTimeout+0x32>
 80074c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d13f      	bne.n	800754c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074d4:	e853 3f00 	ldrex	r3, [r3]
 80074d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074e0:	667b      	str	r3, [r7, #100]	; 0x64
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	461a      	mov	r2, r3
 80074e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074f2:	e841 2300 	strex	r3, r2, [r1]
 80074f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d1e6      	bne.n	80074cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3308      	adds	r3, #8
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007510:	f023 0301 	bic.w	r3, r3, #1
 8007514:	663b      	str	r3, [r7, #96]	; 0x60
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	3308      	adds	r3, #8
 800751c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800751e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007520:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800752c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e5      	bne.n	80074fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2220      	movs	r2, #32
 800753c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e068      	b.n	800761e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0304 	and.w	r3, r3, #4
 8007556:	2b00      	cmp	r3, #0
 8007558:	d050      	beq.n	80075fc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	69db      	ldr	r3, [r3, #28]
 8007560:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007568:	d148      	bne.n	80075fc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007572:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007584:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007592:	637b      	str	r3, [r7, #52]	; 0x34
 8007594:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007598:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e6      	bne.n	8007574 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	3308      	adds	r3, #8
 80075ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	613b      	str	r3, [r7, #16]
   return(result);
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f023 0301 	bic.w	r3, r3, #1
 80075bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	3308      	adds	r3, #8
 80075c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075c6:	623a      	str	r2, [r7, #32]
 80075c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	69f9      	ldr	r1, [r7, #28]
 80075cc:	6a3a      	ldr	r2, [r7, #32]
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	61bb      	str	r3, [r7, #24]
   return(result);
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e5      	bne.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2220      	movs	r2, #32
 80075de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2220      	movs	r2, #32
 80075e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2220      	movs	r2, #32
 80075ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80075f8:	2303      	movs	r3, #3
 80075fa:	e010      	b.n	800761e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69da      	ldr	r2, [r3, #28]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	4013      	ands	r3, r2
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	429a      	cmp	r2, r3
 800760a:	bf0c      	ite	eq
 800760c:	2301      	moveq	r3, #1
 800760e:	2300      	movne	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	429a      	cmp	r2, r3
 8007618:	f43f af48 	beq.w	80074ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3770      	adds	r7, #112	; 0x70
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b096      	sub	sp, #88	; 0x58
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	68ba      	ldr	r2, [r7, #8]
 800763a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	88fa      	ldrh	r2, [r7, #6]
 8007640:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2222      	movs	r2, #34	; 0x22
 8007650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007658:	2b00      	cmp	r3, #0
 800765a:	d028      	beq.n	80076ae <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007660:	4a3e      	ldr	r2, [pc, #248]	; (800775c <UART_Start_Receive_DMA+0x134>)
 8007662:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007668:	4a3d      	ldr	r2, [pc, #244]	; (8007760 <UART_Start_Receive_DMA+0x138>)
 800766a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007670:	4a3c      	ldr	r2, [pc, #240]	; (8007764 <UART_Start_Receive_DMA+0x13c>)
 8007672:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007678:	2200      	movs	r2, #0
 800767a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3324      	adds	r3, #36	; 0x24
 8007686:	4619      	mov	r1, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768c:	461a      	mov	r2, r3
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	f7fa fe96 	bl	80023c0 <HAL_DMA_Start_IT>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2210      	movs	r2, #16
 800769e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e051      	b.n	8007752 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d018      	beq.n	80076e8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076be:	e853 3f00 	ldrex	r3, [r3]
 80076c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ca:	657b      	str	r3, [r7, #84]	; 0x54
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	461a      	mov	r2, r3
 80076d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80076d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80076d6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076dc:	e841 2300 	strex	r3, r2, [r1]
 80076e0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1e6      	bne.n	80076b6 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3308      	adds	r3, #8
 80076ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	e853 3f00 	ldrex	r3, [r3]
 80076f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fa:	f043 0301 	orr.w	r3, r3, #1
 80076fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3308      	adds	r3, #8
 8007706:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007708:	637a      	str	r2, [r7, #52]	; 0x34
 800770a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800770e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007710:	e841 2300 	strex	r3, r2, [r1]
 8007714:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1e5      	bne.n	80076e8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3308      	adds	r3, #8
 8007722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	e853 3f00 	ldrex	r3, [r3]
 800772a:	613b      	str	r3, [r7, #16]
   return(result);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3308      	adds	r3, #8
 800773a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800773c:	623a      	str	r2, [r7, #32]
 800773e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007740:	69f9      	ldr	r1, [r7, #28]
 8007742:	6a3a      	ldr	r2, [r7, #32]
 8007744:	e841 2300 	strex	r3, r2, [r1]
 8007748:	61bb      	str	r3, [r7, #24]
   return(result);
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1e5      	bne.n	800771c <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8007750:	2300      	movs	r3, #0
}
 8007752:	4618      	mov	r0, r3
 8007754:	3758      	adds	r7, #88	; 0x58
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	0800792f 	.word	0x0800792f
 8007760:	08007a57 	.word	0x08007a57
 8007764:	08007a95 	.word	0x08007a95

08007768 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b089      	sub	sp, #36	; 0x24
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	60bb      	str	r3, [r7, #8]
   return(result);
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007784:	61fb      	str	r3, [r7, #28]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	61bb      	str	r3, [r7, #24]
 8007790:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6979      	ldr	r1, [r7, #20]
 8007794:	69ba      	ldr	r2, [r7, #24]
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	613b      	str	r3, [r7, #16]
   return(result);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e6      	bne.n	8007770 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2220      	movs	r2, #32
 80077a6:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80077a8:	bf00      	nop
 80077aa:	3724      	adds	r7, #36	; 0x24
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b095      	sub	sp, #84	; 0x54
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c4:	e853 3f00 	ldrex	r3, [r3]
 80077c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077da:	643b      	str	r3, [r7, #64]	; 0x40
 80077dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077e2:	e841 2300 	strex	r3, r2, [r1]
 80077e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1e6      	bne.n	80077bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	3308      	adds	r3, #8
 80077f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	e853 3f00 	ldrex	r3, [r3]
 80077fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	f023 0301 	bic.w	r3, r3, #1
 8007804:	64bb      	str	r3, [r7, #72]	; 0x48
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	3308      	adds	r3, #8
 800780c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800780e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007810:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007816:	e841 2300 	strex	r3, r2, [r1]
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1e5      	bne.n	80077ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007826:	2b01      	cmp	r3, #1
 8007828:	d118      	bne.n	800785c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	e853 3f00 	ldrex	r3, [r3]
 8007836:	60bb      	str	r3, [r7, #8]
   return(result);
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	f023 0310 	bic.w	r3, r3, #16
 800783e:	647b      	str	r3, [r7, #68]	; 0x44
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	461a      	mov	r2, r3
 8007846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007848:	61bb      	str	r3, [r7, #24]
 800784a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800784c:	6979      	ldr	r1, [r7, #20]
 800784e:	69ba      	ldr	r2, [r7, #24]
 8007850:	e841 2300 	strex	r3, r2, [r1]
 8007854:	613b      	str	r3, [r7, #16]
   return(result);
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d1e6      	bne.n	800782a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2200      	movs	r2, #0
 800786e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007870:	bf00      	nop
 8007872:	3754      	adds	r7, #84	; 0x54
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b090      	sub	sp, #64	; 0x40
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007888:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007892:	d037      	beq.n	8007904 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8007894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007896:	2200      	movs	r2, #0
 8007898:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800789c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	623b      	str	r3, [r7, #32]
   return(result);
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80078b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078bc:	633a      	str	r2, [r7, #48]	; 0x30
 80078be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e5      	bne.n	800789c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078e4:	637b      	str	r3, [r7, #52]	; 0x34
 80078e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ee:	61fb      	str	r3, [r7, #28]
 80078f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	69b9      	ldr	r1, [r7, #24]
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	617b      	str	r3, [r7, #20]
   return(result);
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e6      	bne.n	80078d0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007902:	e002      	b.n	800790a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007904:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007906:	f7ff fa2d 	bl	8006d64 <HAL_UART_TxCpltCallback>
}
 800790a:	bf00      	nop
 800790c:	3740      	adds	r7, #64	; 0x40
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff fa29 	bl	8006d78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b09c      	sub	sp, #112	; 0x70
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007944:	d071      	beq.n	8007a2a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8007946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007948:	2200      	movs	r2, #0
 800794a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800795c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800795e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007962:	66bb      	str	r3, [r7, #104]	; 0x68
 8007964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800796c:	65bb      	str	r3, [r7, #88]	; 0x58
 800796e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007972:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800797a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e6      	bne.n	800794e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	3308      	adds	r3, #8
 8007986:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007992:	f023 0301 	bic.w	r3, r3, #1
 8007996:	667b      	str	r3, [r7, #100]	; 0x64
 8007998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3308      	adds	r3, #8
 800799e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80079a0:	647a      	str	r2, [r7, #68]	; 0x44
 80079a2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079a8:	e841 2300 	strex	r3, r2, [r1]
 80079ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d1e5      	bne.n	8007980 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	e853 3f00 	ldrex	r3, [r3]
 80079c2:	623b      	str	r3, [r7, #32]
   return(result);
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079ca:	663b      	str	r3, [r7, #96]	; 0x60
 80079cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3308      	adds	r3, #8
 80079d2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079d4:	633a      	str	r2, [r7, #48]	; 0x30
 80079d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079dc:	e841 2300 	strex	r3, r2, [r1]
 80079e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1e5      	bne.n	80079b4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80079e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ea:	2220      	movs	r2, #32
 80079ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d118      	bne.n	8007a2a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f023 0310 	bic.w	r3, r3, #16
 8007a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1a:	69b9      	ldr	r1, [r7, #24]
 8007a1c:	69fa      	ldr	r2, [r7, #28]
 8007a1e:	e841 2300 	strex	r3, r2, [r1]
 8007a22:	617b      	str	r3, [r7, #20]
   return(result);
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e6      	bne.n	80079f8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d107      	bne.n	8007a48 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a42:	f7ff f9c1 	bl	8006dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a46:	e002      	b.n	8007a4e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8007a48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a4a:	f7ff f99f 	bl	8006d8c <HAL_UART_RxCpltCallback>
}
 8007a4e:	bf00      	nop
 8007a50:	3770      	adds	r7, #112	; 0x70
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d109      	bne.n	8007a86 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007a78:	085b      	lsrs	r3, r3, #1
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f7ff f9a2 	bl	8006dc8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a84:	e002      	b.n	8007a8c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f7ff f98a 	bl	8006da0 <HAL_UART_RxHalfCpltCallback>
}
 8007a8c:	bf00      	nop
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007aa8:	697b      	ldr	r3, [r7, #20]
 8007aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d109      	bne.n	8007ad2 <UART_DMAError+0x3e>
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b21      	cmp	r3, #33	; 0x21
 8007ac2:	d106      	bne.n	8007ad2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8007acc:	6978      	ldr	r0, [r7, #20]
 8007ace:	f7ff fe4b 	bl	8007768 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007adc:	2b40      	cmp	r3, #64	; 0x40
 8007ade:	d109      	bne.n	8007af4 <UART_DMAError+0x60>
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2b22      	cmp	r3, #34	; 0x22
 8007ae4:	d106      	bne.n	8007af4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8007aee:	6978      	ldr	r0, [r7, #20]
 8007af0:	f7ff fe60 	bl	80077b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007afa:	f043 0210 	orr.w	r2, r3, #16
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b04:	6978      	ldr	r0, [r7, #20]
 8007b06:	f7ff f955 	bl	8006db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b0a:	bf00      	nop
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b084      	sub	sp, #16
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7ff f93f 	bl	8006db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b088      	sub	sp, #32
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	461a      	mov	r2, r3
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	61bb      	str	r3, [r7, #24]
 8007b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b68:	6979      	ldr	r1, [r7, #20]
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	e841 2300 	strex	r3, r2, [r1]
 8007b70:	613b      	str	r3, [r7, #16]
   return(result);
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1e6      	bne.n	8007b46 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2220      	movs	r2, #32
 8007b7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7ff f8ed 	bl	8006d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b8a:	bf00      	nop
 8007b8c:	3720      	adds	r7, #32
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bd80      	pop	{r7, pc}
	...

08007b94 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	4613      	mov	r3, r2
 8007ba0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d165      	bne.n	8007c74 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	4a41      	ldr	r2, [pc, #260]	; (8007cb0 <USB_SetTurnaroundTime+0x11c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d906      	bls.n	8007bbe <USB_SetTurnaroundTime+0x2a>
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	4a40      	ldr	r2, [pc, #256]	; (8007cb4 <USB_SetTurnaroundTime+0x120>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d202      	bcs.n	8007bbe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007bb8:	230f      	movs	r3, #15
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	e062      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	4a3c      	ldr	r2, [pc, #240]	; (8007cb4 <USB_SetTurnaroundTime+0x120>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d306      	bcc.n	8007bd4 <USB_SetTurnaroundTime+0x40>
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4a3b      	ldr	r2, [pc, #236]	; (8007cb8 <USB_SetTurnaroundTime+0x124>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d202      	bcs.n	8007bd4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007bce:	230e      	movs	r3, #14
 8007bd0:	617b      	str	r3, [r7, #20]
 8007bd2:	e057      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	4a38      	ldr	r2, [pc, #224]	; (8007cb8 <USB_SetTurnaroundTime+0x124>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d306      	bcc.n	8007bea <USB_SetTurnaroundTime+0x56>
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	4a37      	ldr	r2, [pc, #220]	; (8007cbc <USB_SetTurnaroundTime+0x128>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d202      	bcs.n	8007bea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007be4:	230d      	movs	r3, #13
 8007be6:	617b      	str	r3, [r7, #20]
 8007be8:	e04c      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	4a33      	ldr	r2, [pc, #204]	; (8007cbc <USB_SetTurnaroundTime+0x128>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d306      	bcc.n	8007c00 <USB_SetTurnaroundTime+0x6c>
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	4a32      	ldr	r2, [pc, #200]	; (8007cc0 <USB_SetTurnaroundTime+0x12c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d802      	bhi.n	8007c00 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007bfa:	230c      	movs	r3, #12
 8007bfc:	617b      	str	r3, [r7, #20]
 8007bfe:	e041      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4a2f      	ldr	r2, [pc, #188]	; (8007cc0 <USB_SetTurnaroundTime+0x12c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d906      	bls.n	8007c16 <USB_SetTurnaroundTime+0x82>
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	4a2e      	ldr	r2, [pc, #184]	; (8007cc4 <USB_SetTurnaroundTime+0x130>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d802      	bhi.n	8007c16 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c10:	230b      	movs	r3, #11
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e036      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4a2a      	ldr	r2, [pc, #168]	; (8007cc4 <USB_SetTurnaroundTime+0x130>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d906      	bls.n	8007c2c <USB_SetTurnaroundTime+0x98>
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	4a29      	ldr	r2, [pc, #164]	; (8007cc8 <USB_SetTurnaroundTime+0x134>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d802      	bhi.n	8007c2c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c26:	230a      	movs	r3, #10
 8007c28:	617b      	str	r3, [r7, #20]
 8007c2a:	e02b      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4a26      	ldr	r2, [pc, #152]	; (8007cc8 <USB_SetTurnaroundTime+0x134>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d906      	bls.n	8007c42 <USB_SetTurnaroundTime+0xae>
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4a25      	ldr	r2, [pc, #148]	; (8007ccc <USB_SetTurnaroundTime+0x138>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d202      	bcs.n	8007c42 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c3c:	2309      	movs	r3, #9
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e020      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4a21      	ldr	r2, [pc, #132]	; (8007ccc <USB_SetTurnaroundTime+0x138>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d306      	bcc.n	8007c58 <USB_SetTurnaroundTime+0xc4>
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	4a20      	ldr	r2, [pc, #128]	; (8007cd0 <USB_SetTurnaroundTime+0x13c>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d802      	bhi.n	8007c58 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c52:	2308      	movs	r3, #8
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	e015      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4a1d      	ldr	r2, [pc, #116]	; (8007cd0 <USB_SetTurnaroundTime+0x13c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d906      	bls.n	8007c6e <USB_SetTurnaroundTime+0xda>
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <USB_SetTurnaroundTime+0x140>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d202      	bcs.n	8007c6e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c68:	2307      	movs	r3, #7
 8007c6a:	617b      	str	r3, [r7, #20]
 8007c6c:	e00a      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c6e:	2306      	movs	r3, #6
 8007c70:	617b      	str	r3, [r7, #20]
 8007c72:	e007      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d102      	bne.n	8007c80 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c7a:	2309      	movs	r3, #9
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	e001      	b.n	8007c84 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c80:	2309      	movs	r3, #9
 8007c82:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68da      	ldr	r2, [r3, #12]
 8007c94:	697b      	ldr	r3, [r7, #20]
 8007c96:	029b      	lsls	r3, r3, #10
 8007c98:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c9c:	431a      	orrs	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	371c      	adds	r7, #28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	00d8acbf 	.word	0x00d8acbf
 8007cb4:	00e4e1c0 	.word	0x00e4e1c0
 8007cb8:	00f42400 	.word	0x00f42400
 8007cbc:	01067380 	.word	0x01067380
 8007cc0:	011a499f 	.word	0x011a499f
 8007cc4:	01312cff 	.word	0x01312cff
 8007cc8:	014ca43f 	.word	0x014ca43f
 8007ccc:	016e3600 	.word	0x016e3600
 8007cd0:	01a6ab1f 	.word	0x01a6ab1f
 8007cd4:	01e84800 	.word	0x01e84800

08007cd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	3301      	adds	r3, #1
 8007cea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	4a13      	ldr	r2, [pc, #76]	; (8007d3c <USB_FlushTxFifo+0x64>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d901      	bls.n	8007cf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e01b      	b.n	8007d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	daf2      	bge.n	8007ce6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	019b      	lsls	r3, r3, #6
 8007d08:	f043 0220 	orr.w	r2, r3, #32
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	4a08      	ldr	r2, [pc, #32]	; (8007d3c <USB_FlushTxFifo+0x64>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d901      	bls.n	8007d22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e006      	b.n	8007d30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	691b      	ldr	r3, [r3, #16]
 8007d26:	f003 0320 	and.w	r3, r3, #32
 8007d2a:	2b20      	cmp	r3, #32
 8007d2c:	d0f0      	beq.n	8007d10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	00030d40 	.word	0x00030d40

08007d40 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b087      	sub	sp, #28
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 0306 	and.w	r3, r3, #6
 8007d58:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d102      	bne.n	8007d66 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007d60:	2300      	movs	r3, #0
 8007d62:	75fb      	strb	r3, [r7, #23]
 8007d64:	e00a      	b.n	8007d7c <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b02      	cmp	r3, #2
 8007d6a:	d002      	beq.n	8007d72 <USB_GetDevSpeed+0x32>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b06      	cmp	r3, #6
 8007d70:	d102      	bne.n	8007d78 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007d72:	2302      	movs	r3, #2
 8007d74:	75fb      	strb	r3, [r7, #23]
 8007d76:	e001      	b.n	8007d7c <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007d78:	230f      	movs	r3, #15
 8007d7a:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
	...

08007d8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b085      	sub	sp, #20
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	785b      	ldrb	r3, [r3, #1]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d139      	bne.n	8007e1c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dae:	69da      	ldr	r2, [r3, #28]
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	f003 030f 	and.w	r3, r3, #15
 8007db8:	2101      	movs	r1, #1
 8007dba:	fa01 f303 	lsl.w	r3, r1, r3
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	68f9      	ldr	r1, [r7, #12]
 8007dc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d153      	bne.n	8007e88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	791b      	ldrb	r3, [r3, #4]
 8007dfa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007dfc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	059b      	lsls	r3, r3, #22
 8007e02:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007e04:	431a      	orrs	r2, r3
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	0159      	lsls	r1, r3, #5
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	440b      	add	r3, r1
 8007e0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e12:	4619      	mov	r1, r3
 8007e14:	4b20      	ldr	r3, [pc, #128]	; (8007e98 <USB_ActivateEndpoint+0x10c>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	600b      	str	r3, [r1, #0]
 8007e1a:	e035      	b.n	8007e88 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e22:	69da      	ldr	r2, [r3, #28]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	f003 030f 	and.w	r3, r3, #15
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8007e32:	041b      	lsls	r3, r3, #16
 8007e34:	68f9      	ldr	r1, [r7, #12]
 8007e36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	015a      	lsls	r2, r3, #5
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d119      	bne.n	8007e88 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	791b      	ldrb	r3, [r3, #4]
 8007e6e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007e70:	430b      	orrs	r3, r1
 8007e72:	431a      	orrs	r2, r3
 8007e74:	68bb      	ldr	r3, [r7, #8]
 8007e76:	0159      	lsls	r1, r3, #5
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	440b      	add	r3, r1
 8007e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e80:	4619      	mov	r1, r3
 8007e82:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <USB_ActivateEndpoint+0x10c>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	10008000 	.word	0x10008000

08007e9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af02      	add	r7, sp, #8
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	f040 8163 	bne.w	8008184 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d132      	bne.n	8007f2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed2:	691a      	ldr	r2, [r3, #16]
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	0159      	lsls	r1, r3, #5
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	440b      	add	r3, r1
 8007edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4ba5      	ldr	r3, [pc, #660]	; (8008178 <USB_EPStartXfer+0x2dc>)
 8007ee4:	4013      	ands	r3, r2
 8007ee6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	69ba      	ldr	r2, [r7, #24]
 8007ef8:	0151      	lsls	r1, r2, #5
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	440a      	add	r2, r1
 8007efe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	015a      	lsls	r2, r3, #5
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	4413      	add	r3, r2
 8007f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	0159      	lsls	r1, r3, #5
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	440b      	add	r3, r1
 8007f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f22:	4619      	mov	r1, r3
 8007f24:	4b95      	ldr	r3, [pc, #596]	; (800817c <USB_EPStartXfer+0x2e0>)
 8007f26:	4013      	ands	r3, r2
 8007f28:	610b      	str	r3, [r1, #16]
 8007f2a:	e074      	b.n	8008016 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f38:	691a      	ldr	r2, [r3, #16]
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	0159      	lsls	r1, r3, #5
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	440b      	add	r3, r1
 8007f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f46:	4619      	mov	r1, r3
 8007f48:	4b8c      	ldr	r3, [pc, #560]	; (800817c <USB_EPStartXfer+0x2e0>)
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	015a      	lsls	r2, r3, #5
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	4413      	add	r3, r2
 8007f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5a:	691a      	ldr	r2, [r3, #16]
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	0159      	lsls	r1, r3, #5
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	440b      	add	r3, r1
 8007f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4b83      	ldr	r3, [pc, #524]	; (8008178 <USB_EPStartXfer+0x2dc>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	6999      	ldr	r1, [r3, #24]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	440b      	add	r3, r1
 8007f88:	1e59      	subs	r1, r3, #1
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007f92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f94:	4b7a      	ldr	r3, [pc, #488]	; (8008180 <USB_EPStartXfer+0x2e4>)
 8007f96:	400b      	ands	r3, r1
 8007f98:	69b9      	ldr	r1, [r7, #24]
 8007f9a:	0148      	lsls	r0, r1, #5
 8007f9c:	69f9      	ldr	r1, [r7, #28]
 8007f9e:	4401      	add	r1, r0
 8007fa0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fa8:	69bb      	ldr	r3, [r7, #24]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	691a      	ldr	r2, [r3, #16]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fbe:	69b9      	ldr	r1, [r7, #24]
 8007fc0:	0148      	lsls	r0, r1, #5
 8007fc2:	69f9      	ldr	r1, [r7, #28]
 8007fc4:	4401      	add	r1, r0
 8007fc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	791b      	ldrb	r3, [r3, #4]
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d11f      	bne.n	8008016 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	015a      	lsls	r2, r3, #5
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	4413      	add	r3, r2
 8007fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe2:	691b      	ldr	r3, [r3, #16]
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	0151      	lsls	r1, r2, #5
 8007fe8:	69fa      	ldr	r2, [r7, #28]
 8007fea:	440a      	add	r2, r1
 8007fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ff0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007ff4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008002:	691b      	ldr	r3, [r3, #16]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008010:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008014:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008016:	79fb      	ldrb	r3, [r7, #7]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d14b      	bne.n	80080b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	695b      	ldr	r3, [r3, #20]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d009      	beq.n	8008038 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	4413      	add	r3, r2
 800802c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008030:	461a      	mov	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	791b      	ldrb	r3, [r3, #4]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d128      	bne.n	8008092 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804c:	2b00      	cmp	r3, #0
 800804e:	d110      	bne.n	8008072 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	69fb      	ldr	r3, [r7, #28]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	69ba      	ldr	r2, [r7, #24]
 8008060:	0151      	lsls	r1, r2, #5
 8008062:	69fa      	ldr	r2, [r7, #28]
 8008064:	440a      	add	r2, r1
 8008066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800806a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800806e:	6013      	str	r3, [r2, #0]
 8008070:	e00f      	b.n	8008092 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	015a      	lsls	r2, r3, #5
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	4413      	add	r3, r2
 800807a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	69ba      	ldr	r2, [r7, #24]
 8008082:	0151      	lsls	r1, r2, #5
 8008084:	69fa      	ldr	r2, [r7, #28]
 8008086:	440a      	add	r2, r1
 8008088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008090:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008092:	69bb      	ldr	r3, [r7, #24]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	69ba      	ldr	r2, [r7, #24]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	69fa      	ldr	r2, [r7, #28]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	e137      	b.n	8008324 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	69ba      	ldr	r2, [r7, #24]
 80080c4:	0151      	lsls	r1, r2, #5
 80080c6:	69fa      	ldr	r2, [r7, #28]
 80080c8:	440a      	add	r2, r1
 80080ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	791b      	ldrb	r3, [r3, #4]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d015      	beq.n	8008108 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 811f 	beq.w	8008324 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80080e6:	69fb      	ldr	r3, [r7, #28]
 80080e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	f003 030f 	and.w	r3, r3, #15
 80080f6:	2101      	movs	r1, #1
 80080f8:	fa01 f303 	lsl.w	r3, r1, r3
 80080fc:	69f9      	ldr	r1, [r7, #28]
 80080fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008102:	4313      	orrs	r3, r2
 8008104:	634b      	str	r3, [r1, #52]	; 0x34
 8008106:	e10d      	b.n	8008324 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008114:	2b00      	cmp	r3, #0
 8008116:	d110      	bne.n	800813a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	440a      	add	r2, r1
 800812e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e00f      	b.n	800815a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	0151      	lsls	r1, r2, #5
 800814c:	69fa      	ldr	r2, [r7, #28]
 800814e:	440a      	add	r2, r1
 8008150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008158:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6919      	ldr	r1, [r3, #16]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	781a      	ldrb	r2, [r3, #0]
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	b298      	uxth	r0, r3
 8008168:	79fb      	ldrb	r3, [r7, #7]
 800816a:	9300      	str	r3, [sp, #0]
 800816c:	4603      	mov	r3, r0
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f000 faea 	bl	8008748 <USB_WritePacket>
 8008174:	e0d6      	b.n	8008324 <USB_EPStartXfer+0x488>
 8008176:	bf00      	nop
 8008178:	e007ffff 	.word	0xe007ffff
 800817c:	fff80000 	.word	0xfff80000
 8008180:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	015a      	lsls	r2, r3, #5
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	4413      	add	r3, r2
 800818c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008190:	691a      	ldr	r2, [r3, #16]
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	0159      	lsls	r1, r3, #5
 8008196:	69fb      	ldr	r3, [r7, #28]
 8008198:	440b      	add	r3, r1
 800819a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819e:	4619      	mov	r1, r3
 80081a0:	4b63      	ldr	r3, [pc, #396]	; (8008330 <USB_EPStartXfer+0x494>)
 80081a2:	4013      	ands	r3, r2
 80081a4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081a6:	69bb      	ldr	r3, [r7, #24]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b2:	691a      	ldr	r2, [r3, #16]
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	0159      	lsls	r1, r3, #5
 80081b8:	69fb      	ldr	r3, [r7, #28]
 80081ba:	440b      	add	r3, r1
 80081bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c0:	4619      	mov	r1, r3
 80081c2:	4b5c      	ldr	r3, [pc, #368]	; (8008334 <USB_EPStartXfer+0x498>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d123      	bne.n	8008218 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	015a      	lsls	r2, r3, #5
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	4413      	add	r3, r2
 80081d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081dc:	691a      	ldr	r2, [r3, #16]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	0148      	lsls	r0, r1, #5
 80081ea:	69f9      	ldr	r1, [r7, #28]
 80081ec:	4401      	add	r1, r0
 80081ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80081f2:	4313      	orrs	r3, r2
 80081f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008202:	691b      	ldr	r3, [r3, #16]
 8008204:	69ba      	ldr	r2, [r7, #24]
 8008206:	0151      	lsls	r1, r2, #5
 8008208:	69fa      	ldr	r2, [r7, #28]
 800820a:	440a      	add	r2, r1
 800820c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008214:	6113      	str	r3, [r2, #16]
 8008216:	e037      	b.n	8008288 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	699a      	ldr	r2, [r3, #24]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	4413      	add	r3, r2
 8008222:	1e5a      	subs	r2, r3, #1
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	fbb2 f3f3 	udiv	r3, r2, r3
 800822c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	8afa      	ldrh	r2, [r7, #22]
 8008234:	fb03 f202 	mul.w	r2, r3, r2
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	015a      	lsls	r2, r3, #5
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	4413      	add	r3, r2
 8008244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008248:	691a      	ldr	r2, [r3, #16]
 800824a:	8afb      	ldrh	r3, [r7, #22]
 800824c:	04d9      	lsls	r1, r3, #19
 800824e:	4b3a      	ldr	r3, [pc, #232]	; (8008338 <USB_EPStartXfer+0x49c>)
 8008250:	400b      	ands	r3, r1
 8008252:	69b9      	ldr	r1, [r7, #24]
 8008254:	0148      	lsls	r0, r1, #5
 8008256:	69f9      	ldr	r1, [r7, #28]
 8008258:	4401      	add	r1, r0
 800825a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800825e:	4313      	orrs	r3, r2
 8008260:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826e:	691a      	ldr	r2, [r3, #16]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	69db      	ldr	r3, [r3, #28]
 8008274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008278:	69b9      	ldr	r1, [r7, #24]
 800827a:	0148      	lsls	r0, r1, #5
 800827c:	69f9      	ldr	r1, [r7, #28]
 800827e:	4401      	add	r1, r0
 8008280:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008284:	4313      	orrs	r3, r2
 8008286:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008288:	79fb      	ldrb	r3, [r7, #7]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d10d      	bne.n	80082aa <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	6919      	ldr	r1, [r3, #16]
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a6:	460a      	mov	r2, r1
 80082a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	791b      	ldrb	r3, [r3, #4]
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d128      	bne.n	8008304 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b8:	689b      	ldr	r3, [r3, #8]
 80082ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d110      	bne.n	80082e4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	015a      	lsls	r2, r3, #5
 80082c6:	69fb      	ldr	r3, [r7, #28]
 80082c8:	4413      	add	r3, r2
 80082ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69ba      	ldr	r2, [r7, #24]
 80082d2:	0151      	lsls	r1, r2, #5
 80082d4:	69fa      	ldr	r2, [r7, #28]
 80082d6:	440a      	add	r2, r1
 80082d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	e00f      	b.n	8008304 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80082e4:	69bb      	ldr	r3, [r7, #24]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69ba      	ldr	r2, [r7, #24]
 80082f4:	0151      	lsls	r1, r2, #5
 80082f6:	69fa      	ldr	r2, [r7, #28]
 80082f8:	440a      	add	r2, r1
 80082fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008302:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008304:	69bb      	ldr	r3, [r7, #24]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69ba      	ldr	r2, [r7, #24]
 8008314:	0151      	lsls	r1, r2, #5
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	440a      	add	r2, r1
 800831a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800831e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008322:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3720      	adds	r7, #32
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	fff80000 	.word	0xfff80000
 8008334:	e007ffff 	.word	0xe007ffff
 8008338:	1ff80000 	.word	0x1ff80000

0800833c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b01      	cmp	r3, #1
 800835a:	f040 80ce 	bne.w	80084fa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d132      	bne.n	80083cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	015a      	lsls	r2, r3, #5
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	4413      	add	r3, r2
 800836e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008372:	691a      	ldr	r2, [r3, #16]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	0159      	lsls	r1, r3, #5
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	440b      	add	r3, r1
 800837c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008380:	4619      	mov	r1, r3
 8008382:	4b9a      	ldr	r3, [pc, #616]	; (80085ec <USB_EP0StartXfer+0x2b0>)
 8008384:	4013      	ands	r3, r2
 8008386:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	693a      	ldr	r2, [r7, #16]
 8008398:	0151      	lsls	r1, r2, #5
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	440a      	add	r2, r1
 800839e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b4:	691a      	ldr	r2, [r3, #16]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	0159      	lsls	r1, r3, #5
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	440b      	add	r3, r1
 80083be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083c2:	4619      	mov	r1, r3
 80083c4:	4b8a      	ldr	r3, [pc, #552]	; (80085f0 <USB_EP0StartXfer+0x2b4>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	610b      	str	r3, [r1, #16]
 80083ca:	e04e      	b.n	800846a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	015a      	lsls	r2, r3, #5
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	4413      	add	r3, r2
 80083d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	0159      	lsls	r1, r3, #5
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	440b      	add	r3, r1
 80083e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083e6:	4619      	mov	r1, r3
 80083e8:	4b81      	ldr	r3, [pc, #516]	; (80085f0 <USB_EP0StartXfer+0x2b4>)
 80083ea:	4013      	ands	r3, r2
 80083ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	015a      	lsls	r2, r3, #5
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	4413      	add	r3, r2
 80083f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083fa:	691a      	ldr	r2, [r3, #16]
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	0159      	lsls	r1, r3, #5
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	440b      	add	r3, r1
 8008404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008408:	4619      	mov	r1, r3
 800840a:	4b78      	ldr	r3, [pc, #480]	; (80085ec <USB_EP0StartXfer+0x2b0>)
 800840c:	4013      	ands	r3, r2
 800840e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	699a      	ldr	r2, [r3, #24]
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	429a      	cmp	r2, r3
 800841a:	d903      	bls.n	8008424 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	68da      	ldr	r2, [r3, #12]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008424:	693b      	ldr	r3, [r7, #16]
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	693a      	ldr	r2, [r7, #16]
 8008434:	0151      	lsls	r1, r2, #5
 8008436:	697a      	ldr	r2, [r7, #20]
 8008438:	440a      	add	r2, r1
 800843a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800843e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	015a      	lsls	r2, r3, #5
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	4413      	add	r3, r2
 800844c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008450:	691a      	ldr	r2, [r3, #16]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	699b      	ldr	r3, [r3, #24]
 8008456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800845a:	6939      	ldr	r1, [r7, #16]
 800845c:	0148      	lsls	r0, r1, #5
 800845e:	6979      	ldr	r1, [r7, #20]
 8008460:	4401      	add	r1, r0
 8008462:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008466:	4313      	orrs	r3, r2
 8008468:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d11e      	bne.n	80084ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d009      	beq.n	800848c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	015a      	lsls	r2, r3, #5
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	4413      	add	r3, r2
 8008480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008484:	461a      	mov	r2, r3
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	695b      	ldr	r3, [r3, #20]
 800848a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	e097      	b.n	80085de <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	697a      	ldr	r2, [r7, #20]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	699b      	ldr	r3, [r3, #24]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 8083 	beq.w	80085de <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	2101      	movs	r1, #1
 80084ea:	fa01 f303 	lsl.w	r3, r1, r3
 80084ee:	6979      	ldr	r1, [r7, #20]
 80084f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084f4:	4313      	orrs	r3, r2
 80084f6:	634b      	str	r3, [r1, #52]	; 0x34
 80084f8:	e071      	b.n	80085de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	015a      	lsls	r2, r3, #5
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	4413      	add	r3, r2
 8008502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008506:	691a      	ldr	r2, [r3, #16]
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	0159      	lsls	r1, r3, #5
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	440b      	add	r3, r1
 8008510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008514:	4619      	mov	r1, r3
 8008516:	4b36      	ldr	r3, [pc, #216]	; (80085f0 <USB_EP0StartXfer+0x2b4>)
 8008518:	4013      	ands	r3, r2
 800851a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	691a      	ldr	r2, [r3, #16]
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	0159      	lsls	r1, r3, #5
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	440b      	add	r3, r1
 8008532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008536:	4619      	mov	r1, r3
 8008538:	4b2c      	ldr	r3, [pc, #176]	; (80085ec <USB_EP0StartXfer+0x2b0>)
 800853a:	4013      	ands	r3, r2
 800853c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	699b      	ldr	r3, [r3, #24]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d003      	beq.n	800854e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	68da      	ldr	r2, [r3, #12]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	015a      	lsls	r2, r3, #5
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	4413      	add	r3, r2
 800855e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008562:	691b      	ldr	r3, [r3, #16]
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	0151      	lsls	r1, r2, #5
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	440a      	add	r2, r1
 800856c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	015a      	lsls	r2, r3, #5
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	4413      	add	r3, r2
 800857e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008582:	691a      	ldr	r2, [r3, #16]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	69db      	ldr	r3, [r3, #28]
 8008588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800858c:	6939      	ldr	r1, [r7, #16]
 800858e:	0148      	lsls	r0, r1, #5
 8008590:	6979      	ldr	r1, [r7, #20]
 8008592:	4401      	add	r1, r0
 8008594:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008598:	4313      	orrs	r3, r2
 800859a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800859c:	79fb      	ldrb	r3, [r7, #7]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d10d      	bne.n	80085be <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d009      	beq.n	80085be <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	6919      	ldr	r1, [r3, #16]
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ba:	460a      	mov	r2, r1
 80085bc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085be:	693b      	ldr	r3, [r7, #16]
 80085c0:	015a      	lsls	r2, r3, #5
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	4413      	add	r3, r2
 80085c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	0151      	lsls	r1, r2, #5
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	440a      	add	r2, r1
 80085d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr
 80085ec:	e007ffff 	.word	0xe007ffff
 80085f0:	fff80000 	.word	0xfff80000

080085f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80085fe:	2300      	movs	r3, #0
 8008600:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008602:	2300      	movs	r3, #0
 8008604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	785b      	ldrb	r3, [r3, #1]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d14a      	bne.n	80086a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800862a:	f040 8086 	bne.w	800873a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	7812      	ldrb	r2, [r2, #0]
 8008642:	0151      	lsls	r1, r2, #5
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	440a      	add	r2, r1
 8008648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800864c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008650:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	7812      	ldrb	r2, [r2, #0]
 8008666:	0151      	lsls	r1, r2, #5
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	440a      	add	r2, r1
 800866c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008674:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	3301      	adds	r3, #1
 800867a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008682:	4293      	cmp	r3, r2
 8008684:	d902      	bls.n	800868c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	75fb      	strb	r3, [r7, #23]
          break;
 800868a:	e056      	b.n	800873a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	4413      	add	r3, r2
 8008696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086a4:	d0e7      	beq.n	8008676 <USB_EPStopXfer+0x82>
 80086a6:	e048      	b.n	800873a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	015a      	lsls	r2, r3, #5
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	4413      	add	r3, r2
 80086b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086c0:	d13b      	bne.n	800873a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	015a      	lsls	r2, r3, #5
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	4413      	add	r3, r2
 80086cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	7812      	ldrb	r2, [r2, #0]
 80086d6:	0151      	lsls	r1, r2, #5
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	440a      	add	r2, r1
 80086dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	015a      	lsls	r2, r3, #5
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	4413      	add	r3, r2
 80086f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	7812      	ldrb	r2, [r2, #0]
 80086fa:	0151      	lsls	r1, r2, #5
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	440a      	add	r2, r1
 8008700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008708:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3301      	adds	r3, #1
 800870e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f242 7210 	movw	r2, #10000	; 0x2710
 8008716:	4293      	cmp	r3, r2
 8008718:	d902      	bls.n	8008720 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	75fb      	strb	r3, [r7, #23]
          break;
 800871e:	e00c      	b.n	800873a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008738:	d0e7      	beq.n	800870a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800873a:	7dfb      	ldrb	r3, [r7, #23]
}
 800873c:	4618      	mov	r0, r3
 800873e:	371c      	adds	r7, #28
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008748:	b480      	push	{r7}
 800874a:	b089      	sub	sp, #36	; 0x24
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	4611      	mov	r1, r2
 8008754:	461a      	mov	r2, r3
 8008756:	460b      	mov	r3, r1
 8008758:	71fb      	strb	r3, [r7, #7]
 800875a:	4613      	mov	r3, r2
 800875c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800876a:	2b00      	cmp	r3, #0
 800876c:	d123      	bne.n	80087b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800876e:	88bb      	ldrh	r3, [r7, #4]
 8008770:	3303      	adds	r3, #3
 8008772:	089b      	lsrs	r3, r3, #2
 8008774:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008776:	2300      	movs	r3, #0
 8008778:	61bb      	str	r3, [r7, #24]
 800877a:	e018      	b.n	80087ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	031a      	lsls	r2, r3, #12
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008788:	461a      	mov	r2, r3
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	3301      	adds	r3, #1
 8008794:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	3301      	adds	r3, #1
 800879a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	3301      	adds	r3, #1
 80087a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	3301      	adds	r3, #1
 80087a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	3301      	adds	r3, #1
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d3e2      	bcc.n	800877c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3724      	adds	r7, #36	; 0x24
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr

080087c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b08b      	sub	sp, #44	; 0x2c
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80087da:	88fb      	ldrh	r3, [r7, #6]
 80087dc:	089b      	lsrs	r3, r3, #2
 80087de:	b29b      	uxth	r3, r3
 80087e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	f003 0303 	and.w	r3, r3, #3
 80087e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80087ea:	2300      	movs	r3, #0
 80087ec:	623b      	str	r3, [r7, #32]
 80087ee:	e014      	b.n	800881a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fa:	601a      	str	r2, [r3, #0]
    pDest++;
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	3301      	adds	r3, #1
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	3301      	adds	r3, #1
 8008806:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	3301      	adds	r3, #1
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	3301      	adds	r3, #1
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	3301      	adds	r3, #1
 8008818:	623b      	str	r3, [r7, #32]
 800881a:	6a3a      	ldr	r2, [r7, #32]
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	429a      	cmp	r2, r3
 8008820:	d3e6      	bcc.n	80087f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008822:	8bfb      	ldrh	r3, [r7, #30]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d01e      	beq.n	8008866 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008828:	2300      	movs	r3, #0
 800882a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008832:	461a      	mov	r2, r3
 8008834:	f107 0310 	add.w	r3, r7, #16
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800883c:	693a      	ldr	r2, [r7, #16]
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	b2db      	uxtb	r3, r3
 8008842:	00db      	lsls	r3, r3, #3
 8008844:	fa22 f303 	lsr.w	r3, r2, r3
 8008848:	b2da      	uxtb	r2, r3
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	701a      	strb	r2, [r3, #0]
      i++;
 800884e:	6a3b      	ldr	r3, [r7, #32]
 8008850:	3301      	adds	r3, #1
 8008852:	623b      	str	r3, [r7, #32]
      pDest++;
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	3301      	adds	r3, #1
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800885a:	8bfb      	ldrh	r3, [r7, #30]
 800885c:	3b01      	subs	r3, #1
 800885e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008860:	8bfb      	ldrh	r3, [r7, #30]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1ea      	bne.n	800883c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008868:	4618      	mov	r0, r3
 800886a:	372c      	adds	r7, #44	; 0x2c
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d12c      	bne.n	80088ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	015a      	lsls	r2, r3, #5
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4413      	add	r3, r2
 8008898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	db12      	blt.n	80088c8 <USB_EPSetStall+0x54>
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d00f      	beq.n	80088c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	0151      	lsls	r1, r2, #5
 80088ba:	68fa      	ldr	r2, [r7, #12]
 80088bc:	440a      	add	r2, r1
 80088be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	e02b      	b.n	8008942 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	db12      	blt.n	8008922 <USB_EPSetStall+0xae>
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00f      	beq.n	8008922 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	0151      	lsls	r1, r2, #5
 8008914:	68fa      	ldr	r2, [r7, #12]
 8008916:	440a      	add	r2, r1
 8008918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800891c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008920:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68ba      	ldr	r2, [r7, #8]
 8008932:	0151      	lsls	r1, r2, #5
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	440a      	add	r2, r1
 8008938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800893c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008940:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr

08008950 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d128      	bne.n	80089be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	015a      	lsls	r2, r3, #5
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	4413      	add	r3, r2
 8008974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	0151      	lsls	r1, r2, #5
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	440a      	add	r2, r1
 8008982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800898a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	791b      	ldrb	r3, [r3, #4]
 8008990:	2b03      	cmp	r3, #3
 8008992:	d003      	beq.n	800899c <USB_EPClearStall+0x4c>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	791b      	ldrb	r3, [r3, #4]
 8008998:	2b02      	cmp	r3, #2
 800899a:	d138      	bne.n	8008a0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	0151      	lsls	r1, r2, #5
 80089ae:	68fa      	ldr	r2, [r7, #12]
 80089b0:	440a      	add	r2, r1
 80089b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	e027      	b.n	8008a0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	0151      	lsls	r1, r2, #5
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	440a      	add	r2, r1
 80089d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	791b      	ldrb	r3, [r3, #4]
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d003      	beq.n	80089ee <USB_EPClearStall+0x9e>
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	791b      	ldrb	r3, [r3, #4]
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d10f      	bne.n	8008a0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	015a      	lsls	r2, r3, #5
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	4413      	add	r3, r2
 80089f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	0151      	lsls	r1, r2, #5
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	440a      	add	r2, r1
 8008a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3714      	adds	r7, #20
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a46:	681a      	ldr	r2, [r3, #0]
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	011b      	lsls	r3, r3, #4
 8008a4c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008a50:	68f9      	ldr	r1, [r7, #12]
 8008a52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a56:	4313      	orrs	r3, r2
 8008a58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3714      	adds	r7, #20
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	695b      	ldr	r3, [r3, #20]
 8008a74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	699b      	ldr	r3, [r3, #24]
 8008a7a:	68fa      	ldr	r2, [r7, #12]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008a80:	68fb      	ldr	r3, [r7, #12]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3714      	adds	r7, #20
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr

08008a8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a8e:	b480      	push	{r7}
 8008a90:	b085      	sub	sp, #20
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aaa:	69db      	ldr	r3, [r3, #28]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	4013      	ands	r3, r2
 8008ab0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	0c1b      	lsrs	r3, r3, #16
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3714      	adds	r7, #20
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr

08008ac2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ac2:	b480      	push	{r7}
 8008ac4:	b085      	sub	sp, #20
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad4:	699b      	ldr	r3, [r3, #24]
 8008ad6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	68ba      	ldr	r2, [r7, #8]
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	b29b      	uxth	r3, r3
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr

08008af6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008af6:	b480      	push	{r7}
 8008af8:	b085      	sub	sp, #20
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	6078      	str	r0, [r7, #4]
 8008afe:	460b      	mov	r3, r1
 8008b00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	4013      	ands	r3, r2
 8008b22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b24:	68bb      	ldr	r3, [r7, #8]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3714      	adds	r7, #20
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b087      	sub	sp, #28
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008b56:	78fb      	ldrb	r3, [r7, #3]
 8008b58:	f003 030f 	and.w	r3, r3, #15
 8008b5c:	68fa      	ldr	r2, [r7, #12]
 8008b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b62:	01db      	lsls	r3, r3, #7
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008b6c:	78fb      	ldrb	r3, [r7, #3]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008b80:	68bb      	ldr	r3, [r7, #8]
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	371c      	adds	r7, #28
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b083      	sub	sp, #12
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	f003 0301 	and.w	r3, r3, #1
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
	...

08008bac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4b09      	ldr	r3, [pc, #36]	; (8008bf0 <USB_ActivateSetup+0x44>)
 8008bca:	4013      	ands	r3, r2
 8008bcc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008be0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008be2:	2300      	movs	r3, #0
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	3714      	adds	r7, #20
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	fffff800 	.word	0xfffff800

08008bf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b087      	sub	sp, #28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	333c      	adds	r3, #60	; 0x3c
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	4a26      	ldr	r2, [pc, #152]	; (8008cac <USB_EP0_OutStart+0xb8>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d90a      	bls.n	8008c2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c28:	d101      	bne.n	8008c2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	e037      	b.n	8008c9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c34:	461a      	mov	r2, r3
 8008c36:	2300      	movs	r3, #0
 8008c38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c5c:	f043 0318 	orr.w	r3, r3, #24
 8008c60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008c74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008c76:	7afb      	ldrb	r3, [r7, #11]
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d10f      	bne.n	8008c9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c82:	461a      	mov	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008c9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	371c      	adds	r7, #28
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	4f54300a 	.word	0x4f54300a

08008cb0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b083      	sub	sp, #12
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cb8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d009      	beq.n	8008cf4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	78fa      	ldrb	r2, [r7, #3]
 8008cea:	4611      	mov	r1, r2
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	4798      	blx	r3
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b084      	sub	sp, #16
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	78fa      	ldrb	r2, [r7, #3]
 8008d18:	4611      	mov	r1, r2
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008d24:	2303      	movs	r3, #3
 8008d26:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3710      	adds	r7, #16
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b084      	sub	sp, #16
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
 8008d3a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f001 f8dc 	bl	8009f02 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d58:	461a      	mov	r2, r3
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d66:	f003 031f 	and.w	r3, r3, #31
 8008d6a:	2b02      	cmp	r3, #2
 8008d6c:	d01a      	beq.n	8008da4 <USBD_LL_SetupStage+0x72>
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d822      	bhi.n	8008db8 <USBD_LL_SetupStage+0x86>
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d002      	beq.n	8008d7c <USBD_LL_SetupStage+0x4a>
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d00a      	beq.n	8008d90 <USBD_LL_SetupStage+0x5e>
 8008d7a:	e01d      	b.n	8008db8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fb09 	bl	800939c <USBD_StdDevReq>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8e:	e020      	b.n	8008dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fb71 	bl	8009480 <USBD_StdItfReq>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73fb      	strb	r3, [r7, #15]
      break;
 8008da2:	e016      	b.n	8008dd2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008daa:	4619      	mov	r1, r3
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fbd3 	bl	8009558 <USBD_StdEPReq>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73fb      	strb	r3, [r7, #15]
      break;
 8008db6:	e00c      	b.n	8008dd2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008dbe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f004 f858 	bl	800ce7c <USBD_LL_StallEP>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd0:	bf00      	nop
  }

  return ret;
 8008dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	460b      	mov	r3, r1
 8008de6:	607a      	str	r2, [r7, #4]
 8008de8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008dee:	7afb      	ldrb	r3, [r7, #11]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d16e      	bne.n	8008ed2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dfa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	f040 8098 	bne.w	8008f38 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	689a      	ldr	r2, [r3, #8]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d913      	bls.n	8008e3c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	1ad2      	subs	r2, r2, r3
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	689b      	ldr	r3, [r3, #8]
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bf28      	it	cs
 8008e2e:	4613      	movcs	r3, r2
 8008e30:	461a      	mov	r2, r3
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f001 f8db 	bl	8009ff0 <USBD_CtlContinueRx>
 8008e3a:	e07d      	b.n	8008f38 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e42:	f003 031f 	and.w	r3, r3, #31
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d014      	beq.n	8008e74 <USBD_LL_DataOutStage+0x98>
 8008e4a:	2b02      	cmp	r3, #2
 8008e4c:	d81d      	bhi.n	8008e8a <USBD_LL_DataOutStage+0xae>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d002      	beq.n	8008e58 <USBD_LL_DataOutStage+0x7c>
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d003      	beq.n	8008e5e <USBD_LL_DataOutStage+0x82>
 8008e56:	e018      	b.n	8008e8a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	75bb      	strb	r3, [r7, #22]
            break;
 8008e5c:	e018      	b.n	8008e90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	4619      	mov	r1, r3
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f000 fa5e 	bl	800932a <USBD_CoreFindIF>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	75bb      	strb	r3, [r7, #22]
            break;
 8008e72:	e00d      	b.n	8008e90 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 fa60 	bl	8009344 <USBD_CoreFindEP>
 8008e84:	4603      	mov	r3, r0
 8008e86:	75bb      	strb	r3, [r7, #22]
            break;
 8008e88:	e002      	b.n	8008e90 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	75bb      	strb	r3, [r7, #22]
            break;
 8008e8e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e90:	7dbb      	ldrb	r3, [r7, #22]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d119      	bne.n	8008eca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d113      	bne.n	8008eca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008ea2:	7dba      	ldrb	r2, [r7, #22]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	32ae      	adds	r2, #174	; 0xae
 8008ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d00b      	beq.n	8008eca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008eb2:	7dba      	ldrb	r2, [r7, #22]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008eba:	7dba      	ldrb	r2, [r7, #22]
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	32ae      	adds	r2, #174	; 0xae
 8008ec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	68f8      	ldr	r0, [r7, #12]
 8008ec8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f001 f8a1 	bl	800a012 <USBD_CtlSendStatus>
 8008ed0:	e032      	b.n	8008f38 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ed2:	7afb      	ldrb	r3, [r7, #11]
 8008ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	4619      	mov	r1, r3
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 fa31 	bl	8009344 <USBD_CoreFindEP>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ee6:	7dbb      	ldrb	r3, [r7, #22]
 8008ee8:	2bff      	cmp	r3, #255	; 0xff
 8008eea:	d025      	beq.n	8008f38 <USBD_LL_DataOutStage+0x15c>
 8008eec:	7dbb      	ldrb	r3, [r7, #22]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d122      	bne.n	8008f38 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d117      	bne.n	8008f2e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008efe:	7dba      	ldrb	r2, [r7, #22]
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	32ae      	adds	r2, #174	; 0xae
 8008f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00f      	beq.n	8008f2e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008f0e:	7dba      	ldrb	r2, [r7, #22]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008f16:	7dba      	ldrb	r2, [r7, #22]
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	32ae      	adds	r2, #174	; 0xae
 8008f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	7afa      	ldrb	r2, [r7, #11]
 8008f24:	4611      	mov	r1, r2
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	4798      	blx	r3
 8008f2a:	4603      	mov	r3, r0
 8008f2c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f34:	7dfb      	ldrb	r3, [r7, #23]
 8008f36:	e000      	b.n	8008f3a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f38:	2300      	movs	r3, #0
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b086      	sub	sp, #24
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	60f8      	str	r0, [r7, #12]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	607a      	str	r2, [r7, #4]
 8008f4e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f50:	7afb      	ldrb	r3, [r7, #11]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d16f      	bne.n	8009036 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	3314      	adds	r3, #20
 8008f5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d15a      	bne.n	800901c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	689a      	ldr	r2, [r3, #8]
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d914      	bls.n	8008f9c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	689a      	ldr	r2, [r3, #8]
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	1ad2      	subs	r2, r2, r3
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	461a      	mov	r2, r3
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f001 f820 	bl	8009fce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f8e:	2300      	movs	r3, #0
 8008f90:	2200      	movs	r2, #0
 8008f92:	2100      	movs	r1, #0
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f004 f81b 	bl	800cfd0 <USBD_LL_PrepareReceive>
 8008f9a:	e03f      	b.n	800901c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d11c      	bne.n	8008fe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d316      	bcc.n	8008fe2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d20f      	bcs.n	8008fe2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f001 f801 	bl	8009fce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2100      	movs	r1, #0
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	f003 fff8 	bl	800cfd0 <USBD_LL_PrepareReceive>
 8008fe0:	e01c      	b.n	800901c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d10f      	bne.n	800900e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d009      	beq.n	800900e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009008:	68db      	ldr	r3, [r3, #12]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800900e:	2180      	movs	r1, #128	; 0x80
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f003 ff33 	bl	800ce7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009016:	68f8      	ldr	r0, [r7, #12]
 8009018:	f001 f80e 	bl	800a038 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d03a      	beq.n	800909c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff fe42 	bl	8008cb0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009034:	e032      	b.n	800909c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800903c:	b2db      	uxtb	r3, r3
 800903e:	4619      	mov	r1, r3
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 f97f 	bl	8009344 <USBD_CoreFindEP>
 8009046:	4603      	mov	r3, r0
 8009048:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800904a:	7dfb      	ldrb	r3, [r7, #23]
 800904c:	2bff      	cmp	r3, #255	; 0xff
 800904e:	d025      	beq.n	800909c <USBD_LL_DataInStage+0x15a>
 8009050:	7dfb      	ldrb	r3, [r7, #23]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d122      	bne.n	800909c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800905c:	b2db      	uxtb	r3, r3
 800905e:	2b03      	cmp	r3, #3
 8009060:	d11c      	bne.n	800909c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009062:	7dfa      	ldrb	r2, [r7, #23]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	32ae      	adds	r2, #174	; 0xae
 8009068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d014      	beq.n	800909c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009072:	7dfa      	ldrb	r2, [r7, #23]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800907a:	7dfa      	ldrb	r2, [r7, #23]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	32ae      	adds	r2, #174	; 0xae
 8009080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009084:	695b      	ldr	r3, [r3, #20]
 8009086:	7afa      	ldrb	r2, [r7, #11]
 8009088:	4611      	mov	r1, r2
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	4798      	blx	r3
 800908e:	4603      	mov	r3, r0
 8009090:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009092:	7dbb      	ldrb	r3, [r7, #22]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d001      	beq.n	800909c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009098:	7dbb      	ldrb	r3, [r7, #22]
 800909a:	e000      	b.n	800909e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80090ae:	2300      	movs	r3, #0
 80090b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d014      	beq.n	800910c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00e      	beq.n	800910c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	687a      	ldr	r2, [r7, #4]
 80090f8:	6852      	ldr	r2, [r2, #4]
 80090fa:	b2d2      	uxtb	r2, r2
 80090fc:	4611      	mov	r1, r2
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	4798      	blx	r3
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d001      	beq.n	800910c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009108:	2303      	movs	r3, #3
 800910a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800910c:	2340      	movs	r3, #64	; 0x40
 800910e:	2200      	movs	r2, #0
 8009110:	2100      	movs	r1, #0
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f003 fe8c 	bl	800ce30 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2240      	movs	r2, #64	; 0x40
 8009124:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009128:	2340      	movs	r3, #64	; 0x40
 800912a:	2200      	movs	r2, #0
 800912c:	2180      	movs	r1, #128	; 0x80
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f003 fe7e 	bl	800ce30 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2201      	movs	r2, #1
 8009138:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2240      	movs	r2, #64	; 0x40
 800913e:	621a      	str	r2, [r3, #32]

  return ret;
 8009140:	7bfb      	ldrb	r3, [r7, #15]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3710      	adds	r7, #16
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	78fa      	ldrb	r2, [r7, #3]
 800915a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	370c      	adds	r7, #12
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800916a:	b480      	push	{r7}
 800916c:	b083      	sub	sp, #12
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009178:	b2da      	uxtb	r2, r3
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2204      	movs	r2, #4
 8009184:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	370c      	adds	r7, #12
 800918e:	46bd      	mov	sp, r7
 8009190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009194:	4770      	bx	lr

08009196 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009196:	b480      	push	{r7}
 8009198:	b083      	sub	sp, #12
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d106      	bne.n	80091b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80091b0:	b2da      	uxtb	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091c6:	b580      	push	{r7, lr}
 80091c8:	b082      	sub	sp, #8
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	d110      	bne.n	80091fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ea:	69db      	ldr	r3, [r3, #28]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d005      	beq.n	80091fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009206:	b580      	push	{r7, lr}
 8009208:	b082      	sub	sp, #8
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
 800920e:	460b      	mov	r3, r1
 8009210:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	32ae      	adds	r2, #174	; 0xae
 800921c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009224:	2303      	movs	r3, #3
 8009226:	e01c      	b.n	8009262 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b03      	cmp	r3, #3
 8009232:	d115      	bne.n	8009260 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	32ae      	adds	r2, #174	; 0xae
 800923e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00b      	beq.n	8009260 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	32ae      	adds	r2, #174	; 0xae
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	78fa      	ldrb	r2, [r7, #3]
 800925a:	4611      	mov	r1, r2
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3708      	adds	r7, #8
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}

0800926a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800926a:	b580      	push	{r7, lr}
 800926c:	b082      	sub	sp, #8
 800926e:	af00      	add	r7, sp, #0
 8009270:	6078      	str	r0, [r7, #4]
 8009272:	460b      	mov	r3, r1
 8009274:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	32ae      	adds	r2, #174	; 0xae
 8009280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009288:	2303      	movs	r3, #3
 800928a:	e01c      	b.n	80092c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b03      	cmp	r3, #3
 8009296:	d115      	bne.n	80092c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	32ae      	adds	r2, #174	; 0xae
 80092a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	32ae      	adds	r2, #174	; 0xae
 80092b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	78fa      	ldrb	r2, [r7, #3]
 80092be:	4611      	mov	r1, r2
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3708      	adds	r7, #8
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092ce:	b480      	push	{r7}
 80092d0:	b083      	sub	sp, #12
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e2:	4770      	bx	lr

080092e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00e      	beq.n	8009320 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009308:	685b      	ldr	r3, [r3, #4]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	6852      	ldr	r2, [r2, #4]
 800930e:	b2d2      	uxtb	r2, r2
 8009310:	4611      	mov	r1, r2
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	4798      	blx	r3
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d001      	beq.n	8009320 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800931c:	2303      	movs	r3, #3
 800931e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009320:	7bfb      	ldrb	r3, [r7, #15]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	460b      	mov	r3, r1
 8009334:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009336:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009350:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009352:	4618      	mov	r0, r3
 8009354:	370c      	adds	r7, #12
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800935e:	b480      	push	{r7}
 8009360:	b087      	sub	sp, #28
 8009362:	af00      	add	r7, sp, #0
 8009364:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	3301      	adds	r3, #1
 8009374:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800937c:	8a3b      	ldrh	r3, [r7, #16]
 800937e:	021b      	lsls	r3, r3, #8
 8009380:	b21a      	sxth	r2, r3
 8009382:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009386:	4313      	orrs	r3, r2
 8009388:	b21b      	sxth	r3, r3
 800938a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800938c:	89fb      	ldrh	r3, [r7, #14]
}
 800938e:	4618      	mov	r0, r3
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
	...

0800939c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b084      	sub	sp, #16
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093b2:	2b40      	cmp	r3, #64	; 0x40
 80093b4:	d005      	beq.n	80093c2 <USBD_StdDevReq+0x26>
 80093b6:	2b40      	cmp	r3, #64	; 0x40
 80093b8:	d857      	bhi.n	800946a <USBD_StdDevReq+0xce>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00f      	beq.n	80093de <USBD_StdDevReq+0x42>
 80093be:	2b20      	cmp	r3, #32
 80093c0:	d153      	bne.n	800946a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	32ae      	adds	r2, #174	; 0xae
 80093cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	4798      	blx	r3
 80093d8:	4603      	mov	r3, r0
 80093da:	73fb      	strb	r3, [r7, #15]
      break;
 80093dc:	e04a      	b.n	8009474 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	785b      	ldrb	r3, [r3, #1]
 80093e2:	2b09      	cmp	r3, #9
 80093e4:	d83b      	bhi.n	800945e <USBD_StdDevReq+0xc2>
 80093e6:	a201      	add	r2, pc, #4	; (adr r2, 80093ec <USBD_StdDevReq+0x50>)
 80093e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ec:	08009441 	.word	0x08009441
 80093f0:	08009455 	.word	0x08009455
 80093f4:	0800945f 	.word	0x0800945f
 80093f8:	0800944b 	.word	0x0800944b
 80093fc:	0800945f 	.word	0x0800945f
 8009400:	0800941f 	.word	0x0800941f
 8009404:	08009415 	.word	0x08009415
 8009408:	0800945f 	.word	0x0800945f
 800940c:	08009437 	.word	0x08009437
 8009410:	08009429 	.word	0x08009429
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f000 fa3c 	bl	8009894 <USBD_GetDescriptor>
          break;
 800941c:	e024      	b.n	8009468 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800941e:	6839      	ldr	r1, [r7, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f000 fbcb 	bl	8009bbc <USBD_SetAddress>
          break;
 8009426:	e01f      	b.n	8009468 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009428:	6839      	ldr	r1, [r7, #0]
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f000 fc0a 	bl	8009c44 <USBD_SetConfig>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]
          break;
 8009434:	e018      	b.n	8009468 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009436:	6839      	ldr	r1, [r7, #0]
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fcad 	bl	8009d98 <USBD_GetConfig>
          break;
 800943e:	e013      	b.n	8009468 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009440:	6839      	ldr	r1, [r7, #0]
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 fcde 	bl	8009e04 <USBD_GetStatus>
          break;
 8009448:	e00e      	b.n	8009468 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 fd0d 	bl	8009e6c <USBD_SetFeature>
          break;
 8009452:	e009      	b.n	8009468 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009454:	6839      	ldr	r1, [r7, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fd31 	bl	8009ebe <USBD_ClrFeature>
          break;
 800945c:	e004      	b.n	8009468 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 fd88 	bl	8009f76 <USBD_CtlError>
          break;
 8009466:	bf00      	nop
      }
      break;
 8009468:	e004      	b.n	8009474 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800946a:	6839      	ldr	r1, [r7, #0]
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f000 fd82 	bl	8009f76 <USBD_CtlError>
      break;
 8009472:	bf00      	nop
  }

  return ret;
 8009474:	7bfb      	ldrb	r3, [r7, #15]
}
 8009476:	4618      	mov	r0, r3
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop

08009480 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009496:	2b40      	cmp	r3, #64	; 0x40
 8009498:	d005      	beq.n	80094a6 <USBD_StdItfReq+0x26>
 800949a:	2b40      	cmp	r3, #64	; 0x40
 800949c:	d852      	bhi.n	8009544 <USBD_StdItfReq+0xc4>
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <USBD_StdItfReq+0x26>
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d14e      	bne.n	8009544 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	3b01      	subs	r3, #1
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d840      	bhi.n	8009536 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	889b      	ldrh	r3, [r3, #4]
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d836      	bhi.n	800952c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	889b      	ldrh	r3, [r3, #4]
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7ff ff2f 	bl	800932a <USBD_CoreFindIF>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	2bff      	cmp	r3, #255	; 0xff
 80094d4:	d01d      	beq.n	8009512 <USBD_StdItfReq+0x92>
 80094d6:	7bbb      	ldrb	r3, [r7, #14]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d11a      	bne.n	8009512 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094dc:	7bba      	ldrb	r2, [r7, #14]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	32ae      	adds	r2, #174	; 0xae
 80094e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094e6:	689b      	ldr	r3, [r3, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d00f      	beq.n	800950c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80094ec:	7bba      	ldrb	r2, [r7, #14]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80094f4:	7bba      	ldrb	r2, [r7, #14]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	32ae      	adds	r2, #174	; 0xae
 80094fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	4798      	blx	r3
 8009506:	4603      	mov	r3, r0
 8009508:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800950a:	e004      	b.n	8009516 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800950c:	2303      	movs	r3, #3
 800950e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009510:	e001      	b.n	8009516 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009512:	2303      	movs	r3, #3
 8009514:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	88db      	ldrh	r3, [r3, #6]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d110      	bne.n	8009540 <USBD_StdItfReq+0xc0>
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10d      	bne.n	8009540 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 fd74 	bl	800a012 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800952a:	e009      	b.n	8009540 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800952c:	6839      	ldr	r1, [r7, #0]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fd21 	bl	8009f76 <USBD_CtlError>
          break;
 8009534:	e004      	b.n	8009540 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009536:	6839      	ldr	r1, [r7, #0]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 fd1c 	bl	8009f76 <USBD_CtlError>
          break;
 800953e:	e000      	b.n	8009542 <USBD_StdItfReq+0xc2>
          break;
 8009540:	bf00      	nop
      }
      break;
 8009542:	e004      	b.n	800954e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 fd15 	bl	8009f76 <USBD_CtlError>
      break;
 800954c:	bf00      	nop
  }

  return ret;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	889b      	ldrh	r3, [r3, #4]
 800956a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009574:	2b40      	cmp	r3, #64	; 0x40
 8009576:	d007      	beq.n	8009588 <USBD_StdEPReq+0x30>
 8009578:	2b40      	cmp	r3, #64	; 0x40
 800957a:	f200 817f 	bhi.w	800987c <USBD_StdEPReq+0x324>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d02a      	beq.n	80095d8 <USBD_StdEPReq+0x80>
 8009582:	2b20      	cmp	r3, #32
 8009584:	f040 817a 	bne.w	800987c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f7ff fed9 	bl	8009344 <USBD_CoreFindEP>
 8009592:	4603      	mov	r3, r0
 8009594:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009596:	7b7b      	ldrb	r3, [r7, #13]
 8009598:	2bff      	cmp	r3, #255	; 0xff
 800959a:	f000 8174 	beq.w	8009886 <USBD_StdEPReq+0x32e>
 800959e:	7b7b      	ldrb	r3, [r7, #13]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f040 8170 	bne.w	8009886 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80095a6:	7b7a      	ldrb	r2, [r7, #13]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80095ae:	7b7a      	ldrb	r2, [r7, #13]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	32ae      	adds	r2, #174	; 0xae
 80095b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 8163 	beq.w	8009886 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80095c0:	7b7a      	ldrb	r2, [r7, #13]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	32ae      	adds	r2, #174	; 0xae
 80095c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	4798      	blx	r3
 80095d2:	4603      	mov	r3, r0
 80095d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095d6:	e156      	b.n	8009886 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	785b      	ldrb	r3, [r3, #1]
 80095dc:	2b03      	cmp	r3, #3
 80095de:	d008      	beq.n	80095f2 <USBD_StdEPReq+0x9a>
 80095e0:	2b03      	cmp	r3, #3
 80095e2:	f300 8145 	bgt.w	8009870 <USBD_StdEPReq+0x318>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	f000 809b 	beq.w	8009722 <USBD_StdEPReq+0x1ca>
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d03c      	beq.n	800966a <USBD_StdEPReq+0x112>
 80095f0:	e13e      	b.n	8009870 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d002      	beq.n	8009604 <USBD_StdEPReq+0xac>
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d016      	beq.n	8009630 <USBD_StdEPReq+0xd8>
 8009602:	e02c      	b.n	800965e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009604:	7bbb      	ldrb	r3, [r7, #14]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00d      	beq.n	8009626 <USBD_StdEPReq+0xce>
 800960a:	7bbb      	ldrb	r3, [r7, #14]
 800960c:	2b80      	cmp	r3, #128	; 0x80
 800960e:	d00a      	beq.n	8009626 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f003 fc31 	bl	800ce7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800961a:	2180      	movs	r1, #128	; 0x80
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f003 fc2d 	bl	800ce7c <USBD_LL_StallEP>
 8009622:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009624:	e020      	b.n	8009668 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 fca4 	bl	8009f76 <USBD_CtlError>
              break;
 800962e:	e01b      	b.n	8009668 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	885b      	ldrh	r3, [r3, #2]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10e      	bne.n	8009656 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009638:	7bbb      	ldrb	r3, [r7, #14]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00b      	beq.n	8009656 <USBD_StdEPReq+0xfe>
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	2b80      	cmp	r3, #128	; 0x80
 8009642:	d008      	beq.n	8009656 <USBD_StdEPReq+0xfe>
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	88db      	ldrh	r3, [r3, #6]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d104      	bne.n	8009656 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f003 fc13 	bl	800ce7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 fcdb 	bl	800a012 <USBD_CtlSendStatus>

              break;
 800965c:	e004      	b.n	8009668 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800965e:	6839      	ldr	r1, [r7, #0]
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fc88 	bl	8009f76 <USBD_CtlError>
              break;
 8009666:	bf00      	nop
          }
          break;
 8009668:	e107      	b.n	800987a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2b02      	cmp	r3, #2
 8009674:	d002      	beq.n	800967c <USBD_StdEPReq+0x124>
 8009676:	2b03      	cmp	r3, #3
 8009678:	d016      	beq.n	80096a8 <USBD_StdEPReq+0x150>
 800967a:	e04b      	b.n	8009714 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800967c:	7bbb      	ldrb	r3, [r7, #14]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d00d      	beq.n	800969e <USBD_StdEPReq+0x146>
 8009682:	7bbb      	ldrb	r3, [r7, #14]
 8009684:	2b80      	cmp	r3, #128	; 0x80
 8009686:	d00a      	beq.n	800969e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	4619      	mov	r1, r3
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f003 fbf5 	bl	800ce7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009692:	2180      	movs	r1, #128	; 0x80
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f003 fbf1 	bl	800ce7c <USBD_LL_StallEP>
 800969a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800969c:	e040      	b.n	8009720 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fc68 	bl	8009f76 <USBD_CtlError>
              break;
 80096a6:	e03b      	b.n	8009720 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	885b      	ldrh	r3, [r3, #2]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d136      	bne.n	800971e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096b0:	7bbb      	ldrb	r3, [r7, #14]
 80096b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d004      	beq.n	80096c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096ba:	7bbb      	ldrb	r3, [r7, #14]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f003 fbfb 	bl	800ceba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 fca4 	bl	800a012 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7ff fe38 	bl	8009344 <USBD_CoreFindEP>
 80096d4:	4603      	mov	r3, r0
 80096d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096d8:	7b7b      	ldrb	r3, [r7, #13]
 80096da:	2bff      	cmp	r3, #255	; 0xff
 80096dc:	d01f      	beq.n	800971e <USBD_StdEPReq+0x1c6>
 80096de:	7b7b      	ldrb	r3, [r7, #13]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d11c      	bne.n	800971e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80096e4:	7b7a      	ldrb	r2, [r7, #13]
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80096ec:	7b7a      	ldrb	r2, [r7, #13]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	32ae      	adds	r2, #174	; 0xae
 80096f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d010      	beq.n	800971e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80096fc:	7b7a      	ldrb	r2, [r7, #13]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	32ae      	adds	r2, #174	; 0xae
 8009702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	4798      	blx	r3
 800970e:	4603      	mov	r3, r0
 8009710:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009712:	e004      	b.n	800971e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009714:	6839      	ldr	r1, [r7, #0]
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 fc2d 	bl	8009f76 <USBD_CtlError>
              break;
 800971c:	e000      	b.n	8009720 <USBD_StdEPReq+0x1c8>
              break;
 800971e:	bf00      	nop
          }
          break;
 8009720:	e0ab      	b.n	800987a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b02      	cmp	r3, #2
 800972c:	d002      	beq.n	8009734 <USBD_StdEPReq+0x1dc>
 800972e:	2b03      	cmp	r3, #3
 8009730:	d032      	beq.n	8009798 <USBD_StdEPReq+0x240>
 8009732:	e097      	b.n	8009864 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009734:	7bbb      	ldrb	r3, [r7, #14]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d007      	beq.n	800974a <USBD_StdEPReq+0x1f2>
 800973a:	7bbb      	ldrb	r3, [r7, #14]
 800973c:	2b80      	cmp	r3, #128	; 0x80
 800973e:	d004      	beq.n	800974a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fc17 	bl	8009f76 <USBD_CtlError>
                break;
 8009748:	e091      	b.n	800986e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800974a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800974e:	2b00      	cmp	r3, #0
 8009750:	da0b      	bge.n	800976a <USBD_StdEPReq+0x212>
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009758:	4613      	mov	r3, r2
 800975a:	009b      	lsls	r3, r3, #2
 800975c:	4413      	add	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	3310      	adds	r3, #16
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	4413      	add	r3, r2
 8009766:	3304      	adds	r3, #4
 8009768:	e00b      	b.n	8009782 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	4413      	add	r3, r2
 8009780:	3304      	adds	r3, #4
 8009782:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	2200      	movs	r2, #0
 8009788:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	2202      	movs	r2, #2
 800978e:	4619      	mov	r1, r3
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 fc01 	bl	8009f98 <USBD_CtlSendData>
              break;
 8009796:	e06a      	b.n	800986e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800979c:	2b00      	cmp	r3, #0
 800979e:	da11      	bge.n	80097c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097a0:	7bbb      	ldrb	r3, [r7, #14]
 80097a2:	f003 020f 	and.w	r2, r3, #15
 80097a6:	6879      	ldr	r1, [r7, #4]
 80097a8:	4613      	mov	r3, r2
 80097aa:	009b      	lsls	r3, r3, #2
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	440b      	add	r3, r1
 80097b2:	3324      	adds	r3, #36	; 0x24
 80097b4:	881b      	ldrh	r3, [r3, #0]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d117      	bne.n	80097ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097ba:	6839      	ldr	r1, [r7, #0]
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fbda 	bl	8009f76 <USBD_CtlError>
                  break;
 80097c2:	e054      	b.n	800986e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	f003 020f 	and.w	r2, r3, #15
 80097ca:	6879      	ldr	r1, [r7, #4]
 80097cc:	4613      	mov	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	009b      	lsls	r3, r3, #2
 80097d4:	440b      	add	r3, r1
 80097d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d104      	bne.n	80097ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 fbc7 	bl	8009f76 <USBD_CtlError>
                  break;
 80097e8:	e041      	b.n	800986e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	da0b      	bge.n	800980a <USBD_StdEPReq+0x2b2>
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	3310      	adds	r3, #16
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	4413      	add	r3, r2
 8009806:	3304      	adds	r3, #4
 8009808:	e00b      	b.n	8009822 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800980a:	7bbb      	ldrb	r3, [r7, #14]
 800980c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	4413      	add	r3, r2
 8009820:	3304      	adds	r3, #4
 8009822:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009824:	7bbb      	ldrb	r3, [r7, #14]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d002      	beq.n	8009830 <USBD_StdEPReq+0x2d8>
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	2b80      	cmp	r3, #128	; 0x80
 800982e:	d103      	bne.n	8009838 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	e00e      	b.n	8009856 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009838:	7bbb      	ldrb	r3, [r7, #14]
 800983a:	4619      	mov	r1, r3
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f003 fb5b 	bl	800cef8 <USBD_LL_IsStallEP>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d003      	beq.n	8009850 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2201      	movs	r2, #1
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	e002      	b.n	8009856 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	2202      	movs	r2, #2
 800985a:	4619      	mov	r1, r3
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f000 fb9b 	bl	8009f98 <USBD_CtlSendData>
              break;
 8009862:	e004      	b.n	800986e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009864:	6839      	ldr	r1, [r7, #0]
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fb85 	bl	8009f76 <USBD_CtlError>
              break;
 800986c:	bf00      	nop
          }
          break;
 800986e:	e004      	b.n	800987a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009870:	6839      	ldr	r1, [r7, #0]
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fb7f 	bl	8009f76 <USBD_CtlError>
          break;
 8009878:	bf00      	nop
      }
      break;
 800987a:	e005      	b.n	8009888 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 fb79 	bl	8009f76 <USBD_CtlError>
      break;
 8009884:	e000      	b.n	8009888 <USBD_StdEPReq+0x330>
      break;
 8009886:	bf00      	nop
  }

  return ret;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800989e:	2300      	movs	r3, #0
 80098a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098a2:	2300      	movs	r3, #0
 80098a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098a6:	2300      	movs	r3, #0
 80098a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	885b      	ldrh	r3, [r3, #2]
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	3b01      	subs	r3, #1
 80098b4:	2b0e      	cmp	r3, #14
 80098b6:	f200 8152 	bhi.w	8009b5e <USBD_GetDescriptor+0x2ca>
 80098ba:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <USBD_GetDescriptor+0x2c>)
 80098bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c0:	08009931 	.word	0x08009931
 80098c4:	08009949 	.word	0x08009949
 80098c8:	08009989 	.word	0x08009989
 80098cc:	08009b5f 	.word	0x08009b5f
 80098d0:	08009b5f 	.word	0x08009b5f
 80098d4:	08009aff 	.word	0x08009aff
 80098d8:	08009b2b 	.word	0x08009b2b
 80098dc:	08009b5f 	.word	0x08009b5f
 80098e0:	08009b5f 	.word	0x08009b5f
 80098e4:	08009b5f 	.word	0x08009b5f
 80098e8:	08009b5f 	.word	0x08009b5f
 80098ec:	08009b5f 	.word	0x08009b5f
 80098f0:	08009b5f 	.word	0x08009b5f
 80098f4:	08009b5f 	.word	0x08009b5f
 80098f8:	080098fd 	.word	0x080098fd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009902:	69db      	ldr	r3, [r3, #28]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00b      	beq.n	8009920 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800990e:	69db      	ldr	r3, [r3, #28]
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	7c12      	ldrb	r2, [r2, #16]
 8009914:	f107 0108 	add.w	r1, r7, #8
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800991e:	e126      	b.n	8009b6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f000 fb27 	bl	8009f76 <USBD_CtlError>
        err++;
 8009928:	7afb      	ldrb	r3, [r7, #11]
 800992a:	3301      	adds	r3, #1
 800992c:	72fb      	strb	r3, [r7, #11]
      break;
 800992e:	e11e      	b.n	8009b6e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	7c12      	ldrb	r2, [r2, #16]
 800993c:	f107 0108 	add.w	r1, r7, #8
 8009940:	4610      	mov	r0, r2
 8009942:	4798      	blx	r3
 8009944:	60f8      	str	r0, [r7, #12]
      break;
 8009946:	e112      	b.n	8009b6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	7c1b      	ldrb	r3, [r3, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10d      	bne.n	800996c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009958:	f107 0208 	add.w	r2, r7, #8
 800995c:	4610      	mov	r0, r2
 800995e:	4798      	blx	r3
 8009960:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3301      	adds	r3, #1
 8009966:	2202      	movs	r2, #2
 8009968:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800996a:	e100      	b.n	8009b6e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	f107 0208 	add.w	r2, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3301      	adds	r3, #1
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
      break;
 8009986:	e0f2      	b.n	8009b6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	885b      	ldrh	r3, [r3, #2]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	2b05      	cmp	r3, #5
 8009990:	f200 80ac 	bhi.w	8009aec <USBD_GetDescriptor+0x258>
 8009994:	a201      	add	r2, pc, #4	; (adr r2, 800999c <USBD_GetDescriptor+0x108>)
 8009996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999a:	bf00      	nop
 800999c:	080099b5 	.word	0x080099b5
 80099a0:	080099e9 	.word	0x080099e9
 80099a4:	08009a1d 	.word	0x08009a1d
 80099a8:	08009a51 	.word	0x08009a51
 80099ac:	08009a85 	.word	0x08009a85
 80099b0:	08009ab9 	.word	0x08009ab9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00b      	beq.n	80099d8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	7c12      	ldrb	r2, [r2, #16]
 80099cc:	f107 0108 	add.w	r1, r7, #8
 80099d0:	4610      	mov	r0, r2
 80099d2:	4798      	blx	r3
 80099d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099d6:	e091      	b.n	8009afc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 facb 	bl	8009f76 <USBD_CtlError>
            err++;
 80099e0:	7afb      	ldrb	r3, [r7, #11]
 80099e2:	3301      	adds	r3, #1
 80099e4:	72fb      	strb	r3, [r7, #11]
          break;
 80099e6:	e089      	b.n	8009afc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d00b      	beq.n	8009a0c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	7c12      	ldrb	r2, [r2, #16]
 8009a00:	f107 0108 	add.w	r1, r7, #8
 8009a04:	4610      	mov	r0, r2
 8009a06:	4798      	blx	r3
 8009a08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a0a:	e077      	b.n	8009afc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fab1 	bl	8009f76 <USBD_CtlError>
            err++;
 8009a14:	7afb      	ldrb	r3, [r7, #11]
 8009a16:	3301      	adds	r3, #1
 8009a18:	72fb      	strb	r3, [r7, #11]
          break;
 8009a1a:	e06f      	b.n	8009afc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a22:	68db      	ldr	r3, [r3, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00b      	beq.n	8009a40 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a2e:	68db      	ldr	r3, [r3, #12]
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	7c12      	ldrb	r2, [r2, #16]
 8009a34:	f107 0108 	add.w	r1, r7, #8
 8009a38:	4610      	mov	r0, r2
 8009a3a:	4798      	blx	r3
 8009a3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a3e:	e05d      	b.n	8009afc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a40:	6839      	ldr	r1, [r7, #0]
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa97 	bl	8009f76 <USBD_CtlError>
            err++;
 8009a48:	7afb      	ldrb	r3, [r7, #11]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a4e:	e055      	b.n	8009afc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a56:	691b      	ldr	r3, [r3, #16]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d00b      	beq.n	8009a74 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	7c12      	ldrb	r2, [r2, #16]
 8009a68:	f107 0108 	add.w	r1, r7, #8
 8009a6c:	4610      	mov	r0, r2
 8009a6e:	4798      	blx	r3
 8009a70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a72:	e043      	b.n	8009afc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a74:	6839      	ldr	r1, [r7, #0]
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f000 fa7d 	bl	8009f76 <USBD_CtlError>
            err++;
 8009a7c:	7afb      	ldrb	r3, [r7, #11]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	72fb      	strb	r3, [r7, #11]
          break;
 8009a82:	e03b      	b.n	8009afc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a8a:	695b      	ldr	r3, [r3, #20]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00b      	beq.n	8009aa8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	7c12      	ldrb	r2, [r2, #16]
 8009a9c:	f107 0108 	add.w	r1, r7, #8
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	4798      	blx	r3
 8009aa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009aa6:	e029      	b.n	8009afc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009aa8:	6839      	ldr	r1, [r7, #0]
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 fa63 	bl	8009f76 <USBD_CtlError>
            err++;
 8009ab0:	7afb      	ldrb	r3, [r7, #11]
 8009ab2:	3301      	adds	r3, #1
 8009ab4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ab6:	e021      	b.n	8009afc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009abe:	699b      	ldr	r3, [r3, #24]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d00b      	beq.n	8009adc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aca:	699b      	ldr	r3, [r3, #24]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	7c12      	ldrb	r2, [r2, #16]
 8009ad0:	f107 0108 	add.w	r1, r7, #8
 8009ad4:	4610      	mov	r0, r2
 8009ad6:	4798      	blx	r3
 8009ad8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ada:	e00f      	b.n	8009afc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fa49 	bl	8009f76 <USBD_CtlError>
            err++;
 8009ae4:	7afb      	ldrb	r3, [r7, #11]
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	72fb      	strb	r3, [r7, #11]
          break;
 8009aea:	e007      	b.n	8009afc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009aec:	6839      	ldr	r1, [r7, #0]
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fa41 	bl	8009f76 <USBD_CtlError>
          err++;
 8009af4:	7afb      	ldrb	r3, [r7, #11]
 8009af6:	3301      	adds	r3, #1
 8009af8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009afa:	bf00      	nop
      }
      break;
 8009afc:	e037      	b.n	8009b6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	7c1b      	ldrb	r3, [r3, #16]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d109      	bne.n	8009b1a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b0e:	f107 0208 	add.w	r2, r7, #8
 8009b12:	4610      	mov	r0, r2
 8009b14:	4798      	blx	r3
 8009b16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b18:	e029      	b.n	8009b6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 fa2a 	bl	8009f76 <USBD_CtlError>
        err++;
 8009b22:	7afb      	ldrb	r3, [r7, #11]
 8009b24:	3301      	adds	r3, #1
 8009b26:	72fb      	strb	r3, [r7, #11]
      break;
 8009b28:	e021      	b.n	8009b6e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	7c1b      	ldrb	r3, [r3, #16]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d10d      	bne.n	8009b4e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b3a:	f107 0208 	add.w	r2, r7, #8
 8009b3e:	4610      	mov	r0, r2
 8009b40:	4798      	blx	r3
 8009b42:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	3301      	adds	r3, #1
 8009b48:	2207      	movs	r2, #7
 8009b4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b4c:	e00f      	b.n	8009b6e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fa10 	bl	8009f76 <USBD_CtlError>
        err++;
 8009b56:	7afb      	ldrb	r3, [r7, #11]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b5c:	e007      	b.n	8009b6e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009b5e:	6839      	ldr	r1, [r7, #0]
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fa08 	bl	8009f76 <USBD_CtlError>
      err++;
 8009b66:	7afb      	ldrb	r3, [r7, #11]
 8009b68:	3301      	adds	r3, #1
 8009b6a:	72fb      	strb	r3, [r7, #11]
      break;
 8009b6c:	bf00      	nop
  }

  if (err != 0U)
 8009b6e:	7afb      	ldrb	r3, [r7, #11]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d11e      	bne.n	8009bb2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	88db      	ldrh	r3, [r3, #6]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d016      	beq.n	8009baa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009b7c:	893b      	ldrh	r3, [r7, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00e      	beq.n	8009ba0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	88da      	ldrh	r2, [r3, #6]
 8009b86:	893b      	ldrh	r3, [r7, #8]
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	bf28      	it	cs
 8009b8c:	4613      	movcs	r3, r2
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b92:	893b      	ldrh	r3, [r7, #8]
 8009b94:	461a      	mov	r2, r3
 8009b96:	68f9      	ldr	r1, [r7, #12]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f9fd 	bl	8009f98 <USBD_CtlSendData>
 8009b9e:	e009      	b.n	8009bb4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 f9e7 	bl	8009f76 <USBD_CtlError>
 8009ba8:	e004      	b.n	8009bb4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fa31 	bl	800a012 <USBD_CtlSendStatus>
 8009bb0:	e000      	b.n	8009bb4 <USBD_GetDescriptor+0x320>
    return;
 8009bb2:	bf00      	nop
  }
}
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop

08009bbc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	889b      	ldrh	r3, [r3, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d131      	bne.n	8009c32 <USBD_SetAddress+0x76>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	88db      	ldrh	r3, [r3, #6]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d12d      	bne.n	8009c32 <USBD_SetAddress+0x76>
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	885b      	ldrh	r3, [r3, #2]
 8009bda:	2b7f      	cmp	r3, #127	; 0x7f
 8009bdc:	d829      	bhi.n	8009c32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	885b      	ldrh	r3, [r3, #2]
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009be8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b03      	cmp	r3, #3
 8009bf4:	d104      	bne.n	8009c00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f9bc 	bl	8009f76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009bfe:	e01d      	b.n	8009c3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	7bfa      	ldrb	r2, [r7, #15]
 8009c04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f003 f99f 	bl	800cf50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f9fd 	bl	800a012 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c18:	7bfb      	ldrb	r3, [r7, #15]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d004      	beq.n	8009c28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2202      	movs	r2, #2
 8009c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c26:	e009      	b.n	8009c3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c30:	e004      	b.n	8009c3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c32:	6839      	ldr	r1, [r7, #0]
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 f99e 	bl	8009f76 <USBD_CtlError>
  }
}
 8009c3a:	bf00      	nop
 8009c3c:	bf00      	nop
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	885b      	ldrh	r3, [r3, #2]
 8009c56:	b2da      	uxtb	r2, r3
 8009c58:	4b4e      	ldr	r3, [pc, #312]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c5c:	4b4d      	ldr	r3, [pc, #308]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d905      	bls.n	8009c70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c64:	6839      	ldr	r1, [r7, #0]
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f985 	bl	8009f76 <USBD_CtlError>
    return USBD_FAIL;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e08c      	b.n	8009d8a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d002      	beq.n	8009c82 <USBD_SetConfig+0x3e>
 8009c7c:	2b03      	cmp	r3, #3
 8009c7e:	d029      	beq.n	8009cd4 <USBD_SetConfig+0x90>
 8009c80:	e075      	b.n	8009d6e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c82:	4b44      	ldr	r3, [pc, #272]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d020      	beq.n	8009ccc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009c8a:	4b42      	ldr	r3, [pc, #264]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	461a      	mov	r2, r3
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c94:	4b3f      	ldr	r3, [pc, #252]	; (8009d94 <USBD_SetConfig+0x150>)
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f7ff f813 	bl	8008cc6 <USBD_SetClassConfig>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d008      	beq.n	8009cbc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009caa:	6839      	ldr	r1, [r7, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f962 	bl	8009f76 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2202      	movs	r2, #2
 8009cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cba:	e065      	b.n	8009d88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f9a8 	bl	800a012 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2203      	movs	r2, #3
 8009cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009cca:	e05d      	b.n	8009d88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f9a0 	bl	800a012 <USBD_CtlSendStatus>
      break;
 8009cd2:	e059      	b.n	8009d88 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cd4:	4b2f      	ldr	r3, [pc, #188]	; (8009d94 <USBD_SetConfig+0x150>)
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d112      	bne.n	8009d02 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009ce4:	4b2b      	ldr	r3, [pc, #172]	; (8009d94 <USBD_SetConfig+0x150>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	461a      	mov	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009cee:	4b29      	ldr	r3, [pc, #164]	; (8009d94 <USBD_SetConfig+0x150>)
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7ff f802 	bl	8008cfe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 f989 	bl	800a012 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d00:	e042      	b.n	8009d88 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d02:	4b24      	ldr	r3, [pc, #144]	; (8009d94 <USBD_SetConfig+0x150>)
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	461a      	mov	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d02a      	beq.n	8009d66 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	b2db      	uxtb	r3, r3
 8009d16:	4619      	mov	r1, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7fe fff0 	bl	8008cfe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d1e:	4b1d      	ldr	r3, [pc, #116]	; (8009d94 <USBD_SetConfig+0x150>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d28:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <USBD_SetConfig+0x150>)
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	f7fe ffc9 	bl	8008cc6 <USBD_SetClassConfig>
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00f      	beq.n	8009d5e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d3e:	6839      	ldr	r1, [r7, #0]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 f918 	bl	8009f76 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	b2db      	uxtb	r3, r3
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	6878      	ldr	r0, [r7, #4]
 8009d50:	f7fe ffd5 	bl	8008cfe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2202      	movs	r2, #2
 8009d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d5c:	e014      	b.n	8009d88 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f957 	bl	800a012 <USBD_CtlSendStatus>
      break;
 8009d64:	e010      	b.n	8009d88 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d66:	6878      	ldr	r0, [r7, #4]
 8009d68:	f000 f953 	bl	800a012 <USBD_CtlSendStatus>
      break;
 8009d6c:	e00c      	b.n	8009d88 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d6e:	6839      	ldr	r1, [r7, #0]
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f900 	bl	8009f76 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d76:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <USBD_SetConfig+0x150>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7fe ffbe 	bl	8008cfe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d82:	2303      	movs	r3, #3
 8009d84:	73fb      	strb	r3, [r7, #15]
      break;
 8009d86:	bf00      	nop
  }

  return ret;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	200079b4 	.word	0x200079b4

08009d98 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	88db      	ldrh	r3, [r3, #6]
 8009da6:	2b01      	cmp	r3, #1
 8009da8:	d004      	beq.n	8009db4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009daa:	6839      	ldr	r1, [r7, #0]
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f8e2 	bl	8009f76 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009db2:	e023      	b.n	8009dfc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dba:	b2db      	uxtb	r3, r3
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	dc02      	bgt.n	8009dc6 <USBD_GetConfig+0x2e>
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	dc03      	bgt.n	8009dcc <USBD_GetConfig+0x34>
 8009dc4:	e015      	b.n	8009df2 <USBD_GetConfig+0x5a>
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d00b      	beq.n	8009de2 <USBD_GetConfig+0x4a>
 8009dca:	e012      	b.n	8009df2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	3308      	adds	r3, #8
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	4619      	mov	r1, r3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f8dc 	bl	8009f98 <USBD_CtlSendData>
        break;
 8009de0:	e00c      	b.n	8009dfc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	3304      	adds	r3, #4
 8009de6:	2201      	movs	r2, #1
 8009de8:	4619      	mov	r1, r3
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f8d4 	bl	8009f98 <USBD_CtlSendData>
        break;
 8009df0:	e004      	b.n	8009dfc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009df2:	6839      	ldr	r1, [r7, #0]
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f8be 	bl	8009f76 <USBD_CtlError>
        break;
 8009dfa:	bf00      	nop
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	3b01      	subs	r3, #1
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d81e      	bhi.n	8009e5a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	88db      	ldrh	r3, [r3, #6]
 8009e20:	2b02      	cmp	r3, #2
 8009e22:	d004      	beq.n	8009e2e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e24:	6839      	ldr	r1, [r7, #0]
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f8a5 	bl	8009f76 <USBD_CtlError>
        break;
 8009e2c:	e01a      	b.n	8009e64 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68db      	ldr	r3, [r3, #12]
 8009e42:	f043 0202 	orr.w	r2, r3, #2
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	330c      	adds	r3, #12
 8009e4e:	2202      	movs	r2, #2
 8009e50:	4619      	mov	r1, r3
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f8a0 	bl	8009f98 <USBD_CtlSendData>
      break;
 8009e58:	e004      	b.n	8009e64 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e5a:	6839      	ldr	r1, [r7, #0]
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f88a 	bl	8009f76 <USBD_CtlError>
      break;
 8009e62:	bf00      	nop
  }
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	885b      	ldrh	r3, [r3, #2]
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d107      	bne.n	8009e8e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 f8c3 	bl	800a012 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009e8c:	e013      	b.n	8009eb6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	885b      	ldrh	r3, [r3, #2]
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d10b      	bne.n	8009eae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	889b      	ldrh	r3, [r3, #4]
 8009e9a:	0a1b      	lsrs	r3, r3, #8
 8009e9c:	b29b      	uxth	r3, r3
 8009e9e:	b2da      	uxtb	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 f8b3 	bl	800a012 <USBD_CtlSendStatus>
}
 8009eac:	e003      	b.n	8009eb6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009eae:	6839      	ldr	r1, [r7, #0]
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 f860 	bl	8009f76 <USBD_CtlError>
}
 8009eb6:	bf00      	nop
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	3b01      	subs	r3, #1
 8009ed2:	2b02      	cmp	r3, #2
 8009ed4:	d80b      	bhi.n	8009eee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	885b      	ldrh	r3, [r3, #2]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d10c      	bne.n	8009ef8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f893 	bl	800a012 <USBD_CtlSendStatus>
      }
      break;
 8009eec:	e004      	b.n	8009ef8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009eee:	6839      	ldr	r1, [r7, #0]
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 f840 	bl	8009f76 <USBD_CtlError>
      break;
 8009ef6:	e000      	b.n	8009efa <USBD_ClrFeature+0x3c>
      break;
 8009ef8:	bf00      	nop
  }
}
 8009efa:	bf00      	nop
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	781a      	ldrb	r2, [r3, #0]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	781a      	ldrb	r2, [r3, #0]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f7ff fa16 	bl	800935e <SWAPBYTE>
 8009f32:	4603      	mov	r3, r0
 8009f34:	461a      	mov	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3301      	adds	r3, #1
 8009f3e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	3301      	adds	r3, #1
 8009f44:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f7ff fa09 	bl	800935e <SWAPBYTE>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	461a      	mov	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3301      	adds	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff f9fc 	bl	800935e <SWAPBYTE>
 8009f66:	4603      	mov	r3, r0
 8009f68:	461a      	mov	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	80da      	strh	r2, [r3, #6]
}
 8009f6e:	bf00      	nop
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b082      	sub	sp, #8
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
 8009f7e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f80:	2180      	movs	r1, #128	; 0x80
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f002 ff7a 	bl	800ce7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009f88:	2100      	movs	r1, #0
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f002 ff76 	bl	800ce7c <USBD_LL_StallEP>
}
 8009f90:	bf00      	nop
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	f002 ffe5 	bl	800cf8e <USBD_LL_Transmit>

  return USBD_OK;
 8009fc4:	2300      	movs	r3, #0
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	60b9      	str	r1, [r7, #8]
 8009fd8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68ba      	ldr	r2, [r7, #8]
 8009fde:	2100      	movs	r1, #0
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f002 ffd4 	bl	800cf8e <USBD_LL_Transmit>

  return USBD_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	68ba      	ldr	r2, [r7, #8]
 800a000:	2100      	movs	r1, #0
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f002 ffe4 	bl	800cfd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a008:	2300      	movs	r3, #0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2204      	movs	r2, #4
 800a01e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a022:	2300      	movs	r3, #0
 800a024:	2200      	movs	r2, #0
 800a026:	2100      	movs	r1, #0
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f002 ffb0 	bl	800cf8e <USBD_LL_Transmit>

  return USBD_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2205      	movs	r2, #5
 800a044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a048:	2300      	movs	r3, #0
 800a04a:	2200      	movs	r2, #0
 800a04c:	2100      	movs	r1, #0
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f002 ffbe 	bl	800cfd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a054:	2300      	movs	r3, #0
}
 800a056:	4618      	mov	r0, r3
 800a058:	3708      	adds	r7, #8
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}

0800a05e <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a05e:	b480      	push	{r7}
 800a060:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a062:	bf00      	nop
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a06c:	b480      	push	{r7}
 800a06e:	b085      	sub	sp, #20
 800a070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a072:	f3ef 8305 	mrs	r3, IPSR
 800a076:	60bb      	str	r3, [r7, #8]
  return(result);
 800a078:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d10f      	bne.n	800a09e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a07e:	f3ef 8310 	mrs	r3, PRIMASK
 800a082:	607b      	str	r3, [r7, #4]
  return(result);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d105      	bne.n	800a096 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a08a:	f3ef 8311 	mrs	r3, BASEPRI
 800a08e:	603b      	str	r3, [r7, #0]
  return(result);
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d007      	beq.n	800a0a6 <osKernelInitialize+0x3a>
 800a096:	4b0e      	ldr	r3, [pc, #56]	; (800a0d0 <osKernelInitialize+0x64>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d103      	bne.n	800a0a6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a09e:	f06f 0305 	mvn.w	r3, #5
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	e00c      	b.n	800a0c0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a0a6:	4b0a      	ldr	r3, [pc, #40]	; (800a0d0 <osKernelInitialize+0x64>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d105      	bne.n	800a0ba <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a0ae:	4b08      	ldr	r3, [pc, #32]	; (800a0d0 <osKernelInitialize+0x64>)
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	60fb      	str	r3, [r7, #12]
 800a0b8:	e002      	b.n	800a0c0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a0ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0be:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr
 800a0ce:	bf00      	nop
 800a0d0:	200079b8 	.word	0x200079b8

0800a0d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b084      	sub	sp, #16
 800a0d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0da:	f3ef 8305 	mrs	r3, IPSR
 800a0de:	60bb      	str	r3, [r7, #8]
  return(result);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d10f      	bne.n	800a106 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a0ea:	607b      	str	r3, [r7, #4]
  return(result);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d105      	bne.n	800a0fe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a0f2:	f3ef 8311 	mrs	r3, BASEPRI
 800a0f6:	603b      	str	r3, [r7, #0]
  return(result);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d007      	beq.n	800a10e <osKernelStart+0x3a>
 800a0fe:	4b0f      	ldr	r3, [pc, #60]	; (800a13c <osKernelStart+0x68>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	2b02      	cmp	r3, #2
 800a104:	d103      	bne.n	800a10e <osKernelStart+0x3a>
    stat = osErrorISR;
 800a106:	f06f 0305 	mvn.w	r3, #5
 800a10a:	60fb      	str	r3, [r7, #12]
 800a10c:	e010      	b.n	800a130 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a10e:	4b0b      	ldr	r3, [pc, #44]	; (800a13c <osKernelStart+0x68>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b01      	cmp	r3, #1
 800a114:	d109      	bne.n	800a12a <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a116:	f7ff ffa2 	bl	800a05e <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a11a:	4b08      	ldr	r3, [pc, #32]	; (800a13c <osKernelStart+0x68>)
 800a11c:	2202      	movs	r2, #2
 800a11e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a120:	f001 f8b4 	bl	800b28c <vTaskStartScheduler>
      stat = osOK;
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]
 800a128:	e002      	b.n	800a130 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a12a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a12e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a130:	68fb      	ldr	r3, [r7, #12]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	200079b8 	.word	0x200079b8

0800a140 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a140:	b580      	push	{r7, lr}
 800a142:	b090      	sub	sp, #64	; 0x40
 800a144:	af04      	add	r7, sp, #16
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a14c:	2300      	movs	r3, #0
 800a14e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a150:	f3ef 8305 	mrs	r3, IPSR
 800a154:	61fb      	str	r3, [r7, #28]
  return(result);
 800a156:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a158:	2b00      	cmp	r3, #0
 800a15a:	f040 808f 	bne.w	800a27c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a15e:	f3ef 8310 	mrs	r3, PRIMASK
 800a162:	61bb      	str	r3, [r7, #24]
  return(result);
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d105      	bne.n	800a176 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a16a:	f3ef 8311 	mrs	r3, BASEPRI
 800a16e:	617b      	str	r3, [r7, #20]
  return(result);
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <osThreadNew+0x3e>
 800a176:	4b44      	ldr	r3, [pc, #272]	; (800a288 <osThreadNew+0x148>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d07e      	beq.n	800a27c <osThreadNew+0x13c>
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d07b      	beq.n	800a27c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a184:	2380      	movs	r3, #128	; 0x80
 800a186:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a188:	2318      	movs	r3, #24
 800a18a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a18c:	2300      	movs	r3, #0
 800a18e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a194:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d045      	beq.n	800a228 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d002      	beq.n	800a1aa <osThreadNew+0x6a>
        name = attr->name;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	699b      	ldr	r3, [r3, #24]
 800a1b6:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d008      	beq.n	800a1d0 <osThreadNew+0x90>
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	2b38      	cmp	r3, #56	; 0x38
 800a1c2:	d805      	bhi.n	800a1d0 <osThreadNew+0x90>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d001      	beq.n	800a1d4 <osThreadNew+0x94>
        return (NULL);
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	e054      	b.n	800a27e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	695b      	ldr	r3, [r3, #20]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	695b      	ldr	r3, [r3, #20]
 800a1e0:	089b      	lsrs	r3, r3, #2
 800a1e2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00e      	beq.n	800a20a <osThreadNew+0xca>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	2b5b      	cmp	r3, #91	; 0x5b
 800a1f2:	d90a      	bls.n	800a20a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d006      	beq.n	800a20a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	695b      	ldr	r3, [r3, #20]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <osThreadNew+0xca>
        mem = 1;
 800a204:	2301      	movs	r3, #1
 800a206:	623b      	str	r3, [r7, #32]
 800a208:	e010      	b.n	800a22c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10c      	bne.n	800a22c <osThreadNew+0xec>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d108      	bne.n	800a22c <osThreadNew+0xec>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d104      	bne.n	800a22c <osThreadNew+0xec>
          mem = 0;
 800a222:	2300      	movs	r3, #0
 800a224:	623b      	str	r3, [r7, #32]
 800a226:	e001      	b.n	800a22c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a22c:	6a3b      	ldr	r3, [r7, #32]
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d110      	bne.n	800a254 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a236:	687a      	ldr	r2, [r7, #4]
 800a238:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a23a:	9202      	str	r2, [sp, #8]
 800a23c:	9301      	str	r3, [sp, #4]
 800a23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a246:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a248:	68f8      	ldr	r0, [r7, #12]
 800a24a:	f000 fe3f 	bl	800aecc <xTaskCreateStatic>
 800a24e:	4603      	mov	r3, r0
 800a250:	613b      	str	r3, [r7, #16]
 800a252:	e013      	b.n	800a27c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a254:	6a3b      	ldr	r3, [r7, #32]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d110      	bne.n	800a27c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25c:	b29a      	uxth	r2, r3
 800a25e:	f107 0310 	add.w	r3, r7, #16
 800a262:	9301      	str	r3, [sp, #4]
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	9300      	str	r3, [sp, #0]
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a26c:	68f8      	ldr	r0, [r7, #12]
 800a26e:	f000 fe90 	bl	800af92 <xTaskCreate>
 800a272:	4603      	mov	r3, r0
 800a274:	2b01      	cmp	r3, #1
 800a276:	d001      	beq.n	800a27c <osThreadNew+0x13c>
          hTask = NULL;
 800a278:	2300      	movs	r3, #0
 800a27a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a27c:	693b      	ldr	r3, [r7, #16]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3730      	adds	r7, #48	; 0x30
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200079b8 	.word	0x200079b8

0800a28c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a294:	f3ef 8305 	mrs	r3, IPSR
 800a298:	613b      	str	r3, [r7, #16]
  return(result);
 800a29a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10f      	bne.n	800a2c0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2a0:	f3ef 8310 	mrs	r3, PRIMASK
 800a2a4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d105      	bne.n	800a2b8 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2ac:	f3ef 8311 	mrs	r3, BASEPRI
 800a2b0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d007      	beq.n	800a2c8 <osDelay+0x3c>
 800a2b8:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <osDelay+0x58>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d103      	bne.n	800a2c8 <osDelay+0x3c>
    stat = osErrorISR;
 800a2c0:	f06f 0305 	mvn.w	r3, #5
 800a2c4:	617b      	str	r3, [r7, #20]
 800a2c6:	e007      	b.n	800a2d8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <osDelay+0x4c>
      vTaskDelay(ticks);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 ffa4 	bl	800b220 <vTaskDelay>
    }
  }

  return (stat);
 800a2d8:	697b      	ldr	r3, [r7, #20]
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	200079b8 	.word	0x200079b8

0800a2e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	4a07      	ldr	r2, [pc, #28]	; (800a314 <vApplicationGetIdleTaskMemory+0x2c>)
 800a2f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	4a06      	ldr	r2, [pc, #24]	; (800a318 <vApplicationGetIdleTaskMemory+0x30>)
 800a2fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2280      	movs	r2, #128	; 0x80
 800a304:	601a      	str	r2, [r3, #0]
}
 800a306:	bf00      	nop
 800a308:	3714      	adds	r7, #20
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	200079bc 	.word	0x200079bc
 800a318:	20007a18 	.word	0x20007a18

0800a31c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	60f8      	str	r0, [r7, #12]
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	4a07      	ldr	r2, [pc, #28]	; (800a348 <vApplicationGetTimerTaskMemory+0x2c>)
 800a32c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	4a06      	ldr	r2, [pc, #24]	; (800a34c <vApplicationGetTimerTaskMemory+0x30>)
 800a332:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a33a:	601a      	str	r2, [r3, #0]
}
 800a33c:	bf00      	nop
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	20007c18 	.word	0x20007c18
 800a34c:	20007c74 	.word	0x20007c74

0800a350 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	f103 0208 	add.w	r2, r3, #8
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a368:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f103 0208 	add.w	r2, r3, #8
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f103 0208 	add.w	r2, r3, #8
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2200      	movs	r2, #0
 800a382:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	689a      	ldr	r2, [r3, #8]
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	683a      	ldr	r2, [r7, #0]
 800a3d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	687a      	ldr	r2, [r7, #4]
 800a3da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	601a      	str	r2, [r3, #0]
}
 800a3e6:	bf00      	nop
 800a3e8:	3714      	adds	r7, #20
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a3f2:	b480      	push	{r7}
 800a3f4:	b085      	sub	sp, #20
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6078      	str	r0, [r7, #4]
 800a3fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a408:	d103      	bne.n	800a412 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	691b      	ldr	r3, [r3, #16]
 800a40e:	60fb      	str	r3, [r7, #12]
 800a410:	e00c      	b.n	800a42c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	3308      	adds	r3, #8
 800a416:	60fb      	str	r3, [r7, #12]
 800a418:	e002      	b.n	800a420 <vListInsert+0x2e>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	60fb      	str	r3, [r7, #12]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d2f6      	bcs.n	800a41a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	685a      	ldr	r2, [r3, #4]
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	683a      	ldr	r2, [r7, #0]
 800a43a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	68fa      	ldr	r2, [r7, #12]
 800a440:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	1c5a      	adds	r2, r3, #1
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	601a      	str	r2, [r3, #0]
}
 800a458:	bf00      	nop
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	691b      	ldr	r3, [r3, #16]
 800a470:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	6892      	ldr	r2, [r2, #8]
 800a47a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	687a      	ldr	r2, [r7, #4]
 800a482:	6852      	ldr	r2, [r2, #4]
 800a484:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	687a      	ldr	r2, [r7, #4]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d103      	bne.n	800a498 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	689a      	ldr	r2, [r3, #8]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	1e5a      	subs	r2, r3, #1
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d10c      	bne.n	800a4e6 <xQueueGenericReset+0x2e>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	b672      	cpsid	i
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	b662      	cpsie	i
 800a4e0:	60bb      	str	r3, [r7, #8]
}
 800a4e2:	bf00      	nop
 800a4e4:	e7fe      	b.n	800a4e4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800a4e6:	f002 f8a1 	bl	800c62c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4f2:	68f9      	ldr	r1, [r7, #12]
 800a4f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4f6:	fb01 f303 	mul.w	r3, r1, r3
 800a4fa:	441a      	add	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2200      	movs	r2, #0
 800a504:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a516:	3b01      	subs	r3, #1
 800a518:	68f9      	ldr	r1, [r7, #12]
 800a51a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a51c:	fb01 f303 	mul.w	r3, r1, r3
 800a520:	441a      	add	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	22ff      	movs	r2, #255	; 0xff
 800a52a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	22ff      	movs	r2, #255	; 0xff
 800a532:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d114      	bne.n	800a566 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01a      	beq.n	800a57a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	3310      	adds	r3, #16
 800a548:	4618      	mov	r0, r3
 800a54a:	f001 f937 	bl	800b7bc <xTaskRemoveFromEventList>
 800a54e:	4603      	mov	r3, r0
 800a550:	2b00      	cmp	r3, #0
 800a552:	d012      	beq.n	800a57a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a554:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <xQueueGenericReset+0xd0>)
 800a556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55a:	601a      	str	r2, [r3, #0]
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	f3bf 8f6f 	isb	sy
 800a564:	e009      	b.n	800a57a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	3310      	adds	r3, #16
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7ff fef0 	bl	800a350 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3324      	adds	r3, #36	; 0x24
 800a574:	4618      	mov	r0, r3
 800a576:	f7ff feeb 	bl	800a350 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a57a:	f002 f88b 	bl	800c694 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a57e:	2301      	movs	r3, #1
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	e000ed04 	.word	0xe000ed04

0800a58c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08e      	sub	sp, #56	; 0x38
 800a590:	af02      	add	r7, sp, #8
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10c      	bne.n	800a5ba <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a4:	b672      	cpsid	i
 800a5a6:	f383 8811 	msr	BASEPRI, r3
 800a5aa:	f3bf 8f6f 	isb	sy
 800a5ae:	f3bf 8f4f 	dsb	sy
 800a5b2:	b662      	cpsie	i
 800a5b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a5b6:	bf00      	nop
 800a5b8:	e7fe      	b.n	800a5b8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10c      	bne.n	800a5da <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800a5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c4:	b672      	cpsid	i
 800a5c6:	f383 8811 	msr	BASEPRI, r3
 800a5ca:	f3bf 8f6f 	isb	sy
 800a5ce:	f3bf 8f4f 	dsb	sy
 800a5d2:	b662      	cpsie	i
 800a5d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a5d6:	bf00      	nop
 800a5d8:	e7fe      	b.n	800a5d8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <xQueueGenericCreateStatic+0x5a>
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <xQueueGenericCreateStatic+0x5e>
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	e000      	b.n	800a5ec <xQueueGenericCreateStatic+0x60>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10c      	bne.n	800a60a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f4:	b672      	cpsid	i
 800a5f6:	f383 8811 	msr	BASEPRI, r3
 800a5fa:	f3bf 8f6f 	isb	sy
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	b662      	cpsie	i
 800a604:	623b      	str	r3, [r7, #32]
}
 800a606:	bf00      	nop
 800a608:	e7fe      	b.n	800a608 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d102      	bne.n	800a616 <xQueueGenericCreateStatic+0x8a>
 800a610:	68bb      	ldr	r3, [r7, #8]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d101      	bne.n	800a61a <xQueueGenericCreateStatic+0x8e>
 800a616:	2301      	movs	r3, #1
 800a618:	e000      	b.n	800a61c <xQueueGenericCreateStatic+0x90>
 800a61a:	2300      	movs	r3, #0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10c      	bne.n	800a63a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	b672      	cpsid	i
 800a626:	f383 8811 	msr	BASEPRI, r3
 800a62a:	f3bf 8f6f 	isb	sy
 800a62e:	f3bf 8f4f 	dsb	sy
 800a632:	b662      	cpsie	i
 800a634:	61fb      	str	r3, [r7, #28]
}
 800a636:	bf00      	nop
 800a638:	e7fe      	b.n	800a638 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a63a:	2350      	movs	r3, #80	; 0x50
 800a63c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	2b50      	cmp	r3, #80	; 0x50
 800a642:	d00c      	beq.n	800a65e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	b672      	cpsid	i
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	b662      	cpsie	i
 800a658:	61bb      	str	r3, [r7, #24]
}
 800a65a:	bf00      	nop
 800a65c:	e7fe      	b.n	800a65c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a65e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a666:	2b00      	cmp	r3, #0
 800a668:	d00d      	beq.n	800a686 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a66a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a672:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	9300      	str	r3, [sp, #0]
 800a67a:	4613      	mov	r3, r2
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	68b9      	ldr	r1, [r7, #8]
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 f805 	bl	800a690 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a688:	4618      	mov	r0, r3
 800a68a:	3730      	adds	r7, #48	; 0x30
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
 800a69c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d103      	bne.n	800a6ac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	e002      	b.n	800a6b2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	68ba      	ldr	r2, [r7, #8]
 800a6bc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6be:	2101      	movs	r1, #1
 800a6c0:	69b8      	ldr	r0, [r7, #24]
 800a6c2:	f7ff fef9 	bl	800a4b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	78fa      	ldrb	r2, [r7, #3]
 800a6ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6ce:	bf00      	nop
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
	...

0800a6d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b08e      	sub	sp, #56	; 0x38
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10c      	bne.n	800a70e <xQueueGenericSend+0x36>
	__asm volatile
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	b672      	cpsid	i
 800a6fa:	f383 8811 	msr	BASEPRI, r3
 800a6fe:	f3bf 8f6f 	isb	sy
 800a702:	f3bf 8f4f 	dsb	sy
 800a706:	b662      	cpsie	i
 800a708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a70a:	bf00      	nop
 800a70c:	e7fe      	b.n	800a70c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d103      	bne.n	800a71c <xQueueGenericSend+0x44>
 800a714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <xQueueGenericSend+0x48>
 800a71c:	2301      	movs	r3, #1
 800a71e:	e000      	b.n	800a722 <xQueueGenericSend+0x4a>
 800a720:	2300      	movs	r3, #0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d10c      	bne.n	800a740 <xQueueGenericSend+0x68>
	__asm volatile
 800a726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72a:	b672      	cpsid	i
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	b662      	cpsie	i
 800a73a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a73c:	bf00      	nop
 800a73e:	e7fe      	b.n	800a73e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	2b02      	cmp	r3, #2
 800a744:	d103      	bne.n	800a74e <xQueueGenericSend+0x76>
 800a746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d101      	bne.n	800a752 <xQueueGenericSend+0x7a>
 800a74e:	2301      	movs	r3, #1
 800a750:	e000      	b.n	800a754 <xQueueGenericSend+0x7c>
 800a752:	2300      	movs	r3, #0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10c      	bne.n	800a772 <xQueueGenericSend+0x9a>
	__asm volatile
 800a758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75c:	b672      	cpsid	i
 800a75e:	f383 8811 	msr	BASEPRI, r3
 800a762:	f3bf 8f6f 	isb	sy
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	b662      	cpsie	i
 800a76c:	623b      	str	r3, [r7, #32]
}
 800a76e:	bf00      	nop
 800a770:	e7fe      	b.n	800a770 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a772:	f001 fa11 	bl	800bb98 <xTaskGetSchedulerState>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d102      	bne.n	800a782 <xQueueGenericSend+0xaa>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <xQueueGenericSend+0xae>
 800a782:	2301      	movs	r3, #1
 800a784:	e000      	b.n	800a788 <xQueueGenericSend+0xb0>
 800a786:	2300      	movs	r3, #0
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d10c      	bne.n	800a7a6 <xQueueGenericSend+0xce>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a790:	b672      	cpsid	i
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	b662      	cpsie	i
 800a7a0:	61fb      	str	r3, [r7, #28]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7a6:	f001 ff41 	bl	800c62c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d302      	bcc.n	800a7bc <xQueueGenericSend+0xe4>
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d129      	bne.n	800a810 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	68b9      	ldr	r1, [r7, #8]
 800a7c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a7c2:	f000 fa15 	bl	800abf0 <prvCopyDataToQueue>
 800a7c6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d010      	beq.n	800a7f2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	3324      	adds	r3, #36	; 0x24
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 fff1 	bl	800b7bc <xTaskRemoveFromEventList>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d013      	beq.n	800a808 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a7e0:	4b3f      	ldr	r3, [pc, #252]	; (800a8e0 <xQueueGenericSend+0x208>)
 800a7e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7e6:	601a      	str	r2, [r3, #0]
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	e00a      	b.n	800a808 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d007      	beq.n	800a808 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a7f8:	4b39      	ldr	r3, [pc, #228]	; (800a8e0 <xQueueGenericSend+0x208>)
 800a7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a808:	f001 ff44 	bl	800c694 <vPortExitCritical>
				return pdPASS;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e063      	b.n	800a8d8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d103      	bne.n	800a81e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a816:	f001 ff3d 	bl	800c694 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a81a:	2300      	movs	r3, #0
 800a81c:	e05c      	b.n	800a8d8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a820:	2b00      	cmp	r3, #0
 800a822:	d106      	bne.n	800a832 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a824:	f107 0314 	add.w	r3, r7, #20
 800a828:	4618      	mov	r0, r3
 800a82a:	f001 f855 	bl	800b8d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a82e:	2301      	movs	r3, #1
 800a830:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a832:	f001 ff2f 	bl	800c694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a836:	f000 fd93 	bl	800b360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a83a:	f001 fef7 	bl	800c62c <vPortEnterCritical>
 800a83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a840:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a844:	b25b      	sxtb	r3, r3
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a84a:	d103      	bne.n	800a854 <xQueueGenericSend+0x17c>
 800a84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84e:	2200      	movs	r2, #0
 800a850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a85a:	b25b      	sxtb	r3, r3
 800a85c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a860:	d103      	bne.n	800a86a <xQueueGenericSend+0x192>
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	2200      	movs	r2, #0
 800a866:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a86a:	f001 ff13 	bl	800c694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a86e:	1d3a      	adds	r2, r7, #4
 800a870:	f107 0314 	add.w	r3, r7, #20
 800a874:	4611      	mov	r1, r2
 800a876:	4618      	mov	r0, r3
 800a878:	f001 f844 	bl	800b904 <xTaskCheckForTimeOut>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d124      	bne.n	800a8cc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a882:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a884:	f000 faac 	bl	800ade0 <prvIsQueueFull>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d018      	beq.n	800a8c0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a890:	3310      	adds	r3, #16
 800a892:	687a      	ldr	r2, [r7, #4]
 800a894:	4611      	mov	r1, r2
 800a896:	4618      	mov	r0, r3
 800a898:	f000 ff3c 	bl	800b714 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a89c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a89e:	f000 fa37 	bl	800ad10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a8a2:	f000 fd6b 	bl	800b37c <xTaskResumeAll>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f47f af7c 	bne.w	800a7a6 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a8ae:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <xQueueGenericSend+0x208>)
 800a8b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8b4:	601a      	str	r2, [r3, #0]
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	f3bf 8f6f 	isb	sy
 800a8be:	e772      	b.n	800a7a6 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a8c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8c2:	f000 fa25 	bl	800ad10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8c6:	f000 fd59 	bl	800b37c <xTaskResumeAll>
 800a8ca:	e76c      	b.n	800a7a6 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a8cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a8ce:	f000 fa1f 	bl	800ad10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8d2:	f000 fd53 	bl	800b37c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a8d6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3738      	adds	r7, #56	; 0x38
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	e000ed04 	.word	0xe000ed04

0800a8e4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b08e      	sub	sp, #56	; 0x38
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d10c      	bne.n	800a916 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a8fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a900:	b672      	cpsid	i
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	b662      	cpsie	i
 800a910:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a912:	bf00      	nop
 800a914:	e7fe      	b.n	800a914 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d103      	bne.n	800a924 <xQueueGenericSendFromISR+0x40>
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a920:	2b00      	cmp	r3, #0
 800a922:	d101      	bne.n	800a928 <xQueueGenericSendFromISR+0x44>
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <xQueueGenericSendFromISR+0x46>
 800a928:	2300      	movs	r3, #0
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d10c      	bne.n	800a948 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a932:	b672      	cpsid	i
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	b662      	cpsie	i
 800a942:	623b      	str	r3, [r7, #32]
}
 800a944:	bf00      	nop
 800a946:	e7fe      	b.n	800a946 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	2b02      	cmp	r3, #2
 800a94c:	d103      	bne.n	800a956 <xQueueGenericSendFromISR+0x72>
 800a94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a952:	2b01      	cmp	r3, #1
 800a954:	d101      	bne.n	800a95a <xQueueGenericSendFromISR+0x76>
 800a956:	2301      	movs	r3, #1
 800a958:	e000      	b.n	800a95c <xQueueGenericSendFromISR+0x78>
 800a95a:	2300      	movs	r3, #0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10c      	bne.n	800a97a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a964:	b672      	cpsid	i
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	b662      	cpsie	i
 800a974:	61fb      	str	r3, [r7, #28]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a97a:	f001 ff3f 	bl	800c7fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a97e:	f3ef 8211 	mrs	r2, BASEPRI
 800a982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a986:	b672      	cpsid	i
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	b662      	cpsie	i
 800a996:	61ba      	str	r2, [r7, #24]
 800a998:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a99a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a99c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d302      	bcc.n	800a9b0 <xQueueGenericSendFromISR+0xcc>
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d12c      	bne.n	800aa0a <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	68b9      	ldr	r1, [r7, #8]
 800a9be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9c0:	f000 f916 	bl	800abf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a9c4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a9c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9cc:	d112      	bne.n	800a9f4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d016      	beq.n	800aa04 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d8:	3324      	adds	r3, #36	; 0x24
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 feee 	bl	800b7bc <xTaskRemoveFromEventList>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d00e      	beq.n	800aa04 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00b      	beq.n	800aa04 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	601a      	str	r2, [r3, #0]
 800a9f2:	e007      	b.n	800aa04 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	b25a      	sxtb	r2, r3
 800a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800aa04:	2301      	movs	r3, #1
 800aa06:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800aa08:	e001      	b.n	800aa0e <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa10:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aa18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3738      	adds	r7, #56	; 0x38
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b08c      	sub	sp, #48	; 0x30
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa30:	2300      	movs	r3, #0
 800aa32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10c      	bne.n	800aa58 <xQueueReceive+0x34>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa42:	b672      	cpsid	i
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	b662      	cpsie	i
 800aa52:	623b      	str	r3, [r7, #32]
}
 800aa54:	bf00      	nop
 800aa56:	e7fe      	b.n	800aa56 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d103      	bne.n	800aa66 <xQueueReceive+0x42>
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d101      	bne.n	800aa6a <xQueueReceive+0x46>
 800aa66:	2301      	movs	r3, #1
 800aa68:	e000      	b.n	800aa6c <xQueueReceive+0x48>
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d10c      	bne.n	800aa8a <xQueueReceive+0x66>
	__asm volatile
 800aa70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa74:	b672      	cpsid	i
 800aa76:	f383 8811 	msr	BASEPRI, r3
 800aa7a:	f3bf 8f6f 	isb	sy
 800aa7e:	f3bf 8f4f 	dsb	sy
 800aa82:	b662      	cpsie	i
 800aa84:	61fb      	str	r3, [r7, #28]
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa8a:	f001 f885 	bl	800bb98 <xTaskGetSchedulerState>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d102      	bne.n	800aa9a <xQueueReceive+0x76>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <xQueueReceive+0x7a>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e000      	b.n	800aaa0 <xQueueReceive+0x7c>
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10c      	bne.n	800aabe <xQueueReceive+0x9a>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa8:	b672      	cpsid	i
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	b662      	cpsie	i
 800aab8:	61bb      	str	r3, [r7, #24]
}
 800aaba:	bf00      	nop
 800aabc:	e7fe      	b.n	800aabc <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aabe:	f001 fdb5 	bl	800c62c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aac6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d01f      	beq.n	800ab0e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aad2:	f000 f8f7 	bl	800acc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad8:	1e5a      	subs	r2, r3, #1
 800aada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aadc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae0:	691b      	ldr	r3, [r3, #16]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00f      	beq.n	800ab06 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae8:	3310      	adds	r3, #16
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fe66 	bl	800b7bc <xTaskRemoveFromEventList>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d007      	beq.n	800ab06 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aaf6:	4b3d      	ldr	r3, [pc, #244]	; (800abec <xQueueReceive+0x1c8>)
 800aaf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab06:	f001 fdc5 	bl	800c694 <vPortExitCritical>
				return pdPASS;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e069      	b.n	800abe2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d103      	bne.n	800ab1c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab14:	f001 fdbe 	bl	800c694 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	e062      	b.n	800abe2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d106      	bne.n	800ab30 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab22:	f107 0310 	add.w	r3, r7, #16
 800ab26:	4618      	mov	r0, r3
 800ab28:	f000 fed6 	bl	800b8d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab30:	f001 fdb0 	bl	800c694 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab34:	f000 fc14 	bl	800b360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab38:	f001 fd78 	bl	800c62c <vPortEnterCritical>
 800ab3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab42:	b25b      	sxtb	r3, r3
 800ab44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab48:	d103      	bne.n	800ab52 <xQueueReceive+0x12e>
 800ab4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab58:	b25b      	sxtb	r3, r3
 800ab5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab5e:	d103      	bne.n	800ab68 <xQueueReceive+0x144>
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab68:	f001 fd94 	bl	800c694 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab6c:	1d3a      	adds	r2, r7, #4
 800ab6e:	f107 0310 	add.w	r3, r7, #16
 800ab72:	4611      	mov	r1, r2
 800ab74:	4618      	mov	r0, r3
 800ab76:	f000 fec5 	bl	800b904 <xTaskCheckForTimeOut>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d123      	bne.n	800abc8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab82:	f000 f917 	bl	800adb4 <prvIsQueueEmpty>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d017      	beq.n	800abbc <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8e:	3324      	adds	r3, #36	; 0x24
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	4611      	mov	r1, r2
 800ab94:	4618      	mov	r0, r3
 800ab96:	f000 fdbd 	bl	800b714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab9c:	f000 f8b8 	bl	800ad10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aba0:	f000 fbec 	bl	800b37c <xTaskResumeAll>
 800aba4:	4603      	mov	r3, r0
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d189      	bne.n	800aabe <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800abaa:	4b10      	ldr	r3, [pc, #64]	; (800abec <xQueueReceive+0x1c8>)
 800abac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abb0:	601a      	str	r2, [r3, #0]
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	f3bf 8f6f 	isb	sy
 800abba:	e780      	b.n	800aabe <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800abbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abbe:	f000 f8a7 	bl	800ad10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abc2:	f000 fbdb 	bl	800b37c <xTaskResumeAll>
 800abc6:	e77a      	b.n	800aabe <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800abc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abca:	f000 f8a1 	bl	800ad10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abce:	f000 fbd5 	bl	800b37c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abd4:	f000 f8ee 	bl	800adb4 <prvIsQueueEmpty>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	f43f af6f 	beq.w	800aabe <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800abe0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3730      	adds	r7, #48	; 0x30
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}
 800abea:	bf00      	nop
 800abec:	e000ed04 	.word	0xe000ed04

0800abf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b086      	sub	sp, #24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d10d      	bne.n	800ac2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d14d      	bne.n	800acb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 ffda 	bl	800bbd4 <xTaskPriorityDisinherit>
 800ac20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2200      	movs	r2, #0
 800ac26:	609a      	str	r2, [r3, #8]
 800ac28:	e043      	b.n	800acb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d119      	bne.n	800ac64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	6858      	ldr	r0, [r3, #4]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	461a      	mov	r2, r3
 800ac3a:	68b9      	ldr	r1, [r7, #8]
 800ac3c:	f010 feff 	bl	801ba3e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac48:	441a      	add	r2, r3
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	685a      	ldr	r2, [r3, #4]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	689b      	ldr	r3, [r3, #8]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d32b      	bcc.n	800acb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	605a      	str	r2, [r3, #4]
 800ac62:	e026      	b.n	800acb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68d8      	ldr	r0, [r3, #12]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	68b9      	ldr	r1, [r7, #8]
 800ac70:	f010 fee5 	bl	801ba3e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	68da      	ldr	r2, [r3, #12]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7c:	425b      	negs	r3, r3
 800ac7e:	441a      	add	r2, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	68da      	ldr	r2, [r3, #12]
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d207      	bcs.n	800aca0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	689a      	ldr	r2, [r3, #8]
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac98:	425b      	negs	r3, r3
 800ac9a:	441a      	add	r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b02      	cmp	r3, #2
 800aca4:	d105      	bne.n	800acb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d002      	beq.n	800acb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	3b01      	subs	r3, #1
 800acb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800acba:	697b      	ldr	r3, [r7, #20]
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3718      	adds	r7, #24
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}

0800acc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d018      	beq.n	800ad08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	68da      	ldr	r2, [r3, #12]
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acde:	441a      	add	r2, r3
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	68da      	ldr	r2, [r3, #12]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	429a      	cmp	r2, r3
 800acee:	d303      	bcc.n	800acf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	68d9      	ldr	r1, [r3, #12]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad00:	461a      	mov	r2, r3
 800ad02:	6838      	ldr	r0, [r7, #0]
 800ad04:	f010 fe9b 	bl	801ba3e <memcpy>
	}
}
 800ad08:	bf00      	nop
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ad18:	f001 fc88 	bl	800c62c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad24:	e011      	b.n	800ad4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d012      	beq.n	800ad54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	3324      	adds	r3, #36	; 0x24
 800ad32:	4618      	mov	r0, r3
 800ad34:	f000 fd42 	bl	800b7bc <xTaskRemoveFromEventList>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ad3e:	f000 fe47 	bl	800b9d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ad42:	7bfb      	ldrb	r3, [r7, #15]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ad4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	dce9      	bgt.n	800ad26 <prvUnlockQueue+0x16>
 800ad52:	e000      	b.n	800ad56 <prvUnlockQueue+0x46>
					break;
 800ad54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	22ff      	movs	r2, #255	; 0xff
 800ad5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ad5e:	f001 fc99 	bl	800c694 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ad62:	f001 fc63 	bl	800c62c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ad6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad6e:	e011      	b.n	800ad94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	691b      	ldr	r3, [r3, #16]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d012      	beq.n	800ad9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	3310      	adds	r3, #16
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	f000 fd1d 	bl	800b7bc <xTaskRemoveFromEventList>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ad88:	f000 fe22 	bl	800b9d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ad8c:	7bbb      	ldrb	r3, [r7, #14]
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ad94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	dce9      	bgt.n	800ad70 <prvUnlockQueue+0x60>
 800ad9c:	e000      	b.n	800ada0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ad9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	22ff      	movs	r2, #255	; 0xff
 800ada4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ada8:	f001 fc74 	bl	800c694 <vPortExitCritical>
}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b084      	sub	sp, #16
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800adbc:	f001 fc36 	bl	800c62c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800adc8:	2301      	movs	r3, #1
 800adca:	60fb      	str	r3, [r7, #12]
 800adcc:	e001      	b.n	800add2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800adce:	2300      	movs	r3, #0
 800add0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800add2:	f001 fc5f 	bl	800c694 <vPortExitCritical>

	return xReturn;
 800add6:	68fb      	ldr	r3, [r7, #12]
}
 800add8:	4618      	mov	r0, r3
 800adda:	3710      	adds	r7, #16
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}

0800ade0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ade8:	f001 fc20 	bl	800c62c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d102      	bne.n	800adfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800adf8:	2301      	movs	r3, #1
 800adfa:	60fb      	str	r3, [r7, #12]
 800adfc:	e001      	b.n	800ae02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ae02:	f001 fc47 	bl	800c694 <vPortExitCritical>

	return xReturn;
 800ae06:	68fb      	ldr	r3, [r7, #12]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3710      	adds	r7, #16
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60fb      	str	r3, [r7, #12]
 800ae1e:	e014      	b.n	800ae4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ae20:	4a0f      	ldr	r2, [pc, #60]	; (800ae60 <vQueueAddToRegistry+0x50>)
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d10b      	bne.n	800ae44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ae2c:	490c      	ldr	r1, [pc, #48]	; (800ae60 <vQueueAddToRegistry+0x50>)
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ae36:	4a0a      	ldr	r2, [pc, #40]	; (800ae60 <vQueueAddToRegistry+0x50>)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	4413      	add	r3, r2
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ae42:	e006      	b.n	800ae52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3301      	adds	r3, #1
 800ae48:	60fb      	str	r3, [r7, #12]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2b07      	cmp	r3, #7
 800ae4e:	d9e7      	bls.n	800ae20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ae50:	bf00      	nop
 800ae52:	bf00      	nop
 800ae54:	3714      	adds	r7, #20
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	20008074 	.word	0x20008074

0800ae64 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b086      	sub	sp, #24
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae74:	f001 fbda 	bl	800c62c <vPortEnterCritical>
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae7e:	b25b      	sxtb	r3, r3
 800ae80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae84:	d103      	bne.n	800ae8e <vQueueWaitForMessageRestricted+0x2a>
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae94:	b25b      	sxtb	r3, r3
 800ae96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae9a:	d103      	bne.n	800aea4 <vQueueWaitForMessageRestricted+0x40>
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aea4:	f001 fbf6 	bl	800c694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d106      	bne.n	800aebe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800aeb0:	697b      	ldr	r3, [r7, #20]
 800aeb2:	3324      	adds	r3, #36	; 0x24
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	68b9      	ldr	r1, [r7, #8]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f000 fc51 	bl	800b760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800aebe:	6978      	ldr	r0, [r7, #20]
 800aec0:	f7ff ff26 	bl	800ad10 <prvUnlockQueue>
	}
 800aec4:	bf00      	nop
 800aec6:	3718      	adds	r7, #24
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08e      	sub	sp, #56	; 0x38
 800aed0:	af04      	add	r7, sp, #16
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	607a      	str	r2, [r7, #4]
 800aed8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800aeda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d10c      	bne.n	800aefa <xTaskCreateStatic+0x2e>
	__asm volatile
 800aee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aee4:	b672      	cpsid	i
 800aee6:	f383 8811 	msr	BASEPRI, r3
 800aeea:	f3bf 8f6f 	isb	sy
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	b662      	cpsie	i
 800aef4:	623b      	str	r3, [r7, #32]
}
 800aef6:	bf00      	nop
 800aef8:	e7fe      	b.n	800aef8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800aefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10c      	bne.n	800af1a <xTaskCreateStatic+0x4e>
	__asm volatile
 800af00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af04:	b672      	cpsid	i
 800af06:	f383 8811 	msr	BASEPRI, r3
 800af0a:	f3bf 8f6f 	isb	sy
 800af0e:	f3bf 8f4f 	dsb	sy
 800af12:	b662      	cpsie	i
 800af14:	61fb      	str	r3, [r7, #28]
}
 800af16:	bf00      	nop
 800af18:	e7fe      	b.n	800af18 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800af1a:	235c      	movs	r3, #92	; 0x5c
 800af1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	2b5c      	cmp	r3, #92	; 0x5c
 800af22:	d00c      	beq.n	800af3e <xTaskCreateStatic+0x72>
	__asm volatile
 800af24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af28:	b672      	cpsid	i
 800af2a:	f383 8811 	msr	BASEPRI, r3
 800af2e:	f3bf 8f6f 	isb	sy
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	b662      	cpsie	i
 800af38:	61bb      	str	r3, [r7, #24]
}
 800af3a:	bf00      	nop
 800af3c:	e7fe      	b.n	800af3c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800af3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800af40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af42:	2b00      	cmp	r3, #0
 800af44:	d01e      	beq.n	800af84 <xTaskCreateStatic+0xb8>
 800af46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d01b      	beq.n	800af84 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800af4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800af56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af58:	2202      	movs	r2, #2
 800af5a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800af5e:	2300      	movs	r3, #0
 800af60:	9303      	str	r3, [sp, #12]
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	9302      	str	r3, [sp, #8]
 800af66:	f107 0314 	add.w	r3, r7, #20
 800af6a:	9301      	str	r3, [sp, #4]
 800af6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	68b9      	ldr	r1, [r7, #8]
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f000 f850 	bl	800b01c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af7e:	f000 f8df 	bl	800b140 <prvAddNewTaskToReadyList>
 800af82:	e001      	b.n	800af88 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800af84:	2300      	movs	r3, #0
 800af86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af88:	697b      	ldr	r3, [r7, #20]
	}
 800af8a:	4618      	mov	r0, r3
 800af8c:	3728      	adds	r7, #40	; 0x28
 800af8e:	46bd      	mov	sp, r7
 800af90:	bd80      	pop	{r7, pc}

0800af92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af92:	b580      	push	{r7, lr}
 800af94:	b08c      	sub	sp, #48	; 0x30
 800af96:	af04      	add	r7, sp, #16
 800af98:	60f8      	str	r0, [r7, #12]
 800af9a:	60b9      	str	r1, [r7, #8]
 800af9c:	603b      	str	r3, [r7, #0]
 800af9e:	4613      	mov	r3, r2
 800afa0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800afa2:	88fb      	ldrh	r3, [r7, #6]
 800afa4:	009b      	lsls	r3, r3, #2
 800afa6:	4618      	mov	r0, r3
 800afa8:	f001 fc6c 	bl	800c884 <pvPortMalloc>
 800afac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00e      	beq.n	800afd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800afb4:	205c      	movs	r0, #92	; 0x5c
 800afb6:	f001 fc65 	bl	800c884 <pvPortMalloc>
 800afba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d003      	beq.n	800afca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	697a      	ldr	r2, [r7, #20]
 800afc6:	631a      	str	r2, [r3, #48]	; 0x30
 800afc8:	e005      	b.n	800afd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800afca:	6978      	ldr	r0, [r7, #20]
 800afcc:	f001 fd24 	bl	800ca18 <vPortFree>
 800afd0:	e001      	b.n	800afd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d017      	beq.n	800b00c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	2200      	movs	r2, #0
 800afe0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800afe4:	88fa      	ldrh	r2, [r7, #6]
 800afe6:	2300      	movs	r3, #0
 800afe8:	9303      	str	r3, [sp, #12]
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	9302      	str	r3, [sp, #8]
 800afee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	68b9      	ldr	r1, [r7, #8]
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 f80e 	bl	800b01c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b000:	69f8      	ldr	r0, [r7, #28]
 800b002:	f000 f89d 	bl	800b140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b006:	2301      	movs	r3, #1
 800b008:	61bb      	str	r3, [r7, #24]
 800b00a:	e002      	b.n	800b012 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b00c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b010:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b012:	69bb      	ldr	r3, [r7, #24]
	}
 800b014:	4618      	mov	r0, r3
 800b016:	3720      	adds	r7, #32
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b088      	sub	sp, #32
 800b020:	af00      	add	r7, sp, #0
 800b022:	60f8      	str	r0, [r7, #12]
 800b024:	60b9      	str	r1, [r7, #8]
 800b026:	607a      	str	r2, [r7, #4]
 800b028:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	461a      	mov	r2, r3
 800b034:	21a5      	movs	r1, #165	; 0xa5
 800b036:	f010 fc39 	bl	801b8ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b03c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b044:	440b      	add	r3, r1
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	f023 0307 	bic.w	r3, r3, #7
 800b052:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00c      	beq.n	800b078 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b062:	b672      	cpsid	i
 800b064:	f383 8811 	msr	BASEPRI, r3
 800b068:	f3bf 8f6f 	isb	sy
 800b06c:	f3bf 8f4f 	dsb	sy
 800b070:	b662      	cpsie	i
 800b072:	617b      	str	r3, [r7, #20]
}
 800b074:	bf00      	nop
 800b076:	e7fe      	b.n	800b076 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d01f      	beq.n	800b0be <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b07e:	2300      	movs	r3, #0
 800b080:	61fb      	str	r3, [r7, #28]
 800b082:	e012      	b.n	800b0aa <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	69fb      	ldr	r3, [r7, #28]
 800b088:	4413      	add	r3, r2
 800b08a:	7819      	ldrb	r1, [r3, #0]
 800b08c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b08e:	69fb      	ldr	r3, [r7, #28]
 800b090:	4413      	add	r3, r2
 800b092:	3334      	adds	r3, #52	; 0x34
 800b094:	460a      	mov	r2, r1
 800b096:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	69fb      	ldr	r3, [r7, #28]
 800b09c:	4413      	add	r3, r2
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d006      	beq.n	800b0b2 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	61fb      	str	r3, [r7, #28]
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	2b0f      	cmp	r3, #15
 800b0ae:	d9e9      	bls.n	800b084 <prvInitialiseNewTask+0x68>
 800b0b0:	e000      	b.n	800b0b4 <prvInitialiseNewTask+0x98>
			{
				break;
 800b0b2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b0bc:	e003      	b.n	800b0c6 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c8:	2b37      	cmp	r3, #55	; 0x37
 800b0ca:	d901      	bls.n	800b0d0 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b0cc:	2337      	movs	r3, #55	; 0x37
 800b0ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0da:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	2200      	movs	r2, #0
 800b0e0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7ff f952 	bl	800a390 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ee:	3318      	adds	r3, #24
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff f94d 	bl	800a390 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b10a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10e:	2200      	movs	r2, #0
 800b110:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b114:	2200      	movs	r2, #0
 800b116:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b11a:	683a      	ldr	r2, [r7, #0]
 800b11c:	68f9      	ldr	r1, [r7, #12]
 800b11e:	69b8      	ldr	r0, [r7, #24]
 800b120:	f001 f97a 	bl	800c418 <pxPortInitialiseStack>
 800b124:	4602      	mov	r2, r0
 800b126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b128:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b136:	bf00      	nop
 800b138:	3720      	adds	r7, #32
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
	...

0800b140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b148:	f001 fa70 	bl	800c62c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b14c:	4b2d      	ldr	r3, [pc, #180]	; (800b204 <prvAddNewTaskToReadyList+0xc4>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	3301      	adds	r3, #1
 800b152:	4a2c      	ldr	r2, [pc, #176]	; (800b204 <prvAddNewTaskToReadyList+0xc4>)
 800b154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b156:	4b2c      	ldr	r3, [pc, #176]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d109      	bne.n	800b172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b15e:	4a2a      	ldr	r2, [pc, #168]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b164:	4b27      	ldr	r3, [pc, #156]	; (800b204 <prvAddNewTaskToReadyList+0xc4>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d110      	bne.n	800b18e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b16c:	f000 fc54 	bl	800ba18 <prvInitialiseTaskLists>
 800b170:	e00d      	b.n	800b18e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b172:	4b26      	ldr	r3, [pc, #152]	; (800b20c <prvAddNewTaskToReadyList+0xcc>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d109      	bne.n	800b18e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b17a:	4b23      	ldr	r3, [pc, #140]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	429a      	cmp	r2, r3
 800b186:	d802      	bhi.n	800b18e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b188:	4a1f      	ldr	r2, [pc, #124]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b18e:	4b20      	ldr	r3, [pc, #128]	; (800b210 <prvAddNewTaskToReadyList+0xd0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	3301      	adds	r3, #1
 800b194:	4a1e      	ldr	r2, [pc, #120]	; (800b210 <prvAddNewTaskToReadyList+0xd0>)
 800b196:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b198:	4b1d      	ldr	r3, [pc, #116]	; (800b210 <prvAddNewTaskToReadyList+0xd0>)
 800b19a:	681a      	ldr	r2, [r3, #0]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a4:	4b1b      	ldr	r3, [pc, #108]	; (800b214 <prvAddNewTaskToReadyList+0xd4>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d903      	bls.n	800b1b4 <prvAddNewTaskToReadyList+0x74>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1b0:	4a18      	ldr	r2, [pc, #96]	; (800b214 <prvAddNewTaskToReadyList+0xd4>)
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	4a15      	ldr	r2, [pc, #84]	; (800b218 <prvAddNewTaskToReadyList+0xd8>)
 800b1c2:	441a      	add	r2, r3
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	3304      	adds	r3, #4
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	4610      	mov	r0, r2
 800b1cc:	f7ff f8ed 	bl	800a3aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b1d0:	f001 fa60 	bl	800c694 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b1d4:	4b0d      	ldr	r3, [pc, #52]	; (800b20c <prvAddNewTaskToReadyList+0xcc>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d00e      	beq.n	800b1fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <prvAddNewTaskToReadyList+0xc8>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e6:	429a      	cmp	r2, r3
 800b1e8:	d207      	bcs.n	800b1fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1ea:	4b0c      	ldr	r3, [pc, #48]	; (800b21c <prvAddNewTaskToReadyList+0xdc>)
 800b1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1f0:	601a      	str	r2, [r3, #0]
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20008588 	.word	0x20008588
 800b208:	200080b4 	.word	0x200080b4
 800b20c:	20008594 	.word	0x20008594
 800b210:	200085a4 	.word	0x200085a4
 800b214:	20008590 	.word	0x20008590
 800b218:	200080b8 	.word	0x200080b8
 800b21c:	e000ed04 	.word	0xe000ed04

0800b220 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b228:	2300      	movs	r3, #0
 800b22a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d019      	beq.n	800b266 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b232:	4b14      	ldr	r3, [pc, #80]	; (800b284 <vTaskDelay+0x64>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00c      	beq.n	800b254 <vTaskDelay+0x34>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	b672      	cpsid	i
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	b662      	cpsie	i
 800b24e:	60bb      	str	r3, [r7, #8]
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b254:	f000 f884 	bl	800b360 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b258:	2100      	movs	r1, #0
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fd2c 	bl	800bcb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b260:	f000 f88c 	bl	800b37c <xTaskResumeAll>
 800b264:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d107      	bne.n	800b27c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b26c:	4b06      	ldr	r3, [pc, #24]	; (800b288 <vTaskDelay+0x68>)
 800b26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b272:	601a      	str	r2, [r3, #0]
 800b274:	f3bf 8f4f 	dsb	sy
 800b278:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b27c:	bf00      	nop
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	200085b0 	.word	0x200085b0
 800b288:	e000ed04 	.word	0xe000ed04

0800b28c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08a      	sub	sp, #40	; 0x28
 800b290:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b292:	2300      	movs	r3, #0
 800b294:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b296:	2300      	movs	r3, #0
 800b298:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b29a:	463a      	mov	r2, r7
 800b29c:	1d39      	adds	r1, r7, #4
 800b29e:	f107 0308 	add.w	r3, r7, #8
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff f820 	bl	800a2e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b2a8:	6839      	ldr	r1, [r7, #0]
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	68ba      	ldr	r2, [r7, #8]
 800b2ae:	9202      	str	r2, [sp, #8]
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	9300      	str	r3, [sp, #0]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	460a      	mov	r2, r1
 800b2ba:	4923      	ldr	r1, [pc, #140]	; (800b348 <vTaskStartScheduler+0xbc>)
 800b2bc:	4823      	ldr	r0, [pc, #140]	; (800b34c <vTaskStartScheduler+0xc0>)
 800b2be:	f7ff fe05 	bl	800aecc <xTaskCreateStatic>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	4a22      	ldr	r2, [pc, #136]	; (800b350 <vTaskStartScheduler+0xc4>)
 800b2c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b2c8:	4b21      	ldr	r3, [pc, #132]	; (800b350 <vTaskStartScheduler+0xc4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	617b      	str	r3, [r7, #20]
 800b2d4:	e001      	b.n	800b2da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d102      	bne.n	800b2e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b2e0:	f000 fd3e 	bl	800bd60 <xTimerCreateTimerTask>
 800b2e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d118      	bne.n	800b31e <vTaskStartScheduler+0x92>
	__asm volatile
 800b2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f0:	b672      	cpsid	i
 800b2f2:	f383 8811 	msr	BASEPRI, r3
 800b2f6:	f3bf 8f6f 	isb	sy
 800b2fa:	f3bf 8f4f 	dsb	sy
 800b2fe:	b662      	cpsie	i
 800b300:	613b      	str	r3, [r7, #16]
}
 800b302:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b304:	4b13      	ldr	r3, [pc, #76]	; (800b354 <vTaskStartScheduler+0xc8>)
 800b306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b30a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b30c:	4b12      	ldr	r3, [pc, #72]	; (800b358 <vTaskStartScheduler+0xcc>)
 800b30e:	2201      	movs	r2, #1
 800b310:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b312:	4b12      	ldr	r3, [pc, #72]	; (800b35c <vTaskStartScheduler+0xd0>)
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b318:	f001 f90a 	bl	800c530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b31c:	e010      	b.n	800b340 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b324:	d10c      	bne.n	800b340 <vTaskStartScheduler+0xb4>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32a:	b672      	cpsid	i
 800b32c:	f383 8811 	msr	BASEPRI, r3
 800b330:	f3bf 8f6f 	isb	sy
 800b334:	f3bf 8f4f 	dsb	sy
 800b338:	b662      	cpsie	i
 800b33a:	60fb      	str	r3, [r7, #12]
}
 800b33c:	bf00      	nop
 800b33e:	e7fe      	b.n	800b33e <vTaskStartScheduler+0xb2>
}
 800b340:	bf00      	nop
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	0801c7f8 	.word	0x0801c7f8
 800b34c:	0800b9e9 	.word	0x0800b9e9
 800b350:	200085ac 	.word	0x200085ac
 800b354:	200085a8 	.word	0x200085a8
 800b358:	20008594 	.word	0x20008594
 800b35c:	2000858c 	.word	0x2000858c

0800b360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b360:	b480      	push	{r7}
 800b362:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b364:	4b04      	ldr	r3, [pc, #16]	; (800b378 <vTaskSuspendAll+0x18>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	3301      	adds	r3, #1
 800b36a:	4a03      	ldr	r2, [pc, #12]	; (800b378 <vTaskSuspendAll+0x18>)
 800b36c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b36e:	bf00      	nop
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr
 800b378:	200085b0 	.word	0x200085b0

0800b37c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b382:	2300      	movs	r3, #0
 800b384:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b386:	2300      	movs	r3, #0
 800b388:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b38a:	4b43      	ldr	r3, [pc, #268]	; (800b498 <xTaskResumeAll+0x11c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10c      	bne.n	800b3ac <xTaskResumeAll+0x30>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b396:	b672      	cpsid	i
 800b398:	f383 8811 	msr	BASEPRI, r3
 800b39c:	f3bf 8f6f 	isb	sy
 800b3a0:	f3bf 8f4f 	dsb	sy
 800b3a4:	b662      	cpsie	i
 800b3a6:	603b      	str	r3, [r7, #0]
}
 800b3a8:	bf00      	nop
 800b3aa:	e7fe      	b.n	800b3aa <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b3ac:	f001 f93e 	bl	800c62c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b3b0:	4b39      	ldr	r3, [pc, #228]	; (800b498 <xTaskResumeAll+0x11c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	3b01      	subs	r3, #1
 800b3b6:	4a38      	ldr	r2, [pc, #224]	; (800b498 <xTaskResumeAll+0x11c>)
 800b3b8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3ba:	4b37      	ldr	r3, [pc, #220]	; (800b498 <xTaskResumeAll+0x11c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d162      	bne.n	800b488 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b3c2:	4b36      	ldr	r3, [pc, #216]	; (800b49c <xTaskResumeAll+0x120>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d05e      	beq.n	800b488 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3ca:	e02f      	b.n	800b42c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3cc:	4b34      	ldr	r3, [pc, #208]	; (800b4a0 <xTaskResumeAll+0x124>)
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	68db      	ldr	r3, [r3, #12]
 800b3d2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	3318      	adds	r3, #24
 800b3d8:	4618      	mov	r0, r3
 800b3da:	f7ff f843 	bl	800a464 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3304      	adds	r3, #4
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7ff f83e 	bl	800a464 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ec:	4b2d      	ldr	r3, [pc, #180]	; (800b4a4 <xTaskResumeAll+0x128>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d903      	bls.n	800b3fc <xTaskResumeAll+0x80>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	4a2a      	ldr	r2, [pc, #168]	; (800b4a4 <xTaskResumeAll+0x128>)
 800b3fa:	6013      	str	r3, [r2, #0]
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b400:	4613      	mov	r3, r2
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	4413      	add	r3, r2
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4a27      	ldr	r2, [pc, #156]	; (800b4a8 <xTaskResumeAll+0x12c>)
 800b40a:	441a      	add	r2, r3
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	3304      	adds	r3, #4
 800b410:	4619      	mov	r1, r3
 800b412:	4610      	mov	r0, r2
 800b414:	f7fe ffc9 	bl	800a3aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41c:	4b23      	ldr	r3, [pc, #140]	; (800b4ac <xTaskResumeAll+0x130>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b422:	429a      	cmp	r2, r3
 800b424:	d302      	bcc.n	800b42c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b426:	4b22      	ldr	r3, [pc, #136]	; (800b4b0 <xTaskResumeAll+0x134>)
 800b428:	2201      	movs	r2, #1
 800b42a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b42c:	4b1c      	ldr	r3, [pc, #112]	; (800b4a0 <xTaskResumeAll+0x124>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1cb      	bne.n	800b3cc <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b43a:	f000 fb8d 	bl	800bb58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b43e:	4b1d      	ldr	r3, [pc, #116]	; (800b4b4 <xTaskResumeAll+0x138>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d010      	beq.n	800b46c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b44a:	f000 f847 	bl	800b4dc <xTaskIncrementTick>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d002      	beq.n	800b45a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b454:	4b16      	ldr	r3, [pc, #88]	; (800b4b0 <xTaskResumeAll+0x134>)
 800b456:	2201      	movs	r2, #1
 800b458:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	3b01      	subs	r3, #1
 800b45e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1f1      	bne.n	800b44a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b466:	4b13      	ldr	r3, [pc, #76]	; (800b4b4 <xTaskResumeAll+0x138>)
 800b468:	2200      	movs	r2, #0
 800b46a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b46c:	4b10      	ldr	r3, [pc, #64]	; (800b4b0 <xTaskResumeAll+0x134>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d009      	beq.n	800b488 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b474:	2301      	movs	r3, #1
 800b476:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b478:	4b0f      	ldr	r3, [pc, #60]	; (800b4b8 <xTaskResumeAll+0x13c>)
 800b47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b488:	f001 f904 	bl	800c694 <vPortExitCritical>

	return xAlreadyYielded;
 800b48c:	68bb      	ldr	r3, [r7, #8]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	200085b0 	.word	0x200085b0
 800b49c:	20008588 	.word	0x20008588
 800b4a0:	20008548 	.word	0x20008548
 800b4a4:	20008590 	.word	0x20008590
 800b4a8:	200080b8 	.word	0x200080b8
 800b4ac:	200080b4 	.word	0x200080b4
 800b4b0:	2000859c 	.word	0x2000859c
 800b4b4:	20008598 	.word	0x20008598
 800b4b8:	e000ed04 	.word	0xe000ed04

0800b4bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b4c2:	4b05      	ldr	r3, [pc, #20]	; (800b4d8 <xTaskGetTickCount+0x1c>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b4c8:	687b      	ldr	r3, [r7, #4]
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	370c      	adds	r7, #12
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	2000858c 	.word	0x2000858c

0800b4dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b086      	sub	sp, #24
 800b4e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4e6:	4b50      	ldr	r3, [pc, #320]	; (800b628 <xTaskIncrementTick+0x14c>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	f040 808b 	bne.w	800b606 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4f0:	4b4e      	ldr	r3, [pc, #312]	; (800b62c <xTaskIncrementTick+0x150>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4f8:	4a4c      	ldr	r2, [pc, #304]	; (800b62c <xTaskIncrementTick+0x150>)
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d122      	bne.n	800b54a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b504:	4b4a      	ldr	r3, [pc, #296]	; (800b630 <xTaskIncrementTick+0x154>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00c      	beq.n	800b528 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b512:	b672      	cpsid	i
 800b514:	f383 8811 	msr	BASEPRI, r3
 800b518:	f3bf 8f6f 	isb	sy
 800b51c:	f3bf 8f4f 	dsb	sy
 800b520:	b662      	cpsie	i
 800b522:	603b      	str	r3, [r7, #0]
}
 800b524:	bf00      	nop
 800b526:	e7fe      	b.n	800b526 <xTaskIncrementTick+0x4a>
 800b528:	4b41      	ldr	r3, [pc, #260]	; (800b630 <xTaskIncrementTick+0x154>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]
 800b52e:	4b41      	ldr	r3, [pc, #260]	; (800b634 <xTaskIncrementTick+0x158>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a3f      	ldr	r2, [pc, #252]	; (800b630 <xTaskIncrementTick+0x154>)
 800b534:	6013      	str	r3, [r2, #0]
 800b536:	4a3f      	ldr	r2, [pc, #252]	; (800b634 <xTaskIncrementTick+0x158>)
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6013      	str	r3, [r2, #0]
 800b53c:	4b3e      	ldr	r3, [pc, #248]	; (800b638 <xTaskIncrementTick+0x15c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3301      	adds	r3, #1
 800b542:	4a3d      	ldr	r2, [pc, #244]	; (800b638 <xTaskIncrementTick+0x15c>)
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	f000 fb07 	bl	800bb58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b54a:	4b3c      	ldr	r3, [pc, #240]	; (800b63c <xTaskIncrementTick+0x160>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	429a      	cmp	r2, r3
 800b552:	d349      	bcc.n	800b5e8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b554:	4b36      	ldr	r3, [pc, #216]	; (800b630 <xTaskIncrementTick+0x154>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d104      	bne.n	800b568 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b55e:	4b37      	ldr	r3, [pc, #220]	; (800b63c <xTaskIncrementTick+0x160>)
 800b560:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b564:	601a      	str	r2, [r3, #0]
					break;
 800b566:	e03f      	b.n	800b5e8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b568:	4b31      	ldr	r3, [pc, #196]	; (800b630 <xTaskIncrementTick+0x154>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68db      	ldr	r3, [r3, #12]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	429a      	cmp	r2, r3
 800b57e:	d203      	bcs.n	800b588 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b580:	4a2e      	ldr	r2, [pc, #184]	; (800b63c <xTaskIncrementTick+0x160>)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b586:	e02f      	b.n	800b5e8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3304      	adds	r3, #4
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7fe ff69 	bl	800a464 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b596:	2b00      	cmp	r3, #0
 800b598:	d004      	beq.n	800b5a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	3318      	adds	r3, #24
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7fe ff60 	bl	800a464 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a8:	4b25      	ldr	r3, [pc, #148]	; (800b640 <xTaskIncrementTick+0x164>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d903      	bls.n	800b5b8 <xTaskIncrementTick+0xdc>
 800b5b0:	68bb      	ldr	r3, [r7, #8]
 800b5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b4:	4a22      	ldr	r2, [pc, #136]	; (800b640 <xTaskIncrementTick+0x164>)
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5bc:	4613      	mov	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	4a1f      	ldr	r2, [pc, #124]	; (800b644 <xTaskIncrementTick+0x168>)
 800b5c6:	441a      	add	r2, r3
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	3304      	adds	r3, #4
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	f7fe feeb 	bl	800a3aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d8:	4b1b      	ldr	r3, [pc, #108]	; (800b648 <xTaskIncrementTick+0x16c>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d3b8      	bcc.n	800b554 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5e6:	e7b5      	b.n	800b554 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5e8:	4b17      	ldr	r3, [pc, #92]	; (800b648 <xTaskIncrementTick+0x16c>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ee:	4915      	ldr	r1, [pc, #84]	; (800b644 <xTaskIncrementTick+0x168>)
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	009b      	lsls	r3, r3, #2
 800b5f8:	440b      	add	r3, r1
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d907      	bls.n	800b610 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b600:	2301      	movs	r3, #1
 800b602:	617b      	str	r3, [r7, #20]
 800b604:	e004      	b.n	800b610 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b606:	4b11      	ldr	r3, [pc, #68]	; (800b64c <xTaskIncrementTick+0x170>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	3301      	adds	r3, #1
 800b60c:	4a0f      	ldr	r2, [pc, #60]	; (800b64c <xTaskIncrementTick+0x170>)
 800b60e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b610:	4b0f      	ldr	r3, [pc, #60]	; (800b650 <xTaskIncrementTick+0x174>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b618:	2301      	movs	r3, #1
 800b61a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b61c:	697b      	ldr	r3, [r7, #20]
}
 800b61e:	4618      	mov	r0, r3
 800b620:	3718      	adds	r7, #24
 800b622:	46bd      	mov	sp, r7
 800b624:	bd80      	pop	{r7, pc}
 800b626:	bf00      	nop
 800b628:	200085b0 	.word	0x200085b0
 800b62c:	2000858c 	.word	0x2000858c
 800b630:	20008540 	.word	0x20008540
 800b634:	20008544 	.word	0x20008544
 800b638:	200085a0 	.word	0x200085a0
 800b63c:	200085a8 	.word	0x200085a8
 800b640:	20008590 	.word	0x20008590
 800b644:	200080b8 	.word	0x200080b8
 800b648:	200080b4 	.word	0x200080b4
 800b64c:	20008598 	.word	0x20008598
 800b650:	2000859c 	.word	0x2000859c

0800b654 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b65a:	4b29      	ldr	r3, [pc, #164]	; (800b700 <vTaskSwitchContext+0xac>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d003      	beq.n	800b66a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b662:	4b28      	ldr	r3, [pc, #160]	; (800b704 <vTaskSwitchContext+0xb0>)
 800b664:	2201      	movs	r2, #1
 800b666:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b668:	e043      	b.n	800b6f2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800b66a:	4b26      	ldr	r3, [pc, #152]	; (800b704 <vTaskSwitchContext+0xb0>)
 800b66c:	2200      	movs	r2, #0
 800b66e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b670:	4b25      	ldr	r3, [pc, #148]	; (800b708 <vTaskSwitchContext+0xb4>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]
 800b676:	e012      	b.n	800b69e <vTaskSwitchContext+0x4a>
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d10c      	bne.n	800b698 <vTaskSwitchContext+0x44>
	__asm volatile
 800b67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b682:	b672      	cpsid	i
 800b684:	f383 8811 	msr	BASEPRI, r3
 800b688:	f3bf 8f6f 	isb	sy
 800b68c:	f3bf 8f4f 	dsb	sy
 800b690:	b662      	cpsie	i
 800b692:	607b      	str	r3, [r7, #4]
}
 800b694:	bf00      	nop
 800b696:	e7fe      	b.n	800b696 <vTaskSwitchContext+0x42>
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	3b01      	subs	r3, #1
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	491b      	ldr	r1, [pc, #108]	; (800b70c <vTaskSwitchContext+0xb8>)
 800b6a0:	68fa      	ldr	r2, [r7, #12]
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4413      	add	r3, r2
 800b6a8:	009b      	lsls	r3, r3, #2
 800b6aa:	440b      	add	r3, r1
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d0e2      	beq.n	800b678 <vTaskSwitchContext+0x24>
 800b6b2:	68fa      	ldr	r2, [r7, #12]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	4413      	add	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	4a13      	ldr	r2, [pc, #76]	; (800b70c <vTaskSwitchContext+0xb8>)
 800b6be:	4413      	add	r3, r2
 800b6c0:	60bb      	str	r3, [r7, #8]
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	685a      	ldr	r2, [r3, #4]
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	605a      	str	r2, [r3, #4]
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	685a      	ldr	r2, [r3, #4]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	3308      	adds	r3, #8
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d104      	bne.n	800b6e2 <vTaskSwitchContext+0x8e>
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	685a      	ldr	r2, [r3, #4]
 800b6de:	68bb      	ldr	r3, [r7, #8]
 800b6e0:	605a      	str	r2, [r3, #4]
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	4a09      	ldr	r2, [pc, #36]	; (800b710 <vTaskSwitchContext+0xbc>)
 800b6ea:	6013      	str	r3, [r2, #0]
 800b6ec:	4a06      	ldr	r2, [pc, #24]	; (800b708 <vTaskSwitchContext+0xb4>)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6013      	str	r3, [r2, #0]
}
 800b6f2:	bf00      	nop
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	200085b0 	.word	0x200085b0
 800b704:	2000859c 	.word	0x2000859c
 800b708:	20008590 	.word	0x20008590
 800b70c:	200080b8 	.word	0x200080b8
 800b710:	200080b4 	.word	0x200080b4

0800b714 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10c      	bne.n	800b73e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b728:	b672      	cpsid	i
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	b662      	cpsie	i
 800b738:	60fb      	str	r3, [r7, #12]
}
 800b73a:	bf00      	nop
 800b73c:	e7fe      	b.n	800b73c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b73e:	4b07      	ldr	r3, [pc, #28]	; (800b75c <vTaskPlaceOnEventList+0x48>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3318      	adds	r3, #24
 800b744:	4619      	mov	r1, r3
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f7fe fe53 	bl	800a3f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b74c:	2101      	movs	r1, #1
 800b74e:	6838      	ldr	r0, [r7, #0]
 800b750:	f000 fab2 	bl	800bcb8 <prvAddCurrentTaskToDelayedList>
}
 800b754:	bf00      	nop
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	200080b4 	.word	0x200080b4

0800b760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d10c      	bne.n	800b78c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	b672      	cpsid	i
 800b778:	f383 8811 	msr	BASEPRI, r3
 800b77c:	f3bf 8f6f 	isb	sy
 800b780:	f3bf 8f4f 	dsb	sy
 800b784:	b662      	cpsie	i
 800b786:	617b      	str	r3, [r7, #20]
}
 800b788:	bf00      	nop
 800b78a:	e7fe      	b.n	800b78a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b78c:	4b0a      	ldr	r3, [pc, #40]	; (800b7b8 <vTaskPlaceOnEventListRestricted+0x58>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	3318      	adds	r3, #24
 800b792:	4619      	mov	r1, r3
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f7fe fe08 	bl	800a3aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d002      	beq.n	800b7a6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b7a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	68b8      	ldr	r0, [r7, #8]
 800b7aa:	f000 fa85 	bl	800bcb8 <prvAddCurrentTaskToDelayedList>
	}
 800b7ae:	bf00      	nop
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	200080b4 	.word	0x200080b4

0800b7bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b086      	sub	sp, #24
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	68db      	ldr	r3, [r3, #12]
 800b7ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10c      	bne.n	800b7ec <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d6:	b672      	cpsid	i
 800b7d8:	f383 8811 	msr	BASEPRI, r3
 800b7dc:	f3bf 8f6f 	isb	sy
 800b7e0:	f3bf 8f4f 	dsb	sy
 800b7e4:	b662      	cpsie	i
 800b7e6:	60fb      	str	r3, [r7, #12]
}
 800b7e8:	bf00      	nop
 800b7ea:	e7fe      	b.n	800b7ea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	3318      	adds	r3, #24
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fe fe37 	bl	800a464 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7f6:	4b1e      	ldr	r3, [pc, #120]	; (800b870 <xTaskRemoveFromEventList+0xb4>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d11d      	bne.n	800b83a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	3304      	adds	r3, #4
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe fe2e 	bl	800a464 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b80c:	4b19      	ldr	r3, [pc, #100]	; (800b874 <xTaskRemoveFromEventList+0xb8>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	429a      	cmp	r2, r3
 800b812:	d903      	bls.n	800b81c <xTaskRemoveFromEventList+0x60>
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b818:	4a16      	ldr	r2, [pc, #88]	; (800b874 <xTaskRemoveFromEventList+0xb8>)
 800b81a:	6013      	str	r3, [r2, #0]
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b820:	4613      	mov	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	4a13      	ldr	r2, [pc, #76]	; (800b878 <xTaskRemoveFromEventList+0xbc>)
 800b82a:	441a      	add	r2, r3
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	3304      	adds	r3, #4
 800b830:	4619      	mov	r1, r3
 800b832:	4610      	mov	r0, r2
 800b834:	f7fe fdb9 	bl	800a3aa <vListInsertEnd>
 800b838:	e005      	b.n	800b846 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	3318      	adds	r3, #24
 800b83e:	4619      	mov	r1, r3
 800b840:	480e      	ldr	r0, [pc, #56]	; (800b87c <xTaskRemoveFromEventList+0xc0>)
 800b842:	f7fe fdb2 	bl	800a3aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84a:	4b0d      	ldr	r3, [pc, #52]	; (800b880 <xTaskRemoveFromEventList+0xc4>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b850:	429a      	cmp	r2, r3
 800b852:	d905      	bls.n	800b860 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b854:	2301      	movs	r3, #1
 800b856:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b858:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <xTaskRemoveFromEventList+0xc8>)
 800b85a:	2201      	movs	r2, #1
 800b85c:	601a      	str	r2, [r3, #0]
 800b85e:	e001      	b.n	800b864 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800b860:	2300      	movs	r3, #0
 800b862:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b864:	697b      	ldr	r3, [r7, #20]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	200085b0 	.word	0x200085b0
 800b874:	20008590 	.word	0x20008590
 800b878:	200080b8 	.word	0x200080b8
 800b87c:	20008548 	.word	0x20008548
 800b880:	200080b4 	.word	0x200080b4
 800b884:	2000859c 	.word	0x2000859c

0800b888 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b084      	sub	sp, #16
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d10c      	bne.n	800b8b0 <vTaskSetTimeOutState+0x28>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	b672      	cpsid	i
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	b662      	cpsie	i
 800b8aa:	60fb      	str	r3, [r7, #12]
}
 800b8ac:	bf00      	nop
 800b8ae:	e7fe      	b.n	800b8ae <vTaskSetTimeOutState+0x26>
	taskENTER_CRITICAL();
 800b8b0:	f000 febc 	bl	800c62c <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8b4:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <vTaskSetTimeOutState+0x48>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b8bc:	4b05      	ldr	r3, [pc, #20]	; (800b8d4 <vTaskSetTimeOutState+0x4c>)
 800b8be:	681a      	ldr	r2, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b8c4:	f000 fee6 	bl	800c694 <vPortExitCritical>
}
 800b8c8:	bf00      	nop
 800b8ca:	3710      	adds	r7, #16
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	200085a0 	.word	0x200085a0
 800b8d4:	2000858c 	.word	0x2000858c

0800b8d8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b083      	sub	sp, #12
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b8e0:	4b06      	ldr	r3, [pc, #24]	; (800b8fc <vTaskInternalSetTimeOutState+0x24>)
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b8e8:	4b05      	ldr	r3, [pc, #20]	; (800b900 <vTaskInternalSetTimeOutState+0x28>)
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	605a      	str	r2, [r3, #4]
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr
 800b8fc:	200085a0 	.word	0x200085a0
 800b900:	2000858c 	.word	0x2000858c

0800b904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b088      	sub	sp, #32
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d10c      	bne.n	800b92e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800b914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b918:	b672      	cpsid	i
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	b662      	cpsie	i
 800b928:	613b      	str	r3, [r7, #16]
}
 800b92a:	bf00      	nop
 800b92c:	e7fe      	b.n	800b92c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d10c      	bne.n	800b94e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800b934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b938:	b672      	cpsid	i
 800b93a:	f383 8811 	msr	BASEPRI, r3
 800b93e:	f3bf 8f6f 	isb	sy
 800b942:	f3bf 8f4f 	dsb	sy
 800b946:	b662      	cpsie	i
 800b948:	60fb      	str	r3, [r7, #12]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800b94e:	f000 fe6d 	bl	800c62c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b952:	4b1d      	ldr	r3, [pc, #116]	; (800b9c8 <xTaskCheckForTimeOut+0xc4>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	69ba      	ldr	r2, [r7, #24]
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b96a:	d102      	bne.n	800b972 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b96c:	2300      	movs	r3, #0
 800b96e:	61fb      	str	r3, [r7, #28]
 800b970:	e023      	b.n	800b9ba <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681a      	ldr	r2, [r3, #0]
 800b976:	4b15      	ldr	r3, [pc, #84]	; (800b9cc <xTaskCheckForTimeOut+0xc8>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	429a      	cmp	r2, r3
 800b97c:	d007      	beq.n	800b98e <xTaskCheckForTimeOut+0x8a>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	429a      	cmp	r2, r3
 800b986:	d302      	bcc.n	800b98e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b988:	2301      	movs	r3, #1
 800b98a:	61fb      	str	r3, [r7, #28]
 800b98c:	e015      	b.n	800b9ba <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	697a      	ldr	r2, [r7, #20]
 800b994:	429a      	cmp	r2, r3
 800b996:	d20b      	bcs.n	800b9b0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	1ad2      	subs	r2, r2, r3
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f7ff ff97 	bl	800b8d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	61fb      	str	r3, [r7, #28]
 800b9ae:	e004      	b.n	800b9ba <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9ba:	f000 fe6b 	bl	800c694 <vPortExitCritical>

	return xReturn;
 800b9be:	69fb      	ldr	r3, [r7, #28]
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3720      	adds	r7, #32
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	2000858c 	.word	0x2000858c
 800b9cc:	200085a0 	.word	0x200085a0

0800b9d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9d4:	4b03      	ldr	r3, [pc, #12]	; (800b9e4 <vTaskMissedYield+0x14>)
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	601a      	str	r2, [r3, #0]
}
 800b9da:	bf00      	nop
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	2000859c 	.word	0x2000859c

0800b9e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b082      	sub	sp, #8
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b9f0:	f000 f852 	bl	800ba98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b9f4:	4b06      	ldr	r3, [pc, #24]	; (800ba10 <prvIdleTask+0x28>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d9f9      	bls.n	800b9f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b9fc:	4b05      	ldr	r3, [pc, #20]	; (800ba14 <prvIdleTask+0x2c>)
 800b9fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba02:	601a      	str	r2, [r3, #0]
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba0c:	e7f0      	b.n	800b9f0 <prvIdleTask+0x8>
 800ba0e:	bf00      	nop
 800ba10:	200080b8 	.word	0x200080b8
 800ba14:	e000ed04 	.word	0xe000ed04

0800ba18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba1e:	2300      	movs	r3, #0
 800ba20:	607b      	str	r3, [r7, #4]
 800ba22:	e00c      	b.n	800ba3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	4613      	mov	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4413      	add	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4a12      	ldr	r2, [pc, #72]	; (800ba78 <prvInitialiseTaskLists+0x60>)
 800ba30:	4413      	add	r3, r2
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7fe fc8c 	bl	800a350 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	607b      	str	r3, [r7, #4]
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b37      	cmp	r3, #55	; 0x37
 800ba42:	d9ef      	bls.n	800ba24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba44:	480d      	ldr	r0, [pc, #52]	; (800ba7c <prvInitialiseTaskLists+0x64>)
 800ba46:	f7fe fc83 	bl	800a350 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba4a:	480d      	ldr	r0, [pc, #52]	; (800ba80 <prvInitialiseTaskLists+0x68>)
 800ba4c:	f7fe fc80 	bl	800a350 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba50:	480c      	ldr	r0, [pc, #48]	; (800ba84 <prvInitialiseTaskLists+0x6c>)
 800ba52:	f7fe fc7d 	bl	800a350 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba56:	480c      	ldr	r0, [pc, #48]	; (800ba88 <prvInitialiseTaskLists+0x70>)
 800ba58:	f7fe fc7a 	bl	800a350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba5c:	480b      	ldr	r0, [pc, #44]	; (800ba8c <prvInitialiseTaskLists+0x74>)
 800ba5e:	f7fe fc77 	bl	800a350 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba62:	4b0b      	ldr	r3, [pc, #44]	; (800ba90 <prvInitialiseTaskLists+0x78>)
 800ba64:	4a05      	ldr	r2, [pc, #20]	; (800ba7c <prvInitialiseTaskLists+0x64>)
 800ba66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba68:	4b0a      	ldr	r3, [pc, #40]	; (800ba94 <prvInitialiseTaskLists+0x7c>)
 800ba6a:	4a05      	ldr	r2, [pc, #20]	; (800ba80 <prvInitialiseTaskLists+0x68>)
 800ba6c:	601a      	str	r2, [r3, #0]
}
 800ba6e:	bf00      	nop
 800ba70:	3708      	adds	r7, #8
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop
 800ba78:	200080b8 	.word	0x200080b8
 800ba7c:	20008518 	.word	0x20008518
 800ba80:	2000852c 	.word	0x2000852c
 800ba84:	20008548 	.word	0x20008548
 800ba88:	2000855c 	.word	0x2000855c
 800ba8c:	20008574 	.word	0x20008574
 800ba90:	20008540 	.word	0x20008540
 800ba94:	20008544 	.word	0x20008544

0800ba98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba9e:	e019      	b.n	800bad4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800baa0:	f000 fdc4 	bl	800c62c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baa4:	4b10      	ldr	r3, [pc, #64]	; (800bae8 <prvCheckTasksWaitingTermination+0x50>)
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	68db      	ldr	r3, [r3, #12]
 800baaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	3304      	adds	r3, #4
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7fe fcd7 	bl	800a464 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bab6:	4b0d      	ldr	r3, [pc, #52]	; (800baec <prvCheckTasksWaitingTermination+0x54>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3b01      	subs	r3, #1
 800babc:	4a0b      	ldr	r2, [pc, #44]	; (800baec <prvCheckTasksWaitingTermination+0x54>)
 800babe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bac0:	4b0b      	ldr	r3, [pc, #44]	; (800baf0 <prvCheckTasksWaitingTermination+0x58>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	4a0a      	ldr	r2, [pc, #40]	; (800baf0 <prvCheckTasksWaitingTermination+0x58>)
 800bac8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baca:	f000 fde3 	bl	800c694 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f810 	bl	800baf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bad4:	4b06      	ldr	r3, [pc, #24]	; (800baf0 <prvCheckTasksWaitingTermination+0x58>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1e1      	bne.n	800baa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800badc:	bf00      	nop
 800bade:	bf00      	nop
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	2000855c 	.word	0x2000855c
 800baec:	20008588 	.word	0x20008588
 800baf0:	20008570 	.word	0x20008570

0800baf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d108      	bne.n	800bb18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f000 ff84 	bl	800ca18 <vPortFree>
				vPortFree( pxTCB );
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 ff81 	bl	800ca18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb16:	e01a      	b.n	800bb4e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d103      	bne.n	800bb2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 ff78 	bl	800ca18 <vPortFree>
	}
 800bb28:	e011      	b.n	800bb4e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d00c      	beq.n	800bb4e <prvDeleteTCB+0x5a>
	__asm volatile
 800bb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb38:	b672      	cpsid	i
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	b662      	cpsie	i
 800bb48:	60fb      	str	r3, [r7, #12]
}
 800bb4a:	bf00      	nop
 800bb4c:	e7fe      	b.n	800bb4c <prvDeleteTCB+0x58>
	}
 800bb4e:	bf00      	nop
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
	...

0800bb58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb5e:	4b0c      	ldr	r3, [pc, #48]	; (800bb90 <prvResetNextTaskUnblockTime+0x38>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d104      	bne.n	800bb72 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb68:	4b0a      	ldr	r3, [pc, #40]	; (800bb94 <prvResetNextTaskUnblockTime+0x3c>)
 800bb6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb6e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb70:	e008      	b.n	800bb84 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb72:	4b07      	ldr	r3, [pc, #28]	; (800bb90 <prvResetNextTaskUnblockTime+0x38>)
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	4a04      	ldr	r2, [pc, #16]	; (800bb94 <prvResetNextTaskUnblockTime+0x3c>)
 800bb82:	6013      	str	r3, [r2, #0]
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr
 800bb90:	20008540 	.word	0x20008540
 800bb94:	200085a8 	.word	0x200085a8

0800bb98 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bb9e:	4b0b      	ldr	r3, [pc, #44]	; (800bbcc <xTaskGetSchedulerState+0x34>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d102      	bne.n	800bbac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bba6:	2301      	movs	r3, #1
 800bba8:	607b      	str	r3, [r7, #4]
 800bbaa:	e008      	b.n	800bbbe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbac:	4b08      	ldr	r3, [pc, #32]	; (800bbd0 <xTaskGetSchedulerState+0x38>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d102      	bne.n	800bbba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	607b      	str	r3, [r7, #4]
 800bbb8:	e001      	b.n	800bbbe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbbe:	687b      	ldr	r3, [r7, #4]
	}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr
 800bbcc:	20008594 	.word	0x20008594
 800bbd0:	200085b0 	.word	0x200085b0

0800bbd4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d05a      	beq.n	800bca0 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bbea:	4b30      	ldr	r3, [pc, #192]	; (800bcac <xTaskPriorityDisinherit+0xd8>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	d00c      	beq.n	800bc0e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	b672      	cpsid	i
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	b662      	cpsie	i
 800bc08:	60fb      	str	r3, [r7, #12]
}
 800bc0a:	bf00      	nop
 800bc0c:	e7fe      	b.n	800bc0c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d10c      	bne.n	800bc30 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc1a:	b672      	cpsid	i
 800bc1c:	f383 8811 	msr	BASEPRI, r3
 800bc20:	f3bf 8f6f 	isb	sy
 800bc24:	f3bf 8f4f 	dsb	sy
 800bc28:	b662      	cpsie	i
 800bc2a:	60bb      	str	r3, [r7, #8]
}
 800bc2c:	bf00      	nop
 800bc2e:	e7fe      	b.n	800bc2e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc34:	1e5a      	subs	r2, r3, #1
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d02c      	beq.n	800bca0 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d128      	bne.n	800bca0 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe fc06 	bl	800a464 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc70:	4b0f      	ldr	r3, [pc, #60]	; (800bcb0 <xTaskPriorityDisinherit+0xdc>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d903      	bls.n	800bc80 <xTaskPriorityDisinherit+0xac>
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc7c:	4a0c      	ldr	r2, [pc, #48]	; (800bcb0 <xTaskPriorityDisinherit+0xdc>)
 800bc7e:	6013      	str	r3, [r2, #0]
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc84:	4613      	mov	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	4a09      	ldr	r2, [pc, #36]	; (800bcb4 <xTaskPriorityDisinherit+0xe0>)
 800bc8e:	441a      	add	r2, r3
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	3304      	adds	r3, #4
 800bc94:	4619      	mov	r1, r3
 800bc96:	4610      	mov	r0, r2
 800bc98:	f7fe fb87 	bl	800a3aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bca0:	697b      	ldr	r3, [r7, #20]
	}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	200080b4 	.word	0x200080b4
 800bcb0:	20008590 	.word	0x20008590
 800bcb4:	200080b8 	.word	0x200080b8

0800bcb8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
 800bcc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcc2:	4b21      	ldr	r3, [pc, #132]	; (800bd48 <prvAddCurrentTaskToDelayedList+0x90>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcc8:	4b20      	ldr	r3, [pc, #128]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	3304      	adds	r3, #4
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7fe fbc8 	bl	800a464 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcda:	d10a      	bne.n	800bcf2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d007      	beq.n	800bcf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bce2:	4b1a      	ldr	r3, [pc, #104]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	3304      	adds	r3, #4
 800bce8:	4619      	mov	r1, r3
 800bcea:	4819      	ldr	r0, [pc, #100]	; (800bd50 <prvAddCurrentTaskToDelayedList+0x98>)
 800bcec:	f7fe fb5d 	bl	800a3aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcf0:	e026      	b.n	800bd40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcf2:	68fa      	ldr	r2, [r7, #12]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4413      	add	r3, r2
 800bcf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcfa:	4b14      	ldr	r3, [pc, #80]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd02:	68ba      	ldr	r2, [r7, #8]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d209      	bcs.n	800bd1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd0a:	4b12      	ldr	r3, [pc, #72]	; (800bd54 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd0c:	681a      	ldr	r2, [r3, #0]
 800bd0e:	4b0f      	ldr	r3, [pc, #60]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	3304      	adds	r3, #4
 800bd14:	4619      	mov	r1, r3
 800bd16:	4610      	mov	r0, r2
 800bd18:	f7fe fb6b 	bl	800a3f2 <vListInsert>
}
 800bd1c:	e010      	b.n	800bd40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd1e:	4b0e      	ldr	r3, [pc, #56]	; (800bd58 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd20:	681a      	ldr	r2, [r3, #0]
 800bd22:	4b0a      	ldr	r3, [pc, #40]	; (800bd4c <prvAddCurrentTaskToDelayedList+0x94>)
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	3304      	adds	r3, #4
 800bd28:	4619      	mov	r1, r3
 800bd2a:	4610      	mov	r0, r2
 800bd2c:	f7fe fb61 	bl	800a3f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd30:	4b0a      	ldr	r3, [pc, #40]	; (800bd5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d202      	bcs.n	800bd40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd3a:	4a08      	ldr	r2, [pc, #32]	; (800bd5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	6013      	str	r3, [r2, #0]
}
 800bd40:	bf00      	nop
 800bd42:	3710      	adds	r7, #16
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bd80      	pop	{r7, pc}
 800bd48:	2000858c 	.word	0x2000858c
 800bd4c:	200080b4 	.word	0x200080b4
 800bd50:	20008574 	.word	0x20008574
 800bd54:	20008544 	.word	0x20008544
 800bd58:	20008540 	.word	0x20008540
 800bd5c:	200085a8 	.word	0x200085a8

0800bd60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b08a      	sub	sp, #40	; 0x28
 800bd64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd66:	2300      	movs	r3, #0
 800bd68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd6a:	f000 fb15 	bl	800c398 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd6e:	4b1d      	ldr	r3, [pc, #116]	; (800bde4 <xTimerCreateTimerTask+0x84>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d021      	beq.n	800bdba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd7e:	1d3a      	adds	r2, r7, #4
 800bd80:	f107 0108 	add.w	r1, r7, #8
 800bd84:	f107 030c 	add.w	r3, r7, #12
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7fe fac7 	bl	800a31c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd8e:	6879      	ldr	r1, [r7, #4]
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	9202      	str	r2, [sp, #8]
 800bd96:	9301      	str	r3, [sp, #4]
 800bd98:	2302      	movs	r3, #2
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	460a      	mov	r2, r1
 800bda0:	4911      	ldr	r1, [pc, #68]	; (800bde8 <xTimerCreateTimerTask+0x88>)
 800bda2:	4812      	ldr	r0, [pc, #72]	; (800bdec <xTimerCreateTimerTask+0x8c>)
 800bda4:	f7ff f892 	bl	800aecc <xTaskCreateStatic>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4a11      	ldr	r2, [pc, #68]	; (800bdf0 <xTimerCreateTimerTask+0x90>)
 800bdac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdae:	4b10      	ldr	r3, [pc, #64]	; (800bdf0 <xTimerCreateTimerTask+0x90>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdb6:	2301      	movs	r3, #1
 800bdb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10c      	bne.n	800bdda <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc4:	b672      	cpsid	i
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	b662      	cpsie	i
 800bdd4:	613b      	str	r3, [r7, #16]
}
 800bdd6:	bf00      	nop
 800bdd8:	e7fe      	b.n	800bdd8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800bdda:	697b      	ldr	r3, [r7, #20]
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	200085e4 	.word	0x200085e4
 800bde8:	0801c800 	.word	0x0801c800
 800bdec:	0800bf31 	.word	0x0800bf31
 800bdf0:	200085e8 	.word	0x200085e8

0800bdf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b08a      	sub	sp, #40	; 0x28
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	60f8      	str	r0, [r7, #12]
 800bdfc:	60b9      	str	r1, [r7, #8]
 800bdfe:	607a      	str	r2, [r7, #4]
 800be00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800be02:	2300      	movs	r3, #0
 800be04:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d10c      	bne.n	800be26 <xTimerGenericCommand+0x32>
	__asm volatile
 800be0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be10:	b672      	cpsid	i
 800be12:	f383 8811 	msr	BASEPRI, r3
 800be16:	f3bf 8f6f 	isb	sy
 800be1a:	f3bf 8f4f 	dsb	sy
 800be1e:	b662      	cpsie	i
 800be20:	623b      	str	r3, [r7, #32]
}
 800be22:	bf00      	nop
 800be24:	e7fe      	b.n	800be24 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be26:	4b1a      	ldr	r3, [pc, #104]	; (800be90 <xTimerGenericCommand+0x9c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d02a      	beq.n	800be84 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	2b05      	cmp	r3, #5
 800be3e:	dc18      	bgt.n	800be72 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be40:	f7ff feaa 	bl	800bb98 <xTaskGetSchedulerState>
 800be44:	4603      	mov	r3, r0
 800be46:	2b02      	cmp	r3, #2
 800be48:	d109      	bne.n	800be5e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be4a:	4b11      	ldr	r3, [pc, #68]	; (800be90 <xTimerGenericCommand+0x9c>)
 800be4c:	6818      	ldr	r0, [r3, #0]
 800be4e:	f107 0110 	add.w	r1, r7, #16
 800be52:	2300      	movs	r3, #0
 800be54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be56:	f7fe fc3f 	bl	800a6d8 <xQueueGenericSend>
 800be5a:	6278      	str	r0, [r7, #36]	; 0x24
 800be5c:	e012      	b.n	800be84 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be5e:	4b0c      	ldr	r3, [pc, #48]	; (800be90 <xTimerGenericCommand+0x9c>)
 800be60:	6818      	ldr	r0, [r3, #0]
 800be62:	f107 0110 	add.w	r1, r7, #16
 800be66:	2300      	movs	r3, #0
 800be68:	2200      	movs	r2, #0
 800be6a:	f7fe fc35 	bl	800a6d8 <xQueueGenericSend>
 800be6e:	6278      	str	r0, [r7, #36]	; 0x24
 800be70:	e008      	b.n	800be84 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be72:	4b07      	ldr	r3, [pc, #28]	; (800be90 <xTimerGenericCommand+0x9c>)
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	f107 0110 	add.w	r1, r7, #16
 800be7a:	2300      	movs	r3, #0
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	f7fe fd31 	bl	800a8e4 <xQueueGenericSendFromISR>
 800be82:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be86:	4618      	mov	r0, r3
 800be88:	3728      	adds	r7, #40	; 0x28
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	200085e4 	.word	0x200085e4

0800be94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af02      	add	r7, sp, #8
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be9e:	4b23      	ldr	r3, [pc, #140]	; (800bf2c <prvProcessExpiredTimer+0x98>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	68db      	ldr	r3, [r3, #12]
 800bea6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bea8:	697b      	ldr	r3, [r7, #20]
 800beaa:	3304      	adds	r3, #4
 800beac:	4618      	mov	r0, r3
 800beae:	f7fe fad9 	bl	800a464 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beb8:	f003 0304 	and.w	r3, r3, #4
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d024      	beq.n	800bf0a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	699a      	ldr	r2, [r3, #24]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	18d1      	adds	r1, r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	683a      	ldr	r2, [r7, #0]
 800becc:	6978      	ldr	r0, [r7, #20]
 800bece:	f000 f8d3 	bl	800c078 <prvInsertTimerInActiveList>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d021      	beq.n	800bf1c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bed8:	2300      	movs	r3, #0
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	2300      	movs	r3, #0
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	2100      	movs	r1, #0
 800bee2:	6978      	ldr	r0, [r7, #20]
 800bee4:	f7ff ff86 	bl	800bdf4 <xTimerGenericCommand>
 800bee8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d115      	bne.n	800bf1c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	b672      	cpsid	i
 800bef6:	f383 8811 	msr	BASEPRI, r3
 800befa:	f3bf 8f6f 	isb	sy
 800befe:	f3bf 8f4f 	dsb	sy
 800bf02:	b662      	cpsie	i
 800bf04:	60fb      	str	r3, [r7, #12]
}
 800bf06:	bf00      	nop
 800bf08:	e7fe      	b.n	800bf08 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf10:	f023 0301 	bic.w	r3, r3, #1
 800bf14:	b2da      	uxtb	r2, r3
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	6a1b      	ldr	r3, [r3, #32]
 800bf20:	6978      	ldr	r0, [r7, #20]
 800bf22:	4798      	blx	r3
}
 800bf24:	bf00      	nop
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	200085dc 	.word	0x200085dc

0800bf30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b084      	sub	sp, #16
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf38:	f107 0308 	add.w	r3, r7, #8
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f000 f857 	bl	800bff0 <prvGetNextExpireTime>
 800bf42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	4619      	mov	r1, r3
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 f803 	bl	800bf54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf4e:	f000 f8d5 	bl	800c0fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf52:	e7f1      	b.n	800bf38 <prvTimerTask+0x8>

0800bf54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b084      	sub	sp, #16
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
 800bf5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf5e:	f7ff f9ff 	bl	800b360 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf62:	f107 0308 	add.w	r3, r7, #8
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 f866 	bl	800c038 <prvSampleTimeNow>
 800bf6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d130      	bne.n	800bfd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10a      	bne.n	800bf90 <prvProcessTimerOrBlockTask+0x3c>
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d806      	bhi.n	800bf90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf82:	f7ff f9fb 	bl	800b37c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf86:	68f9      	ldr	r1, [r7, #12]
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff ff83 	bl	800be94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf8e:	e024      	b.n	800bfda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d008      	beq.n	800bfa8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf96:	4b13      	ldr	r3, [pc, #76]	; (800bfe4 <prvProcessTimerOrBlockTask+0x90>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <prvProcessTimerOrBlockTask+0x50>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e000      	b.n	800bfa6 <prvProcessTimerOrBlockTask+0x52>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bfa8:	4b0f      	ldr	r3, [pc, #60]	; (800bfe8 <prvProcessTimerOrBlockTask+0x94>)
 800bfaa:	6818      	ldr	r0, [r3, #0]
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	1ad3      	subs	r3, r2, r3
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	f7fe ff55 	bl	800ae64 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bfba:	f7ff f9df 	bl	800b37c <xTaskResumeAll>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d10a      	bne.n	800bfda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bfc4:	4b09      	ldr	r3, [pc, #36]	; (800bfec <prvProcessTimerOrBlockTask+0x98>)
 800bfc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfca:	601a      	str	r2, [r3, #0]
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	f3bf 8f6f 	isb	sy
}
 800bfd4:	e001      	b.n	800bfda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bfd6:	f7ff f9d1 	bl	800b37c <xTaskResumeAll>
}
 800bfda:	bf00      	nop
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	200085e0 	.word	0x200085e0
 800bfe8:	200085e4 	.word	0x200085e4
 800bfec:	e000ed04 	.word	0xe000ed04

0800bff0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bff8:	4b0e      	ldr	r3, [pc, #56]	; (800c034 <prvGetNextExpireTime+0x44>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d101      	bne.n	800c006 <prvGetNextExpireTime+0x16>
 800c002:	2201      	movs	r2, #1
 800c004:	e000      	b.n	800c008 <prvGetNextExpireTime+0x18>
 800c006:	2200      	movs	r2, #0
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d105      	bne.n	800c020 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c014:	4b07      	ldr	r3, [pc, #28]	; (800c034 <prvGetNextExpireTime+0x44>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	60fb      	str	r3, [r7, #12]
 800c01e:	e001      	b.n	800c024 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c020:	2300      	movs	r3, #0
 800c022:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c024:	68fb      	ldr	r3, [r7, #12]
}
 800c026:	4618      	mov	r0, r3
 800c028:	3714      	adds	r7, #20
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr
 800c032:	bf00      	nop
 800c034:	200085dc 	.word	0x200085dc

0800c038 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c040:	f7ff fa3c 	bl	800b4bc <xTaskGetTickCount>
 800c044:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c046:	4b0b      	ldr	r3, [pc, #44]	; (800c074 <prvSampleTimeNow+0x3c>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d205      	bcs.n	800c05c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c050:	f000 f93c 	bl	800c2cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	2201      	movs	r2, #1
 800c058:	601a      	str	r2, [r3, #0]
 800c05a:	e002      	b.n	800c062 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c062:	4a04      	ldr	r2, [pc, #16]	; (800c074 <prvSampleTimeNow+0x3c>)
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c068:	68fb      	ldr	r3, [r7, #12]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	200085ec 	.word	0x200085ec

0800c078 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	60f8      	str	r0, [r7, #12]
 800c080:	60b9      	str	r1, [r7, #8]
 800c082:	607a      	str	r2, [r7, #4]
 800c084:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c086:	2300      	movs	r3, #0
 800c088:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d812      	bhi.n	800c0c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	1ad2      	subs	r2, r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d302      	bcc.n	800c0b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	617b      	str	r3, [r7, #20]
 800c0b0:	e01b      	b.n	800c0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c0b2:	4b10      	ldr	r3, [pc, #64]	; (800c0f4 <prvInsertTimerInActiveList+0x7c>)
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	3304      	adds	r3, #4
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	4610      	mov	r0, r2
 800c0be:	f7fe f998 	bl	800a3f2 <vListInsert>
 800c0c2:	e012      	b.n	800c0ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	429a      	cmp	r2, r3
 800c0ca:	d206      	bcs.n	800c0da <prvInsertTimerInActiveList+0x62>
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d302      	bcc.n	800c0da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	617b      	str	r3, [r7, #20]
 800c0d8:	e007      	b.n	800c0ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0da:	4b07      	ldr	r3, [pc, #28]	; (800c0f8 <prvInsertTimerInActiveList+0x80>)
 800c0dc:	681a      	ldr	r2, [r3, #0]
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	f7fe f984 	bl	800a3f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0ea:	697b      	ldr	r3, [r7, #20]
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	200085e0 	.word	0x200085e0
 800c0f8:	200085dc 	.word	0x200085dc

0800c0fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b08e      	sub	sp, #56	; 0x38
 800c100:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c102:	e0d0      	b.n	800c2a6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	da1a      	bge.n	800c140 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c10a:	1d3b      	adds	r3, r7, #4
 800c10c:	3304      	adds	r3, #4
 800c10e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c112:	2b00      	cmp	r3, #0
 800c114:	d10c      	bne.n	800c130 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11a:	b672      	cpsid	i
 800c11c:	f383 8811 	msr	BASEPRI, r3
 800c120:	f3bf 8f6f 	isb	sy
 800c124:	f3bf 8f4f 	dsb	sy
 800c128:	b662      	cpsie	i
 800c12a:	61fb      	str	r3, [r7, #28]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c136:	6850      	ldr	r0, [r2, #4]
 800c138:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c13a:	6892      	ldr	r2, [r2, #8]
 800c13c:	4611      	mov	r1, r2
 800c13e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	f2c0 80af 	blt.w	800c2a6 <prvProcessReceivedCommands+0x1aa>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c14e:	695b      	ldr	r3, [r3, #20]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d004      	beq.n	800c15e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c156:	3304      	adds	r3, #4
 800c158:	4618      	mov	r0, r3
 800c15a:	f7fe f983 	bl	800a464 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c15e:	463b      	mov	r3, r7
 800c160:	4618      	mov	r0, r3
 800c162:	f7ff ff69 	bl	800c038 <prvSampleTimeNow>
 800c166:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2b09      	cmp	r3, #9
 800c16c:	f200 809a 	bhi.w	800c2a4 <prvProcessReceivedCommands+0x1a8>
 800c170:	a201      	add	r2, pc, #4	; (adr r2, 800c178 <prvProcessReceivedCommands+0x7c>)
 800c172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c176:	bf00      	nop
 800c178:	0800c1a1 	.word	0x0800c1a1
 800c17c:	0800c1a1 	.word	0x0800c1a1
 800c180:	0800c1a1 	.word	0x0800c1a1
 800c184:	0800c219 	.word	0x0800c219
 800c188:	0800c22d 	.word	0x0800c22d
 800c18c:	0800c27b 	.word	0x0800c27b
 800c190:	0800c1a1 	.word	0x0800c1a1
 800c194:	0800c1a1 	.word	0x0800c1a1
 800c198:	0800c219 	.word	0x0800c219
 800c19c:	0800c22d 	.word	0x0800c22d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1a6:	f043 0301 	orr.w	r3, r3, #1
 800c1aa:	b2da      	uxtb	r2, r3
 800c1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b6:	699b      	ldr	r3, [r3, #24]
 800c1b8:	18d1      	adds	r1, r2, r3
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1c0:	f7ff ff5a 	bl	800c078 <prvInsertTimerInActiveList>
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d06d      	beq.n	800c2a6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1d8:	f003 0304 	and.w	r3, r3, #4
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d062      	beq.n	800c2a6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e4:	699b      	ldr	r3, [r3, #24]
 800c1e6:	441a      	add	r2, r3
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	9300      	str	r3, [sp, #0]
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1f2:	f7ff fdff 	bl	800bdf4 <xTimerGenericCommand>
 800c1f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d153      	bne.n	800c2a6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	b672      	cpsid	i
 800c204:	f383 8811 	msr	BASEPRI, r3
 800c208:	f3bf 8f6f 	isb	sy
 800c20c:	f3bf 8f4f 	dsb	sy
 800c210:	b662      	cpsie	i
 800c212:	61bb      	str	r3, [r7, #24]
}
 800c214:	bf00      	nop
 800c216:	e7fe      	b.n	800c216 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c21e:	f023 0301 	bic.w	r3, r3, #1
 800c222:	b2da      	uxtb	r2, r3
 800c224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c22a:	e03c      	b.n	800c2a6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c232:	f043 0301 	orr.w	r3, r3, #1
 800c236:	b2da      	uxtb	r2, r3
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c23e:	68ba      	ldr	r2, [r7, #8]
 800c240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c242:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d10c      	bne.n	800c266 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	b672      	cpsid	i
 800c252:	f383 8811 	msr	BASEPRI, r3
 800c256:	f3bf 8f6f 	isb	sy
 800c25a:	f3bf 8f4f 	dsb	sy
 800c25e:	b662      	cpsie	i
 800c260:	617b      	str	r3, [r7, #20]
}
 800c262:	bf00      	nop
 800c264:	e7fe      	b.n	800c264 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c268:	699a      	ldr	r2, [r3, #24]
 800c26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c26c:	18d1      	adds	r1, r2, r3
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c274:	f7ff ff00 	bl	800c078 <prvInsertTimerInActiveList>
					break;
 800c278:	e015      	b.n	800c2a6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c280:	f003 0302 	and.w	r3, r3, #2
 800c284:	2b00      	cmp	r3, #0
 800c286:	d103      	bne.n	800c290 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c28a:	f000 fbc5 	bl	800ca18 <vPortFree>
 800c28e:	e00a      	b.n	800c2a6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c292:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c296:	f023 0301 	bic.w	r3, r3, #1
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c2a2:	e000      	b.n	800c2a6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
 800c2a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c2a6:	4b08      	ldr	r3, [pc, #32]	; (800c2c8 <prvProcessReceivedCommands+0x1cc>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	1d39      	adds	r1, r7, #4
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f7fe fbb8 	bl	800aa24 <xQueueReceive>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	f47f af24 	bne.w	800c104 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c2bc:	bf00      	nop
 800c2be:	bf00      	nop
 800c2c0:	3730      	adds	r7, #48	; 0x30
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	200085e4 	.word	0x200085e4

0800c2cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b088      	sub	sp, #32
 800c2d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2d2:	e04a      	b.n	800c36a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2d4:	4b2e      	ldr	r3, [pc, #184]	; (800c390 <prvSwitchTimerLists+0xc4>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2de:	4b2c      	ldr	r3, [pc, #176]	; (800c390 <prvSwitchTimerLists+0xc4>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f7fe f8b9 	bl	800a464 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	6a1b      	ldr	r3, [r3, #32]
 800c2f6:	68f8      	ldr	r0, [r7, #12]
 800c2f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c300:	f003 0304 	and.w	r3, r3, #4
 800c304:	2b00      	cmp	r3, #0
 800c306:	d030      	beq.n	800c36a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	699b      	ldr	r3, [r3, #24]
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	4413      	add	r3, r2
 800c310:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c312:	68ba      	ldr	r2, [r7, #8]
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	429a      	cmp	r2, r3
 800c318:	d90e      	bls.n	800c338 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	68fa      	ldr	r2, [r7, #12]
 800c324:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c326:	4b1a      	ldr	r3, [pc, #104]	; (800c390 <prvSwitchTimerLists+0xc4>)
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3304      	adds	r3, #4
 800c32e:	4619      	mov	r1, r3
 800c330:	4610      	mov	r0, r2
 800c332:	f7fe f85e 	bl	800a3f2 <vListInsert>
 800c336:	e018      	b.n	800c36a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c338:	2300      	movs	r3, #0
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	2300      	movs	r3, #0
 800c33e:	693a      	ldr	r2, [r7, #16]
 800c340:	2100      	movs	r1, #0
 800c342:	68f8      	ldr	r0, [r7, #12]
 800c344:	f7ff fd56 	bl	800bdf4 <xTimerGenericCommand>
 800c348:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d10c      	bne.n	800c36a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	b672      	cpsid	i
 800c356:	f383 8811 	msr	BASEPRI, r3
 800c35a:	f3bf 8f6f 	isb	sy
 800c35e:	f3bf 8f4f 	dsb	sy
 800c362:	b662      	cpsie	i
 800c364:	603b      	str	r3, [r7, #0]
}
 800c366:	bf00      	nop
 800c368:	e7fe      	b.n	800c368 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c36a:	4b09      	ldr	r3, [pc, #36]	; (800c390 <prvSwitchTimerLists+0xc4>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d1af      	bne.n	800c2d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c374:	4b06      	ldr	r3, [pc, #24]	; (800c390 <prvSwitchTimerLists+0xc4>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c37a:	4b06      	ldr	r3, [pc, #24]	; (800c394 <prvSwitchTimerLists+0xc8>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	4a04      	ldr	r2, [pc, #16]	; (800c390 <prvSwitchTimerLists+0xc4>)
 800c380:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c382:	4a04      	ldr	r2, [pc, #16]	; (800c394 <prvSwitchTimerLists+0xc8>)
 800c384:	697b      	ldr	r3, [r7, #20]
 800c386:	6013      	str	r3, [r2, #0]
}
 800c388:	bf00      	nop
 800c38a:	3718      	adds	r7, #24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	200085dc 	.word	0x200085dc
 800c394:	200085e0 	.word	0x200085e0

0800c398 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c39e:	f000 f945 	bl	800c62c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c3a2:	4b15      	ldr	r3, [pc, #84]	; (800c3f8 <prvCheckForValidListAndQueue+0x60>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d120      	bne.n	800c3ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3aa:	4814      	ldr	r0, [pc, #80]	; (800c3fc <prvCheckForValidListAndQueue+0x64>)
 800c3ac:	f7fd ffd0 	bl	800a350 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3b0:	4813      	ldr	r0, [pc, #76]	; (800c400 <prvCheckForValidListAndQueue+0x68>)
 800c3b2:	f7fd ffcd 	bl	800a350 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c3b6:	4b13      	ldr	r3, [pc, #76]	; (800c404 <prvCheckForValidListAndQueue+0x6c>)
 800c3b8:	4a10      	ldr	r2, [pc, #64]	; (800c3fc <prvCheckForValidListAndQueue+0x64>)
 800c3ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c3bc:	4b12      	ldr	r3, [pc, #72]	; (800c408 <prvCheckForValidListAndQueue+0x70>)
 800c3be:	4a10      	ldr	r2, [pc, #64]	; (800c400 <prvCheckForValidListAndQueue+0x68>)
 800c3c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	9300      	str	r3, [sp, #0]
 800c3c6:	4b11      	ldr	r3, [pc, #68]	; (800c40c <prvCheckForValidListAndQueue+0x74>)
 800c3c8:	4a11      	ldr	r2, [pc, #68]	; (800c410 <prvCheckForValidListAndQueue+0x78>)
 800c3ca:	2110      	movs	r1, #16
 800c3cc:	200a      	movs	r0, #10
 800c3ce:	f7fe f8dd 	bl	800a58c <xQueueGenericCreateStatic>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	4a08      	ldr	r2, [pc, #32]	; (800c3f8 <prvCheckForValidListAndQueue+0x60>)
 800c3d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c3d8:	4b07      	ldr	r3, [pc, #28]	; (800c3f8 <prvCheckForValidListAndQueue+0x60>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d005      	beq.n	800c3ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c3e0:	4b05      	ldr	r3, [pc, #20]	; (800c3f8 <prvCheckForValidListAndQueue+0x60>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	490b      	ldr	r1, [pc, #44]	; (800c414 <prvCheckForValidListAndQueue+0x7c>)
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7fe fd12 	bl	800ae10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3ec:	f000 f952 	bl	800c694 <vPortExitCritical>
}
 800c3f0:	bf00      	nop
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	200085e4 	.word	0x200085e4
 800c3fc:	200085b4 	.word	0x200085b4
 800c400:	200085c8 	.word	0x200085c8
 800c404:	200085dc 	.word	0x200085dc
 800c408:	200085e0 	.word	0x200085e0
 800c40c:	20008690 	.word	0x20008690
 800c410:	200085f0 	.word	0x200085f0
 800c414:	0801c808 	.word	0x0801c808

0800c418 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	3b04      	subs	r3, #4
 800c428:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c430:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	3b04      	subs	r3, #4
 800c436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	f023 0201 	bic.w	r2, r3, #1
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	3b04      	subs	r3, #4
 800c446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c448:	4a0c      	ldr	r2, [pc, #48]	; (800c47c <pxPortInitialiseStack+0x64>)
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	3b14      	subs	r3, #20
 800c452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	3b04      	subs	r3, #4
 800c45e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f06f 0202 	mvn.w	r2, #2
 800c466:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	3b20      	subs	r3, #32
 800c46c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c46e:	68fb      	ldr	r3, [r7, #12]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	0800c481 	.word	0x0800c481

0800c480 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c486:	2300      	movs	r3, #0
 800c488:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c48a:	4b14      	ldr	r3, [pc, #80]	; (800c4dc <prvTaskExitError+0x5c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c492:	d00c      	beq.n	800c4ae <prvTaskExitError+0x2e>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	b672      	cpsid	i
 800c49a:	f383 8811 	msr	BASEPRI, r3
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f3bf 8f4f 	dsb	sy
 800c4a6:	b662      	cpsie	i
 800c4a8:	60fb      	str	r3, [r7, #12]
}
 800c4aa:	bf00      	nop
 800c4ac:	e7fe      	b.n	800c4ac <prvTaskExitError+0x2c>
	__asm volatile
 800c4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b2:	b672      	cpsid	i
 800c4b4:	f383 8811 	msr	BASEPRI, r3
 800c4b8:	f3bf 8f6f 	isb	sy
 800c4bc:	f3bf 8f4f 	dsb	sy
 800c4c0:	b662      	cpsie	i
 800c4c2:	60bb      	str	r3, [r7, #8]
}
 800c4c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4c6:	bf00      	nop
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0fc      	beq.n	800c4c8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c4ce:	bf00      	nop
 800c4d0:	bf00      	nop
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr
 800c4dc:	20000018 	.word	0x20000018

0800c4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4e0:	4b07      	ldr	r3, [pc, #28]	; (800c500 <pxCurrentTCBConst2>)
 800c4e2:	6819      	ldr	r1, [r3, #0]
 800c4e4:	6808      	ldr	r0, [r1, #0]
 800c4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	f380 8809 	msr	PSP, r0
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f04f 0000 	mov.w	r0, #0
 800c4f6:	f380 8811 	msr	BASEPRI, r0
 800c4fa:	4770      	bx	lr
 800c4fc:	f3af 8000 	nop.w

0800c500 <pxCurrentTCBConst2>:
 800c500:	200080b4 	.word	0x200080b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop

0800c508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c508:	4808      	ldr	r0, [pc, #32]	; (800c52c <prvPortStartFirstTask+0x24>)
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	6800      	ldr	r0, [r0, #0]
 800c50e:	f380 8808 	msr	MSP, r0
 800c512:	f04f 0000 	mov.w	r0, #0
 800c516:	f380 8814 	msr	CONTROL, r0
 800c51a:	b662      	cpsie	i
 800c51c:	b661      	cpsie	f
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	df00      	svc	0
 800c528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c52a:	bf00      	nop
 800c52c:	e000ed08 	.word	0xe000ed08

0800c530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c536:	4b37      	ldr	r3, [pc, #220]	; (800c614 <xPortStartScheduler+0xe4>)
 800c538:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	22ff      	movs	r2, #255	; 0xff
 800c546:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c558:	b2da      	uxtb	r2, r3
 800c55a:	4b2f      	ldr	r3, [pc, #188]	; (800c618 <xPortStartScheduler+0xe8>)
 800c55c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c55e:	4b2f      	ldr	r3, [pc, #188]	; (800c61c <xPortStartScheduler+0xec>)
 800c560:	2207      	movs	r2, #7
 800c562:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c564:	e009      	b.n	800c57a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c566:	4b2d      	ldr	r3, [pc, #180]	; (800c61c <xPortStartScheduler+0xec>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	3b01      	subs	r3, #1
 800c56c:	4a2b      	ldr	r2, [pc, #172]	; (800c61c <xPortStartScheduler+0xec>)
 800c56e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c570:	78fb      	ldrb	r3, [r7, #3]
 800c572:	b2db      	uxtb	r3, r3
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	b2db      	uxtb	r3, r3
 800c578:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c57a:	78fb      	ldrb	r3, [r7, #3]
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c582:	2b80      	cmp	r3, #128	; 0x80
 800c584:	d0ef      	beq.n	800c566 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c586:	4b25      	ldr	r3, [pc, #148]	; (800c61c <xPortStartScheduler+0xec>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f1c3 0307 	rsb	r3, r3, #7
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d00c      	beq.n	800c5ac <xPortStartScheduler+0x7c>
	__asm volatile
 800c592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c596:	b672      	cpsid	i
 800c598:	f383 8811 	msr	BASEPRI, r3
 800c59c:	f3bf 8f6f 	isb	sy
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	b662      	cpsie	i
 800c5a6:	60bb      	str	r3, [r7, #8]
}
 800c5a8:	bf00      	nop
 800c5aa:	e7fe      	b.n	800c5aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5ac:	4b1b      	ldr	r3, [pc, #108]	; (800c61c <xPortStartScheduler+0xec>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	021b      	lsls	r3, r3, #8
 800c5b2:	4a1a      	ldr	r2, [pc, #104]	; (800c61c <xPortStartScheduler+0xec>)
 800c5b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5b6:	4b19      	ldr	r3, [pc, #100]	; (800c61c <xPortStartScheduler+0xec>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5be:	4a17      	ldr	r2, [pc, #92]	; (800c61c <xPortStartScheduler+0xec>)
 800c5c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	b2da      	uxtb	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c5ca:	4b15      	ldr	r3, [pc, #84]	; (800c620 <xPortStartScheduler+0xf0>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a14      	ldr	r2, [pc, #80]	; (800c620 <xPortStartScheduler+0xf0>)
 800c5d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c5d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c5d6:	4b12      	ldr	r3, [pc, #72]	; (800c620 <xPortStartScheduler+0xf0>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	4a11      	ldr	r2, [pc, #68]	; (800c620 <xPortStartScheduler+0xf0>)
 800c5dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c5e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5e2:	f000 f8dd 	bl	800c7a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5e6:	4b0f      	ldr	r3, [pc, #60]	; (800c624 <xPortStartScheduler+0xf4>)
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5ec:	f000 f8fc 	bl	800c7e8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5f0:	4b0d      	ldr	r3, [pc, #52]	; (800c628 <xPortStartScheduler+0xf8>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a0c      	ldr	r2, [pc, #48]	; (800c628 <xPortStartScheduler+0xf8>)
 800c5f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c5fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5fc:	f7ff ff84 	bl	800c508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c600:	f7ff f828 	bl	800b654 <vTaskSwitchContext>
	prvTaskExitError();
 800c604:	f7ff ff3c 	bl	800c480 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	e000e400 	.word	0xe000e400
 800c618:	200086e0 	.word	0x200086e0
 800c61c:	200086e4 	.word	0x200086e4
 800c620:	e000ed20 	.word	0xe000ed20
 800c624:	20000018 	.word	0x20000018
 800c628:	e000ef34 	.word	0xe000ef34

0800c62c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c62c:	b480      	push	{r7}
 800c62e:	b083      	sub	sp, #12
 800c630:	af00      	add	r7, sp, #0
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c636:	b672      	cpsid	i
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	b662      	cpsie	i
 800c646:	607b      	str	r3, [r7, #4]
}
 800c648:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c64a:	4b10      	ldr	r3, [pc, #64]	; (800c68c <vPortEnterCritical+0x60>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	3301      	adds	r3, #1
 800c650:	4a0e      	ldr	r2, [pc, #56]	; (800c68c <vPortEnterCritical+0x60>)
 800c652:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c654:	4b0d      	ldr	r3, [pc, #52]	; (800c68c <vPortEnterCritical+0x60>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d111      	bne.n	800c680 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c65c:	4b0c      	ldr	r3, [pc, #48]	; (800c690 <vPortEnterCritical+0x64>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	b2db      	uxtb	r3, r3
 800c662:	2b00      	cmp	r3, #0
 800c664:	d00c      	beq.n	800c680 <vPortEnterCritical+0x54>
	__asm volatile
 800c666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c66a:	b672      	cpsid	i
 800c66c:	f383 8811 	msr	BASEPRI, r3
 800c670:	f3bf 8f6f 	isb	sy
 800c674:	f3bf 8f4f 	dsb	sy
 800c678:	b662      	cpsie	i
 800c67a:	603b      	str	r3, [r7, #0]
}
 800c67c:	bf00      	nop
 800c67e:	e7fe      	b.n	800c67e <vPortEnterCritical+0x52>
	}
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	20000018 	.word	0x20000018
 800c690:	e000ed04 	.word	0xe000ed04

0800c694 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c69a:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <vPortExitCritical+0x54>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d10c      	bne.n	800c6bc <vPortExitCritical+0x28>
	__asm volatile
 800c6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a6:	b672      	cpsid	i
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	b662      	cpsie	i
 800c6b6:	607b      	str	r3, [r7, #4]
}
 800c6b8:	bf00      	nop
 800c6ba:	e7fe      	b.n	800c6ba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800c6bc:	4b0a      	ldr	r3, [pc, #40]	; (800c6e8 <vPortExitCritical+0x54>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	3b01      	subs	r3, #1
 800c6c2:	4a09      	ldr	r2, [pc, #36]	; (800c6e8 <vPortExitCritical+0x54>)
 800c6c4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c6c6:	4b08      	ldr	r3, [pc, #32]	; (800c6e8 <vPortExitCritical+0x54>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d105      	bne.n	800c6da <vPortExitCritical+0x46>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	f383 8811 	msr	BASEPRI, r3
}
 800c6d8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6da:	bf00      	nop
 800c6dc:	370c      	adds	r7, #12
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr
 800c6e6:	bf00      	nop
 800c6e8:	20000018 	.word	0x20000018
 800c6ec:	00000000 	.word	0x00000000

0800c6f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6f0:	f3ef 8009 	mrs	r0, PSP
 800c6f4:	f3bf 8f6f 	isb	sy
 800c6f8:	4b15      	ldr	r3, [pc, #84]	; (800c750 <pxCurrentTCBConst>)
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	f01e 0f10 	tst.w	lr, #16
 800c700:	bf08      	it	eq
 800c702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c70a:	6010      	str	r0, [r2, #0]
 800c70c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c710:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c714:	b672      	cpsid	i
 800c716:	f380 8811 	msr	BASEPRI, r0
 800c71a:	f3bf 8f4f 	dsb	sy
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	b662      	cpsie	i
 800c724:	f7fe ff96 	bl	800b654 <vTaskSwitchContext>
 800c728:	f04f 0000 	mov.w	r0, #0
 800c72c:	f380 8811 	msr	BASEPRI, r0
 800c730:	bc09      	pop	{r0, r3}
 800c732:	6819      	ldr	r1, [r3, #0]
 800c734:	6808      	ldr	r0, [r1, #0]
 800c736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c73a:	f01e 0f10 	tst.w	lr, #16
 800c73e:	bf08      	it	eq
 800c740:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c744:	f380 8809 	msr	PSP, r0
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop

0800c750 <pxCurrentTCBConst>:
 800c750:	200080b4 	.word	0x200080b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c754:	bf00      	nop
 800c756:	bf00      	nop

0800c758 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c762:	b672      	cpsid	i
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	b662      	cpsie	i
 800c772:	607b      	str	r3, [r7, #4]
}
 800c774:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c776:	f7fe feb1 	bl	800b4dc <xTaskIncrementTick>
 800c77a:	4603      	mov	r3, r0
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c780:	4b06      	ldr	r3, [pc, #24]	; (800c79c <SysTick_Handler+0x44>)
 800c782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c786:	601a      	str	r2, [r3, #0]
 800c788:	2300      	movs	r3, #0
 800c78a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	f383 8811 	msr	BASEPRI, r3
}
 800c792:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c794:	bf00      	nop
 800c796:	3708      	adds	r7, #8
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	e000ed04 	.word	0xe000ed04

0800c7a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7a0:	b480      	push	{r7}
 800c7a2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7a4:	4b0b      	ldr	r3, [pc, #44]	; (800c7d4 <vPortSetupTimerInterrupt+0x34>)
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7aa:	4b0b      	ldr	r3, [pc, #44]	; (800c7d8 <vPortSetupTimerInterrupt+0x38>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7b0:	4b0a      	ldr	r3, [pc, #40]	; (800c7dc <vPortSetupTimerInterrupt+0x3c>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a0a      	ldr	r2, [pc, #40]	; (800c7e0 <vPortSetupTimerInterrupt+0x40>)
 800c7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c7ba:	099b      	lsrs	r3, r3, #6
 800c7bc:	4a09      	ldr	r2, [pc, #36]	; (800c7e4 <vPortSetupTimerInterrupt+0x44>)
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7c2:	4b04      	ldr	r3, [pc, #16]	; (800c7d4 <vPortSetupTimerInterrupt+0x34>)
 800c7c4:	2207      	movs	r2, #7
 800c7c6:	601a      	str	r2, [r3, #0]
}
 800c7c8:	bf00      	nop
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	e000e010 	.word	0xe000e010
 800c7d8:	e000e018 	.word	0xe000e018
 800c7dc:	2000000c 	.word	0x2000000c
 800c7e0:	10624dd3 	.word	0x10624dd3
 800c7e4:	e000e014 	.word	0xe000e014

0800c7e8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7e8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c7f8 <vPortEnableVFP+0x10>
 800c7ec:	6801      	ldr	r1, [r0, #0]
 800c7ee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c7f2:	6001      	str	r1, [r0, #0]
 800c7f4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7f6:	bf00      	nop
 800c7f8:	e000ed88 	.word	0xe000ed88

0800c7fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b085      	sub	sp, #20
 800c800:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c802:	f3ef 8305 	mrs	r3, IPSR
 800c806:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2b0f      	cmp	r3, #15
 800c80c:	d916      	bls.n	800c83c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c80e:	4a19      	ldr	r2, [pc, #100]	; (800c874 <vPortValidateInterruptPriority+0x78>)
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	4413      	add	r3, r2
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c818:	4b17      	ldr	r3, [pc, #92]	; (800c878 <vPortValidateInterruptPriority+0x7c>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	7afa      	ldrb	r2, [r7, #11]
 800c81e:	429a      	cmp	r2, r3
 800c820:	d20c      	bcs.n	800c83c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c826:	b672      	cpsid	i
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	b662      	cpsie	i
 800c836:	607b      	str	r3, [r7, #4]
}
 800c838:	bf00      	nop
 800c83a:	e7fe      	b.n	800c83a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c83c:	4b0f      	ldr	r3, [pc, #60]	; (800c87c <vPortValidateInterruptPriority+0x80>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c844:	4b0e      	ldr	r3, [pc, #56]	; (800c880 <vPortValidateInterruptPriority+0x84>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d90c      	bls.n	800c866 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c850:	b672      	cpsid	i
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	b662      	cpsie	i
 800c860:	603b      	str	r3, [r7, #0]
}
 800c862:	bf00      	nop
 800c864:	e7fe      	b.n	800c864 <vPortValidateInterruptPriority+0x68>
	}
 800c866:	bf00      	nop
 800c868:	3714      	adds	r7, #20
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
 800c872:	bf00      	nop
 800c874:	e000e3f0 	.word	0xe000e3f0
 800c878:	200086e0 	.word	0x200086e0
 800c87c:	e000ed0c 	.word	0xe000ed0c
 800c880:	200086e4 	.word	0x200086e4

0800c884 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b08a      	sub	sp, #40	; 0x28
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c88c:	2300      	movs	r3, #0
 800c88e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c890:	f7fe fd66 	bl	800b360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c894:	4b5b      	ldr	r3, [pc, #364]	; (800ca04 <pvPortMalloc+0x180>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d101      	bne.n	800c8a0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c89c:	f000 f91a 	bl	800cad4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8a0:	4b59      	ldr	r3, [pc, #356]	; (800ca08 <pvPortMalloc+0x184>)
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	4013      	ands	r3, r2
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	f040 8092 	bne.w	800c9d2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d01f      	beq.n	800c8f4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c8b4:	2208      	movs	r2, #8
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	f003 0307 	and.w	r3, r3, #7
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d016      	beq.n	800c8f4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f023 0307 	bic.w	r3, r3, #7
 800c8cc:	3308      	adds	r3, #8
 800c8ce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f003 0307 	and.w	r3, r3, #7
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d00c      	beq.n	800c8f4 <pvPortMalloc+0x70>
	__asm volatile
 800c8da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8de:	b672      	cpsid	i
 800c8e0:	f383 8811 	msr	BASEPRI, r3
 800c8e4:	f3bf 8f6f 	isb	sy
 800c8e8:	f3bf 8f4f 	dsb	sy
 800c8ec:	b662      	cpsie	i
 800c8ee:	617b      	str	r3, [r7, #20]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d06b      	beq.n	800c9d2 <pvPortMalloc+0x14e>
 800c8fa:	4b44      	ldr	r3, [pc, #272]	; (800ca0c <pvPortMalloc+0x188>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	429a      	cmp	r2, r3
 800c902:	d866      	bhi.n	800c9d2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c904:	4b42      	ldr	r3, [pc, #264]	; (800ca10 <pvPortMalloc+0x18c>)
 800c906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c908:	4b41      	ldr	r3, [pc, #260]	; (800ca10 <pvPortMalloc+0x18c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c90e:	e004      	b.n	800c91a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	687a      	ldr	r2, [r7, #4]
 800c920:	429a      	cmp	r2, r3
 800c922:	d903      	bls.n	800c92c <pvPortMalloc+0xa8>
 800c924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1f1      	bne.n	800c910 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c92c:	4b35      	ldr	r3, [pc, #212]	; (800ca04 <pvPortMalloc+0x180>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c932:	429a      	cmp	r2, r3
 800c934:	d04d      	beq.n	800c9d2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c936:	6a3b      	ldr	r3, [r7, #32]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2208      	movs	r2, #8
 800c93c:	4413      	add	r3, r2
 800c93e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	6a3b      	ldr	r3, [r7, #32]
 800c946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	1ad2      	subs	r2, r2, r3
 800c950:	2308      	movs	r3, #8
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	429a      	cmp	r2, r3
 800c956:	d921      	bls.n	800c99c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	4413      	add	r3, r2
 800c95e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c960:	69bb      	ldr	r3, [r7, #24]
 800c962:	f003 0307 	and.w	r3, r3, #7
 800c966:	2b00      	cmp	r3, #0
 800c968:	d00c      	beq.n	800c984 <pvPortMalloc+0x100>
	__asm volatile
 800c96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c96e:	b672      	cpsid	i
 800c970:	f383 8811 	msr	BASEPRI, r3
 800c974:	f3bf 8f6f 	isb	sy
 800c978:	f3bf 8f4f 	dsb	sy
 800c97c:	b662      	cpsie	i
 800c97e:	613b      	str	r3, [r7, #16]
}
 800c980:	bf00      	nop
 800c982:	e7fe      	b.n	800c982 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	685a      	ldr	r2, [r3, #4]
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	1ad2      	subs	r2, r2, r3
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c992:	687a      	ldr	r2, [r7, #4]
 800c994:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c996:	69b8      	ldr	r0, [r7, #24]
 800c998:	f000 f8fe 	bl	800cb98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c99c:	4b1b      	ldr	r3, [pc, #108]	; (800ca0c <pvPortMalloc+0x188>)
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	1ad3      	subs	r3, r2, r3
 800c9a6:	4a19      	ldr	r2, [pc, #100]	; (800ca0c <pvPortMalloc+0x188>)
 800c9a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9aa:	4b18      	ldr	r3, [pc, #96]	; (800ca0c <pvPortMalloc+0x188>)
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	4b19      	ldr	r3, [pc, #100]	; (800ca14 <pvPortMalloc+0x190>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d203      	bcs.n	800c9be <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9b6:	4b15      	ldr	r3, [pc, #84]	; (800ca0c <pvPortMalloc+0x188>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a16      	ldr	r2, [pc, #88]	; (800ca14 <pvPortMalloc+0x190>)
 800c9bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c0:	685a      	ldr	r2, [r3, #4]
 800c9c2:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <pvPortMalloc+0x184>)
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c9d2:	f7fe fcd3 	bl	800b37c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9d6:	69fb      	ldr	r3, [r7, #28]
 800c9d8:	f003 0307 	and.w	r3, r3, #7
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00c      	beq.n	800c9fa <pvPortMalloc+0x176>
	__asm volatile
 800c9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e4:	b672      	cpsid	i
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	b662      	cpsie	i
 800c9f4:	60fb      	str	r3, [r7, #12]
}
 800c9f6:	bf00      	nop
 800c9f8:	e7fe      	b.n	800c9f8 <pvPortMalloc+0x174>
	return pvReturn;
 800c9fa:	69fb      	ldr	r3, [r7, #28]
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3728      	adds	r7, #40	; 0x28
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	2000c2f0 	.word	0x2000c2f0
 800ca08:	2000c2fc 	.word	0x2000c2fc
 800ca0c:	2000c2f4 	.word	0x2000c2f4
 800ca10:	2000c2e8 	.word	0x2000c2e8
 800ca14:	2000c2f8 	.word	0x2000c2f8

0800ca18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d04c      	beq.n	800cac4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca2a:	2308      	movs	r3, #8
 800ca2c:	425b      	negs	r3, r3
 800ca2e:	697a      	ldr	r2, [r7, #20]
 800ca30:	4413      	add	r3, r2
 800ca32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	685a      	ldr	r2, [r3, #4]
 800ca3c:	4b23      	ldr	r3, [pc, #140]	; (800cacc <vPortFree+0xb4>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4013      	ands	r3, r2
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10c      	bne.n	800ca60 <vPortFree+0x48>
	__asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4a:	b672      	cpsid	i
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	b662      	cpsie	i
 800ca5a:	60fb      	str	r3, [r7, #12]
}
 800ca5c:	bf00      	nop
 800ca5e:	e7fe      	b.n	800ca5e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00c      	beq.n	800ca82 <vPortFree+0x6a>
	__asm volatile
 800ca68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6c:	b672      	cpsid	i
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	b662      	cpsie	i
 800ca7c:	60bb      	str	r3, [r7, #8]
}
 800ca7e:	bf00      	nop
 800ca80:	e7fe      	b.n	800ca80 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	685a      	ldr	r2, [r3, #4]
 800ca86:	4b11      	ldr	r3, [pc, #68]	; (800cacc <vPortFree+0xb4>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d019      	beq.n	800cac4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca90:	693b      	ldr	r3, [r7, #16]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d115      	bne.n	800cac4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	4b0b      	ldr	r3, [pc, #44]	; (800cacc <vPortFree+0xb4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	43db      	mvns	r3, r3
 800caa2:	401a      	ands	r2, r3
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800caa8:	f7fe fc5a 	bl	800b360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	685a      	ldr	r2, [r3, #4]
 800cab0:	4b07      	ldr	r3, [pc, #28]	; (800cad0 <vPortFree+0xb8>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4413      	add	r3, r2
 800cab6:	4a06      	ldr	r2, [pc, #24]	; (800cad0 <vPortFree+0xb8>)
 800cab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caba:	6938      	ldr	r0, [r7, #16]
 800cabc:	f000 f86c 	bl	800cb98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cac0:	f7fe fc5c 	bl	800b37c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cac4:	bf00      	nop
 800cac6:	3718      	adds	r7, #24
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	2000c2fc 	.word	0x2000c2fc
 800cad0:	2000c2f4 	.word	0x2000c2f4

0800cad4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cad4:	b480      	push	{r7}
 800cad6:	b085      	sub	sp, #20
 800cad8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cada:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cade:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cae0:	4b27      	ldr	r3, [pc, #156]	; (800cb80 <prvHeapInit+0xac>)
 800cae2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f003 0307 	and.w	r3, r3, #7
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00c      	beq.n	800cb08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	3307      	adds	r3, #7
 800caf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f023 0307 	bic.w	r3, r3, #7
 800cafa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cafc:	68ba      	ldr	r2, [r7, #8]
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	1ad3      	subs	r3, r2, r3
 800cb02:	4a1f      	ldr	r2, [pc, #124]	; (800cb80 <prvHeapInit+0xac>)
 800cb04:	4413      	add	r3, r2
 800cb06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb0c:	4a1d      	ldr	r2, [pc, #116]	; (800cb84 <prvHeapInit+0xb0>)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb12:	4b1c      	ldr	r3, [pc, #112]	; (800cb84 <prvHeapInit+0xb0>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	68ba      	ldr	r2, [r7, #8]
 800cb1c:	4413      	add	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb20:	2208      	movs	r2, #8
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	1a9b      	subs	r3, r3, r2
 800cb26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f023 0307 	bic.w	r3, r3, #7
 800cb2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	4a15      	ldr	r2, [pc, #84]	; (800cb88 <prvHeapInit+0xb4>)
 800cb34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb36:	4b14      	ldr	r3, [pc, #80]	; (800cb88 <prvHeapInit+0xb4>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb3e:	4b12      	ldr	r3, [pc, #72]	; (800cb88 <prvHeapInit+0xb4>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	2200      	movs	r2, #0
 800cb44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	1ad2      	subs	r2, r2, r3
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb54:	4b0c      	ldr	r3, [pc, #48]	; (800cb88 <prvHeapInit+0xb4>)
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	4a0a      	ldr	r2, [pc, #40]	; (800cb8c <prvHeapInit+0xb8>)
 800cb62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	4a09      	ldr	r2, [pc, #36]	; (800cb90 <prvHeapInit+0xbc>)
 800cb6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb6c:	4b09      	ldr	r3, [pc, #36]	; (800cb94 <prvHeapInit+0xc0>)
 800cb6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb72:	601a      	str	r2, [r3, #0]
}
 800cb74:	bf00      	nop
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	200086e8 	.word	0x200086e8
 800cb84:	2000c2e8 	.word	0x2000c2e8
 800cb88:	2000c2f0 	.word	0x2000c2f0
 800cb8c:	2000c2f8 	.word	0x2000c2f8
 800cb90:	2000c2f4 	.word	0x2000c2f4
 800cb94:	2000c2fc 	.word	0x2000c2fc

0800cb98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b085      	sub	sp, #20
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cba0:	4b28      	ldr	r3, [pc, #160]	; (800cc44 <prvInsertBlockIntoFreeList+0xac>)
 800cba2:	60fb      	str	r3, [r7, #12]
 800cba4:	e002      	b.n	800cbac <prvInsertBlockIntoFreeList+0x14>
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	60fb      	str	r3, [r7, #12]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d8f7      	bhi.n	800cba6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	685b      	ldr	r3, [r3, #4]
 800cbbe:	68ba      	ldr	r2, [r7, #8]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d108      	bne.n	800cbda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	685a      	ldr	r2, [r3, #4]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	441a      	add	r2, r3
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	685b      	ldr	r3, [r3, #4]
 800cbe2:	68ba      	ldr	r2, [r7, #8]
 800cbe4:	441a      	add	r2, r3
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d118      	bne.n	800cc20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	4b15      	ldr	r3, [pc, #84]	; (800cc48 <prvInsertBlockIntoFreeList+0xb0>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d00d      	beq.n	800cc16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	685a      	ldr	r2, [r3, #4]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	685b      	ldr	r3, [r3, #4]
 800cc04:	441a      	add	r2, r3
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	601a      	str	r2, [r3, #0]
 800cc14:	e008      	b.n	800cc28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc16:	4b0c      	ldr	r3, [pc, #48]	; (800cc48 <prvInsertBlockIntoFreeList+0xb0>)
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	601a      	str	r2, [r3, #0]
 800cc1e:	e003      	b.n	800cc28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc28:	68fa      	ldr	r2, [r7, #12]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d002      	beq.n	800cc36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc36:	bf00      	nop
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	2000c2e8 	.word	0x2000c2e8
 800cc48:	2000c2f0 	.word	0x2000c2f0

0800cc4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800cc60:	4619      	mov	r1, r3
 800cc62:	4610      	mov	r0, r2
 800cc64:	f7fc f865 	bl	8008d32 <USBD_LL_SetupStage>
}
 800cc68:	bf00      	nop
 800cc6a:	3708      	adds	r7, #8
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b082      	sub	sp, #8
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800cc82:	78fa      	ldrb	r2, [r7, #3]
 800cc84:	6879      	ldr	r1, [r7, #4]
 800cc86:	4613      	mov	r3, r2
 800cc88:	00db      	lsls	r3, r3, #3
 800cc8a:	4413      	add	r3, r2
 800cc8c:	009b      	lsls	r3, r3, #2
 800cc8e:	440b      	add	r3, r1
 800cc90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	78fb      	ldrb	r3, [r7, #3]
 800cc98:	4619      	mov	r1, r3
 800cc9a:	f7fc f89f 	bl	8008ddc <USBD_LL_DataOutStage>
}
 800cc9e:	bf00      	nop
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}

0800cca6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cca6:	b580      	push	{r7, lr}
 800cca8:	b082      	sub	sp, #8
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6078      	str	r0, [r7, #4]
 800ccae:	460b      	mov	r3, r1
 800ccb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800ccb8:	78fa      	ldrb	r2, [r7, #3]
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	4613      	mov	r3, r2
 800ccbe:	00db      	lsls	r3, r3, #3
 800ccc0:	4413      	add	r3, r2
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	440b      	add	r3, r1
 800ccc6:	334c      	adds	r3, #76	; 0x4c
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	78fb      	ldrb	r3, [r7, #3]
 800cccc:	4619      	mov	r1, r3
 800ccce:	f7fc f938 	bl	8008f42 <USBD_LL_DataInStage>
}
 800ccd2:	bf00      	nop
 800ccd4:	3708      	adds	r7, #8
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b082      	sub	sp, #8
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7fc fa6c 	bl	80091c6 <USBD_LL_SOF>
}
 800ccee:	bf00      	nop
 800ccf0:	3708      	adds	r7, #8
 800ccf2:	46bd      	mov	sp, r7
 800ccf4:	bd80      	pop	{r7, pc}

0800ccf6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccf6:	b580      	push	{r7, lr}
 800ccf8:	b084      	sub	sp, #16
 800ccfa:	af00      	add	r7, sp, #0
 800ccfc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ccfe:	2301      	movs	r3, #1
 800cd00:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	68db      	ldr	r3, [r3, #12]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d102      	bne.n	800cd10 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	73fb      	strb	r3, [r7, #15]
 800cd0e:	e008      	b.n	800cd22 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	68db      	ldr	r3, [r3, #12]
 800cd14:	2b02      	cmp	r3, #2
 800cd16:	d102      	bne.n	800cd1e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	73fb      	strb	r3, [r7, #15]
 800cd1c:	e001      	b.n	800cd22 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800cd1e:	f7f4 fc48 	bl	80015b2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cd28:	7bfa      	ldrb	r2, [r7, #15]
 800cd2a:	4611      	mov	r1, r2
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7fc fa0c 	bl	800914a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cd38:	4618      	mov	r0, r3
 800cd3a:	f7fc f9b4 	bl	80090a6 <USBD_LL_Reset>
}
 800cd3e:	bf00      	nop
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
	...

0800cd48 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cd56:	4618      	mov	r0, r3
 800cd58:	f7fc fa07 	bl	800916a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	6812      	ldr	r2, [r2, #0]
 800cd6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cd6e:	f043 0301 	orr.w	r3, r3, #1
 800cd72:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6a1b      	ldr	r3, [r3, #32]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d005      	beq.n	800cd88 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cd7c:	4b04      	ldr	r3, [pc, #16]	; (800cd90 <HAL_PCD_SuspendCallback+0x48>)
 800cd7e:	691b      	ldr	r3, [r3, #16]
 800cd80:	4a03      	ldr	r2, [pc, #12]	; (800cd90 <HAL_PCD_SuspendCallback+0x48>)
 800cd82:	f043 0306 	orr.w	r3, r3, #6
 800cd86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800cd88:	bf00      	nop
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	e000ed00 	.word	0xe000ed00

0800cd94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7fc f9f7 	bl	8009196 <USBD_LL_Resume>
}
 800cda8:	bf00      	nop
 800cdaa:	3708      	adds	r7, #8
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cdc2:	78fa      	ldrb	r2, [r7, #3]
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7fc fa4f 	bl	800926a <USBD_LL_IsoOUTIncomplete>
}
 800cdcc:	bf00      	nop
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cde6:	78fa      	ldrb	r2, [r7, #3]
 800cde8:	4611      	mov	r1, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fc fa0b 	bl	8009206 <USBD_LL_IsoINIncomplete>
}
 800cdf0:	bf00      	nop
 800cdf2:	3708      	adds	r7, #8
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}

0800cdf8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7fc fa61 	bl	80092ce <USBD_LL_DevConnected>
}
 800ce0c:	bf00      	nop
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7fc fa5e 	bl	80092e4 <USBD_LL_DevDisconnected>
}
 800ce28:	bf00      	nop
 800ce2a:	3708      	adds	r7, #8
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}

0800ce30 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
 800ce38:	4608      	mov	r0, r1
 800ce3a:	4611      	mov	r1, r2
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	4603      	mov	r3, r0
 800ce40:	70fb      	strb	r3, [r7, #3]
 800ce42:	460b      	mov	r3, r1
 800ce44:	70bb      	strb	r3, [r7, #2]
 800ce46:	4613      	mov	r3, r2
 800ce48:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ce58:	78bb      	ldrb	r3, [r7, #2]
 800ce5a:	883a      	ldrh	r2, [r7, #0]
 800ce5c:	78f9      	ldrb	r1, [r7, #3]
 800ce5e:	f7f6 fccd 	bl	80037fc <HAL_PCD_EP_Open>
 800ce62:	4603      	mov	r3, r0
 800ce64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce66:	7bfb      	ldrb	r3, [r7, #15]
 800ce68:	4618      	mov	r0, r3
 800ce6a:	f000 f927 	bl	800d0bc <USBD_Get_USB_Status>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce72:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
 800ce84:	460b      	mov	r3, r1
 800ce86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce88:	2300      	movs	r3, #0
 800ce8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ce96:	78fa      	ldrb	r2, [r7, #3]
 800ce98:	4611      	mov	r1, r2
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f7f6 fdab 	bl	80039f6 <HAL_PCD_EP_SetStall>
 800cea0:	4603      	mov	r3, r0
 800cea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cea4:	7bfb      	ldrb	r3, [r7, #15]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 f908 	bl	800d0bc <USBD_Get_USB_Status>
 800ceac:	4603      	mov	r3, r0
 800ceae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3710      	adds	r7, #16
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}

0800ceba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ceba:	b580      	push	{r7, lr}
 800cebc:	b084      	sub	sp, #16
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	6078      	str	r0, [r7, #4]
 800cec2:	460b      	mov	r3, r1
 800cec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cec6:	2300      	movs	r3, #0
 800cec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ced4:	78fa      	ldrb	r2, [r7, #3]
 800ced6:	4611      	mov	r1, r2
 800ced8:	4618      	mov	r0, r3
 800ceda:	f7f6 fdf0 	bl	8003abe <HAL_PCD_EP_ClrStall>
 800cede:	4603      	mov	r3, r0
 800cee0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee2:	7bfb      	ldrb	r3, [r7, #15]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 f8e9 	bl	800d0bc <USBD_Get_USB_Status>
 800ceea:	4603      	mov	r3, r0
 800ceec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ceee:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}

0800cef8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b085      	sub	sp, #20
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
 800cf00:	460b      	mov	r3, r1
 800cf02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf0a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cf0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	da0b      	bge.n	800cf2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cf14:	78fb      	ldrb	r3, [r7, #3]
 800cf16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf1a:	68f9      	ldr	r1, [r7, #12]
 800cf1c:	4613      	mov	r3, r2
 800cf1e:	00db      	lsls	r3, r3, #3
 800cf20:	4413      	add	r3, r2
 800cf22:	009b      	lsls	r3, r3, #2
 800cf24:	440b      	add	r3, r1
 800cf26:	333e      	adds	r3, #62	; 0x3e
 800cf28:	781b      	ldrb	r3, [r3, #0]
 800cf2a:	e00b      	b.n	800cf44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf2c:	78fb      	ldrb	r3, [r7, #3]
 800cf2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf32:	68f9      	ldr	r1, [r7, #12]
 800cf34:	4613      	mov	r3, r2
 800cf36:	00db      	lsls	r3, r3, #3
 800cf38:	4413      	add	r3, r2
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	440b      	add	r3, r1
 800cf3e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cf42:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
 800cf58:	460b      	mov	r3, r1
 800cf5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf60:	2300      	movs	r3, #0
 800cf62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cf6a:	78fa      	ldrb	r2, [r7, #3]
 800cf6c:	4611      	mov	r1, r2
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f7f6 fc1f 	bl	80037b2 <HAL_PCD_SetAddress>
 800cf74:	4603      	mov	r3, r0
 800cf76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf78:	7bfb      	ldrb	r3, [r7, #15]
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	f000 f89e 	bl	800d0bc <USBD_Get_USB_Status>
 800cf80:	4603      	mov	r3, r0
 800cf82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf84:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf86:	4618      	mov	r0, r3
 800cf88:	3710      	adds	r7, #16
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b086      	sub	sp, #24
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	60f8      	str	r0, [r7, #12]
 800cf96:	607a      	str	r2, [r7, #4]
 800cf98:	603b      	str	r3, [r7, #0]
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cfac:	7af9      	ldrb	r1, [r7, #11]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	f7f6 fcd6 	bl	8003962 <HAL_PCD_EP_Transmit>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfba:	7dfb      	ldrb	r3, [r7, #23]
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	f000 f87d 	bl	800d0bc <USBD_Get_USB_Status>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cfc6:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3718      	adds	r7, #24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	60f8      	str	r0, [r7, #12]
 800cfd8:	607a      	str	r2, [r7, #4]
 800cfda:	603b      	str	r3, [r7, #0]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cfee:	7af9      	ldrb	r1, [r7, #11]
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	f7f6 fc6a 	bl	80038cc <HAL_PCD_EP_Receive>
 800cff8:	4603      	mov	r3, r0
 800cffa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cffc:	7dfb      	ldrb	r3, [r7, #23]
 800cffe:	4618      	mov	r0, r3
 800d000:	f000 f85c 	bl	800d0bc <USBD_Get_USB_Status>
 800d004:	4603      	mov	r3, r0
 800d006:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d008:	7dbb      	ldrb	r3, [r7, #22]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3718      	adds	r7, #24
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	460b      	mov	r3, r1
 800d01e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d020:	78fb      	ldrb	r3, [r7, #3]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d002      	beq.n	800d02c <HAL_PCDEx_LPM_Callback+0x18>
 800d026:	2b01      	cmp	r3, #1
 800d028:	d01f      	beq.n	800d06a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d02a:	e03b      	b.n	800d0a4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a1b      	ldr	r3, [r3, #32]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d007      	beq.n	800d044 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d034:	f000 f83c 	bl	800d0b0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d038:	4b1c      	ldr	r3, [pc, #112]	; (800d0ac <HAL_PCDEx_LPM_Callback+0x98>)
 800d03a:	691b      	ldr	r3, [r3, #16]
 800d03c:	4a1b      	ldr	r2, [pc, #108]	; (800d0ac <HAL_PCDEx_LPM_Callback+0x98>)
 800d03e:	f023 0306 	bic.w	r3, r3, #6
 800d042:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	6812      	ldr	r2, [r2, #0]
 800d052:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d056:	f023 0301 	bic.w	r3, r3, #1
 800d05a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d062:	4618      	mov	r0, r3
 800d064:	f7fc f897 	bl	8009196 <USBD_LL_Resume>
    break;
 800d068:	e01c      	b.n	800d0a4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	6812      	ldr	r2, [r2, #0]
 800d078:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d07c:	f043 0301 	orr.w	r3, r3, #1
 800d080:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800d088:	4618      	mov	r0, r3
 800d08a:	f7fc f86e 	bl	800916a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a1b      	ldr	r3, [r3, #32]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d005      	beq.n	800d0a2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d096:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <HAL_PCDEx_LPM_Callback+0x98>)
 800d098:	691b      	ldr	r3, [r3, #16]
 800d09a:	4a04      	ldr	r2, [pc, #16]	; (800d0ac <HAL_PCDEx_LPM_Callback+0x98>)
 800d09c:	f043 0306 	orr.w	r3, r3, #6
 800d0a0:	6113      	str	r3, [r2, #16]
    break;
 800d0a2:	bf00      	nop
}
 800d0a4:	bf00      	nop
 800d0a6:	3708      	adds	r7, #8
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	e000ed00 	.word	0xe000ed00

0800d0b0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d0b4:	f7f4 fa06 	bl	80014c4 <SystemClock_Config>
}
 800d0b8:	bf00      	nop
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d0bc:	b480      	push	{r7}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d0ca:	79fb      	ldrb	r3, [r7, #7]
 800d0cc:	2b03      	cmp	r3, #3
 800d0ce:	d817      	bhi.n	800d100 <USBD_Get_USB_Status+0x44>
 800d0d0:	a201      	add	r2, pc, #4	; (adr r2, 800d0d8 <USBD_Get_USB_Status+0x1c>)
 800d0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d6:	bf00      	nop
 800d0d8:	0800d0e9 	.word	0x0800d0e9
 800d0dc:	0800d0ef 	.word	0x0800d0ef
 800d0e0:	0800d0f5 	.word	0x0800d0f5
 800d0e4:	0800d0fb 	.word	0x0800d0fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	73fb      	strb	r3, [r7, #15]
    break;
 800d0ec:	e00b      	b.n	800d106 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d0ee:	2303      	movs	r3, #3
 800d0f0:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f2:	e008      	b.n	800d106 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	73fb      	strb	r3, [r7, #15]
    break;
 800d0f8:	e005      	b.n	800d106 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d0fa:	2303      	movs	r3, #3
 800d0fc:	73fb      	strb	r3, [r7, #15]
    break;
 800d0fe:	e002      	b.n	800d106 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d100:	2303      	movs	r3, #3
 800d102:	73fb      	strb	r3, [r7, #15]
    break;
 800d104:	bf00      	nop
  }
  return usb_status;
 800d106:	7bfb      	ldrb	r3, [r7, #15]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3714      	adds	r7, #20
 800d10c:	46bd      	mov	sp, r7
 800d10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d112:	4770      	bx	lr

0800d114 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 800d114:	4b04      	ldr	r3, [pc, #16]	; (800d128 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 800d116:	681a      	ldr	r2, [r3, #0]
 800d118:	b10a      	cbz	r2, 800d11e <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xa>
 800d11a:	4803      	ldr	r0, [pc, #12]	; (800d128 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 800d11c:	4770      	bx	lr
 800d11e:	4a03      	ldr	r2, [pc, #12]	; (800d12c <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x18>)
 800d120:	4801      	ldr	r0, [pc, #4]	; (800d128 <rosidl_typesupport_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>)
 800d122:	6812      	ldr	r2, [r2, #0]
 800d124:	601a      	str	r2, [r3, #0]
 800d126:	4770      	bx	lr
 800d128:	20000024 	.word	0x20000024
 800d12c:	200002f8 	.word	0x200002f8

0800d130 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 800d130:	4b04      	ldr	r3, [pc, #16]	; (800d144 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 800d132:	4805      	ldr	r0, [pc, #20]	; (800d148 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	4905      	ldr	r1, [pc, #20]	; (800d14c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x1c>)
 800d138:	4a05      	ldr	r2, [pc, #20]	; (800d150 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x20>)
 800d13a:	6003      	str	r3, [r0, #0]
 800d13c:	600b      	str	r3, [r1, #0]
 800d13e:	6013      	str	r3, [r2, #0]
 800d140:	4770      	bx	lr
 800d142:	bf00      	nop
 800d144:	200002f8 	.word	0x200002f8
 800d148:	20000040 	.word	0x20000040
 800d14c:	2000004c 	.word	0x2000004c
 800d150:	20000024 	.word	0x20000024

0800d154 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_init_function>:
 800d154:	f005 be0c 	b.w	8012d70 <custom_test_msgs__srv__AddThreeInts_Request__init>

0800d158 <custom_test_msgs__srv__AddThreeInts_Request__rosidl_typesupport_introspection_c__AddThreeInts_Request_fini_function>:
 800d158:	f005 be0e 	b.w	8012d78 <custom_test_msgs__srv__AddThreeInts_Request__fini>

0800d15c <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_init_function>:
 800d15c:	f005 be0e 	b.w	8012d7c <custom_test_msgs__srv__AddThreeInts_Response__init>

0800d160 <custom_test_msgs__srv__AddThreeInts_Response__rosidl_typesupport_introspection_c__AddThreeInts_Response_fini_function>:
 800d160:	f005 be10 	b.w	8012d84 <custom_test_msgs__srv__AddThreeInts_Response__fini>

0800d164 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 800d164:	4b04      	ldr	r3, [pc, #16]	; (800d178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 800d166:	681a      	ldr	r2, [r3, #0]
 800d168:	b10a      	cbz	r2, 800d16e <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0xa>
 800d16a:	4803      	ldr	r0, [pc, #12]	; (800d178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 800d16c:	4770      	bx	lr
 800d16e:	4a03      	ldr	r2, [pc, #12]	; (800d17c <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x18>)
 800d170:	4801      	ldr	r0, [pc, #4]	; (800d178 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x14>)
 800d172:	6812      	ldr	r2, [r2, #0]
 800d174:	601a      	str	r2, [r3, #0]
 800d176:	4770      	bx	lr
 800d178:	2000010c 	.word	0x2000010c
 800d17c:	200002fc 	.word	0x200002fc

0800d180 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 800d180:	4b04      	ldr	r3, [pc, #16]	; (800d194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 800d182:	681a      	ldr	r2, [r3, #0]
 800d184:	b10a      	cbz	r2, 800d18a <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0xa>
 800d186:	4803      	ldr	r0, [pc, #12]	; (800d194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 800d188:	4770      	bx	lr
 800d18a:	4a03      	ldr	r2, [pc, #12]	; (800d198 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x18>)
 800d18c:	4801      	ldr	r0, [pc, #4]	; (800d194 <rosidl_typesupport_introspection_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x14>)
 800d18e:	6812      	ldr	r2, [r2, #0]
 800d190:	601a      	str	r2, [r3, #0]
 800d192:	4770      	bx	lr
 800d194:	20000154 	.word	0x20000154
 800d198:	200002fc 	.word	0x200002fc

0800d19c <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 800d19c:	4b13      	ldr	r3, [pc, #76]	; (800d1ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	b132      	cbz	r2, 800d1b0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x14>
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	689a      	ldr	r2, [r3, #8]
 800d1a6:	b152      	cbz	r2, 800d1be <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x22>
 800d1a8:	68da      	ldr	r2, [r3, #12]
 800d1aa:	b182      	cbz	r2, 800d1ce <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x32>
 800d1ac:	480f      	ldr	r0, [pc, #60]	; (800d1ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 800d1ae:	4770      	bx	lr
 800d1b0:	4a0f      	ldr	r2, [pc, #60]	; (800d1f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 800d1b2:	6812      	ldr	r2, [r2, #0]
 800d1b4:	601a      	str	r2, [r3, #0]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	689a      	ldr	r2, [r3, #8]
 800d1ba:	2a00      	cmp	r2, #0
 800d1bc:	d1f4      	bne.n	800d1a8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0xc>
 800d1be:	4a0d      	ldr	r2, [pc, #52]	; (800d1f4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x58>)
 800d1c0:	6811      	ldr	r1, [r2, #0]
 800d1c2:	b179      	cbz	r1, 800d1e4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x48>
 800d1c4:	6852      	ldr	r2, [r2, #4]
 800d1c6:	609a      	str	r2, [r3, #8]
 800d1c8:	68da      	ldr	r2, [r3, #12]
 800d1ca:	2a00      	cmp	r2, #0
 800d1cc:	d1ee      	bne.n	800d1ac <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x10>
 800d1ce:	4a0a      	ldr	r2, [pc, #40]	; (800d1f8 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x5c>)
 800d1d0:	6811      	ldr	r1, [r2, #0]
 800d1d2:	b119      	cbz	r1, 800d1dc <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x40>
 800d1d4:	6852      	ldr	r2, [r2, #4]
 800d1d6:	4805      	ldr	r0, [pc, #20]	; (800d1ec <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x50>)
 800d1d8:	60da      	str	r2, [r3, #12]
 800d1da:	4770      	bx	lr
 800d1dc:	4904      	ldr	r1, [pc, #16]	; (800d1f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 800d1de:	6809      	ldr	r1, [r1, #0]
 800d1e0:	6011      	str	r1, [r2, #0]
 800d1e2:	e7f7      	b.n	800d1d4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x38>
 800d1e4:	4902      	ldr	r1, [pc, #8]	; (800d1f0 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x54>)
 800d1e6:	6809      	ldr	r1, [r1, #0]
 800d1e8:	6011      	str	r1, [r2, #0]
 800d1ea:	e7eb      	b.n	800d1c4 <rosidl_typesupport_introspection_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x28>
 800d1ec:	20000170 	.word	0x20000170
 800d1f0:	200002fc 	.word	0x200002fc
 800d1f4:	2000010c 	.word	0x2000010c
 800d1f8:	20000154 	.word	0x20000154

0800d1fc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request>:
 800d1fc:	4800      	ldr	r0, [pc, #0]	; (800d200 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Request+0x4>)
 800d1fe:	4770      	bx	lr
 800d200:	20000198 	.word	0x20000198

0800d204 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response>:
 800d204:	4800      	ldr	r0, [pc, #0]	; (800d208 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__custom_test_msgs__srv__AddThreeInts_Response+0x4>)
 800d206:	4770      	bx	lr
 800d208:	200001a4 	.word	0x200001a4

0800d20c <_AddThreeInts_Response__max_serialized_size>:
 800d20c:	2108      	movs	r1, #8
 800d20e:	2000      	movs	r0, #0
 800d210:	b508      	push	{r3, lr}
 800d212:	f001 fc61 	bl	800ead8 <ucdr_alignment>
 800d216:	3008      	adds	r0, #8
 800d218:	bd08      	pop	{r3, pc}
 800d21a:	bf00      	nop

0800d21c <_AddThreeInts_Response__cdr_deserialize>:
 800d21c:	b109      	cbz	r1, 800d222 <_AddThreeInts_Response__cdr_deserialize+0x6>
 800d21e:	f001 b9a7 	b.w	800e570 <ucdr_deserialize_int64_t>
 800d222:	4608      	mov	r0, r1
 800d224:	4770      	bx	lr
 800d226:	bf00      	nop

0800d228 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request>:
 800d228:	b1b8      	cbz	r0, 800d25a <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Request+0x32>
 800d22a:	b538      	push	{r3, r4, r5, lr}
 800d22c:	460d      	mov	r5, r1
 800d22e:	2108      	movs	r1, #8
 800d230:	4628      	mov	r0, r5
 800d232:	f001 fc51 	bl	800ead8 <ucdr_alignment>
 800d236:	f105 0308 	add.w	r3, r5, #8
 800d23a:	2108      	movs	r1, #8
 800d23c:	f1c5 0508 	rsb	r5, r5, #8
 800d240:	181c      	adds	r4, r3, r0
 800d242:	4620      	mov	r0, r4
 800d244:	f001 fc48 	bl	800ead8 <ucdr_alignment>
 800d248:	2108      	movs	r1, #8
 800d24a:	4408      	add	r0, r1
 800d24c:	4404      	add	r4, r0
 800d24e:	4620      	mov	r0, r4
 800d250:	f001 fc42 	bl	800ead8 <ucdr_alignment>
 800d254:	4428      	add	r0, r5
 800d256:	4420      	add	r0, r4
 800d258:	bd38      	pop	{r3, r4, r5, pc}
 800d25a:	4770      	bx	lr

0800d25c <_AddThreeInts_Response__get_serialized_size>:
 800d25c:	b130      	cbz	r0, 800d26c <_AddThreeInts_Response__get_serialized_size+0x10>
 800d25e:	2108      	movs	r1, #8
 800d260:	2000      	movs	r0, #0
 800d262:	b508      	push	{r3, lr}
 800d264:	f001 fc38 	bl	800ead8 <ucdr_alignment>
 800d268:	3008      	adds	r0, #8
 800d26a:	bd08      	pop	{r3, pc}
 800d26c:	4770      	bx	lr
 800d26e:	bf00      	nop

0800d270 <_AddThreeInts_Request__cdr_deserialize>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	460c      	mov	r4, r1
 800d274:	b171      	cbz	r1, 800d294 <_AddThreeInts_Request__cdr_deserialize+0x24>
 800d276:	4605      	mov	r5, r0
 800d278:	f001 f97a 	bl	800e570 <ucdr_deserialize_int64_t>
 800d27c:	f104 0108 	add.w	r1, r4, #8
 800d280:	4628      	mov	r0, r5
 800d282:	f001 f975 	bl	800e570 <ucdr_deserialize_int64_t>
 800d286:	f104 0110 	add.w	r1, r4, #16
 800d28a:	4628      	mov	r0, r5
 800d28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d290:	f001 b96e 	b.w	800e570 <ucdr_deserialize_int64_t>
 800d294:	4608      	mov	r0, r1
 800d296:	bd38      	pop	{r3, r4, r5, pc}

0800d298 <_AddThreeInts_Request__cdr_serialize>:
 800d298:	b198      	cbz	r0, 800d2c2 <_AddThreeInts_Request__cdr_serialize+0x2a>
 800d29a:	b570      	push	{r4, r5, r6, lr}
 800d29c:	460d      	mov	r5, r1
 800d29e:	4604      	mov	r4, r0
 800d2a0:	e9d0 2300 	ldrd	r2, r3, [r0]
 800d2a4:	4608      	mov	r0, r1
 800d2a6:	f001 f893 	bl	800e3d0 <ucdr_serialize_int64_t>
 800d2aa:	4628      	mov	r0, r5
 800d2ac:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800d2b0:	f001 f88e 	bl	800e3d0 <ucdr_serialize_int64_t>
 800d2b4:	4628      	mov	r0, r5
 800d2b6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 800d2ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d2be:	f001 b887 	b.w	800e3d0 <ucdr_serialize_int64_t>
 800d2c2:	4770      	bx	lr

0800d2c4 <_AddThreeInts_Response__cdr_serialize>:
 800d2c4:	b120      	cbz	r0, 800d2d0 <_AddThreeInts_Response__cdr_serialize+0xc>
 800d2c6:	e9d0 2300 	ldrd	r2, r3, [r0]
 800d2ca:	4608      	mov	r0, r1
 800d2cc:	f001 b880 	b.w	800e3d0 <ucdr_serialize_int64_t>
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop

0800d2d4 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response>:
 800d2d4:	b138      	cbz	r0, 800d2e6 <get_serialized_size_custom_test_msgs__srv__AddThreeInts_Response+0x12>
 800d2d6:	b508      	push	{r3, lr}
 800d2d8:	460b      	mov	r3, r1
 800d2da:	2108      	movs	r1, #8
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f001 fbfb 	bl	800ead8 <ucdr_alignment>
 800d2e2:	3008      	adds	r0, #8
 800d2e4:	bd08      	pop	{r3, pc}
 800d2e6:	4770      	bx	lr

0800d2e8 <_AddThreeInts_Request__get_serialized_size>:
 800d2e8:	b190      	cbz	r0, 800d310 <_AddThreeInts_Request__get_serialized_size+0x28>
 800d2ea:	2108      	movs	r1, #8
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	b510      	push	{r4, lr}
 800d2f0:	f001 fbf2 	bl	800ead8 <ucdr_alignment>
 800d2f4:	2108      	movs	r1, #8
 800d2f6:	1844      	adds	r4, r0, r1
 800d2f8:	4620      	mov	r0, r4
 800d2fa:	f001 fbed 	bl	800ead8 <ucdr_alignment>
 800d2fe:	2108      	movs	r1, #8
 800d300:	4408      	add	r0, r1
 800d302:	4404      	add	r4, r0
 800d304:	4620      	mov	r0, r4
 800d306:	f001 fbe7 	bl	800ead8 <ucdr_alignment>
 800d30a:	3008      	adds	r0, #8
 800d30c:	4420      	add	r0, r4
 800d30e:	bd10      	pop	{r4, pc}
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop

0800d314 <_AddThreeInts_Request__max_serialized_size>:
 800d314:	b538      	push	{r3, r4, r5, lr}
 800d316:	2108      	movs	r1, #8
 800d318:	2000      	movs	r0, #0
 800d31a:	f001 fbdd 	bl	800ead8 <ucdr_alignment>
 800d31e:	2108      	movs	r1, #8
 800d320:	1845      	adds	r5, r0, r1
 800d322:	4628      	mov	r0, r5
 800d324:	f001 fbd8 	bl	800ead8 <ucdr_alignment>
 800d328:	2108      	movs	r1, #8
 800d32a:	1844      	adds	r4, r0, r1
 800d32c:	442c      	add	r4, r5
 800d32e:	4620      	mov	r0, r4
 800d330:	f001 fbd2 	bl	800ead8 <ucdr_alignment>
 800d334:	3008      	adds	r0, #8
 800d336:	4420      	add	r0, r4
 800d338:	bd38      	pop	{r3, r4, r5, pc}
 800d33a:	bf00      	nop

0800d33c <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts>:
 800d33c:	4800      	ldr	r0, [pc, #0]	; (800d340 <rosidl_typesupport_microxrcedds_c__get_service_type_support_handle__custom_test_msgs__srv__AddThreeInts+0x4>)
 800d33e:	4770      	bx	lr
 800d340:	2000018c 	.word	0x2000018c

0800d344 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>:
 800d344:	4b04      	ldr	r3, [pc, #16]	; (800d358 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800d346:	681a      	ldr	r2, [r3, #0]
 800d348:	b10a      	cbz	r2, 800d34e <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0xa>
 800d34a:	4803      	ldr	r0, [pc, #12]	; (800d358 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800d34c:	4770      	bx	lr
 800d34e:	4a03      	ldr	r2, [pc, #12]	; (800d35c <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x18>)
 800d350:	4801      	ldr	r0, [pc, #4]	; (800d358 <rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800d352:	6812      	ldr	r2, [r2, #0]
 800d354:	601a      	str	r2, [r3, #0]
 800d356:	4770      	bx	lr
 800d358:	200001f0 	.word	0x200001f0
 800d35c:	200002f8 	.word	0x200002f8

0800d360 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>:
 800d360:	4a02      	ldr	r2, [pc, #8]	; (800d36c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0xc>)
 800d362:	4b03      	ldr	r3, [pc, #12]	; (800d370 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x10>)
 800d364:	6812      	ldr	r2, [r2, #0]
 800d366:	601a      	str	r2, [r3, #0]
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	200002f8 	.word	0x200002f8
 800d370:	200001f0 	.word	0x200001f0

0800d374 <drive_msgs__msg__DiffDrive__rosidl_typesupport_introspection_c__DiffDrive_init_function>:
 800d374:	f005 bd08 	b.w	8012d88 <drive_msgs__msg__DiffDrive__init>

0800d378 <drive_msgs__msg__DiffDrive__rosidl_typesupport_introspection_c__DiffDrive_fini_function>:
 800d378:	f005 bd18 	b.w	8012dac <drive_msgs__msg__DiffDrive__fini>

0800d37c <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>:
 800d37c:	4b04      	ldr	r3, [pc, #16]	; (800d390 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	b10a      	cbz	r2, 800d386 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0xa>
 800d382:	4803      	ldr	r0, [pc, #12]	; (800d390 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800d384:	4770      	bx	lr
 800d386:	4a03      	ldr	r2, [pc, #12]	; (800d394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x18>)
 800d388:	4801      	ldr	r0, [pc, #4]	; (800d390 <rosidl_typesupport_introspection_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x14>)
 800d38a:	6812      	ldr	r2, [r2, #0]
 800d38c:	601a      	str	r2, [r3, #0]
 800d38e:	4770      	bx	lr
 800d390:	200002b0 	.word	0x200002b0
 800d394:	200002fc 	.word	0x200002fc

0800d398 <_DiffDrive__cdr_serialize>:
 800d398:	b1e0      	cbz	r0, 800d3d4 <_DiffDrive__cdr_serialize+0x3c>
 800d39a:	b570      	push	{r4, r5, r6, lr}
 800d39c:	6806      	ldr	r6, [r0, #0]
 800d39e:	4604      	mov	r4, r0
 800d3a0:	460d      	mov	r5, r1
 800d3a2:	b1a6      	cbz	r6, 800d3ce <_DiffDrive__cdr_serialize+0x36>
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f7f2 ff55 	bl	8000254 <strlen>
 800d3aa:	1c42      	adds	r2, r0, #1
 800d3ac:	4631      	mov	r1, r6
 800d3ae:	6060      	str	r0, [r4, #4]
 800d3b0:	4628      	mov	r0, r5
 800d3b2:	f001 fc01 	bl	800ebb8 <ucdr_serialize_sequence_char>
 800d3b6:	4628      	mov	r0, r5
 800d3b8:	ed94 0b04 	vldr	d0, [r4, #16]
 800d3bc:	f001 f99e 	bl	800e6fc <ucdr_serialize_double>
 800d3c0:	4628      	mov	r0, r5
 800d3c2:	ed94 0b06 	vldr	d0, [r4, #24]
 800d3c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d3ca:	f001 b997 	b.w	800e6fc <ucdr_serialize_double>
 800d3ce:	4632      	mov	r2, r6
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	e7eb      	b.n	800d3ac <_DiffDrive__cdr_serialize+0x14>
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop

0800d3d8 <get_serialized_size_drive_msgs__msg__DiffDrive>:
 800d3d8:	b570      	push	{r4, r5, r6, lr}
 800d3da:	4604      	mov	r4, r0
 800d3dc:	b1b0      	cbz	r0, 800d40c <get_serialized_size_drive_msgs__msg__DiffDrive+0x34>
 800d3de:	460d      	mov	r5, r1
 800d3e0:	2104      	movs	r1, #4
 800d3e2:	4628      	mov	r0, r5
 800d3e4:	f001 fb78 	bl	800ead8 <ucdr_alignment>
 800d3e8:	6866      	ldr	r6, [r4, #4]
 800d3ea:	1d6b      	adds	r3, r5, #5
 800d3ec:	2108      	movs	r1, #8
 800d3ee:	f1c5 0508 	rsb	r5, r5, #8
 800d3f2:	4433      	add	r3, r6
 800d3f4:	181e      	adds	r6, r3, r0
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f001 fb6e 	bl	800ead8 <ucdr_alignment>
 800d3fc:	2108      	movs	r1, #8
 800d3fe:	1844      	adds	r4, r0, r1
 800d400:	4434      	add	r4, r6
 800d402:	4620      	mov	r0, r4
 800d404:	f001 fb68 	bl	800ead8 <ucdr_alignment>
 800d408:	4428      	add	r0, r5
 800d40a:	4420      	add	r0, r4
 800d40c:	bd70      	pop	{r4, r5, r6, pc}
 800d40e:	bf00      	nop

0800d410 <_DiffDrive__cdr_deserialize>:
 800d410:	b570      	push	{r4, r5, r6, lr}
 800d412:	460c      	mov	r4, r1
 800d414:	b082      	sub	sp, #8
 800d416:	b1d9      	cbz	r1, 800d450 <_DiffDrive__cdr_deserialize+0x40>
 800d418:	688e      	ldr	r6, [r1, #8]
 800d41a:	ab01      	add	r3, sp, #4
 800d41c:	6809      	ldr	r1, [r1, #0]
 800d41e:	4605      	mov	r5, r0
 800d420:	4632      	mov	r2, r6
 800d422:	f001 fbdb 	bl	800ebdc <ucdr_deserialize_sequence_char>
 800d426:	9b01      	ldr	r3, [sp, #4]
 800d428:	b970      	cbnz	r0, 800d448 <_DiffDrive__cdr_deserialize+0x38>
 800d42a:	429e      	cmp	r6, r3
 800d42c:	d313      	bcc.n	800d456 <_DiffDrive__cdr_deserialize+0x46>
 800d42e:	f104 0110 	add.w	r1, r4, #16
 800d432:	4628      	mov	r0, r5
 800d434:	f001 fa32 	bl	800e89c <ucdr_deserialize_double>
 800d438:	f104 0118 	add.w	r1, r4, #24
 800d43c:	4628      	mov	r0, r5
 800d43e:	b002      	add	sp, #8
 800d440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d444:	f001 ba2a 	b.w	800e89c <ucdr_deserialize_double>
 800d448:	b103      	cbz	r3, 800d44c <_DiffDrive__cdr_deserialize+0x3c>
 800d44a:	3b01      	subs	r3, #1
 800d44c:	6063      	str	r3, [r4, #4]
 800d44e:	e7ee      	b.n	800d42e <_DiffDrive__cdr_deserialize+0x1e>
 800d450:	4608      	mov	r0, r1
 800d452:	b002      	add	sp, #8
 800d454:	bd70      	pop	{r4, r5, r6, pc}
 800d456:	2101      	movs	r1, #1
 800d458:	75a8      	strb	r0, [r5, #22]
 800d45a:	7569      	strb	r1, [r5, #21]
 800d45c:	6060      	str	r0, [r4, #4]
 800d45e:	4628      	mov	r0, r5
 800d460:	f001 fb52 	bl	800eb08 <ucdr_align_to>
 800d464:	9901      	ldr	r1, [sp, #4]
 800d466:	4628      	mov	r0, r5
 800d468:	f001 fb86 	bl	800eb78 <ucdr_advance_buffer>
 800d46c:	e7df      	b.n	800d42e <_DiffDrive__cdr_deserialize+0x1e>
 800d46e:	bf00      	nop

0800d470 <_DiffDrive__max_serialized_size>:
 800d470:	b510      	push	{r4, lr}
 800d472:	2108      	movs	r1, #8
 800d474:	2000      	movs	r0, #0
 800d476:	f001 fb2f 	bl	800ead8 <ucdr_alignment>
 800d47a:	2108      	movs	r1, #8
 800d47c:	1844      	adds	r4, r0, r1
 800d47e:	4620      	mov	r0, r4
 800d480:	f001 fb2a 	bl	800ead8 <ucdr_alignment>
 800d484:	3008      	adds	r0, #8
 800d486:	4420      	add	r0, r4
 800d488:	bd10      	pop	{r4, pc}
 800d48a:	bf00      	nop

0800d48c <_DiffDrive__get_serialized_size>:
 800d48c:	b510      	push	{r4, lr}
 800d48e:	4604      	mov	r4, r0
 800d490:	b190      	cbz	r0, 800d4b8 <_DiffDrive__get_serialized_size+0x2c>
 800d492:	2104      	movs	r1, #4
 800d494:	2000      	movs	r0, #0
 800d496:	f001 fb1f 	bl	800ead8 <ucdr_alignment>
 800d49a:	6863      	ldr	r3, [r4, #4]
 800d49c:	2108      	movs	r1, #8
 800d49e:	3305      	adds	r3, #5
 800d4a0:	181c      	adds	r4, r3, r0
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f001 fb18 	bl	800ead8 <ucdr_alignment>
 800d4a8:	2108      	movs	r1, #8
 800d4aa:	4408      	add	r0, r1
 800d4ac:	4404      	add	r4, r0
 800d4ae:	4620      	mov	r0, r4
 800d4b0:	f001 fb12 	bl	800ead8 <ucdr_alignment>
 800d4b4:	3008      	adds	r0, #8
 800d4b6:	4420      	add	r0, r4
 800d4b8:	bd10      	pop	{r4, pc}
 800d4ba:	bf00      	nop

0800d4bc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive>:
 800d4bc:	4800      	ldr	r0, [pc, #0]	; (800d4c0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__drive_msgs__msg__DiffDrive+0x4>)
 800d4be:	4770      	bx	lr
 800d4c0:	200002bc 	.word	0x200002bc

0800d4c4 <ucdr_serialize_bool>:
 800d4c4:	b538      	push	{r3, r4, r5, lr}
 800d4c6:	460d      	mov	r5, r1
 800d4c8:	2101      	movs	r1, #1
 800d4ca:	4604      	mov	r4, r0
 800d4cc:	f001 fab8 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d4d0:	b148      	cbz	r0, 800d4e6 <ucdr_serialize_bool+0x22>
 800d4d2:	68a3      	ldr	r3, [r4, #8]
 800d4d4:	2101      	movs	r1, #1
 800d4d6:	701d      	strb	r5, [r3, #0]
 800d4d8:	68a2      	ldr	r2, [r4, #8]
 800d4da:	6923      	ldr	r3, [r4, #16]
 800d4dc:	440a      	add	r2, r1
 800d4de:	7561      	strb	r1, [r4, #21]
 800d4e0:	440b      	add	r3, r1
 800d4e2:	60a2      	str	r2, [r4, #8]
 800d4e4:	6123      	str	r3, [r4, #16]
 800d4e6:	7da0      	ldrb	r0, [r4, #22]
 800d4e8:	f080 0001 	eor.w	r0, r0, #1
 800d4ec:	bd38      	pop	{r3, r4, r5, pc}
 800d4ee:	bf00      	nop

0800d4f0 <ucdr_deserialize_bool>:
 800d4f0:	b538      	push	{r3, r4, r5, lr}
 800d4f2:	460d      	mov	r5, r1
 800d4f4:	2101      	movs	r1, #1
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	f001 faa2 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d4fc:	b160      	cbz	r0, 800d518 <ucdr_deserialize_bool+0x28>
 800d4fe:	68a2      	ldr	r2, [r4, #8]
 800d500:	2101      	movs	r1, #1
 800d502:	6923      	ldr	r3, [r4, #16]
 800d504:	f812 0b01 	ldrb.w	r0, [r2], #1
 800d508:	440b      	add	r3, r1
 800d50a:	3800      	subs	r0, #0
 800d50c:	bf18      	it	ne
 800d50e:	2001      	movne	r0, #1
 800d510:	7028      	strb	r0, [r5, #0]
 800d512:	60a2      	str	r2, [r4, #8]
 800d514:	6123      	str	r3, [r4, #16]
 800d516:	7561      	strb	r1, [r4, #21]
 800d518:	7da0      	ldrb	r0, [r4, #22]
 800d51a:	f080 0001 	eor.w	r0, r0, #1
 800d51e:	bd38      	pop	{r3, r4, r5, pc}

0800d520 <ucdr_serialize_uint8_t>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	460d      	mov	r5, r1
 800d524:	2101      	movs	r1, #1
 800d526:	4604      	mov	r4, r0
 800d528:	f001 fa8a 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d52c:	b148      	cbz	r0, 800d542 <ucdr_serialize_uint8_t+0x22>
 800d52e:	68a3      	ldr	r3, [r4, #8]
 800d530:	2101      	movs	r1, #1
 800d532:	701d      	strb	r5, [r3, #0]
 800d534:	68a2      	ldr	r2, [r4, #8]
 800d536:	6923      	ldr	r3, [r4, #16]
 800d538:	440a      	add	r2, r1
 800d53a:	7561      	strb	r1, [r4, #21]
 800d53c:	440b      	add	r3, r1
 800d53e:	60a2      	str	r2, [r4, #8]
 800d540:	6123      	str	r3, [r4, #16]
 800d542:	7da0      	ldrb	r0, [r4, #22]
 800d544:	f080 0001 	eor.w	r0, r0, #1
 800d548:	bd38      	pop	{r3, r4, r5, pc}
 800d54a:	bf00      	nop

0800d54c <ucdr_deserialize_uint8_t>:
 800d54c:	b538      	push	{r3, r4, r5, lr}
 800d54e:	460d      	mov	r5, r1
 800d550:	2101      	movs	r1, #1
 800d552:	4604      	mov	r4, r0
 800d554:	f001 fa74 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d558:	b150      	cbz	r0, 800d570 <ucdr_deserialize_uint8_t+0x24>
 800d55a:	68a3      	ldr	r3, [r4, #8]
 800d55c:	2101      	movs	r1, #1
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	702b      	strb	r3, [r5, #0]
 800d562:	68a2      	ldr	r2, [r4, #8]
 800d564:	6923      	ldr	r3, [r4, #16]
 800d566:	440a      	add	r2, r1
 800d568:	7561      	strb	r1, [r4, #21]
 800d56a:	440b      	add	r3, r1
 800d56c:	60a2      	str	r2, [r4, #8]
 800d56e:	6123      	str	r3, [r4, #16]
 800d570:	7da0      	ldrb	r0, [r4, #22]
 800d572:	f080 0001 	eor.w	r0, r0, #1
 800d576:	bd38      	pop	{r3, r4, r5, pc}

0800d578 <ucdr_serialize_uint16_t>:
 800d578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d57c:	460b      	mov	r3, r1
 800d57e:	b082      	sub	sp, #8
 800d580:	4604      	mov	r4, r0
 800d582:	2102      	movs	r1, #2
 800d584:	f8ad 3006 	strh.w	r3, [sp, #6]
 800d588:	f001 faae 	bl	800eae8 <ucdr_buffer_alignment>
 800d58c:	4601      	mov	r1, r0
 800d58e:	4620      	mov	r0, r4
 800d590:	7d67      	ldrb	r7, [r4, #21]
 800d592:	f001 faf1 	bl	800eb78 <ucdr_advance_buffer>
 800d596:	2102      	movs	r1, #2
 800d598:	4620      	mov	r0, r4
 800d59a:	f001 fa45 	bl	800ea28 <ucdr_check_buffer_available_for>
 800d59e:	bb78      	cbnz	r0, 800d600 <ucdr_serialize_uint16_t+0x88>
 800d5a0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d5a4:	42ab      	cmp	r3, r5
 800d5a6:	d926      	bls.n	800d5f6 <ucdr_serialize_uint16_t+0x7e>
 800d5a8:	1b5e      	subs	r6, r3, r5
 800d5aa:	60a3      	str	r3, [r4, #8]
 800d5ac:	6923      	ldr	r3, [r4, #16]
 800d5ae:	4620      	mov	r0, r4
 800d5b0:	f1c6 0802 	rsb	r8, r6, #2
 800d5b4:	4433      	add	r3, r6
 800d5b6:	4641      	mov	r1, r8
 800d5b8:	6123      	str	r3, [r4, #16]
 800d5ba:	f001 fa41 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d5be:	2800      	cmp	r0, #0
 800d5c0:	d03b      	beq.n	800d63a <ucdr_serialize_uint16_t+0xc2>
 800d5c2:	7d23      	ldrb	r3, [r4, #20]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d04a      	beq.n	800d65e <ucdr_serialize_uint16_t+0xe6>
 800d5c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d5cc:	702b      	strb	r3, [r5, #0]
 800d5ce:	2e00      	cmp	r6, #0
 800d5d0:	d040      	beq.n	800d654 <ucdr_serialize_uint16_t+0xdc>
 800d5d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d5d6:	706b      	strb	r3, [r5, #1]
 800d5d8:	6923      	ldr	r3, [r4, #16]
 800d5da:	2102      	movs	r1, #2
 800d5dc:	68a2      	ldr	r2, [r4, #8]
 800d5de:	3302      	adds	r3, #2
 800d5e0:	7da0      	ldrb	r0, [r4, #22]
 800d5e2:	4442      	add	r2, r8
 800d5e4:	7561      	strb	r1, [r4, #21]
 800d5e6:	1b9e      	subs	r6, r3, r6
 800d5e8:	f080 0001 	eor.w	r0, r0, #1
 800d5ec:	60a2      	str	r2, [r4, #8]
 800d5ee:	6126      	str	r6, [r4, #16]
 800d5f0:	b002      	add	sp, #8
 800d5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f6:	2102      	movs	r1, #2
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f001 fa21 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d5fe:	b190      	cbz	r0, 800d626 <ucdr_serialize_uint16_t+0xae>
 800d600:	7d23      	ldrb	r3, [r4, #20]
 800d602:	2b01      	cmp	r3, #1
 800d604:	68a3      	ldr	r3, [r4, #8]
 800d606:	d014      	beq.n	800d632 <ucdr_serialize_uint16_t+0xba>
 800d608:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d60c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d610:	7019      	strb	r1, [r3, #0]
 800d612:	68a3      	ldr	r3, [r4, #8]
 800d614:	705a      	strb	r2, [r3, #1]
 800d616:	2102      	movs	r1, #2
 800d618:	68a2      	ldr	r2, [r4, #8]
 800d61a:	6923      	ldr	r3, [r4, #16]
 800d61c:	440a      	add	r2, r1
 800d61e:	7561      	strb	r1, [r4, #21]
 800d620:	440b      	add	r3, r1
 800d622:	60a2      	str	r2, [r4, #8]
 800d624:	6123      	str	r3, [r4, #16]
 800d626:	7da0      	ldrb	r0, [r4, #22]
 800d628:	f080 0001 	eor.w	r0, r0, #1
 800d62c:	b002      	add	sp, #8
 800d62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d632:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d636:	801a      	strh	r2, [r3, #0]
 800d638:	e7ed      	b.n	800d616 <ucdr_serialize_uint16_t+0x9e>
 800d63a:	68a2      	ldr	r2, [r4, #8]
 800d63c:	6923      	ldr	r3, [r4, #16]
 800d63e:	7da0      	ldrb	r0, [r4, #22]
 800d640:	1b92      	subs	r2, r2, r6
 800d642:	1b9b      	subs	r3, r3, r6
 800d644:	7567      	strb	r7, [r4, #21]
 800d646:	f080 0001 	eor.w	r0, r0, #1
 800d64a:	60a2      	str	r2, [r4, #8]
 800d64c:	6123      	str	r3, [r4, #16]
 800d64e:	b002      	add	sp, #8
 800d650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d654:	68a3      	ldr	r3, [r4, #8]
 800d656:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d65a:	701a      	strb	r2, [r3, #0]
 800d65c:	e7bc      	b.n	800d5d8 <ucdr_serialize_uint16_t+0x60>
 800d65e:	4628      	mov	r0, r5
 800d660:	f10d 0506 	add.w	r5, sp, #6
 800d664:	4632      	mov	r2, r6
 800d666:	4629      	mov	r1, r5
 800d668:	f00e f9e9 	bl	801ba3e <memcpy>
 800d66c:	4642      	mov	r2, r8
 800d66e:	19a9      	adds	r1, r5, r6
 800d670:	68a0      	ldr	r0, [r4, #8]
 800d672:	f00e f9e4 	bl	801ba3e <memcpy>
 800d676:	e7af      	b.n	800d5d8 <ucdr_serialize_uint16_t+0x60>

0800d678 <ucdr_serialize_endian_uint16_t>:
 800d678:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d67c:	4604      	mov	r4, r0
 800d67e:	b083      	sub	sp, #12
 800d680:	460d      	mov	r5, r1
 800d682:	2102      	movs	r1, #2
 800d684:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d688:	f001 fa2e 	bl	800eae8 <ucdr_buffer_alignment>
 800d68c:	4601      	mov	r1, r0
 800d68e:	4620      	mov	r0, r4
 800d690:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d694:	f001 fa70 	bl	800eb78 <ucdr_advance_buffer>
 800d698:	2102      	movs	r1, #2
 800d69a:	4620      	mov	r0, r4
 800d69c:	f001 f9c4 	bl	800ea28 <ucdr_check_buffer_available_for>
 800d6a0:	bb70      	cbnz	r0, 800d700 <ucdr_serialize_endian_uint16_t+0x88>
 800d6a2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d6a6:	42be      	cmp	r6, r7
 800d6a8:	d925      	bls.n	800d6f6 <ucdr_serialize_endian_uint16_t+0x7e>
 800d6aa:	6923      	ldr	r3, [r4, #16]
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	60a6      	str	r6, [r4, #8]
 800d6b0:	1bf6      	subs	r6, r6, r7
 800d6b2:	4433      	add	r3, r6
 800d6b4:	f1c6 0902 	rsb	r9, r6, #2
 800d6b8:	6123      	str	r3, [r4, #16]
 800d6ba:	4649      	mov	r1, r9
 800d6bc:	f001 f9c0 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d6c0:	2800      	cmp	r0, #0
 800d6c2:	d039      	beq.n	800d738 <ucdr_serialize_endian_uint16_t+0xc0>
 800d6c4:	2d01      	cmp	r5, #1
 800d6c6:	d04a      	beq.n	800d75e <ucdr_serialize_endian_uint16_t+0xe6>
 800d6c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d6cc:	703b      	strb	r3, [r7, #0]
 800d6ce:	2e00      	cmp	r6, #0
 800d6d0:	d040      	beq.n	800d754 <ucdr_serialize_endian_uint16_t+0xdc>
 800d6d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d6d6:	707b      	strb	r3, [r7, #1]
 800d6d8:	6923      	ldr	r3, [r4, #16]
 800d6da:	2102      	movs	r1, #2
 800d6dc:	68a2      	ldr	r2, [r4, #8]
 800d6de:	7da0      	ldrb	r0, [r4, #22]
 800d6e0:	3302      	adds	r3, #2
 800d6e2:	444a      	add	r2, r9
 800d6e4:	7561      	strb	r1, [r4, #21]
 800d6e6:	1b9b      	subs	r3, r3, r6
 800d6e8:	f080 0001 	eor.w	r0, r0, #1
 800d6ec:	60a2      	str	r2, [r4, #8]
 800d6ee:	6123      	str	r3, [r4, #16]
 800d6f0:	b003      	add	sp, #12
 800d6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d6f6:	2102      	movs	r1, #2
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	f001 f9a1 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d6fe:	b188      	cbz	r0, 800d724 <ucdr_serialize_endian_uint16_t+0xac>
 800d700:	2d01      	cmp	r5, #1
 800d702:	68a3      	ldr	r3, [r4, #8]
 800d704:	d014      	beq.n	800d730 <ucdr_serialize_endian_uint16_t+0xb8>
 800d706:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800d70a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d70e:	7019      	strb	r1, [r3, #0]
 800d710:	68a3      	ldr	r3, [r4, #8]
 800d712:	705a      	strb	r2, [r3, #1]
 800d714:	2102      	movs	r1, #2
 800d716:	68a2      	ldr	r2, [r4, #8]
 800d718:	6923      	ldr	r3, [r4, #16]
 800d71a:	440a      	add	r2, r1
 800d71c:	7561      	strb	r1, [r4, #21]
 800d71e:	440b      	add	r3, r1
 800d720:	60a2      	str	r2, [r4, #8]
 800d722:	6123      	str	r3, [r4, #16]
 800d724:	7da0      	ldrb	r0, [r4, #22]
 800d726:	f080 0001 	eor.w	r0, r0, #1
 800d72a:	b003      	add	sp, #12
 800d72c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d730:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800d734:	801a      	strh	r2, [r3, #0]
 800d736:	e7ed      	b.n	800d714 <ucdr_serialize_endian_uint16_t+0x9c>
 800d738:	68a2      	ldr	r2, [r4, #8]
 800d73a:	6923      	ldr	r3, [r4, #16]
 800d73c:	7da0      	ldrb	r0, [r4, #22]
 800d73e:	1b92      	subs	r2, r2, r6
 800d740:	1b9b      	subs	r3, r3, r6
 800d742:	f884 8015 	strb.w	r8, [r4, #21]
 800d746:	f080 0001 	eor.w	r0, r0, #1
 800d74a:	60a2      	str	r2, [r4, #8]
 800d74c:	6123      	str	r3, [r4, #16]
 800d74e:	b003      	add	sp, #12
 800d750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d754:	68a3      	ldr	r3, [r4, #8]
 800d756:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d75a:	701a      	strb	r2, [r3, #0]
 800d75c:	e7bc      	b.n	800d6d8 <ucdr_serialize_endian_uint16_t+0x60>
 800d75e:	f10d 0506 	add.w	r5, sp, #6
 800d762:	4632      	mov	r2, r6
 800d764:	4638      	mov	r0, r7
 800d766:	4629      	mov	r1, r5
 800d768:	f00e f969 	bl	801ba3e <memcpy>
 800d76c:	464a      	mov	r2, r9
 800d76e:	19a9      	adds	r1, r5, r6
 800d770:	68a0      	ldr	r0, [r4, #8]
 800d772:	f00e f964 	bl	801ba3e <memcpy>
 800d776:	e7af      	b.n	800d6d8 <ucdr_serialize_endian_uint16_t+0x60>

0800d778 <ucdr_deserialize_uint16_t>:
 800d778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d77c:	4604      	mov	r4, r0
 800d77e:	460d      	mov	r5, r1
 800d780:	2102      	movs	r1, #2
 800d782:	f001 f9b1 	bl	800eae8 <ucdr_buffer_alignment>
 800d786:	4601      	mov	r1, r0
 800d788:	4620      	mov	r0, r4
 800d78a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d78e:	f001 f9f3 	bl	800eb78 <ucdr_advance_buffer>
 800d792:	2102      	movs	r1, #2
 800d794:	4620      	mov	r0, r4
 800d796:	f001 f947 	bl	800ea28 <ucdr_check_buffer_available_for>
 800d79a:	bb60      	cbnz	r0, 800d7f6 <ucdr_deserialize_uint16_t+0x7e>
 800d79c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800d7a0:	42be      	cmp	r6, r7
 800d7a2:	d923      	bls.n	800d7ec <ucdr_deserialize_uint16_t+0x74>
 800d7a4:	6923      	ldr	r3, [r4, #16]
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	60a6      	str	r6, [r4, #8]
 800d7aa:	1bf6      	subs	r6, r6, r7
 800d7ac:	4433      	add	r3, r6
 800d7ae:	f1c6 0902 	rsb	r9, r6, #2
 800d7b2:	6123      	str	r3, [r4, #16]
 800d7b4:	4649      	mov	r1, r9
 800d7b6:	f001 f943 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d7ba:	2800      	cmp	r0, #0
 800d7bc:	d034      	beq.n	800d828 <ucdr_deserialize_uint16_t+0xb0>
 800d7be:	7d23      	ldrb	r3, [r4, #20]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d042      	beq.n	800d84a <ucdr_deserialize_uint16_t+0xd2>
 800d7c4:	787b      	ldrb	r3, [r7, #1]
 800d7c6:	702b      	strb	r3, [r5, #0]
 800d7c8:	2e00      	cmp	r6, #0
 800d7ca:	d03a      	beq.n	800d842 <ucdr_deserialize_uint16_t+0xca>
 800d7cc:	783b      	ldrb	r3, [r7, #0]
 800d7ce:	706b      	strb	r3, [r5, #1]
 800d7d0:	6923      	ldr	r3, [r4, #16]
 800d7d2:	2102      	movs	r1, #2
 800d7d4:	68a2      	ldr	r2, [r4, #8]
 800d7d6:	3302      	adds	r3, #2
 800d7d8:	7da0      	ldrb	r0, [r4, #22]
 800d7da:	444a      	add	r2, r9
 800d7dc:	7561      	strb	r1, [r4, #21]
 800d7de:	1b9b      	subs	r3, r3, r6
 800d7e0:	f080 0001 	eor.w	r0, r0, #1
 800d7e4:	60a2      	str	r2, [r4, #8]
 800d7e6:	6123      	str	r3, [r4, #16]
 800d7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7ec:	2102      	movs	r1, #2
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f001 f926 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d7f4:	b180      	cbz	r0, 800d818 <ucdr_deserialize_uint16_t+0xa0>
 800d7f6:	7d23      	ldrb	r3, [r4, #20]
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	68a3      	ldr	r3, [r4, #8]
 800d7fc:	d011      	beq.n	800d822 <ucdr_deserialize_uint16_t+0xaa>
 800d7fe:	785b      	ldrb	r3, [r3, #1]
 800d800:	702b      	strb	r3, [r5, #0]
 800d802:	68a3      	ldr	r3, [r4, #8]
 800d804:	781b      	ldrb	r3, [r3, #0]
 800d806:	706b      	strb	r3, [r5, #1]
 800d808:	2102      	movs	r1, #2
 800d80a:	68a2      	ldr	r2, [r4, #8]
 800d80c:	6923      	ldr	r3, [r4, #16]
 800d80e:	440a      	add	r2, r1
 800d810:	7561      	strb	r1, [r4, #21]
 800d812:	440b      	add	r3, r1
 800d814:	60a2      	str	r2, [r4, #8]
 800d816:	6123      	str	r3, [r4, #16]
 800d818:	7da0      	ldrb	r0, [r4, #22]
 800d81a:	f080 0001 	eor.w	r0, r0, #1
 800d81e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	802b      	strh	r3, [r5, #0]
 800d826:	e7ef      	b.n	800d808 <ucdr_deserialize_uint16_t+0x90>
 800d828:	68a2      	ldr	r2, [r4, #8]
 800d82a:	6923      	ldr	r3, [r4, #16]
 800d82c:	1b92      	subs	r2, r2, r6
 800d82e:	7da0      	ldrb	r0, [r4, #22]
 800d830:	1b9b      	subs	r3, r3, r6
 800d832:	f884 8015 	strb.w	r8, [r4, #21]
 800d836:	f080 0001 	eor.w	r0, r0, #1
 800d83a:	60a2      	str	r2, [r4, #8]
 800d83c:	6123      	str	r3, [r4, #16]
 800d83e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d842:	68a3      	ldr	r3, [r4, #8]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	706b      	strb	r3, [r5, #1]
 800d848:	e7c2      	b.n	800d7d0 <ucdr_deserialize_uint16_t+0x58>
 800d84a:	4639      	mov	r1, r7
 800d84c:	4632      	mov	r2, r6
 800d84e:	4628      	mov	r0, r5
 800d850:	f00e f8f5 	bl	801ba3e <memcpy>
 800d854:	464a      	mov	r2, r9
 800d856:	19a8      	adds	r0, r5, r6
 800d858:	68a1      	ldr	r1, [r4, #8]
 800d85a:	f00e f8f0 	bl	801ba3e <memcpy>
 800d85e:	e7b7      	b.n	800d7d0 <ucdr_deserialize_uint16_t+0x58>

0800d860 <ucdr_deserialize_endian_uint16_t>:
 800d860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d864:	4604      	mov	r4, r0
 800d866:	460e      	mov	r6, r1
 800d868:	2102      	movs	r1, #2
 800d86a:	4615      	mov	r5, r2
 800d86c:	f001 f93c 	bl	800eae8 <ucdr_buffer_alignment>
 800d870:	4601      	mov	r1, r0
 800d872:	4620      	mov	r0, r4
 800d874:	f894 8015 	ldrb.w	r8, [r4, #21]
 800d878:	f001 f97e 	bl	800eb78 <ucdr_advance_buffer>
 800d87c:	2102      	movs	r1, #2
 800d87e:	4620      	mov	r0, r4
 800d880:	f001 f8d2 	bl	800ea28 <ucdr_check_buffer_available_for>
 800d884:	bb70      	cbnz	r0, 800d8e4 <ucdr_deserialize_endian_uint16_t+0x84>
 800d886:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 800d88a:	454f      	cmp	r7, r9
 800d88c:	d925      	bls.n	800d8da <ucdr_deserialize_endian_uint16_t+0x7a>
 800d88e:	6923      	ldr	r3, [r4, #16]
 800d890:	4620      	mov	r0, r4
 800d892:	60a7      	str	r7, [r4, #8]
 800d894:	eba7 0709 	sub.w	r7, r7, r9
 800d898:	443b      	add	r3, r7
 800d89a:	f1c7 0a02 	rsb	sl, r7, #2
 800d89e:	6123      	str	r3, [r4, #16]
 800d8a0:	4651      	mov	r1, sl
 800d8a2:	f001 f8cd 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	d034      	beq.n	800d914 <ucdr_deserialize_endian_uint16_t+0xb4>
 800d8aa:	2e01      	cmp	r6, #1
 800d8ac:	d043      	beq.n	800d936 <ucdr_deserialize_endian_uint16_t+0xd6>
 800d8ae:	f899 3001 	ldrb.w	r3, [r9, #1]
 800d8b2:	702b      	strb	r3, [r5, #0]
 800d8b4:	2f00      	cmp	r7, #0
 800d8b6:	d03a      	beq.n	800d92e <ucdr_deserialize_endian_uint16_t+0xce>
 800d8b8:	f899 3000 	ldrb.w	r3, [r9]
 800d8bc:	706b      	strb	r3, [r5, #1]
 800d8be:	6923      	ldr	r3, [r4, #16]
 800d8c0:	2102      	movs	r1, #2
 800d8c2:	68a2      	ldr	r2, [r4, #8]
 800d8c4:	3302      	adds	r3, #2
 800d8c6:	7da0      	ldrb	r0, [r4, #22]
 800d8c8:	4452      	add	r2, sl
 800d8ca:	7561      	strb	r1, [r4, #21]
 800d8cc:	1bdb      	subs	r3, r3, r7
 800d8ce:	f080 0001 	eor.w	r0, r0, #1
 800d8d2:	60a2      	str	r2, [r4, #8]
 800d8d4:	6123      	str	r3, [r4, #16]
 800d8d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8da:	2102      	movs	r1, #2
 800d8dc:	4620      	mov	r0, r4
 800d8de:	f001 f8af 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d8e2:	b178      	cbz	r0, 800d904 <ucdr_deserialize_endian_uint16_t+0xa4>
 800d8e4:	2e01      	cmp	r6, #1
 800d8e6:	68a3      	ldr	r3, [r4, #8]
 800d8e8:	d011      	beq.n	800d90e <ucdr_deserialize_endian_uint16_t+0xae>
 800d8ea:	785b      	ldrb	r3, [r3, #1]
 800d8ec:	702b      	strb	r3, [r5, #0]
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	706b      	strb	r3, [r5, #1]
 800d8f4:	2102      	movs	r1, #2
 800d8f6:	68a2      	ldr	r2, [r4, #8]
 800d8f8:	6923      	ldr	r3, [r4, #16]
 800d8fa:	440a      	add	r2, r1
 800d8fc:	7561      	strb	r1, [r4, #21]
 800d8fe:	440b      	add	r3, r1
 800d900:	60a2      	str	r2, [r4, #8]
 800d902:	6123      	str	r3, [r4, #16]
 800d904:	7da0      	ldrb	r0, [r4, #22]
 800d906:	f080 0001 	eor.w	r0, r0, #1
 800d90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d90e:	881b      	ldrh	r3, [r3, #0]
 800d910:	802b      	strh	r3, [r5, #0]
 800d912:	e7ef      	b.n	800d8f4 <ucdr_deserialize_endian_uint16_t+0x94>
 800d914:	68a2      	ldr	r2, [r4, #8]
 800d916:	6923      	ldr	r3, [r4, #16]
 800d918:	1bd2      	subs	r2, r2, r7
 800d91a:	7da0      	ldrb	r0, [r4, #22]
 800d91c:	1bdb      	subs	r3, r3, r7
 800d91e:	f884 8015 	strb.w	r8, [r4, #21]
 800d922:	f080 0001 	eor.w	r0, r0, #1
 800d926:	60a2      	str	r2, [r4, #8]
 800d928:	6123      	str	r3, [r4, #16]
 800d92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d92e:	68a3      	ldr	r3, [r4, #8]
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	706b      	strb	r3, [r5, #1]
 800d934:	e7c3      	b.n	800d8be <ucdr_deserialize_endian_uint16_t+0x5e>
 800d936:	4649      	mov	r1, r9
 800d938:	463a      	mov	r2, r7
 800d93a:	4628      	mov	r0, r5
 800d93c:	f00e f87f 	bl	801ba3e <memcpy>
 800d940:	4652      	mov	r2, sl
 800d942:	19e8      	adds	r0, r5, r7
 800d944:	68a1      	ldr	r1, [r4, #8]
 800d946:	f00e f87a 	bl	801ba3e <memcpy>
 800d94a:	e7b8      	b.n	800d8be <ucdr_deserialize_endian_uint16_t+0x5e>

0800d94c <ucdr_serialize_uint32_t>:
 800d94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	4604      	mov	r4, r0
 800d954:	9101      	str	r1, [sp, #4]
 800d956:	2104      	movs	r1, #4
 800d958:	f001 f8c6 	bl	800eae8 <ucdr_buffer_alignment>
 800d95c:	4601      	mov	r1, r0
 800d95e:	4620      	mov	r0, r4
 800d960:	7d67      	ldrb	r7, [r4, #21]
 800d962:	f001 f909 	bl	800eb78 <ucdr_advance_buffer>
 800d966:	2104      	movs	r1, #4
 800d968:	4620      	mov	r0, r4
 800d96a:	f001 f85d 	bl	800ea28 <ucdr_check_buffer_available_for>
 800d96e:	2800      	cmp	r0, #0
 800d970:	d139      	bne.n	800d9e6 <ucdr_serialize_uint32_t+0x9a>
 800d972:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800d976:	42ab      	cmp	r3, r5
 800d978:	d930      	bls.n	800d9dc <ucdr_serialize_uint32_t+0x90>
 800d97a:	1b5e      	subs	r6, r3, r5
 800d97c:	60a3      	str	r3, [r4, #8]
 800d97e:	6923      	ldr	r3, [r4, #16]
 800d980:	4620      	mov	r0, r4
 800d982:	f1c6 0804 	rsb	r8, r6, #4
 800d986:	4433      	add	r3, r6
 800d988:	4641      	mov	r1, r8
 800d98a:	6123      	str	r3, [r4, #16]
 800d98c:	f001 f858 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d990:	2800      	cmp	r0, #0
 800d992:	d04c      	beq.n	800da2e <ucdr_serialize_uint32_t+0xe2>
 800d994:	7d23      	ldrb	r3, [r4, #20]
 800d996:	2b01      	cmp	r3, #1
 800d998:	d063      	beq.n	800da62 <ucdr_serialize_uint32_t+0x116>
 800d99a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800d99e:	702b      	strb	r3, [r5, #0]
 800d9a0:	2e00      	cmp	r6, #0
 800d9a2:	d051      	beq.n	800da48 <ucdr_serialize_uint32_t+0xfc>
 800d9a4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d9a8:	2e01      	cmp	r6, #1
 800d9aa:	706b      	strb	r3, [r5, #1]
 800d9ac:	d050      	beq.n	800da50 <ucdr_serialize_uint32_t+0x104>
 800d9ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800d9b2:	2e02      	cmp	r6, #2
 800d9b4:	70ab      	strb	r3, [r5, #2]
 800d9b6:	d04f      	beq.n	800da58 <ucdr_serialize_uint32_t+0x10c>
 800d9b8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d9bc:	70eb      	strb	r3, [r5, #3]
 800d9be:	6923      	ldr	r3, [r4, #16]
 800d9c0:	2104      	movs	r1, #4
 800d9c2:	68a2      	ldr	r2, [r4, #8]
 800d9c4:	3304      	adds	r3, #4
 800d9c6:	7da0      	ldrb	r0, [r4, #22]
 800d9c8:	4442      	add	r2, r8
 800d9ca:	7561      	strb	r1, [r4, #21]
 800d9cc:	1b9e      	subs	r6, r3, r6
 800d9ce:	f080 0001 	eor.w	r0, r0, #1
 800d9d2:	60a2      	str	r2, [r4, #8]
 800d9d4:	6126      	str	r6, [r4, #16]
 800d9d6:	b002      	add	sp, #8
 800d9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9dc:	2104      	movs	r1, #4
 800d9de:	4620      	mov	r0, r4
 800d9e0:	f001 f82e 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800d9e4:	b1d0      	cbz	r0, 800da1c <ucdr_serialize_uint32_t+0xd0>
 800d9e6:	7d23      	ldrb	r3, [r4, #20]
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	68a3      	ldr	r3, [r4, #8]
 800d9ec:	d01c      	beq.n	800da28 <ucdr_serialize_uint32_t+0xdc>
 800d9ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800d9f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800d9f6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800d9fa:	7018      	strb	r0, [r3, #0]
 800d9fc:	68a3      	ldr	r3, [r4, #8]
 800d9fe:	705a      	strb	r2, [r3, #1]
 800da00:	68a3      	ldr	r3, [r4, #8]
 800da02:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da06:	7099      	strb	r1, [r3, #2]
 800da08:	68a3      	ldr	r3, [r4, #8]
 800da0a:	70da      	strb	r2, [r3, #3]
 800da0c:	2104      	movs	r1, #4
 800da0e:	68a2      	ldr	r2, [r4, #8]
 800da10:	6923      	ldr	r3, [r4, #16]
 800da12:	440a      	add	r2, r1
 800da14:	7561      	strb	r1, [r4, #21]
 800da16:	440b      	add	r3, r1
 800da18:	60a2      	str	r2, [r4, #8]
 800da1a:	6123      	str	r3, [r4, #16]
 800da1c:	7da0      	ldrb	r0, [r4, #22]
 800da1e:	f080 0001 	eor.w	r0, r0, #1
 800da22:	b002      	add	sp, #8
 800da24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da28:	9a01      	ldr	r2, [sp, #4]
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	e7ee      	b.n	800da0c <ucdr_serialize_uint32_t+0xc0>
 800da2e:	68a2      	ldr	r2, [r4, #8]
 800da30:	6923      	ldr	r3, [r4, #16]
 800da32:	7da0      	ldrb	r0, [r4, #22]
 800da34:	1b92      	subs	r2, r2, r6
 800da36:	1b9b      	subs	r3, r3, r6
 800da38:	7567      	strb	r7, [r4, #21]
 800da3a:	f080 0001 	eor.w	r0, r0, #1
 800da3e:	60a2      	str	r2, [r4, #8]
 800da40:	6123      	str	r3, [r4, #16]
 800da42:	b002      	add	sp, #8
 800da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da48:	68a3      	ldr	r3, [r4, #8]
 800da4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800da4e:	701a      	strb	r2, [r3, #0]
 800da50:	68a3      	ldr	r3, [r4, #8]
 800da52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800da56:	701a      	strb	r2, [r3, #0]
 800da58:	68a3      	ldr	r3, [r4, #8]
 800da5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800da5e:	701a      	strb	r2, [r3, #0]
 800da60:	e7ad      	b.n	800d9be <ucdr_serialize_uint32_t+0x72>
 800da62:	4628      	mov	r0, r5
 800da64:	ad01      	add	r5, sp, #4
 800da66:	4632      	mov	r2, r6
 800da68:	4629      	mov	r1, r5
 800da6a:	f00d ffe8 	bl	801ba3e <memcpy>
 800da6e:	4642      	mov	r2, r8
 800da70:	19a9      	adds	r1, r5, r6
 800da72:	68a0      	ldr	r0, [r4, #8]
 800da74:	f00d ffe3 	bl	801ba3e <memcpy>
 800da78:	e7a1      	b.n	800d9be <ucdr_serialize_uint32_t+0x72>
 800da7a:	bf00      	nop

0800da7c <ucdr_serialize_endian_uint32_t>:
 800da7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800da80:	4604      	mov	r4, r0
 800da82:	b083      	sub	sp, #12
 800da84:	460d      	mov	r5, r1
 800da86:	2104      	movs	r1, #4
 800da88:	9201      	str	r2, [sp, #4]
 800da8a:	f001 f82d 	bl	800eae8 <ucdr_buffer_alignment>
 800da8e:	4601      	mov	r1, r0
 800da90:	4620      	mov	r0, r4
 800da92:	f894 8015 	ldrb.w	r8, [r4, #21]
 800da96:	f001 f86f 	bl	800eb78 <ucdr_advance_buffer>
 800da9a:	2104      	movs	r1, #4
 800da9c:	4620      	mov	r0, r4
 800da9e:	f000 ffc3 	bl	800ea28 <ucdr_check_buffer_available_for>
 800daa2:	2800      	cmp	r0, #0
 800daa4:	d138      	bne.n	800db18 <ucdr_serialize_endian_uint32_t+0x9c>
 800daa6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800daaa:	42b7      	cmp	r7, r6
 800daac:	d92f      	bls.n	800db0e <ucdr_serialize_endian_uint32_t+0x92>
 800daae:	6923      	ldr	r3, [r4, #16]
 800dab0:	4620      	mov	r0, r4
 800dab2:	60a7      	str	r7, [r4, #8]
 800dab4:	1bbf      	subs	r7, r7, r6
 800dab6:	443b      	add	r3, r7
 800dab8:	f1c7 0904 	rsb	r9, r7, #4
 800dabc:	6123      	str	r3, [r4, #16]
 800dabe:	4649      	mov	r1, r9
 800dac0:	f000 ffbe 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	d04a      	beq.n	800db5e <ucdr_serialize_endian_uint32_t+0xe2>
 800dac8:	2d01      	cmp	r5, #1
 800daca:	d063      	beq.n	800db94 <ucdr_serialize_endian_uint32_t+0x118>
 800dacc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dad0:	7033      	strb	r3, [r6, #0]
 800dad2:	2f00      	cmp	r7, #0
 800dad4:	d051      	beq.n	800db7a <ucdr_serialize_endian_uint32_t+0xfe>
 800dad6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dada:	2f01      	cmp	r7, #1
 800dadc:	7073      	strb	r3, [r6, #1]
 800dade:	d050      	beq.n	800db82 <ucdr_serialize_endian_uint32_t+0x106>
 800dae0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800dae4:	2f02      	cmp	r7, #2
 800dae6:	70b3      	strb	r3, [r6, #2]
 800dae8:	d04f      	beq.n	800db8a <ucdr_serialize_endian_uint32_t+0x10e>
 800daea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800daee:	70f3      	strb	r3, [r6, #3]
 800daf0:	6923      	ldr	r3, [r4, #16]
 800daf2:	2104      	movs	r1, #4
 800daf4:	68a2      	ldr	r2, [r4, #8]
 800daf6:	7da0      	ldrb	r0, [r4, #22]
 800daf8:	3304      	adds	r3, #4
 800dafa:	444a      	add	r2, r9
 800dafc:	7561      	strb	r1, [r4, #21]
 800dafe:	1bdb      	subs	r3, r3, r7
 800db00:	f080 0001 	eor.w	r0, r0, #1
 800db04:	60a2      	str	r2, [r4, #8]
 800db06:	6123      	str	r3, [r4, #16]
 800db08:	b003      	add	sp, #12
 800db0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db0e:	2104      	movs	r1, #4
 800db10:	4620      	mov	r0, r4
 800db12:	f000 ff95 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800db16:	b1c8      	cbz	r0, 800db4c <ucdr_serialize_endian_uint32_t+0xd0>
 800db18:	2d01      	cmp	r5, #1
 800db1a:	68a3      	ldr	r3, [r4, #8]
 800db1c:	d01c      	beq.n	800db58 <ucdr_serialize_endian_uint32_t+0xdc>
 800db1e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800db22:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db26:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800db2a:	7018      	strb	r0, [r3, #0]
 800db2c:	68a3      	ldr	r3, [r4, #8]
 800db2e:	705a      	strb	r2, [r3, #1]
 800db30:	68a3      	ldr	r3, [r4, #8]
 800db32:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800db36:	7099      	strb	r1, [r3, #2]
 800db38:	68a3      	ldr	r3, [r4, #8]
 800db3a:	70da      	strb	r2, [r3, #3]
 800db3c:	2104      	movs	r1, #4
 800db3e:	68a2      	ldr	r2, [r4, #8]
 800db40:	6923      	ldr	r3, [r4, #16]
 800db42:	440a      	add	r2, r1
 800db44:	7561      	strb	r1, [r4, #21]
 800db46:	440b      	add	r3, r1
 800db48:	60a2      	str	r2, [r4, #8]
 800db4a:	6123      	str	r3, [r4, #16]
 800db4c:	7da0      	ldrb	r0, [r4, #22]
 800db4e:	f080 0001 	eor.w	r0, r0, #1
 800db52:	b003      	add	sp, #12
 800db54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db58:	9a01      	ldr	r2, [sp, #4]
 800db5a:	601a      	str	r2, [r3, #0]
 800db5c:	e7ee      	b.n	800db3c <ucdr_serialize_endian_uint32_t+0xc0>
 800db5e:	68a2      	ldr	r2, [r4, #8]
 800db60:	6923      	ldr	r3, [r4, #16]
 800db62:	7da0      	ldrb	r0, [r4, #22]
 800db64:	1bd2      	subs	r2, r2, r7
 800db66:	1bdb      	subs	r3, r3, r7
 800db68:	f884 8015 	strb.w	r8, [r4, #21]
 800db6c:	f080 0001 	eor.w	r0, r0, #1
 800db70:	60a2      	str	r2, [r4, #8]
 800db72:	6123      	str	r3, [r4, #16]
 800db74:	b003      	add	sp, #12
 800db76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db7a:	68a3      	ldr	r3, [r4, #8]
 800db7c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800db80:	701a      	strb	r2, [r3, #0]
 800db82:	68a3      	ldr	r3, [r4, #8]
 800db84:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800db88:	701a      	strb	r2, [r3, #0]
 800db8a:	68a3      	ldr	r3, [r4, #8]
 800db8c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800db90:	701a      	strb	r2, [r3, #0]
 800db92:	e7ad      	b.n	800daf0 <ucdr_serialize_endian_uint32_t+0x74>
 800db94:	ad01      	add	r5, sp, #4
 800db96:	463a      	mov	r2, r7
 800db98:	4630      	mov	r0, r6
 800db9a:	4629      	mov	r1, r5
 800db9c:	f00d ff4f 	bl	801ba3e <memcpy>
 800dba0:	464a      	mov	r2, r9
 800dba2:	19e9      	adds	r1, r5, r7
 800dba4:	68a0      	ldr	r0, [r4, #8]
 800dba6:	f00d ff4a 	bl	801ba3e <memcpy>
 800dbaa:	e7a1      	b.n	800daf0 <ucdr_serialize_endian_uint32_t+0x74>

0800dbac <ucdr_deserialize_uint32_t>:
 800dbac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	460d      	mov	r5, r1
 800dbb4:	2104      	movs	r1, #4
 800dbb6:	f000 ff97 	bl	800eae8 <ucdr_buffer_alignment>
 800dbba:	4601      	mov	r1, r0
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dbc2:	f000 ffd9 	bl	800eb78 <ucdr_advance_buffer>
 800dbc6:	2104      	movs	r1, #4
 800dbc8:	4620      	mov	r0, r4
 800dbca:	f000 ff2d 	bl	800ea28 <ucdr_check_buffer_available_for>
 800dbce:	2800      	cmp	r0, #0
 800dbd0:	d138      	bne.n	800dc44 <ucdr_deserialize_uint32_t+0x98>
 800dbd2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800dbd6:	42b7      	cmp	r7, r6
 800dbd8:	d92f      	bls.n	800dc3a <ucdr_deserialize_uint32_t+0x8e>
 800dbda:	6923      	ldr	r3, [r4, #16]
 800dbdc:	4620      	mov	r0, r4
 800dbde:	60a7      	str	r7, [r4, #8]
 800dbe0:	1bbf      	subs	r7, r7, r6
 800dbe2:	443b      	add	r3, r7
 800dbe4:	f1c7 0904 	rsb	r9, r7, #4
 800dbe8:	6123      	str	r3, [r4, #16]
 800dbea:	4649      	mov	r1, r9
 800dbec:	f000 ff28 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800dbf0:	2800      	cmp	r0, #0
 800dbf2:	d046      	beq.n	800dc82 <ucdr_deserialize_uint32_t+0xd6>
 800dbf4:	7d23      	ldrb	r3, [r4, #20]
 800dbf6:	2b01      	cmp	r3, #1
 800dbf8:	d05c      	beq.n	800dcb4 <ucdr_deserialize_uint32_t+0x108>
 800dbfa:	78f3      	ldrb	r3, [r6, #3]
 800dbfc:	702b      	strb	r3, [r5, #0]
 800dbfe:	2f00      	cmp	r7, #0
 800dc00:	d04c      	beq.n	800dc9c <ucdr_deserialize_uint32_t+0xf0>
 800dc02:	78b3      	ldrb	r3, [r6, #2]
 800dc04:	2f01      	cmp	r7, #1
 800dc06:	706b      	strb	r3, [r5, #1]
 800dc08:	f105 0302 	add.w	r3, r5, #2
 800dc0c:	d04a      	beq.n	800dca4 <ucdr_deserialize_uint32_t+0xf8>
 800dc0e:	7873      	ldrb	r3, [r6, #1]
 800dc10:	2f02      	cmp	r7, #2
 800dc12:	70ab      	strb	r3, [r5, #2]
 800dc14:	f105 0303 	add.w	r3, r5, #3
 800dc18:	d048      	beq.n	800dcac <ucdr_deserialize_uint32_t+0x100>
 800dc1a:	7833      	ldrb	r3, [r6, #0]
 800dc1c:	70eb      	strb	r3, [r5, #3]
 800dc1e:	6923      	ldr	r3, [r4, #16]
 800dc20:	2104      	movs	r1, #4
 800dc22:	68a2      	ldr	r2, [r4, #8]
 800dc24:	3304      	adds	r3, #4
 800dc26:	7da0      	ldrb	r0, [r4, #22]
 800dc28:	444a      	add	r2, r9
 800dc2a:	7561      	strb	r1, [r4, #21]
 800dc2c:	1bdb      	subs	r3, r3, r7
 800dc2e:	f080 0001 	eor.w	r0, r0, #1
 800dc32:	60a2      	str	r2, [r4, #8]
 800dc34:	6123      	str	r3, [r4, #16]
 800dc36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc3a:	2104      	movs	r1, #4
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	f000 feff 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800dc42:	b1b0      	cbz	r0, 800dc72 <ucdr_deserialize_uint32_t+0xc6>
 800dc44:	7d23      	ldrb	r3, [r4, #20]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	68a3      	ldr	r3, [r4, #8]
 800dc4a:	d017      	beq.n	800dc7c <ucdr_deserialize_uint32_t+0xd0>
 800dc4c:	78db      	ldrb	r3, [r3, #3]
 800dc4e:	702b      	strb	r3, [r5, #0]
 800dc50:	68a3      	ldr	r3, [r4, #8]
 800dc52:	789b      	ldrb	r3, [r3, #2]
 800dc54:	706b      	strb	r3, [r5, #1]
 800dc56:	68a3      	ldr	r3, [r4, #8]
 800dc58:	785b      	ldrb	r3, [r3, #1]
 800dc5a:	70ab      	strb	r3, [r5, #2]
 800dc5c:	68a3      	ldr	r3, [r4, #8]
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	70eb      	strb	r3, [r5, #3]
 800dc62:	2104      	movs	r1, #4
 800dc64:	68a2      	ldr	r2, [r4, #8]
 800dc66:	6923      	ldr	r3, [r4, #16]
 800dc68:	440a      	add	r2, r1
 800dc6a:	7561      	strb	r1, [r4, #21]
 800dc6c:	440b      	add	r3, r1
 800dc6e:	60a2      	str	r2, [r4, #8]
 800dc70:	6123      	str	r3, [r4, #16]
 800dc72:	7da0      	ldrb	r0, [r4, #22]
 800dc74:	f080 0001 	eor.w	r0, r0, #1
 800dc78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	602b      	str	r3, [r5, #0]
 800dc80:	e7ef      	b.n	800dc62 <ucdr_deserialize_uint32_t+0xb6>
 800dc82:	68a2      	ldr	r2, [r4, #8]
 800dc84:	6923      	ldr	r3, [r4, #16]
 800dc86:	1bd2      	subs	r2, r2, r7
 800dc88:	7da0      	ldrb	r0, [r4, #22]
 800dc8a:	1bdb      	subs	r3, r3, r7
 800dc8c:	f884 8015 	strb.w	r8, [r4, #21]
 800dc90:	f080 0001 	eor.w	r0, r0, #1
 800dc94:	60a2      	str	r2, [r4, #8]
 800dc96:	6123      	str	r3, [r4, #16]
 800dc98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc9c:	68a3      	ldr	r3, [r4, #8]
 800dc9e:	789b      	ldrb	r3, [r3, #2]
 800dca0:	706b      	strb	r3, [r5, #1]
 800dca2:	1cab      	adds	r3, r5, #2
 800dca4:	68a2      	ldr	r2, [r4, #8]
 800dca6:	7852      	ldrb	r2, [r2, #1]
 800dca8:	f803 2b01 	strb.w	r2, [r3], #1
 800dcac:	68a2      	ldr	r2, [r4, #8]
 800dcae:	7812      	ldrb	r2, [r2, #0]
 800dcb0:	701a      	strb	r2, [r3, #0]
 800dcb2:	e7b4      	b.n	800dc1e <ucdr_deserialize_uint32_t+0x72>
 800dcb4:	4631      	mov	r1, r6
 800dcb6:	463a      	mov	r2, r7
 800dcb8:	4628      	mov	r0, r5
 800dcba:	f00d fec0 	bl	801ba3e <memcpy>
 800dcbe:	464a      	mov	r2, r9
 800dcc0:	19e8      	adds	r0, r5, r7
 800dcc2:	68a1      	ldr	r1, [r4, #8]
 800dcc4:	f00d febb 	bl	801ba3e <memcpy>
 800dcc8:	e7a9      	b.n	800dc1e <ucdr_deserialize_uint32_t+0x72>
 800dcca:	bf00      	nop

0800dccc <ucdr_deserialize_endian_uint32_t>:
 800dccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd0:	4604      	mov	r4, r0
 800dcd2:	460e      	mov	r6, r1
 800dcd4:	2104      	movs	r1, #4
 800dcd6:	4615      	mov	r5, r2
 800dcd8:	f000 ff06 	bl	800eae8 <ucdr_buffer_alignment>
 800dcdc:	4601      	mov	r1, r0
 800dcde:	4620      	mov	r0, r4
 800dce0:	f894 8015 	ldrb.w	r8, [r4, #21]
 800dce4:	f000 ff48 	bl	800eb78 <ucdr_advance_buffer>
 800dce8:	2104      	movs	r1, #4
 800dcea:	4620      	mov	r0, r4
 800dcec:	f000 fe9c 	bl	800ea28 <ucdr_check_buffer_available_for>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	d13c      	bne.n	800dd6e <ucdr_deserialize_endian_uint32_t+0xa2>
 800dcf4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800dcf8:	42bb      	cmp	r3, r7
 800dcfa:	d933      	bls.n	800dd64 <ucdr_deserialize_endian_uint32_t+0x98>
 800dcfc:	eba3 0907 	sub.w	r9, r3, r7
 800dd00:	60a3      	str	r3, [r4, #8]
 800dd02:	6923      	ldr	r3, [r4, #16]
 800dd04:	4620      	mov	r0, r4
 800dd06:	f1c9 0a04 	rsb	sl, r9, #4
 800dd0a:	444b      	add	r3, r9
 800dd0c:	4651      	mov	r1, sl
 800dd0e:	6123      	str	r3, [r4, #16]
 800dd10:	f000 fe96 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	d048      	beq.n	800ddaa <ucdr_deserialize_endian_uint32_t+0xde>
 800dd18:	2e01      	cmp	r6, #1
 800dd1a:	d061      	beq.n	800dde0 <ucdr_deserialize_endian_uint32_t+0x114>
 800dd1c:	78fb      	ldrb	r3, [r7, #3]
 800dd1e:	702b      	strb	r3, [r5, #0]
 800dd20:	f1b9 0f00 	cmp.w	r9, #0
 800dd24:	d050      	beq.n	800ddc8 <ucdr_deserialize_endian_uint32_t+0xfc>
 800dd26:	78bb      	ldrb	r3, [r7, #2]
 800dd28:	f1b9 0f01 	cmp.w	r9, #1
 800dd2c:	706b      	strb	r3, [r5, #1]
 800dd2e:	f105 0302 	add.w	r3, r5, #2
 800dd32:	d04d      	beq.n	800ddd0 <ucdr_deserialize_endian_uint32_t+0x104>
 800dd34:	787b      	ldrb	r3, [r7, #1]
 800dd36:	f1b9 0f02 	cmp.w	r9, #2
 800dd3a:	70ab      	strb	r3, [r5, #2]
 800dd3c:	f105 0303 	add.w	r3, r5, #3
 800dd40:	d04a      	beq.n	800ddd8 <ucdr_deserialize_endian_uint32_t+0x10c>
 800dd42:	783b      	ldrb	r3, [r7, #0]
 800dd44:	70eb      	strb	r3, [r5, #3]
 800dd46:	6923      	ldr	r3, [r4, #16]
 800dd48:	2104      	movs	r1, #4
 800dd4a:	68a2      	ldr	r2, [r4, #8]
 800dd4c:	3304      	adds	r3, #4
 800dd4e:	7da0      	ldrb	r0, [r4, #22]
 800dd50:	4452      	add	r2, sl
 800dd52:	7561      	strb	r1, [r4, #21]
 800dd54:	eba3 0309 	sub.w	r3, r3, r9
 800dd58:	f080 0001 	eor.w	r0, r0, #1
 800dd5c:	60a2      	str	r2, [r4, #8]
 800dd5e:	6123      	str	r3, [r4, #16]
 800dd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd64:	2104      	movs	r1, #4
 800dd66:	4620      	mov	r0, r4
 800dd68:	f000 fe6a 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800dd6c:	b1a8      	cbz	r0, 800dd9a <ucdr_deserialize_endian_uint32_t+0xce>
 800dd6e:	2e01      	cmp	r6, #1
 800dd70:	68a3      	ldr	r3, [r4, #8]
 800dd72:	d017      	beq.n	800dda4 <ucdr_deserialize_endian_uint32_t+0xd8>
 800dd74:	78db      	ldrb	r3, [r3, #3]
 800dd76:	702b      	strb	r3, [r5, #0]
 800dd78:	68a3      	ldr	r3, [r4, #8]
 800dd7a:	789b      	ldrb	r3, [r3, #2]
 800dd7c:	706b      	strb	r3, [r5, #1]
 800dd7e:	68a3      	ldr	r3, [r4, #8]
 800dd80:	785b      	ldrb	r3, [r3, #1]
 800dd82:	70ab      	strb	r3, [r5, #2]
 800dd84:	68a3      	ldr	r3, [r4, #8]
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	70eb      	strb	r3, [r5, #3]
 800dd8a:	2104      	movs	r1, #4
 800dd8c:	68a2      	ldr	r2, [r4, #8]
 800dd8e:	6923      	ldr	r3, [r4, #16]
 800dd90:	440a      	add	r2, r1
 800dd92:	7561      	strb	r1, [r4, #21]
 800dd94:	440b      	add	r3, r1
 800dd96:	60a2      	str	r2, [r4, #8]
 800dd98:	6123      	str	r3, [r4, #16]
 800dd9a:	7da0      	ldrb	r0, [r4, #22]
 800dd9c:	f080 0001 	eor.w	r0, r0, #1
 800dda0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	602b      	str	r3, [r5, #0]
 800dda8:	e7ef      	b.n	800dd8a <ucdr_deserialize_endian_uint32_t+0xbe>
 800ddaa:	68a2      	ldr	r2, [r4, #8]
 800ddac:	6923      	ldr	r3, [r4, #16]
 800ddae:	eba2 0209 	sub.w	r2, r2, r9
 800ddb2:	7da0      	ldrb	r0, [r4, #22]
 800ddb4:	eba3 0309 	sub.w	r3, r3, r9
 800ddb8:	f884 8015 	strb.w	r8, [r4, #21]
 800ddbc:	f080 0001 	eor.w	r0, r0, #1
 800ddc0:	60a2      	str	r2, [r4, #8]
 800ddc2:	6123      	str	r3, [r4, #16]
 800ddc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddc8:	68a3      	ldr	r3, [r4, #8]
 800ddca:	789b      	ldrb	r3, [r3, #2]
 800ddcc:	706b      	strb	r3, [r5, #1]
 800ddce:	1cab      	adds	r3, r5, #2
 800ddd0:	68a2      	ldr	r2, [r4, #8]
 800ddd2:	7852      	ldrb	r2, [r2, #1]
 800ddd4:	f803 2b01 	strb.w	r2, [r3], #1
 800ddd8:	68a2      	ldr	r2, [r4, #8]
 800ddda:	7812      	ldrb	r2, [r2, #0]
 800dddc:	701a      	strb	r2, [r3, #0]
 800ddde:	e7b2      	b.n	800dd46 <ucdr_deserialize_endian_uint32_t+0x7a>
 800dde0:	4639      	mov	r1, r7
 800dde2:	464a      	mov	r2, r9
 800dde4:	4628      	mov	r0, r5
 800dde6:	f00d fe2a 	bl	801ba3e <memcpy>
 800ddea:	4652      	mov	r2, sl
 800ddec:	eb05 0009 	add.w	r0, r5, r9
 800ddf0:	68a1      	ldr	r1, [r4, #8]
 800ddf2:	f00d fe24 	bl	801ba3e <memcpy>
 800ddf6:	e7a6      	b.n	800dd46 <ucdr_deserialize_endian_uint32_t+0x7a>

0800ddf8 <ucdr_serialize_uint64_t>:
 800ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddfc:	4604      	mov	r4, r0
 800ddfe:	b082      	sub	sp, #8
 800de00:	2108      	movs	r1, #8
 800de02:	e9cd 2300 	strd	r2, r3, [sp]
 800de06:	f000 fe6f 	bl	800eae8 <ucdr_buffer_alignment>
 800de0a:	4601      	mov	r1, r0
 800de0c:	4620      	mov	r0, r4
 800de0e:	7d67      	ldrb	r7, [r4, #21]
 800de10:	f000 feb2 	bl	800eb78 <ucdr_advance_buffer>
 800de14:	2108      	movs	r1, #8
 800de16:	4620      	mov	r0, r4
 800de18:	f000 fe06 	bl	800ea28 <ucdr_check_buffer_available_for>
 800de1c:	2800      	cmp	r0, #0
 800de1e:	d14e      	bne.n	800debe <ucdr_serialize_uint64_t+0xc6>
 800de20:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800de24:	42ab      	cmp	r3, r5
 800de26:	d945      	bls.n	800deb4 <ucdr_serialize_uint64_t+0xbc>
 800de28:	1b5e      	subs	r6, r3, r5
 800de2a:	60a3      	str	r3, [r4, #8]
 800de2c:	6923      	ldr	r3, [r4, #16]
 800de2e:	4620      	mov	r0, r4
 800de30:	f1c6 0808 	rsb	r8, r6, #8
 800de34:	4433      	add	r3, r6
 800de36:	4641      	mov	r1, r8
 800de38:	6123      	str	r3, [r4, #16]
 800de3a:	f000 fe01 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800de3e:	2800      	cmp	r0, #0
 800de40:	d074      	beq.n	800df2c <ucdr_serialize_uint64_t+0x134>
 800de42:	7d23      	ldrb	r3, [r4, #20]
 800de44:	2b01      	cmp	r3, #1
 800de46:	f000 809b 	beq.w	800df80 <ucdr_serialize_uint64_t+0x188>
 800de4a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800de4e:	702b      	strb	r3, [r5, #0]
 800de50:	2e00      	cmp	r6, #0
 800de52:	d078      	beq.n	800df46 <ucdr_serialize_uint64_t+0x14e>
 800de54:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800de58:	2e01      	cmp	r6, #1
 800de5a:	706b      	strb	r3, [r5, #1]
 800de5c:	d077      	beq.n	800df4e <ucdr_serialize_uint64_t+0x156>
 800de5e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800de62:	2e02      	cmp	r6, #2
 800de64:	70ab      	strb	r3, [r5, #2]
 800de66:	d076      	beq.n	800df56 <ucdr_serialize_uint64_t+0x15e>
 800de68:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800de6c:	2e03      	cmp	r6, #3
 800de6e:	70eb      	strb	r3, [r5, #3]
 800de70:	d075      	beq.n	800df5e <ucdr_serialize_uint64_t+0x166>
 800de72:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800de76:	2e04      	cmp	r6, #4
 800de78:	712b      	strb	r3, [r5, #4]
 800de7a:	d074      	beq.n	800df66 <ucdr_serialize_uint64_t+0x16e>
 800de7c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800de80:	2e05      	cmp	r6, #5
 800de82:	716b      	strb	r3, [r5, #5]
 800de84:	d073      	beq.n	800df6e <ucdr_serialize_uint64_t+0x176>
 800de86:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800de8a:	2e06      	cmp	r6, #6
 800de8c:	71ab      	strb	r3, [r5, #6]
 800de8e:	d072      	beq.n	800df76 <ucdr_serialize_uint64_t+0x17e>
 800de90:	f89d 3000 	ldrb.w	r3, [sp]
 800de94:	71eb      	strb	r3, [r5, #7]
 800de96:	6923      	ldr	r3, [r4, #16]
 800de98:	2108      	movs	r1, #8
 800de9a:	68a2      	ldr	r2, [r4, #8]
 800de9c:	3308      	adds	r3, #8
 800de9e:	7da0      	ldrb	r0, [r4, #22]
 800dea0:	4442      	add	r2, r8
 800dea2:	7561      	strb	r1, [r4, #21]
 800dea4:	1b9e      	subs	r6, r3, r6
 800dea6:	f080 0001 	eor.w	r0, r0, #1
 800deaa:	60a2      	str	r2, [r4, #8]
 800deac:	6126      	str	r6, [r4, #16]
 800deae:	b002      	add	sp, #8
 800deb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800deb4:	2108      	movs	r1, #8
 800deb6:	4620      	mov	r0, r4
 800deb8:	f000 fdc2 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800debc:	b350      	cbz	r0, 800df14 <ucdr_serialize_uint64_t+0x11c>
 800debe:	7d23      	ldrb	r3, [r4, #20]
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d02d      	beq.n	800df20 <ucdr_serialize_uint64_t+0x128>
 800dec4:	68a3      	ldr	r3, [r4, #8]
 800dec6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800deca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800dece:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800ded2:	7018      	strb	r0, [r3, #0]
 800ded4:	68a3      	ldr	r3, [r4, #8]
 800ded6:	705a      	strb	r2, [r3, #1]
 800ded8:	68a3      	ldr	r3, [r4, #8]
 800deda:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800dede:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800dee2:	7099      	strb	r1, [r3, #2]
 800dee4:	68a3      	ldr	r3, [r4, #8]
 800dee6:	70da      	strb	r2, [r3, #3]
 800dee8:	68a3      	ldr	r3, [r4, #8]
 800deea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800deee:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800def2:	7118      	strb	r0, [r3, #4]
 800def4:	68a3      	ldr	r3, [r4, #8]
 800def6:	715a      	strb	r2, [r3, #5]
 800def8:	68a3      	ldr	r3, [r4, #8]
 800defa:	f89d 2000 	ldrb.w	r2, [sp]
 800defe:	7199      	strb	r1, [r3, #6]
 800df00:	68a3      	ldr	r3, [r4, #8]
 800df02:	71da      	strb	r2, [r3, #7]
 800df04:	2108      	movs	r1, #8
 800df06:	68a2      	ldr	r2, [r4, #8]
 800df08:	6923      	ldr	r3, [r4, #16]
 800df0a:	440a      	add	r2, r1
 800df0c:	7561      	strb	r1, [r4, #21]
 800df0e:	440b      	add	r3, r1
 800df10:	60a2      	str	r2, [r4, #8]
 800df12:	6123      	str	r3, [r4, #16]
 800df14:	7da0      	ldrb	r0, [r4, #22]
 800df16:	f080 0001 	eor.w	r0, r0, #1
 800df1a:	b002      	add	sp, #8
 800df1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df20:	466b      	mov	r3, sp
 800df22:	68a2      	ldr	r2, [r4, #8]
 800df24:	cb03      	ldmia	r3!, {r0, r1}
 800df26:	6010      	str	r0, [r2, #0]
 800df28:	6051      	str	r1, [r2, #4]
 800df2a:	e7eb      	b.n	800df04 <ucdr_serialize_uint64_t+0x10c>
 800df2c:	68a2      	ldr	r2, [r4, #8]
 800df2e:	6923      	ldr	r3, [r4, #16]
 800df30:	7da0      	ldrb	r0, [r4, #22]
 800df32:	1b92      	subs	r2, r2, r6
 800df34:	1b9b      	subs	r3, r3, r6
 800df36:	7567      	strb	r7, [r4, #21]
 800df38:	f080 0001 	eor.w	r0, r0, #1
 800df3c:	60a2      	str	r2, [r4, #8]
 800df3e:	6123      	str	r3, [r4, #16]
 800df40:	b002      	add	sp, #8
 800df42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df46:	68a3      	ldr	r3, [r4, #8]
 800df48:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800df4c:	701a      	strb	r2, [r3, #0]
 800df4e:	68a3      	ldr	r3, [r4, #8]
 800df50:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800df54:	701a      	strb	r2, [r3, #0]
 800df56:	68a3      	ldr	r3, [r4, #8]
 800df58:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800df5c:	701a      	strb	r2, [r3, #0]
 800df5e:	68a3      	ldr	r3, [r4, #8]
 800df60:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800df64:	701a      	strb	r2, [r3, #0]
 800df66:	68a3      	ldr	r3, [r4, #8]
 800df68:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800df6c:	701a      	strb	r2, [r3, #0]
 800df6e:	68a3      	ldr	r3, [r4, #8]
 800df70:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800df74:	701a      	strb	r2, [r3, #0]
 800df76:	68a3      	ldr	r3, [r4, #8]
 800df78:	f89d 2000 	ldrb.w	r2, [sp]
 800df7c:	701a      	strb	r2, [r3, #0]
 800df7e:	e78a      	b.n	800de96 <ucdr_serialize_uint64_t+0x9e>
 800df80:	4628      	mov	r0, r5
 800df82:	466d      	mov	r5, sp
 800df84:	4632      	mov	r2, r6
 800df86:	4629      	mov	r1, r5
 800df88:	f00d fd59 	bl	801ba3e <memcpy>
 800df8c:	4642      	mov	r2, r8
 800df8e:	19a9      	adds	r1, r5, r6
 800df90:	68a0      	ldr	r0, [r4, #8]
 800df92:	f00d fd54 	bl	801ba3e <memcpy>
 800df96:	e77e      	b.n	800de96 <ucdr_serialize_uint64_t+0x9e>

0800df98 <ucdr_serialize_int16_t>:
 800df98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df9c:	460b      	mov	r3, r1
 800df9e:	b082      	sub	sp, #8
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	2102      	movs	r1, #2
 800dfa4:	f8ad 3006 	strh.w	r3, [sp, #6]
 800dfa8:	f000 fd9e 	bl	800eae8 <ucdr_buffer_alignment>
 800dfac:	4601      	mov	r1, r0
 800dfae:	4620      	mov	r0, r4
 800dfb0:	7d67      	ldrb	r7, [r4, #21]
 800dfb2:	f000 fde1 	bl	800eb78 <ucdr_advance_buffer>
 800dfb6:	2102      	movs	r1, #2
 800dfb8:	4620      	mov	r0, r4
 800dfba:	f000 fd35 	bl	800ea28 <ucdr_check_buffer_available_for>
 800dfbe:	bb78      	cbnz	r0, 800e020 <ucdr_serialize_int16_t+0x88>
 800dfc0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800dfc4:	42ab      	cmp	r3, r5
 800dfc6:	d926      	bls.n	800e016 <ucdr_serialize_int16_t+0x7e>
 800dfc8:	1b5e      	subs	r6, r3, r5
 800dfca:	60a3      	str	r3, [r4, #8]
 800dfcc:	6923      	ldr	r3, [r4, #16]
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f1c6 0802 	rsb	r8, r6, #2
 800dfd4:	4433      	add	r3, r6
 800dfd6:	4641      	mov	r1, r8
 800dfd8:	6123      	str	r3, [r4, #16]
 800dfda:	f000 fd31 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800dfde:	2800      	cmp	r0, #0
 800dfe0:	d03b      	beq.n	800e05a <ucdr_serialize_int16_t+0xc2>
 800dfe2:	7d23      	ldrb	r3, [r4, #20]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d04a      	beq.n	800e07e <ucdr_serialize_int16_t+0xe6>
 800dfe8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800dfec:	702b      	strb	r3, [r5, #0]
 800dfee:	2e00      	cmp	r6, #0
 800dff0:	d040      	beq.n	800e074 <ucdr_serialize_int16_t+0xdc>
 800dff2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800dff6:	706b      	strb	r3, [r5, #1]
 800dff8:	6923      	ldr	r3, [r4, #16]
 800dffa:	2102      	movs	r1, #2
 800dffc:	68a2      	ldr	r2, [r4, #8]
 800dffe:	3302      	adds	r3, #2
 800e000:	7da0      	ldrb	r0, [r4, #22]
 800e002:	4442      	add	r2, r8
 800e004:	7561      	strb	r1, [r4, #21]
 800e006:	1b9e      	subs	r6, r3, r6
 800e008:	f080 0001 	eor.w	r0, r0, #1
 800e00c:	60a2      	str	r2, [r4, #8]
 800e00e:	6126      	str	r6, [r4, #16]
 800e010:	b002      	add	sp, #8
 800e012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e016:	2102      	movs	r1, #2
 800e018:	4620      	mov	r0, r4
 800e01a:	f000 fd11 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e01e:	b190      	cbz	r0, 800e046 <ucdr_serialize_int16_t+0xae>
 800e020:	7d23      	ldrb	r3, [r4, #20]
 800e022:	2b01      	cmp	r3, #1
 800e024:	68a3      	ldr	r3, [r4, #8]
 800e026:	d014      	beq.n	800e052 <ucdr_serialize_int16_t+0xba>
 800e028:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e02c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e030:	7019      	strb	r1, [r3, #0]
 800e032:	68a3      	ldr	r3, [r4, #8]
 800e034:	705a      	strb	r2, [r3, #1]
 800e036:	2102      	movs	r1, #2
 800e038:	68a2      	ldr	r2, [r4, #8]
 800e03a:	6923      	ldr	r3, [r4, #16]
 800e03c:	440a      	add	r2, r1
 800e03e:	7561      	strb	r1, [r4, #21]
 800e040:	440b      	add	r3, r1
 800e042:	60a2      	str	r2, [r4, #8]
 800e044:	6123      	str	r3, [r4, #16]
 800e046:	7da0      	ldrb	r0, [r4, #22]
 800e048:	f080 0001 	eor.w	r0, r0, #1
 800e04c:	b002      	add	sp, #8
 800e04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e052:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800e056:	801a      	strh	r2, [r3, #0]
 800e058:	e7ed      	b.n	800e036 <ucdr_serialize_int16_t+0x9e>
 800e05a:	68a2      	ldr	r2, [r4, #8]
 800e05c:	6923      	ldr	r3, [r4, #16]
 800e05e:	7da0      	ldrb	r0, [r4, #22]
 800e060:	1b92      	subs	r2, r2, r6
 800e062:	1b9b      	subs	r3, r3, r6
 800e064:	7567      	strb	r7, [r4, #21]
 800e066:	f080 0001 	eor.w	r0, r0, #1
 800e06a:	60a2      	str	r2, [r4, #8]
 800e06c:	6123      	str	r3, [r4, #16]
 800e06e:	b002      	add	sp, #8
 800e070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e074:	68a3      	ldr	r3, [r4, #8]
 800e076:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e07a:	701a      	strb	r2, [r3, #0]
 800e07c:	e7bc      	b.n	800dff8 <ucdr_serialize_int16_t+0x60>
 800e07e:	4628      	mov	r0, r5
 800e080:	f10d 0506 	add.w	r5, sp, #6
 800e084:	4632      	mov	r2, r6
 800e086:	4629      	mov	r1, r5
 800e088:	f00d fcd9 	bl	801ba3e <memcpy>
 800e08c:	4642      	mov	r2, r8
 800e08e:	19a9      	adds	r1, r5, r6
 800e090:	68a0      	ldr	r0, [r4, #8]
 800e092:	f00d fcd4 	bl	801ba3e <memcpy>
 800e096:	e7af      	b.n	800dff8 <ucdr_serialize_int16_t+0x60>

0800e098 <ucdr_deserialize_int16_t>:
 800e098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e09c:	4604      	mov	r4, r0
 800e09e:	460d      	mov	r5, r1
 800e0a0:	2102      	movs	r1, #2
 800e0a2:	f000 fd21 	bl	800eae8 <ucdr_buffer_alignment>
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e0ae:	f000 fd63 	bl	800eb78 <ucdr_advance_buffer>
 800e0b2:	2102      	movs	r1, #2
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	f000 fcb7 	bl	800ea28 <ucdr_check_buffer_available_for>
 800e0ba:	bb60      	cbnz	r0, 800e116 <ucdr_deserialize_int16_t+0x7e>
 800e0bc:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e0c0:	42be      	cmp	r6, r7
 800e0c2:	d923      	bls.n	800e10c <ucdr_deserialize_int16_t+0x74>
 800e0c4:	6923      	ldr	r3, [r4, #16]
 800e0c6:	4620      	mov	r0, r4
 800e0c8:	60a6      	str	r6, [r4, #8]
 800e0ca:	1bf6      	subs	r6, r6, r7
 800e0cc:	4433      	add	r3, r6
 800e0ce:	f1c6 0902 	rsb	r9, r6, #2
 800e0d2:	6123      	str	r3, [r4, #16]
 800e0d4:	4649      	mov	r1, r9
 800e0d6:	f000 fcb3 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d034      	beq.n	800e148 <ucdr_deserialize_int16_t+0xb0>
 800e0de:	7d23      	ldrb	r3, [r4, #20]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d042      	beq.n	800e16a <ucdr_deserialize_int16_t+0xd2>
 800e0e4:	787b      	ldrb	r3, [r7, #1]
 800e0e6:	702b      	strb	r3, [r5, #0]
 800e0e8:	2e00      	cmp	r6, #0
 800e0ea:	d03a      	beq.n	800e162 <ucdr_deserialize_int16_t+0xca>
 800e0ec:	783b      	ldrb	r3, [r7, #0]
 800e0ee:	706b      	strb	r3, [r5, #1]
 800e0f0:	6923      	ldr	r3, [r4, #16]
 800e0f2:	2102      	movs	r1, #2
 800e0f4:	68a2      	ldr	r2, [r4, #8]
 800e0f6:	3302      	adds	r3, #2
 800e0f8:	7da0      	ldrb	r0, [r4, #22]
 800e0fa:	444a      	add	r2, r9
 800e0fc:	7561      	strb	r1, [r4, #21]
 800e0fe:	1b9b      	subs	r3, r3, r6
 800e100:	f080 0001 	eor.w	r0, r0, #1
 800e104:	60a2      	str	r2, [r4, #8]
 800e106:	6123      	str	r3, [r4, #16]
 800e108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e10c:	2102      	movs	r1, #2
 800e10e:	4620      	mov	r0, r4
 800e110:	f000 fc96 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e114:	b180      	cbz	r0, 800e138 <ucdr_deserialize_int16_t+0xa0>
 800e116:	7d23      	ldrb	r3, [r4, #20]
 800e118:	2b01      	cmp	r3, #1
 800e11a:	68a3      	ldr	r3, [r4, #8]
 800e11c:	d011      	beq.n	800e142 <ucdr_deserialize_int16_t+0xaa>
 800e11e:	785b      	ldrb	r3, [r3, #1]
 800e120:	702b      	strb	r3, [r5, #0]
 800e122:	68a3      	ldr	r3, [r4, #8]
 800e124:	781b      	ldrb	r3, [r3, #0]
 800e126:	706b      	strb	r3, [r5, #1]
 800e128:	2102      	movs	r1, #2
 800e12a:	68a2      	ldr	r2, [r4, #8]
 800e12c:	6923      	ldr	r3, [r4, #16]
 800e12e:	440a      	add	r2, r1
 800e130:	7561      	strb	r1, [r4, #21]
 800e132:	440b      	add	r3, r1
 800e134:	60a2      	str	r2, [r4, #8]
 800e136:	6123      	str	r3, [r4, #16]
 800e138:	7da0      	ldrb	r0, [r4, #22]
 800e13a:	f080 0001 	eor.w	r0, r0, #1
 800e13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e142:	881b      	ldrh	r3, [r3, #0]
 800e144:	802b      	strh	r3, [r5, #0]
 800e146:	e7ef      	b.n	800e128 <ucdr_deserialize_int16_t+0x90>
 800e148:	68a2      	ldr	r2, [r4, #8]
 800e14a:	6923      	ldr	r3, [r4, #16]
 800e14c:	1b92      	subs	r2, r2, r6
 800e14e:	7da0      	ldrb	r0, [r4, #22]
 800e150:	1b9b      	subs	r3, r3, r6
 800e152:	f884 8015 	strb.w	r8, [r4, #21]
 800e156:	f080 0001 	eor.w	r0, r0, #1
 800e15a:	60a2      	str	r2, [r4, #8]
 800e15c:	6123      	str	r3, [r4, #16]
 800e15e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e162:	68a3      	ldr	r3, [r4, #8]
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	706b      	strb	r3, [r5, #1]
 800e168:	e7c2      	b.n	800e0f0 <ucdr_deserialize_int16_t+0x58>
 800e16a:	4639      	mov	r1, r7
 800e16c:	4632      	mov	r2, r6
 800e16e:	4628      	mov	r0, r5
 800e170:	f00d fc65 	bl	801ba3e <memcpy>
 800e174:	464a      	mov	r2, r9
 800e176:	19a8      	adds	r0, r5, r6
 800e178:	68a1      	ldr	r1, [r4, #8]
 800e17a:	f00d fc60 	bl	801ba3e <memcpy>
 800e17e:	e7b7      	b.n	800e0f0 <ucdr_deserialize_int16_t+0x58>

0800e180 <ucdr_serialize_int32_t>:
 800e180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e184:	b082      	sub	sp, #8
 800e186:	4604      	mov	r4, r0
 800e188:	9101      	str	r1, [sp, #4]
 800e18a:	2104      	movs	r1, #4
 800e18c:	f000 fcac 	bl	800eae8 <ucdr_buffer_alignment>
 800e190:	4601      	mov	r1, r0
 800e192:	4620      	mov	r0, r4
 800e194:	7d67      	ldrb	r7, [r4, #21]
 800e196:	f000 fcef 	bl	800eb78 <ucdr_advance_buffer>
 800e19a:	2104      	movs	r1, #4
 800e19c:	4620      	mov	r0, r4
 800e19e:	f000 fc43 	bl	800ea28 <ucdr_check_buffer_available_for>
 800e1a2:	2800      	cmp	r0, #0
 800e1a4:	d139      	bne.n	800e21a <ucdr_serialize_int32_t+0x9a>
 800e1a6:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e1aa:	42ab      	cmp	r3, r5
 800e1ac:	d930      	bls.n	800e210 <ucdr_serialize_int32_t+0x90>
 800e1ae:	1b5e      	subs	r6, r3, r5
 800e1b0:	60a3      	str	r3, [r4, #8]
 800e1b2:	6923      	ldr	r3, [r4, #16]
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f1c6 0804 	rsb	r8, r6, #4
 800e1ba:	4433      	add	r3, r6
 800e1bc:	4641      	mov	r1, r8
 800e1be:	6123      	str	r3, [r4, #16]
 800e1c0:	f000 fc3e 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e1c4:	2800      	cmp	r0, #0
 800e1c6:	d04c      	beq.n	800e262 <ucdr_serialize_int32_t+0xe2>
 800e1c8:	7d23      	ldrb	r3, [r4, #20]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d063      	beq.n	800e296 <ucdr_serialize_int32_t+0x116>
 800e1ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e1d2:	702b      	strb	r3, [r5, #0]
 800e1d4:	2e00      	cmp	r6, #0
 800e1d6:	d051      	beq.n	800e27c <ucdr_serialize_int32_t+0xfc>
 800e1d8:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e1dc:	2e01      	cmp	r6, #1
 800e1de:	706b      	strb	r3, [r5, #1]
 800e1e0:	d050      	beq.n	800e284 <ucdr_serialize_int32_t+0x104>
 800e1e2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e1e6:	2e02      	cmp	r6, #2
 800e1e8:	70ab      	strb	r3, [r5, #2]
 800e1ea:	d04f      	beq.n	800e28c <ucdr_serialize_int32_t+0x10c>
 800e1ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e1f0:	70eb      	strb	r3, [r5, #3]
 800e1f2:	6923      	ldr	r3, [r4, #16]
 800e1f4:	2104      	movs	r1, #4
 800e1f6:	68a2      	ldr	r2, [r4, #8]
 800e1f8:	3304      	adds	r3, #4
 800e1fa:	7da0      	ldrb	r0, [r4, #22]
 800e1fc:	4442      	add	r2, r8
 800e1fe:	7561      	strb	r1, [r4, #21]
 800e200:	1b9e      	subs	r6, r3, r6
 800e202:	f080 0001 	eor.w	r0, r0, #1
 800e206:	60a2      	str	r2, [r4, #8]
 800e208:	6126      	str	r6, [r4, #16]
 800e20a:	b002      	add	sp, #8
 800e20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e210:	2104      	movs	r1, #4
 800e212:	4620      	mov	r0, r4
 800e214:	f000 fc14 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e218:	b1d0      	cbz	r0, 800e250 <ucdr_serialize_int32_t+0xd0>
 800e21a:	7d23      	ldrb	r3, [r4, #20]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	68a3      	ldr	r3, [r4, #8]
 800e220:	d01c      	beq.n	800e25c <ucdr_serialize_int32_t+0xdc>
 800e222:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e226:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e22a:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e22e:	7018      	strb	r0, [r3, #0]
 800e230:	68a3      	ldr	r3, [r4, #8]
 800e232:	705a      	strb	r2, [r3, #1]
 800e234:	68a3      	ldr	r3, [r4, #8]
 800e236:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e23a:	7099      	strb	r1, [r3, #2]
 800e23c:	68a3      	ldr	r3, [r4, #8]
 800e23e:	70da      	strb	r2, [r3, #3]
 800e240:	2104      	movs	r1, #4
 800e242:	68a2      	ldr	r2, [r4, #8]
 800e244:	6923      	ldr	r3, [r4, #16]
 800e246:	440a      	add	r2, r1
 800e248:	7561      	strb	r1, [r4, #21]
 800e24a:	440b      	add	r3, r1
 800e24c:	60a2      	str	r2, [r4, #8]
 800e24e:	6123      	str	r3, [r4, #16]
 800e250:	7da0      	ldrb	r0, [r4, #22]
 800e252:	f080 0001 	eor.w	r0, r0, #1
 800e256:	b002      	add	sp, #8
 800e258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e25c:	9a01      	ldr	r2, [sp, #4]
 800e25e:	601a      	str	r2, [r3, #0]
 800e260:	e7ee      	b.n	800e240 <ucdr_serialize_int32_t+0xc0>
 800e262:	68a2      	ldr	r2, [r4, #8]
 800e264:	6923      	ldr	r3, [r4, #16]
 800e266:	7da0      	ldrb	r0, [r4, #22]
 800e268:	1b92      	subs	r2, r2, r6
 800e26a:	1b9b      	subs	r3, r3, r6
 800e26c:	7567      	strb	r7, [r4, #21]
 800e26e:	f080 0001 	eor.w	r0, r0, #1
 800e272:	60a2      	str	r2, [r4, #8]
 800e274:	6123      	str	r3, [r4, #16]
 800e276:	b002      	add	sp, #8
 800e278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e27c:	68a3      	ldr	r3, [r4, #8]
 800e27e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e282:	701a      	strb	r2, [r3, #0]
 800e284:	68a3      	ldr	r3, [r4, #8]
 800e286:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e28a:	701a      	strb	r2, [r3, #0]
 800e28c:	68a3      	ldr	r3, [r4, #8]
 800e28e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e292:	701a      	strb	r2, [r3, #0]
 800e294:	e7ad      	b.n	800e1f2 <ucdr_serialize_int32_t+0x72>
 800e296:	4628      	mov	r0, r5
 800e298:	ad01      	add	r5, sp, #4
 800e29a:	4632      	mov	r2, r6
 800e29c:	4629      	mov	r1, r5
 800e29e:	f00d fbce 	bl	801ba3e <memcpy>
 800e2a2:	4642      	mov	r2, r8
 800e2a4:	19a9      	adds	r1, r5, r6
 800e2a6:	68a0      	ldr	r0, [r4, #8]
 800e2a8:	f00d fbc9 	bl	801ba3e <memcpy>
 800e2ac:	e7a1      	b.n	800e1f2 <ucdr_serialize_int32_t+0x72>
 800e2ae:	bf00      	nop

0800e2b0 <ucdr_deserialize_int32_t>:
 800e2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e2b4:	4604      	mov	r4, r0
 800e2b6:	460d      	mov	r5, r1
 800e2b8:	2104      	movs	r1, #4
 800e2ba:	f000 fc15 	bl	800eae8 <ucdr_buffer_alignment>
 800e2be:	4601      	mov	r1, r0
 800e2c0:	4620      	mov	r0, r4
 800e2c2:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e2c6:	f000 fc57 	bl	800eb78 <ucdr_advance_buffer>
 800e2ca:	2104      	movs	r1, #4
 800e2cc:	4620      	mov	r0, r4
 800e2ce:	f000 fbab 	bl	800ea28 <ucdr_check_buffer_available_for>
 800e2d2:	2800      	cmp	r0, #0
 800e2d4:	d138      	bne.n	800e348 <ucdr_deserialize_int32_t+0x98>
 800e2d6:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800e2da:	42b7      	cmp	r7, r6
 800e2dc:	d92f      	bls.n	800e33e <ucdr_deserialize_int32_t+0x8e>
 800e2de:	6923      	ldr	r3, [r4, #16]
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	60a7      	str	r7, [r4, #8]
 800e2e4:	1bbf      	subs	r7, r7, r6
 800e2e6:	443b      	add	r3, r7
 800e2e8:	f1c7 0904 	rsb	r9, r7, #4
 800e2ec:	6123      	str	r3, [r4, #16]
 800e2ee:	4649      	mov	r1, r9
 800e2f0:	f000 fba6 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d046      	beq.n	800e386 <ucdr_deserialize_int32_t+0xd6>
 800e2f8:	7d23      	ldrb	r3, [r4, #20]
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d05c      	beq.n	800e3b8 <ucdr_deserialize_int32_t+0x108>
 800e2fe:	78f3      	ldrb	r3, [r6, #3]
 800e300:	702b      	strb	r3, [r5, #0]
 800e302:	2f00      	cmp	r7, #0
 800e304:	d04c      	beq.n	800e3a0 <ucdr_deserialize_int32_t+0xf0>
 800e306:	78b3      	ldrb	r3, [r6, #2]
 800e308:	2f01      	cmp	r7, #1
 800e30a:	706b      	strb	r3, [r5, #1]
 800e30c:	f105 0302 	add.w	r3, r5, #2
 800e310:	d04a      	beq.n	800e3a8 <ucdr_deserialize_int32_t+0xf8>
 800e312:	7873      	ldrb	r3, [r6, #1]
 800e314:	2f02      	cmp	r7, #2
 800e316:	70ab      	strb	r3, [r5, #2]
 800e318:	f105 0303 	add.w	r3, r5, #3
 800e31c:	d048      	beq.n	800e3b0 <ucdr_deserialize_int32_t+0x100>
 800e31e:	7833      	ldrb	r3, [r6, #0]
 800e320:	70eb      	strb	r3, [r5, #3]
 800e322:	6923      	ldr	r3, [r4, #16]
 800e324:	2104      	movs	r1, #4
 800e326:	68a2      	ldr	r2, [r4, #8]
 800e328:	3304      	adds	r3, #4
 800e32a:	7da0      	ldrb	r0, [r4, #22]
 800e32c:	444a      	add	r2, r9
 800e32e:	7561      	strb	r1, [r4, #21]
 800e330:	1bdb      	subs	r3, r3, r7
 800e332:	f080 0001 	eor.w	r0, r0, #1
 800e336:	60a2      	str	r2, [r4, #8]
 800e338:	6123      	str	r3, [r4, #16]
 800e33a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e33e:	2104      	movs	r1, #4
 800e340:	4620      	mov	r0, r4
 800e342:	f000 fb7d 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e346:	b1b0      	cbz	r0, 800e376 <ucdr_deserialize_int32_t+0xc6>
 800e348:	7d23      	ldrb	r3, [r4, #20]
 800e34a:	2b01      	cmp	r3, #1
 800e34c:	68a3      	ldr	r3, [r4, #8]
 800e34e:	d017      	beq.n	800e380 <ucdr_deserialize_int32_t+0xd0>
 800e350:	78db      	ldrb	r3, [r3, #3]
 800e352:	702b      	strb	r3, [r5, #0]
 800e354:	68a3      	ldr	r3, [r4, #8]
 800e356:	789b      	ldrb	r3, [r3, #2]
 800e358:	706b      	strb	r3, [r5, #1]
 800e35a:	68a3      	ldr	r3, [r4, #8]
 800e35c:	785b      	ldrb	r3, [r3, #1]
 800e35e:	70ab      	strb	r3, [r5, #2]
 800e360:	68a3      	ldr	r3, [r4, #8]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	70eb      	strb	r3, [r5, #3]
 800e366:	2104      	movs	r1, #4
 800e368:	68a2      	ldr	r2, [r4, #8]
 800e36a:	6923      	ldr	r3, [r4, #16]
 800e36c:	440a      	add	r2, r1
 800e36e:	7561      	strb	r1, [r4, #21]
 800e370:	440b      	add	r3, r1
 800e372:	60a2      	str	r2, [r4, #8]
 800e374:	6123      	str	r3, [r4, #16]
 800e376:	7da0      	ldrb	r0, [r4, #22]
 800e378:	f080 0001 	eor.w	r0, r0, #1
 800e37c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	602b      	str	r3, [r5, #0]
 800e384:	e7ef      	b.n	800e366 <ucdr_deserialize_int32_t+0xb6>
 800e386:	68a2      	ldr	r2, [r4, #8]
 800e388:	6923      	ldr	r3, [r4, #16]
 800e38a:	1bd2      	subs	r2, r2, r7
 800e38c:	7da0      	ldrb	r0, [r4, #22]
 800e38e:	1bdb      	subs	r3, r3, r7
 800e390:	f884 8015 	strb.w	r8, [r4, #21]
 800e394:	f080 0001 	eor.w	r0, r0, #1
 800e398:	60a2      	str	r2, [r4, #8]
 800e39a:	6123      	str	r3, [r4, #16]
 800e39c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3a0:	68a3      	ldr	r3, [r4, #8]
 800e3a2:	789b      	ldrb	r3, [r3, #2]
 800e3a4:	706b      	strb	r3, [r5, #1]
 800e3a6:	1cab      	adds	r3, r5, #2
 800e3a8:	68a2      	ldr	r2, [r4, #8]
 800e3aa:	7852      	ldrb	r2, [r2, #1]
 800e3ac:	f803 2b01 	strb.w	r2, [r3], #1
 800e3b0:	68a2      	ldr	r2, [r4, #8]
 800e3b2:	7812      	ldrb	r2, [r2, #0]
 800e3b4:	701a      	strb	r2, [r3, #0]
 800e3b6:	e7b4      	b.n	800e322 <ucdr_deserialize_int32_t+0x72>
 800e3b8:	4631      	mov	r1, r6
 800e3ba:	463a      	mov	r2, r7
 800e3bc:	4628      	mov	r0, r5
 800e3be:	f00d fb3e 	bl	801ba3e <memcpy>
 800e3c2:	464a      	mov	r2, r9
 800e3c4:	19e8      	adds	r0, r5, r7
 800e3c6:	68a1      	ldr	r1, [r4, #8]
 800e3c8:	f00d fb39 	bl	801ba3e <memcpy>
 800e3cc:	e7a9      	b.n	800e322 <ucdr_deserialize_int32_t+0x72>
 800e3ce:	bf00      	nop

0800e3d0 <ucdr_serialize_int64_t>:
 800e3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3d4:	4604      	mov	r4, r0
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	2108      	movs	r1, #8
 800e3da:	e9cd 2300 	strd	r2, r3, [sp]
 800e3de:	f000 fb83 	bl	800eae8 <ucdr_buffer_alignment>
 800e3e2:	4601      	mov	r1, r0
 800e3e4:	4620      	mov	r0, r4
 800e3e6:	7d67      	ldrb	r7, [r4, #21]
 800e3e8:	f000 fbc6 	bl	800eb78 <ucdr_advance_buffer>
 800e3ec:	2108      	movs	r1, #8
 800e3ee:	4620      	mov	r0, r4
 800e3f0:	f000 fb1a 	bl	800ea28 <ucdr_check_buffer_available_for>
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d14e      	bne.n	800e496 <ucdr_serialize_int64_t+0xc6>
 800e3f8:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e3fc:	42ab      	cmp	r3, r5
 800e3fe:	d945      	bls.n	800e48c <ucdr_serialize_int64_t+0xbc>
 800e400:	1b5e      	subs	r6, r3, r5
 800e402:	60a3      	str	r3, [r4, #8]
 800e404:	6923      	ldr	r3, [r4, #16]
 800e406:	4620      	mov	r0, r4
 800e408:	f1c6 0808 	rsb	r8, r6, #8
 800e40c:	4433      	add	r3, r6
 800e40e:	4641      	mov	r1, r8
 800e410:	6123      	str	r3, [r4, #16]
 800e412:	f000 fb15 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e416:	2800      	cmp	r0, #0
 800e418:	d074      	beq.n	800e504 <ucdr_serialize_int64_t+0x134>
 800e41a:	7d23      	ldrb	r3, [r4, #20]
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	f000 809b 	beq.w	800e558 <ucdr_serialize_int64_t+0x188>
 800e422:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e426:	702b      	strb	r3, [r5, #0]
 800e428:	2e00      	cmp	r6, #0
 800e42a:	d078      	beq.n	800e51e <ucdr_serialize_int64_t+0x14e>
 800e42c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e430:	2e01      	cmp	r6, #1
 800e432:	706b      	strb	r3, [r5, #1]
 800e434:	d077      	beq.n	800e526 <ucdr_serialize_int64_t+0x156>
 800e436:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e43a:	2e02      	cmp	r6, #2
 800e43c:	70ab      	strb	r3, [r5, #2]
 800e43e:	d076      	beq.n	800e52e <ucdr_serialize_int64_t+0x15e>
 800e440:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e444:	2e03      	cmp	r6, #3
 800e446:	70eb      	strb	r3, [r5, #3]
 800e448:	d075      	beq.n	800e536 <ucdr_serialize_int64_t+0x166>
 800e44a:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e44e:	2e04      	cmp	r6, #4
 800e450:	712b      	strb	r3, [r5, #4]
 800e452:	d074      	beq.n	800e53e <ucdr_serialize_int64_t+0x16e>
 800e454:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e458:	2e05      	cmp	r6, #5
 800e45a:	716b      	strb	r3, [r5, #5]
 800e45c:	d073      	beq.n	800e546 <ucdr_serialize_int64_t+0x176>
 800e45e:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e462:	2e06      	cmp	r6, #6
 800e464:	71ab      	strb	r3, [r5, #6]
 800e466:	d072      	beq.n	800e54e <ucdr_serialize_int64_t+0x17e>
 800e468:	f89d 3000 	ldrb.w	r3, [sp]
 800e46c:	71eb      	strb	r3, [r5, #7]
 800e46e:	6923      	ldr	r3, [r4, #16]
 800e470:	2108      	movs	r1, #8
 800e472:	68a2      	ldr	r2, [r4, #8]
 800e474:	3308      	adds	r3, #8
 800e476:	7da0      	ldrb	r0, [r4, #22]
 800e478:	4442      	add	r2, r8
 800e47a:	7561      	strb	r1, [r4, #21]
 800e47c:	1b9e      	subs	r6, r3, r6
 800e47e:	f080 0001 	eor.w	r0, r0, #1
 800e482:	60a2      	str	r2, [r4, #8]
 800e484:	6126      	str	r6, [r4, #16]
 800e486:	b002      	add	sp, #8
 800e488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e48c:	2108      	movs	r1, #8
 800e48e:	4620      	mov	r0, r4
 800e490:	f000 fad6 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e494:	b350      	cbz	r0, 800e4ec <ucdr_serialize_int64_t+0x11c>
 800e496:	7d23      	ldrb	r3, [r4, #20]
 800e498:	2b01      	cmp	r3, #1
 800e49a:	d02d      	beq.n	800e4f8 <ucdr_serialize_int64_t+0x128>
 800e49c:	68a3      	ldr	r3, [r4, #8]
 800e49e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e4a2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e4a6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e4aa:	7018      	strb	r0, [r3, #0]
 800e4ac:	68a3      	ldr	r3, [r4, #8]
 800e4ae:	705a      	strb	r2, [r3, #1]
 800e4b0:	68a3      	ldr	r3, [r4, #8]
 800e4b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e4b6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800e4ba:	7099      	strb	r1, [r3, #2]
 800e4bc:	68a3      	ldr	r3, [r4, #8]
 800e4be:	70da      	strb	r2, [r3, #3]
 800e4c0:	68a3      	ldr	r3, [r4, #8]
 800e4c2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e4c6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e4ca:	7118      	strb	r0, [r3, #4]
 800e4cc:	68a3      	ldr	r3, [r4, #8]
 800e4ce:	715a      	strb	r2, [r3, #5]
 800e4d0:	68a3      	ldr	r3, [r4, #8]
 800e4d2:	f89d 2000 	ldrb.w	r2, [sp]
 800e4d6:	7199      	strb	r1, [r3, #6]
 800e4d8:	68a3      	ldr	r3, [r4, #8]
 800e4da:	71da      	strb	r2, [r3, #7]
 800e4dc:	2108      	movs	r1, #8
 800e4de:	68a2      	ldr	r2, [r4, #8]
 800e4e0:	6923      	ldr	r3, [r4, #16]
 800e4e2:	440a      	add	r2, r1
 800e4e4:	7561      	strb	r1, [r4, #21]
 800e4e6:	440b      	add	r3, r1
 800e4e8:	60a2      	str	r2, [r4, #8]
 800e4ea:	6123      	str	r3, [r4, #16]
 800e4ec:	7da0      	ldrb	r0, [r4, #22]
 800e4ee:	f080 0001 	eor.w	r0, r0, #1
 800e4f2:	b002      	add	sp, #8
 800e4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e4f8:	466b      	mov	r3, sp
 800e4fa:	68a2      	ldr	r2, [r4, #8]
 800e4fc:	cb03      	ldmia	r3!, {r0, r1}
 800e4fe:	6010      	str	r0, [r2, #0]
 800e500:	6051      	str	r1, [r2, #4]
 800e502:	e7eb      	b.n	800e4dc <ucdr_serialize_int64_t+0x10c>
 800e504:	68a2      	ldr	r2, [r4, #8]
 800e506:	6923      	ldr	r3, [r4, #16]
 800e508:	7da0      	ldrb	r0, [r4, #22]
 800e50a:	1b92      	subs	r2, r2, r6
 800e50c:	1b9b      	subs	r3, r3, r6
 800e50e:	7567      	strb	r7, [r4, #21]
 800e510:	f080 0001 	eor.w	r0, r0, #1
 800e514:	60a2      	str	r2, [r4, #8]
 800e516:	6123      	str	r3, [r4, #16]
 800e518:	b002      	add	sp, #8
 800e51a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e51e:	68a3      	ldr	r3, [r4, #8]
 800e520:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e524:	701a      	strb	r2, [r3, #0]
 800e526:	68a3      	ldr	r3, [r4, #8]
 800e528:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e52c:	701a      	strb	r2, [r3, #0]
 800e52e:	68a3      	ldr	r3, [r4, #8]
 800e530:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e534:	701a      	strb	r2, [r3, #0]
 800e536:	68a3      	ldr	r3, [r4, #8]
 800e538:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e53c:	701a      	strb	r2, [r3, #0]
 800e53e:	68a3      	ldr	r3, [r4, #8]
 800e540:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e544:	701a      	strb	r2, [r3, #0]
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e54c:	701a      	strb	r2, [r3, #0]
 800e54e:	68a3      	ldr	r3, [r4, #8]
 800e550:	f89d 2000 	ldrb.w	r2, [sp]
 800e554:	701a      	strb	r2, [r3, #0]
 800e556:	e78a      	b.n	800e46e <ucdr_serialize_int64_t+0x9e>
 800e558:	4628      	mov	r0, r5
 800e55a:	466d      	mov	r5, sp
 800e55c:	4632      	mov	r2, r6
 800e55e:	4629      	mov	r1, r5
 800e560:	f00d fa6d 	bl	801ba3e <memcpy>
 800e564:	4642      	mov	r2, r8
 800e566:	19a9      	adds	r1, r5, r6
 800e568:	68a0      	ldr	r0, [r4, #8]
 800e56a:	f00d fa68 	bl	801ba3e <memcpy>
 800e56e:	e77e      	b.n	800e46e <ucdr_serialize_int64_t+0x9e>

0800e570 <ucdr_deserialize_int64_t>:
 800e570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e574:	4604      	mov	r4, r0
 800e576:	460d      	mov	r5, r1
 800e578:	2108      	movs	r1, #8
 800e57a:	f000 fab5 	bl	800eae8 <ucdr_buffer_alignment>
 800e57e:	4601      	mov	r1, r0
 800e580:	4620      	mov	r0, r4
 800e582:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e586:	f000 faf7 	bl	800eb78 <ucdr_advance_buffer>
 800e58a:	2108      	movs	r1, #8
 800e58c:	4620      	mov	r0, r4
 800e58e:	f000 fa4b 	bl	800ea28 <ucdr_check_buffer_available_for>
 800e592:	2800      	cmp	r0, #0
 800e594:	d151      	bne.n	800e63a <ucdr_deserialize_int64_t+0xca>
 800e596:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e59a:	42be      	cmp	r6, r7
 800e59c:	d948      	bls.n	800e630 <ucdr_deserialize_int64_t+0xc0>
 800e59e:	6923      	ldr	r3, [r4, #16]
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	60a6      	str	r6, [r4, #8]
 800e5a4:	1bf6      	subs	r6, r6, r7
 800e5a6:	4433      	add	r3, r6
 800e5a8:	f1c6 0908 	rsb	r9, r6, #8
 800e5ac:	6123      	str	r3, [r4, #16]
 800e5ae:	4649      	mov	r1, r9
 800e5b0:	f000 fa46 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e5b4:	2800      	cmp	r0, #0
 800e5b6:	d06d      	beq.n	800e694 <ucdr_deserialize_int64_t+0x124>
 800e5b8:	7d23      	ldrb	r3, [r4, #20]
 800e5ba:	2b01      	cmp	r3, #1
 800e5bc:	f000 8093 	beq.w	800e6e6 <ucdr_deserialize_int64_t+0x176>
 800e5c0:	79fb      	ldrb	r3, [r7, #7]
 800e5c2:	702b      	strb	r3, [r5, #0]
 800e5c4:	2e00      	cmp	r6, #0
 800e5c6:	d072      	beq.n	800e6ae <ucdr_deserialize_int64_t+0x13e>
 800e5c8:	79bb      	ldrb	r3, [r7, #6]
 800e5ca:	2e01      	cmp	r6, #1
 800e5cc:	706b      	strb	r3, [r5, #1]
 800e5ce:	f105 0302 	add.w	r3, r5, #2
 800e5d2:	d070      	beq.n	800e6b6 <ucdr_deserialize_int64_t+0x146>
 800e5d4:	797b      	ldrb	r3, [r7, #5]
 800e5d6:	2e02      	cmp	r6, #2
 800e5d8:	70ab      	strb	r3, [r5, #2]
 800e5da:	f105 0303 	add.w	r3, r5, #3
 800e5de:	d06e      	beq.n	800e6be <ucdr_deserialize_int64_t+0x14e>
 800e5e0:	793b      	ldrb	r3, [r7, #4]
 800e5e2:	2e03      	cmp	r6, #3
 800e5e4:	70eb      	strb	r3, [r5, #3]
 800e5e6:	f105 0304 	add.w	r3, r5, #4
 800e5ea:	d06c      	beq.n	800e6c6 <ucdr_deserialize_int64_t+0x156>
 800e5ec:	78fb      	ldrb	r3, [r7, #3]
 800e5ee:	2e04      	cmp	r6, #4
 800e5f0:	712b      	strb	r3, [r5, #4]
 800e5f2:	f105 0305 	add.w	r3, r5, #5
 800e5f6:	d06a      	beq.n	800e6ce <ucdr_deserialize_int64_t+0x15e>
 800e5f8:	78bb      	ldrb	r3, [r7, #2]
 800e5fa:	2e05      	cmp	r6, #5
 800e5fc:	716b      	strb	r3, [r5, #5]
 800e5fe:	f105 0306 	add.w	r3, r5, #6
 800e602:	d068      	beq.n	800e6d6 <ucdr_deserialize_int64_t+0x166>
 800e604:	787b      	ldrb	r3, [r7, #1]
 800e606:	2e06      	cmp	r6, #6
 800e608:	71ab      	strb	r3, [r5, #6]
 800e60a:	f105 0307 	add.w	r3, r5, #7
 800e60e:	d066      	beq.n	800e6de <ucdr_deserialize_int64_t+0x16e>
 800e610:	783b      	ldrb	r3, [r7, #0]
 800e612:	71eb      	strb	r3, [r5, #7]
 800e614:	6923      	ldr	r3, [r4, #16]
 800e616:	2108      	movs	r1, #8
 800e618:	68a2      	ldr	r2, [r4, #8]
 800e61a:	3308      	adds	r3, #8
 800e61c:	7da0      	ldrb	r0, [r4, #22]
 800e61e:	444a      	add	r2, r9
 800e620:	7561      	strb	r1, [r4, #21]
 800e622:	1b9e      	subs	r6, r3, r6
 800e624:	f080 0001 	eor.w	r0, r0, #1
 800e628:	60a2      	str	r2, [r4, #8]
 800e62a:	6126      	str	r6, [r4, #16]
 800e62c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e630:	2108      	movs	r1, #8
 800e632:	4620      	mov	r0, r4
 800e634:	f000 fa04 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e638:	b310      	cbz	r0, 800e680 <ucdr_deserialize_int64_t+0x110>
 800e63a:	7d23      	ldrb	r3, [r4, #20]
 800e63c:	2b01      	cmp	r3, #1
 800e63e:	68a3      	ldr	r3, [r4, #8]
 800e640:	d023      	beq.n	800e68a <ucdr_deserialize_int64_t+0x11a>
 800e642:	79db      	ldrb	r3, [r3, #7]
 800e644:	702b      	strb	r3, [r5, #0]
 800e646:	68a3      	ldr	r3, [r4, #8]
 800e648:	799b      	ldrb	r3, [r3, #6]
 800e64a:	706b      	strb	r3, [r5, #1]
 800e64c:	68a3      	ldr	r3, [r4, #8]
 800e64e:	795b      	ldrb	r3, [r3, #5]
 800e650:	70ab      	strb	r3, [r5, #2]
 800e652:	68a3      	ldr	r3, [r4, #8]
 800e654:	791b      	ldrb	r3, [r3, #4]
 800e656:	70eb      	strb	r3, [r5, #3]
 800e658:	68a3      	ldr	r3, [r4, #8]
 800e65a:	78db      	ldrb	r3, [r3, #3]
 800e65c:	712b      	strb	r3, [r5, #4]
 800e65e:	68a3      	ldr	r3, [r4, #8]
 800e660:	789b      	ldrb	r3, [r3, #2]
 800e662:	716b      	strb	r3, [r5, #5]
 800e664:	68a3      	ldr	r3, [r4, #8]
 800e666:	785b      	ldrb	r3, [r3, #1]
 800e668:	71ab      	strb	r3, [r5, #6]
 800e66a:	68a3      	ldr	r3, [r4, #8]
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	71eb      	strb	r3, [r5, #7]
 800e670:	2108      	movs	r1, #8
 800e672:	68a2      	ldr	r2, [r4, #8]
 800e674:	6923      	ldr	r3, [r4, #16]
 800e676:	440a      	add	r2, r1
 800e678:	7561      	strb	r1, [r4, #21]
 800e67a:	440b      	add	r3, r1
 800e67c:	60a2      	str	r2, [r4, #8]
 800e67e:	6123      	str	r3, [r4, #16]
 800e680:	7da0      	ldrb	r0, [r4, #22]
 800e682:	f080 0001 	eor.w	r0, r0, #1
 800e686:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	602a      	str	r2, [r5, #0]
 800e690:	606b      	str	r3, [r5, #4]
 800e692:	e7ed      	b.n	800e670 <ucdr_deserialize_int64_t+0x100>
 800e694:	68a2      	ldr	r2, [r4, #8]
 800e696:	6923      	ldr	r3, [r4, #16]
 800e698:	1b92      	subs	r2, r2, r6
 800e69a:	7da0      	ldrb	r0, [r4, #22]
 800e69c:	1b9b      	subs	r3, r3, r6
 800e69e:	f884 8015 	strb.w	r8, [r4, #21]
 800e6a2:	f080 0001 	eor.w	r0, r0, #1
 800e6a6:	60a2      	str	r2, [r4, #8]
 800e6a8:	6123      	str	r3, [r4, #16]
 800e6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6ae:	68a3      	ldr	r3, [r4, #8]
 800e6b0:	799b      	ldrb	r3, [r3, #6]
 800e6b2:	706b      	strb	r3, [r5, #1]
 800e6b4:	1cab      	adds	r3, r5, #2
 800e6b6:	68a2      	ldr	r2, [r4, #8]
 800e6b8:	7952      	ldrb	r2, [r2, #5]
 800e6ba:	f803 2b01 	strb.w	r2, [r3], #1
 800e6be:	68a2      	ldr	r2, [r4, #8]
 800e6c0:	7912      	ldrb	r2, [r2, #4]
 800e6c2:	f803 2b01 	strb.w	r2, [r3], #1
 800e6c6:	68a2      	ldr	r2, [r4, #8]
 800e6c8:	78d2      	ldrb	r2, [r2, #3]
 800e6ca:	f803 2b01 	strb.w	r2, [r3], #1
 800e6ce:	68a2      	ldr	r2, [r4, #8]
 800e6d0:	7892      	ldrb	r2, [r2, #2]
 800e6d2:	f803 2b01 	strb.w	r2, [r3], #1
 800e6d6:	68a2      	ldr	r2, [r4, #8]
 800e6d8:	7852      	ldrb	r2, [r2, #1]
 800e6da:	f803 2b01 	strb.w	r2, [r3], #1
 800e6de:	68a2      	ldr	r2, [r4, #8]
 800e6e0:	7812      	ldrb	r2, [r2, #0]
 800e6e2:	701a      	strb	r2, [r3, #0]
 800e6e4:	e796      	b.n	800e614 <ucdr_deserialize_int64_t+0xa4>
 800e6e6:	4639      	mov	r1, r7
 800e6e8:	4632      	mov	r2, r6
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	f00d f9a7 	bl	801ba3e <memcpy>
 800e6f0:	464a      	mov	r2, r9
 800e6f2:	19a8      	adds	r0, r5, r6
 800e6f4:	68a1      	ldr	r1, [r4, #8]
 800e6f6:	f00d f9a2 	bl	801ba3e <memcpy>
 800e6fa:	e78b      	b.n	800e614 <ucdr_deserialize_int64_t+0xa4>

0800e6fc <ucdr_serialize_double>:
 800e6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e700:	4604      	mov	r4, r0
 800e702:	b082      	sub	sp, #8
 800e704:	2108      	movs	r1, #8
 800e706:	ed8d 0b00 	vstr	d0, [sp]
 800e70a:	f000 f9ed 	bl	800eae8 <ucdr_buffer_alignment>
 800e70e:	4601      	mov	r1, r0
 800e710:	4620      	mov	r0, r4
 800e712:	7d67      	ldrb	r7, [r4, #21]
 800e714:	f000 fa30 	bl	800eb78 <ucdr_advance_buffer>
 800e718:	2108      	movs	r1, #8
 800e71a:	4620      	mov	r0, r4
 800e71c:	f000 f984 	bl	800ea28 <ucdr_check_buffer_available_for>
 800e720:	2800      	cmp	r0, #0
 800e722:	d14e      	bne.n	800e7c2 <ucdr_serialize_double+0xc6>
 800e724:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800e728:	42ab      	cmp	r3, r5
 800e72a:	d945      	bls.n	800e7b8 <ucdr_serialize_double+0xbc>
 800e72c:	1b5e      	subs	r6, r3, r5
 800e72e:	60a3      	str	r3, [r4, #8]
 800e730:	6923      	ldr	r3, [r4, #16]
 800e732:	4620      	mov	r0, r4
 800e734:	f1c6 0808 	rsb	r8, r6, #8
 800e738:	4433      	add	r3, r6
 800e73a:	4641      	mov	r1, r8
 800e73c:	6123      	str	r3, [r4, #16]
 800e73e:	f000 f97f 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e742:	2800      	cmp	r0, #0
 800e744:	d074      	beq.n	800e830 <ucdr_serialize_double+0x134>
 800e746:	7d23      	ldrb	r3, [r4, #20]
 800e748:	2b01      	cmp	r3, #1
 800e74a:	f000 809b 	beq.w	800e884 <ucdr_serialize_double+0x188>
 800e74e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800e752:	702b      	strb	r3, [r5, #0]
 800e754:	2e00      	cmp	r6, #0
 800e756:	d078      	beq.n	800e84a <ucdr_serialize_double+0x14e>
 800e758:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800e75c:	2e01      	cmp	r6, #1
 800e75e:	706b      	strb	r3, [r5, #1]
 800e760:	d077      	beq.n	800e852 <ucdr_serialize_double+0x156>
 800e762:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800e766:	2e02      	cmp	r6, #2
 800e768:	70ab      	strb	r3, [r5, #2]
 800e76a:	d076      	beq.n	800e85a <ucdr_serialize_double+0x15e>
 800e76c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800e770:	2e03      	cmp	r6, #3
 800e772:	70eb      	strb	r3, [r5, #3]
 800e774:	d075      	beq.n	800e862 <ucdr_serialize_double+0x166>
 800e776:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e77a:	2e04      	cmp	r6, #4
 800e77c:	712b      	strb	r3, [r5, #4]
 800e77e:	d074      	beq.n	800e86a <ucdr_serialize_double+0x16e>
 800e780:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800e784:	2e05      	cmp	r6, #5
 800e786:	716b      	strb	r3, [r5, #5]
 800e788:	d073      	beq.n	800e872 <ucdr_serialize_double+0x176>
 800e78a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800e78e:	2e06      	cmp	r6, #6
 800e790:	71ab      	strb	r3, [r5, #6]
 800e792:	d072      	beq.n	800e87a <ucdr_serialize_double+0x17e>
 800e794:	f89d 3000 	ldrb.w	r3, [sp]
 800e798:	71eb      	strb	r3, [r5, #7]
 800e79a:	6923      	ldr	r3, [r4, #16]
 800e79c:	2108      	movs	r1, #8
 800e79e:	68a2      	ldr	r2, [r4, #8]
 800e7a0:	3308      	adds	r3, #8
 800e7a2:	7da0      	ldrb	r0, [r4, #22]
 800e7a4:	4442      	add	r2, r8
 800e7a6:	7561      	strb	r1, [r4, #21]
 800e7a8:	1b9e      	subs	r6, r3, r6
 800e7aa:	f080 0001 	eor.w	r0, r0, #1
 800e7ae:	60a2      	str	r2, [r4, #8]
 800e7b0:	6126      	str	r6, [r4, #16]
 800e7b2:	b002      	add	sp, #8
 800e7b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7b8:	2108      	movs	r1, #8
 800e7ba:	4620      	mov	r0, r4
 800e7bc:	f000 f940 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e7c0:	b350      	cbz	r0, 800e818 <ucdr_serialize_double+0x11c>
 800e7c2:	7d23      	ldrb	r3, [r4, #20]
 800e7c4:	2b01      	cmp	r3, #1
 800e7c6:	d02d      	beq.n	800e824 <ucdr_serialize_double+0x128>
 800e7c8:	68a3      	ldr	r3, [r4, #8]
 800e7ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800e7ce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e7d2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 800e7d6:	7018      	strb	r0, [r3, #0]
 800e7d8:	68a3      	ldr	r3, [r4, #8]
 800e7da:	705a      	strb	r2, [r3, #1]
 800e7dc:	68a3      	ldr	r3, [r4, #8]
 800e7de:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e7e2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800e7e6:	7099      	strb	r1, [r3, #2]
 800e7e8:	68a3      	ldr	r3, [r4, #8]
 800e7ea:	70da      	strb	r2, [r3, #3]
 800e7ec:	68a3      	ldr	r3, [r4, #8]
 800e7ee:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e7f2:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800e7f6:	7118      	strb	r0, [r3, #4]
 800e7f8:	68a3      	ldr	r3, [r4, #8]
 800e7fa:	715a      	strb	r2, [r3, #5]
 800e7fc:	68a3      	ldr	r3, [r4, #8]
 800e7fe:	f89d 2000 	ldrb.w	r2, [sp]
 800e802:	7199      	strb	r1, [r3, #6]
 800e804:	68a3      	ldr	r3, [r4, #8]
 800e806:	71da      	strb	r2, [r3, #7]
 800e808:	2108      	movs	r1, #8
 800e80a:	68a2      	ldr	r2, [r4, #8]
 800e80c:	6923      	ldr	r3, [r4, #16]
 800e80e:	440a      	add	r2, r1
 800e810:	7561      	strb	r1, [r4, #21]
 800e812:	440b      	add	r3, r1
 800e814:	60a2      	str	r2, [r4, #8]
 800e816:	6123      	str	r3, [r4, #16]
 800e818:	7da0      	ldrb	r0, [r4, #22]
 800e81a:	f080 0001 	eor.w	r0, r0, #1
 800e81e:	b002      	add	sp, #8
 800e820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e824:	466b      	mov	r3, sp
 800e826:	68a2      	ldr	r2, [r4, #8]
 800e828:	cb03      	ldmia	r3!, {r0, r1}
 800e82a:	6010      	str	r0, [r2, #0]
 800e82c:	6051      	str	r1, [r2, #4]
 800e82e:	e7eb      	b.n	800e808 <ucdr_serialize_double+0x10c>
 800e830:	68a2      	ldr	r2, [r4, #8]
 800e832:	6923      	ldr	r3, [r4, #16]
 800e834:	7da0      	ldrb	r0, [r4, #22]
 800e836:	1b92      	subs	r2, r2, r6
 800e838:	1b9b      	subs	r3, r3, r6
 800e83a:	7567      	strb	r7, [r4, #21]
 800e83c:	f080 0001 	eor.w	r0, r0, #1
 800e840:	60a2      	str	r2, [r4, #8]
 800e842:	6123      	str	r3, [r4, #16]
 800e844:	b002      	add	sp, #8
 800e846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e84a:	68a3      	ldr	r3, [r4, #8]
 800e84c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800e850:	701a      	strb	r2, [r3, #0]
 800e852:	68a3      	ldr	r3, [r4, #8]
 800e854:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800e858:	701a      	strb	r2, [r3, #0]
 800e85a:	68a3      	ldr	r3, [r4, #8]
 800e85c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800e860:	701a      	strb	r2, [r3, #0]
 800e862:	68a3      	ldr	r3, [r4, #8]
 800e864:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	68a3      	ldr	r3, [r4, #8]
 800e86c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800e870:	701a      	strb	r2, [r3, #0]
 800e872:	68a3      	ldr	r3, [r4, #8]
 800e874:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800e878:	701a      	strb	r2, [r3, #0]
 800e87a:	68a3      	ldr	r3, [r4, #8]
 800e87c:	f89d 2000 	ldrb.w	r2, [sp]
 800e880:	701a      	strb	r2, [r3, #0]
 800e882:	e78a      	b.n	800e79a <ucdr_serialize_double+0x9e>
 800e884:	4628      	mov	r0, r5
 800e886:	466d      	mov	r5, sp
 800e888:	4632      	mov	r2, r6
 800e88a:	4629      	mov	r1, r5
 800e88c:	f00d f8d7 	bl	801ba3e <memcpy>
 800e890:	4642      	mov	r2, r8
 800e892:	19a9      	adds	r1, r5, r6
 800e894:	68a0      	ldr	r0, [r4, #8]
 800e896:	f00d f8d2 	bl	801ba3e <memcpy>
 800e89a:	e77e      	b.n	800e79a <ucdr_serialize_double+0x9e>

0800e89c <ucdr_deserialize_double>:
 800e89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8a0:	4604      	mov	r4, r0
 800e8a2:	460d      	mov	r5, r1
 800e8a4:	2108      	movs	r1, #8
 800e8a6:	f000 f91f 	bl	800eae8 <ucdr_buffer_alignment>
 800e8aa:	4601      	mov	r1, r0
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	f894 8015 	ldrb.w	r8, [r4, #21]
 800e8b2:	f000 f961 	bl	800eb78 <ucdr_advance_buffer>
 800e8b6:	2108      	movs	r1, #8
 800e8b8:	4620      	mov	r0, r4
 800e8ba:	f000 f8b5 	bl	800ea28 <ucdr_check_buffer_available_for>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	d151      	bne.n	800e966 <ucdr_deserialize_double+0xca>
 800e8c2:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800e8c6:	42be      	cmp	r6, r7
 800e8c8:	d948      	bls.n	800e95c <ucdr_deserialize_double+0xc0>
 800e8ca:	6923      	ldr	r3, [r4, #16]
 800e8cc:	4620      	mov	r0, r4
 800e8ce:	60a6      	str	r6, [r4, #8]
 800e8d0:	1bf6      	subs	r6, r6, r7
 800e8d2:	4433      	add	r3, r6
 800e8d4:	f1c6 0908 	rsb	r9, r6, #8
 800e8d8:	6123      	str	r3, [r4, #16]
 800e8da:	4649      	mov	r1, r9
 800e8dc:	f000 f8b0 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d06d      	beq.n	800e9c0 <ucdr_deserialize_double+0x124>
 800e8e4:	7d23      	ldrb	r3, [r4, #20]
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	f000 8093 	beq.w	800ea12 <ucdr_deserialize_double+0x176>
 800e8ec:	79fb      	ldrb	r3, [r7, #7]
 800e8ee:	702b      	strb	r3, [r5, #0]
 800e8f0:	2e00      	cmp	r6, #0
 800e8f2:	d072      	beq.n	800e9da <ucdr_deserialize_double+0x13e>
 800e8f4:	79bb      	ldrb	r3, [r7, #6]
 800e8f6:	2e01      	cmp	r6, #1
 800e8f8:	706b      	strb	r3, [r5, #1]
 800e8fa:	f105 0302 	add.w	r3, r5, #2
 800e8fe:	d070      	beq.n	800e9e2 <ucdr_deserialize_double+0x146>
 800e900:	797b      	ldrb	r3, [r7, #5]
 800e902:	2e02      	cmp	r6, #2
 800e904:	70ab      	strb	r3, [r5, #2]
 800e906:	f105 0303 	add.w	r3, r5, #3
 800e90a:	d06e      	beq.n	800e9ea <ucdr_deserialize_double+0x14e>
 800e90c:	793b      	ldrb	r3, [r7, #4]
 800e90e:	2e03      	cmp	r6, #3
 800e910:	70eb      	strb	r3, [r5, #3]
 800e912:	f105 0304 	add.w	r3, r5, #4
 800e916:	d06c      	beq.n	800e9f2 <ucdr_deserialize_double+0x156>
 800e918:	78fb      	ldrb	r3, [r7, #3]
 800e91a:	2e04      	cmp	r6, #4
 800e91c:	712b      	strb	r3, [r5, #4]
 800e91e:	f105 0305 	add.w	r3, r5, #5
 800e922:	d06a      	beq.n	800e9fa <ucdr_deserialize_double+0x15e>
 800e924:	78bb      	ldrb	r3, [r7, #2]
 800e926:	2e05      	cmp	r6, #5
 800e928:	716b      	strb	r3, [r5, #5]
 800e92a:	f105 0306 	add.w	r3, r5, #6
 800e92e:	d068      	beq.n	800ea02 <ucdr_deserialize_double+0x166>
 800e930:	787b      	ldrb	r3, [r7, #1]
 800e932:	2e06      	cmp	r6, #6
 800e934:	71ab      	strb	r3, [r5, #6]
 800e936:	f105 0307 	add.w	r3, r5, #7
 800e93a:	d066      	beq.n	800ea0a <ucdr_deserialize_double+0x16e>
 800e93c:	783b      	ldrb	r3, [r7, #0]
 800e93e:	71eb      	strb	r3, [r5, #7]
 800e940:	6923      	ldr	r3, [r4, #16]
 800e942:	2108      	movs	r1, #8
 800e944:	68a2      	ldr	r2, [r4, #8]
 800e946:	3308      	adds	r3, #8
 800e948:	7da0      	ldrb	r0, [r4, #22]
 800e94a:	444a      	add	r2, r9
 800e94c:	7561      	strb	r1, [r4, #21]
 800e94e:	1b9e      	subs	r6, r3, r6
 800e950:	f080 0001 	eor.w	r0, r0, #1
 800e954:	60a2      	str	r2, [r4, #8]
 800e956:	6126      	str	r6, [r4, #16]
 800e958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e95c:	2108      	movs	r1, #8
 800e95e:	4620      	mov	r0, r4
 800e960:	f000 f86e 	bl	800ea40 <ucdr_check_final_buffer_behavior>
 800e964:	b310      	cbz	r0, 800e9ac <ucdr_deserialize_double+0x110>
 800e966:	7d23      	ldrb	r3, [r4, #20]
 800e968:	2b01      	cmp	r3, #1
 800e96a:	68a3      	ldr	r3, [r4, #8]
 800e96c:	d023      	beq.n	800e9b6 <ucdr_deserialize_double+0x11a>
 800e96e:	79db      	ldrb	r3, [r3, #7]
 800e970:	702b      	strb	r3, [r5, #0]
 800e972:	68a3      	ldr	r3, [r4, #8]
 800e974:	799b      	ldrb	r3, [r3, #6]
 800e976:	706b      	strb	r3, [r5, #1]
 800e978:	68a3      	ldr	r3, [r4, #8]
 800e97a:	795b      	ldrb	r3, [r3, #5]
 800e97c:	70ab      	strb	r3, [r5, #2]
 800e97e:	68a3      	ldr	r3, [r4, #8]
 800e980:	791b      	ldrb	r3, [r3, #4]
 800e982:	70eb      	strb	r3, [r5, #3]
 800e984:	68a3      	ldr	r3, [r4, #8]
 800e986:	78db      	ldrb	r3, [r3, #3]
 800e988:	712b      	strb	r3, [r5, #4]
 800e98a:	68a3      	ldr	r3, [r4, #8]
 800e98c:	789b      	ldrb	r3, [r3, #2]
 800e98e:	716b      	strb	r3, [r5, #5]
 800e990:	68a3      	ldr	r3, [r4, #8]
 800e992:	785b      	ldrb	r3, [r3, #1]
 800e994:	71ab      	strb	r3, [r5, #6]
 800e996:	68a3      	ldr	r3, [r4, #8]
 800e998:	781b      	ldrb	r3, [r3, #0]
 800e99a:	71eb      	strb	r3, [r5, #7]
 800e99c:	2108      	movs	r1, #8
 800e99e:	68a2      	ldr	r2, [r4, #8]
 800e9a0:	6923      	ldr	r3, [r4, #16]
 800e9a2:	440a      	add	r2, r1
 800e9a4:	7561      	strb	r1, [r4, #21]
 800e9a6:	440b      	add	r3, r1
 800e9a8:	60a2      	str	r2, [r4, #8]
 800e9aa:	6123      	str	r3, [r4, #16]
 800e9ac:	7da0      	ldrb	r0, [r4, #22]
 800e9ae:	f080 0001 	eor.w	r0, r0, #1
 800e9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	602a      	str	r2, [r5, #0]
 800e9bc:	606b      	str	r3, [r5, #4]
 800e9be:	e7ed      	b.n	800e99c <ucdr_deserialize_double+0x100>
 800e9c0:	68a2      	ldr	r2, [r4, #8]
 800e9c2:	6923      	ldr	r3, [r4, #16]
 800e9c4:	1b92      	subs	r2, r2, r6
 800e9c6:	7da0      	ldrb	r0, [r4, #22]
 800e9c8:	1b9b      	subs	r3, r3, r6
 800e9ca:	f884 8015 	strb.w	r8, [r4, #21]
 800e9ce:	f080 0001 	eor.w	r0, r0, #1
 800e9d2:	60a2      	str	r2, [r4, #8]
 800e9d4:	6123      	str	r3, [r4, #16]
 800e9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9da:	68a3      	ldr	r3, [r4, #8]
 800e9dc:	799b      	ldrb	r3, [r3, #6]
 800e9de:	706b      	strb	r3, [r5, #1]
 800e9e0:	1cab      	adds	r3, r5, #2
 800e9e2:	68a2      	ldr	r2, [r4, #8]
 800e9e4:	7952      	ldrb	r2, [r2, #5]
 800e9e6:	f803 2b01 	strb.w	r2, [r3], #1
 800e9ea:	68a2      	ldr	r2, [r4, #8]
 800e9ec:	7912      	ldrb	r2, [r2, #4]
 800e9ee:	f803 2b01 	strb.w	r2, [r3], #1
 800e9f2:	68a2      	ldr	r2, [r4, #8]
 800e9f4:	78d2      	ldrb	r2, [r2, #3]
 800e9f6:	f803 2b01 	strb.w	r2, [r3], #1
 800e9fa:	68a2      	ldr	r2, [r4, #8]
 800e9fc:	7892      	ldrb	r2, [r2, #2]
 800e9fe:	f803 2b01 	strb.w	r2, [r3], #1
 800ea02:	68a2      	ldr	r2, [r4, #8]
 800ea04:	7852      	ldrb	r2, [r2, #1]
 800ea06:	f803 2b01 	strb.w	r2, [r3], #1
 800ea0a:	68a2      	ldr	r2, [r4, #8]
 800ea0c:	7812      	ldrb	r2, [r2, #0]
 800ea0e:	701a      	strb	r2, [r3, #0]
 800ea10:	e796      	b.n	800e940 <ucdr_deserialize_double+0xa4>
 800ea12:	4639      	mov	r1, r7
 800ea14:	4632      	mov	r2, r6
 800ea16:	4628      	mov	r0, r5
 800ea18:	f00d f811 	bl	801ba3e <memcpy>
 800ea1c:	464a      	mov	r2, r9
 800ea1e:	19a8      	adds	r0, r5, r6
 800ea20:	68a1      	ldr	r1, [r4, #8]
 800ea22:	f00d f80c 	bl	801ba3e <memcpy>
 800ea26:	e78b      	b.n	800e940 <ucdr_deserialize_double+0xa4>

0800ea28 <ucdr_check_buffer_available_for>:
 800ea28:	7d83      	ldrb	r3, [r0, #22]
 800ea2a:	b93b      	cbnz	r3, 800ea3c <ucdr_check_buffer_available_for+0x14>
 800ea2c:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800ea30:	4419      	add	r1, r3
 800ea32:	4288      	cmp	r0, r1
 800ea34:	bf34      	ite	cc
 800ea36:	2000      	movcc	r0, #0
 800ea38:	2001      	movcs	r0, #1
 800ea3a:	4770      	bx	lr
 800ea3c:	2000      	movs	r0, #0
 800ea3e:	4770      	bx	lr

0800ea40 <ucdr_check_final_buffer_behavior>:
 800ea40:	7d83      	ldrb	r3, [r0, #22]
 800ea42:	b943      	cbnz	r3, 800ea56 <ucdr_check_final_buffer_behavior+0x16>
 800ea44:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800ea48:	b510      	push	{r4, lr}
 800ea4a:	4291      	cmp	r1, r2
 800ea4c:	4604      	mov	r4, r0
 800ea4e:	d205      	bcs.n	800ea5c <ucdr_check_final_buffer_behavior+0x1c>
 800ea50:	2301      	movs	r3, #1
 800ea52:	4618      	mov	r0, r3
 800ea54:	bd10      	pop	{r4, pc}
 800ea56:	2300      	movs	r3, #0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	4770      	bx	lr
 800ea5c:	6982      	ldr	r2, [r0, #24]
 800ea5e:	b13a      	cbz	r2, 800ea70 <ucdr_check_final_buffer_behavior+0x30>
 800ea60:	69c1      	ldr	r1, [r0, #28]
 800ea62:	4790      	blx	r2
 800ea64:	f080 0301 	eor.w	r3, r0, #1
 800ea68:	75a0      	strb	r0, [r4, #22]
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	bd10      	pop	{r4, pc}
 800ea70:	2001      	movs	r0, #1
 800ea72:	75a0      	strb	r0, [r4, #22]
 800ea74:	e7fa      	b.n	800ea6c <ucdr_check_final_buffer_behavior+0x2c>
 800ea76:	bf00      	nop

0800ea78 <ucdr_set_on_full_buffer_callback>:
 800ea78:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800ea7c:	4770      	bx	lr
 800ea7e:	bf00      	nop

0800ea80 <ucdr_init_buffer_origin_offset_endian>:
 800ea80:	b410      	push	{r4}
 800ea82:	9c01      	ldr	r4, [sp, #4]
 800ea84:	440a      	add	r2, r1
 800ea86:	6001      	str	r1, [r0, #0]
 800ea88:	6042      	str	r2, [r0, #4]
 800ea8a:	190a      	adds	r2, r1, r4
 800ea8c:	441c      	add	r4, r3
 800ea8e:	6082      	str	r2, [r0, #8]
 800ea90:	2200      	movs	r2, #0
 800ea92:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800ea96:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800ea9a:	7542      	strb	r2, [r0, #21]
 800ea9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eaa0:	7582      	strb	r2, [r0, #22]
 800eaa2:	7503      	strb	r3, [r0, #20]
 800eaa4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800eaa8:	4770      	bx	lr
 800eaaa:	bf00      	nop

0800eaac <ucdr_init_buffer_origin_offset>:
 800eaac:	b510      	push	{r4, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	9c04      	ldr	r4, [sp, #16]
 800eab2:	9400      	str	r4, [sp, #0]
 800eab4:	2401      	movs	r4, #1
 800eab6:	9401      	str	r4, [sp, #4]
 800eab8:	f7ff ffe2 	bl	800ea80 <ucdr_init_buffer_origin_offset_endian>
 800eabc:	b002      	add	sp, #8
 800eabe:	bd10      	pop	{r4, pc}

0800eac0 <ucdr_init_buffer_origin>:
 800eac0:	b510      	push	{r4, lr}
 800eac2:	2400      	movs	r4, #0
 800eac4:	b082      	sub	sp, #8
 800eac6:	9400      	str	r4, [sp, #0]
 800eac8:	f7ff fff0 	bl	800eaac <ucdr_init_buffer_origin_offset>
 800eacc:	b002      	add	sp, #8
 800eace:	bd10      	pop	{r4, pc}

0800ead0 <ucdr_init_buffer>:
 800ead0:	2300      	movs	r3, #0
 800ead2:	f7ff bff5 	b.w	800eac0 <ucdr_init_buffer_origin>
 800ead6:	bf00      	nop

0800ead8 <ucdr_alignment>:
 800ead8:	fbb0 f2f1 	udiv	r2, r0, r1
 800eadc:	fb02 0011 	mls	r0, r2, r1, r0
 800eae0:	1e4b      	subs	r3, r1, #1
 800eae2:	1a08      	subs	r0, r1, r0
 800eae4:	4018      	ands	r0, r3
 800eae6:	4770      	bx	lr

0800eae8 <ucdr_buffer_alignment>:
 800eae8:	7d43      	ldrb	r3, [r0, #21]
 800eaea:	428b      	cmp	r3, r1
 800eaec:	d209      	bcs.n	800eb02 <ucdr_buffer_alignment+0x1a>
 800eaee:	6903      	ldr	r3, [r0, #16]
 800eaf0:	1e4a      	subs	r2, r1, #1
 800eaf2:	fbb3 f0f1 	udiv	r0, r3, r1
 800eaf6:	fb01 3010 	mls	r0, r1, r0, r3
 800eafa:	1a09      	subs	r1, r1, r0
 800eafc:	ea01 0002 	and.w	r0, r1, r2
 800eb00:	4770      	bx	lr
 800eb02:	2000      	movs	r0, #0
 800eb04:	4770      	bx	lr
 800eb06:	bf00      	nop

0800eb08 <ucdr_align_to>:
 800eb08:	b538      	push	{r3, r4, r5, lr}
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	460d      	mov	r5, r1
 800eb0e:	f7ff ffeb 	bl	800eae8 <ucdr_buffer_alignment>
 800eb12:	68a3      	ldr	r3, [r4, #8]
 800eb14:	7565      	strb	r5, [r4, #21]
 800eb16:	181a      	adds	r2, r3, r0
 800eb18:	6923      	ldr	r3, [r4, #16]
 800eb1a:	4418      	add	r0, r3
 800eb1c:	6863      	ldr	r3, [r4, #4]
 800eb1e:	4293      	cmp	r3, r2
 800eb20:	6120      	str	r0, [r4, #16]
 800eb22:	bf28      	it	cs
 800eb24:	4613      	movcs	r3, r2
 800eb26:	60a3      	str	r3, [r4, #8]
 800eb28:	bd38      	pop	{r3, r4, r5, pc}
 800eb2a:	bf00      	nop

0800eb2c <ucdr_buffer_length>:
 800eb2c:	6882      	ldr	r2, [r0, #8]
 800eb2e:	6800      	ldr	r0, [r0, #0]
 800eb30:	1a10      	subs	r0, r2, r0
 800eb32:	4770      	bx	lr

0800eb34 <ucdr_buffer_remaining>:
 800eb34:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800eb38:	1a10      	subs	r0, r2, r0
 800eb3a:	4770      	bx	lr

0800eb3c <ucdr_check_final_buffer_behavior_array>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	7d83      	ldrb	r3, [r0, #22]
 800eb40:	b9a3      	cbnz	r3, 800eb6c <ucdr_check_final_buffer_behavior_array+0x30>
 800eb42:	4604      	mov	r4, r0
 800eb44:	460d      	mov	r5, r1
 800eb46:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d300      	bcc.n	800eb50 <ucdr_check_final_buffer_behavior_array+0x14>
 800eb4e:	b931      	cbnz	r1, 800eb5e <ucdr_check_final_buffer_behavior_array+0x22>
 800eb50:	4620      	mov	r0, r4
 800eb52:	f7ff ffef 	bl	800eb34 <ucdr_buffer_remaining>
 800eb56:	42a8      	cmp	r0, r5
 800eb58:	bf28      	it	cs
 800eb5a:	4628      	movcs	r0, r5
 800eb5c:	bd38      	pop	{r3, r4, r5, pc}
 800eb5e:	6983      	ldr	r3, [r0, #24]
 800eb60:	b133      	cbz	r3, 800eb70 <ucdr_check_final_buffer_behavior_array+0x34>
 800eb62:	69c1      	ldr	r1, [r0, #28]
 800eb64:	4798      	blx	r3
 800eb66:	75a0      	strb	r0, [r4, #22]
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d0f1      	beq.n	800eb50 <ucdr_check_final_buffer_behavior_array+0x14>
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	bd38      	pop	{r3, r4, r5, pc}
 800eb70:	2301      	movs	r3, #1
 800eb72:	7583      	strb	r3, [r0, #22]
 800eb74:	e7fa      	b.n	800eb6c <ucdr_check_final_buffer_behavior_array+0x30>
 800eb76:	bf00      	nop

0800eb78 <ucdr_advance_buffer>:
 800eb78:	b538      	push	{r3, r4, r5, lr}
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	460d      	mov	r5, r1
 800eb7e:	f7ff ff53 	bl	800ea28 <ucdr_check_buffer_available_for>
 800eb82:	b178      	cbz	r0, 800eba4 <ucdr_advance_buffer+0x2c>
 800eb84:	6923      	ldr	r3, [r4, #16]
 800eb86:	68a2      	ldr	r2, [r4, #8]
 800eb88:	442b      	add	r3, r5
 800eb8a:	442a      	add	r2, r5
 800eb8c:	6123      	str	r3, [r4, #16]
 800eb8e:	2301      	movs	r3, #1
 800eb90:	60a2      	str	r2, [r4, #8]
 800eb92:	7563      	strb	r3, [r4, #21]
 800eb94:	bd38      	pop	{r3, r4, r5, pc}
 800eb96:	68a2      	ldr	r2, [r4, #8]
 800eb98:	1a2d      	subs	r5, r5, r0
 800eb9a:	6923      	ldr	r3, [r4, #16]
 800eb9c:	4402      	add	r2, r0
 800eb9e:	4418      	add	r0, r3
 800eba0:	60a2      	str	r2, [r4, #8]
 800eba2:	6120      	str	r0, [r4, #16]
 800eba4:	4629      	mov	r1, r5
 800eba6:	2201      	movs	r2, #1
 800eba8:	4620      	mov	r0, r4
 800ebaa:	f7ff ffc7 	bl	800eb3c <ucdr_check_final_buffer_behavior_array>
 800ebae:	2800      	cmp	r0, #0
 800ebb0:	d1f1      	bne.n	800eb96 <ucdr_advance_buffer+0x1e>
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	7563      	strb	r3, [r4, #21]
 800ebb6:	bd38      	pop	{r3, r4, r5, pc}

0800ebb8 <ucdr_serialize_sequence_char>:
 800ebb8:	b570      	push	{r4, r5, r6, lr}
 800ebba:	4615      	mov	r5, r2
 800ebbc:	460e      	mov	r6, r1
 800ebbe:	7d01      	ldrb	r1, [r0, #20]
 800ebc0:	4604      	mov	r4, r0
 800ebc2:	f7fe ff5b 	bl	800da7c <ucdr_serialize_endian_uint32_t>
 800ebc6:	b90d      	cbnz	r5, 800ebcc <ucdr_serialize_sequence_char+0x14>
 800ebc8:	2001      	movs	r0, #1
 800ebca:	bd70      	pop	{r4, r5, r6, pc}
 800ebcc:	462b      	mov	r3, r5
 800ebce:	4632      	mov	r2, r6
 800ebd0:	7d21      	ldrb	r1, [r4, #20]
 800ebd2:	4620      	mov	r0, r4
 800ebd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ebd8:	f004 b8ec 	b.w	8012db4 <ucdr_serialize_endian_array_char>

0800ebdc <ucdr_deserialize_sequence_char>:
 800ebdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebe0:	461d      	mov	r5, r3
 800ebe2:	4616      	mov	r6, r2
 800ebe4:	460f      	mov	r7, r1
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	7d01      	ldrb	r1, [r0, #20]
 800ebea:	4604      	mov	r4, r0
 800ebec:	f7ff f86e 	bl	800dccc <ucdr_deserialize_endian_uint32_t>
 800ebf0:	682b      	ldr	r3, [r5, #0]
 800ebf2:	429e      	cmp	r6, r3
 800ebf4:	d201      	bcs.n	800ebfa <ucdr_deserialize_sequence_char+0x1e>
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	75a2      	strb	r2, [r4, #22]
 800ebfa:	b913      	cbnz	r3, 800ec02 <ucdr_deserialize_sequence_char+0x26>
 800ebfc:	2001      	movs	r0, #1
 800ebfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec02:	463a      	mov	r2, r7
 800ec04:	7d21      	ldrb	r1, [r4, #20]
 800ec06:	4620      	mov	r0, r4
 800ec08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec0c:	f004 b904 	b.w	8012e18 <ucdr_deserialize_endian_array_char>

0800ec10 <ucdr_serialize_sequence_uint8_t>:
 800ec10:	b570      	push	{r4, r5, r6, lr}
 800ec12:	4615      	mov	r5, r2
 800ec14:	460e      	mov	r6, r1
 800ec16:	7d01      	ldrb	r1, [r0, #20]
 800ec18:	4604      	mov	r4, r0
 800ec1a:	f7fe ff2f 	bl	800da7c <ucdr_serialize_endian_uint32_t>
 800ec1e:	b90d      	cbnz	r5, 800ec24 <ucdr_serialize_sequence_uint8_t+0x14>
 800ec20:	2001      	movs	r0, #1
 800ec22:	bd70      	pop	{r4, r5, r6, pc}
 800ec24:	462b      	mov	r3, r5
 800ec26:	4632      	mov	r2, r6
 800ec28:	7d21      	ldrb	r1, [r4, #20]
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ec30:	f004 b958 	b.w	8012ee4 <ucdr_serialize_endian_array_uint8_t>

0800ec34 <ucdr_deserialize_sequence_uint8_t>:
 800ec34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec38:	461d      	mov	r5, r3
 800ec3a:	4616      	mov	r6, r2
 800ec3c:	460f      	mov	r7, r1
 800ec3e:	461a      	mov	r2, r3
 800ec40:	7d01      	ldrb	r1, [r0, #20]
 800ec42:	4604      	mov	r4, r0
 800ec44:	f7ff f842 	bl	800dccc <ucdr_deserialize_endian_uint32_t>
 800ec48:	682b      	ldr	r3, [r5, #0]
 800ec4a:	429e      	cmp	r6, r3
 800ec4c:	d201      	bcs.n	800ec52 <ucdr_deserialize_sequence_uint8_t+0x1e>
 800ec4e:	2201      	movs	r2, #1
 800ec50:	75a2      	strb	r2, [r4, #22]
 800ec52:	b913      	cbnz	r3, 800ec5a <ucdr_deserialize_sequence_uint8_t+0x26>
 800ec54:	2001      	movs	r0, #1
 800ec56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5a:	463a      	mov	r2, r7
 800ec5c:	7d21      	ldrb	r1, [r4, #20]
 800ec5e:	4620      	mov	r0, r4
 800ec60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec64:	f004 b9a4 	b.w	8012fb0 <ucdr_deserialize_endian_array_uint8_t>

0800ec68 <rcl_get_zero_initialized_init_options>:
 800ec68:	2000      	movs	r0, #0
 800ec6a:	4770      	bx	lr

0800ec6c <rcl_init_options_init>:
 800ec6c:	b084      	sub	sp, #16
 800ec6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec70:	b097      	sub	sp, #92	; 0x5c
 800ec72:	ae1d      	add	r6, sp, #116	; 0x74
 800ec74:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800ec78:	2800      	cmp	r0, #0
 800ec7a:	d058      	beq.n	800ed2e <rcl_init_options_init+0xc2>
 800ec7c:	6803      	ldr	r3, [r0, #0]
 800ec7e:	4605      	mov	r5, r0
 800ec80:	b133      	cbz	r3, 800ec90 <rcl_init_options_init+0x24>
 800ec82:	2464      	movs	r4, #100	; 0x64
 800ec84:	4620      	mov	r0, r4
 800ec86:	b017      	add	sp, #92	; 0x5c
 800ec88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ec8c:	b004      	add	sp, #16
 800ec8e:	4770      	bx	lr
 800ec90:	4630      	mov	r0, r6
 800ec92:	f001 fdf3 	bl	801087c <rcutils_allocator_is_valid>
 800ec96:	2800      	cmp	r0, #0
 800ec98:	d049      	beq.n	800ed2e <rcl_init_options_init+0xc2>
 800ec9a:	46b4      	mov	ip, r6
 800ec9c:	ac11      	add	r4, sp, #68	; 0x44
 800ec9e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eca4:	f8dc 3000 	ldr.w	r3, [ip]
 800eca8:	2050      	movs	r0, #80	; 0x50
 800ecaa:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ecb0:	4798      	blx	r3
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	6028      	str	r0, [r5, #0]
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	d03b      	beq.n	800ed32 <rcl_init_options_init+0xc6>
 800ecba:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800ecbe:	4686      	mov	lr, r0
 800ecc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ecc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ecc8:	f8dc 3000 	ldr.w	r3, [ip]
 800eccc:	a802      	add	r0, sp, #8
 800ecce:	f8ce 3000 	str.w	r3, [lr]
 800ecd2:	f001 fff1 	bl	8010cb8 <rmw_get_zero_initialized_init_options>
 800ecd6:	f10d 0e08 	add.w	lr, sp, #8
 800ecda:	f104 0c18 	add.w	ip, r4, #24
 800ecde:	682f      	ldr	r7, [r5, #0]
 800ece0:	ac20      	add	r4, sp, #128	; 0x80
 800ece2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ece6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ecea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ecee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ecf2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ecf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ecfa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ecfe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ed02:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ed06:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ed0a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ed0e:	f107 0018 	add.w	r0, r7, #24
 800ed12:	f002 f8f9 	bl	8010f08 <rmw_init_options_init>
 800ed16:	4604      	mov	r4, r0
 800ed18:	2800      	cmp	r0, #0
 800ed1a:	d0b3      	beq.n	800ec84 <rcl_init_options_init+0x18>
 800ed1c:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ed1e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ed20:	6828      	ldr	r0, [r5, #0]
 800ed22:	4798      	blx	r3
 800ed24:	4620      	mov	r0, r4
 800ed26:	f007 ff71 	bl	8016c0c <rcl_convert_rmw_ret_to_rcl_ret>
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	e7aa      	b.n	800ec84 <rcl_init_options_init+0x18>
 800ed2e:	240b      	movs	r4, #11
 800ed30:	e7a8      	b.n	800ec84 <rcl_init_options_init+0x18>
 800ed32:	240a      	movs	r4, #10
 800ed34:	e7a6      	b.n	800ec84 <rcl_init_options_init+0x18>
 800ed36:	bf00      	nop

0800ed38 <rcl_init_options_fini>:
 800ed38:	b530      	push	{r4, r5, lr}
 800ed3a:	b087      	sub	sp, #28
 800ed3c:	b1f0      	cbz	r0, 800ed7c <rcl_init_options_fini+0x44>
 800ed3e:	6803      	ldr	r3, [r0, #0]
 800ed40:	4604      	mov	r4, r0
 800ed42:	b1db      	cbz	r3, 800ed7c <rcl_init_options_fini+0x44>
 800ed44:	469c      	mov	ip, r3
 800ed46:	f10d 0e04 	add.w	lr, sp, #4
 800ed4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed4e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ed52:	f8dc 3000 	ldr.w	r3, [ip]
 800ed56:	a801      	add	r0, sp, #4
 800ed58:	f8ce 3000 	str.w	r3, [lr]
 800ed5c:	f001 fd8e 	bl	801087c <rcutils_allocator_is_valid>
 800ed60:	b160      	cbz	r0, 800ed7c <rcl_init_options_fini+0x44>
 800ed62:	6820      	ldr	r0, [r4, #0]
 800ed64:	3018      	adds	r0, #24
 800ed66:	f002 f989 	bl	801107c <rmw_init_options_fini>
 800ed6a:	4605      	mov	r5, r0
 800ed6c:	b950      	cbnz	r0, 800ed84 <rcl_init_options_fini+0x4c>
 800ed6e:	6820      	ldr	r0, [r4, #0]
 800ed70:	9b02      	ldr	r3, [sp, #8]
 800ed72:	9905      	ldr	r1, [sp, #20]
 800ed74:	4798      	blx	r3
 800ed76:	4628      	mov	r0, r5
 800ed78:	b007      	add	sp, #28
 800ed7a:	bd30      	pop	{r4, r5, pc}
 800ed7c:	250b      	movs	r5, #11
 800ed7e:	4628      	mov	r0, r5
 800ed80:	b007      	add	sp, #28
 800ed82:	bd30      	pop	{r4, r5, pc}
 800ed84:	f007 ff42 	bl	8016c0c <rcl_convert_rmw_ret_to_rcl_ret>
 800ed88:	4605      	mov	r5, r0
 800ed8a:	e7f8      	b.n	800ed7e <rcl_init_options_fini+0x46>

0800ed8c <rcl_init_options_copy>:
 800ed8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed90:	b094      	sub	sp, #80	; 0x50
 800ed92:	2800      	cmp	r0, #0
 800ed94:	d05b      	beq.n	800ee4e <rcl_init_options_copy+0xc2>
 800ed96:	4604      	mov	r4, r0
 800ed98:	6800      	ldr	r0, [r0, #0]
 800ed9a:	2800      	cmp	r0, #0
 800ed9c:	d057      	beq.n	800ee4e <rcl_init_options_copy+0xc2>
 800ed9e:	460e      	mov	r6, r1
 800eda0:	f001 fd6c 	bl	801087c <rcutils_allocator_is_valid>
 800eda4:	2e00      	cmp	r6, #0
 800eda6:	d052      	beq.n	800ee4e <rcl_init_options_copy+0xc2>
 800eda8:	f080 0001 	eor.w	r0, r0, #1
 800edac:	b2c0      	uxtb	r0, r0
 800edae:	2800      	cmp	r0, #0
 800edb0:	d14d      	bne.n	800ee4e <rcl_init_options_copy+0xc2>
 800edb2:	6833      	ldr	r3, [r6, #0]
 800edb4:	b123      	cbz	r3, 800edc0 <rcl_init_options_copy+0x34>
 800edb6:	2464      	movs	r4, #100	; 0x64
 800edb8:	4620      	mov	r0, r4
 800edba:	b014      	add	sp, #80	; 0x50
 800edbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc0:	6827      	ldr	r7, [r4, #0]
 800edc2:	ad0f      	add	r5, sp, #60	; 0x3c
 800edc4:	46bc      	mov	ip, r7
 800edc6:	f8d7 8000 	ldr.w	r8, [r7]
 800edca:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800edd0:	f8dc 3000 	ldr.w	r3, [ip]
 800edd4:	2050      	movs	r0, #80	; 0x50
 800edd6:	4619      	mov	r1, r3
 800edd8:	602b      	str	r3, [r5, #0]
 800edda:	47c0      	blx	r8
 800eddc:	4605      	mov	r5, r0
 800edde:	6030      	str	r0, [r6, #0]
 800ede0:	b3d0      	cbz	r0, 800ee58 <rcl_init_options_copy+0xcc>
 800ede2:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800ede6:	4686      	mov	lr, r0
 800ede8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800edec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800edf0:	f8dc 3000 	ldr.w	r3, [ip]
 800edf4:	4668      	mov	r0, sp
 800edf6:	f8ce 3000 	str.w	r3, [lr]
 800edfa:	f001 ff5d 	bl	8010cb8 <rmw_get_zero_initialized_init_options>
 800edfe:	46ee      	mov	lr, sp
 800ee00:	f105 0c18 	add.w	ip, r5, #24
 800ee04:	6824      	ldr	r4, [r4, #0]
 800ee06:	6835      	ldr	r5, [r6, #0]
 800ee08:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee0c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee10:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee18:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ee1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ee20:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ee24:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ee28:	f104 0018 	add.w	r0, r4, #24
 800ee2c:	f105 0118 	add.w	r1, r5, #24
 800ee30:	f002 f8d2 	bl	8010fd8 <rmw_init_options_copy>
 800ee34:	4604      	mov	r4, r0
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d0be      	beq.n	800edb8 <rcl_init_options_copy+0x2c>
 800ee3a:	f001 fd45 	bl	80108c8 <rcutils_get_error_string>
 800ee3e:	f001 fd5b 	bl	80108f8 <rcutils_reset_error>
 800ee42:	4630      	mov	r0, r6
 800ee44:	f7ff ff78 	bl	800ed38 <rcl_init_options_fini>
 800ee48:	b140      	cbz	r0, 800ee5c <rcl_init_options_copy+0xd0>
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	e7b4      	b.n	800edb8 <rcl_init_options_copy+0x2c>
 800ee4e:	240b      	movs	r4, #11
 800ee50:	4620      	mov	r0, r4
 800ee52:	b014      	add	sp, #80	; 0x50
 800ee54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee58:	240a      	movs	r4, #10
 800ee5a:	e7ad      	b.n	800edb8 <rcl_init_options_copy+0x2c>
 800ee5c:	4620      	mov	r0, r4
 800ee5e:	b014      	add	sp, #80	; 0x50
 800ee60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee64:	f007 bed2 	b.w	8016c0c <rcl_convert_rmw_ret_to_rcl_ret>

0800ee68 <rcl_init_options_set_domain_id>:
 800ee68:	b120      	cbz	r0, 800ee74 <rcl_init_options_set_domain_id+0xc>
 800ee6a:	6803      	ldr	r3, [r0, #0]
 800ee6c:	b113      	cbz	r3, 800ee74 <rcl_init_options_set_domain_id+0xc>
 800ee6e:	2000      	movs	r0, #0
 800ee70:	6259      	str	r1, [r3, #36]	; 0x24
 800ee72:	4770      	bx	lr
 800ee74:	200b      	movs	r0, #11
 800ee76:	4770      	bx	lr

0800ee78 <rcl_get_zero_initialized_node>:
 800ee78:	4a03      	ldr	r2, [pc, #12]	; (800ee88 <rcl_get_zero_initialized_node+0x10>)
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee80:	e883 0003 	stmia.w	r3, {r0, r1}
 800ee84:	4618      	mov	r0, r3
 800ee86:	4770      	bx	lr
 800ee88:	0801cdb4 	.word	0x0801cdb4

0800ee8c <rcl_node_init>:
 800ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee90:	b0a9      	sub	sp, #164	; 0xa4
 800ee92:	4604      	mov	r4, r0
 800ee94:	460e      	mov	r6, r1
 800ee96:	4615      	mov	r5, r2
 800ee98:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800ee9c:	a823      	add	r0, sp, #140	; 0x8c
 800ee9e:	461f      	mov	r7, r3
 800eea0:	f007 ffc4 	bl	8016e2c <rcl_guard_condition_get_default_options>
 800eea4:	f1b8 0f00 	cmp.w	r8, #0
 800eea8:	f000 80f3 	beq.w	800f092 <rcl_node_init+0x206>
 800eeac:	4640      	mov	r0, r8
 800eeae:	f001 fce5 	bl	801087c <rcutils_allocator_is_valid>
 800eeb2:	2d00      	cmp	r5, #0
 800eeb4:	bf18      	it	ne
 800eeb6:	2c00      	cmpne	r4, #0
 800eeb8:	f080 0001 	eor.w	r0, r0, #1
 800eebc:	bf0c      	ite	eq
 800eebe:	f04f 0c01 	moveq.w	ip, #1
 800eec2:	f04f 0c00 	movne.w	ip, #0
 800eec6:	2e00      	cmp	r6, #0
 800eec8:	bf08      	it	eq
 800eeca:	f04c 0c01 	orreq.w	ip, ip, #1
 800eece:	ea4c 0c00 	orr.w	ip, ip, r0
 800eed2:	f01c 09ff 	ands.w	r9, ip, #255	; 0xff
 800eed6:	f040 80dc 	bne.w	800f092 <rcl_node_init+0x206>
 800eeda:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800eede:	f1ba 0f00 	cmp.w	sl, #0
 800eee2:	f040 80fc 	bne.w	800f0de <rcl_node_init+0x252>
 800eee6:	2f00      	cmp	r7, #0
 800eee8:	f000 80d3 	beq.w	800f092 <rcl_node_init+0x206>
 800eeec:	4638      	mov	r0, r7
 800eeee:	f007 feab 	bl	8016c48 <rcl_context_is_valid>
 800eef2:	4683      	mov	fp, r0
 800eef4:	2800      	cmp	r0, #0
 800eef6:	f000 80d2 	beq.w	800f09e <rcl_node_init+0x212>
 800eefa:	4652      	mov	r2, sl
 800eefc:	4630      	mov	r0, r6
 800eefe:	a922      	add	r1, sp, #136	; 0x88
 800ef00:	f8cd a088 	str.w	sl, [sp, #136]	; 0x88
 800ef04:	f001 ff8a 	bl	8010e1c <rmw_validate_node_name>
 800ef08:	4682      	mov	sl, r0
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	f040 80c3 	bne.w	800f096 <rcl_node_init+0x20a>
 800ef10:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ef12:	2800      	cmp	r0, #0
 800ef14:	f040 80f1 	bne.w	800f0fa <rcl_node_init+0x26e>
 800ef18:	4628      	mov	r0, r5
 800ef1a:	f7f1 f99b 	bl	8000254 <strlen>
 800ef1e:	2800      	cmp	r0, #0
 800ef20:	f040 80c0 	bne.w	800f0a4 <rcl_node_init+0x218>
 800ef24:	4d79      	ldr	r5, [pc, #484]	; (800f10c <rcl_node_init+0x280>)
 800ef26:	a922      	add	r1, sp, #136	; 0x88
 800ef28:	2200      	movs	r2, #0
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	f001 ff58 	bl	8010de0 <rmw_validate_namespace>
 800ef30:	4682      	mov	sl, r0
 800ef32:	2800      	cmp	r0, #0
 800ef34:	f040 80af 	bne.w	800f096 <rcl_node_init+0x20a>
 800ef38:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ef3a:	2800      	cmp	r0, #0
 800ef3c:	f040 80d5 	bne.w	800f0ea <rcl_node_init+0x25e>
 800ef40:	f8d8 3000 	ldr.w	r3, [r8]
 800ef44:	2078      	movs	r0, #120	; 0x78
 800ef46:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ef4a:	4798      	blx	r3
 800ef4c:	4682      	mov	sl, r0
 800ef4e:	6060      	str	r0, [r4, #4]
 800ef50:	2800      	cmp	r0, #0
 800ef52:	f000 80cf 	beq.w	800f0f4 <rcl_node_init+0x268>
 800ef56:	2200      	movs	r2, #0
 800ef58:	2300      	movs	r3, #0
 800ef5a:	a808      	add	r0, sp, #32
 800ef5c:	e9ca 231a 	strd	r2, r3, [sl, #104]	; 0x68
 800ef60:	e9ca 231c 	strd	r2, r3, [sl, #112]	; 0x70
 800ef64:	f000 f902 	bl	800f16c <rcl_node_get_default_options>
 800ef68:	a908      	add	r1, sp, #32
 800ef6a:	4650      	mov	r0, sl
 800ef6c:	2268      	movs	r2, #104	; 0x68
 800ef6e:	f00c fd66 	bl	801ba3e <memcpy>
 800ef72:	6861      	ldr	r1, [r4, #4]
 800ef74:	4640      	mov	r0, r8
 800ef76:	6027      	str	r7, [r4, #0]
 800ef78:	f000 f906 	bl	800f188 <rcl_node_options_copy>
 800ef7c:	2800      	cmp	r0, #0
 800ef7e:	d158      	bne.n	800f032 <rcl_node_init+0x1a6>
 800ef80:	4628      	mov	r0, r5
 800ef82:	f7f1 f967 	bl	8000254 <strlen>
 800ef86:	4428      	add	r0, r5
 800ef88:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ef8c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ef90:	2b2f      	cmp	r3, #47	; 0x2f
 800ef92:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	bf0c      	ite	eq
 800ef9a:	4b5d      	ldreq	r3, [pc, #372]	; (800f110 <rcl_node_init+0x284>)
 800ef9c:	4b5d      	ldrne	r3, [pc, #372]	; (800f114 <rcl_node_init+0x288>)
 800ef9e:	9302      	str	r3, [sp, #8]
 800efa0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800efa4:	9301      	str	r3, [sp, #4]
 800efa6:	f8d4 a004 	ldr.w	sl, [r4, #4]
 800efaa:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800efae:	f001 fcbf 	bl	8010930 <rcutils_format_string_limit>
 800efb2:	6823      	ldr	r3, [r4, #0]
 800efb4:	f8ca 0074 	str.w	r0, [sl, #116]	; 0x74
 800efb8:	4631      	mov	r1, r6
 800efba:	6818      	ldr	r0, [r3, #0]
 800efbc:	462a      	mov	r2, r5
 800efbe:	6866      	ldr	r6, [r4, #4]
 800efc0:	3028      	adds	r0, #40	; 0x28
 800efc2:	f002 fa87 	bl	80114d4 <rmw_create_node>
 800efc6:	6863      	ldr	r3, [r4, #4]
 800efc8:	66b0      	str	r0, [r6, #104]	; 0x68
 800efca:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800efcc:	2800      	cmp	r0, #0
 800efce:	d032      	beq.n	800f036 <rcl_node_init+0x1aa>
 800efd0:	f002 fb10 	bl	80115f4 <rmw_node_get_graph_guard_condition>
 800efd4:	4682      	mov	sl, r0
 800efd6:	b360      	cbz	r0, 800f032 <rcl_node_init+0x1a6>
 800efd8:	f8d8 3000 	ldr.w	r3, [r8]
 800efdc:	2008      	movs	r0, #8
 800efde:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800efe2:	6866      	ldr	r6, [r4, #4]
 800efe4:	4798      	blx	r3
 800efe6:	6863      	ldr	r3, [r4, #4]
 800efe8:	66f0      	str	r0, [r6, #108]	; 0x6c
 800efea:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800efee:	f1bb 0f00 	cmp.w	fp, #0
 800eff2:	d020      	beq.n	800f036 <rcl_node_init+0x1aa>
 800eff4:	a806      	add	r0, sp, #24
 800eff6:	ae23      	add	r6, sp, #140	; 0x8c
 800eff8:	f007 fe8c 	bl	8016d14 <rcl_get_zero_initialized_guard_condition>
 800effc:	a806      	add	r0, sp, #24
 800effe:	6863      	ldr	r3, [r4, #4]
 800f000:	46c4      	mov	ip, r8
 800f002:	c803      	ldmia	r0, {r0, r1}
 800f004:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800f008:	e88b 0003 	stmia.w	fp, {r0, r1}
 800f00c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f010:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800f012:	f8dc 3000 	ldr.w	r3, [ip]
 800f016:	6033      	str	r3, [r6, #0]
 800f018:	ab28      	add	r3, sp, #160	; 0xa0
 800f01a:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800f01e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f022:	4651      	mov	r1, sl
 800f024:	463a      	mov	r2, r7
 800f026:	4670      	mov	r0, lr
 800f028:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800f02a:	f007 fe7d 	bl	8016d28 <rcl_guard_condition_init_from_rmw>
 800f02e:	4682      	mov	sl, r0
 800f030:	b328      	cbz	r0, 800f07e <rcl_node_init+0x1f2>
 800f032:	6863      	ldr	r3, [r4, #4]
 800f034:	b1f3      	cbz	r3, 800f074 <rcl_node_init+0x1e8>
 800f036:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800f038:	b128      	cbz	r0, 800f046 <rcl_node_init+0x1ba>
 800f03a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f03e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f042:	4798      	blx	r3
 800f044:	6863      	ldr	r3, [r4, #4]
 800f046:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800f048:	b110      	cbz	r0, 800f050 <rcl_node_init+0x1c4>
 800f04a:	f002 fa55 	bl	80114f8 <rmw_destroy_node>
 800f04e:	6863      	ldr	r3, [r4, #4]
 800f050:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f052:	b148      	cbz	r0, 800f068 <rcl_node_init+0x1dc>
 800f054:	f007 fec4 	bl	8016de0 <rcl_guard_condition_fini>
 800f058:	6863      	ldr	r3, [r4, #4]
 800f05a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f05e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800f060:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f064:	4798      	blx	r3
 800f066:	6863      	ldr	r3, [r4, #4]
 800f068:	4618      	mov	r0, r3
 800f06a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f06e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f072:	4798      	blx	r3
 800f074:	2300      	movs	r3, #0
 800f076:	f04f 0a01 	mov.w	sl, #1
 800f07a:	e9c4 3300 	strd	r3, r3, [r4]
 800f07e:	f1b9 0f00 	cmp.w	r9, #0
 800f082:	d008      	beq.n	800f096 <rcl_node_init+0x20a>
 800f084:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f088:	4628      	mov	r0, r5
 800f08a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800f08e:	4798      	blx	r3
 800f090:	e001      	b.n	800f096 <rcl_node_init+0x20a>
 800f092:	f04f 0a0b 	mov.w	sl, #11
 800f096:	4650      	mov	r0, sl
 800f098:	b029      	add	sp, #164	; 0xa4
 800f09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f09e:	f04f 0a65 	mov.w	sl, #101	; 0x65
 800f0a2:	e7f8      	b.n	800f096 <rcl_node_init+0x20a>
 800f0a4:	782b      	ldrb	r3, [r5, #0]
 800f0a6:	2b2f      	cmp	r3, #47	; 0x2f
 800f0a8:	f43f af3d 	beq.w	800ef26 <rcl_node_init+0x9a>
 800f0ac:	9503      	str	r5, [sp, #12]
 800f0ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800f0b2:	9300      	str	r3, [sp, #0]
 800f0b4:	4b18      	ldr	r3, [pc, #96]	; (800f118 <rcl_node_init+0x28c>)
 800f0b6:	9302      	str	r3, [sp, #8]
 800f0b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f0bc:	9301      	str	r3, [sp, #4]
 800f0be:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f0c2:	f001 fc35 	bl	8010930 <rcutils_format_string_limit>
 800f0c6:	4605      	mov	r5, r0
 800f0c8:	b1e0      	cbz	r0, 800f104 <rcl_node_init+0x278>
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	a922      	add	r1, sp, #136	; 0x88
 800f0ce:	9222      	str	r2, [sp, #136]	; 0x88
 800f0d0:	f001 fe86 	bl	8010de0 <rmw_validate_namespace>
 800f0d4:	4682      	mov	sl, r0
 800f0d6:	2800      	cmp	r0, #0
 800f0d8:	d1d4      	bne.n	800f084 <rcl_node_init+0x1f8>
 800f0da:	46d9      	mov	r9, fp
 800f0dc:	e72c      	b.n	800ef38 <rcl_node_init+0xac>
 800f0de:	f04f 0a64 	mov.w	sl, #100	; 0x64
 800f0e2:	4650      	mov	r0, sl
 800f0e4:	b029      	add	sp, #164	; 0xa4
 800f0e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0ea:	f04f 0aca 	mov.w	sl, #202	; 0xca
 800f0ee:	f001 fe89 	bl	8010e04 <rmw_namespace_validation_result_string>
 800f0f2:	e7c4      	b.n	800f07e <rcl_node_init+0x1f2>
 800f0f4:	f04f 0a0a 	mov.w	sl, #10
 800f0f8:	e7c1      	b.n	800f07e <rcl_node_init+0x1f2>
 800f0fa:	f04f 0ac9 	mov.w	sl, #201	; 0xc9
 800f0fe:	f001 fee1 	bl	8010ec4 <rmw_node_name_validation_result_string>
 800f102:	e7c8      	b.n	800f096 <rcl_node_init+0x20a>
 800f104:	f04f 0a0a 	mov.w	sl, #10
 800f108:	e7c5      	b.n	800f096 <rcl_node_init+0x20a>
 800f10a:	bf00      	nop
 800f10c:	0801cd9c 	.word	0x0801cd9c
 800f110:	0801cda4 	.word	0x0801cda4
 800f114:	0801cdac 	.word	0x0801cdac
 800f118:	0801cda0 	.word	0x0801cda0

0800f11c <rcl_node_is_valid>:
 800f11c:	b130      	cbz	r0, 800f12c <rcl_node_is_valid+0x10>
 800f11e:	6843      	ldr	r3, [r0, #4]
 800f120:	b123      	cbz	r3, 800f12c <rcl_node_is_valid+0x10>
 800f122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f124:	b113      	cbz	r3, 800f12c <rcl_node_is_valid+0x10>
 800f126:	6800      	ldr	r0, [r0, #0]
 800f128:	f007 bd8e 	b.w	8016c48 <rcl_context_is_valid>
 800f12c:	2000      	movs	r0, #0
 800f12e:	4770      	bx	lr

0800f130 <rcl_node_get_name>:
 800f130:	b120      	cbz	r0, 800f13c <rcl_node_get_name+0xc>
 800f132:	6840      	ldr	r0, [r0, #4]
 800f134:	b110      	cbz	r0, 800f13c <rcl_node_get_name+0xc>
 800f136:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f138:	b100      	cbz	r0, 800f13c <rcl_node_get_name+0xc>
 800f13a:	6880      	ldr	r0, [r0, #8]
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop

0800f140 <rcl_node_get_namespace>:
 800f140:	b120      	cbz	r0, 800f14c <rcl_node_get_namespace+0xc>
 800f142:	6840      	ldr	r0, [r0, #4]
 800f144:	b110      	cbz	r0, 800f14c <rcl_node_get_namespace+0xc>
 800f146:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f148:	b100      	cbz	r0, 800f14c <rcl_node_get_namespace+0xc>
 800f14a:	68c0      	ldr	r0, [r0, #12]
 800f14c:	4770      	bx	lr
 800f14e:	bf00      	nop

0800f150 <rcl_node_get_options>:
 800f150:	b128      	cbz	r0, 800f15e <rcl_node_get_options+0xe>
 800f152:	6840      	ldr	r0, [r0, #4]
 800f154:	b118      	cbz	r0, 800f15e <rcl_node_get_options+0xe>
 800f156:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f158:	2b00      	cmp	r3, #0
 800f15a:	bf08      	it	eq
 800f15c:	2000      	moveq	r0, #0
 800f15e:	4770      	bx	lr

0800f160 <rcl_node_get_rmw_handle>:
 800f160:	b110      	cbz	r0, 800f168 <rcl_node_get_rmw_handle+0x8>
 800f162:	6840      	ldr	r0, [r0, #4]
 800f164:	b100      	cbz	r0, 800f168 <rcl_node_get_rmw_handle+0x8>
 800f166:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f168:	4770      	bx	lr
 800f16a:	bf00      	nop

0800f16c <rcl_node_get_default_options>:
 800f16c:	b510      	push	{r4, lr}
 800f16e:	4604      	mov	r4, r0
 800f170:	2268      	movs	r2, #104	; 0x68
 800f172:	2100      	movs	r1, #0
 800f174:	f00c fb9a 	bl	801b8ac <memset>
 800f178:	4620      	mov	r0, r4
 800f17a:	f001 fb71 	bl	8010860 <rcutils_get_default_allocator>
 800f17e:	2301      	movs	r3, #1
 800f180:	4620      	mov	r0, r4
 800f182:	7523      	strb	r3, [r4, #20]
 800f184:	bd10      	pop	{r4, pc}
 800f186:	bf00      	nop

0800f188 <rcl_node_options_copy>:
 800f188:	2800      	cmp	r0, #0
 800f18a:	bf18      	it	ne
 800f18c:	4288      	cmpne	r0, r1
 800f18e:	d01b      	beq.n	800f1c8 <rcl_node_options_copy+0x40>
 800f190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f192:	fab1 f681 	clz	r6, r1
 800f196:	460c      	mov	r4, r1
 800f198:	0976      	lsrs	r6, r6, #5
 800f19a:	b199      	cbz	r1, 800f1c4 <rcl_node_options_copy+0x3c>
 800f19c:	4605      	mov	r5, r0
 800f19e:	8a87      	ldrh	r7, [r0, #20]
 800f1a0:	4684      	mov	ip, r0
 800f1a2:	468e      	mov	lr, r1
 800f1a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f1a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f1aa:	682b      	ldr	r3, [r5, #0]
 800f1ac:	2250      	movs	r2, #80	; 0x50
 800f1ae:	f10c 0118 	add.w	r1, ip, #24
 800f1b2:	f104 0018 	add.w	r0, r4, #24
 800f1b6:	f8ce 3000 	str.w	r3, [lr]
 800f1ba:	82a7      	strh	r7, [r4, #20]
 800f1bc:	f00c fc3f 	bl	801ba3e <memcpy>
 800f1c0:	4630      	mov	r0, r6
 800f1c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1c4:	200b      	movs	r0, #11
 800f1c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1c8:	200b      	movs	r0, #11
 800f1ca:	4770      	bx	lr

0800f1cc <rcl_get_zero_initialized_publisher>:
 800f1cc:	4b01      	ldr	r3, [pc, #4]	; (800f1d4 <rcl_get_zero_initialized_publisher+0x8>)
 800f1ce:	6818      	ldr	r0, [r3, #0]
 800f1d0:	4770      	bx	lr
 800f1d2:	bf00      	nop
 800f1d4:	0801cdbc 	.word	0x0801cdbc

0800f1d8 <rcl_publisher_init>:
 800f1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1dc:	b088      	sub	sp, #32
 800f1de:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800f1e0:	2e00      	cmp	r6, #0
 800f1e2:	d06b      	beq.n	800f2bc <rcl_publisher_init+0xe4>
 800f1e4:	f106 0a50 	add.w	sl, r6, #80	; 0x50
 800f1e8:	4605      	mov	r5, r0
 800f1ea:	460f      	mov	r7, r1
 800f1ec:	4690      	mov	r8, r2
 800f1ee:	4650      	mov	r0, sl
 800f1f0:	4699      	mov	r9, r3
 800f1f2:	f001 fb43 	bl	801087c <rcutils_allocator_is_valid>
 800f1f6:	f080 0401 	eor.w	r4, r0, #1
 800f1fa:	b2e4      	uxtb	r4, r4
 800f1fc:	2c00      	cmp	r4, #0
 800f1fe:	d15d      	bne.n	800f2bc <rcl_publisher_init+0xe4>
 800f200:	2d00      	cmp	r5, #0
 800f202:	d05b      	beq.n	800f2bc <rcl_publisher_init+0xe4>
 800f204:	682b      	ldr	r3, [r5, #0]
 800f206:	b123      	cbz	r3, 800f212 <rcl_publisher_init+0x3a>
 800f208:	2464      	movs	r4, #100	; 0x64
 800f20a:	4620      	mov	r0, r4
 800f20c:	b008      	add	sp, #32
 800f20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f212:	4638      	mov	r0, r7
 800f214:	f7ff ff82 	bl	800f11c <rcl_node_is_valid>
 800f218:	2800      	cmp	r0, #0
 800f21a:	d054      	beq.n	800f2c6 <rcl_publisher_init+0xee>
 800f21c:	f1b8 0f00 	cmp.w	r8, #0
 800f220:	d04c      	beq.n	800f2bc <rcl_publisher_init+0xe4>
 800f222:	fab9 f389 	clz	r3, r9
 800f226:	095b      	lsrs	r3, r3, #5
 800f228:	f1b9 0f00 	cmp.w	r9, #0
 800f22c:	d046      	beq.n	800f2bc <rcl_publisher_init+0xe4>
 800f22e:	aa07      	add	r2, sp, #28
 800f230:	9307      	str	r3, [sp, #28]
 800f232:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800f236:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800f23a:	9205      	str	r2, [sp, #20]
 800f23c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f240:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f244:	4649      	mov	r1, r9
 800f246:	4638      	mov	r0, r7
 800f248:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800f24c:	f007 ff38 	bl	80170c0 <rcl_node_resolve_name>
 800f250:	2800      	cmp	r0, #0
 800f252:	d14f      	bne.n	800f2f4 <rcl_publisher_init+0x11c>
 800f254:	6d33      	ldr	r3, [r6, #80]	; 0x50
 800f256:	20c8      	movs	r0, #200	; 0xc8
 800f258:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800f25a:	4798      	blx	r3
 800f25c:	6028      	str	r0, [r5, #0]
 800f25e:	2800      	cmp	r0, #0
 800f260:	d050      	beq.n	800f304 <rcl_publisher_init+0x12c>
 800f262:	4638      	mov	r0, r7
 800f264:	f7ff ff7c 	bl	800f160 <rcl_node_get_rmw_handle>
 800f268:	f106 0364 	add.w	r3, r6, #100	; 0x64
 800f26c:	4641      	mov	r1, r8
 800f26e:	9a07      	ldr	r2, [sp, #28]
 800f270:	9300      	str	r3, [sp, #0]
 800f272:	4633      	mov	r3, r6
 800f274:	682c      	ldr	r4, [r5, #0]
 800f276:	f002 fa27 	bl	80116c8 <rmw_create_publisher>
 800f27a:	682b      	ldr	r3, [r5, #0]
 800f27c:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4
 800f280:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800f284:	b370      	cbz	r0, 800f2e4 <rcl_publisher_init+0x10c>
 800f286:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800f28a:	f002 fb01 	bl	8011890 <rmw_publisher_get_actual_qos>
 800f28e:	682b      	ldr	r3, [r5, #0]
 800f290:	4604      	mov	r4, r0
 800f292:	b9d0      	cbnz	r0, 800f2ca <rcl_publisher_init+0xf2>
 800f294:	f896 2048 	ldrb.w	r2, [r6, #72]	; 0x48
 800f298:	4631      	mov	r1, r6
 800f29a:	4618      	mov	r0, r3
 800f29c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800f2a0:	2270      	movs	r2, #112	; 0x70
 800f2a2:	f00c fbcc 	bl	801ba3e <memcpy>
 800f2a6:	683a      	ldr	r2, [r7, #0]
 800f2a8:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800f2ac:	9807      	ldr	r0, [sp, #28]
 800f2ae:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800f2b0:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800f2b2:	4798      	blx	r3
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	b008      	add	sp, #32
 800f2b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2bc:	240b      	movs	r4, #11
 800f2be:	4620      	mov	r0, r4
 800f2c0:	b008      	add	sp, #32
 800f2c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2c6:	24c8      	movs	r4, #200	; 0xc8
 800f2c8:	e79f      	b.n	800f20a <rcl_publisher_init+0x32>
 800f2ca:	b1cb      	cbz	r3, 800f300 <rcl_publisher_init+0x128>
 800f2cc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800f2d0:	b142      	cbz	r2, 800f2e4 <rcl_publisher_init+0x10c>
 800f2d2:	4638      	mov	r0, r7
 800f2d4:	f7ff ff44 	bl	800f160 <rcl_node_get_rmw_handle>
 800f2d8:	682b      	ldr	r3, [r5, #0]
 800f2da:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800f2de:	f002 faeb 	bl	80118b8 <rmw_destroy_publisher>
 800f2e2:	682b      	ldr	r3, [r5, #0]
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	6d72      	ldr	r2, [r6, #84]	; 0x54
 800f2e8:	6e31      	ldr	r1, [r6, #96]	; 0x60
 800f2ea:	2401      	movs	r4, #1
 800f2ec:	4790      	blx	r2
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	602b      	str	r3, [r5, #0]
 800f2f2:	e7db      	b.n	800f2ac <rcl_publisher_init+0xd4>
 800f2f4:	2867      	cmp	r0, #103	; 0x67
 800f2f6:	d007      	beq.n	800f308 <rcl_publisher_init+0x130>
 800f2f8:	2869      	cmp	r0, #105	; 0x69
 800f2fa:	d005      	beq.n	800f308 <rcl_publisher_init+0x130>
 800f2fc:	280a      	cmp	r0, #10
 800f2fe:	d001      	beq.n	800f304 <rcl_publisher_init+0x12c>
 800f300:	2401      	movs	r4, #1
 800f302:	e7d3      	b.n	800f2ac <rcl_publisher_init+0xd4>
 800f304:	240a      	movs	r4, #10
 800f306:	e7d1      	b.n	800f2ac <rcl_publisher_init+0xd4>
 800f308:	2467      	movs	r4, #103	; 0x67
 800f30a:	e7cf      	b.n	800f2ac <rcl_publisher_init+0xd4>

0800f30c <rcl_publisher_get_default_options>:
 800f30c:	b570      	push	{r4, r5, r6, lr}
 800f30e:	4d14      	ldr	r5, [pc, #80]	; (800f360 <rcl_publisher_get_default_options+0x54>)
 800f310:	b088      	sub	sp, #32
 800f312:	4604      	mov	r4, r0
 800f314:	2250      	movs	r2, #80	; 0x50
 800f316:	4913      	ldr	r1, [pc, #76]	; (800f364 <rcl_publisher_get_default_options+0x58>)
 800f318:	4628      	mov	r0, r5
 800f31a:	f00c fb90 	bl	801ba3e <memcpy>
 800f31e:	a802      	add	r0, sp, #8
 800f320:	f001 fa9e 	bl	8010860 <rcutils_get_default_allocator>
 800f324:	f10d 0c08 	add.w	ip, sp, #8
 800f328:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800f32c:	466e      	mov	r6, sp
 800f32e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f332:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f336:	f8dc 3000 	ldr.w	r3, [ip]
 800f33a:	4630      	mov	r0, r6
 800f33c:	f8ce 3000 	str.w	r3, [lr]
 800f340:	f001 fcca 	bl	8010cd8 <rmw_get_default_publisher_options>
 800f344:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800f348:	2270      	movs	r2, #112	; 0x70
 800f34a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800f34e:	e883 0003 	stmia.w	r3, {r0, r1}
 800f352:	4629      	mov	r1, r5
 800f354:	4620      	mov	r0, r4
 800f356:	f00c fb72 	bl	801ba3e <memcpy>
 800f35a:	4620      	mov	r0, r4
 800f35c:	b008      	add	sp, #32
 800f35e:	bd70      	pop	{r4, r5, r6, pc}
 800f360:	2000c808 	.word	0x2000c808
 800f364:	0801cdc0 	.word	0x0801cdc0

0800f368 <rcl_publish>:
 800f368:	b1f8      	cbz	r0, 800f3aa <rcl_publish+0x42>
 800f36a:	6803      	ldr	r3, [r0, #0]
 800f36c:	b570      	push	{r4, r5, r6, lr}
 800f36e:	4604      	mov	r4, r0
 800f370:	b1b3      	cbz	r3, 800f3a0 <rcl_publish+0x38>
 800f372:	4616      	mov	r6, r2
 800f374:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800f378:	b192      	cbz	r2, 800f3a0 <rcl_publish+0x38>
 800f37a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f37e:	460d      	mov	r5, r1
 800f380:	f007 fc62 	bl	8016c48 <rcl_context_is_valid>
 800f384:	b160      	cbz	r0, 800f3a0 <rcl_publish+0x38>
 800f386:	6823      	ldr	r3, [r4, #0]
 800f388:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800f38c:	b140      	cbz	r0, 800f3a0 <rcl_publish+0x38>
 800f38e:	b155      	cbz	r5, 800f3a6 <rcl_publish+0x3e>
 800f390:	4632      	mov	r2, r6
 800f392:	4629      	mov	r1, r5
 800f394:	f002 f938 	bl	8011608 <rmw_publish>
 800f398:	3800      	subs	r0, #0
 800f39a:	bf18      	it	ne
 800f39c:	2001      	movne	r0, #1
 800f39e:	bd70      	pop	{r4, r5, r6, pc}
 800f3a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800f3a4:	bd70      	pop	{r4, r5, r6, pc}
 800f3a6:	200b      	movs	r0, #11
 800f3a8:	bd70      	pop	{r4, r5, r6, pc}
 800f3aa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800f3ae:	4770      	bx	lr

0800f3b0 <rcl_publisher_is_valid>:
 800f3b0:	b1a0      	cbz	r0, 800f3dc <rcl_publisher_is_valid+0x2c>
 800f3b2:	6803      	ldr	r3, [r0, #0]
 800f3b4:	b510      	push	{r4, lr}
 800f3b6:	4604      	mov	r4, r0
 800f3b8:	b173      	cbz	r3, 800f3d8 <rcl_publisher_is_valid+0x28>
 800f3ba:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800f3be:	b15a      	cbz	r2, 800f3d8 <rcl_publisher_is_valid+0x28>
 800f3c0:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800f3c4:	f007 fc40 	bl	8016c48 <rcl_context_is_valid>
 800f3c8:	b130      	cbz	r0, 800f3d8 <rcl_publisher_is_valid+0x28>
 800f3ca:	6823      	ldr	r3, [r4, #0]
 800f3cc:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800f3d0:	3800      	subs	r0, #0
 800f3d2:	bf18      	it	ne
 800f3d4:	2001      	movne	r0, #1
 800f3d6:	bd10      	pop	{r4, pc}
 800f3d8:	2000      	movs	r0, #0
 800f3da:	bd10      	pop	{r4, pc}
 800f3dc:	2000      	movs	r0, #0
 800f3de:	4770      	bx	lr

0800f3e0 <rcl_publisher_is_valid_except_context>:
 800f3e0:	b130      	cbz	r0, 800f3f0 <rcl_publisher_is_valid_except_context+0x10>
 800f3e2:	6800      	ldr	r0, [r0, #0]
 800f3e4:	b120      	cbz	r0, 800f3f0 <rcl_publisher_is_valid_except_context+0x10>
 800f3e6:	f8d0 00c4 	ldr.w	r0, [r0, #196]	; 0xc4
 800f3ea:	3800      	subs	r0, #0
 800f3ec:	bf18      	it	ne
 800f3ee:	2001      	movne	r0, #1
 800f3f0:	4770      	bx	lr
 800f3f2:	bf00      	nop

0800f3f4 <rcl_get_zero_initialized_service>:
 800f3f4:	4b01      	ldr	r3, [pc, #4]	; (800f3fc <rcl_get_zero_initialized_service+0x8>)
 800f3f6:	6818      	ldr	r0, [r3, #0]
 800f3f8:	4770      	bx	lr
 800f3fa:	bf00      	nop
 800f3fc:	0801ce10 	.word	0x0801ce10

0800f400 <rcl_service_init>:
 800f400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f404:	b088      	sub	sp, #32
 800f406:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f408:	b1ff      	cbz	r7, 800f44a <rcl_service_init+0x4a>
 800f40a:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 800f40e:	4605      	mov	r5, r0
 800f410:	460e      	mov	r6, r1
 800f412:	4691      	mov	r9, r2
 800f414:	4650      	mov	r0, sl
 800f416:	4698      	mov	r8, r3
 800f418:	f001 fa30 	bl	801087c <rcutils_allocator_is_valid>
 800f41c:	f080 0401 	eor.w	r4, r0, #1
 800f420:	b2e4      	uxtb	r4, r4
 800f422:	b994      	cbnz	r4, 800f44a <rcl_service_init+0x4a>
 800f424:	b18d      	cbz	r5, 800f44a <rcl_service_init+0x4a>
 800f426:	4630      	mov	r0, r6
 800f428:	f7ff fe78 	bl	800f11c <rcl_node_is_valid>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d05d      	beq.n	800f4ec <rcl_service_init+0xec>
 800f430:	f1b8 0f00 	cmp.w	r8, #0
 800f434:	d009      	beq.n	800f44a <rcl_service_init+0x4a>
 800f436:	f1b9 0f00 	cmp.w	r9, #0
 800f43a:	d006      	beq.n	800f44a <rcl_service_init+0x4a>
 800f43c:	682b      	ldr	r3, [r5, #0]
 800f43e:	b14b      	cbz	r3, 800f454 <rcl_service_init+0x54>
 800f440:	2464      	movs	r4, #100	; 0x64
 800f442:	4620      	mov	r0, r4
 800f444:	b008      	add	sp, #32
 800f446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f44a:	240b      	movs	r4, #11
 800f44c:	4620      	mov	r0, r4
 800f44e:	b008      	add	sp, #32
 800f450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f454:	aa07      	add	r2, sp, #28
 800f456:	9304      	str	r3, [sp, #16]
 800f458:	9307      	str	r3, [sp, #28]
 800f45a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f45e:	9205      	str	r2, [sp, #20]
 800f460:	2201      	movs	r2, #1
 800f462:	9203      	str	r2, [sp, #12]
 800f464:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f468:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f46c:	4641      	mov	r1, r8
 800f46e:	4630      	mov	r0, r6
 800f470:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800f474:	f007 fe24 	bl	80170c0 <rcl_node_resolve_name>
 800f478:	2800      	cmp	r0, #0
 800f47a:	d146      	bne.n	800f50a <rcl_service_init+0x10a>
 800f47c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f47e:	f44f 7088 	mov.w	r0, #272	; 0x110
 800f482:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f484:	4798      	blx	r3
 800f486:	6028      	str	r0, [r5, #0]
 800f488:	2800      	cmp	r0, #0
 800f48a:	d046      	beq.n	800f51a <rcl_service_init+0x11a>
 800f48c:	4630      	mov	r0, r6
 800f48e:	f7ff fe67 	bl	800f160 <rcl_node_get_rmw_handle>
 800f492:	463b      	mov	r3, r7
 800f494:	4649      	mov	r1, r9
 800f496:	9a07      	ldr	r2, [sp, #28]
 800f498:	682c      	ldr	r4, [r5, #0]
 800f49a:	f002 fbb1 	bl	8011c00 <rmw_create_service>
 800f49e:	682b      	ldr	r3, [r5, #0]
 800f4a0:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
 800f4a4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f4a8:	b338      	cbz	r0, 800f4fa <rcl_service_init+0xfa>
 800f4aa:	f103 0168 	add.w	r1, r3, #104	; 0x68
 800f4ae:	f002 fcd9 	bl	8011e64 <rmw_service_request_subscription_get_actual_qos>
 800f4b2:	bb00      	cbnz	r0, 800f4f6 <rcl_service_init+0xf6>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800f4ba:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f4be:	f002 fcbd 	bl	8011e3c <rmw_service_response_publisher_get_actual_qos>
 800f4c2:	4604      	mov	r4, r0
 800f4c4:	b9b8      	cbnz	r0, 800f4f6 <rcl_service_init+0xf6>
 800f4c6:	6828      	ldr	r0, [r5, #0]
 800f4c8:	2268      	movs	r2, #104	; 0x68
 800f4ca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f4ce:	4639      	mov	r1, r7
 800f4d0:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
 800f4d4:	f880 3100 	strb.w	r3, [r0, #256]	; 0x100
 800f4d8:	f00c fab1 	bl	801ba3e <memcpy>
 800f4dc:	9807      	ldr	r0, [sp, #28]
 800f4de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f4e2:	4798      	blx	r3
 800f4e4:	4620      	mov	r0, r4
 800f4e6:	b008      	add	sp, #32
 800f4e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4ec:	24c8      	movs	r4, #200	; 0xc8
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	b008      	add	sp, #32
 800f4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4f6:	682b      	ldr	r3, [r5, #0]
 800f4f8:	b16b      	cbz	r3, 800f516 <rcl_service_init+0x116>
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f4fe:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f500:	2401      	movs	r4, #1
 800f502:	4790      	blx	r2
 800f504:	2300      	movs	r3, #0
 800f506:	602b      	str	r3, [r5, #0]
 800f508:	e7e8      	b.n	800f4dc <rcl_service_init+0xdc>
 800f50a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 800f50e:	2b01      	cmp	r3, #1
 800f510:	d905      	bls.n	800f51e <rcl_service_init+0x11e>
 800f512:	280a      	cmp	r0, #10
 800f514:	d001      	beq.n	800f51a <rcl_service_init+0x11a>
 800f516:	2401      	movs	r4, #1
 800f518:	e7e0      	b.n	800f4dc <rcl_service_init+0xdc>
 800f51a:	240a      	movs	r4, #10
 800f51c:	e7de      	b.n	800f4dc <rcl_service_init+0xdc>
 800f51e:	2468      	movs	r4, #104	; 0x68
 800f520:	e7dc      	b.n	800f4dc <rcl_service_init+0xdc>
 800f522:	bf00      	nop

0800f524 <rcl_service_get_default_options>:
 800f524:	b530      	push	{r4, r5, lr}
 800f526:	4d0f      	ldr	r5, [pc, #60]	; (800f564 <rcl_service_get_default_options+0x40>)
 800f528:	b087      	sub	sp, #28
 800f52a:	4604      	mov	r4, r0
 800f52c:	2250      	movs	r2, #80	; 0x50
 800f52e:	490e      	ldr	r1, [pc, #56]	; (800f568 <rcl_service_get_default_options+0x44>)
 800f530:	4628      	mov	r0, r5
 800f532:	f00c fa84 	bl	801ba3e <memcpy>
 800f536:	4668      	mov	r0, sp
 800f538:	f001 f992 	bl	8010860 <rcutils_get_default_allocator>
 800f53c:	46ec      	mov	ip, sp
 800f53e:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800f542:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f546:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f54a:	f8dc 3000 	ldr.w	r3, [ip]
 800f54e:	2268      	movs	r2, #104	; 0x68
 800f550:	4629      	mov	r1, r5
 800f552:	4620      	mov	r0, r4
 800f554:	f8ce 3000 	str.w	r3, [lr]
 800f558:	f00c fa71 	bl	801ba3e <memcpy>
 800f55c:	4620      	mov	r0, r4
 800f55e:	b007      	add	sp, #28
 800f560:	bd30      	pop	{r4, r5, pc}
 800f562:	bf00      	nop
 800f564:	2000c878 	.word	0x2000c878
 800f568:	0801ce18 	.word	0x0801ce18

0800f56c <rcl_service_get_rmw_handle>:
 800f56c:	b118      	cbz	r0, 800f576 <rcl_service_get_rmw_handle+0xa>
 800f56e:	6800      	ldr	r0, [r0, #0]
 800f570:	b108      	cbz	r0, 800f576 <rcl_service_get_rmw_handle+0xa>
 800f572:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f576:	4770      	bx	lr

0800f578 <rcl_take_request>:
 800f578:	b570      	push	{r4, r5, r6, lr}
 800f57a:	468e      	mov	lr, r1
 800f57c:	b08c      	sub	sp, #48	; 0x30
 800f57e:	460c      	mov	r4, r1
 800f580:	4616      	mov	r6, r2
 800f582:	f10d 0c18 	add.w	ip, sp, #24
 800f586:	4605      	mov	r5, r0
 800f588:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f58c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f590:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f594:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f598:	b30d      	cbz	r5, 800f5de <rcl_take_request+0x66>
 800f59a:	682b      	ldr	r3, [r5, #0]
 800f59c:	b1fb      	cbz	r3, 800f5de <rcl_take_request+0x66>
 800f59e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 800f5a2:	b1e0      	cbz	r0, 800f5de <rcl_take_request+0x66>
 800f5a4:	b336      	cbz	r6, 800f5f4 <rcl_take_request+0x7c>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	4632      	mov	r2, r6
 800f5aa:	a902      	add	r1, sp, #8
 800f5ac:	f88d 3007 	strb.w	r3, [sp, #7]
 800f5b0:	f10d 0307 	add.w	r3, sp, #7
 800f5b4:	f002 fa22 	bl	80119fc <rmw_take_request>
 800f5b8:	4605      	mov	r5, r0
 800f5ba:	b198      	cbz	r0, 800f5e4 <rcl_take_request+0x6c>
 800f5bc:	280a      	cmp	r0, #10
 800f5be:	bf18      	it	ne
 800f5c0:	2501      	movne	r5, #1
 800f5c2:	f10d 0e18 	add.w	lr, sp, #24
 800f5c6:	46a4      	mov	ip, r4
 800f5c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f5cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f5d0:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f5d4:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f5d8:	4628      	mov	r0, r5
 800f5da:	b00c      	add	sp, #48	; 0x30
 800f5dc:	bd70      	pop	{r4, r5, r6, pc}
 800f5de:	f44f 7516 	mov.w	r5, #600	; 0x258
 800f5e2:	e7ee      	b.n	800f5c2 <rcl_take_request+0x4a>
 800f5e4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f5e8:	f240 2359 	movw	r3, #601	; 0x259
 800f5ec:	2a00      	cmp	r2, #0
 800f5ee:	bf08      	it	eq
 800f5f0:	461d      	moveq	r5, r3
 800f5f2:	e7e6      	b.n	800f5c2 <rcl_take_request+0x4a>
 800f5f4:	250b      	movs	r5, #11
 800f5f6:	e7e4      	b.n	800f5c2 <rcl_take_request+0x4a>

0800f5f8 <rcl_send_response>:
 800f5f8:	b170      	cbz	r0, 800f618 <rcl_send_response+0x20>
 800f5fa:	6800      	ldr	r0, [r0, #0]
 800f5fc:	b160      	cbz	r0, 800f618 <rcl_send_response+0x20>
 800f5fe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f602:	b148      	cbz	r0, 800f618 <rcl_send_response+0x20>
 800f604:	b169      	cbz	r1, 800f622 <rcl_send_response+0x2a>
 800f606:	b510      	push	{r4, lr}
 800f608:	b14a      	cbz	r2, 800f61e <rcl_send_response+0x26>
 800f60a:	f002 fa55 	bl	8011ab8 <rmw_send_response>
 800f60e:	b110      	cbz	r0, 800f616 <rcl_send_response+0x1e>
 800f610:	2802      	cmp	r0, #2
 800f612:	bf18      	it	ne
 800f614:	2001      	movne	r0, #1
 800f616:	bd10      	pop	{r4, pc}
 800f618:	f44f 7016 	mov.w	r0, #600	; 0x258
 800f61c:	4770      	bx	lr
 800f61e:	200b      	movs	r0, #11
 800f620:	bd10      	pop	{r4, pc}
 800f622:	200b      	movs	r0, #11
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop

0800f628 <rcl_service_is_valid>:
 800f628:	b130      	cbz	r0, 800f638 <rcl_service_is_valid+0x10>
 800f62a:	6800      	ldr	r0, [r0, #0]
 800f62c:	b120      	cbz	r0, 800f638 <rcl_service_is_valid+0x10>
 800f62e:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 800f632:	3800      	subs	r0, #0
 800f634:	bf18      	it	ne
 800f636:	2001      	movne	r0, #1
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop

0800f63c <rcl_get_zero_initialized_subscription>:
 800f63c:	4b01      	ldr	r3, [pc, #4]	; (800f644 <rcl_get_zero_initialized_subscription+0x8>)
 800f63e:	6818      	ldr	r0, [r3, #0]
 800f640:	4770      	bx	lr
 800f642:	bf00      	nop
 800f644:	0801ce68 	.word	0x0801ce68

0800f648 <rcl_subscription_init>:
 800f648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f64c:	b088      	sub	sp, #32
 800f64e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800f650:	b1ff      	cbz	r7, 800f692 <rcl_subscription_init+0x4a>
 800f652:	f107 0a50 	add.w	sl, r7, #80	; 0x50
 800f656:	4605      	mov	r5, r0
 800f658:	460e      	mov	r6, r1
 800f65a:	4691      	mov	r9, r2
 800f65c:	4650      	mov	r0, sl
 800f65e:	4698      	mov	r8, r3
 800f660:	f001 f90c 	bl	801087c <rcutils_allocator_is_valid>
 800f664:	f080 0401 	eor.w	r4, r0, #1
 800f668:	b2e4      	uxtb	r4, r4
 800f66a:	b994      	cbnz	r4, 800f692 <rcl_subscription_init+0x4a>
 800f66c:	b18d      	cbz	r5, 800f692 <rcl_subscription_init+0x4a>
 800f66e:	4630      	mov	r0, r6
 800f670:	f7ff fd54 	bl	800f11c <rcl_node_is_valid>
 800f674:	2800      	cmp	r0, #0
 800f676:	d055      	beq.n	800f724 <rcl_subscription_init+0xdc>
 800f678:	f1b9 0f00 	cmp.w	r9, #0
 800f67c:	d009      	beq.n	800f692 <rcl_subscription_init+0x4a>
 800f67e:	f1b8 0f00 	cmp.w	r8, #0
 800f682:	d006      	beq.n	800f692 <rcl_subscription_init+0x4a>
 800f684:	682b      	ldr	r3, [r5, #0]
 800f686:	b14b      	cbz	r3, 800f69c <rcl_subscription_init+0x54>
 800f688:	2464      	movs	r4, #100	; 0x64
 800f68a:	4620      	mov	r0, r4
 800f68c:	b008      	add	sp, #32
 800f68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f692:	240b      	movs	r4, #11
 800f694:	4620      	mov	r0, r4
 800f696:	b008      	add	sp, #32
 800f698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f69c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800f6a0:	aa07      	add	r2, sp, #28
 800f6a2:	9307      	str	r3, [sp, #28]
 800f6a4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800f6a8:	9205      	str	r2, [sp, #20]
 800f6aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f6ae:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f6b2:	4641      	mov	r1, r8
 800f6b4:	4630      	mov	r0, r6
 800f6b6:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800f6ba:	f007 fd01 	bl	80170c0 <rcl_node_resolve_name>
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	d15f      	bne.n	800f782 <rcl_subscription_init+0x13a>
 800f6c2:	21c8      	movs	r1, #200	; 0xc8
 800f6c4:	2001      	movs	r0, #1
 800f6c6:	e9d7 3217 	ldrd	r3, r2, [r7, #92]	; 0x5c
 800f6ca:	4798      	blx	r3
 800f6cc:	6028      	str	r0, [r5, #0]
 800f6ce:	2800      	cmp	r0, #0
 800f6d0:	d05f      	beq.n	800f792 <rcl_subscription_init+0x14a>
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	f7ff fd44 	bl	800f160 <rcl_node_get_rmw_handle>
 800f6d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f6dc:	4649      	mov	r1, r9
 800f6de:	9a07      	ldr	r2, [sp, #28]
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	463b      	mov	r3, r7
 800f6e4:	682c      	ldr	r4, [r5, #0]
 800f6e6:	f002 fbd1 	bl	8011e8c <rmw_create_subscription>
 800f6ea:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
 800f6ee:	682c      	ldr	r4, [r5, #0]
 800f6f0:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 800f6f4:	b348      	cbz	r0, 800f74a <rcl_subscription_init+0x102>
 800f6f6:	f104 0170 	add.w	r1, r4, #112	; 0x70
 800f6fa:	f002 fcbd 	bl	8012078 <rmw_subscription_get_actual_qos>
 800f6fe:	4604      	mov	r4, r0
 800f700:	b9a8      	cbnz	r0, 800f72e <rcl_subscription_init+0xe6>
 800f702:	6828      	ldr	r0, [r5, #0]
 800f704:	2270      	movs	r2, #112	; 0x70
 800f706:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f70a:	4639      	mov	r1, r7
 800f70c:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 800f710:	f00c f995 	bl	801ba3e <memcpy>
 800f714:	9807      	ldr	r0, [sp, #28]
 800f716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f718:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f71a:	4798      	blx	r3
 800f71c:	4620      	mov	r0, r4
 800f71e:	b008      	add	sp, #32
 800f720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f724:	24c8      	movs	r4, #200	; 0xc8
 800f726:	4620      	mov	r0, r4
 800f728:	b008      	add	sp, #32
 800f72a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f72e:	682c      	ldr	r4, [r5, #0]
 800f730:	b36c      	cbz	r4, 800f78e <rcl_subscription_init+0x146>
 800f732:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 800f736:	b14b      	cbz	r3, 800f74c <rcl_subscription_init+0x104>
 800f738:	4630      	mov	r0, r6
 800f73a:	f7ff fd11 	bl	800f160 <rcl_node_get_rmw_handle>
 800f73e:	682b      	ldr	r3, [r5, #0]
 800f740:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800f744:	f002 fcac 	bl	80120a0 <rmw_destroy_subscription>
 800f748:	682c      	ldr	r4, [r5, #0]
 800f74a:	b194      	cbz	r4, 800f772 <rcl_subscription_init+0x12a>
 800f74c:	f104 0650 	add.w	r6, r4, #80	; 0x50
 800f750:	4630      	mov	r0, r6
 800f752:	f001 f893 	bl	801087c <rcutils_allocator_is_valid>
 800f756:	b158      	cbz	r0, 800f770 <rcl_subscription_init+0x128>
 800f758:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f75a:	b148      	cbz	r0, 800f770 <rcl_subscription_init+0x128>
 800f75c:	4631      	mov	r1, r6
 800f75e:	f001 fac3 	bl	8010ce8 <rmw_subscription_content_filter_options_fini>
 800f762:	4606      	mov	r6, r0
 800f764:	b9c8      	cbnz	r0, 800f79a <rcl_subscription_init+0x152>
 800f766:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800f768:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800f76a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800f76c:	4798      	blx	r3
 800f76e:	66e6      	str	r6, [r4, #108]	; 0x6c
 800f770:	682c      	ldr	r4, [r5, #0]
 800f772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f774:	4620      	mov	r0, r4
 800f776:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800f778:	2401      	movs	r4, #1
 800f77a:	4798      	blx	r3
 800f77c:	2300      	movs	r3, #0
 800f77e:	602b      	str	r3, [r5, #0]
 800f780:	e7c8      	b.n	800f714 <rcl_subscription_init+0xcc>
 800f782:	2867      	cmp	r0, #103	; 0x67
 800f784:	d007      	beq.n	800f796 <rcl_subscription_init+0x14e>
 800f786:	2869      	cmp	r0, #105	; 0x69
 800f788:	d005      	beq.n	800f796 <rcl_subscription_init+0x14e>
 800f78a:	280a      	cmp	r0, #10
 800f78c:	d001      	beq.n	800f792 <rcl_subscription_init+0x14a>
 800f78e:	2401      	movs	r4, #1
 800f790:	e7c0      	b.n	800f714 <rcl_subscription_init+0xcc>
 800f792:	240a      	movs	r4, #10
 800f794:	e7be      	b.n	800f714 <rcl_subscription_init+0xcc>
 800f796:	2467      	movs	r4, #103	; 0x67
 800f798:	e7bc      	b.n	800f714 <rcl_subscription_init+0xcc>
 800f79a:	f007 fa37 	bl	8016c0c <rcl_convert_rmw_ret_to_rcl_ret>
 800f79e:	682c      	ldr	r4, [r5, #0]
 800f7a0:	e7e7      	b.n	800f772 <rcl_subscription_init+0x12a>
 800f7a2:	bf00      	nop

0800f7a4 <rcl_subscription_get_default_options>:
 800f7a4:	b570      	push	{r4, r5, r6, lr}
 800f7a6:	4d14      	ldr	r5, [pc, #80]	; (800f7f8 <rcl_subscription_get_default_options+0x54>)
 800f7a8:	b08a      	sub	sp, #40	; 0x28
 800f7aa:	4604      	mov	r4, r0
 800f7ac:	2250      	movs	r2, #80	; 0x50
 800f7ae:	4913      	ldr	r1, [pc, #76]	; (800f7fc <rcl_subscription_get_default_options+0x58>)
 800f7b0:	4628      	mov	r0, r5
 800f7b2:	f00c f944 	bl	801ba3e <memcpy>
 800f7b6:	a804      	add	r0, sp, #16
 800f7b8:	f001 f852 	bl	8010860 <rcutils_get_default_allocator>
 800f7bc:	f10d 0c10 	add.w	ip, sp, #16
 800f7c0:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800f7c4:	466e      	mov	r6, sp
 800f7c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f7ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f7ce:	f8dc 3000 	ldr.w	r3, [ip]
 800f7d2:	4630      	mov	r0, r6
 800f7d4:	f8ce 3000 	str.w	r3, [lr]
 800f7d8:	f001 faa0 	bl	8010d1c <rmw_get_default_subscription_options>
 800f7dc:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800f7e0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800f7e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f7e8:	2270      	movs	r2, #112	; 0x70
 800f7ea:	4629      	mov	r1, r5
 800f7ec:	4620      	mov	r0, r4
 800f7ee:	f00c f926 	bl	801ba3e <memcpy>
 800f7f2:	4620      	mov	r0, r4
 800f7f4:	b00a      	add	sp, #40	; 0x28
 800f7f6:	bd70      	pop	{r4, r5, r6, pc}
 800f7f8:	2000c8e0 	.word	0x2000c8e0
 800f7fc:	0801ce70 	.word	0x0801ce70

0800f800 <rcl_take>:
 800f800:	2800      	cmp	r0, #0
 800f802:	d049      	beq.n	800f898 <rcl_take+0x98>
 800f804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f808:	4615      	mov	r5, r2
 800f80a:	6802      	ldr	r2, [r0, #0]
 800f80c:	b0a4      	sub	sp, #144	; 0x90
 800f80e:	4604      	mov	r4, r0
 800f810:	2a00      	cmp	r2, #0
 800f812:	d039      	beq.n	800f888 <rcl_take+0x88>
 800f814:	461f      	mov	r7, r3
 800f816:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 800f81a:	b3ab      	cbz	r3, 800f888 <rcl_take+0x88>
 800f81c:	460e      	mov	r6, r1
 800f81e:	2900      	cmp	r1, #0
 800f820:	d038      	beq.n	800f894 <rcl_take+0x94>
 800f822:	2d00      	cmp	r5, #0
 800f824:	d03c      	beq.n	800f8a0 <rcl_take+0xa0>
 800f826:	a802      	add	r0, sp, #8
 800f828:	f04f 0800 	mov.w	r8, #0
 800f82c:	f001 fa7c 	bl	8010d28 <rmw_get_zero_initialized_message_info>
 800f830:	f10d 0c08 	add.w	ip, sp, #8
 800f834:	46ae      	mov	lr, r5
 800f836:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f83a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f83e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f842:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f846:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f84a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f84e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 800f852:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800f856:	f88d 804f 	strb.w	r8, [sp, #79]	; 0x4f
 800f85a:	462b      	mov	r3, r5
 800f85c:	6820      	ldr	r0, [r4, #0]
 800f85e:	f10d 024f 	add.w	r2, sp, #79	; 0x4f
 800f862:	4631      	mov	r1, r6
 800f864:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f868:	9700      	str	r7, [sp, #0]
 800f86a:	f002 fc7b 	bl	8012164 <rmw_take_with_info>
 800f86e:	4603      	mov	r3, r0
 800f870:	b9c0      	cbnz	r0, 800f8a4 <rcl_take+0xa4>
 800f872:	f89d 104f 	ldrb.w	r1, [sp, #79]	; 0x4f
 800f876:	f240 1291 	movw	r2, #401	; 0x191
 800f87a:	2900      	cmp	r1, #0
 800f87c:	bf08      	it	eq
 800f87e:	4613      	moveq	r3, r2
 800f880:	4618      	mov	r0, r3
 800f882:	b024      	add	sp, #144	; 0x90
 800f884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f888:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f88c:	4618      	mov	r0, r3
 800f88e:	b024      	add	sp, #144	; 0x90
 800f890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f894:	230b      	movs	r3, #11
 800f896:	e7f3      	b.n	800f880 <rcl_take+0x80>
 800f898:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f89c:	4618      	mov	r0, r3
 800f89e:	4770      	bx	lr
 800f8a0:	ad14      	add	r5, sp, #80	; 0x50
 800f8a2:	e7c0      	b.n	800f826 <rcl_take+0x26>
 800f8a4:	f007 f9b2 	bl	8016c0c <rcl_convert_rmw_ret_to_rcl_ret>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	e7e9      	b.n	800f880 <rcl_take+0x80>

0800f8ac <rcl_subscription_get_rmw_handle>:
 800f8ac:	b118      	cbz	r0, 800f8b6 <rcl_subscription_get_rmw_handle+0xa>
 800f8ae:	6800      	ldr	r0, [r0, #0]
 800f8b0:	b108      	cbz	r0, 800f8b6 <rcl_subscription_get_rmw_handle+0xa>
 800f8b2:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f8b6:	4770      	bx	lr

0800f8b8 <rcl_subscription_is_valid>:
 800f8b8:	b130      	cbz	r0, 800f8c8 <rcl_subscription_is_valid+0x10>
 800f8ba:	6800      	ldr	r0, [r0, #0]
 800f8bc:	b120      	cbz	r0, 800f8c8 <rcl_subscription_is_valid+0x10>
 800f8be:	f8d0 00c0 	ldr.w	r0, [r0, #192]	; 0xc0
 800f8c2:	3800      	subs	r0, #0
 800f8c4:	bf18      	it	ne
 800f8c6:	2001      	movne	r0, #1
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop

0800f8cc <_rclc_check_for_new_data>:
 800f8cc:	2800      	cmp	r0, #0
 800f8ce:	d046      	beq.n	800f95e <_rclc_check_for_new_data+0x92>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	b530      	push	{r4, r5, lr}
 800f8d4:	7802      	ldrb	r2, [r0, #0]
 800f8d6:	b085      	sub	sp, #20
 800f8d8:	2a0a      	cmp	r2, #10
 800f8da:	d842      	bhi.n	800f962 <_rclc_check_for_new_data+0x96>
 800f8dc:	e8df f002 	tbb	[pc, r2]
 800f8e0:	14181212 	.word	0x14181212
 800f8e4:	06060614 	.word	0x06060614
 800f8e8:	2e1a      	.short	0x2e1a
 800f8ea:	16          	.byte	0x16
 800f8eb:	00          	.byte	0x00
 800f8ec:	6a0a      	ldr	r2, [r1, #32]
 800f8ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f8f0:	2000      	movs	r0, #0
 800f8f2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f8f6:	1a12      	subs	r2, r2, r0
 800f8f8:	bf18      	it	ne
 800f8fa:	2201      	movne	r2, #1
 800f8fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800f900:	b005      	add	sp, #20
 800f902:	bd30      	pop	{r4, r5, pc}
 800f904:	680a      	ldr	r2, [r1, #0]
 800f906:	e7f2      	b.n	800f8ee <_rclc_check_for_new_data+0x22>
 800f908:	698a      	ldr	r2, [r1, #24]
 800f90a:	e7f0      	b.n	800f8ee <_rclc_check_for_new_data+0x22>
 800f90c:	688a      	ldr	r2, [r1, #8]
 800f90e:	e7ee      	b.n	800f8ee <_rclc_check_for_new_data+0x22>
 800f910:	690a      	ldr	r2, [r1, #16]
 800f912:	e7ec      	b.n	800f8ee <_rclc_check_for_new_data+0x22>
 800f914:	685c      	ldr	r4, [r3, #4]
 800f916:	4608      	mov	r0, r1
 800f918:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f91c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f924:	f104 0110 	add.w	r1, r4, #16
 800f928:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800f92c:	9500      	str	r5, [sp, #0]
 800f92e:	f104 0341 	add.w	r3, r4, #65	; 0x41
 800f932:	f104 0240 	add.w	r2, r4, #64	; 0x40
 800f936:	f008 ff2f 	bl	8018798 <rcl_action_client_wait_set_get_entities_ready>
 800f93a:	e7e1      	b.n	800f900 <_rclc_check_for_new_data+0x34>
 800f93c:	685c      	ldr	r4, [r3, #4]
 800f93e:	4608      	mov	r0, r1
 800f940:	f104 0222 	add.w	r2, r4, #34	; 0x22
 800f944:	f104 0123 	add.w	r1, r4, #35	; 0x23
 800f948:	f104 0321 	add.w	r3, r4, #33	; 0x21
 800f94c:	e9cd 2100 	strd	r2, r1, [sp]
 800f950:	f104 0220 	add.w	r2, r4, #32
 800f954:	f104 0110 	add.w	r1, r4, #16
 800f958:	f009 f936 	bl	8018bc8 <rcl_action_server_wait_set_get_entities_ready>
 800f95c:	e7d0      	b.n	800f900 <_rclc_check_for_new_data+0x34>
 800f95e:	200b      	movs	r0, #11
 800f960:	4770      	bx	lr
 800f962:	2001      	movs	r0, #1
 800f964:	e7cc      	b.n	800f900 <_rclc_check_for_new_data+0x34>
 800f966:	bf00      	nop

0800f968 <_rclc_take_new_data>:
 800f968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f96a:	b09b      	sub	sp, #108	; 0x6c
 800f96c:	2800      	cmp	r0, #0
 800f96e:	f000 8088 	beq.w	800fa82 <_rclc_take_new_data+0x11a>
 800f972:	7803      	ldrb	r3, [r0, #0]
 800f974:	4604      	mov	r4, r0
 800f976:	2b0a      	cmp	r3, #10
 800f978:	f200 8167 	bhi.w	800fc4a <_rclc_take_new_data+0x2e2>
 800f97c:	e8df f003 	tbb	[pc, r3]
 800f980:	44152d2d 	.word	0x44152d2d
 800f984:	19191944 	.word	0x19191944
 800f988:	065a      	.short	0x065a
 800f98a:	15          	.byte	0x15
 800f98b:	00          	.byte	0x00
 800f98c:	6840      	ldr	r0, [r0, #4]
 800f98e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800f992:	2b00      	cmp	r3, #0
 800f994:	f040 80b2 	bne.w	800fafc <_rclc_take_new_data+0x194>
 800f998:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f040 80e4 	bne.w	800fb6a <_rclc_take_new_data+0x202>
 800f9a2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d16f      	bne.n	800fa8a <_rclc_take_new_data+0x122>
 800f9aa:	2500      	movs	r5, #0
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	b01b      	add	sp, #108	; 0x6c
 800f9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f9b4:	6a0b      	ldr	r3, [r1, #32]
 800f9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d0f5      	beq.n	800f9aa <_rclc_take_new_data+0x42>
 800f9be:	6882      	ldr	r2, [r0, #8]
 800f9c0:	f100 0110 	add.w	r1, r0, #16
 800f9c4:	6840      	ldr	r0, [r0, #4]
 800f9c6:	f7ff fdd7 	bl	800f578 <rcl_take_request>
 800f9ca:	4605      	mov	r5, r0
 800f9cc:	2800      	cmp	r0, #0
 800f9ce:	d0ec      	beq.n	800f9aa <_rclc_take_new_data+0x42>
 800f9d0:	f240 2359 	movw	r3, #601	; 0x259
 800f9d4:	4298      	cmp	r0, r3
 800f9d6:	d013      	beq.n	800fa00 <_rclc_take_new_data+0x98>
 800f9d8:	e029      	b.n	800fa2e <_rclc_take_new_data+0xc6>
 800f9da:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800f9dc:	680b      	ldr	r3, [r1, #0]
 800f9de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d0e1      	beq.n	800f9aa <_rclc_take_new_data+0x42>
 800f9e6:	2300      	movs	r3, #0
 800f9e8:	aa0a      	add	r2, sp, #40	; 0x28
 800f9ea:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800f9ee:	f7ff ff07 	bl	800f800 <rcl_take>
 800f9f2:	4605      	mov	r5, r0
 800f9f4:	2800      	cmp	r0, #0
 800f9f6:	d0d9      	beq.n	800f9ac <_rclc_take_new_data+0x44>
 800f9f8:	f240 1391 	movw	r3, #401	; 0x191
 800f9fc:	4298      	cmp	r0, r3
 800f9fe:	d116      	bne.n	800fa2e <_rclc_take_new_data+0xc6>
 800fa00:	2300      	movs	r3, #0
 800fa02:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 800fa06:	e7d1      	b.n	800f9ac <_rclc_take_new_data+0x44>
 800fa08:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800fa0a:	698b      	ldr	r3, [r1, #24]
 800fa0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d0ca      	beq.n	800f9aa <_rclc_take_new_data+0x42>
 800fa14:	6882      	ldr	r2, [r0, #8]
 800fa16:	f100 0110 	add.w	r1, r0, #16
 800fa1a:	6840      	ldr	r0, [r0, #4]
 800fa1c:	f007 f8a4 	bl	8016b68 <rcl_take_response>
 800fa20:	4605      	mov	r5, r0
 800fa22:	2800      	cmp	r0, #0
 800fa24:	d0c1      	beq.n	800f9aa <_rclc_take_new_data+0x42>
 800fa26:	f240 13f5 	movw	r3, #501	; 0x1f5
 800fa2a:	4298      	cmp	r0, r3
 800fa2c:	d0be      	beq.n	800f9ac <_rclc_take_new_data+0x44>
 800fa2e:	f000 ff63 	bl	80108f8 <rcutils_reset_error>
 800fa32:	e7bb      	b.n	800f9ac <_rclc_take_new_data+0x44>
 800fa34:	6840      	ldr	r0, [r0, #4]
 800fa36:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d17d      	bne.n	800fb3a <_rclc_take_new_data+0x1d2>
 800fa3e:	69c3      	ldr	r3, [r0, #28]
 800fa40:	b11b      	cbz	r3, 800fa4a <_rclc_take_new_data+0xe2>
 800fa42:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d144      	bne.n	800fad4 <_rclc_take_new_data+0x16c>
 800fa4a:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f040 80ac 	bne.w	800fbac <_rclc_take_new_data+0x244>
 800fa54:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d0a6      	beq.n	800f9aa <_rclc_take_new_data+0x42>
 800fa5c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800fa5e:	a90a      	add	r1, sp, #40	; 0x28
 800fa60:	3010      	adds	r0, #16
 800fa62:	f008 fd71 	bl	8018548 <rcl_action_take_result_response>
 800fa66:	4605      	mov	r5, r0
 800fa68:	2800      	cmp	r0, #0
 800fa6a:	d1e0      	bne.n	800fa2e <_rclc_take_new_data+0xc6>
 800fa6c:	6860      	ldr	r0, [r4, #4]
 800fa6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fa72:	f009 f9d9 	bl	8018e28 <rclc_action_find_handle_by_result_request_sequence_number>
 800fa76:	2800      	cmp	r0, #0
 800fa78:	d098      	beq.n	800f9ac <_rclc_take_new_data+0x44>
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
 800fa80:	e794      	b.n	800f9ac <_rclc_take_new_data+0x44>
 800fa82:	250b      	movs	r5, #11
 800fa84:	4628      	mov	r0, r5
 800fa86:	b01b      	add	sp, #108	; 0x6c
 800fa88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa8a:	ae04      	add	r6, sp, #16
 800fa8c:	3010      	adds	r0, #16
 800fa8e:	aa0a      	add	r2, sp, #40	; 0x28
 800fa90:	4631      	mov	r1, r6
 800fa92:	f008 ffcd 	bl	8018a30 <rcl_action_take_cancel_request>
 800fa96:	4605      	mov	r5, r0
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d1c8      	bne.n	800fa2e <_rclc_take_new_data+0xc6>
 800fa9c:	a90a      	add	r1, sp, #40	; 0x28
 800fa9e:	6860      	ldr	r0, [r4, #4]
 800faa0:	f009 f982 	bl	8018da8 <rclc_action_find_goal_handle_by_uuid>
 800faa4:	4607      	mov	r7, r0
 800faa6:	2800      	cmp	r0, #0
 800faa8:	f000 80bb 	beq.w	800fc22 <_rclc_take_new_data+0x2ba>
 800faac:	2101      	movs	r1, #1
 800faae:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800fab2:	f009 f903 	bl	8018cbc <rcl_action_transition_goal_state>
 800fab6:	2803      	cmp	r0, #3
 800fab8:	4684      	mov	ip, r0
 800faba:	f040 80a7 	bne.w	800fc0c <_rclc_take_new_data+0x2a4>
 800fabe:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800fac2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fac6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800faca:	e884 0003 	stmia.w	r4, {r0, r1}
 800face:	f887 c008 	strb.w	ip, [r7, #8]
 800fad2:	e76b      	b.n	800f9ac <_rclc_take_new_data+0x44>
 800fad4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800fad6:	3010      	adds	r0, #16
 800fad8:	f008 fdb6 	bl	8018648 <rcl_action_take_feedback>
 800fadc:	4605      	mov	r5, r0
 800fade:	2800      	cmp	r0, #0
 800fae0:	d1a5      	bne.n	800fa2e <_rclc_take_new_data+0xc6>
 800fae2:	6860      	ldr	r0, [r4, #4]
 800fae4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800fae6:	f009 f95f 	bl	8018da8 <rclc_action_find_goal_handle_by_uuid>
 800faea:	4603      	mov	r3, r0
 800faec:	2800      	cmp	r0, #0
 800faee:	f000 80a3 	beq.w	800fc38 <_rclc_take_new_data+0x2d0>
 800faf2:	2201      	movs	r2, #1
 800faf4:	6860      	ldr	r0, [r4, #4]
 800faf6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800fafa:	e7a6      	b.n	800fa4a <_rclc_take_new_data+0xe2>
 800fafc:	f009 f92e 	bl	8018d5c <rclc_action_take_goal_handle>
 800fb00:	4606      	mov	r6, r0
 800fb02:	6860      	ldr	r0, [r4, #4]
 800fb04:	2e00      	cmp	r6, #0
 800fb06:	f43f af47 	beq.w	800f998 <_rclc_take_new_data+0x30>
 800fb0a:	6070      	str	r0, [r6, #4]
 800fb0c:	f106 0128 	add.w	r1, r6, #40	; 0x28
 800fb10:	69f2      	ldr	r2, [r6, #28]
 800fb12:	3010      	adds	r0, #16
 800fb14:	f008 fed6 	bl	80188c4 <rcl_action_take_goal_request>
 800fb18:	4605      	mov	r5, r0
 800fb1a:	2800      	cmp	r0, #0
 800fb1c:	f040 808e 	bne.w	800fc3c <_rclc_take_new_data+0x2d4>
 800fb20:	69f7      	ldr	r7, [r6, #28]
 800fb22:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fb24:	7235      	strb	r5, [r6, #8]
 800fb26:	f8c6 0009 	str.w	r0, [r6, #9]
 800fb2a:	f8c6 100d 	str.w	r1, [r6, #13]
 800fb2e:	6860      	ldr	r0, [r4, #4]
 800fb30:	f8c6 2011 	str.w	r2, [r6, #17]
 800fb34:	f8c6 3015 	str.w	r3, [r6, #21]
 800fb38:	e72e      	b.n	800f998 <_rclc_take_new_data+0x30>
 800fb3a:	aa04      	add	r2, sp, #16
 800fb3c:	a90a      	add	r1, sp, #40	; 0x28
 800fb3e:	3010      	adds	r0, #16
 800fb40:	f008 fc8a 	bl	8018458 <rcl_action_take_goal_response>
 800fb44:	4605      	mov	r5, r0
 800fb46:	2800      	cmp	r0, #0
 800fb48:	f47f af71 	bne.w	800fa2e <_rclc_take_new_data+0xc6>
 800fb4c:	6860      	ldr	r0, [r4, #4]
 800fb4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fb52:	f009 f957 	bl	8018e04 <rclc_action_find_handle_by_goal_request_sequence_number>
 800fb56:	b130      	cbz	r0, 800fb66 <_rclc_take_new_data+0x1fe>
 800fb58:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800fb5c:	2201      	movs	r2, #1
 800fb5e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800fb62:	f880 2020 	strb.w	r2, [r0, #32]
 800fb66:	6860      	ldr	r0, [r4, #4]
 800fb68:	e769      	b.n	800fa3e <_rclc_take_new_data+0xd6>
 800fb6a:	3010      	adds	r0, #16
 800fb6c:	aa04      	add	r2, sp, #16
 800fb6e:	a90a      	add	r1, sp, #40	; 0x28
 800fb70:	f008 ff1e 	bl	80189b0 <rcl_action_take_result_request>
 800fb74:	4605      	mov	r5, r0
 800fb76:	2800      	cmp	r0, #0
 800fb78:	f47f af59 	bne.w	800fa2e <_rclc_take_new_data+0xc6>
 800fb7c:	a904      	add	r1, sp, #16
 800fb7e:	6860      	ldr	r0, [r4, #4]
 800fb80:	f009 f912 	bl	8018da8 <rclc_action_find_goal_handle_by_uuid>
 800fb84:	4607      	mov	r7, r0
 800fb86:	b160      	cbz	r0, 800fba2 <_rclc_take_new_data+0x23a>
 800fb88:	ad0a      	add	r5, sp, #40	; 0x28
 800fb8a:	f100 0640 	add.w	r6, r0, #64	; 0x40
 800fb8e:	f04f 0c02 	mov.w	ip, #2
 800fb92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fb94:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800fb96:	e895 0003 	ldmia.w	r5, {r0, r1}
 800fb9a:	e886 0003 	stmia.w	r6, {r0, r1}
 800fb9e:	f887 c008 	strb.w	ip, [r7, #8]
 800fba2:	6860      	ldr	r0, [r4, #4]
 800fba4:	2300      	movs	r3, #0
 800fba6:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
 800fbaa:	e6fa      	b.n	800f9a2 <_rclc_take_new_data+0x3a>
 800fbac:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800fbb0:	a90a      	add	r1, sp, #40	; 0x28
 800fbb2:	3010      	adds	r0, #16
 800fbb4:	f008 fd08 	bl	80185c8 <rcl_action_take_cancel_response>
 800fbb8:	4605      	mov	r5, r0
 800fbba:	2800      	cmp	r0, #0
 800fbbc:	f47f af37 	bne.w	800fa2e <_rclc_take_new_data+0xc6>
 800fbc0:	6860      	ldr	r0, [r4, #4]
 800fbc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800fbc6:	f009 f941 	bl	8018e4c <rclc_action_find_handle_by_cancel_request_sequence_number>
 800fbca:	4606      	mov	r6, r0
 800fbcc:	6860      	ldr	r0, [r4, #4]
 800fbce:	2e00      	cmp	r6, #0
 800fbd0:	f43f af40 	beq.w	800fa54 <_rclc_take_new_data+0xec>
 800fbd4:	2701      	movs	r7, #1
 800fbd6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fbd8:	84b7      	strh	r7, [r6, #36]	; 0x24
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	f43f af3a 	beq.w	800fa54 <_rclc_take_new_data+0xec>
 800fbe0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800fbe2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800fbe6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800fbea:	f009 f8dd 	bl	8018da8 <rclc_action_find_goal_handle_by_uuid>
 800fbee:	b138      	cbz	r0, 800fc00 <_rclc_take_new_data+0x298>
 800fbf0:	6860      	ldr	r0, [r4, #4]
 800fbf2:	3501      	adds	r5, #1
 800fbf4:	f886 7025 	strb.w	r7, [r6, #37]	; 0x25
 800fbf8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fbfa:	42ab      	cmp	r3, r5
 800fbfc:	d8f0      	bhi.n	800fbe0 <_rclc_take_new_data+0x278>
 800fbfe:	e729      	b.n	800fa54 <_rclc_take_new_data+0xec>
 800fc00:	6860      	ldr	r0, [r4, #4]
 800fc02:	3501      	adds	r5, #1
 800fc04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fc06:	42ab      	cmp	r3, r5
 800fc08:	d8ea      	bhi.n	800fbe0 <_rclc_take_new_data+0x278>
 800fc0a:	e723      	b.n	800fa54 <_rclc_take_new_data+0xec>
 800fc0c:	ab06      	add	r3, sp, #24
 800fc0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fc14:	2103      	movs	r1, #3
 800fc16:	6860      	ldr	r0, [r4, #4]
 800fc18:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fc1c:	f009 f98c 	bl	8018f38 <rclc_action_server_goal_cancel_reject>
 800fc20:	e6c4      	b.n	800f9ac <_rclc_take_new_data+0x44>
 800fc22:	ab06      	add	r3, sp, #24
 800fc24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc26:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fc2a:	2102      	movs	r1, #2
 800fc2c:	6860      	ldr	r0, [r4, #4]
 800fc2e:	e896 000c 	ldmia.w	r6, {r2, r3}
 800fc32:	f009 f981 	bl	8018f38 <rclc_action_server_goal_cancel_reject>
 800fc36:	e6b9      	b.n	800f9ac <_rclc_take_new_data+0x44>
 800fc38:	6860      	ldr	r0, [r4, #4]
 800fc3a:	e706      	b.n	800fa4a <_rclc_take_new_data+0xe2>
 800fc3c:	4631      	mov	r1, r6
 800fc3e:	6860      	ldr	r0, [r4, #4]
 800fc40:	f009 f89c 	bl	8018d7c <rclc_action_remove_used_goal_handle>
 800fc44:	f000 fe58 	bl	80108f8 <rcutils_reset_error>
 800fc48:	e6b0      	b.n	800f9ac <_rclc_take_new_data+0x44>
 800fc4a:	2501      	movs	r5, #1
 800fc4c:	e6ae      	b.n	800f9ac <_rclc_take_new_data+0x44>
 800fc4e:	bf00      	nop

0800fc50 <_rclc_execute.part.0>:
 800fc50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc52:	7803      	ldrb	r3, [r0, #0]
 800fc54:	b085      	sub	sp, #20
 800fc56:	4604      	mov	r4, r0
 800fc58:	2b0a      	cmp	r3, #10
 800fc5a:	f200 8139 	bhi.w	800fed0 <_rclc_execute.part.0+0x280>
 800fc5e:	e8df f003 	tbb	[pc, r3]
 800fc62:	4268      	.short	0x4268
 800fc64:	06a75b4d 	.word	0x06a75b4d
 800fc68:	721d0606 	.word	0x721d0606
 800fc6c:	62          	.byte	0x62
 800fc6d:	00          	.byte	0x00
 800fc6e:	2b06      	cmp	r3, #6
 800fc70:	f000 8126 	beq.w	800fec0 <_rclc_execute.part.0+0x270>
 800fc74:	2b07      	cmp	r3, #7
 800fc76:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fc78:	f040 811c 	bne.w	800feb4 <_rclc_execute.part.0+0x264>
 800fc7c:	f104 0510 	add.w	r5, r4, #16
 800fc80:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	; 0x28
 800fc84:	6880      	ldr	r0, [r0, #8]
 800fc86:	4798      	blx	r3
 800fc88:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fc8a:	4629      	mov	r1, r5
 800fc8c:	6860      	ldr	r0, [r4, #4]
 800fc8e:	f7ff fcb3 	bl	800f5f8 <rcl_send_response>
 800fc92:	4604      	mov	r4, r0
 800fc94:	b378      	cbz	r0, 800fcf6 <_rclc_execute.part.0+0xa6>
 800fc96:	f000 fe2f 	bl	80108f8 <rcutils_reset_error>
 800fc9a:	e02c      	b.n	800fcf6 <_rclc_execute.part.0+0xa6>
 800fc9c:	6840      	ldr	r0, [r0, #4]
 800fc9e:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f000 808e 	beq.w	800fdc4 <_rclc_execute.part.0+0x174>
 800fca8:	2600      	movs	r6, #0
 800fcaa:	2701      	movs	r7, #1
 800fcac:	e004      	b.n	800fcb8 <_rclc_execute.part.0+0x68>
 800fcae:	f009 f82f 	bl	8018d10 <rclc_action_send_result_request>
 800fcb2:	b998      	cbnz	r0, 800fcdc <_rclc_execute.part.0+0x8c>
 800fcb4:	722f      	strb	r7, [r5, #8]
 800fcb6:	6860      	ldr	r0, [r4, #4]
 800fcb8:	f009 f8da 	bl	8018e70 <rclc_action_find_first_handle_with_goal_response>
 800fcbc:	4605      	mov	r5, r0
 800fcbe:	2800      	cmp	r0, #0
 800fcc0:	d07f      	beq.n	800fdc2 <_rclc_execute.part.0+0x172>
 800fcc2:	6863      	ldr	r3, [r4, #4]
 800fcc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fcc6:	699b      	ldr	r3, [r3, #24]
 800fcc8:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
 800fccc:	f885 6020 	strb.w	r6, [r5, #32]
 800fcd0:	4798      	blx	r3
 800fcd2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1e8      	bne.n	800fcae <_rclc_execute.part.0+0x5e>
 800fcdc:	6860      	ldr	r0, [r4, #4]
 800fcde:	4629      	mov	r1, r5
 800fce0:	f009 f84c 	bl	8018d7c <rclc_action_remove_used_goal_handle>
 800fce4:	e7e7      	b.n	800fcb6 <_rclc_execute.part.0+0x66>
 800fce6:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800fcea:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
 800fcee:	b100      	cbz	r0, 800fcf2 <_rclc_execute.part.0+0xa2>
 800fcf0:	68a0      	ldr	r0, [r4, #8]
 800fcf2:	2400      	movs	r4, #0
 800fcf4:	4798      	blx	r3
 800fcf6:	4620      	mov	r0, r4
 800fcf8:	b005      	add	sp, #20
 800fcfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fcfc:	6840      	ldr	r0, [r0, #4]
 800fcfe:	f007 fc61 	bl	80175c4 <rcl_timer_call>
 800fd02:	f240 3321 	movw	r3, #801	; 0x321
 800fd06:	4604      	mov	r4, r0
 800fd08:	4298      	cmp	r0, r3
 800fd0a:	d001      	beq.n	800fd10 <_rclc_execute.part.0+0xc0>
 800fd0c:	2800      	cmp	r0, #0
 800fd0e:	d1c2      	bne.n	800fc96 <_rclc_execute.part.0+0x46>
 800fd10:	2400      	movs	r4, #0
 800fd12:	4620      	mov	r0, r4
 800fd14:	b005      	add	sp, #20
 800fd16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd18:	2400      	movs	r4, #0
 800fd1a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fd1c:	6880      	ldr	r0, [r0, #8]
 800fd1e:	4798      	blx	r3
 800fd20:	4620      	mov	r0, r4
 800fd22:	b005      	add	sp, #20
 800fd24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd26:	2400      	movs	r4, #0
 800fd28:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fd2a:	4798      	blx	r3
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	b005      	add	sp, #20
 800fd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd32:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
 800fd36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fd38:	b100      	cbz	r0, 800fd3c <_rclc_execute.part.0+0xec>
 800fd3a:	68a0      	ldr	r0, [r4, #8]
 800fd3c:	2400      	movs	r4, #0
 800fd3e:	4798      	blx	r3
 800fd40:	4620      	mov	r0, r4
 800fd42:	b005      	add	sp, #20
 800fd44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd46:	6840      	ldr	r0, [r0, #4]
 800fd48:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800fd4c:	bb3b      	cbnz	r3, 800fd9e <_rclc_execute.part.0+0x14e>
 800fd4e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d07d      	beq.n	800fe52 <_rclc_execute.part.0+0x202>
 800fd56:	f640 0634 	movw	r6, #2100	; 0x834
 800fd5a:	2701      	movs	r7, #1
 800fd5c:	e007      	b.n	800fd6e <_rclc_execute.part.0+0x11e>
 800fd5e:	4628      	mov	r0, r5
 800fd60:	f009 f89e 	bl	8018ea0 <rclc_action_server_response_goal_request>
 800fd64:	4629      	mov	r1, r5
 800fd66:	6860      	ldr	r0, [r4, #4]
 800fd68:	f009 f808 	bl	8018d7c <rclc_action_remove_used_goal_handle>
 800fd6c:	6860      	ldr	r0, [r4, #4]
 800fd6e:	2100      	movs	r1, #0
 800fd70:	f009 f830 	bl	8018dd4 <rclc_action_find_first_handle_by_status>
 800fd74:	4605      	mov	r5, r0
 800fd76:	2800      	cmp	r0, #0
 800fd78:	d068      	beq.n	800fe4c <_rclc_execute.part.0+0x1fc>
 800fd7a:	6863      	ldr	r3, [r4, #4]
 800fd7c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fd7e:	699b      	ldr	r3, [r3, #24]
 800fd80:	4798      	blx	r3
 800fd82:	42b0      	cmp	r0, r6
 800fd84:	f04f 0100 	mov.w	r1, #0
 800fd88:	d1e9      	bne.n	800fd5e <_rclc_execute.part.0+0x10e>
 800fd8a:	2101      	movs	r1, #1
 800fd8c:	4628      	mov	r0, r5
 800fd8e:	f009 f887 	bl	8018ea0 <rclc_action_server_response_goal_request>
 800fd92:	722f      	strb	r7, [r5, #8]
 800fd94:	e7ea      	b.n	800fd6c <_rclc_execute.part.0+0x11c>
 800fd96:	6848      	ldr	r0, [r1, #4]
 800fd98:	f008 fff0 	bl	8018d7c <rclc_action_remove_used_goal_handle>
 800fd9c:	6860      	ldr	r0, [r4, #4]
 800fd9e:	f009 f825 	bl	8018dec <rclc_action_find_first_terminated_handle>
 800fda2:	4601      	mov	r1, r0
 800fda4:	2800      	cmp	r0, #0
 800fda6:	d1f6      	bne.n	800fd96 <_rclc_execute.part.0+0x146>
 800fda8:	6860      	ldr	r0, [r4, #4]
 800fdaa:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
 800fdae:	e7ce      	b.n	800fd4e <_rclc_execute.part.0+0xfe>
 800fdb0:	2400      	movs	r4, #0
 800fdb2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fdb4:	f100 0110 	add.w	r1, r0, #16
 800fdb8:	6880      	ldr	r0, [r0, #8]
 800fdba:	4798      	blx	r3
 800fdbc:	4620      	mov	r0, r4
 800fdbe:	b005      	add	sp, #20
 800fdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdc2:	6860      	ldr	r0, [r4, #4]
 800fdc4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800fdc8:	b18b      	cbz	r3, 800fdee <_rclc_execute.part.0+0x19e>
 800fdca:	68c5      	ldr	r5, [r0, #12]
 800fdcc:	b32d      	cbz	r5, 800fe1a <_rclc_execute.part.0+0x1ca>
 800fdce:	2600      	movs	r6, #0
 800fdd0:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800fdd4:	b143      	cbz	r3, 800fde8 <_rclc_execute.part.0+0x198>
 800fdd6:	69c3      	ldr	r3, [r0, #28]
 800fdd8:	f885 6022 	strb.w	r6, [r5, #34]	; 0x22
 800fddc:	b123      	cbz	r3, 800fde8 <_rclc_execute.part.0+0x198>
 800fdde:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800fde0:	4628      	mov	r0, r5
 800fde2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fde4:	4798      	blx	r3
 800fde6:	6860      	ldr	r0, [r4, #4]
 800fde8:	682d      	ldr	r5, [r5, #0]
 800fdea:	2d00      	cmp	r5, #0
 800fdec:	d1f0      	bne.n	800fdd0 <_rclc_execute.part.0+0x180>
 800fdee:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800fdf2:	b193      	cbz	r3, 800fe1a <_rclc_execute.part.0+0x1ca>
 800fdf4:	68c5      	ldr	r5, [r0, #12]
 800fdf6:	b185      	cbz	r5, 800fe1a <_rclc_execute.part.0+0x1ca>
 800fdf8:	2600      	movs	r6, #0
 800fdfa:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 800fdfe:	b14b      	cbz	r3, 800fe14 <_rclc_execute.part.0+0x1c4>
 800fe00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fe02:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
 800fe06:	b12b      	cbz	r3, 800fe14 <_rclc_execute.part.0+0x1c4>
 800fe08:	4628      	mov	r0, r5
 800fe0a:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
 800fe0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fe10:	4798      	blx	r3
 800fe12:	6860      	ldr	r0, [r4, #4]
 800fe14:	682d      	ldr	r5, [r5, #0]
 800fe16:	2d00      	cmp	r5, #0
 800fe18:	d1ef      	bne.n	800fdfa <_rclc_execute.part.0+0x1aa>
 800fe1a:	f890 3043 	ldrb.w	r3, [r0, #67]	; 0x43
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	f43f af76 	beq.w	800fd10 <_rclc_execute.part.0+0xc0>
 800fe24:	2700      	movs	r7, #0
 800fe26:	e00b      	b.n	800fe40 <_rclc_execute.part.0+0x1f0>
 800fe28:	6863      	ldr	r3, [r4, #4]
 800fe2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800fe2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800fe2e:	6a1e      	ldr	r6, [r3, #32]
 800fe30:	f885 7023 	strb.w	r7, [r5, #35]	; 0x23
 800fe34:	47b0      	blx	r6
 800fe36:	6860      	ldr	r0, [r4, #4]
 800fe38:	4629      	mov	r1, r5
 800fe3a:	f008 ff9f 	bl	8018d7c <rclc_action_remove_used_goal_handle>
 800fe3e:	6860      	ldr	r0, [r4, #4]
 800fe40:	f009 f822 	bl	8018e88 <rclc_action_find_first_handle_with_result_response>
 800fe44:	4605      	mov	r5, r0
 800fe46:	2800      	cmp	r0, #0
 800fe48:	d1ee      	bne.n	800fe28 <_rclc_execute.part.0+0x1d8>
 800fe4a:	e761      	b.n	800fd10 <_rclc_execute.part.0+0xc0>
 800fe4c:	6860      	ldr	r0, [r4, #4]
 800fe4e:	f880 5020 	strb.w	r5, [r0, #32]
 800fe52:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	f43f af5a 	beq.w	800fd10 <_rclc_execute.part.0+0xc0>
 800fe5c:	68c5      	ldr	r5, [r0, #12]
 800fe5e:	b1b5      	cbz	r5, 800fe8e <_rclc_execute.part.0+0x23e>
 800fe60:	2602      	movs	r6, #2
 800fe62:	e001      	b.n	800fe68 <_rclc_execute.part.0+0x218>
 800fe64:	682d      	ldr	r5, [r5, #0]
 800fe66:	b195      	cbz	r5, 800fe8e <_rclc_execute.part.0+0x23e>
 800fe68:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800fe6c:	2b03      	cmp	r3, #3
 800fe6e:	d1f9      	bne.n	800fe64 <_rclc_execute.part.0+0x214>
 800fe70:	69c3      	ldr	r3, [r0, #28]
 800fe72:	4628      	mov	r0, r5
 800fe74:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fe76:	4798      	blx	r3
 800fe78:	4603      	mov	r3, r0
 800fe7a:	f105 0260 	add.w	r2, r5, #96	; 0x60
 800fe7e:	4628      	mov	r0, r5
 800fe80:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 800fe84:	b143      	cbz	r3, 800fe98 <_rclc_execute.part.0+0x248>
 800fe86:	f009 f82b 	bl	8018ee0 <rclc_action_server_goal_cancel_accept>
 800fe8a:	6860      	ldr	r0, [r4, #4]
 800fe8c:	e7ea      	b.n	800fe64 <_rclc_execute.part.0+0x214>
 800fe8e:	2300      	movs	r3, #0
 800fe90:	461c      	mov	r4, r3
 800fe92:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 800fe96:	e72e      	b.n	800fcf6 <_rclc_execute.part.0+0xa6>
 800fe98:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800fe9a:	f105 0758 	add.w	r7, r5, #88	; 0x58
 800fe9e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800fea2:	2101      	movs	r1, #1
 800fea4:	6860      	ldr	r0, [r4, #4]
 800fea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800feaa:	f009 f845 	bl	8018f38 <rclc_action_server_goal_cancel_reject>
 800feae:	722e      	strb	r6, [r5, #8]
 800feb0:	6860      	ldr	r0, [r4, #4]
 800feb2:	e7d7      	b.n	800fe64 <_rclc_execute.part.0+0x214>
 800feb4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800feb6:	f104 0510 	add.w	r5, r4, #16
 800feba:	6880      	ldr	r0, [r0, #8]
 800febc:	4798      	blx	r3
 800febe:	e6e3      	b.n	800fc88 <_rclc_execute.part.0+0x38>
 800fec0:	f100 0510 	add.w	r5, r0, #16
 800fec4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800fec6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800fec8:	4629      	mov	r1, r5
 800feca:	6880      	ldr	r0, [r0, #8]
 800fecc:	4798      	blx	r3
 800fece:	e6db      	b.n	800fc88 <_rclc_execute.part.0+0x38>
 800fed0:	2401      	movs	r4, #1
 800fed2:	e710      	b.n	800fcf6 <_rclc_execute.part.0+0xa6>

0800fed4 <rclc_executor_trigger_any>:
 800fed4:	2800      	cmp	r0, #0
 800fed6:	d03d      	beq.n	800ff54 <rclc_executor_trigger_any+0x80>
 800fed8:	2900      	cmp	r1, #0
 800feda:	d03c      	beq.n	800ff56 <rclc_executor_trigger_any+0x82>
 800fedc:	4603      	mov	r3, r0
 800fede:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
 800fee2:	2200      	movs	r2, #0
 800fee4:	2800      	cmp	r0, #0
 800fee6:	d035      	beq.n	800ff54 <rclc_executor_trigger_any+0x80>
 800fee8:	b430      	push	{r4, r5}
 800feea:	f893 c000 	ldrb.w	ip, [r3]
 800feee:	f1bc 0f08 	cmp.w	ip, #8
 800fef2:	d11d      	bne.n	800ff30 <rclc_executor_trigger_any+0x5c>
 800fef4:	685c      	ldr	r4, [r3, #4]
 800fef6:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800fef8:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
 800fefc:	d105      	bne.n	800ff0a <rclc_executor_trigger_any+0x36>
 800fefe:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
 800ff02:	b910      	cbnz	r0, 800ff0a <rclc_executor_trigger_any+0x36>
 800ff04:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 800ff08:	b128      	cbz	r0, 800ff16 <rclc_executor_trigger_any+0x42>
 800ff0a:	bc30      	pop	{r4, r5}
 800ff0c:	4770      	bx	lr
 800ff0e:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
 800ff12:	2800      	cmp	r0, #0
 800ff14:	d1f9      	bne.n	800ff0a <rclc_executor_trigger_any+0x36>
 800ff16:	3201      	adds	r2, #1
 800ff18:	3340      	adds	r3, #64	; 0x40
 800ff1a:	4291      	cmp	r1, r2
 800ff1c:	d017      	beq.n	800ff4e <rclc_executor_trigger_any+0x7a>
 800ff1e:	f893 0038 	ldrb.w	r0, [r3, #56]	; 0x38
 800ff22:	2800      	cmp	r0, #0
 800ff24:	d0f1      	beq.n	800ff0a <rclc_executor_trigger_any+0x36>
 800ff26:	f893 c000 	ldrb.w	ip, [r3]
 800ff2a:	f1bc 0f08 	cmp.w	ip, #8
 800ff2e:	d0e1      	beq.n	800fef4 <rclc_executor_trigger_any+0x20>
 800ff30:	f1bc 0f09 	cmp.w	ip, #9
 800ff34:	d1eb      	bne.n	800ff0e <rclc_executor_trigger_any+0x3a>
 800ff36:	685c      	ldr	r4, [r3, #4]
 800ff38:	6a25      	ldr	r5, [r4, #32]
 800ff3a:	2d00      	cmp	r5, #0
 800ff3c:	d1e5      	bne.n	800ff0a <rclc_executor_trigger_any+0x36>
 800ff3e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800ff42:	2800      	cmp	r0, #0
 800ff44:	d1e1      	bne.n	800ff0a <rclc_executor_trigger_any+0x36>
 800ff46:	3201      	adds	r2, #1
 800ff48:	3340      	adds	r3, #64	; 0x40
 800ff4a:	4291      	cmp	r1, r2
 800ff4c:	d1e7      	bne.n	800ff1e <rclc_executor_trigger_any+0x4a>
 800ff4e:	2000      	movs	r0, #0
 800ff50:	bc30      	pop	{r4, r5}
 800ff52:	4770      	bx	lr
 800ff54:	4770      	bx	lr
 800ff56:	4608      	mov	r0, r1
 800ff58:	4770      	bx	lr
 800ff5a:	bf00      	nop

0800ff5c <rclc_executor_get_zero_initialized_executor>:
 800ff5c:	b510      	push	{r4, lr}
 800ff5e:	4604      	mov	r4, r0
 800ff60:	2288      	movs	r2, #136	; 0x88
 800ff62:	4902      	ldr	r1, [pc, #8]	; (800ff6c <rclc_executor_get_zero_initialized_executor+0x10>)
 800ff64:	f00b fd6b 	bl	801ba3e <memcpy>
 800ff68:	4620      	mov	r0, r4
 800ff6a:	bd10      	pop	{r4, pc}
 800ff6c:	0801cec0 	.word	0x0801cec0

0800ff70 <rclc_executor_init>:
 800ff70:	2900      	cmp	r1, #0
 800ff72:	d06a      	beq.n	801004a <rclc_executor_init+0xda>
 800ff74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff78:	4605      	mov	r5, r0
 800ff7a:	b0b0      	sub	sp, #192	; 0xc0
 800ff7c:	2800      	cmp	r0, #0
 800ff7e:	d05c      	beq.n	801003a <rclc_executor_init+0xca>
 800ff80:	4616      	mov	r6, r2
 800ff82:	4618      	mov	r0, r3
 800ff84:	4688      	mov	r8, r1
 800ff86:	461f      	mov	r7, r3
 800ff88:	f000 fc78 	bl	801087c <rcutils_allocator_is_valid>
 800ff8c:	2e00      	cmp	r6, #0
 800ff8e:	d054      	beq.n	801003a <rclc_executor_init+0xca>
 800ff90:	f080 0401 	eor.w	r4, r0, #1
 800ff94:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800ff98:	d14f      	bne.n	801003a <rclc_executor_init+0xca>
 800ff9a:	2288      	movs	r2, #136	; 0x88
 800ff9c:	4930      	ldr	r1, [pc, #192]	; (8010060 <rclc_executor_init+0xf0>)
 800ff9e:	a80e      	add	r0, sp, #56	; 0x38
 800ffa0:	f00b fd4d 	bl	801ba3e <memcpy>
 800ffa4:	a90e      	add	r1, sp, #56	; 0x38
 800ffa6:	2288      	movs	r2, #136	; 0x88
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	f00b fd48 	bl	801ba3e <memcpy>
 800ffae:	4668      	mov	r0, sp
 800ffb0:	f8c5 8000 	str.w	r8, [r5]
 800ffb4:	60ae      	str	r6, [r5, #8]
 800ffb6:	f007 fc7b 	bl	80178b0 <rcl_get_zero_initialized_wait_set>
 800ffba:	46ec      	mov	ip, sp
 800ffbc:	f105 0e14 	add.w	lr, r5, #20
 800ffc0:	f8d7 8000 	ldr.w	r8, [r7]
 800ffc4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ffc8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ffcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ffd0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ffd4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ffd8:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8010058 <rclc_executor_init+0xe8>
 800ffdc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ffe0:	f8dc 3000 	ldr.w	r3, [ip]
 800ffe4:	01b0      	lsls	r0, r6, #6
 800ffe6:	6939      	ldr	r1, [r7, #16]
 800ffe8:	f8ce 3000 	str.w	r3, [lr]
 800ffec:	612f      	str	r7, [r5, #16]
 800ffee:	ed85 7b1a 	vstr	d7, [r5, #104]	; 0x68
 800fff2:	47c0      	blx	r8
 800fff4:	6068      	str	r0, [r5, #4]
 800fff6:	b908      	cbnz	r0, 800fffc <rclc_executor_init+0x8c>
 800fff8:	e029      	b.n	801004e <rclc_executor_init+0xde>
 800fffa:	6868      	ldr	r0, [r5, #4]
 800fffc:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 8010000:	3401      	adds	r4, #1
 8010002:	4631      	mov	r1, r6
 8010004:	f000 fac0 	bl	8010588 <rclc_executor_handle_init>
 8010008:	42a6      	cmp	r6, r4
 801000a:	d8f6      	bhi.n	800fffa <rclc_executor_init+0x8a>
 801000c:	f105 0048 	add.w	r0, r5, #72	; 0x48
 8010010:	f000 faae 	bl	8010570 <rclc_executor_handle_counters_zero_init>
 8010014:	4a13      	ldr	r2, [pc, #76]	; (8010064 <rclc_executor_init+0xf4>)
 8010016:	2300      	movs	r3, #0
 8010018:	6868      	ldr	r0, [r5, #4]
 801001a:	e9c5 231e 	strd	r2, r3, [r5, #120]	; 0x78
 801001e:	b168      	cbz	r0, 801003c <rclc_executor_init+0xcc>
 8010020:	68ab      	ldr	r3, [r5, #8]
 8010022:	b173      	cbz	r3, 8010042 <rclc_executor_init+0xd2>
 8010024:	692a      	ldr	r2, [r5, #16]
 8010026:	fab2 f382 	clz	r3, r2
 801002a:	095b      	lsrs	r3, r3, #5
 801002c:	b14a      	cbz	r2, 8010042 <rclc_executor_init+0xd2>
 801002e:	4618      	mov	r0, r3
 8010030:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
 8010034:	b030      	add	sp, #192	; 0xc0
 8010036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801003a:	200b      	movs	r0, #11
 801003c:	b030      	add	sp, #192	; 0xc0
 801003e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010042:	2000      	movs	r0, #0
 8010044:	b030      	add	sp, #192	; 0xc0
 8010046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801004a:	200b      	movs	r0, #11
 801004c:	4770      	bx	lr
 801004e:	200a      	movs	r0, #10
 8010050:	e7f4      	b.n	801003c <rclc_executor_init+0xcc>
 8010052:	bf00      	nop
 8010054:	f3af 8000 	nop.w
 8010058:	3b9aca00 	.word	0x3b9aca00
 801005c:	00000000 	.word	0x00000000
 8010060:	0801cec0 	.word	0x0801cec0
 8010064:	0800fed5 	.word	0x0800fed5

08010068 <rclc_executor_add_subscription>:
 8010068:	2b00      	cmp	r3, #0
 801006a:	bf18      	it	ne
 801006c:	2a00      	cmpne	r2, #0
 801006e:	b570      	push	{r4, r5, r6, lr}
 8010070:	4604      	mov	r4, r0
 8010072:	bf0c      	ite	eq
 8010074:	2001      	moveq	r0, #1
 8010076:	2000      	movne	r0, #0
 8010078:	f89d c010 	ldrb.w	ip, [sp, #16]
 801007c:	2900      	cmp	r1, #0
 801007e:	bf08      	it	eq
 8010080:	f040 0001 	orreq.w	r0, r0, #1
 8010084:	bb28      	cbnz	r0, 80100d2 <rclc_executor_add_subscription+0x6a>
 8010086:	fab4 f584 	clz	r5, r4
 801008a:	096d      	lsrs	r5, r5, #5
 801008c:	b30c      	cbz	r4, 80100d2 <rclc_executor_add_subscription+0x6a>
 801008e:	e9d4 0602 	ldrd	r0, r6, [r4, #8]
 8010092:	4286      	cmp	r6, r0
 8010094:	d301      	bcc.n	801009a <rclc_executor_add_subscription+0x32>
 8010096:	2001      	movs	r0, #1
 8010098:	bd70      	pop	{r4, r5, r6, pc}
 801009a:	6860      	ldr	r0, [r4, #4]
 801009c:	ea4f 1e86 	mov.w	lr, r6, lsl #6
 80100a0:	f800 500e 	strb.w	r5, [r0, lr]
 80100a4:	eb00 1086 	add.w	r0, r0, r6, lsl #6
 80100a8:	3601      	adds	r6, #1
 80100aa:	6303      	str	r3, [r0, #48]	; 0x30
 80100ac:	2301      	movs	r3, #1
 80100ae:	62c5      	str	r5, [r0, #44]	; 0x2c
 80100b0:	f104 0514 	add.w	r5, r4, #20
 80100b4:	f880 c001 	strb.w	ip, [r0, #1]
 80100b8:	8703      	strh	r3, [r0, #56]	; 0x38
 80100ba:	e9c0 1201 	strd	r1, r2, [r0, #4]
 80100be:	4628      	mov	r0, r5
 80100c0:	60e6      	str	r6, [r4, #12]
 80100c2:	f007 fc09 	bl	80178d8 <rcl_wait_set_is_valid>
 80100c6:	b930      	cbnz	r0, 80100d6 <rclc_executor_add_subscription+0x6e>
 80100c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80100ca:	2000      	movs	r0, #0
 80100cc:	3301      	adds	r3, #1
 80100ce:	64a3      	str	r3, [r4, #72]	; 0x48
 80100d0:	bd70      	pop	{r4, r5, r6, pc}
 80100d2:	200b      	movs	r0, #11
 80100d4:	bd70      	pop	{r4, r5, r6, pc}
 80100d6:	4628      	mov	r0, r5
 80100d8:	f007 fc04 	bl	80178e4 <rcl_wait_set_fini>
 80100dc:	2800      	cmp	r0, #0
 80100de:	d0f3      	beq.n	80100c8 <rclc_executor_add_subscription+0x60>
 80100e0:	bd70      	pop	{r4, r5, r6, pc}
 80100e2:	bf00      	nop

080100e4 <rclc_executor_add_service>:
 80100e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100e6:	9d06      	ldr	r5, [sp, #24]
 80100e8:	4604      	mov	r4, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	bf18      	it	ne
 80100ee:	2d00      	cmpne	r5, #0
 80100f0:	bf0c      	ite	eq
 80100f2:	2001      	moveq	r0, #1
 80100f4:	2000      	movne	r0, #0
 80100f6:	2a00      	cmp	r2, #0
 80100f8:	bf08      	it	eq
 80100fa:	f040 0001 	orreq.w	r0, r0, #1
 80100fe:	2900      	cmp	r1, #0
 8010100:	bf08      	it	eq
 8010102:	f040 0001 	orreq.w	r0, r0, #1
 8010106:	bb40      	cbnz	r0, 801015a <rclc_executor_add_service+0x76>
 8010108:	fab4 f684 	clz	r6, r4
 801010c:	0976      	lsrs	r6, r6, #5
 801010e:	b324      	cbz	r4, 801015a <rclc_executor_add_service+0x76>
 8010110:	e9d4 7002 	ldrd	r7, r0, [r4, #8]
 8010114:	42b8      	cmp	r0, r7
 8010116:	d301      	bcc.n	801011c <rclc_executor_add_service+0x38>
 8010118:	2001      	movs	r0, #1
 801011a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801011c:	6867      	ldr	r7, [r4, #4]
 801011e:	ea4f 1e80 	mov.w	lr, r0, lsl #6
 8010122:	f100 0c01 	add.w	ip, r0, #1
 8010126:	eb07 1080 	add.w	r0, r7, r0, lsl #6
 801012a:	6283      	str	r3, [r0, #40]	; 0x28
 801012c:	2305      	movs	r3, #5
 801012e:	6305      	str	r5, [r0, #48]	; 0x30
 8010130:	f104 0514 	add.w	r5, r4, #20
 8010134:	e9c0 1201 	strd	r1, r2, [r0, #4]
 8010138:	f827 300e 	strh.w	r3, [r7, lr]
 801013c:	2301      	movs	r3, #1
 801013e:	62c6      	str	r6, [r0, #44]	; 0x2c
 8010140:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8010144:	4628      	mov	r0, r5
 8010146:	f8c4 c00c 	str.w	ip, [r4, #12]
 801014a:	f007 fbc5 	bl	80178d8 <rcl_wait_set_is_valid>
 801014e:	b930      	cbnz	r0, 801015e <rclc_executor_add_service+0x7a>
 8010150:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010152:	2000      	movs	r0, #0
 8010154:	3301      	adds	r3, #1
 8010156:	6563      	str	r3, [r4, #84]	; 0x54
 8010158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801015a:	200b      	movs	r0, #11
 801015c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801015e:	4628      	mov	r0, r5
 8010160:	f007 fbc0 	bl	80178e4 <rcl_wait_set_fini>
 8010164:	2800      	cmp	r0, #0
 8010166:	d0f3      	beq.n	8010150 <rclc_executor_add_service+0x6c>
 8010168:	e7d7      	b.n	801011a <rclc_executor_add_service+0x36>
 801016a:	bf00      	nop

0801016c <rclc_executor_prepare>:
 801016c:	2800      	cmp	r0, #0
 801016e:	d044      	beq.n	80101fa <rclc_executor_prepare+0x8e>
 8010170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010172:	f100 0514 	add.w	r5, r0, #20
 8010176:	b09b      	sub	sp, #108	; 0x6c
 8010178:	4604      	mov	r4, r0
 801017a:	4628      	mov	r0, r5
 801017c:	f007 fbac 	bl	80178d8 <rcl_wait_set_is_valid>
 8010180:	b110      	cbz	r0, 8010188 <rclc_executor_prepare+0x1c>
 8010182:	2000      	movs	r0, #0
 8010184:	b01b      	add	sp, #108	; 0x6c
 8010186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010188:	4628      	mov	r0, r5
 801018a:	f007 fbab 	bl	80178e4 <rcl_wait_set_fini>
 801018e:	2800      	cmp	r0, #0
 8010190:	d130      	bne.n	80101f4 <rclc_executor_prepare+0x88>
 8010192:	a80c      	add	r0, sp, #48	; 0x30
 8010194:	ae04      	add	r6, sp, #16
 8010196:	f007 fb8b 	bl	80178b0 <rcl_get_zero_initialized_wait_set>
 801019a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801019e:	46ae      	mov	lr, r5
 80101a0:	6927      	ldr	r7, [r4, #16]
 80101a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101a6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80101b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80101ba:	f8dc 3000 	ldr.w	r3, [ip]
 80101be:	f8ce 3000 	str.w	r3, [lr]
 80101c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80101c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	4628      	mov	r0, r5
 80101ca:	6822      	ldr	r2, [r4, #0]
 80101cc:	6033      	str	r3, [r6, #0]
 80101ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80101d0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80101d2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80101d6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
 80101da:	e9cd 2100 	strd	r2, r1, [sp]
 80101de:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80101e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80101e2:	f007 fe7f 	bl	8017ee4 <rcl_wait_set_init>
 80101e6:	2800      	cmp	r0, #0
 80101e8:	d0cc      	beq.n	8010184 <rclc_executor_prepare+0x18>
 80101ea:	900b      	str	r0, [sp, #44]	; 0x2c
 80101ec:	f000 fb84 	bl	80108f8 <rcutils_reset_error>
 80101f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80101f2:	e7c7      	b.n	8010184 <rclc_executor_prepare+0x18>
 80101f4:	f000 fb80 	bl	80108f8 <rcutils_reset_error>
 80101f8:	e7cb      	b.n	8010192 <rclc_executor_prepare+0x26>
 80101fa:	200b      	movs	r0, #11
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop

08010200 <rclc_executor_spin_some.part.0>:
 8010200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010204:	4605      	mov	r5, r0
 8010206:	4691      	mov	r9, r2
 8010208:	4698      	mov	r8, r3
 801020a:	f7ff ffaf 	bl	801016c <rclc_executor_prepare>
 801020e:	f105 0614 	add.w	r6, r5, #20
 8010212:	4630      	mov	r0, r6
 8010214:	f007 fc32 	bl	8017a7c <rcl_wait_set_clear>
 8010218:	4607      	mov	r7, r0
 801021a:	2800      	cmp	r0, #0
 801021c:	f040 80a8 	bne.w	8010370 <rclc_executor_spin_some.part.0+0x170>
 8010220:	68ab      	ldr	r3, [r5, #8]
 8010222:	b30b      	cbz	r3, 8010268 <rclc_executor_spin_some.part.0+0x68>
 8010224:	4604      	mov	r4, r0
 8010226:	6869      	ldr	r1, [r5, #4]
 8010228:	01a2      	lsls	r2, r4, #6
 801022a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 801022e:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 8010232:	b1cb      	cbz	r3, 8010268 <rclc_executor_spin_some.part.0+0x68>
 8010234:	5c8b      	ldrb	r3, [r1, r2]
 8010236:	2b0a      	cmp	r3, #10
 8010238:	f200 80de 	bhi.w	80103f8 <rclc_executor_spin_some.part.0+0x1f8>
 801023c:	e8df f003 	tbb	[pc, r3]
 8010240:	8da99d9d 	.word	0x8da99d9d
 8010244:	0606068d 	.word	0x0606068d
 8010248:	c1ce      	.short	0xc1ce
 801024a:	b5          	.byte	0xb5
 801024b:	00          	.byte	0x00
 801024c:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8010250:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010254:	4630      	mov	r0, r6
 8010256:	f007 ff61 	bl	801811c <rcl_wait_set_add_service>
 801025a:	2800      	cmp	r0, #0
 801025c:	f040 8087 	bne.w	801036e <rclc_executor_spin_some.part.0+0x16e>
 8010260:	3401      	adds	r4, #1
 8010262:	68ab      	ldr	r3, [r5, #8]
 8010264:	429c      	cmp	r4, r3
 8010266:	d3de      	bcc.n	8010226 <rclc_executor_spin_some.part.0+0x26>
 8010268:	4643      	mov	r3, r8
 801026a:	464a      	mov	r2, r9
 801026c:	4630      	mov	r0, r6
 801026e:	f007 ff83 	bl	8018178 <rcl_wait>
 8010272:	f895 3080 	ldrb.w	r3, [r5, #128]	; 0x80
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 80c6 	beq.w	8010408 <rclc_executor_spin_some.part.0+0x208>
 801027c:	2b01      	cmp	r3, #1
 801027e:	f040 80bb 	bne.w	80103f8 <rclc_executor_spin_some.part.0+0x1f8>
 8010282:	68ab      	ldr	r3, [r5, #8]
 8010284:	2b00      	cmp	r3, #0
 8010286:	f000 8159 	beq.w	801053c <rclc_executor_spin_some.part.0+0x33c>
 801028a:	2400      	movs	r4, #0
 801028c:	f240 1991 	movw	r9, #401	; 0x191
 8010290:	46a0      	mov	r8, r4
 8010292:	e00a      	b.n	80102aa <rclc_executor_spin_some.part.0+0xaa>
 8010294:	f7ff fb1a 	bl	800f8cc <_rclc_check_for_new_data>
 8010298:	4604      	mov	r4, r0
 801029a:	b110      	cbz	r0, 80102a2 <rclc_executor_spin_some.part.0+0xa2>
 801029c:	4548      	cmp	r0, r9
 801029e:	f040 80b1 	bne.w	8010404 <rclc_executor_spin_some.part.0+0x204>
 80102a2:	68ab      	ldr	r3, [r5, #8]
 80102a4:	4598      	cmp	r8, r3
 80102a6:	f080 8126 	bcs.w	80104f6 <rclc_executor_spin_some.part.0+0x2f6>
 80102aa:	686a      	ldr	r2, [r5, #4]
 80102ac:	4631      	mov	r1, r6
 80102ae:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 80102b2:	f108 0801 	add.w	r8, r8, #1
 80102b6:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 80102ba:	f1bc 0f00 	cmp.w	ip, #0
 80102be:	d1e9      	bne.n	8010294 <rclc_executor_spin_some.part.0+0x94>
 80102c0:	4619      	mov	r1, r3
 80102c2:	4610      	mov	r0, r2
 80102c4:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 80102c8:	4798      	blx	r3
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f000 809a 	beq.w	8010404 <rclc_executor_spin_some.part.0+0x204>
 80102d0:	68ab      	ldr	r3, [r5, #8]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	f000 8096 	beq.w	8010404 <rclc_executor_spin_some.part.0+0x204>
 80102d8:	f04f 0800 	mov.w	r8, #0
 80102dc:	f240 1991 	movw	r9, #401	; 0x191
 80102e0:	e009      	b.n	80102f6 <rclc_executor_spin_some.part.0+0xf6>
 80102e2:	f7ff fb41 	bl	800f968 <_rclc_take_new_data>
 80102e6:	4604      	mov	r4, r0
 80102e8:	b110      	cbz	r0, 80102f0 <rclc_executor_spin_some.part.0+0xf0>
 80102ea:	4548      	cmp	r0, r9
 80102ec:	f040 808a 	bne.w	8010404 <rclc_executor_spin_some.part.0+0x204>
 80102f0:	68ab      	ldr	r3, [r5, #8]
 80102f2:	4598      	cmp	r8, r3
 80102f4:	d209      	bcs.n	801030a <rclc_executor_spin_some.part.0+0x10a>
 80102f6:	6868      	ldr	r0, [r5, #4]
 80102f8:	4631      	mov	r1, r6
 80102fa:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 80102fe:	f108 0801 	add.w	r8, r8, #1
 8010302:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8010306:	2a00      	cmp	r2, #0
 8010308:	d1eb      	bne.n	80102e2 <rclc_executor_spin_some.part.0+0xe2>
 801030a:	2b00      	cmp	r3, #0
 801030c:	d07a      	beq.n	8010404 <rclc_executor_spin_some.part.0+0x204>
 801030e:	2600      	movs	r6, #0
 8010310:	e00e      	b.n	8010330 <rclc_executor_spin_some.part.0+0x130>
 8010312:	f812 200c 	ldrb.w	r2, [r2, ip]
 8010316:	2a08      	cmp	r2, #8
 8010318:	f000 80fc 	beq.w	8010514 <rclc_executor_spin_some.part.0+0x314>
 801031c:	2a09      	cmp	r2, #9
 801031e:	f000 80ee 	beq.w	80104fe <rclc_executor_spin_some.part.0+0x2fe>
 8010322:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8010326:	b98a      	cbnz	r2, 801034c <rclc_executor_spin_some.part.0+0x14c>
 8010328:	3601      	adds	r6, #1
 801032a:	429e      	cmp	r6, r3
 801032c:	d267      	bcs.n	80103fe <rclc_executor_spin_some.part.0+0x1fe>
 801032e:	2400      	movs	r4, #0
 8010330:	686a      	ldr	r2, [r5, #4]
 8010332:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 8010336:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 801033a:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
 801033e:	2900      	cmp	r1, #0
 8010340:	d060      	beq.n	8010404 <rclc_executor_spin_some.part.0+0x204>
 8010342:	7841      	ldrb	r1, [r0, #1]
 8010344:	2900      	cmp	r1, #0
 8010346:	d0e4      	beq.n	8010312 <rclc_executor_spin_some.part.0+0x112>
 8010348:	2901      	cmp	r1, #1
 801034a:	d1ed      	bne.n	8010328 <rclc_executor_spin_some.part.0+0x128>
 801034c:	f7ff fc80 	bl	800fc50 <_rclc_execute.part.0>
 8010350:	2800      	cmp	r0, #0
 8010352:	f040 80b5 	bne.w	80104c0 <rclc_executor_spin_some.part.0+0x2c0>
 8010356:	68ab      	ldr	r3, [r5, #8]
 8010358:	e7e6      	b.n	8010328 <rclc_executor_spin_some.part.0+0x128>
 801035a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 801035e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010362:	4630      	mov	r0, r6
 8010364:	f007 feae 	bl	80180c4 <rcl_wait_set_add_client>
 8010368:	2800      	cmp	r0, #0
 801036a:	f43f af79 	beq.w	8010260 <rclc_executor_spin_some.part.0+0x60>
 801036e:	4607      	mov	r7, r0
 8010370:	f000 fac2 	bl	80108f8 <rcutils_reset_error>
 8010374:	4638      	mov	r0, r7
 8010376:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801037a:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 801037e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8010382:	4630      	mov	r0, r6
 8010384:	f007 fb4e 	bl	8017a24 <rcl_wait_set_add_subscription>
 8010388:	2800      	cmp	r0, #0
 801038a:	f43f af69 	beq.w	8010260 <rclc_executor_spin_some.part.0+0x60>
 801038e:	4607      	mov	r7, r0
 8010390:	e7ee      	b.n	8010370 <rclc_executor_spin_some.part.0+0x170>
 8010392:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 8010396:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801039a:	4630      	mov	r0, r6
 801039c:	f007 fe62 	bl	8018064 <rcl_wait_set_add_timer>
 80103a0:	2800      	cmp	r0, #0
 80103a2:	f43f af5d 	beq.w	8010260 <rclc_executor_spin_some.part.0+0x60>
 80103a6:	4607      	mov	r7, r0
 80103a8:	e7e2      	b.n	8010370 <rclc_executor_spin_some.part.0+0x170>
 80103aa:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80103ae:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80103b2:	4630      	mov	r0, r6
 80103b4:	f007 fe2a 	bl	801800c <rcl_wait_set_add_guard_condition>
 80103b8:	2800      	cmp	r0, #0
 80103ba:	f43f af51 	beq.w	8010260 <rclc_executor_spin_some.part.0+0x60>
 80103be:	4607      	mov	r7, r0
 80103c0:	e7d6      	b.n	8010370 <rclc_executor_spin_some.part.0+0x170>
 80103c2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80103c6:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80103ca:	4630      	mov	r0, r6
 80103cc:	3110      	adds	r1, #16
 80103ce:	f008 fba7 	bl	8018b20 <rcl_action_wait_set_add_action_server>
 80103d2:	2800      	cmp	r0, #0
 80103d4:	f43f af44 	beq.w	8010260 <rclc_executor_spin_some.part.0+0x60>
 80103d8:	4607      	mov	r7, r0
 80103da:	e7c9      	b.n	8010370 <rclc_executor_spin_some.part.0+0x170>
 80103dc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80103e0:	2300      	movs	r3, #0
 80103e2:	f10c 0234 	add.w	r2, ip, #52	; 0x34
 80103e6:	4630      	mov	r0, r6
 80103e8:	3110      	adds	r1, #16
 80103ea:	f008 f971 	bl	80186d0 <rcl_action_wait_set_add_action_client>
 80103ee:	2800      	cmp	r0, #0
 80103f0:	f43f af36 	beq.w	8010260 <rclc_executor_spin_some.part.0+0x60>
 80103f4:	4607      	mov	r7, r0
 80103f6:	e7bb      	b.n	8010370 <rclc_executor_spin_some.part.0+0x170>
 80103f8:	2701      	movs	r7, #1
 80103fa:	f000 fa7d 	bl	80108f8 <rcutils_reset_error>
 80103fe:	4638      	mov	r0, r7
 8010400:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010404:	4627      	mov	r7, r4
 8010406:	e7fa      	b.n	80103fe <rclc_executor_spin_some.part.0+0x1fe>
 8010408:	68ab      	ldr	r3, [r5, #8]
 801040a:	2b00      	cmp	r3, #0
 801040c:	f000 8093 	beq.w	8010536 <rclc_executor_spin_some.part.0+0x336>
 8010410:	2400      	movs	r4, #0
 8010412:	f240 1991 	movw	r9, #401	; 0x191
 8010416:	46a0      	mov	r8, r4
 8010418:	e008      	b.n	801042c <rclc_executor_spin_some.part.0+0x22c>
 801041a:	f7ff fa57 	bl	800f8cc <_rclc_check_for_new_data>
 801041e:	4604      	mov	r4, r0
 8010420:	b108      	cbz	r0, 8010426 <rclc_executor_spin_some.part.0+0x226>
 8010422:	4548      	cmp	r0, r9
 8010424:	d1ee      	bne.n	8010404 <rclc_executor_spin_some.part.0+0x204>
 8010426:	68ab      	ldr	r3, [r5, #8]
 8010428:	4598      	cmp	r8, r3
 801042a:	d266      	bcs.n	80104fa <rclc_executor_spin_some.part.0+0x2fa>
 801042c:	686a      	ldr	r2, [r5, #4]
 801042e:	4631      	mov	r1, r6
 8010430:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 8010434:	f108 0801 	add.w	r8, r8, #1
 8010438:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 801043c:	f1bc 0f00 	cmp.w	ip, #0
 8010440:	d1eb      	bne.n	801041a <rclc_executor_spin_some.part.0+0x21a>
 8010442:	4619      	mov	r1, r3
 8010444:	4610      	mov	r0, r2
 8010446:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	; 0x78
 801044a:	4798      	blx	r3
 801044c:	2800      	cmp	r0, #0
 801044e:	d0d9      	beq.n	8010404 <rclc_executor_spin_some.part.0+0x204>
 8010450:	68ab      	ldr	r3, [r5, #8]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d0d6      	beq.n	8010404 <rclc_executor_spin_some.part.0+0x204>
 8010456:	f04f 0a00 	mov.w	sl, #0
 801045a:	f240 1891 	movw	r8, #401	; 0x191
 801045e:	f240 2959 	movw	r9, #601	; 0x259
 8010462:	e00e      	b.n	8010482 <rclc_executor_spin_some.part.0+0x282>
 8010464:	f813 300b 	ldrb.w	r3, [r3, fp]
 8010468:	2b08      	cmp	r3, #8
 801046a:	d034      	beq.n	80104d6 <rclc_executor_spin_some.part.0+0x2d6>
 801046c:	2b09      	cmp	r3, #9
 801046e:	d029      	beq.n	80104c4 <rclc_executor_spin_some.part.0+0x2c4>
 8010470:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8010474:	bb03      	cbnz	r3, 80104b8 <rclc_executor_spin_some.part.0+0x2b8>
 8010476:	f10a 0a01 	add.w	sl, sl, #1
 801047a:	68ab      	ldr	r3, [r5, #8]
 801047c:	459a      	cmp	sl, r3
 801047e:	d2be      	bcs.n	80103fe <rclc_executor_spin_some.part.0+0x1fe>
 8010480:	2400      	movs	r4, #0
 8010482:	6868      	ldr	r0, [r5, #4]
 8010484:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 8010488:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 801048c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8010490:	2b00      	cmp	r3, #0
 8010492:	d0b7      	beq.n	8010404 <rclc_executor_spin_some.part.0+0x204>
 8010494:	4631      	mov	r1, r6
 8010496:	f7ff fa67 	bl	800f968 <_rclc_take_new_data>
 801049a:	2800      	cmp	r0, #0
 801049c:	bf18      	it	ne
 801049e:	4540      	cmpne	r0, r8
 80104a0:	d001      	beq.n	80104a6 <rclc_executor_spin_some.part.0+0x2a6>
 80104a2:	4548      	cmp	r0, r9
 80104a4:	d10c      	bne.n	80104c0 <rclc_executor_spin_some.part.0+0x2c0>
 80104a6:	686b      	ldr	r3, [r5, #4]
 80104a8:	eb13 000b 	adds.w	r0, r3, fp
 80104ac:	d021      	beq.n	80104f2 <rclc_executor_spin_some.part.0+0x2f2>
 80104ae:	7842      	ldrb	r2, [r0, #1]
 80104b0:	2a00      	cmp	r2, #0
 80104b2:	d0d7      	beq.n	8010464 <rclc_executor_spin_some.part.0+0x264>
 80104b4:	2a01      	cmp	r2, #1
 80104b6:	d1de      	bne.n	8010476 <rclc_executor_spin_some.part.0+0x276>
 80104b8:	f7ff fbca 	bl	800fc50 <_rclc_execute.part.0>
 80104bc:	2800      	cmp	r0, #0
 80104be:	d0da      	beq.n	8010476 <rclc_executor_spin_some.part.0+0x276>
 80104c0:	4607      	mov	r7, r0
 80104c2:	e79c      	b.n	80103fe <rclc_executor_spin_some.part.0+0x1fe>
 80104c4:	6843      	ldr	r3, [r0, #4]
 80104c6:	6a1a      	ldr	r2, [r3, #32]
 80104c8:	2a00      	cmp	r2, #0
 80104ca:	d1f5      	bne.n	80104b8 <rclc_executor_spin_some.part.0+0x2b8>
 80104cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d0d0      	beq.n	8010476 <rclc_executor_spin_some.part.0+0x276>
 80104d4:	e7f0      	b.n	80104b8 <rclc_executor_spin_some.part.0+0x2b8>
 80104d6:	6843      	ldr	r3, [r0, #4]
 80104d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80104da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80104de:	d1eb      	bne.n	80104b8 <rclc_executor_spin_some.part.0+0x2b8>
 80104e0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80104e4:	2a00      	cmp	r2, #0
 80104e6:	d1e7      	bne.n	80104b8 <rclc_executor_spin_some.part.0+0x2b8>
 80104e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d0c2      	beq.n	8010476 <rclc_executor_spin_some.part.0+0x276>
 80104f0:	e7e2      	b.n	80104b8 <rclc_executor_spin_some.part.0+0x2b8>
 80104f2:	270b      	movs	r7, #11
 80104f4:	e783      	b.n	80103fe <rclc_executor_spin_some.part.0+0x1fe>
 80104f6:	686a      	ldr	r2, [r5, #4]
 80104f8:	e6e2      	b.n	80102c0 <rclc_executor_spin_some.part.0+0xc0>
 80104fa:	686a      	ldr	r2, [r5, #4]
 80104fc:	e7a1      	b.n	8010442 <rclc_executor_spin_some.part.0+0x242>
 80104fe:	6842      	ldr	r2, [r0, #4]
 8010500:	6a11      	ldr	r1, [r2, #32]
 8010502:	2900      	cmp	r1, #0
 8010504:	f47f af22 	bne.w	801034c <rclc_executor_spin_some.part.0+0x14c>
 8010508:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 801050c:	2a00      	cmp	r2, #0
 801050e:	f43f af0b 	beq.w	8010328 <rclc_executor_spin_some.part.0+0x128>
 8010512:	e71b      	b.n	801034c <rclc_executor_spin_some.part.0+0x14c>
 8010514:	6842      	ldr	r2, [r0, #4]
 8010516:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8010518:	f031 417f 	bics.w	r1, r1, #4278190080	; 0xff000000
 801051c:	f47f af16 	bne.w	801034c <rclc_executor_spin_some.part.0+0x14c>
 8010520:	f892 1044 	ldrb.w	r1, [r2, #68]	; 0x44
 8010524:	2900      	cmp	r1, #0
 8010526:	f47f af11 	bne.w	801034c <rclc_executor_spin_some.part.0+0x14c>
 801052a:	f892 2043 	ldrb.w	r2, [r2, #67]	; 0x43
 801052e:	2a00      	cmp	r2, #0
 8010530:	f43f aefa 	beq.w	8010328 <rclc_executor_spin_some.part.0+0x128>
 8010534:	e70a      	b.n	801034c <rclc_executor_spin_some.part.0+0x14c>
 8010536:	686a      	ldr	r2, [r5, #4]
 8010538:	461c      	mov	r4, r3
 801053a:	e782      	b.n	8010442 <rclc_executor_spin_some.part.0+0x242>
 801053c:	686a      	ldr	r2, [r5, #4]
 801053e:	461c      	mov	r4, r3
 8010540:	e6be      	b.n	80102c0 <rclc_executor_spin_some.part.0+0xc0>
 8010542:	bf00      	nop

08010544 <rclc_executor_spin_some>:
 8010544:	b190      	cbz	r0, 801056c <rclc_executor_spin_some+0x28>
 8010546:	b570      	push	{r4, r5, r6, lr}
 8010548:	4604      	mov	r4, r0
 801054a:	6800      	ldr	r0, [r0, #0]
 801054c:	4616      	mov	r6, r2
 801054e:	461d      	mov	r5, r3
 8010550:	f006 fb7a 	bl	8016c48 <rcl_context_is_valid>
 8010554:	b130      	cbz	r0, 8010564 <rclc_executor_spin_some+0x20>
 8010556:	4632      	mov	r2, r6
 8010558:	462b      	mov	r3, r5
 801055a:	4620      	mov	r0, r4
 801055c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010560:	f7ff be4e 	b.w	8010200 <rclc_executor_spin_some.part.0>
 8010564:	f000 f9c8 	bl	80108f8 <rcutils_reset_error>
 8010568:	2001      	movs	r0, #1
 801056a:	bd70      	pop	{r4, r5, r6, pc}
 801056c:	200b      	movs	r0, #11
 801056e:	4770      	bx	lr

08010570 <rclc_executor_handle_counters_zero_init>:
 8010570:	b130      	cbz	r0, 8010580 <rclc_executor_handle_counters_zero_init+0x10>
 8010572:	2220      	movs	r2, #32
 8010574:	2100      	movs	r1, #0
 8010576:	b508      	push	{r3, lr}
 8010578:	f00b f998 	bl	801b8ac <memset>
 801057c:	2000      	movs	r0, #0
 801057e:	bd08      	pop	{r3, pc}
 8010580:	200b      	movs	r0, #11
 8010582:	4770      	bx	lr
 8010584:	0000      	movs	r0, r0
	...

08010588 <rclc_executor_handle_init>:
 8010588:	4603      	mov	r3, r0
 801058a:	b178      	cbz	r0, 80105ac <rclc_executor_handle_init+0x24>
 801058c:	2200      	movs	r2, #0
 801058e:	f04f 0c0b 	mov.w	ip, #11
 8010592:	6341      	str	r1, [r0, #52]	; 0x34
 8010594:	4610      	mov	r0, r2
 8010596:	f8a3 c000 	strh.w	ip, [r3]
 801059a:	631a      	str	r2, [r3, #48]	; 0x30
 801059c:	871a      	strh	r2, [r3, #56]	; 0x38
 801059e:	ed9f 7b04 	vldr	d7, [pc, #16]	; 80105b0 <rclc_executor_handle_init+0x28>
 80105a2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80105a6:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 80105aa:	4770      	bx	lr
 80105ac:	200b      	movs	r0, #11
 80105ae:	4770      	bx	lr
	...

080105b8 <rclc_support_init_with_options>:
 80105b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105bc:	b083      	sub	sp, #12
 80105be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	bf18      	it	ne
 80105c4:	2f00      	cmpne	r7, #0
 80105c6:	d027      	beq.n	8010618 <rclc_support_init_with_options+0x60>
 80105c8:	4604      	mov	r4, r0
 80105ca:	b328      	cbz	r0, 8010618 <rclc_support_init_with_options+0x60>
 80105cc:	46e9      	mov	r9, sp
 80105ce:	461d      	mov	r5, r3
 80105d0:	460e      	mov	r6, r1
 80105d2:	4690      	mov	r8, r2
 80105d4:	4648      	mov	r0, r9
 80105d6:	f006 fb2d 	bl	8016c34 <rcl_get_zero_initialized_context>
 80105da:	462a      	mov	r2, r5
 80105dc:	4623      	mov	r3, r4
 80105de:	e899 0003 	ldmia.w	r9, {r0, r1}
 80105e2:	e884 0003 	stmia.w	r4, {r0, r1}
 80105e6:	4641      	mov	r1, r8
 80105e8:	4630      	mov	r0, r6
 80105ea:	f006 fc41 	bl	8016e70 <rcl_init>
 80105ee:	4605      	mov	r5, r0
 80105f0:	b960      	cbnz	r0, 801060c <rclc_support_init_with_options+0x54>
 80105f2:	463a      	mov	r2, r7
 80105f4:	f104 010c 	add.w	r1, r4, #12
 80105f8:	2003      	movs	r0, #3
 80105fa:	60a7      	str	r7, [r4, #8]
 80105fc:	f006 ff4e 	bl	801749c <rcl_clock_init>
 8010600:	4605      	mov	r5, r0
 8010602:	b918      	cbnz	r0, 801060c <rclc_support_init_with_options+0x54>
 8010604:	4628      	mov	r0, r5
 8010606:	b003      	add	sp, #12
 8010608:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801060c:	f000 f974 	bl	80108f8 <rcutils_reset_error>
 8010610:	4628      	mov	r0, r5
 8010612:	b003      	add	sp, #12
 8010614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010618:	250b      	movs	r5, #11
 801061a:	4628      	mov	r0, r5
 801061c:	b003      	add	sp, #12
 801061e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010622:	bf00      	nop

08010624 <rclc_node_init_with_options>:
 8010624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010628:	b087      	sub	sp, #28
 801062a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801062c:	2e00      	cmp	r6, #0
 801062e:	bf18      	it	ne
 8010630:	2b00      	cmpne	r3, #0
 8010632:	bf0c      	ite	eq
 8010634:	f04f 0c01 	moveq.w	ip, #1
 8010638:	f04f 0c00 	movne.w	ip, #0
 801063c:	2a00      	cmp	r2, #0
 801063e:	bf08      	it	eq
 8010640:	f04c 0c01 	orreq.w	ip, ip, #1
 8010644:	2900      	cmp	r1, #0
 8010646:	bf08      	it	eq
 8010648:	f04c 0c01 	orreq.w	ip, ip, #1
 801064c:	f1bc 0f00 	cmp.w	ip, #0
 8010650:	d118      	bne.n	8010684 <rclc_node_init_with_options+0x60>
 8010652:	4604      	mov	r4, r0
 8010654:	b1b0      	cbz	r0, 8010684 <rclc_node_init_with_options+0x60>
 8010656:	f10d 0910 	add.w	r9, sp, #16
 801065a:	460d      	mov	r5, r1
 801065c:	4698      	mov	r8, r3
 801065e:	4617      	mov	r7, r2
 8010660:	4648      	mov	r0, r9
 8010662:	f7fe fc09 	bl	800ee78 <rcl_get_zero_initialized_node>
 8010666:	9600      	str	r6, [sp, #0]
 8010668:	4643      	mov	r3, r8
 801066a:	463a      	mov	r2, r7
 801066c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8010670:	e884 0003 	stmia.w	r4, {r0, r1}
 8010674:	4629      	mov	r1, r5
 8010676:	4620      	mov	r0, r4
 8010678:	f7fe fc08 	bl	800ee8c <rcl_node_init>
 801067c:	b930      	cbnz	r0, 801068c <rclc_node_init_with_options+0x68>
 801067e:	b007      	add	sp, #28
 8010680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010684:	200b      	movs	r0, #11
 8010686:	b007      	add	sp, #28
 8010688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801068c:	9003      	str	r0, [sp, #12]
 801068e:	f000 f933 	bl	80108f8 <rcutils_reset_error>
 8010692:	9803      	ldr	r0, [sp, #12]
 8010694:	b007      	add	sp, #28
 8010696:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801069a:	bf00      	nop

0801069c <rclc_publisher_init_default>:
 801069c:	2b00      	cmp	r3, #0
 801069e:	bf18      	it	ne
 80106a0:	2a00      	cmpne	r2, #0
 80106a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106a6:	4616      	mov	r6, r2
 80106a8:	bf0c      	ite	eq
 80106aa:	2201      	moveq	r2, #1
 80106ac:	2200      	movne	r2, #0
 80106ae:	b0a0      	sub	sp, #128	; 0x80
 80106b0:	2900      	cmp	r1, #0
 80106b2:	bf08      	it	eq
 80106b4:	f042 0201 	orreq.w	r2, r2, #1
 80106b8:	bb1a      	cbnz	r2, 8010702 <rclc_publisher_init_default+0x66>
 80106ba:	4604      	mov	r4, r0
 80106bc:	b308      	cbz	r0, 8010702 <rclc_publisher_init_default+0x66>
 80106be:	f10d 0810 	add.w	r8, sp, #16
 80106c2:	461f      	mov	r7, r3
 80106c4:	460d      	mov	r5, r1
 80106c6:	f7fe fd81 	bl	800f1cc <rcl_get_zero_initialized_publisher>
 80106ca:	6020      	str	r0, [r4, #0]
 80106cc:	4640      	mov	r0, r8
 80106ce:	f7fe fe1d 	bl	800f30c <rcl_publisher_get_default_options>
 80106d2:	2250      	movs	r2, #80	; 0x50
 80106d4:	490d      	ldr	r1, [pc, #52]	; (801070c <rclc_publisher_init_default+0x70>)
 80106d6:	4640      	mov	r0, r8
 80106d8:	f00b f9b1 	bl	801ba3e <memcpy>
 80106dc:	463b      	mov	r3, r7
 80106de:	4632      	mov	r2, r6
 80106e0:	4629      	mov	r1, r5
 80106e2:	4620      	mov	r0, r4
 80106e4:	f8cd 8000 	str.w	r8, [sp]
 80106e8:	f7fe fd76 	bl	800f1d8 <rcl_publisher_init>
 80106ec:	b910      	cbnz	r0, 80106f4 <rclc_publisher_init_default+0x58>
 80106ee:	b020      	add	sp, #128	; 0x80
 80106f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106f4:	9003      	str	r0, [sp, #12]
 80106f6:	f000 f8ff 	bl	80108f8 <rcutils_reset_error>
 80106fa:	9803      	ldr	r0, [sp, #12]
 80106fc:	b020      	add	sp, #128	; 0x80
 80106fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010702:	200b      	movs	r0, #11
 8010704:	b020      	add	sp, #128	; 0x80
 8010706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801070a:	bf00      	nop
 801070c:	0801cf48 	.word	0x0801cf48

08010710 <rclc_service_init_default>:
 8010710:	2b00      	cmp	r3, #0
 8010712:	bf18      	it	ne
 8010714:	2a00      	cmpne	r2, #0
 8010716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801071a:	4616      	mov	r6, r2
 801071c:	bf0c      	ite	eq
 801071e:	2201      	moveq	r2, #1
 8010720:	2200      	movne	r2, #0
 8010722:	b09e      	sub	sp, #120	; 0x78
 8010724:	2900      	cmp	r1, #0
 8010726:	bf08      	it	eq
 8010728:	f042 0201 	orreq.w	r2, r2, #1
 801072c:	bb1a      	cbnz	r2, 8010776 <rclc_service_init_default+0x66>
 801072e:	4604      	mov	r4, r0
 8010730:	b308      	cbz	r0, 8010776 <rclc_service_init_default+0x66>
 8010732:	f10d 0810 	add.w	r8, sp, #16
 8010736:	461f      	mov	r7, r3
 8010738:	460d      	mov	r5, r1
 801073a:	f7fe fe5b 	bl	800f3f4 <rcl_get_zero_initialized_service>
 801073e:	6020      	str	r0, [r4, #0]
 8010740:	4640      	mov	r0, r8
 8010742:	f7fe feef 	bl	800f524 <rcl_service_get_default_options>
 8010746:	2250      	movs	r2, #80	; 0x50
 8010748:	490d      	ldr	r1, [pc, #52]	; (8010780 <rclc_service_init_default+0x70>)
 801074a:	4640      	mov	r0, r8
 801074c:	f00b f977 	bl	801ba3e <memcpy>
 8010750:	463b      	mov	r3, r7
 8010752:	4632      	mov	r2, r6
 8010754:	4629      	mov	r1, r5
 8010756:	4620      	mov	r0, r4
 8010758:	f8cd 8000 	str.w	r8, [sp]
 801075c:	f7fe fe50 	bl	800f400 <rcl_service_init>
 8010760:	b910      	cbnz	r0, 8010768 <rclc_service_init_default+0x58>
 8010762:	b01e      	add	sp, #120	; 0x78
 8010764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010768:	9003      	str	r0, [sp, #12]
 801076a:	f000 f8c5 	bl	80108f8 <rcutils_reset_error>
 801076e:	9803      	ldr	r0, [sp, #12]
 8010770:	b01e      	add	sp, #120	; 0x78
 8010772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010776:	200b      	movs	r0, #11
 8010778:	b01e      	add	sp, #120	; 0x78
 801077a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801077e:	bf00      	nop
 8010780:	0801cf98 	.word	0x0801cf98

08010784 <rclc_subscription_init_default>:
 8010784:	2b00      	cmp	r3, #0
 8010786:	bf18      	it	ne
 8010788:	2a00      	cmpne	r2, #0
 801078a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801078e:	4616      	mov	r6, r2
 8010790:	bf0c      	ite	eq
 8010792:	2201      	moveq	r2, #1
 8010794:	2200      	movne	r2, #0
 8010796:	b0a0      	sub	sp, #128	; 0x80
 8010798:	2900      	cmp	r1, #0
 801079a:	bf08      	it	eq
 801079c:	f042 0201 	orreq.w	r2, r2, #1
 80107a0:	bb1a      	cbnz	r2, 80107ea <rclc_subscription_init_default+0x66>
 80107a2:	4604      	mov	r4, r0
 80107a4:	b308      	cbz	r0, 80107ea <rclc_subscription_init_default+0x66>
 80107a6:	f10d 0810 	add.w	r8, sp, #16
 80107aa:	461f      	mov	r7, r3
 80107ac:	460d      	mov	r5, r1
 80107ae:	f7fe ff45 	bl	800f63c <rcl_get_zero_initialized_subscription>
 80107b2:	6020      	str	r0, [r4, #0]
 80107b4:	4640      	mov	r0, r8
 80107b6:	f7fe fff5 	bl	800f7a4 <rcl_subscription_get_default_options>
 80107ba:	2250      	movs	r2, #80	; 0x50
 80107bc:	490d      	ldr	r1, [pc, #52]	; (80107f4 <rclc_subscription_init_default+0x70>)
 80107be:	4640      	mov	r0, r8
 80107c0:	f00b f93d 	bl	801ba3e <memcpy>
 80107c4:	463b      	mov	r3, r7
 80107c6:	4632      	mov	r2, r6
 80107c8:	4629      	mov	r1, r5
 80107ca:	4620      	mov	r0, r4
 80107cc:	f8cd 8000 	str.w	r8, [sp]
 80107d0:	f7fe ff3a 	bl	800f648 <rcl_subscription_init>
 80107d4:	b910      	cbnz	r0, 80107dc <rclc_subscription_init_default+0x58>
 80107d6:	b020      	add	sp, #128	; 0x80
 80107d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107dc:	9003      	str	r0, [sp, #12]
 80107de:	f000 f88b 	bl	80108f8 <rcutils_reset_error>
 80107e2:	9803      	ldr	r0, [sp, #12]
 80107e4:	b020      	add	sp, #128	; 0x80
 80107e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107ea:	200b      	movs	r0, #11
 80107ec:	b020      	add	sp, #128	; 0x80
 80107ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107f2:	bf00      	nop
 80107f4:	0801cfe8 	.word	0x0801cfe8

080107f8 <__default_zero_allocate>:
 80107f8:	f00a ba5c 	b.w	801acb4 <calloc>

080107fc <__default_reallocate>:
 80107fc:	f00a bbfa 	b.w	801aff4 <realloc>

08010800 <__default_deallocate>:
 8010800:	f00a bad8 	b.w	801adb4 <free>

08010804 <__default_allocate>:
 8010804:	f00a bace 	b.w	801ada4 <malloc>

08010808 <rcutils_get_zero_initialized_allocator>:
 8010808:	b510      	push	{r4, lr}
 801080a:	4c05      	ldr	r4, [pc, #20]	; (8010820 <rcutils_get_zero_initialized_allocator+0x18>)
 801080c:	4686      	mov	lr, r0
 801080e:	4684      	mov	ip, r0
 8010810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010812:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010816:	6823      	ldr	r3, [r4, #0]
 8010818:	4670      	mov	r0, lr
 801081a:	f8cc 3000 	str.w	r3, [ip]
 801081e:	bd10      	pop	{r4, pc}
 8010820:	0801d038 	.word	0x0801d038

08010824 <rcutils_set_default_allocator>:
 8010824:	b1a8      	cbz	r0, 8010852 <rcutils_set_default_allocator+0x2e>
 8010826:	6802      	ldr	r2, [r0, #0]
 8010828:	b1a2      	cbz	r2, 8010854 <rcutils_set_default_allocator+0x30>
 801082a:	6841      	ldr	r1, [r0, #4]
 801082c:	b1a1      	cbz	r1, 8010858 <rcutils_set_default_allocator+0x34>
 801082e:	b410      	push	{r4}
 8010830:	68c4      	ldr	r4, [r0, #12]
 8010832:	b164      	cbz	r4, 801084e <rcutils_set_default_allocator+0x2a>
 8010834:	6880      	ldr	r0, [r0, #8]
 8010836:	b138      	cbz	r0, 8010848 <rcutils_set_default_allocator+0x24>
 8010838:	4b08      	ldr	r3, [pc, #32]	; (801085c <rcutils_set_default_allocator+0x38>)
 801083a:	601a      	str	r2, [r3, #0]
 801083c:	2200      	movs	r2, #0
 801083e:	e9c3 1001 	strd	r1, r0, [r3, #4]
 8010842:	2001      	movs	r0, #1
 8010844:	e9c3 4203 	strd	r4, r2, [r3, #12]
 8010848:	f85d 4b04 	ldr.w	r4, [sp], #4
 801084c:	4770      	bx	lr
 801084e:	4620      	mov	r0, r4
 8010850:	e7fa      	b.n	8010848 <rcutils_set_default_allocator+0x24>
 8010852:	4770      	bx	lr
 8010854:	4610      	mov	r0, r2
 8010856:	4770      	bx	lr
 8010858:	4608      	mov	r0, r1
 801085a:	4770      	bx	lr
 801085c:	200002e4 	.word	0x200002e4

08010860 <rcutils_get_default_allocator>:
 8010860:	b510      	push	{r4, lr}
 8010862:	4c05      	ldr	r4, [pc, #20]	; (8010878 <rcutils_get_default_allocator+0x18>)
 8010864:	4686      	mov	lr, r0
 8010866:	4684      	mov	ip, r0
 8010868:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801086a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801086e:	6823      	ldr	r3, [r4, #0]
 8010870:	4670      	mov	r0, lr
 8010872:	f8cc 3000 	str.w	r3, [ip]
 8010876:	bd10      	pop	{r4, pc}
 8010878:	200002e4 	.word	0x200002e4

0801087c <rcutils_allocator_is_valid>:
 801087c:	b158      	cbz	r0, 8010896 <rcutils_allocator_is_valid+0x1a>
 801087e:	6803      	ldr	r3, [r0, #0]
 8010880:	b143      	cbz	r3, 8010894 <rcutils_allocator_is_valid+0x18>
 8010882:	6843      	ldr	r3, [r0, #4]
 8010884:	b133      	cbz	r3, 8010894 <rcutils_allocator_is_valid+0x18>
 8010886:	68c3      	ldr	r3, [r0, #12]
 8010888:	b123      	cbz	r3, 8010894 <rcutils_allocator_is_valid+0x18>
 801088a:	6880      	ldr	r0, [r0, #8]
 801088c:	3800      	subs	r0, #0
 801088e:	bf18      	it	ne
 8010890:	2001      	movne	r0, #1
 8010892:	4770      	bx	lr
 8010894:	4618      	mov	r0, r3
 8010896:	4770      	bx	lr

08010898 <rcutils_get_env>:
 8010898:	b168      	cbz	r0, 80108b6 <rcutils_get_env+0x1e>
 801089a:	b510      	push	{r4, lr}
 801089c:	460c      	mov	r4, r1
 801089e:	b129      	cbz	r1, 80108ac <rcutils_get_env+0x14>
 80108a0:	f00a fa38 	bl	801ad14 <getenv>
 80108a4:	b120      	cbz	r0, 80108b0 <rcutils_get_env+0x18>
 80108a6:	6020      	str	r0, [r4, #0]
 80108a8:	2000      	movs	r0, #0
 80108aa:	bd10      	pop	{r4, pc}
 80108ac:	4803      	ldr	r0, [pc, #12]	; (80108bc <rcutils_get_env+0x24>)
 80108ae:	bd10      	pop	{r4, pc}
 80108b0:	4b03      	ldr	r3, [pc, #12]	; (80108c0 <rcutils_get_env+0x28>)
 80108b2:	6023      	str	r3, [r4, #0]
 80108b4:	bd10      	pop	{r4, pc}
 80108b6:	4803      	ldr	r0, [pc, #12]	; (80108c4 <rcutils_get_env+0x2c>)
 80108b8:	4770      	bx	lr
 80108ba:	bf00      	nop
 80108bc:	0801d068 	.word	0x0801d068
 80108c0:	0801d420 	.word	0x0801d420
 80108c4:	0801d04c 	.word	0x0801d04c

080108c8 <rcutils_get_error_string>:
 80108c8:	4b06      	ldr	r3, [pc, #24]	; (80108e4 <rcutils_get_error_string+0x1c>)
 80108ca:	781b      	ldrb	r3, [r3, #0]
 80108cc:	b13b      	cbz	r3, 80108de <rcutils_get_error_string+0x16>
 80108ce:	4b06      	ldr	r3, [pc, #24]	; (80108e8 <rcutils_get_error_string+0x20>)
 80108d0:	781a      	ldrb	r2, [r3, #0]
 80108d2:	b90a      	cbnz	r2, 80108d8 <rcutils_get_error_string+0x10>
 80108d4:	2201      	movs	r2, #1
 80108d6:	701a      	strb	r2, [r3, #0]
 80108d8:	4b04      	ldr	r3, [pc, #16]	; (80108ec <rcutils_get_error_string+0x24>)
 80108da:	7818      	ldrb	r0, [r3, #0]
 80108dc:	4770      	bx	lr
 80108de:	4b04      	ldr	r3, [pc, #16]	; (80108f0 <rcutils_get_error_string+0x28>)
 80108e0:	7818      	ldrb	r0, [r3, #0]
 80108e2:	4770      	bx	lr
 80108e4:	2000c950 	.word	0x2000c950
 80108e8:	2000c969 	.word	0x2000c969
 80108ec:	2000c968 	.word	0x2000c968
 80108f0:	0801ca14 	.word	0x0801ca14
 80108f4:	00000000 	.word	0x00000000

080108f8 <rcutils_reset_error>:
 80108f8:	ed9f 7b07 	vldr	d7, [pc, #28]	; 8010918 <rcutils_reset_error+0x20>
 80108fc:	2300      	movs	r3, #0
 80108fe:	4a08      	ldr	r2, [pc, #32]	; (8010920 <rcutils_reset_error+0x28>)
 8010900:	4808      	ldr	r0, [pc, #32]	; (8010924 <rcutils_reset_error+0x2c>)
 8010902:	8013      	strh	r3, [r2, #0]
 8010904:	4908      	ldr	r1, [pc, #32]	; (8010928 <rcutils_reset_error+0x30>)
 8010906:	7003      	strb	r3, [r0, #0]
 8010908:	700b      	strb	r3, [r1, #0]
 801090a:	ed82 7b02 	vstr	d7, [r2, #8]
 801090e:	4a07      	ldr	r2, [pc, #28]	; (801092c <rcutils_reset_error+0x34>)
 8010910:	7013      	strb	r3, [r2, #0]
 8010912:	4770      	bx	lr
 8010914:	f3af 8000 	nop.w
	...
 8010920:	2000c958 	.word	0x2000c958
 8010924:	2000c969 	.word	0x2000c969
 8010928:	2000c968 	.word	0x2000c968
 801092c:	2000c950 	.word	0x2000c950

08010930 <rcutils_format_string_limit>:
 8010930:	b40f      	push	{r0, r1, r2, r3}
 8010932:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010934:	b083      	sub	sp, #12
 8010936:	ac08      	add	r4, sp, #32
 8010938:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801093a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801093e:	b326      	cbz	r6, 801098a <rcutils_format_string_limit+0x5a>
 8010940:	a808      	add	r0, sp, #32
 8010942:	f7ff ff9b 	bl	801087c <rcutils_allocator_is_valid>
 8010946:	b300      	cbz	r0, 801098a <rcutils_format_string_limit+0x5a>
 8010948:	2100      	movs	r1, #0
 801094a:	ab0f      	add	r3, sp, #60	; 0x3c
 801094c:	4632      	mov	r2, r6
 801094e:	4608      	mov	r0, r1
 8010950:	e9cd 3300 	strd	r3, r3, [sp]
 8010954:	f000 f906 	bl	8010b64 <rcutils_vsnprintf>
 8010958:	1c43      	adds	r3, r0, #1
 801095a:	4605      	mov	r5, r0
 801095c:	d015      	beq.n	801098a <rcutils_format_string_limit+0x5a>
 801095e:	1c47      	adds	r7, r0, #1
 8010960:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010962:	429f      	cmp	r7, r3
 8010964:	d901      	bls.n	801096a <rcutils_format_string_limit+0x3a>
 8010966:	1e5d      	subs	r5, r3, #1
 8010968:	461f      	mov	r7, r3
 801096a:	9b08      	ldr	r3, [sp, #32]
 801096c:	4638      	mov	r0, r7
 801096e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010970:	4798      	blx	r3
 8010972:	4604      	mov	r4, r0
 8010974:	b148      	cbz	r0, 801098a <rcutils_format_string_limit+0x5a>
 8010976:	4632      	mov	r2, r6
 8010978:	4639      	mov	r1, r7
 801097a:	9b01      	ldr	r3, [sp, #4]
 801097c:	f000 f8f2 	bl	8010b64 <rcutils_vsnprintf>
 8010980:	2800      	cmp	r0, #0
 8010982:	db09      	blt.n	8010998 <rcutils_format_string_limit+0x68>
 8010984:	2300      	movs	r3, #0
 8010986:	5563      	strb	r3, [r4, r5]
 8010988:	e000      	b.n	801098c <rcutils_format_string_limit+0x5c>
 801098a:	2400      	movs	r4, #0
 801098c:	4620      	mov	r0, r4
 801098e:	b003      	add	sp, #12
 8010990:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010994:	b004      	add	sp, #16
 8010996:	4770      	bx	lr
 8010998:	4620      	mov	r0, r4
 801099a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801099e:	2400      	movs	r4, #0
 80109a0:	4798      	blx	r3
 80109a2:	e7f3      	b.n	801098c <rcutils_format_string_limit+0x5c>

080109a4 <rcutils_repl_str>:
 80109a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a8:	ed2d 8b02 	vpush	{d8}
 80109ac:	b087      	sub	sp, #28
 80109ae:	2600      	movs	r6, #0
 80109b0:	4680      	mov	r8, r0
 80109b2:	468a      	mov	sl, r1
 80109b4:	9000      	str	r0, [sp, #0]
 80109b6:	4608      	mov	r0, r1
 80109b8:	ee08 2a10 	vmov	s16, r2
 80109bc:	4699      	mov	r9, r3
 80109be:	2510      	movs	r5, #16
 80109c0:	f7ef fc48 	bl	8000254 <strlen>
 80109c4:	4637      	mov	r7, r6
 80109c6:	46b3      	mov	fp, r6
 80109c8:	9001      	str	r0, [sp, #4]
 80109ca:	e01e      	b.n	8010a0a <rcutils_repl_str+0x66>
 80109cc:	f10b 0b01 	add.w	fp, fp, #1
 80109d0:	9b01      	ldr	r3, [sp, #4]
 80109d2:	455e      	cmp	r6, fp
 80109d4:	eb04 0803 	add.w	r8, r4, r3
 80109d8:	d211      	bcs.n	80109fe <rcutils_repl_str+0x5a>
 80109da:	442e      	add	r6, r5
 80109dc:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80109e0:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80109e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80109e8:	00b1      	lsls	r1, r6, #2
 80109ea:	4798      	blx	r3
 80109ec:	2800      	cmp	r0, #0
 80109ee:	f000 8088 	beq.w	8010b02 <rcutils_repl_str+0x15e>
 80109f2:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80109f6:	4607      	mov	r7, r0
 80109f8:	bf28      	it	cs
 80109fa:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 80109fe:	9a00      	ldr	r2, [sp, #0]
 8010a00:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8010a04:	1aa4      	subs	r4, r4, r2
 8010a06:	f843 4c04 	str.w	r4, [r3, #-4]
 8010a0a:	4651      	mov	r1, sl
 8010a0c:	4640      	mov	r0, r8
 8010a0e:	f00a ff74 	bl	801b8fa <strstr>
 8010a12:	4604      	mov	r4, r0
 8010a14:	4638      	mov	r0, r7
 8010a16:	2c00      	cmp	r4, #0
 8010a18:	d1d8      	bne.n	80109cc <rcutils_repl_str+0x28>
 8010a1a:	4640      	mov	r0, r8
 8010a1c:	f7ef fc1a 	bl	8000254 <strlen>
 8010a20:	9b00      	ldr	r3, [sp, #0]
 8010a22:	eba8 0803 	sub.w	r8, r8, r3
 8010a26:	eb08 0400 	add.w	r4, r8, r0
 8010a2a:	9402      	str	r4, [sp, #8]
 8010a2c:	f1bb 0f00 	cmp.w	fp, #0
 8010a30:	d045      	beq.n	8010abe <rcutils_repl_str+0x11a>
 8010a32:	ee18 0a10 	vmov	r0, s16
 8010a36:	f7ef fc0d 	bl	8000254 <strlen>
 8010a3a:	9a01      	ldr	r2, [sp, #4]
 8010a3c:	4606      	mov	r6, r0
 8010a3e:	f8d9 3000 	ldr.w	r3, [r9]
 8010a42:	1a82      	subs	r2, r0, r2
 8010a44:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010a48:	fb0b 4202 	mla	r2, fp, r2, r4
 8010a4c:	1c50      	adds	r0, r2, #1
 8010a4e:	9205      	str	r2, [sp, #20]
 8010a50:	4798      	blx	r3
 8010a52:	4682      	mov	sl, r0
 8010a54:	2800      	cmp	r0, #0
 8010a56:	d054      	beq.n	8010b02 <rcutils_repl_str+0x15e>
 8010a58:	683a      	ldr	r2, [r7, #0]
 8010a5a:	463d      	mov	r5, r7
 8010a5c:	9900      	ldr	r1, [sp, #0]
 8010a5e:	2401      	movs	r4, #1
 8010a60:	f00a ffed 	bl	801ba3e <memcpy>
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 8010a6a:	eb0a 0803 	add.w	r8, sl, r3
 8010a6e:	ee18 7a10 	vmov	r7, s16
 8010a72:	f8dd a000 	ldr.w	sl, [sp]
 8010a76:	f8cd 9000 	str.w	r9, [sp]
 8010a7a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010a7e:	4632      	mov	r2, r6
 8010a80:	4639      	mov	r1, r7
 8010a82:	4640      	mov	r0, r8
 8010a84:	44b0      	add	r8, r6
 8010a86:	f00a ffda 	bl	801ba3e <memcpy>
 8010a8a:	f855 2b04 	ldr.w	r2, [r5], #4
 8010a8e:	45a3      	cmp	fp, r4
 8010a90:	444a      	add	r2, r9
 8010a92:	eb0a 0102 	add.w	r1, sl, r2
 8010a96:	d02a      	beq.n	8010aee <rcutils_repl_str+0x14a>
 8010a98:	6828      	ldr	r0, [r5, #0]
 8010a9a:	1a82      	subs	r2, r0, r2
 8010a9c:	4640      	mov	r0, r8
 8010a9e:	4490      	add	r8, r2
 8010aa0:	f00a ffcd 	bl	801ba3e <memcpy>
 8010aa4:	1c62      	adds	r2, r4, #1
 8010aa6:	45a3      	cmp	fp, r4
 8010aa8:	4614      	mov	r4, r2
 8010aaa:	d8e8      	bhi.n	8010a7e <rcutils_repl_str+0xda>
 8010aac:	f8dd 9000 	ldr.w	r9, [sp]
 8010ab0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	9a05      	ldr	r2, [sp, #20]
 8010ab8:	f80a 3002 	strb.w	r3, [sl, r2]
 8010abc:	e00b      	b.n	8010ad6 <rcutils_repl_str+0x132>
 8010abe:	4620      	mov	r0, r4
 8010ac0:	f8d9 3000 	ldr.w	r3, [r9]
 8010ac4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010ac8:	3001      	adds	r0, #1
 8010aca:	4798      	blx	r3
 8010acc:	4682      	mov	sl, r0
 8010ace:	b110      	cbz	r0, 8010ad6 <rcutils_repl_str+0x132>
 8010ad0:	9900      	ldr	r1, [sp, #0]
 8010ad2:	f00a ffac 	bl	801ba2e <strcpy>
 8010ad6:	4638      	mov	r0, r7
 8010ad8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010adc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8010ae0:	4798      	blx	r3
 8010ae2:	4650      	mov	r0, sl
 8010ae4:	b007      	add	sp, #28
 8010ae6:	ecbd 8b02 	vpop	{d8}
 8010aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010aee:	9b02      	ldr	r3, [sp, #8]
 8010af0:	4640      	mov	r0, r8
 8010af2:	f8dd 9000 	ldr.w	r9, [sp]
 8010af6:	1a9a      	subs	r2, r3, r2
 8010af8:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 8010afc:	f00a ff9f 	bl	801ba3e <memcpy>
 8010b00:	e7d8      	b.n	8010ab4 <rcutils_repl_str+0x110>
 8010b02:	f04f 0a00 	mov.w	sl, #0
 8010b06:	e7e6      	b.n	8010ad6 <rcutils_repl_str+0x132>

08010b08 <rcutils_snprintf>:
 8010b08:	b40c      	push	{r2, r3}
 8010b0a:	b530      	push	{r4, r5, lr}
 8010b0c:	b083      	sub	sp, #12
 8010b0e:	ab06      	add	r3, sp, #24
 8010b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b14:	9301      	str	r3, [sp, #4]
 8010b16:	b1e2      	cbz	r2, 8010b52 <rcutils_snprintf+0x4a>
 8010b18:	fab0 f480 	clz	r4, r0
 8010b1c:	fab1 f581 	clz	r5, r1
 8010b20:	ea50 0c01 	orrs.w	ip, r0, r1
 8010b24:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010b28:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010b2c:	d008      	beq.n	8010b40 <rcutils_snprintf+0x38>
 8010b2e:	b984      	cbnz	r4, 8010b52 <rcutils_snprintf+0x4a>
 8010b30:	b97d      	cbnz	r5, 8010b52 <rcutils_snprintf+0x4a>
 8010b32:	f00a fded 	bl	801b710 <vsniprintf>
 8010b36:	b003      	add	sp, #12
 8010b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b3c:	b002      	add	sp, #8
 8010b3e:	4770      	bx	lr
 8010b40:	4661      	mov	r1, ip
 8010b42:	4660      	mov	r0, ip
 8010b44:	f00a fde4 	bl	801b710 <vsniprintf>
 8010b48:	b003      	add	sp, #12
 8010b4a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b4e:	b002      	add	sp, #8
 8010b50:	4770      	bx	lr
 8010b52:	f00a ff3f 	bl	801b9d4 <__errno>
 8010b56:	2216      	movs	r2, #22
 8010b58:	4603      	mov	r3, r0
 8010b5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010b5e:	601a      	str	r2, [r3, #0]
 8010b60:	e7e9      	b.n	8010b36 <rcutils_snprintf+0x2e>
 8010b62:	bf00      	nop

08010b64 <rcutils_vsnprintf>:
 8010b64:	b570      	push	{r4, r5, r6, lr}
 8010b66:	b1b2      	cbz	r2, 8010b96 <rcutils_vsnprintf+0x32>
 8010b68:	fab0 f480 	clz	r4, r0
 8010b6c:	fab1 f581 	clz	r5, r1
 8010b70:	ea50 0c01 	orrs.w	ip, r0, r1
 8010b74:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8010b78:	ea4f 1555 	mov.w	r5, r5, lsr #5
 8010b7c:	d005      	beq.n	8010b8a <rcutils_vsnprintf+0x26>
 8010b7e:	b954      	cbnz	r4, 8010b96 <rcutils_vsnprintf+0x32>
 8010b80:	b94d      	cbnz	r5, 8010b96 <rcutils_vsnprintf+0x32>
 8010b82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b86:	f00a bdc3 	b.w	801b710 <vsniprintf>
 8010b8a:	4661      	mov	r1, ip
 8010b8c:	4660      	mov	r0, ip
 8010b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010b92:	f00a bdbd 	b.w	801b710 <vsniprintf>
 8010b96:	f00a ff1d 	bl	801b9d4 <__errno>
 8010b9a:	2316      	movs	r3, #22
 8010b9c:	6003      	str	r3, [r0, #0]
 8010b9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ba2:	bd70      	pop	{r4, r5, r6, pc}

08010ba4 <rcutils_strdup>:
 8010ba4:	b084      	sub	sp, #16
 8010ba6:	b570      	push	{r4, r5, r6, lr}
 8010ba8:	b082      	sub	sp, #8
 8010baa:	4605      	mov	r5, r0
 8010bac:	ac07      	add	r4, sp, #28
 8010bae:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8010bb2:	b1b0      	cbz	r0, 8010be2 <rcutils_strdup+0x3e>
 8010bb4:	f7ef fb4e 	bl	8000254 <strlen>
 8010bb8:	1c42      	adds	r2, r0, #1
 8010bba:	9b07      	ldr	r3, [sp, #28]
 8010bbc:	4606      	mov	r6, r0
 8010bbe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8010bc0:	4610      	mov	r0, r2
 8010bc2:	9201      	str	r2, [sp, #4]
 8010bc4:	4798      	blx	r3
 8010bc6:	4604      	mov	r4, r0
 8010bc8:	b128      	cbz	r0, 8010bd6 <rcutils_strdup+0x32>
 8010bca:	9a01      	ldr	r2, [sp, #4]
 8010bcc:	4629      	mov	r1, r5
 8010bce:	f00a ff36 	bl	801ba3e <memcpy>
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	55a3      	strb	r3, [r4, r6]
 8010bd6:	4620      	mov	r0, r4
 8010bd8:	b002      	add	sp, #8
 8010bda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bde:	b004      	add	sp, #16
 8010be0:	4770      	bx	lr
 8010be2:	4604      	mov	r4, r0
 8010be4:	e7f7      	b.n	8010bd6 <rcutils_strdup+0x32>
 8010be6:	bf00      	nop

08010be8 <rcutils_strndup>:
 8010be8:	b082      	sub	sp, #8
 8010bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bec:	ac06      	add	r4, sp, #24
 8010bee:	4605      	mov	r5, r0
 8010bf0:	e884 000c 	stmia.w	r4, {r2, r3}
 8010bf4:	b188      	cbz	r0, 8010c1a <rcutils_strndup+0x32>
 8010bf6:	1c4f      	adds	r7, r1, #1
 8010bf8:	460e      	mov	r6, r1
 8010bfa:	990a      	ldr	r1, [sp, #40]	; 0x28
 8010bfc:	4638      	mov	r0, r7
 8010bfe:	4790      	blx	r2
 8010c00:	4604      	mov	r4, r0
 8010c02:	b128      	cbz	r0, 8010c10 <rcutils_strndup+0x28>
 8010c04:	463a      	mov	r2, r7
 8010c06:	4629      	mov	r1, r5
 8010c08:	f00a ff19 	bl	801ba3e <memcpy>
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	55a3      	strb	r3, [r4, r6]
 8010c10:	4620      	mov	r0, r4
 8010c12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010c16:	b002      	add	sp, #8
 8010c18:	4770      	bx	lr
 8010c1a:	4604      	mov	r4, r0
 8010c1c:	e7f8      	b.n	8010c10 <rcutils_strndup+0x28>
 8010c1e:	bf00      	nop

08010c20 <rcutils_system_time_now>:
 8010c20:	b300      	cbz	r0, 8010c64 <rcutils_system_time_now+0x44>
 8010c22:	b570      	push	{r4, r5, r6, lr}
 8010c24:	b084      	sub	sp, #16
 8010c26:	4604      	mov	r4, r0
 8010c28:	2001      	movs	r0, #1
 8010c2a:	4669      	mov	r1, sp
 8010c2c:	f7f0 fdb4 	bl	8001798 <clock_gettime>
 8010c30:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010c34:	2900      	cmp	r1, #0
 8010c36:	db12      	blt.n	8010c5e <rcutils_system_time_now+0x3e>
 8010c38:	ea53 0201 	orrs.w	r2, r3, r1
 8010c3c:	9d02      	ldr	r5, [sp, #8]
 8010c3e:	d101      	bne.n	8010c44 <rcutils_system_time_now+0x24>
 8010c40:	2d00      	cmp	r5, #0
 8010c42:	db0c      	blt.n	8010c5e <rcutils_system_time_now+0x3e>
 8010c44:	4e08      	ldr	r6, [pc, #32]	; (8010c68 <rcutils_system_time_now+0x48>)
 8010c46:	2000      	movs	r0, #0
 8010c48:	fba3 3206 	umull	r3, r2, r3, r6
 8010c4c:	195b      	adds	r3, r3, r5
 8010c4e:	fb06 2201 	mla	r2, r6, r1, r2
 8010c52:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010c56:	e9c4 3200 	strd	r3, r2, [r4]
 8010c5a:	b004      	add	sp, #16
 8010c5c:	bd70      	pop	{r4, r5, r6, pc}
 8010c5e:	2002      	movs	r0, #2
 8010c60:	b004      	add	sp, #16
 8010c62:	bd70      	pop	{r4, r5, r6, pc}
 8010c64:	200b      	movs	r0, #11
 8010c66:	4770      	bx	lr
 8010c68:	3b9aca00 	.word	0x3b9aca00

08010c6c <rcutils_steady_time_now>:
 8010c6c:	b300      	cbz	r0, 8010cb0 <rcutils_steady_time_now+0x44>
 8010c6e:	b570      	push	{r4, r5, r6, lr}
 8010c70:	b084      	sub	sp, #16
 8010c72:	4604      	mov	r4, r0
 8010c74:	2000      	movs	r0, #0
 8010c76:	4669      	mov	r1, sp
 8010c78:	f7f0 fd8e 	bl	8001798 <clock_gettime>
 8010c7c:	e9dd 3100 	ldrd	r3, r1, [sp]
 8010c80:	2900      	cmp	r1, #0
 8010c82:	db12      	blt.n	8010caa <rcutils_steady_time_now+0x3e>
 8010c84:	ea53 0201 	orrs.w	r2, r3, r1
 8010c88:	9d02      	ldr	r5, [sp, #8]
 8010c8a:	d101      	bne.n	8010c90 <rcutils_steady_time_now+0x24>
 8010c8c:	2d00      	cmp	r5, #0
 8010c8e:	db0c      	blt.n	8010caa <rcutils_steady_time_now+0x3e>
 8010c90:	4e08      	ldr	r6, [pc, #32]	; (8010cb4 <rcutils_steady_time_now+0x48>)
 8010c92:	2000      	movs	r0, #0
 8010c94:	fba3 3206 	umull	r3, r2, r3, r6
 8010c98:	195b      	adds	r3, r3, r5
 8010c9a:	fb06 2201 	mla	r2, r6, r1, r2
 8010c9e:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 8010ca2:	e9c4 3200 	strd	r3, r2, [r4]
 8010ca6:	b004      	add	sp, #16
 8010ca8:	bd70      	pop	{r4, r5, r6, pc}
 8010caa:	2002      	movs	r0, #2
 8010cac:	b004      	add	sp, #16
 8010cae:	bd70      	pop	{r4, r5, r6, pc}
 8010cb0:	200b      	movs	r0, #11
 8010cb2:	4770      	bx	lr
 8010cb4:	3b9aca00 	.word	0x3b9aca00

08010cb8 <rmw_get_zero_initialized_init_options>:
 8010cb8:	b510      	push	{r4, lr}
 8010cba:	4604      	mov	r4, r0
 8010cbc:	2238      	movs	r2, #56	; 0x38
 8010cbe:	2100      	movs	r1, #0
 8010cc0:	f00a fdf4 	bl	801b8ac <memset>
 8010cc4:	f104 0010 	add.w	r0, r4, #16
 8010cc8:	f000 f80a 	bl	8010ce0 <rmw_get_default_security_options>
 8010ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cd0:	4620      	mov	r0, r4
 8010cd2:	60e3      	str	r3, [r4, #12]
 8010cd4:	bd10      	pop	{r4, pc}
 8010cd6:	bf00      	nop

08010cd8 <rmw_get_default_publisher_options>:
 8010cd8:	2200      	movs	r2, #0
 8010cda:	6002      	str	r2, [r0, #0]
 8010cdc:	7102      	strb	r2, [r0, #4]
 8010cde:	4770      	bx	lr

08010ce0 <rmw_get_default_security_options>:
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	7002      	strb	r2, [r0, #0]
 8010ce4:	6042      	str	r2, [r0, #4]
 8010ce6:	4770      	bx	lr

08010ce8 <rmw_subscription_content_filter_options_fini>:
 8010ce8:	b1b0      	cbz	r0, 8010d18 <rmw_subscription_content_filter_options_fini+0x30>
 8010cea:	b538      	push	{r3, r4, r5, lr}
 8010cec:	4604      	mov	r4, r0
 8010cee:	4608      	mov	r0, r1
 8010cf0:	460d      	mov	r5, r1
 8010cf2:	f7ff fdc3 	bl	801087c <rcutils_allocator_is_valid>
 8010cf6:	b168      	cbz	r0, 8010d14 <rmw_subscription_content_filter_options_fini+0x2c>
 8010cf8:	6820      	ldr	r0, [r4, #0]
 8010cfa:	b120      	cbz	r0, 8010d06 <rmw_subscription_content_filter_options_fini+0x1e>
 8010cfc:	686b      	ldr	r3, [r5, #4]
 8010cfe:	6929      	ldr	r1, [r5, #16]
 8010d00:	4798      	blx	r3
 8010d02:	2300      	movs	r3, #0
 8010d04:	6023      	str	r3, [r4, #0]
 8010d06:	1d20      	adds	r0, r4, #4
 8010d08:	f008 f9ea 	bl	80190e0 <rcutils_string_array_fini>
 8010d0c:	3800      	subs	r0, #0
 8010d0e:	bf18      	it	ne
 8010d10:	2001      	movne	r0, #1
 8010d12:	bd38      	pop	{r3, r4, r5, pc}
 8010d14:	200b      	movs	r0, #11
 8010d16:	bd38      	pop	{r3, r4, r5, pc}
 8010d18:	200b      	movs	r0, #11
 8010d1a:	4770      	bx	lr

08010d1c <rmw_get_default_subscription_options>:
 8010d1c:	2200      	movs	r2, #0
 8010d1e:	e9c0 2200 	strd	r2, r2, [r0]
 8010d22:	6082      	str	r2, [r0, #8]
 8010d24:	4770      	bx	lr
 8010d26:	bf00      	nop

08010d28 <rmw_get_zero_initialized_message_info>:
 8010d28:	b510      	push	{r4, lr}
 8010d2a:	4604      	mov	r4, r0
 8010d2c:	2240      	movs	r2, #64	; 0x40
 8010d2e:	2100      	movs	r1, #0
 8010d30:	f00a fdbc 	bl	801b8ac <memset>
 8010d34:	4620      	mov	r0, r4
 8010d36:	bd10      	pop	{r4, pc}

08010d38 <rmw_validate_namespace_with_size>:
 8010d38:	2800      	cmp	r0, #0
 8010d3a:	d043      	beq.n	8010dc4 <rmw_validate_namespace_with_size+0x8c>
 8010d3c:	b570      	push	{r4, r5, r6, lr}
 8010d3e:	4614      	mov	r4, r2
 8010d40:	b0c2      	sub	sp, #264	; 0x108
 8010d42:	b32a      	cbz	r2, 8010d90 <rmw_validate_namespace_with_size+0x58>
 8010d44:	2901      	cmp	r1, #1
 8010d46:	460d      	mov	r5, r1
 8010d48:	461e      	mov	r6, r3
 8010d4a:	d102      	bne.n	8010d52 <rmw_validate_namespace_with_size+0x1a>
 8010d4c:	7803      	ldrb	r3, [r0, #0]
 8010d4e:	2b2f      	cmp	r3, #47	; 0x2f
 8010d50:	d012      	beq.n	8010d78 <rmw_validate_namespace_with_size+0x40>
 8010d52:	aa01      	add	r2, sp, #4
 8010d54:	4669      	mov	r1, sp
 8010d56:	f008 fbb7 	bl	80194c8 <rmw_validate_full_topic_name>
 8010d5a:	b980      	cbnz	r0, 8010d7e <rmw_validate_namespace_with_size+0x46>
 8010d5c:	9a00      	ldr	r2, [sp, #0]
 8010d5e:	b14a      	cbz	r2, 8010d74 <rmw_validate_namespace_with_size+0x3c>
 8010d60:	2a07      	cmp	r2, #7
 8010d62:	d007      	beq.n	8010d74 <rmw_validate_namespace_with_size+0x3c>
 8010d64:	1e53      	subs	r3, r2, #1
 8010d66:	2b05      	cmp	r3, #5
 8010d68:	d82e      	bhi.n	8010dc8 <rmw_validate_namespace_with_size+0x90>
 8010d6a:	e8df f003 	tbb	[pc, r3]
 8010d6e:	1f1c      	.short	0x1f1c
 8010d70:	14282522 	.word	0x14282522
 8010d74:	2df5      	cmp	r5, #245	; 0xf5
 8010d76:	d804      	bhi.n	8010d82 <rmw_validate_namespace_with_size+0x4a>
 8010d78:	2300      	movs	r3, #0
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	6023      	str	r3, [r4, #0]
 8010d7e:	b042      	add	sp, #264	; 0x108
 8010d80:	bd70      	pop	{r4, r5, r6, pc}
 8010d82:	2307      	movs	r3, #7
 8010d84:	6023      	str	r3, [r4, #0]
 8010d86:	2e00      	cmp	r6, #0
 8010d88:	d0f9      	beq.n	8010d7e <rmw_validate_namespace_with_size+0x46>
 8010d8a:	23f4      	movs	r3, #244	; 0xf4
 8010d8c:	6033      	str	r3, [r6, #0]
 8010d8e:	e7f6      	b.n	8010d7e <rmw_validate_namespace_with_size+0x46>
 8010d90:	200b      	movs	r0, #11
 8010d92:	b042      	add	sp, #264	; 0x108
 8010d94:	bd70      	pop	{r4, r5, r6, pc}
 8010d96:	2306      	movs	r3, #6
 8010d98:	6023      	str	r3, [r4, #0]
 8010d9a:	2e00      	cmp	r6, #0
 8010d9c:	d0ef      	beq.n	8010d7e <rmw_validate_namespace_with_size+0x46>
 8010d9e:	9b01      	ldr	r3, [sp, #4]
 8010da0:	6033      	str	r3, [r6, #0]
 8010da2:	b042      	add	sp, #264	; 0x108
 8010da4:	bd70      	pop	{r4, r5, r6, pc}
 8010da6:	2301      	movs	r3, #1
 8010da8:	6023      	str	r3, [r4, #0]
 8010daa:	e7f6      	b.n	8010d9a <rmw_validate_namespace_with_size+0x62>
 8010dac:	2302      	movs	r3, #2
 8010dae:	6023      	str	r3, [r4, #0]
 8010db0:	e7f3      	b.n	8010d9a <rmw_validate_namespace_with_size+0x62>
 8010db2:	2303      	movs	r3, #3
 8010db4:	6023      	str	r3, [r4, #0]
 8010db6:	e7f0      	b.n	8010d9a <rmw_validate_namespace_with_size+0x62>
 8010db8:	2304      	movs	r3, #4
 8010dba:	6023      	str	r3, [r4, #0]
 8010dbc:	e7ed      	b.n	8010d9a <rmw_validate_namespace_with_size+0x62>
 8010dbe:	2305      	movs	r3, #5
 8010dc0:	6023      	str	r3, [r4, #0]
 8010dc2:	e7ea      	b.n	8010d9a <rmw_validate_namespace_with_size+0x62>
 8010dc4:	200b      	movs	r0, #11
 8010dc6:	4770      	bx	lr
 8010dc8:	4613      	mov	r3, r2
 8010dca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8010dce:	4a03      	ldr	r2, [pc, #12]	; (8010ddc <rmw_validate_namespace_with_size+0xa4>)
 8010dd0:	a802      	add	r0, sp, #8
 8010dd2:	f7ff fe99 	bl	8010b08 <rcutils_snprintf>
 8010dd6:	2001      	movs	r0, #1
 8010dd8:	e7d1      	b.n	8010d7e <rmw_validate_namespace_with_size+0x46>
 8010dda:	bf00      	nop
 8010ddc:	0801d084 	.word	0x0801d084

08010de0 <rmw_validate_namespace>:
 8010de0:	b168      	cbz	r0, 8010dfe <rmw_validate_namespace+0x1e>
 8010de2:	b570      	push	{r4, r5, r6, lr}
 8010de4:	460d      	mov	r5, r1
 8010de6:	4616      	mov	r6, r2
 8010de8:	4604      	mov	r4, r0
 8010dea:	f7ef fa33 	bl	8000254 <strlen>
 8010dee:	4633      	mov	r3, r6
 8010df0:	4601      	mov	r1, r0
 8010df2:	462a      	mov	r2, r5
 8010df4:	4620      	mov	r0, r4
 8010df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010dfa:	f7ff bf9d 	b.w	8010d38 <rmw_validate_namespace_with_size>
 8010dfe:	200b      	movs	r0, #11
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop

08010e04 <rmw_namespace_validation_result_string>:
 8010e04:	2807      	cmp	r0, #7
 8010e06:	d803      	bhi.n	8010e10 <rmw_namespace_validation_result_string+0xc>
 8010e08:	4b02      	ldr	r3, [pc, #8]	; (8010e14 <rmw_namespace_validation_result_string+0x10>)
 8010e0a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8010e0e:	4770      	bx	lr
 8010e10:	4801      	ldr	r0, [pc, #4]	; (8010e18 <rmw_namespace_validation_result_string+0x14>)
 8010e12:	4770      	bx	lr
 8010e14:	0801d27c 	.word	0x0801d27c
 8010e18:	0801d0d4 	.word	0x0801d0d4

08010e1c <rmw_validate_node_name>:
 8010e1c:	2800      	cmp	r0, #0
 8010e1e:	d042      	beq.n	8010ea6 <rmw_validate_node_name+0x8a>
 8010e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e24:	460d      	mov	r5, r1
 8010e26:	2900      	cmp	r1, #0
 8010e28:	d03f      	beq.n	8010eaa <rmw_validate_node_name+0x8e>
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	4616      	mov	r6, r2
 8010e2e:	f7ef fa11 	bl	8000254 <strlen>
 8010e32:	b310      	cbz	r0, 8010e7a <rmw_validate_node_name+0x5e>
 8010e34:	1e63      	subs	r3, r4, #1
 8010e36:	f1c4 0101 	rsb	r1, r4, #1
 8010e3a:	eb03 0800 	add.w	r8, r3, r0
 8010e3e:	18cf      	adds	r7, r1, r3
 8010e40:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8010e44:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 8010e48:	f02e 0c20 	bic.w	ip, lr, #32
 8010e4c:	2a09      	cmp	r2, #9
 8010e4e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 8010e52:	d905      	bls.n	8010e60 <rmw_validate_node_name+0x44>
 8010e54:	f1bc 0f19 	cmp.w	ip, #25
 8010e58:	d902      	bls.n	8010e60 <rmw_validate_node_name+0x44>
 8010e5a:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 8010e5e:	d114      	bne.n	8010e8a <rmw_validate_node_name+0x6e>
 8010e60:	4598      	cmp	r8, r3
 8010e62:	d1ec      	bne.n	8010e3e <rmw_validate_node_name+0x22>
 8010e64:	7822      	ldrb	r2, [r4, #0]
 8010e66:	4b16      	ldr	r3, [pc, #88]	; (8010ec0 <rmw_validate_node_name+0xa4>)
 8010e68:	5cd3      	ldrb	r3, [r2, r3]
 8010e6a:	f013 0304 	ands.w	r3, r3, #4
 8010e6e:	d113      	bne.n	8010e98 <rmw_validate_node_name+0x7c>
 8010e70:	28ff      	cmp	r0, #255	; 0xff
 8010e72:	d81c      	bhi.n	8010eae <rmw_validate_node_name+0x92>
 8010e74:	4618      	mov	r0, r3
 8010e76:	602b      	str	r3, [r5, #0]
 8010e78:	e00c      	b.n	8010e94 <rmw_validate_node_name+0x78>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	602b      	str	r3, [r5, #0]
 8010e7e:	b17e      	cbz	r6, 8010ea0 <rmw_validate_node_name+0x84>
 8010e80:	2300      	movs	r3, #0
 8010e82:	4618      	mov	r0, r3
 8010e84:	6033      	str	r3, [r6, #0]
 8010e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e8a:	2302      	movs	r3, #2
 8010e8c:	602b      	str	r3, [r5, #0]
 8010e8e:	b13e      	cbz	r6, 8010ea0 <rmw_validate_node_name+0x84>
 8010e90:	2000      	movs	r0, #0
 8010e92:	6037      	str	r7, [r6, #0]
 8010e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e98:	2303      	movs	r3, #3
 8010e9a:	602b      	str	r3, [r5, #0]
 8010e9c:	2e00      	cmp	r6, #0
 8010e9e:	d1ef      	bne.n	8010e80 <rmw_validate_node_name+0x64>
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ea6:	200b      	movs	r0, #11
 8010ea8:	4770      	bx	lr
 8010eaa:	200b      	movs	r0, #11
 8010eac:	e7f2      	b.n	8010e94 <rmw_validate_node_name+0x78>
 8010eae:	2204      	movs	r2, #4
 8010eb0:	602a      	str	r2, [r5, #0]
 8010eb2:	2e00      	cmp	r6, #0
 8010eb4:	d0f4      	beq.n	8010ea0 <rmw_validate_node_name+0x84>
 8010eb6:	22fe      	movs	r2, #254	; 0xfe
 8010eb8:	4618      	mov	r0, r3
 8010eba:	6032      	str	r2, [r6, #0]
 8010ebc:	e7ea      	b.n	8010e94 <rmw_validate_node_name+0x78>
 8010ebe:	bf00      	nop
 8010ec0:	0801dab4 	.word	0x0801dab4

08010ec4 <rmw_node_name_validation_result_string>:
 8010ec4:	2804      	cmp	r0, #4
 8010ec6:	d803      	bhi.n	8010ed0 <rmw_node_name_validation_result_string+0xc>
 8010ec8:	4b02      	ldr	r3, [pc, #8]	; (8010ed4 <rmw_node_name_validation_result_string+0x10>)
 8010eca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8010ece:	4770      	bx	lr
 8010ed0:	4801      	ldr	r0, [pc, #4]	; (8010ed8 <rmw_node_name_validation_result_string+0x14>)
 8010ed2:	4770      	bx	lr
 8010ed4:	0801d388 	.word	0x0801d388
 8010ed8:	0801d29c 	.word	0x0801d29c

08010edc <rmw_uros_set_custom_transport>:
 8010edc:	b470      	push	{r4, r5, r6}
 8010ede:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 8010ee2:	b162      	cbz	r2, 8010efe <rmw_uros_set_custom_transport+0x22>
 8010ee4:	b15b      	cbz	r3, 8010efe <rmw_uros_set_custom_transport+0x22>
 8010ee6:	b155      	cbz	r5, 8010efe <rmw_uros_set_custom_transport+0x22>
 8010ee8:	b14e      	cbz	r6, 8010efe <rmw_uros_set_custom_transport+0x22>
 8010eea:	4c06      	ldr	r4, [pc, #24]	; (8010f04 <rmw_uros_set_custom_transport+0x28>)
 8010eec:	7020      	strb	r0, [r4, #0]
 8010eee:	2000      	movs	r0, #0
 8010ef0:	6166      	str	r6, [r4, #20]
 8010ef2:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8010ef6:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010efa:	bc70      	pop	{r4, r5, r6}
 8010efc:	4770      	bx	lr
 8010efe:	200b      	movs	r0, #11
 8010f00:	bc70      	pop	{r4, r5, r6}
 8010f02:	4770      	bx	lr
 8010f04:	2000c96c 	.word	0x2000c96c

08010f08 <rmw_init_options_init>:
 8010f08:	b084      	sub	sp, #16
 8010f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f0c:	b083      	sub	sp, #12
 8010f0e:	ad09      	add	r5, sp, #36	; 0x24
 8010f10:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 8010f14:	b130      	cbz	r0, 8010f24 <rmw_init_options_init+0x1c>
 8010f16:	4604      	mov	r4, r0
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f7ff fcaf 	bl	801087c <rcutils_allocator_is_valid>
 8010f1e:	b108      	cbz	r0, 8010f24 <rmw_init_options_init+0x1c>
 8010f20:	68a6      	ldr	r6, [r4, #8]
 8010f22:	b12e      	cbz	r6, 8010f30 <rmw_init_options_init+0x28>
 8010f24:	200b      	movs	r0, #11
 8010f26:	b003      	add	sp, #12
 8010f28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f2c:	b004      	add	sp, #16
 8010f2e:	4770      	bx	lr
 8010f30:	2200      	movs	r2, #0
 8010f32:	2300      	movs	r3, #0
 8010f34:	f104 0c20 	add.w	ip, r4, #32
 8010f38:	f8df e098 	ldr.w	lr, [pc, #152]	; 8010fd4 <rmw_init_options_init+0xcc>
 8010f3c:	466f      	mov	r7, sp
 8010f3e:	e9c4 2300 	strd	r2, r3, [r4]
 8010f42:	4b20      	ldr	r3, [pc, #128]	; (8010fc4 <rmw_init_options_init+0xbc>)
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	60a3      	str	r3, [r4, #8]
 8010f48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f4a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010f4e:	682b      	ldr	r3, [r5, #0]
 8010f50:	4638      	mov	r0, r7
 8010f52:	f8cc 3000 	str.w	r3, [ip]
 8010f56:	f8c4 e01c 	str.w	lr, [r4, #28]
 8010f5a:	60e6      	str	r6, [r4, #12]
 8010f5c:	f7ff fec0 	bl	8010ce0 <rmw_get_default_security_options>
 8010f60:	f104 0310 	add.w	r3, r4, #16
 8010f64:	2203      	movs	r2, #3
 8010f66:	e897 0003 	ldmia.w	r7, {r0, r1}
 8010f6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8010f6e:	4816      	ldr	r0, [pc, #88]	; (8010fc8 <rmw_init_options_init+0xc0>)
 8010f70:	4916      	ldr	r1, [pc, #88]	; (8010fcc <rmw_init_options_init+0xc4>)
 8010f72:	7626      	strb	r6, [r4, #24]
 8010f74:	f001 fa62 	bl	801243c <rmw_uxrce_init_init_options_impl_memory>
 8010f78:	4813      	ldr	r0, [pc, #76]	; (8010fc8 <rmw_init_options_init+0xc0>)
 8010f7a:	f008 fc09 	bl	8019790 <get_memory>
 8010f7e:	b1f0      	cbz	r0, 8010fbe <rmw_init_options_init+0xb6>
 8010f80:	4a13      	ldr	r2, [pc, #76]	; (8010fd0 <rmw_init_options_init+0xc8>)
 8010f82:	6883      	ldr	r3, [r0, #8]
 8010f84:	6851      	ldr	r1, [r2, #4]
 8010f86:	6363      	str	r3, [r4, #52]	; 0x34
 8010f88:	7810      	ldrb	r0, [r2, #0]
 8010f8a:	6159      	str	r1, [r3, #20]
 8010f8c:	68d1      	ldr	r1, [r2, #12]
 8010f8e:	7418      	strb	r0, [r3, #16]
 8010f90:	61d9      	str	r1, [r3, #28]
 8010f92:	6911      	ldr	r1, [r2, #16]
 8010f94:	6219      	str	r1, [r3, #32]
 8010f96:	6951      	ldr	r1, [r2, #20]
 8010f98:	6892      	ldr	r2, [r2, #8]
 8010f9a:	6259      	str	r1, [r3, #36]	; 0x24
 8010f9c:	619a      	str	r2, [r3, #24]
 8010f9e:	f004 fb49 	bl	8015634 <uxr_nanos>
 8010fa2:	f009 ffbb 	bl	801af1c <srand>
 8010fa6:	f009 ffe7 	bl	801af78 <rand>
 8010faa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010fac:	6298      	str	r0, [r3, #40]	; 0x28
 8010fae:	2800      	cmp	r0, #0
 8010fb0:	d0f9      	beq.n	8010fa6 <rmw_init_options_init+0x9e>
 8010fb2:	2000      	movs	r0, #0
 8010fb4:	b003      	add	sp, #12
 8010fb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010fba:	b004      	add	sp, #16
 8010fbc:	4770      	bx	lr
 8010fbe:	2001      	movs	r0, #1
 8010fc0:	e7b1      	b.n	8010f26 <rmw_init_options_init+0x1e>
 8010fc2:	bf00      	nop
 8010fc4:	0801da0c 	.word	0x0801da0c
 8010fc8:	200113c4 	.word	0x200113c4
 8010fcc:	2000cc60 	.word	0x2000cc60
 8010fd0:	2000c96c 	.word	0x2000c96c
 8010fd4:	0801cd9c 	.word	0x0801cd9c

08010fd8 <rmw_init_options_copy>:
 8010fd8:	2800      	cmp	r0, #0
 8010fda:	d047      	beq.n	801106c <rmw_init_options_copy+0x94>
 8010fdc:	b570      	push	{r4, r5, r6, lr}
 8010fde:	460d      	mov	r5, r1
 8010fe0:	b149      	cbz	r1, 8010ff6 <rmw_init_options_copy+0x1e>
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	6880      	ldr	r0, [r0, #8]
 8010fe6:	b120      	cbz	r0, 8010ff2 <rmw_init_options_copy+0x1a>
 8010fe8:	4b22      	ldr	r3, [pc, #136]	; (8011074 <rmw_init_options_copy+0x9c>)
 8010fea:	6819      	ldr	r1, [r3, #0]
 8010fec:	f7ef f928 	bl	8000240 <strcmp>
 8010ff0:	bba8      	cbnz	r0, 801105e <rmw_init_options_copy+0x86>
 8010ff2:	68ab      	ldr	r3, [r5, #8]
 8010ff4:	b11b      	cbz	r3, 8010ffe <rmw_init_options_copy+0x26>
 8010ff6:	f04f 0c0b 	mov.w	ip, #11
 8010ffa:	4660      	mov	r0, ip
 8010ffc:	bd70      	pop	{r4, r5, r6, pc}
 8010ffe:	4623      	mov	r3, r4
 8011000:	462a      	mov	r2, r5
 8011002:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8011006:	f8d3 e000 	ldr.w	lr, [r3]
 801100a:	3310      	adds	r3, #16
 801100c:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 8011010:	3210      	adds	r2, #16
 8011012:	f853 0c08 	ldr.w	r0, [r3, #-8]
 8011016:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801101a:	42b3      	cmp	r3, r6
 801101c:	f842 ec10 	str.w	lr, [r2, #-16]
 8011020:	f842 cc0c 	str.w	ip, [r2, #-12]
 8011024:	f842 0c08 	str.w	r0, [r2, #-8]
 8011028:	f842 1c04 	str.w	r1, [r2, #-4]
 801102c:	d1eb      	bne.n	8011006 <rmw_init_options_copy+0x2e>
 801102e:	6819      	ldr	r1, [r3, #0]
 8011030:	685b      	ldr	r3, [r3, #4]
 8011032:	4811      	ldr	r0, [pc, #68]	; (8011078 <rmw_init_options_copy+0xa0>)
 8011034:	6011      	str	r1, [r2, #0]
 8011036:	6053      	str	r3, [r2, #4]
 8011038:	f008 fbaa 	bl	8019790 <get_memory>
 801103c:	b198      	cbz	r0, 8011066 <rmw_init_options_copy+0x8e>
 801103e:	6883      	ldr	r3, [r0, #8]
 8011040:	f04f 0c00 	mov.w	ip, #0
 8011044:	636b      	str	r3, [r5, #52]	; 0x34
 8011046:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8011048:	f103 0410 	add.w	r4, r3, #16
 801104c:	3510      	adds	r5, #16
 801104e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011052:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011056:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801105a:	4660      	mov	r0, ip
 801105c:	bd70      	pop	{r4, r5, r6, pc}
 801105e:	f04f 0c0c 	mov.w	ip, #12
 8011062:	4660      	mov	r0, ip
 8011064:	bd70      	pop	{r4, r5, r6, pc}
 8011066:	f04f 0c01 	mov.w	ip, #1
 801106a:	e7c6      	b.n	8010ffa <rmw_init_options_copy+0x22>
 801106c:	f04f 0c0b 	mov.w	ip, #11
 8011070:	4660      	mov	r0, ip
 8011072:	4770      	bx	lr
 8011074:	0801da0c 	.word	0x0801da0c
 8011078:	200113c4 	.word	0x200113c4

0801107c <rmw_init_options_fini>:
 801107c:	b510      	push	{r4, lr}
 801107e:	b08e      	sub	sp, #56	; 0x38
 8011080:	b388      	cbz	r0, 80110e6 <rmw_init_options_fini+0x6a>
 8011082:	4604      	mov	r4, r0
 8011084:	3020      	adds	r0, #32
 8011086:	f7ff fbf9 	bl	801087c <rcutils_allocator_is_valid>
 801108a:	b360      	cbz	r0, 80110e6 <rmw_init_options_fini+0x6a>
 801108c:	68a0      	ldr	r0, [r4, #8]
 801108e:	b120      	cbz	r0, 801109a <rmw_init_options_fini+0x1e>
 8011090:	4b1a      	ldr	r3, [pc, #104]	; (80110fc <rmw_init_options_fini+0x80>)
 8011092:	6819      	ldr	r1, [r3, #0]
 8011094:	f7ef f8d4 	bl	8000240 <strcmp>
 8011098:	bb68      	cbnz	r0, 80110f6 <rmw_init_options_fini+0x7a>
 801109a:	4b19      	ldr	r3, [pc, #100]	; (8011100 <rmw_init_options_fini+0x84>)
 801109c:	6819      	ldr	r1, [r3, #0]
 801109e:	b331      	cbz	r1, 80110ee <rmw_init_options_fini+0x72>
 80110a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80110a2:	e001      	b.n	80110a8 <rmw_init_options_fini+0x2c>
 80110a4:	6849      	ldr	r1, [r1, #4]
 80110a6:	b311      	cbz	r1, 80110ee <rmw_init_options_fini+0x72>
 80110a8:	688b      	ldr	r3, [r1, #8]
 80110aa:	429a      	cmp	r2, r3
 80110ac:	d1fa      	bne.n	80110a4 <rmw_init_options_fini+0x28>
 80110ae:	4814      	ldr	r0, [pc, #80]	; (8011100 <rmw_init_options_fini+0x84>)
 80110b0:	f008 fb7e 	bl	80197b0 <put_memory>
 80110b4:	4668      	mov	r0, sp
 80110b6:	f7ff fdff 	bl	8010cb8 <rmw_get_zero_initialized_init_options>
 80110ba:	46ee      	mov	lr, sp
 80110bc:	46a4      	mov	ip, r4
 80110be:	2400      	movs	r4, #0
 80110c0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110c4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110c8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110cc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80110d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80110d8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80110dc:	e88c 0003 	stmia.w	ip, {r0, r1}
 80110e0:	4620      	mov	r0, r4
 80110e2:	b00e      	add	sp, #56	; 0x38
 80110e4:	bd10      	pop	{r4, pc}
 80110e6:	240b      	movs	r4, #11
 80110e8:	4620      	mov	r0, r4
 80110ea:	b00e      	add	sp, #56	; 0x38
 80110ec:	bd10      	pop	{r4, pc}
 80110ee:	2401      	movs	r4, #1
 80110f0:	4620      	mov	r0, r4
 80110f2:	b00e      	add	sp, #56	; 0x38
 80110f4:	bd10      	pop	{r4, pc}
 80110f6:	240c      	movs	r4, #12
 80110f8:	e7f2      	b.n	80110e0 <rmw_init_options_fini+0x64>
 80110fa:	bf00      	nop
 80110fc:	0801da0c 	.word	0x0801da0c
 8011100:	200113c4 	.word	0x200113c4

08011104 <rmw_init>:
 8011104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011108:	b083      	sub	sp, #12
 801110a:	2800      	cmp	r0, #0
 801110c:	f000 80d3 	beq.w	80112b6 <rmw_init+0x1b2>
 8011110:	460e      	mov	r6, r1
 8011112:	2900      	cmp	r1, #0
 8011114:	f000 80cf 	beq.w	80112b6 <rmw_init+0x1b2>
 8011118:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801111a:	4605      	mov	r5, r0
 801111c:	2b00      	cmp	r3, #0
 801111e:	f000 80ca 	beq.w	80112b6 <rmw_init+0x1b2>
 8011122:	4b78      	ldr	r3, [pc, #480]	; (8011304 <rmw_init+0x200>)
 8011124:	6880      	ldr	r0, [r0, #8]
 8011126:	681f      	ldr	r7, [r3, #0]
 8011128:	b128      	cbz	r0, 8011136 <rmw_init+0x32>
 801112a:	4639      	mov	r1, r7
 801112c:	f7ef f888 	bl	8000240 <strcmp>
 8011130:	2800      	cmp	r0, #0
 8011132:	f040 80ca 	bne.w	80112ca <rmw_init+0x1c6>
 8011136:	4c74      	ldr	r4, [pc, #464]	; (8011308 <rmw_init+0x204>)
 8011138:	f04f 0800 	mov.w	r8, #0
 801113c:	4973      	ldr	r1, [pc, #460]	; (801130c <rmw_init+0x208>)
 801113e:	4874      	ldr	r0, [pc, #464]	; (8011310 <rmw_init+0x20c>)
 8011140:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011144:	60b7      	str	r7, [r6, #8]
 8011146:	e9c6 2300 	strd	r2, r3, [r6]
 801114a:	68eb      	ldr	r3, [r5, #12]
 801114c:	2201      	movs	r2, #1
 801114e:	64b3      	str	r3, [r6, #72]	; 0x48
 8011150:	f001 f914 	bl	801237c <rmw_uxrce_init_session_memory>
 8011154:	4620      	mov	r0, r4
 8011156:	2204      	movs	r2, #4
 8011158:	496e      	ldr	r1, [pc, #440]	; (8011314 <rmw_init+0x210>)
 801115a:	f001 f94f 	bl	80123fc <rmw_uxrce_init_static_input_buffer_memory>
 801115e:	486c      	ldr	r0, [pc, #432]	; (8011310 <rmw_init+0x20c>)
 8011160:	f884 800d 	strb.w	r8, [r4, #13]
 8011164:	f008 fb14 	bl	8019790 <get_memory>
 8011168:	2800      	cmp	r0, #0
 801116a:	f000 80a9 	beq.w	80112c0 <rmw_init+0x1bc>
 801116e:	6884      	ldr	r4, [r0, #8]
 8011170:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8011172:	f104 0910 	add.w	r9, r4, #16
 8011176:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8011178:	f890 c010 	ldrb.w	ip, [r0, #16]
 801117c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8011180:	9101      	str	r1, [sp, #4]
 8011182:	4661      	mov	r1, ip
 8011184:	6a00      	ldr	r0, [r0, #32]
 8011186:	9000      	str	r0, [sp, #0]
 8011188:	4648      	mov	r0, r9
 801118a:	f002 f9fd 	bl	8013588 <uxr_set_custom_transport_callbacks>
 801118e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011192:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 8011196:	4960      	ldr	r1, [pc, #384]	; (8011318 <rmw_init+0x214>)
 8011198:	4860      	ldr	r0, [pc, #384]	; (801131c <rmw_init+0x218>)
 801119a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 801119e:	f504 725e 	add.w	r2, r4, #888	; 0x378
 80111a2:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 80111a6:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 80111aa:	2201      	movs	r2, #1
 80111ac:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 80111b0:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 80111b4:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 80111b8:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 80111bc:	64f4      	str	r4, [r6, #76]	; 0x4c
 80111be:	f001 f8bd 	bl	801233c <rmw_uxrce_init_node_memory>
 80111c2:	2205      	movs	r2, #5
 80111c4:	4956      	ldr	r1, [pc, #344]	; (8011320 <rmw_init+0x21c>)
 80111c6:	4857      	ldr	r0, [pc, #348]	; (8011324 <rmw_init+0x220>)
 80111c8:	f001 f898 	bl	80122fc <rmw_uxrce_init_subscription_memory>
 80111cc:	220a      	movs	r2, #10
 80111ce:	4956      	ldr	r1, [pc, #344]	; (8011328 <rmw_init+0x224>)
 80111d0:	4856      	ldr	r0, [pc, #344]	; (801132c <rmw_init+0x228>)
 80111d2:	f001 f873 	bl	80122bc <rmw_uxrce_init_publisher_memory>
 80111d6:	2201      	movs	r2, #1
 80111d8:	4955      	ldr	r1, [pc, #340]	; (8011330 <rmw_init+0x22c>)
 80111da:	4856      	ldr	r0, [pc, #344]	; (8011334 <rmw_init+0x230>)
 80111dc:	f001 f82e 	bl	801223c <rmw_uxrce_init_service_memory>
 80111e0:	2201      	movs	r2, #1
 80111e2:	4955      	ldr	r1, [pc, #340]	; (8011338 <rmw_init+0x234>)
 80111e4:	4855      	ldr	r0, [pc, #340]	; (801133c <rmw_init+0x238>)
 80111e6:	f001 f849 	bl	801227c <rmw_uxrce_init_client_memory>
 80111ea:	220f      	movs	r2, #15
 80111ec:	4954      	ldr	r1, [pc, #336]	; (8011340 <rmw_init+0x23c>)
 80111ee:	4855      	ldr	r0, [pc, #340]	; (8011344 <rmw_init+0x240>)
 80111f0:	f001 f8e4 	bl	80123bc <rmw_uxrce_init_topic_memory>
 80111f4:	2203      	movs	r2, #3
 80111f6:	4954      	ldr	r1, [pc, #336]	; (8011348 <rmw_init+0x244>)
 80111f8:	4854      	ldr	r0, [pc, #336]	; (801134c <rmw_init+0x248>)
 80111fa:	f001 f91f 	bl	801243c <rmw_uxrce_init_init_options_impl_memory>
 80111fe:	2204      	movs	r2, #4
 8011200:	4953      	ldr	r1, [pc, #332]	; (8011350 <rmw_init+0x24c>)
 8011202:	4854      	ldr	r0, [pc, #336]	; (8011354 <rmw_init+0x250>)
 8011204:	f001 f93a 	bl	801247c <rmw_uxrce_init_wait_set_memory>
 8011208:	4953      	ldr	r1, [pc, #332]	; (8011358 <rmw_init+0x254>)
 801120a:	4854      	ldr	r0, [pc, #336]	; (801135c <rmw_init+0x258>)
 801120c:	2204      	movs	r2, #4
 801120e:	f001 f955 	bl	80124bc <rmw_uxrce_init_guard_condition_memory>
 8011212:	4642      	mov	r2, r8
 8011214:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8011216:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 8011218:	f000 fff8 	bl	801220c <rmw_uxrce_transport_init>
 801121c:	4607      	mov	r7, r0
 801121e:	2800      	cmp	r0, #0
 8011220:	d158      	bne.n	80112d4 <rmw_init+0x1d0>
 8011222:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8011224:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8011228:	f504 7122 	add.w	r1, r4, #648	; 0x288
 801122c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801122e:	4628      	mov	r0, r5
 8011230:	f002 fbda 	bl	80139e8 <uxr_init_session>
 8011234:	4622      	mov	r2, r4
 8011236:	494a      	ldr	r1, [pc, #296]	; (8011360 <rmw_init+0x25c>)
 8011238:	4628      	mov	r0, r5
 801123a:	f002 fbf9 	bl	8013a30 <uxr_set_topic_callback>
 801123e:	463a      	mov	r2, r7
 8011240:	4948      	ldr	r1, [pc, #288]	; (8011364 <rmw_init+0x260>)
 8011242:	4628      	mov	r0, r5
 8011244:	f002 fbf0 	bl	8013a28 <uxr_set_status_callback>
 8011248:	463a      	mov	r2, r7
 801124a:	4947      	ldr	r1, [pc, #284]	; (8011368 <rmw_init+0x264>)
 801124c:	4628      	mov	r0, r5
 801124e:	f002 fbf3 	bl	8013a38 <uxr_set_request_callback>
 8011252:	463a      	mov	r2, r7
 8011254:	4945      	ldr	r1, [pc, #276]	; (801136c <rmw_init+0x268>)
 8011256:	4628      	mov	r0, r5
 8011258:	f002 fbf2 	bl	8013a40 <uxr_set_reply_callback>
 801125c:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8011260:	2304      	movs	r3, #4
 8011262:	f504 7165 	add.w	r1, r4, #916	; 0x394
 8011266:	0092      	lsls	r2, r2, #2
 8011268:	4628      	mov	r0, r5
 801126a:	f002 fc29 	bl	8013ac0 <uxr_create_input_reliable_stream>
 801126e:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8011272:	2304      	movs	r3, #4
 8011274:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 8011278:	0092      	lsls	r2, r2, #2
 801127a:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 801127e:	4628      	mov	r0, r5
 8011280:	f002 fbf4 	bl	8013a6c <uxr_create_output_reliable_stream>
 8011284:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 8011288:	4628      	mov	r0, r5
 801128a:	f002 fc13 	bl	8013ab4 <uxr_create_input_best_effort_stream>
 801128e:	f241 3194 	movw	r1, #5012	; 0x1394
 8011292:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 8011296:	4628      	mov	r0, r5
 8011298:	4421      	add	r1, r4
 801129a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 801129e:	f002 fbd3 	bl	8013a48 <uxr_create_output_best_effort_stream>
 80112a2:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 80112a6:	4628      	mov	r0, r5
 80112a8:	f003 f95c 	bl	8014564 <uxr_create_session>
 80112ac:	b1f8      	cbz	r0, 80112ee <rmw_init+0x1ea>
 80112ae:	4638      	mov	r0, r7
 80112b0:	b003      	add	sp, #12
 80112b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112b6:	270b      	movs	r7, #11
 80112b8:	4638      	mov	r0, r7
 80112ba:	b003      	add	sp, #12
 80112bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112c0:	2701      	movs	r7, #1
 80112c2:	4638      	mov	r0, r7
 80112c4:	b003      	add	sp, #12
 80112c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112ca:	270c      	movs	r7, #12
 80112cc:	4638      	mov	r0, r7
 80112ce:	b003      	add	sp, #12
 80112d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112d4:	4648      	mov	r0, r9
 80112d6:	f002 f995 	bl	8013604 <uxr_close_custom_transport>
 80112da:	4621      	mov	r1, r4
 80112dc:	480c      	ldr	r0, [pc, #48]	; (8011310 <rmw_init+0x20c>)
 80112de:	f008 fa67 	bl	80197b0 <put_memory>
 80112e2:	4638      	mov	r0, r7
 80112e4:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 80112e8:	b003      	add	sp, #12
 80112ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112ee:	4648      	mov	r0, r9
 80112f0:	f002 f988 	bl	8013604 <uxr_close_custom_transport>
 80112f4:	4621      	mov	r1, r4
 80112f6:	4806      	ldr	r0, [pc, #24]	; (8011310 <rmw_init+0x20c>)
 80112f8:	f008 fa5a 	bl	80197b0 <put_memory>
 80112fc:	64f7      	str	r7, [r6, #76]	; 0x4c
 80112fe:	2701      	movs	r7, #1
 8011300:	e7d5      	b.n	80112ae <rmw_init+0x1aa>
 8011302:	bf00      	nop
 8011304:	0801da0c 	.word	0x0801da0c
 8011308:	20011414 	.word	0x20011414
 801130c:	2000d6c0 	.word	0x2000d6c0
 8011310:	20011404 	.word	0x20011404
 8011314:	2000ec68 	.word	0x2000ec68
 8011318:	2000cce4 	.word	0x2000cce4
 801131c:	200113d4 	.word	0x200113d4
 8011320:	20010d68 	.word	0x20010d68
 8011324:	20011424 	.word	0x20011424
 8011328:	2000cd88 	.word	0x2000cd88
 801132c:	200113e4 	.word	0x200113e4
 8011330:	2000d5f8 	.word	0x2000d5f8
 8011334:	200113f4 	.word	0x200113f4
 8011338:	2000cb18 	.word	0x2000cb18
 801133c:	2000cb04 	.word	0x2000cb04
 8011340:	200111a0 	.word	0x200111a0
 8011344:	20011434 	.word	0x20011434
 8011348:	2000cc60 	.word	0x2000cc60
 801134c:	200113c4 	.word	0x200113c4
 8011350:	20011344 	.word	0x20011344
 8011354:	20011444 	.word	0x20011444
 8011358:	2000cbe0 	.word	0x2000cbe0
 801135c:	200113b4 	.word	0x200113b4
 8011360:	080195c9 	.word	0x080195c9
 8011364:	080195c1 	.word	0x080195c1
 8011368:	08019661 	.word	0x08019661
 801136c:	080196fd 	.word	0x080196fd

08011370 <rmw_context_fini>:
 8011370:	4b17      	ldr	r3, [pc, #92]	; (80113d0 <rmw_context_fini+0x60>)
 8011372:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8011374:	b570      	push	{r4, r5, r6, lr}
 8011376:	681c      	ldr	r4, [r3, #0]
 8011378:	4605      	mov	r5, r0
 801137a:	b334      	cbz	r4, 80113ca <rmw_context_fini+0x5a>
 801137c:	2600      	movs	r6, #0
 801137e:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 8011382:	6902      	ldr	r2, [r0, #16]
 8011384:	428a      	cmp	r2, r1
 8011386:	d018      	beq.n	80113ba <rmw_context_fini+0x4a>
 8011388:	2c00      	cmp	r4, #0
 801138a:	d1f8      	bne.n	801137e <rmw_context_fini+0xe>
 801138c:	b189      	cbz	r1, 80113b2 <rmw_context_fini+0x42>
 801138e:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 8011392:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8011396:	789b      	ldrb	r3, [r3, #2]
 8011398:	2b01      	cmp	r3, #1
 801139a:	bf14      	ite	ne
 801139c:	210a      	movne	r1, #10
 801139e:	2100      	moveq	r1, #0
 80113a0:	f003 f8b8 	bl	8014514 <uxr_delete_session_retries>
 80113a4:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80113a6:	f001 f8a9 	bl	80124fc <rmw_uxrce_fini_session_memory>
 80113aa:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80113ac:	3010      	adds	r0, #16
 80113ae:	f002 f929 	bl	8013604 <uxr_close_custom_transport>
 80113b2:	2300      	movs	r3, #0
 80113b4:	4630      	mov	r0, r6
 80113b6:	64eb      	str	r3, [r5, #76]	; 0x4c
 80113b8:	bd70      	pop	{r4, r5, r6, pc}
 80113ba:	3018      	adds	r0, #24
 80113bc:	f000 f89c 	bl	80114f8 <rmw_destroy_node>
 80113c0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80113c2:	4606      	mov	r6, r0
 80113c4:	2c00      	cmp	r4, #0
 80113c6:	d1da      	bne.n	801137e <rmw_context_fini+0xe>
 80113c8:	e7e0      	b.n	801138c <rmw_context_fini+0x1c>
 80113ca:	4626      	mov	r6, r4
 80113cc:	e7de      	b.n	801138c <rmw_context_fini+0x1c>
 80113ce:	bf00      	nop
 80113d0:	200113d4 	.word	0x200113d4

080113d4 <create_node>:
 80113d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113d8:	b083      	sub	sp, #12
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d064      	beq.n	80114a8 <create_node+0xd4>
 80113de:	4606      	mov	r6, r0
 80113e0:	4838      	ldr	r0, [pc, #224]	; (80114c4 <create_node+0xf0>)
 80113e2:	460f      	mov	r7, r1
 80113e4:	4690      	mov	r8, r2
 80113e6:	461d      	mov	r5, r3
 80113e8:	f008 f9d2 	bl	8019790 <get_memory>
 80113ec:	2800      	cmp	r0, #0
 80113ee:	d05b      	beq.n	80114a8 <create_node+0xd4>
 80113f0:	6884      	ldr	r4, [r0, #8]
 80113f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80113f4:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 80113f8:	f104 0518 	add.w	r5, r4, #24
 80113fc:	6123      	str	r3, [r4, #16]
 80113fe:	f008 fa2f 	bl	8019860 <rmw_get_implementation_identifier>
 8011402:	f8c4 9020 	str.w	r9, [r4, #32]
 8011406:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801140a:	4630      	mov	r0, r6
 801140c:	f7ee ff22 	bl	8000254 <strlen>
 8011410:	1c42      	adds	r2, r0, #1
 8011412:	2a3c      	cmp	r2, #60	; 0x3c
 8011414:	d840      	bhi.n	8011498 <create_node+0xc4>
 8011416:	4648      	mov	r0, r9
 8011418:	f104 0968 	add.w	r9, r4, #104	; 0x68
 801141c:	4631      	mov	r1, r6
 801141e:	f00a fb0e 	bl	801ba3e <memcpy>
 8011422:	4638      	mov	r0, r7
 8011424:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8011428:	f7ee ff14 	bl	8000254 <strlen>
 801142c:	1c42      	adds	r2, r0, #1
 801142e:	2a3c      	cmp	r2, #60	; 0x3c
 8011430:	d832      	bhi.n	8011498 <create_node+0xc4>
 8011432:	4639      	mov	r1, r7
 8011434:	4648      	mov	r0, r9
 8011436:	f00a fb02 	bl	801ba3e <memcpy>
 801143a:	6923      	ldr	r3, [r4, #16]
 801143c:	2101      	movs	r1, #1
 801143e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011442:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8011446:	1842      	adds	r2, r0, r1
 8011448:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 801144c:	f002 f8de 	bl	801360c <uxr_object_id>
 8011450:	6160      	str	r0, [r4, #20]
 8011452:	783b      	ldrb	r3, [r7, #0]
 8011454:	2b2f      	cmp	r3, #47	; 0x2f
 8011456:	d12c      	bne.n	80114b2 <create_node+0xde>
 8011458:	787b      	ldrb	r3, [r7, #1]
 801145a:	bb53      	cbnz	r3, 80114b2 <create_node+0xde>
 801145c:	4633      	mov	r3, r6
 801145e:	4a1a      	ldr	r2, [pc, #104]	; (80114c8 <create_node+0xf4>)
 8011460:	213c      	movs	r1, #60	; 0x3c
 8011462:	481a      	ldr	r0, [pc, #104]	; (80114cc <create_node+0xf8>)
 8011464:	f00a f8b2 	bl	801b5cc <sniprintf>
 8011468:	6920      	ldr	r0, [r4, #16]
 801146a:	2106      	movs	r1, #6
 801146c:	fa1f f388 	uxth.w	r3, r8
 8011470:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8011474:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011478:	9101      	str	r1, [sp, #4]
 801147a:	4914      	ldr	r1, [pc, #80]	; (80114cc <create_node+0xf8>)
 801147c:	9100      	str	r1, [sp, #0]
 801147e:	6811      	ldr	r1, [r2, #0]
 8011480:	6962      	ldr	r2, [r4, #20]
 8011482:	f001 fe15 	bl	80130b0 <uxr_buffer_create_participant_bin>
 8011486:	4602      	mov	r2, r0
 8011488:	6920      	ldr	r0, [r4, #16]
 801148a:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801148e:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011492:	f001 f9b7 	bl	8012804 <run_xrce_session>
 8011496:	b918      	cbnz	r0, 80114a0 <create_node+0xcc>
 8011498:	4628      	mov	r0, r5
 801149a:	2500      	movs	r5, #0
 801149c:	f001 f834 	bl	8012508 <rmw_uxrce_fini_node_memory>
 80114a0:	4628      	mov	r0, r5
 80114a2:	b003      	add	sp, #12
 80114a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114a8:	2500      	movs	r5, #0
 80114aa:	4628      	mov	r0, r5
 80114ac:	b003      	add	sp, #12
 80114ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80114b2:	463b      	mov	r3, r7
 80114b4:	4a06      	ldr	r2, [pc, #24]	; (80114d0 <create_node+0xfc>)
 80114b6:	213c      	movs	r1, #60	; 0x3c
 80114b8:	9600      	str	r6, [sp, #0]
 80114ba:	4804      	ldr	r0, [pc, #16]	; (80114cc <create_node+0xf8>)
 80114bc:	f00a f886 	bl	801b5cc <sniprintf>
 80114c0:	e7d2      	b.n	8011468 <create_node+0x94>
 80114c2:	bf00      	nop
 80114c4:	200113d4 	.word	0x200113d4
 80114c8:	0801d3ac 	.word	0x0801d3ac
 80114cc:	2000c988 	.word	0x2000c988
 80114d0:	0801cdac 	.word	0x0801cdac

080114d4 <rmw_create_node>:
 80114d4:	468c      	mov	ip, r1
 80114d6:	4611      	mov	r1, r2
 80114d8:	f1bc 0f00 	cmp.w	ip, #0
 80114dc:	d00a      	beq.n	80114f4 <rmw_create_node+0x20>
 80114de:	f89c 3000 	ldrb.w	r3, [ip]
 80114e2:	b13b      	cbz	r3, 80114f4 <rmw_create_node+0x20>
 80114e4:	b132      	cbz	r2, 80114f4 <rmw_create_node+0x20>
 80114e6:	7813      	ldrb	r3, [r2, #0]
 80114e8:	b123      	cbz	r3, 80114f4 <rmw_create_node+0x20>
 80114ea:	4603      	mov	r3, r0
 80114ec:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80114ee:	4660      	mov	r0, ip
 80114f0:	f7ff bf70 	b.w	80113d4 <create_node>
 80114f4:	2000      	movs	r0, #0
 80114f6:	4770      	bx	lr

080114f8 <rmw_destroy_node>:
 80114f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114fa:	b328      	cbz	r0, 8011548 <rmw_destroy_node+0x50>
 80114fc:	4607      	mov	r7, r0
 80114fe:	6800      	ldr	r0, [r0, #0]
 8011500:	b120      	cbz	r0, 801150c <rmw_destroy_node+0x14>
 8011502:	4b37      	ldr	r3, [pc, #220]	; (80115e0 <rmw_destroy_node+0xe8>)
 8011504:	6819      	ldr	r1, [r3, #0]
 8011506:	f7ee fe9b 	bl	8000240 <strcmp>
 801150a:	b9e8      	cbnz	r0, 8011548 <rmw_destroy_node+0x50>
 801150c:	687d      	ldr	r5, [r7, #4]
 801150e:	b1dd      	cbz	r5, 8011548 <rmw_destroy_node+0x50>
 8011510:	4b34      	ldr	r3, [pc, #208]	; (80115e4 <rmw_destroy_node+0xec>)
 8011512:	681c      	ldr	r4, [r3, #0]
 8011514:	2c00      	cmp	r4, #0
 8011516:	d060      	beq.n	80115da <rmw_destroy_node+0xe2>
 8011518:	2600      	movs	r6, #0
 801151a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801151e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 8011522:	429d      	cmp	r5, r3
 8011524:	d013      	beq.n	801154e <rmw_destroy_node+0x56>
 8011526:	2c00      	cmp	r4, #0
 8011528:	d1f7      	bne.n	801151a <rmw_destroy_node+0x22>
 801152a:	4b2f      	ldr	r3, [pc, #188]	; (80115e8 <rmw_destroy_node+0xf0>)
 801152c:	681c      	ldr	r4, [r3, #0]
 801152e:	b1c4      	cbz	r4, 8011562 <rmw_destroy_node+0x6a>
 8011530:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8011534:	6a0b      	ldr	r3, [r1, #32]
 8011536:	429d      	cmp	r5, r3
 8011538:	d1f9      	bne.n	801152e <rmw_destroy_node+0x36>
 801153a:	317c      	adds	r1, #124	; 0x7c
 801153c:	4638      	mov	r0, r7
 801153e:	f000 fdaf 	bl	80120a0 <rmw_destroy_subscription>
 8011542:	2801      	cmp	r0, #1
 8011544:	4606      	mov	r6, r0
 8011546:	d1f2      	bne.n	801152e <rmw_destroy_node+0x36>
 8011548:	2601      	movs	r6, #1
 801154a:	4630      	mov	r0, r6
 801154c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801154e:	3184      	adds	r1, #132	; 0x84
 8011550:	4638      	mov	r0, r7
 8011552:	f000 f9b1 	bl	80118b8 <rmw_destroy_publisher>
 8011556:	2801      	cmp	r0, #1
 8011558:	4606      	mov	r6, r0
 801155a:	d0f5      	beq.n	8011548 <rmw_destroy_node+0x50>
 801155c:	2c00      	cmp	r4, #0
 801155e:	d1dc      	bne.n	801151a <rmw_destroy_node+0x22>
 8011560:	e7e3      	b.n	801152a <rmw_destroy_node+0x32>
 8011562:	4b22      	ldr	r3, [pc, #136]	; (80115ec <rmw_destroy_node+0xf4>)
 8011564:	681c      	ldr	r4, [r3, #0]
 8011566:	b16c      	cbz	r4, 8011584 <rmw_destroy_node+0x8c>
 8011568:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801156c:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801156e:	429d      	cmp	r5, r3
 8011570:	d1f9      	bne.n	8011566 <rmw_destroy_node+0x6e>
 8011572:	317c      	adds	r1, #124	; 0x7c
 8011574:	4638      	mov	r0, r7
 8011576:	f000 fc1d 	bl	8011db4 <rmw_destroy_service>
 801157a:	2801      	cmp	r0, #1
 801157c:	4606      	mov	r6, r0
 801157e:	d0e3      	beq.n	8011548 <rmw_destroy_node+0x50>
 8011580:	2c00      	cmp	r4, #0
 8011582:	d1f1      	bne.n	8011568 <rmw_destroy_node+0x70>
 8011584:	4b1a      	ldr	r3, [pc, #104]	; (80115f0 <rmw_destroy_node+0xf8>)
 8011586:	681c      	ldr	r4, [r3, #0]
 8011588:	b16c      	cbz	r4, 80115a6 <rmw_destroy_node+0xae>
 801158a:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801158e:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 8011590:	429d      	cmp	r5, r3
 8011592:	d1f9      	bne.n	8011588 <rmw_destroy_node+0x90>
 8011594:	317c      	adds	r1, #124	; 0x7c
 8011596:	4638      	mov	r0, r7
 8011598:	f008 f91e 	bl	80197d8 <rmw_destroy_client>
 801159c:	2801      	cmp	r0, #1
 801159e:	4606      	mov	r6, r0
 80115a0:	d0d2      	beq.n	8011548 <rmw_destroy_node+0x50>
 80115a2:	2c00      	cmp	r4, #0
 80115a4:	d1f1      	bne.n	801158a <rmw_destroy_node+0x92>
 80115a6:	6928      	ldr	r0, [r5, #16]
 80115a8:	696a      	ldr	r2, [r5, #20]
 80115aa:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80115ae:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80115b2:	6819      	ldr	r1, [r3, #0]
 80115b4:	f001 fd30 	bl	8013018 <uxr_buffer_delete_entity>
 80115b8:	4602      	mov	r2, r0
 80115ba:	6928      	ldr	r0, [r5, #16]
 80115bc:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80115c0:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80115c4:	f001 f91e 	bl	8012804 <run_xrce_session>
 80115c8:	4603      	mov	r3, r0
 80115ca:	4638      	mov	r0, r7
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	bf08      	it	eq
 80115d0:	2602      	moveq	r6, #2
 80115d2:	f000 ff99 	bl	8012508 <rmw_uxrce_fini_node_memory>
 80115d6:	4630      	mov	r0, r6
 80115d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80115da:	4626      	mov	r6, r4
 80115dc:	e7a5      	b.n	801152a <rmw_destroy_node+0x32>
 80115de:	bf00      	nop
 80115e0:	0801da0c 	.word	0x0801da0c
 80115e4:	200113e4 	.word	0x200113e4
 80115e8:	20011424 	.word	0x20011424
 80115ec:	200113f4 	.word	0x200113f4
 80115f0:	2000cb04 	.word	0x2000cb04

080115f4 <rmw_node_get_graph_guard_condition>:
 80115f4:	6843      	ldr	r3, [r0, #4]
 80115f6:	6918      	ldr	r0, [r3, #16]
 80115f8:	f500 705a 	add.w	r0, r0, #872	; 0x368
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop

08011600 <flush_session>:
 8011600:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 8011602:	f002 be3d 	b.w	8014280 <uxr_run_session_until_confirm_delivery>
 8011606:	bf00      	nop

08011608 <rmw_publish>:
 8011608:	2800      	cmp	r0, #0
 801160a:	d053      	beq.n	80116b4 <rmw_publish+0xac>
 801160c:	b570      	push	{r4, r5, r6, lr}
 801160e:	460d      	mov	r5, r1
 8011610:	b08e      	sub	sp, #56	; 0x38
 8011612:	2900      	cmp	r1, #0
 8011614:	d04b      	beq.n	80116ae <rmw_publish+0xa6>
 8011616:	4604      	mov	r4, r0
 8011618:	6800      	ldr	r0, [r0, #0]
 801161a:	f001 fa05 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 801161e:	2800      	cmp	r0, #0
 8011620:	d045      	beq.n	80116ae <rmw_publish+0xa6>
 8011622:	6866      	ldr	r6, [r4, #4]
 8011624:	2e00      	cmp	r6, #0
 8011626:	d042      	beq.n	80116ae <rmw_publish+0xa6>
 8011628:	69b4      	ldr	r4, [r6, #24]
 801162a:	4628      	mov	r0, r5
 801162c:	6923      	ldr	r3, [r4, #16]
 801162e:	4798      	blx	r3
 8011630:	69f3      	ldr	r3, [r6, #28]
 8011632:	9005      	str	r0, [sp, #20]
 8011634:	b113      	cbz	r3, 801163c <rmw_publish+0x34>
 8011636:	a805      	add	r0, sp, #20
 8011638:	4798      	blx	r3
 801163a:	9805      	ldr	r0, [sp, #20]
 801163c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8011640:	691b      	ldr	r3, [r3, #16]
 8011642:	9000      	str	r0, [sp, #0]
 8011644:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8011648:	6972      	ldr	r2, [r6, #20]
 801164a:	ab06      	add	r3, sp, #24
 801164c:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 801164e:	f004 f891 	bl	8015774 <uxr_prepare_output_stream>
 8011652:	b1d8      	cbz	r0, 801168c <rmw_publish+0x84>
 8011654:	68a3      	ldr	r3, [r4, #8]
 8011656:	a906      	add	r1, sp, #24
 8011658:	4628      	mov	r0, r5
 801165a:	4798      	blx	r3
 801165c:	6a33      	ldr	r3, [r6, #32]
 801165e:	4604      	mov	r4, r0
 8011660:	b10b      	cbz	r3, 8011666 <rmw_publish+0x5e>
 8011662:	a806      	add	r0, sp, #24
 8011664:	4798      	blx	r3
 8011666:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 801166a:	2b01      	cmp	r3, #1
 801166c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8011670:	d022      	beq.n	80116b8 <rmw_publish+0xb0>
 8011672:	6918      	ldr	r0, [r3, #16]
 8011674:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 8011676:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801167a:	f002 fe01 	bl	8014280 <uxr_run_session_until_confirm_delivery>
 801167e:	4020      	ands	r0, r4
 8011680:	b2c4      	uxtb	r4, r0
 8011682:	f084 0001 	eor.w	r0, r4, #1
 8011686:	b2c0      	uxtb	r0, r0
 8011688:	b00e      	add	sp, #56	; 0x38
 801168a:	bd70      	pop	{r4, r5, r6, pc}
 801168c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8011690:	6918      	ldr	r0, [r3, #16]
 8011692:	9b05      	ldr	r3, [sp, #20]
 8011694:	9602      	str	r6, [sp, #8]
 8011696:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801169a:	9300      	str	r3, [sp, #0]
 801169c:	4b09      	ldr	r3, [pc, #36]	; (80116c4 <rmw_publish+0xbc>)
 801169e:	9301      	str	r3, [sp, #4]
 80116a0:	ab06      	add	r3, sp, #24
 80116a2:	6972      	ldr	r2, [r6, #20]
 80116a4:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 80116a6:	f004 f895 	bl	80157d4 <uxr_prepare_output_stream_fragmented>
 80116aa:	2800      	cmp	r0, #0
 80116ac:	d1d2      	bne.n	8011654 <rmw_publish+0x4c>
 80116ae:	2001      	movs	r0, #1
 80116b0:	b00e      	add	sp, #56	; 0x38
 80116b2:	bd70      	pop	{r4, r5, r6, pc}
 80116b4:	2001      	movs	r0, #1
 80116b6:	4770      	bx	lr
 80116b8:	6918      	ldr	r0, [r3, #16]
 80116ba:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80116be:	f002 fa25 	bl	8013b0c <uxr_flash_output_streams>
 80116c2:	e7de      	b.n	8011682 <rmw_publish+0x7a>
 80116c4:	08011601 	.word	0x08011601

080116c8 <rmw_create_publisher>:
 80116c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80116cc:	b087      	sub	sp, #28
 80116ce:	2800      	cmp	r0, #0
 80116d0:	f000 80d2 	beq.w	8011878 <rmw_create_publisher+0x1b0>
 80116d4:	460e      	mov	r6, r1
 80116d6:	2900      	cmp	r1, #0
 80116d8:	f000 80ce 	beq.w	8011878 <rmw_create_publisher+0x1b0>
 80116dc:	4604      	mov	r4, r0
 80116de:	6800      	ldr	r0, [r0, #0]
 80116e0:	4615      	mov	r5, r2
 80116e2:	461f      	mov	r7, r3
 80116e4:	f001 f9a0 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 80116e8:	f080 0001 	eor.w	r0, r0, #1
 80116ec:	b2c0      	uxtb	r0, r0
 80116ee:	2800      	cmp	r0, #0
 80116f0:	f040 80c2 	bne.w	8011878 <rmw_create_publisher+0x1b0>
 80116f4:	2d00      	cmp	r5, #0
 80116f6:	f000 80bf 	beq.w	8011878 <rmw_create_publisher+0x1b0>
 80116fa:	782b      	ldrb	r3, [r5, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	f000 80bb 	beq.w	8011878 <rmw_create_publisher+0x1b0>
 8011702:	2f00      	cmp	r7, #0
 8011704:	f000 80b8 	beq.w	8011878 <rmw_create_publisher+0x1b0>
 8011708:	485e      	ldr	r0, [pc, #376]	; (8011884 <rmw_create_publisher+0x1bc>)
 801170a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801170e:	f008 f83f 	bl	8019790 <get_memory>
 8011712:	2800      	cmp	r0, #0
 8011714:	f000 80b0 	beq.w	8011878 <rmw_create_publisher+0x1b0>
 8011718:	6884      	ldr	r4, [r0, #8]
 801171a:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 801171e:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 8011722:	f008 f89d 	bl	8019860 <rmw_get_implementation_identifier>
 8011726:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 801172a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 801172e:	4628      	mov	r0, r5
 8011730:	f7ee fd90 	bl	8000254 <strlen>
 8011734:	3001      	adds	r0, #1
 8011736:	f104 0884 	add.w	r8, r4, #132	; 0x84
 801173a:	283c      	cmp	r0, #60	; 0x3c
 801173c:	f200 808f 	bhi.w	801185e <rmw_create_publisher+0x196>
 8011740:	462b      	mov	r3, r5
 8011742:	4a51      	ldr	r2, [pc, #324]	; (8011888 <rmw_create_publisher+0x1c0>)
 8011744:	213c      	movs	r1, #60	; 0x3c
 8011746:	4650      	mov	r0, sl
 8011748:	f009 ff40 	bl	801b5cc <sniprintf>
 801174c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011750:	4639      	mov	r1, r7
 8011752:	2250      	movs	r2, #80	; 0x50
 8011754:	67e3      	str	r3, [r4, #124]	; 0x7c
 8011756:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801175a:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 801175e:	f00a f96e 	bl	801ba3e <memcpy>
 8011762:	7a3b      	ldrb	r3, [r7, #8]
 8011764:	4630      	mov	r0, r6
 8011766:	4949      	ldr	r1, [pc, #292]	; (801188c <rmw_create_publisher+0x1c4>)
 8011768:	2b02      	cmp	r3, #2
 801176a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801176e:	bf0c      	ite	eq
 8011770:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 8011774:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 8011778:	67a3      	str	r3, [r4, #120]	; 0x78
 801177a:	2300      	movs	r3, #0
 801177c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8011780:	f001 f960 	bl	8012a44 <get_message_typesupport_handle>
 8011784:	2800      	cmp	r0, #0
 8011786:	d06a      	beq.n	801185e <rmw_create_publisher+0x196>
 8011788:	6842      	ldr	r2, [r0, #4]
 801178a:	61a2      	str	r2, [r4, #24]
 801178c:	2a00      	cmp	r2, #0
 801178e:	d066      	beq.n	801185e <rmw_create_publisher+0x196>
 8011790:	4629      	mov	r1, r5
 8011792:	463b      	mov	r3, r7
 8011794:	4648      	mov	r0, r9
 8011796:	f008 f893 	bl	80198c0 <create_topic>
 801179a:	6260      	str	r0, [r4, #36]	; 0x24
 801179c:	2800      	cmp	r0, #0
 801179e:	d062      	beq.n	8011866 <rmw_create_publisher+0x19e>
 80117a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117a4:	2103      	movs	r1, #3
 80117a6:	2506      	movs	r5, #6
 80117a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117ac:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 80117b0:	1c42      	adds	r2, r0, #1
 80117b2:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 80117b6:	f001 ff29 	bl	801360c <uxr_object_id>
 80117ba:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80117be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117c2:	6120      	str	r0, [r4, #16]
 80117c4:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 80117c8:	6910      	ldr	r0, [r2, #16]
 80117ca:	9500      	str	r5, [sp, #0]
 80117cc:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80117d0:	6819      	ldr	r1, [r3, #0]
 80117d2:	6922      	ldr	r2, [r4, #16]
 80117d4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80117d8:	f001 fcd2 	bl	8013180 <uxr_buffer_create_publisher_bin>
 80117dc:	4602      	mov	r2, r0
 80117de:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80117e2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80117e6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80117ea:	f001 f80b 	bl	8012804 <run_xrce_session>
 80117ee:	b3b0      	cbz	r0, 801185e <rmw_create_publisher+0x196>
 80117f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80117f4:	2105      	movs	r1, #5
 80117f6:	f10d 0a10 	add.w	sl, sp, #16
 80117fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80117fe:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 8011802:	1c42      	adds	r2, r0, #1
 8011804:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 8011808:	f001 ff00 	bl	801360c <uxr_object_id>
 801180c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8011810:	4639      	mov	r1, r7
 8011812:	6160      	str	r0, [r4, #20]
 8011814:	691e      	ldr	r6, [r3, #16]
 8011816:	4650      	mov	r0, sl
 8011818:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801181c:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 8011820:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 8011824:	f8d3 7384 	ldr.w	r7, [r3, #900]	; 0x384
 8011828:	f001 f808 	bl	801283c <convert_qos_profile>
 801182c:	9503      	str	r5, [sp, #12]
 801182e:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8011832:	9001      	str	r0, [sp, #4]
 8011834:	4630      	mov	r0, r6
 8011836:	f8ad 1008 	strh.w	r1, [sp, #8]
 801183a:	f8db 3010 	ldr.w	r3, [fp, #16]
 801183e:	9300      	str	r3, [sp, #0]
 8011840:	6839      	ldr	r1, [r7, #0]
 8011842:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8011846:	f001 fcfb 	bl	8013240 <uxr_buffer_create_datawriter_bin>
 801184a:	4602      	mov	r2, r0
 801184c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011850:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8011854:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011858:	f000 ffd4 	bl	8012804 <run_xrce_session>
 801185c:	b970      	cbnz	r0, 801187c <rmw_create_publisher+0x1b4>
 801185e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011860:	b108      	cbz	r0, 8011866 <rmw_create_publisher+0x19e>
 8011862:	f000 fec1 	bl	80125e8 <rmw_uxrce_fini_topic_memory>
 8011866:	4640      	mov	r0, r8
 8011868:	f04f 0800 	mov.w	r8, #0
 801186c:	f000 fe64 	bl	8012538 <rmw_uxrce_fini_publisher_memory>
 8011870:	4640      	mov	r0, r8
 8011872:	b007      	add	sp, #28
 8011874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011878:	f04f 0800 	mov.w	r8, #0
 801187c:	4640      	mov	r0, r8
 801187e:	b007      	add	sp, #28
 8011880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011884:	200113e4 	.word	0x200113e4
 8011888:	0801d3ac 	.word	0x0801d3ac
 801188c:	0801c980 	.word	0x0801c980

08011890 <rmw_publisher_get_actual_qos>:
 8011890:	b178      	cbz	r0, 80118b2 <rmw_publisher_get_actual_qos+0x22>
 8011892:	b510      	push	{r4, lr}
 8011894:	fab1 f481 	clz	r4, r1
 8011898:	0964      	lsrs	r4, r4, #5
 801189a:	b141      	cbz	r1, 80118ae <rmw_publisher_get_actual_qos+0x1e>
 801189c:	6843      	ldr	r3, [r0, #4]
 801189e:	2250      	movs	r2, #80	; 0x50
 80118a0:	4608      	mov	r0, r1
 80118a2:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80118a6:	f00a f8ca 	bl	801ba3e <memcpy>
 80118aa:	4620      	mov	r0, r4
 80118ac:	bd10      	pop	{r4, pc}
 80118ae:	200b      	movs	r0, #11
 80118b0:	bd10      	pop	{r4, pc}
 80118b2:	200b      	movs	r0, #11
 80118b4:	4770      	bx	lr
 80118b6:	bf00      	nop

080118b8 <rmw_destroy_publisher>:
 80118b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80118bc:	b128      	cbz	r0, 80118ca <rmw_destroy_publisher+0x12>
 80118be:	4604      	mov	r4, r0
 80118c0:	6800      	ldr	r0, [r0, #0]
 80118c2:	460d      	mov	r5, r1
 80118c4:	f001 f8b0 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 80118c8:	b918      	cbnz	r0, 80118d2 <rmw_destroy_publisher+0x1a>
 80118ca:	2401      	movs	r4, #1
 80118cc:	4620      	mov	r0, r4
 80118ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118d2:	6863      	ldr	r3, [r4, #4]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d0f8      	beq.n	80118ca <rmw_destroy_publisher+0x12>
 80118d8:	fab5 f485 	clz	r4, r5
 80118dc:	0964      	lsrs	r4, r4, #5
 80118de:	2d00      	cmp	r5, #0
 80118e0:	d0f3      	beq.n	80118ca <rmw_destroy_publisher+0x12>
 80118e2:	6828      	ldr	r0, [r5, #0]
 80118e4:	f001 f8a0 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 80118e8:	2800      	cmp	r0, #0
 80118ea:	d0ee      	beq.n	80118ca <rmw_destroy_publisher+0x12>
 80118ec:	686e      	ldr	r6, [r5, #4]
 80118ee:	2e00      	cmp	r6, #0
 80118f0:	d0eb      	beq.n	80118ca <rmw_destroy_publisher+0x12>
 80118f2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80118f4:	f8d6 7080 	ldr.w	r7, [r6, #128]	; 0x80
 80118f8:	f008 f832 	bl	8019960 <destroy_topic>
 80118fc:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8011900:	6972      	ldr	r2, [r6, #20]
 8011902:	6918      	ldr	r0, [r3, #16]
 8011904:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011908:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801190c:	6819      	ldr	r1, [r3, #0]
 801190e:	f001 fb83 	bl	8013018 <uxr_buffer_delete_entity>
 8011912:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 8011916:	4680      	mov	r8, r0
 8011918:	6932      	ldr	r2, [r6, #16]
 801191a:	6918      	ldr	r0, [r3, #16]
 801191c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011920:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011924:	6819      	ldr	r1, [r3, #0]
 8011926:	f001 fb77 	bl	8013018 <uxr_buffer_delete_entity>
 801192a:	4606      	mov	r6, r0
 801192c:	6938      	ldr	r0, [r7, #16]
 801192e:	4642      	mov	r2, r8
 8011930:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011934:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011938:	f000 ff64 	bl	8012804 <run_xrce_session>
 801193c:	693f      	ldr	r7, [r7, #16]
 801193e:	4632      	mov	r2, r6
 8011940:	4606      	mov	r6, r0
 8011942:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 8011946:	4638      	mov	r0, r7
 8011948:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 801194c:	f000 ff5a 	bl	8012804 <run_xrce_session>
 8011950:	b126      	cbz	r6, 801195c <rmw_destroy_publisher+0xa4>
 8011952:	b118      	cbz	r0, 801195c <rmw_destroy_publisher+0xa4>
 8011954:	4628      	mov	r0, r5
 8011956:	f000 fdef 	bl	8012538 <rmw_uxrce_fini_publisher_memory>
 801195a:	e7b7      	b.n	80118cc <rmw_destroy_publisher+0x14>
 801195c:	2402      	movs	r4, #2
 801195e:	e7f9      	b.n	8011954 <rmw_destroy_publisher+0x9c>

08011960 <rmw_send_request>:
 8011960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011964:	4604      	mov	r4, r0
 8011966:	6800      	ldr	r0, [r0, #0]
 8011968:	b08b      	sub	sp, #44	; 0x2c
 801196a:	460e      	mov	r6, r1
 801196c:	4615      	mov	r5, r2
 801196e:	b128      	cbz	r0, 801197c <rmw_send_request+0x1c>
 8011970:	4b21      	ldr	r3, [pc, #132]	; (80119f8 <rmw_send_request+0x98>)
 8011972:	6819      	ldr	r1, [r3, #0]
 8011974:	f7ee fc64 	bl	8000240 <strcmp>
 8011978:	2800      	cmp	r0, #0
 801197a:	d139      	bne.n	80119f0 <rmw_send_request+0x90>
 801197c:	6864      	ldr	r4, [r4, #4]
 801197e:	2700      	movs	r7, #0
 8011980:	6963      	ldr	r3, [r4, #20]
 8011982:	f8d4 8078 	ldr.w	r8, [r4, #120]	; 0x78
 8011986:	689b      	ldr	r3, [r3, #8]
 8011988:	4798      	blx	r3
 801198a:	f8d0 9004 	ldr.w	r9, [r0, #4]
 801198e:	4630      	mov	r0, r6
 8011990:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011994:	4798      	blx	r3
 8011996:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801199a:	9000      	str	r0, [sp, #0]
 801199c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 80119a0:	6922      	ldr	r2, [r4, #16]
 80119a2:	ab02      	add	r3, sp, #8
 80119a4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80119a6:	f003 fee5 	bl	8015774 <uxr_prepare_output_stream>
 80119aa:	e9c5 0700 	strd	r0, r7, [r5]
 80119ae:	b198      	cbz	r0, 80119d8 <rmw_send_request+0x78>
 80119b0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80119b4:	a902      	add	r1, sp, #8
 80119b6:	4630      	mov	r0, r6
 80119b8:	4798      	blx	r3
 80119ba:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 80119be:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80119c2:	2b01      	cmp	r3, #1
 80119c4:	d00c      	beq.n	80119e0 <rmw_send_request+0x80>
 80119c6:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80119c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80119cc:	f002 fc58 	bl	8014280 <uxr_run_session_until_confirm_delivery>
 80119d0:	4638      	mov	r0, r7
 80119d2:	b00b      	add	sp, #44	; 0x2c
 80119d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119d8:	2001      	movs	r0, #1
 80119da:	b00b      	add	sp, #44	; 0x2c
 80119dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119e0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80119e4:	f002 f892 	bl	8013b0c <uxr_flash_output_streams>
 80119e8:	4638      	mov	r0, r7
 80119ea:	b00b      	add	sp, #44	; 0x2c
 80119ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119f0:	200c      	movs	r0, #12
 80119f2:	b00b      	add	sp, #44	; 0x2c
 80119f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119f8:	0801da0c 	.word	0x0801da0c

080119fc <rmw_take_request>:
 80119fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a00:	4605      	mov	r5, r0
 8011a02:	6800      	ldr	r0, [r0, #0]
 8011a04:	b089      	sub	sp, #36	; 0x24
 8011a06:	460c      	mov	r4, r1
 8011a08:	4690      	mov	r8, r2
 8011a0a:	461e      	mov	r6, r3
 8011a0c:	b128      	cbz	r0, 8011a1a <rmw_take_request+0x1e>
 8011a0e:	4b28      	ldr	r3, [pc, #160]	; (8011ab0 <rmw_take_request+0xb4>)
 8011a10:	6819      	ldr	r1, [r3, #0]
 8011a12:	f7ee fc15 	bl	8000240 <strcmp>
 8011a16:	2800      	cmp	r0, #0
 8011a18:	d146      	bne.n	8011aa8 <rmw_take_request+0xac>
 8011a1a:	b10e      	cbz	r6, 8011a20 <rmw_take_request+0x24>
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	7033      	strb	r3, [r6, #0]
 8011a20:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8011a24:	f000 fe70 	bl	8012708 <rmw_uxrce_clean_expired_static_input_buffer>
 8011a28:	4648      	mov	r0, r9
 8011a2a:	f000 fe43 	bl	80126b4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011a2e:	4607      	mov	r7, r0
 8011a30:	b3b0      	cbz	r0, 8011aa0 <rmw_take_request+0xa4>
 8011a32:	6885      	ldr	r5, [r0, #8]
 8011a34:	f8d5 2838 	ldr.w	r2, [r5, #2104]	; 0x838
 8011a38:	f8d5 383c 	ldr.w	r3, [r5, #2108]	; 0x83c
 8011a3c:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8011a40:	f895 3837 	ldrb.w	r3, [r5, #2103]	; 0x837
 8011a44:	7423      	strb	r3, [r4, #16]
 8011a46:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	; 0x834
 8011a4a:	f895 3836 	ldrb.w	r3, [r5, #2102]	; 0x836
 8011a4e:	f8a4 2011 	strh.w	r2, [r4, #17]
 8011a52:	74e3      	strb	r3, [r4, #19]
 8011a54:	f8d5 1828 	ldr.w	r1, [r5, #2088]	; 0x828
 8011a58:	f8d5 282c 	ldr.w	r2, [r5, #2092]	; 0x82c
 8011a5c:	f8d5 3830 	ldr.w	r3, [r5, #2096]	; 0x830
 8011a60:	6161      	str	r1, [r4, #20]
 8011a62:	61a2      	str	r2, [r4, #24]
 8011a64:	61e3      	str	r3, [r4, #28]
 8011a66:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011a6a:	689b      	ldr	r3, [r3, #8]
 8011a6c:	4798      	blx	r3
 8011a6e:	6844      	ldr	r4, [r0, #4]
 8011a70:	f8d5 2810 	ldr.w	r2, [r5, #2064]	; 0x810
 8011a74:	f105 0110 	add.w	r1, r5, #16
 8011a78:	4668      	mov	r0, sp
 8011a7a:	f7fd f829 	bl	800ead0 <ucdr_init_buffer>
 8011a7e:	4641      	mov	r1, r8
 8011a80:	68e3      	ldr	r3, [r4, #12]
 8011a82:	4668      	mov	r0, sp
 8011a84:	4798      	blx	r3
 8011a86:	4639      	mov	r1, r7
 8011a88:	4604      	mov	r4, r0
 8011a8a:	480a      	ldr	r0, [pc, #40]	; (8011ab4 <rmw_take_request+0xb8>)
 8011a8c:	f007 fe90 	bl	80197b0 <put_memory>
 8011a90:	b106      	cbz	r6, 8011a94 <rmw_take_request+0x98>
 8011a92:	7034      	strb	r4, [r6, #0]
 8011a94:	f084 0001 	eor.w	r0, r4, #1
 8011a98:	b2c0      	uxtb	r0, r0
 8011a9a:	b009      	add	sp, #36	; 0x24
 8011a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	b009      	add	sp, #36	; 0x24
 8011aa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011aa8:	200c      	movs	r0, #12
 8011aaa:	b009      	add	sp, #36	; 0x24
 8011aac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ab0:	0801da0c 	.word	0x0801da0c
 8011ab4:	20011414 	.word	0x20011414

08011ab8 <rmw_send_response>:
 8011ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aba:	4605      	mov	r5, r0
 8011abc:	6800      	ldr	r0, [r0, #0]
 8011abe:	b091      	sub	sp, #68	; 0x44
 8011ac0:	460c      	mov	r4, r1
 8011ac2:	4616      	mov	r6, r2
 8011ac4:	b128      	cbz	r0, 8011ad2 <rmw_send_response+0x1a>
 8011ac6:	4b29      	ldr	r3, [pc, #164]	; (8011b6c <rmw_send_response+0xb4>)
 8011ac8:	6819      	ldr	r1, [r3, #0]
 8011aca:	f7ee fbb9 	bl	8000240 <strcmp>
 8011ace:	2800      	cmp	r0, #0
 8011ad0:	d141      	bne.n	8011b56 <rmw_send_response+0x9e>
 8011ad2:	686d      	ldr	r5, [r5, #4]
 8011ad4:	68a1      	ldr	r1, [r4, #8]
 8011ad6:	6860      	ldr	r0, [r4, #4]
 8011ad8:	6faf      	ldr	r7, [r5, #120]	; 0x78
 8011ada:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8011ade:	9307      	str	r3, [sp, #28]
 8011ae0:	4623      	mov	r3, r4
 8011ae2:	9206      	str	r2, [sp, #24]
 8011ae4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011ae8:	789b      	ldrb	r3, [r3, #2]
 8011aea:	f88d 2017 	strb.w	r2, [sp, #23]
 8011aee:	f88d 3016 	strb.w	r3, [sp, #22]
 8011af2:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8011af6:	68e2      	ldr	r2, [r4, #12]
 8011af8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011afc:	ab02      	add	r3, sp, #8
 8011afe:	696c      	ldr	r4, [r5, #20]
 8011b00:	c307      	stmia	r3!, {r0, r1, r2}
 8011b02:	68e3      	ldr	r3, [r4, #12]
 8011b04:	4798      	blx	r3
 8011b06:	6844      	ldr	r4, [r0, #4]
 8011b08:	4630      	mov	r0, r6
 8011b0a:	6923      	ldr	r3, [r4, #16]
 8011b0c:	4798      	blx	r3
 8011b0e:	f100 0318 	add.w	r3, r0, #24
 8011b12:	6938      	ldr	r0, [r7, #16]
 8011b14:	9300      	str	r3, [sp, #0]
 8011b16:	ab08      	add	r3, sp, #32
 8011b18:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011b1c:	692a      	ldr	r2, [r5, #16]
 8011b1e:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011b20:	f003 fe28 	bl	8015774 <uxr_prepare_output_stream>
 8011b24:	b910      	cbnz	r0, 8011b2c <rmw_send_response+0x74>
 8011b26:	2001      	movs	r0, #1
 8011b28:	b011      	add	sp, #68	; 0x44
 8011b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b2c:	a902      	add	r1, sp, #8
 8011b2e:	a808      	add	r0, sp, #32
 8011b30:	f004 ff8c 	bl	8016a4c <uxr_serialize_SampleIdentity>
 8011b34:	68a3      	ldr	r3, [r4, #8]
 8011b36:	a908      	add	r1, sp, #32
 8011b38:	4630      	mov	r0, r6
 8011b3a:	4798      	blx	r3
 8011b3c:	f895 3072 	ldrb.w	r3, [r5, #114]	; 0x72
 8011b40:	6938      	ldr	r0, [r7, #16]
 8011b42:	2b01      	cmp	r3, #1
 8011b44:	d00a      	beq.n	8011b5c <rmw_send_response+0xa4>
 8011b46:	6f69      	ldr	r1, [r5, #116]	; 0x74
 8011b48:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011b4c:	f002 fb98 	bl	8014280 <uxr_run_session_until_confirm_delivery>
 8011b50:	2000      	movs	r0, #0
 8011b52:	b011      	add	sp, #68	; 0x44
 8011b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b56:	200c      	movs	r0, #12
 8011b58:	b011      	add	sp, #68	; 0x44
 8011b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011b60:	f001 ffd4 	bl	8013b0c <uxr_flash_output_streams>
 8011b64:	2000      	movs	r0, #0
 8011b66:	b011      	add	sp, #68	; 0x44
 8011b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	0801da0c 	.word	0x0801da0c

08011b70 <rmw_take_response>:
 8011b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b74:	4604      	mov	r4, r0
 8011b76:	6800      	ldr	r0, [r0, #0]
 8011b78:	b088      	sub	sp, #32
 8011b7a:	460f      	mov	r7, r1
 8011b7c:	4690      	mov	r8, r2
 8011b7e:	461d      	mov	r5, r3
 8011b80:	b120      	cbz	r0, 8011b8c <rmw_take_response+0x1c>
 8011b82:	4b1d      	ldr	r3, [pc, #116]	; (8011bf8 <rmw_take_response+0x88>)
 8011b84:	6819      	ldr	r1, [r3, #0]
 8011b86:	f7ee fb5b 	bl	8000240 <strcmp>
 8011b8a:	bb68      	cbnz	r0, 8011be8 <rmw_take_response+0x78>
 8011b8c:	b10d      	cbz	r5, 8011b92 <rmw_take_response+0x22>
 8011b8e:	2300      	movs	r3, #0
 8011b90:	702b      	strb	r3, [r5, #0]
 8011b92:	6864      	ldr	r4, [r4, #4]
 8011b94:	f000 fdb8 	bl	8012708 <rmw_uxrce_clean_expired_static_input_buffer>
 8011b98:	4620      	mov	r0, r4
 8011b9a:	f000 fd8b 	bl	80126b4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8011b9e:	4606      	mov	r6, r0
 8011ba0:	b330      	cbz	r0, 8011bf0 <rmw_take_response+0x80>
 8011ba2:	6963      	ldr	r3, [r4, #20]
 8011ba4:	6884      	ldr	r4, [r0, #8]
 8011ba6:	68db      	ldr	r3, [r3, #12]
 8011ba8:	f504 6203 	add.w	r2, r4, #2096	; 0x830
 8011bac:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8011bb0:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8011bb4:	4798      	blx	r3
 8011bb6:	6847      	ldr	r7, [r0, #4]
 8011bb8:	f8d4 2810 	ldr.w	r2, [r4, #2064]	; 0x810
 8011bbc:	f104 0110 	add.w	r1, r4, #16
 8011bc0:	4668      	mov	r0, sp
 8011bc2:	f7fc ff85 	bl	800ead0 <ucdr_init_buffer>
 8011bc6:	4641      	mov	r1, r8
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	4668      	mov	r0, sp
 8011bcc:	4798      	blx	r3
 8011bce:	4631      	mov	r1, r6
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	480a      	ldr	r0, [pc, #40]	; (8011bfc <rmw_take_response+0x8c>)
 8011bd4:	f007 fdec 	bl	80197b0 <put_memory>
 8011bd8:	b105      	cbz	r5, 8011bdc <rmw_take_response+0x6c>
 8011bda:	702c      	strb	r4, [r5, #0]
 8011bdc:	f084 0001 	eor.w	r0, r4, #1
 8011be0:	b2c0      	uxtb	r0, r0
 8011be2:	b008      	add	sp, #32
 8011be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011be8:	200c      	movs	r0, #12
 8011bea:	b008      	add	sp, #32
 8011bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf0:	2001      	movs	r0, #1
 8011bf2:	b008      	add	sp, #32
 8011bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011bf8:	0801da0c 	.word	0x0801da0c
 8011bfc:	20011414 	.word	0x20011414

08011c00 <rmw_create_service>:
 8011c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c04:	b091      	sub	sp, #68	; 0x44
 8011c06:	2900      	cmp	r1, #0
 8011c08:	f000 80bb 	beq.w	8011d82 <rmw_create_service+0x182>
 8011c0c:	4606      	mov	r6, r0
 8011c0e:	2800      	cmp	r0, #0
 8011c10:	f000 80b7 	beq.w	8011d82 <rmw_create_service+0x182>
 8011c14:	4614      	mov	r4, r2
 8011c16:	6800      	ldr	r0, [r0, #0]
 8011c18:	4689      	mov	r9, r1
 8011c1a:	461d      	mov	r5, r3
 8011c1c:	f000 ff04 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 8011c20:	2c00      	cmp	r4, #0
 8011c22:	f000 80ae 	beq.w	8011d82 <rmw_create_service+0x182>
 8011c26:	f080 0001 	eor.w	r0, r0, #1
 8011c2a:	b2c0      	uxtb	r0, r0
 8011c2c:	2800      	cmp	r0, #0
 8011c2e:	f040 80a8 	bne.w	8011d82 <rmw_create_service+0x182>
 8011c32:	7823      	ldrb	r3, [r4, #0]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	f000 80a4 	beq.w	8011d82 <rmw_create_service+0x182>
 8011c3a:	2d00      	cmp	r5, #0
 8011c3c:	f000 80a1 	beq.w	8011d82 <rmw_create_service+0x182>
 8011c40:	4856      	ldr	r0, [pc, #344]	; (8011d9c <rmw_create_service+0x19c>)
 8011c42:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8011c46:	f007 fda3 	bl	8019790 <get_memory>
 8011c4a:	4606      	mov	r6, r0
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	f000 8099 	beq.w	8011d84 <rmw_create_service+0x184>
 8011c52:	6887      	ldr	r7, [r0, #8]
 8011c54:	f107 0a88 	add.w	sl, r7, #136	; 0x88
 8011c58:	f8c7 7080 	str.w	r7, [r7, #128]	; 0x80
 8011c5c:	f007 fe00 	bl	8019860 <rmw_get_implementation_identifier>
 8011c60:	67f8      	str	r0, [r7, #124]	; 0x7c
 8011c62:	f8c7 a084 	str.w	sl, [r7, #132]	; 0x84
 8011c66:	4620      	mov	r0, r4
 8011c68:	f7ee faf4 	bl	8000254 <strlen>
 8011c6c:	1c42      	adds	r2, r0, #1
 8011c6e:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 8011c72:	2a3c      	cmp	r2, #60	; 0x3c
 8011c74:	f200 808a 	bhi.w	8011d8c <rmw_create_service+0x18c>
 8011c78:	4621      	mov	r1, r4
 8011c7a:	4650      	mov	r0, sl
 8011c7c:	f009 fedf 	bl	801ba3e <memcpy>
 8011c80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011c84:	4629      	mov	r1, r5
 8011c86:	2250      	movs	r2, #80	; 0x50
 8011c88:	f107 0020 	add.w	r0, r7, #32
 8011c8c:	f8c7 8078 	str.w	r8, [r7, #120]	; 0x78
 8011c90:	677b      	str	r3, [r7, #116]	; 0x74
 8011c92:	f009 fed4 	bl	801ba3e <memcpy>
 8011c96:	4648      	mov	r0, r9
 8011c98:	4941      	ldr	r1, [pc, #260]	; (8011da0 <rmw_create_service+0x1a0>)
 8011c9a:	f000 fedf 	bl	8012a5c <get_service_typesupport_handle>
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	d074      	beq.n	8011d8c <rmw_create_service+0x18c>
 8011ca2:	6843      	ldr	r3, [r0, #4]
 8011ca4:	617b      	str	r3, [r7, #20]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d070      	beq.n	8011d8c <rmw_create_service+0x18c>
 8011caa:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011cae:	2108      	movs	r1, #8
 8011cb0:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 8011da8 <rmw_create_service+0x1a8>
 8011cb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011cb8:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8011dac <rmw_create_service+0x1ac>
 8011cbc:	f8b3 05a2 	ldrh.w	r0, [r3, #1442]	; 0x5a2
 8011cc0:	1c42      	adds	r2, r0, #1
 8011cc2:	f8a3 25a2 	strh.w	r2, [r3, #1442]	; 0x5a2
 8011cc6:	f001 fca1 	bl	801360c <uxr_object_id>
 8011cca:	2364      	movs	r3, #100	; 0x64
 8011ccc:	6138      	str	r0, [r7, #16]
 8011cce:	4652      	mov	r2, sl
 8011cd0:	4649      	mov	r1, r9
 8011cd2:	6978      	ldr	r0, [r7, #20]
 8011cd4:	f000 fdfc 	bl	80128d0 <generate_service_types>
 8011cd8:	2800      	cmp	r0, #0
 8011cda:	d057      	beq.n	8011d8c <rmw_create_service+0x18c>
 8011cdc:	f8df b0d0 	ldr.w	fp, [pc, #208]	; 8011db0 <rmw_create_service+0x1b0>
 8011ce0:	233c      	movs	r3, #60	; 0x3c
 8011ce2:	4a30      	ldr	r2, [pc, #192]	; (8011da4 <rmw_create_service+0x1a4>)
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	4659      	mov	r1, fp
 8011ce8:	f000 fdc0 	bl	801286c <generate_service_topics>
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d04d      	beq.n	8011d8c <rmw_create_service+0x18c>
 8011cf0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011cf4:	a80c      	add	r0, sp, #48	; 0x30
 8011cf6:	4629      	mov	r1, r5
 8011cf8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8011cfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011d00:	f000 fd9c 	bl	801283c <convert_qos_profile>
 8011d04:	4a27      	ldr	r2, [pc, #156]	; (8011da4 <rmw_create_service+0x1a4>)
 8011d06:	a80c      	add	r0, sp, #48	; 0x30
 8011d08:	9400      	str	r4, [sp, #0]
 8011d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d0c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011d10:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8011d14:	c803      	ldmia	r0, {r0, r1}
 8011d16:	9a08      	ldr	r2, [sp, #32]
 8011d18:	9005      	str	r0, [sp, #20]
 8011d1a:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8011d1e:	2306      	movs	r3, #6
 8011d20:	f8ad 1018 	strh.w	r1, [sp, #24]
 8011d24:	9307      	str	r3, [sp, #28]
 8011d26:	6811      	ldr	r1, [r2, #0]
 8011d28:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011d2c:	693a      	ldr	r2, [r7, #16]
 8011d2e:	f001 fb75 	bl	801341c <uxr_buffer_create_replier_bin>
 8011d32:	4602      	mov	r2, r0
 8011d34:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8011d38:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8011d3c:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011d40:	f000 fd60 	bl	8012804 <run_xrce_session>
 8011d44:	b310      	cbz	r0, 8011d8c <rmw_create_service+0x18c>
 8011d46:	7a2b      	ldrb	r3, [r5, #8]
 8011d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d4c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8011d50:	2b02      	cmp	r3, #2
 8011d52:	920e      	str	r2, [sp, #56]	; 0x38
 8011d54:	f04f 0200 	mov.w	r2, #0
 8011d58:	920f      	str	r2, [sp, #60]	; 0x3c
 8011d5a:	bf0c      	ite	eq
 8011d5c:	e9d0 23df 	ldrdeq	r2, r3, [r0, #892]	; 0x37c
 8011d60:	e9d0 32dd 	ldrdne	r3, r2, [r0, #884]	; 0x374
 8011d64:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011d68:	930b      	str	r3, [sp, #44]	; 0x2c
 8011d6a:	ab0e      	add	r3, sp, #56	; 0x38
 8011d6c:	673a      	str	r2, [r7, #112]	; 0x70
 8011d6e:	f8d0 20e4 	ldr.w	r2, [r0, #228]	; 0xe4
 8011d72:	9300      	str	r3, [sp, #0]
 8011d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011d76:	6811      	ldr	r1, [r2, #0]
 8011d78:	693a      	ldr	r2, [r7, #16]
 8011d7a:	f001 fc77 	bl	801366c <uxr_buffer_request_data>
 8011d7e:	8338      	strh	r0, [r7, #24]
 8011d80:	e000      	b.n	8011d84 <rmw_create_service+0x184>
 8011d82:	2600      	movs	r6, #0
 8011d84:	4630      	mov	r0, r6
 8011d86:	b011      	add	sp, #68	; 0x44
 8011d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d8c:	4630      	mov	r0, r6
 8011d8e:	2600      	movs	r6, #0
 8011d90:	f000 fbfe 	bl	8012590 <rmw_uxrce_fini_service_memory>
 8011d94:	4630      	mov	r0, r6
 8011d96:	b011      	add	sp, #68	; 0x44
 8011d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d9c:	200113f4 	.word	0x200113f4
 8011da0:	0801c980 	.word	0x0801c980
 8011da4:	2000ca64 	.word	0x2000ca64
 8011da8:	2000caa0 	.word	0x2000caa0
 8011dac:	2000ca00 	.word	0x2000ca00
 8011db0:	2000c9c4 	.word	0x2000c9c4

08011db4 <rmw_destroy_service>:
 8011db4:	b570      	push	{r4, r5, r6, lr}
 8011db6:	b128      	cbz	r0, 8011dc4 <rmw_destroy_service+0x10>
 8011db8:	4604      	mov	r4, r0
 8011dba:	6800      	ldr	r0, [r0, #0]
 8011dbc:	460d      	mov	r5, r1
 8011dbe:	f000 fe33 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 8011dc2:	b910      	cbnz	r0, 8011dca <rmw_destroy_service+0x16>
 8011dc4:	2401      	movs	r4, #1
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	bd70      	pop	{r4, r5, r6, pc}
 8011dca:	6863      	ldr	r3, [r4, #4]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d0f9      	beq.n	8011dc4 <rmw_destroy_service+0x10>
 8011dd0:	2d00      	cmp	r5, #0
 8011dd2:	d0f7      	beq.n	8011dc4 <rmw_destroy_service+0x10>
 8011dd4:	6828      	ldr	r0, [r5, #0]
 8011dd6:	f000 fe27 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 8011dda:	2800      	cmp	r0, #0
 8011ddc:	d0f2      	beq.n	8011dc4 <rmw_destroy_service+0x10>
 8011dde:	686e      	ldr	r6, [r5, #4]
 8011de0:	2e00      	cmp	r6, #0
 8011de2:	d0ef      	beq.n	8011dc4 <rmw_destroy_service+0x10>
 8011de4:	6864      	ldr	r4, [r4, #4]
 8011de6:	6932      	ldr	r2, [r6, #16]
 8011de8:	6920      	ldr	r0, [r4, #16]
 8011dea:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011dee:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011df2:	6819      	ldr	r1, [r3, #0]
 8011df4:	f001 fc74 	bl	80136e0 <uxr_buffer_cancel_data>
 8011df8:	4602      	mov	r2, r0
 8011dfa:	6920      	ldr	r0, [r4, #16]
 8011dfc:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011e00:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011e04:	f000 fcfe 	bl	8012804 <run_xrce_session>
 8011e08:	6920      	ldr	r0, [r4, #16]
 8011e0a:	6932      	ldr	r2, [r6, #16]
 8011e0c:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8011e10:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011e14:	6819      	ldr	r1, [r3, #0]
 8011e16:	f001 f8ff 	bl	8013018 <uxr_buffer_delete_entity>
 8011e1a:	4602      	mov	r2, r0
 8011e1c:	6920      	ldr	r0, [r4, #16]
 8011e1e:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8011e22:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8011e26:	f000 fced 	bl	8012804 <run_xrce_session>
 8011e2a:	4603      	mov	r3, r0
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	bf14      	ite	ne
 8011e32:	2400      	movne	r4, #0
 8011e34:	2402      	moveq	r4, #2
 8011e36:	f000 fbab 	bl	8012590 <rmw_uxrce_fini_service_memory>
 8011e3a:	e7c4      	b.n	8011dc6 <rmw_destroy_service+0x12>

08011e3c <rmw_service_response_publisher_get_actual_qos>:
 8011e3c:	b181      	cbz	r1, 8011e60 <rmw_service_response_publisher_get_actual_qos+0x24>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	b510      	push	{r4, lr}
 8011e42:	fab0 f480 	clz	r4, r0
 8011e46:	0964      	lsrs	r4, r4, #5
 8011e48:	b140      	cbz	r0, 8011e5c <rmw_service_response_publisher_get_actual_qos+0x20>
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	4608      	mov	r0, r1
 8011e4e:	2250      	movs	r2, #80	; 0x50
 8011e50:	f103 0120 	add.w	r1, r3, #32
 8011e54:	f009 fdf3 	bl	801ba3e <memcpy>
 8011e58:	4620      	mov	r0, r4
 8011e5a:	bd10      	pop	{r4, pc}
 8011e5c:	200b      	movs	r0, #11
 8011e5e:	bd10      	pop	{r4, pc}
 8011e60:	200b      	movs	r0, #11
 8011e62:	4770      	bx	lr

08011e64 <rmw_service_request_subscription_get_actual_qos>:
 8011e64:	b178      	cbz	r0, 8011e86 <rmw_service_request_subscription_get_actual_qos+0x22>
 8011e66:	b510      	push	{r4, lr}
 8011e68:	fab1 f481 	clz	r4, r1
 8011e6c:	0964      	lsrs	r4, r4, #5
 8011e6e:	b141      	cbz	r1, 8011e82 <rmw_service_request_subscription_get_actual_qos+0x1e>
 8011e70:	6843      	ldr	r3, [r0, #4]
 8011e72:	2250      	movs	r2, #80	; 0x50
 8011e74:	4608      	mov	r0, r1
 8011e76:	f103 0120 	add.w	r1, r3, #32
 8011e7a:	f009 fde0 	bl	801ba3e <memcpy>
 8011e7e:	4620      	mov	r0, r4
 8011e80:	bd10      	pop	{r4, pc}
 8011e82:	200b      	movs	r0, #11
 8011e84:	bd10      	pop	{r4, pc}
 8011e86:	200b      	movs	r0, #11
 8011e88:	4770      	bx	lr
 8011e8a:	bf00      	nop

08011e8c <rmw_create_subscription>:
 8011e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e90:	b08d      	sub	sp, #52	; 0x34
 8011e92:	2900      	cmp	r1, #0
 8011e94:	f000 80d8 	beq.w	8012048 <rmw_create_subscription+0x1bc>
 8011e98:	4604      	mov	r4, r0
 8011e9a:	2800      	cmp	r0, #0
 8011e9c:	f000 80d4 	beq.w	8012048 <rmw_create_subscription+0x1bc>
 8011ea0:	6800      	ldr	r0, [r0, #0]
 8011ea2:	460e      	mov	r6, r1
 8011ea4:	4615      	mov	r5, r2
 8011ea6:	461f      	mov	r7, r3
 8011ea8:	f000 fdbe 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 8011eac:	f080 0001 	eor.w	r0, r0, #1
 8011eb0:	b2c0      	uxtb	r0, r0
 8011eb2:	2800      	cmp	r0, #0
 8011eb4:	f040 80c8 	bne.w	8012048 <rmw_create_subscription+0x1bc>
 8011eb8:	2d00      	cmp	r5, #0
 8011eba:	f000 80c5 	beq.w	8012048 <rmw_create_subscription+0x1bc>
 8011ebe:	782b      	ldrb	r3, [r5, #0]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	f000 80c1 	beq.w	8012048 <rmw_create_subscription+0x1bc>
 8011ec6:	2f00      	cmp	r7, #0
 8011ec8:	f000 80be 	beq.w	8012048 <rmw_create_subscription+0x1bc>
 8011ecc:	4867      	ldr	r0, [pc, #412]	; (801206c <rmw_create_subscription+0x1e0>)
 8011ece:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8011ed2:	f007 fc5d 	bl	8019790 <get_memory>
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	2800      	cmp	r0, #0
 8011eda:	f000 80b6 	beq.w	801204a <rmw_create_subscription+0x1be>
 8011ede:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8011ee2:	f108 0a98 	add.w	sl, r8, #152	; 0x98
 8011ee6:	f8c8 8080 	str.w	r8, [r8, #128]	; 0x80
 8011eea:	f007 fcb9 	bl	8019860 <rmw_get_implementation_identifier>
 8011eee:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8011ef2:	f8c8 a084 	str.w	sl, [r8, #132]	; 0x84
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	f7ee f9ac 	bl	8000254 <strlen>
 8011efc:	3001      	adds	r0, #1
 8011efe:	f108 047c 	add.w	r4, r8, #124	; 0x7c
 8011f02:	283c      	cmp	r0, #60	; 0x3c
 8011f04:	f200 80a5 	bhi.w	8012052 <rmw_create_subscription+0x1c6>
 8011f08:	462b      	mov	r3, r5
 8011f0a:	4a59      	ldr	r2, [pc, #356]	; (8012070 <rmw_create_subscription+0x1e4>)
 8011f0c:	213c      	movs	r1, #60	; 0x3c
 8011f0e:	4650      	mov	r0, sl
 8011f10:	f009 fb5c 	bl	801b5cc <sniprintf>
 8011f14:	4639      	mov	r1, r7
 8011f16:	2250      	movs	r2, #80	; 0x50
 8011f18:	f108 0028 	add.w	r0, r8, #40	; 0x28
 8011f1c:	f8c8 9020 	str.w	r9, [r8, #32]
 8011f20:	f009 fd8d 	bl	801ba3e <memcpy>
 8011f24:	4630      	mov	r0, r6
 8011f26:	4953      	ldr	r1, [pc, #332]	; (8012074 <rmw_create_subscription+0x1e8>)
 8011f28:	f000 fd8c 	bl	8012a44 <get_message_typesupport_handle>
 8011f2c:	2800      	cmp	r0, #0
 8011f2e:	f000 8090 	beq.w	8012052 <rmw_create_subscription+0x1c6>
 8011f32:	6842      	ldr	r2, [r0, #4]
 8011f34:	f8c8 2018 	str.w	r2, [r8, #24]
 8011f38:	2a00      	cmp	r2, #0
 8011f3a:	f000 808a 	beq.w	8012052 <rmw_create_subscription+0x1c6>
 8011f3e:	4629      	mov	r1, r5
 8011f40:	463b      	mov	r3, r7
 8011f42:	4648      	mov	r0, r9
 8011f44:	f007 fcbc 	bl	80198c0 <create_topic>
 8011f48:	f8c8 001c 	str.w	r0, [r8, #28]
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	f000 8085 	beq.w	801205c <rmw_create_subscription+0x1d0>
 8011f52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011f56:	2104      	movs	r1, #4
 8011f58:	2506      	movs	r5, #6
 8011f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011f5e:	f8b3 059c 	ldrh.w	r0, [r3, #1436]	; 0x59c
 8011f62:	1c42      	adds	r2, r0, #1
 8011f64:	f8a3 259c 	strh.w	r2, [r3, #1436]	; 0x59c
 8011f68:	f001 fb50 	bl	801360c <uxr_object_id>
 8011f6c:	f8c8 0010 	str.w	r0, [r8, #16]
 8011f70:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011f74:	f8d0 3384 	ldr.w	r3, [r0, #900]	; 0x384
 8011f78:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8011f7c:	9500      	str	r5, [sp, #0]
 8011f7e:	6819      	ldr	r1, [r3, #0]
 8011f80:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011f84:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8011f88:	f001 f92a 	bl	80131e0 <uxr_buffer_create_subscriber_bin>
 8011f8c:	4602      	mov	r2, r0
 8011f8e:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011f92:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8011f96:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8011f9a:	f000 fc33 	bl	8012804 <run_xrce_session>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	d057      	beq.n	8012052 <rmw_create_subscription+0x1c6>
 8011fa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011fa6:	4629      	mov	r1, r5
 8011fa8:	ae08      	add	r6, sp, #32
 8011faa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011fae:	f8b3 059e 	ldrh.w	r0, [r3, #1438]	; 0x59e
 8011fb2:	1c42      	adds	r2, r0, #1
 8011fb4:	f8a3 259e 	strh.w	r2, [r3, #1438]	; 0x59e
 8011fb8:	f001 fb28 	bl	801360c <uxr_object_id>
 8011fbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011fc0:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8011fc4:	4639      	mov	r1, r7
 8011fc6:	f8c8 0014 	str.w	r0, [r8, #20]
 8011fca:	4630      	mov	r0, r6
 8011fcc:	f8da b384 	ldr.w	fp, [sl, #900]	; 0x384
 8011fd0:	9305      	str	r3, [sp, #20]
 8011fd2:	f000 fc33 	bl	801283c <convert_qos_profile>
 8011fd6:	9503      	str	r5, [sp, #12]
 8011fd8:	9b05      	ldr	r3, [sp, #20]
 8011fda:	e896 0003 	ldmia.w	r6, {r0, r1}
 8011fde:	9001      	str	r0, [sp, #4]
 8011fe0:	f50a 7028 	add.w	r0, sl, #672	; 0x2a0
 8011fe4:	f8ad 1008 	strh.w	r1, [sp, #8]
 8011fe8:	691b      	ldr	r3, [r3, #16]
 8011fea:	9300      	str	r3, [sp, #0]
 8011fec:	f8db 1000 	ldr.w	r1, [fp]
 8011ff0:	e9d8 3204 	ldrd	r3, r2, [r8, #16]
 8011ff4:	f001 f99a 	bl	801332c <uxr_buffer_create_datareader_bin>
 8011ff8:	4602      	mov	r2, r0
 8011ffa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8011ffe:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 8012002:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 8012006:	f000 fbfd 	bl	8012804 <run_xrce_session>
 801200a:	b310      	cbz	r0, 8012052 <rmw_create_subscription+0x1c6>
 801200c:	7a3b      	ldrb	r3, [r7, #8]
 801200e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012012:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8012016:	2b02      	cmp	r3, #2
 8012018:	920a      	str	r2, [sp, #40]	; 0x28
 801201a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801201e:	f04f 0200 	mov.w	r2, #0
 8012022:	bf08      	it	eq
 8012024:	f8d0 3380 	ldreq.w	r3, [r0, #896]	; 0x380
 8012028:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801202c:	bf18      	it	ne
 801202e:	f8d0 30d4 	ldrne.w	r3, [r0, #212]	; 0xd4
 8012032:	920b      	str	r2, [sp, #44]	; 0x2c
 8012034:	9307      	str	r3, [sp, #28]
 8012036:	ab0a      	add	r3, sp, #40	; 0x28
 8012038:	9300      	str	r3, [sp, #0]
 801203a:	9b07      	ldr	r3, [sp, #28]
 801203c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8012040:	6809      	ldr	r1, [r1, #0]
 8012042:	f001 fb13 	bl	801366c <uxr_buffer_request_data>
 8012046:	e000      	b.n	801204a <rmw_create_subscription+0x1be>
 8012048:	2400      	movs	r4, #0
 801204a:	4620      	mov	r0, r4
 801204c:	b00d      	add	sp, #52	; 0x34
 801204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012052:	f8d8 001c 	ldr.w	r0, [r8, #28]
 8012056:	b108      	cbz	r0, 801205c <rmw_create_subscription+0x1d0>
 8012058:	f000 fac6 	bl	80125e8 <rmw_uxrce_fini_topic_memory>
 801205c:	4620      	mov	r0, r4
 801205e:	2400      	movs	r4, #0
 8012060:	f000 fa80 	bl	8012564 <rmw_uxrce_fini_subscription_memory>
 8012064:	4620      	mov	r0, r4
 8012066:	b00d      	add	sp, #52	; 0x34
 8012068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801206c:	20011424 	.word	0x20011424
 8012070:	0801d3ac 	.word	0x0801d3ac
 8012074:	0801c980 	.word	0x0801c980

08012078 <rmw_subscription_get_actual_qos>:
 8012078:	b178      	cbz	r0, 801209a <rmw_subscription_get_actual_qos+0x22>
 801207a:	b510      	push	{r4, lr}
 801207c:	fab1 f481 	clz	r4, r1
 8012080:	0964      	lsrs	r4, r4, #5
 8012082:	b141      	cbz	r1, 8012096 <rmw_subscription_get_actual_qos+0x1e>
 8012084:	6843      	ldr	r3, [r0, #4]
 8012086:	2250      	movs	r2, #80	; 0x50
 8012088:	4608      	mov	r0, r1
 801208a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801208e:	f009 fcd6 	bl	801ba3e <memcpy>
 8012092:	4620      	mov	r0, r4
 8012094:	bd10      	pop	{r4, pc}
 8012096:	200b      	movs	r0, #11
 8012098:	bd10      	pop	{r4, pc}
 801209a:	200b      	movs	r0, #11
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop

080120a0 <rmw_destroy_subscription>:
 80120a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120a4:	b128      	cbz	r0, 80120b2 <rmw_destroy_subscription+0x12>
 80120a6:	4604      	mov	r4, r0
 80120a8:	6800      	ldr	r0, [r0, #0]
 80120aa:	460d      	mov	r5, r1
 80120ac:	f000 fcbc 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 80120b0:	b918      	cbnz	r0, 80120ba <rmw_destroy_subscription+0x1a>
 80120b2:	2401      	movs	r4, #1
 80120b4:	4620      	mov	r0, r4
 80120b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ba:	6863      	ldr	r3, [r4, #4]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d0f8      	beq.n	80120b2 <rmw_destroy_subscription+0x12>
 80120c0:	fab5 f485 	clz	r4, r5
 80120c4:	0964      	lsrs	r4, r4, #5
 80120c6:	2d00      	cmp	r5, #0
 80120c8:	d0f3      	beq.n	80120b2 <rmw_destroy_subscription+0x12>
 80120ca:	6828      	ldr	r0, [r5, #0]
 80120cc:	f000 fcac 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 80120d0:	2800      	cmp	r0, #0
 80120d2:	d0ee      	beq.n	80120b2 <rmw_destroy_subscription+0x12>
 80120d4:	686e      	ldr	r6, [r5, #4]
 80120d6:	2e00      	cmp	r6, #0
 80120d8:	d0eb      	beq.n	80120b2 <rmw_destroy_subscription+0x12>
 80120da:	6a37      	ldr	r7, [r6, #32]
 80120dc:	6972      	ldr	r2, [r6, #20]
 80120de:	6938      	ldr	r0, [r7, #16]
 80120e0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80120e4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80120e8:	6819      	ldr	r1, [r3, #0]
 80120ea:	f001 faf9 	bl	80136e0 <uxr_buffer_cancel_data>
 80120ee:	4602      	mov	r2, r0
 80120f0:	6938      	ldr	r0, [r7, #16]
 80120f2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80120f6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80120fa:	f000 fb83 	bl	8012804 <run_xrce_session>
 80120fe:	69f0      	ldr	r0, [r6, #28]
 8012100:	f007 fc2e 	bl	8019960 <destroy_topic>
 8012104:	6a33      	ldr	r3, [r6, #32]
 8012106:	6972      	ldr	r2, [r6, #20]
 8012108:	6918      	ldr	r0, [r3, #16]
 801210a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801210e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012112:	6819      	ldr	r1, [r3, #0]
 8012114:	f000 ff80 	bl	8013018 <uxr_buffer_delete_entity>
 8012118:	6a33      	ldr	r3, [r6, #32]
 801211a:	4680      	mov	r8, r0
 801211c:	6932      	ldr	r2, [r6, #16]
 801211e:	6918      	ldr	r0, [r3, #16]
 8012120:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012124:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012128:	6819      	ldr	r1, [r3, #0]
 801212a:	f000 ff75 	bl	8013018 <uxr_buffer_delete_entity>
 801212e:	4606      	mov	r6, r0
 8012130:	6938      	ldr	r0, [r7, #16]
 8012132:	4642      	mov	r2, r8
 8012134:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012138:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801213c:	f000 fb62 	bl	8012804 <run_xrce_session>
 8012140:	693f      	ldr	r7, [r7, #16]
 8012142:	4632      	mov	r2, r6
 8012144:	4606      	mov	r6, r0
 8012146:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801214a:	4638      	mov	r0, r7
 801214c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8012150:	f000 fb58 	bl	8012804 <run_xrce_session>
 8012154:	b126      	cbz	r6, 8012160 <rmw_destroy_subscription+0xc0>
 8012156:	b118      	cbz	r0, 8012160 <rmw_destroy_subscription+0xc0>
 8012158:	4628      	mov	r0, r5
 801215a:	f000 fa03 	bl	8012564 <rmw_uxrce_fini_subscription_memory>
 801215e:	e7a9      	b.n	80120b4 <rmw_destroy_subscription+0x14>
 8012160:	2402      	movs	r4, #2
 8012162:	e7f9      	b.n	8012158 <rmw_destroy_subscription+0xb8>

08012164 <rmw_take_with_info>:
 8012164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012166:	4604      	mov	r4, r0
 8012168:	6800      	ldr	r0, [r0, #0]
 801216a:	b089      	sub	sp, #36	; 0x24
 801216c:	460f      	mov	r7, r1
 801216e:	4615      	mov	r5, r2
 8012170:	b128      	cbz	r0, 801217e <rmw_take_with_info+0x1a>
 8012172:	4b24      	ldr	r3, [pc, #144]	; (8012204 <rmw_take_with_info+0xa0>)
 8012174:	6819      	ldr	r1, [r3, #0]
 8012176:	f7ee f863 	bl	8000240 <strcmp>
 801217a:	2800      	cmp	r0, #0
 801217c:	d13e      	bne.n	80121fc <rmw_take_with_info+0x98>
 801217e:	b305      	cbz	r5, 80121c2 <rmw_take_with_info+0x5e>
 8012180:	2300      	movs	r3, #0
 8012182:	6864      	ldr	r4, [r4, #4]
 8012184:	702b      	strb	r3, [r5, #0]
 8012186:	f000 fabf 	bl	8012708 <rmw_uxrce_clean_expired_static_input_buffer>
 801218a:	4620      	mov	r0, r4
 801218c:	f000 fa92 	bl	80126b4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8012190:	4606      	mov	r6, r0
 8012192:	b1f0      	cbz	r0, 80121d2 <rmw_take_with_info+0x6e>
 8012194:	6881      	ldr	r1, [r0, #8]
 8012196:	4668      	mov	r0, sp
 8012198:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 801219c:	3110      	adds	r1, #16
 801219e:	f7fc fc97 	bl	800ead0 <ucdr_init_buffer>
 80121a2:	69a3      	ldr	r3, [r4, #24]
 80121a4:	4639      	mov	r1, r7
 80121a6:	4668      	mov	r0, sp
 80121a8:	68db      	ldr	r3, [r3, #12]
 80121aa:	4798      	blx	r3
 80121ac:	4604      	mov	r4, r0
 80121ae:	4631      	mov	r1, r6
 80121b0:	4815      	ldr	r0, [pc, #84]	; (8012208 <rmw_take_with_info+0xa4>)
 80121b2:	f007 fafd 	bl	80197b0 <put_memory>
 80121b6:	702c      	strb	r4, [r5, #0]
 80121b8:	f084 0001 	eor.w	r0, r4, #1
 80121bc:	b2c0      	uxtb	r0, r0
 80121be:	b009      	add	sp, #36	; 0x24
 80121c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121c2:	6864      	ldr	r4, [r4, #4]
 80121c4:	f000 faa0 	bl	8012708 <rmw_uxrce_clean_expired_static_input_buffer>
 80121c8:	4620      	mov	r0, r4
 80121ca:	f000 fa73 	bl	80126b4 <rmw_uxrce_find_static_input_buffer_by_owner>
 80121ce:	4605      	mov	r5, r0
 80121d0:	b910      	cbnz	r0, 80121d8 <rmw_take_with_info+0x74>
 80121d2:	2001      	movs	r0, #1
 80121d4:	b009      	add	sp, #36	; 0x24
 80121d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121d8:	68a9      	ldr	r1, [r5, #8]
 80121da:	4668      	mov	r0, sp
 80121dc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	; 0x810
 80121e0:	3110      	adds	r1, #16
 80121e2:	f7fc fc75 	bl	800ead0 <ucdr_init_buffer>
 80121e6:	69a3      	ldr	r3, [r4, #24]
 80121e8:	4639      	mov	r1, r7
 80121ea:	4668      	mov	r0, sp
 80121ec:	68db      	ldr	r3, [r3, #12]
 80121ee:	4798      	blx	r3
 80121f0:	4629      	mov	r1, r5
 80121f2:	4604      	mov	r4, r0
 80121f4:	4804      	ldr	r0, [pc, #16]	; (8012208 <rmw_take_with_info+0xa4>)
 80121f6:	f007 fadb 	bl	80197b0 <put_memory>
 80121fa:	e7dd      	b.n	80121b8 <rmw_take_with_info+0x54>
 80121fc:	200c      	movs	r0, #12
 80121fe:	b009      	add	sp, #36	; 0x24
 8012200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012202:	bf00      	nop
 8012204:	0801da0c 	.word	0x0801da0c
 8012208:	20011414 	.word	0x20011414

0801220c <rmw_uxrce_transport_init>:
 801220c:	b508      	push	{r3, lr}
 801220e:	b108      	cbz	r0, 8012214 <rmw_uxrce_transport_init+0x8>
 8012210:	f100 0210 	add.w	r2, r0, #16
 8012214:	b139      	cbz	r1, 8012226 <rmw_uxrce_transport_init+0x1a>
 8012216:	6949      	ldr	r1, [r1, #20]
 8012218:	4610      	mov	r0, r2
 801221a:	f001 f9bf 	bl	801359c <uxr_init_custom_transport>
 801221e:	f080 0001 	eor.w	r0, r0, #1
 8012222:	b2c0      	uxtb	r0, r0
 8012224:	bd08      	pop	{r3, pc}
 8012226:	4b04      	ldr	r3, [pc, #16]	; (8012238 <rmw_uxrce_transport_init+0x2c>)
 8012228:	4610      	mov	r0, r2
 801222a:	6859      	ldr	r1, [r3, #4]
 801222c:	f001 f9b6 	bl	801359c <uxr_init_custom_transport>
 8012230:	f080 0001 	eor.w	r0, r0, #1
 8012234:	b2c0      	uxtb	r0, r0
 8012236:	bd08      	pop	{r3, pc}
 8012238:	2000c96c 	.word	0x2000c96c

0801223c <rmw_uxrce_init_service_memory>:
 801223c:	b1e2      	cbz	r2, 8012278 <rmw_uxrce_init_service_memory+0x3c>
 801223e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012242:	7b05      	ldrb	r5, [r0, #12]
 8012244:	4606      	mov	r6, r0
 8012246:	b9ad      	cbnz	r5, 8012274 <rmw_uxrce_init_service_memory+0x38>
 8012248:	23c8      	movs	r3, #200	; 0xc8
 801224a:	4617      	mov	r7, r2
 801224c:	460c      	mov	r4, r1
 801224e:	46a8      	mov	r8, r5
 8012250:	6083      	str	r3, [r0, #8]
 8012252:	f240 1301 	movw	r3, #257	; 0x101
 8012256:	e9c0 5500 	strd	r5, r5, [r0]
 801225a:	8183      	strh	r3, [r0, #12]
 801225c:	3501      	adds	r5, #1
 801225e:	4621      	mov	r1, r4
 8012260:	4630      	mov	r0, r6
 8012262:	f007 faa5 	bl	80197b0 <put_memory>
 8012266:	42af      	cmp	r7, r5
 8012268:	60a4      	str	r4, [r4, #8]
 801226a:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 801226e:	f804 8cbc 	strb.w	r8, [r4, #-188]
 8012272:	d1f3      	bne.n	801225c <rmw_uxrce_init_service_memory+0x20>
 8012274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012278:	4770      	bx	lr
 801227a:	bf00      	nop

0801227c <rmw_uxrce_init_client_memory>:
 801227c:	b1e2      	cbz	r2, 80122b8 <rmw_uxrce_init_client_memory+0x3c>
 801227e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012282:	7b05      	ldrb	r5, [r0, #12]
 8012284:	4606      	mov	r6, r0
 8012286:	b9ad      	cbnz	r5, 80122b4 <rmw_uxrce_init_client_memory+0x38>
 8012288:	23c8      	movs	r3, #200	; 0xc8
 801228a:	4617      	mov	r7, r2
 801228c:	460c      	mov	r4, r1
 801228e:	46a8      	mov	r8, r5
 8012290:	6083      	str	r3, [r0, #8]
 8012292:	f240 1301 	movw	r3, #257	; 0x101
 8012296:	e9c0 5500 	strd	r5, r5, [r0]
 801229a:	8183      	strh	r3, [r0, #12]
 801229c:	3501      	adds	r5, #1
 801229e:	4621      	mov	r1, r4
 80122a0:	4630      	mov	r0, r6
 80122a2:	f007 fa85 	bl	80197b0 <put_memory>
 80122a6:	42af      	cmp	r7, r5
 80122a8:	60a4      	str	r4, [r4, #8]
 80122aa:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 80122ae:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80122b2:	d1f3      	bne.n	801229c <rmw_uxrce_init_client_memory+0x20>
 80122b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122b8:	4770      	bx	lr
 80122ba:	bf00      	nop

080122bc <rmw_uxrce_init_publisher_memory>:
 80122bc:	b1e2      	cbz	r2, 80122f8 <rmw_uxrce_init_publisher_memory+0x3c>
 80122be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c2:	7b05      	ldrb	r5, [r0, #12]
 80122c4:	4606      	mov	r6, r0
 80122c6:	b9ad      	cbnz	r5, 80122f4 <rmw_uxrce_init_publisher_memory+0x38>
 80122c8:	23d8      	movs	r3, #216	; 0xd8
 80122ca:	4617      	mov	r7, r2
 80122cc:	460c      	mov	r4, r1
 80122ce:	46a8      	mov	r8, r5
 80122d0:	6083      	str	r3, [r0, #8]
 80122d2:	f240 1301 	movw	r3, #257	; 0x101
 80122d6:	e9c0 5500 	strd	r5, r5, [r0]
 80122da:	8183      	strh	r3, [r0, #12]
 80122dc:	3501      	adds	r5, #1
 80122de:	4621      	mov	r1, r4
 80122e0:	4630      	mov	r0, r6
 80122e2:	f007 fa65 	bl	80197b0 <put_memory>
 80122e6:	42af      	cmp	r7, r5
 80122e8:	60a4      	str	r4, [r4, #8]
 80122ea:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 80122ee:	f804 8ccc 	strb.w	r8, [r4, #-204]
 80122f2:	d1f3      	bne.n	80122dc <rmw_uxrce_init_publisher_memory+0x20>
 80122f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop

080122fc <rmw_uxrce_init_subscription_memory>:
 80122fc:	b1e2      	cbz	r2, 8012338 <rmw_uxrce_init_subscription_memory+0x3c>
 80122fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012302:	7b05      	ldrb	r5, [r0, #12]
 8012304:	4606      	mov	r6, r0
 8012306:	b9ad      	cbnz	r5, 8012334 <rmw_uxrce_init_subscription_memory+0x38>
 8012308:	23d8      	movs	r3, #216	; 0xd8
 801230a:	4617      	mov	r7, r2
 801230c:	460c      	mov	r4, r1
 801230e:	46a8      	mov	r8, r5
 8012310:	6083      	str	r3, [r0, #8]
 8012312:	f240 1301 	movw	r3, #257	; 0x101
 8012316:	e9c0 5500 	strd	r5, r5, [r0]
 801231a:	8183      	strh	r3, [r0, #12]
 801231c:	3501      	adds	r5, #1
 801231e:	4621      	mov	r1, r4
 8012320:	4630      	mov	r0, r6
 8012322:	f007 fa45 	bl	80197b0 <put_memory>
 8012326:	42af      	cmp	r7, r5
 8012328:	60a4      	str	r4, [r4, #8]
 801232a:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 801232e:	f804 8ccc 	strb.w	r8, [r4, #-204]
 8012332:	d1f3      	bne.n	801231c <rmw_uxrce_init_subscription_memory+0x20>
 8012334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012338:	4770      	bx	lr
 801233a:	bf00      	nop

0801233c <rmw_uxrce_init_node_memory>:
 801233c:	b1e2      	cbz	r2, 8012378 <rmw_uxrce_init_node_memory+0x3c>
 801233e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012342:	7b05      	ldrb	r5, [r0, #12]
 8012344:	4606      	mov	r6, r0
 8012346:	b9ad      	cbnz	r5, 8012374 <rmw_uxrce_init_node_memory+0x38>
 8012348:	23a4      	movs	r3, #164	; 0xa4
 801234a:	4617      	mov	r7, r2
 801234c:	460c      	mov	r4, r1
 801234e:	46a8      	mov	r8, r5
 8012350:	6083      	str	r3, [r0, #8]
 8012352:	f240 1301 	movw	r3, #257	; 0x101
 8012356:	e9c0 5500 	strd	r5, r5, [r0]
 801235a:	8183      	strh	r3, [r0, #12]
 801235c:	3501      	adds	r5, #1
 801235e:	4621      	mov	r1, r4
 8012360:	4630      	mov	r0, r6
 8012362:	f007 fa25 	bl	80197b0 <put_memory>
 8012366:	42af      	cmp	r7, r5
 8012368:	60a4      	str	r4, [r4, #8]
 801236a:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 801236e:	f804 8c98 	strb.w	r8, [r4, #-152]
 8012372:	d1f3      	bne.n	801235c <rmw_uxrce_init_node_memory+0x20>
 8012374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012378:	4770      	bx	lr
 801237a:	bf00      	nop

0801237c <rmw_uxrce_init_session_memory>:
 801237c:	b1ea      	cbz	r2, 80123ba <rmw_uxrce_init_session_memory+0x3e>
 801237e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012382:	7b05      	ldrb	r5, [r0, #12]
 8012384:	4606      	mov	r6, r0
 8012386:	b9b5      	cbnz	r5, 80123b6 <rmw_uxrce_init_session_memory+0x3a>
 8012388:	f241 58a8 	movw	r8, #5544	; 0x15a8
 801238c:	f240 1301 	movw	r3, #257	; 0x101
 8012390:	4617      	mov	r7, r2
 8012392:	460c      	mov	r4, r1
 8012394:	46a9      	mov	r9, r5
 8012396:	f8c0 8008 	str.w	r8, [r0, #8]
 801239a:	8183      	strh	r3, [r0, #12]
 801239c:	e9c0 5500 	strd	r5, r5, [r0]
 80123a0:	3501      	adds	r5, #1
 80123a2:	4621      	mov	r1, r4
 80123a4:	4630      	mov	r0, r6
 80123a6:	f007 fa03 	bl	80197b0 <put_memory>
 80123aa:	42af      	cmp	r7, r5
 80123ac:	60a4      	str	r4, [r4, #8]
 80123ae:	f884 900c 	strb.w	r9, [r4, #12]
 80123b2:	4444      	add	r4, r8
 80123b4:	d1f4      	bne.n	80123a0 <rmw_uxrce_init_session_memory+0x24>
 80123b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123ba:	4770      	bx	lr

080123bc <rmw_uxrce_init_topic_memory>:
 80123bc:	b1e2      	cbz	r2, 80123f8 <rmw_uxrce_init_topic_memory+0x3c>
 80123be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123c2:	7b05      	ldrb	r5, [r0, #12]
 80123c4:	4606      	mov	r6, r0
 80123c6:	b9ad      	cbnz	r5, 80123f4 <rmw_uxrce_init_topic_memory+0x38>
 80123c8:	231c      	movs	r3, #28
 80123ca:	4617      	mov	r7, r2
 80123cc:	460c      	mov	r4, r1
 80123ce:	46a8      	mov	r8, r5
 80123d0:	6083      	str	r3, [r0, #8]
 80123d2:	f240 1301 	movw	r3, #257	; 0x101
 80123d6:	e9c0 5500 	strd	r5, r5, [r0]
 80123da:	8183      	strh	r3, [r0, #12]
 80123dc:	3501      	adds	r5, #1
 80123de:	4621      	mov	r1, r4
 80123e0:	4630      	mov	r0, r6
 80123e2:	f007 f9e5 	bl	80197b0 <put_memory>
 80123e6:	42af      	cmp	r7, r5
 80123e8:	60a4      	str	r4, [r4, #8]
 80123ea:	f104 041c 	add.w	r4, r4, #28
 80123ee:	f804 8c10 	strb.w	r8, [r4, #-16]
 80123f2:	d1f3      	bne.n	80123dc <rmw_uxrce_init_topic_memory+0x20>
 80123f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123f8:	4770      	bx	lr
 80123fa:	bf00      	nop

080123fc <rmw_uxrce_init_static_input_buffer_memory>:
 80123fc:	b1ea      	cbz	r2, 801243a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 80123fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012402:	7b05      	ldrb	r5, [r0, #12]
 8012404:	4606      	mov	r6, r0
 8012406:	b9b5      	cbnz	r5, 8012436 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8012408:	f44f 6304 	mov.w	r3, #2112	; 0x840
 801240c:	4617      	mov	r7, r2
 801240e:	460c      	mov	r4, r1
 8012410:	46a8      	mov	r8, r5
 8012412:	6083      	str	r3, [r0, #8]
 8012414:	f240 1301 	movw	r3, #257	; 0x101
 8012418:	e9c0 5500 	strd	r5, r5, [r0]
 801241c:	8183      	strh	r3, [r0, #12]
 801241e:	3501      	adds	r5, #1
 8012420:	4621      	mov	r1, r4
 8012422:	4630      	mov	r0, r6
 8012424:	f007 f9c4 	bl	80197b0 <put_memory>
 8012428:	42af      	cmp	r7, r5
 801242a:	60a4      	str	r4, [r4, #8]
 801242c:	f884 800c 	strb.w	r8, [r4, #12]
 8012430:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 8012434:	d1f3      	bne.n	801241e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8012436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801243a:	4770      	bx	lr

0801243c <rmw_uxrce_init_init_options_impl_memory>:
 801243c:	b1e2      	cbz	r2, 8012478 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801243e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012442:	7b05      	ldrb	r5, [r0, #12]
 8012444:	4606      	mov	r6, r0
 8012446:	b9ad      	cbnz	r5, 8012474 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8012448:	232c      	movs	r3, #44	; 0x2c
 801244a:	4617      	mov	r7, r2
 801244c:	460c      	mov	r4, r1
 801244e:	46a8      	mov	r8, r5
 8012450:	6083      	str	r3, [r0, #8]
 8012452:	f240 1301 	movw	r3, #257	; 0x101
 8012456:	e9c0 5500 	strd	r5, r5, [r0]
 801245a:	8183      	strh	r3, [r0, #12]
 801245c:	3501      	adds	r5, #1
 801245e:	4621      	mov	r1, r4
 8012460:	4630      	mov	r0, r6
 8012462:	f007 f9a5 	bl	80197b0 <put_memory>
 8012466:	42af      	cmp	r7, r5
 8012468:	60a4      	str	r4, [r4, #8]
 801246a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 801246e:	f804 8c20 	strb.w	r8, [r4, #-32]
 8012472:	d1f3      	bne.n	801245c <rmw_uxrce_init_init_options_impl_memory+0x20>
 8012474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012478:	4770      	bx	lr
 801247a:	bf00      	nop

0801247c <rmw_uxrce_init_wait_set_memory>:
 801247c:	b1e2      	cbz	r2, 80124b8 <rmw_uxrce_init_wait_set_memory+0x3c>
 801247e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012482:	7b05      	ldrb	r5, [r0, #12]
 8012484:	4606      	mov	r6, r0
 8012486:	b9ad      	cbnz	r5, 80124b4 <rmw_uxrce_init_wait_set_memory+0x38>
 8012488:	231c      	movs	r3, #28
 801248a:	4617      	mov	r7, r2
 801248c:	460c      	mov	r4, r1
 801248e:	46a8      	mov	r8, r5
 8012490:	6083      	str	r3, [r0, #8]
 8012492:	f240 1301 	movw	r3, #257	; 0x101
 8012496:	e9c0 5500 	strd	r5, r5, [r0]
 801249a:	8183      	strh	r3, [r0, #12]
 801249c:	3501      	adds	r5, #1
 801249e:	4621      	mov	r1, r4
 80124a0:	4630      	mov	r0, r6
 80124a2:	f007 f985 	bl	80197b0 <put_memory>
 80124a6:	42af      	cmp	r7, r5
 80124a8:	60a4      	str	r4, [r4, #8]
 80124aa:	f104 041c 	add.w	r4, r4, #28
 80124ae:	f804 8c10 	strb.w	r8, [r4, #-16]
 80124b2:	d1f3      	bne.n	801249c <rmw_uxrce_init_wait_set_memory+0x20>
 80124b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124b8:	4770      	bx	lr
 80124ba:	bf00      	nop

080124bc <rmw_uxrce_init_guard_condition_memory>:
 80124bc:	b1e2      	cbz	r2, 80124f8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 80124be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124c2:	7b05      	ldrb	r5, [r0, #12]
 80124c4:	4606      	mov	r6, r0
 80124c6:	b9ad      	cbnz	r5, 80124f4 <rmw_uxrce_init_guard_condition_memory+0x38>
 80124c8:	2320      	movs	r3, #32
 80124ca:	4617      	mov	r7, r2
 80124cc:	460c      	mov	r4, r1
 80124ce:	46a8      	mov	r8, r5
 80124d0:	6083      	str	r3, [r0, #8]
 80124d2:	f240 1301 	movw	r3, #257	; 0x101
 80124d6:	e9c0 5500 	strd	r5, r5, [r0]
 80124da:	8183      	strh	r3, [r0, #12]
 80124dc:	3501      	adds	r5, #1
 80124de:	4621      	mov	r1, r4
 80124e0:	4630      	mov	r0, r6
 80124e2:	f007 f965 	bl	80197b0 <put_memory>
 80124e6:	42af      	cmp	r7, r5
 80124e8:	60a4      	str	r4, [r4, #8]
 80124ea:	f104 0420 	add.w	r4, r4, #32
 80124ee:	f804 8c14 	strb.w	r8, [r4, #-20]
 80124f2:	d1f3      	bne.n	80124dc <rmw_uxrce_init_guard_condition_memory+0x20>
 80124f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124f8:	4770      	bx	lr
 80124fa:	bf00      	nop

080124fc <rmw_uxrce_fini_session_memory>:
 80124fc:	4601      	mov	r1, r0
 80124fe:	4801      	ldr	r0, [pc, #4]	; (8012504 <rmw_uxrce_fini_session_memory+0x8>)
 8012500:	f007 b956 	b.w	80197b0 <put_memory>
 8012504:	20011404 	.word	0x20011404

08012508 <rmw_uxrce_fini_node_memory>:
 8012508:	b538      	push	{r3, r4, r5, lr}
 801250a:	4604      	mov	r4, r0
 801250c:	6800      	ldr	r0, [r0, #0]
 801250e:	b128      	cbz	r0, 801251c <rmw_uxrce_fini_node_memory+0x14>
 8012510:	4b07      	ldr	r3, [pc, #28]	; (8012530 <rmw_uxrce_fini_node_memory+0x28>)
 8012512:	6819      	ldr	r1, [r3, #0]
 8012514:	f7ed fe94 	bl	8000240 <strcmp>
 8012518:	b940      	cbnz	r0, 801252c <rmw_uxrce_fini_node_memory+0x24>
 801251a:	6020      	str	r0, [r4, #0]
 801251c:	6861      	ldr	r1, [r4, #4]
 801251e:	b129      	cbz	r1, 801252c <rmw_uxrce_fini_node_memory+0x24>
 8012520:	2500      	movs	r5, #0
 8012522:	4804      	ldr	r0, [pc, #16]	; (8012534 <rmw_uxrce_fini_node_memory+0x2c>)
 8012524:	610d      	str	r5, [r1, #16]
 8012526:	f007 f943 	bl	80197b0 <put_memory>
 801252a:	6065      	str	r5, [r4, #4]
 801252c:	bd38      	pop	{r3, r4, r5, pc}
 801252e:	bf00      	nop
 8012530:	0801da0c 	.word	0x0801da0c
 8012534:	200113d4 	.word	0x200113d4

08012538 <rmw_uxrce_fini_publisher_memory>:
 8012538:	b510      	push	{r4, lr}
 801253a:	4604      	mov	r4, r0
 801253c:	6800      	ldr	r0, [r0, #0]
 801253e:	b128      	cbz	r0, 801254c <rmw_uxrce_fini_publisher_memory+0x14>
 8012540:	4b06      	ldr	r3, [pc, #24]	; (801255c <rmw_uxrce_fini_publisher_memory+0x24>)
 8012542:	6819      	ldr	r1, [r3, #0]
 8012544:	f7ed fe7c 	bl	8000240 <strcmp>
 8012548:	b938      	cbnz	r0, 801255a <rmw_uxrce_fini_publisher_memory+0x22>
 801254a:	6020      	str	r0, [r4, #0]
 801254c:	6861      	ldr	r1, [r4, #4]
 801254e:	b121      	cbz	r1, 801255a <rmw_uxrce_fini_publisher_memory+0x22>
 8012550:	4803      	ldr	r0, [pc, #12]	; (8012560 <rmw_uxrce_fini_publisher_memory+0x28>)
 8012552:	f007 f92d 	bl	80197b0 <put_memory>
 8012556:	2300      	movs	r3, #0
 8012558:	6063      	str	r3, [r4, #4]
 801255a:	bd10      	pop	{r4, pc}
 801255c:	0801da0c 	.word	0x0801da0c
 8012560:	200113e4 	.word	0x200113e4

08012564 <rmw_uxrce_fini_subscription_memory>:
 8012564:	b510      	push	{r4, lr}
 8012566:	4604      	mov	r4, r0
 8012568:	6800      	ldr	r0, [r0, #0]
 801256a:	b128      	cbz	r0, 8012578 <rmw_uxrce_fini_subscription_memory+0x14>
 801256c:	4b06      	ldr	r3, [pc, #24]	; (8012588 <rmw_uxrce_fini_subscription_memory+0x24>)
 801256e:	6819      	ldr	r1, [r3, #0]
 8012570:	f7ed fe66 	bl	8000240 <strcmp>
 8012574:	b938      	cbnz	r0, 8012586 <rmw_uxrce_fini_subscription_memory+0x22>
 8012576:	6020      	str	r0, [r4, #0]
 8012578:	6861      	ldr	r1, [r4, #4]
 801257a:	b121      	cbz	r1, 8012586 <rmw_uxrce_fini_subscription_memory+0x22>
 801257c:	4803      	ldr	r0, [pc, #12]	; (801258c <rmw_uxrce_fini_subscription_memory+0x28>)
 801257e:	f007 f917 	bl	80197b0 <put_memory>
 8012582:	2300      	movs	r3, #0
 8012584:	6063      	str	r3, [r4, #4]
 8012586:	bd10      	pop	{r4, pc}
 8012588:	0801da0c 	.word	0x0801da0c
 801258c:	20011424 	.word	0x20011424

08012590 <rmw_uxrce_fini_service_memory>:
 8012590:	b510      	push	{r4, lr}
 8012592:	4604      	mov	r4, r0
 8012594:	6800      	ldr	r0, [r0, #0]
 8012596:	b128      	cbz	r0, 80125a4 <rmw_uxrce_fini_service_memory+0x14>
 8012598:	4b06      	ldr	r3, [pc, #24]	; (80125b4 <rmw_uxrce_fini_service_memory+0x24>)
 801259a:	6819      	ldr	r1, [r3, #0]
 801259c:	f7ed fe50 	bl	8000240 <strcmp>
 80125a0:	b938      	cbnz	r0, 80125b2 <rmw_uxrce_fini_service_memory+0x22>
 80125a2:	6020      	str	r0, [r4, #0]
 80125a4:	6861      	ldr	r1, [r4, #4]
 80125a6:	b121      	cbz	r1, 80125b2 <rmw_uxrce_fini_service_memory+0x22>
 80125a8:	4803      	ldr	r0, [pc, #12]	; (80125b8 <rmw_uxrce_fini_service_memory+0x28>)
 80125aa:	f007 f901 	bl	80197b0 <put_memory>
 80125ae:	2300      	movs	r3, #0
 80125b0:	6063      	str	r3, [r4, #4]
 80125b2:	bd10      	pop	{r4, pc}
 80125b4:	0801da0c 	.word	0x0801da0c
 80125b8:	200113f4 	.word	0x200113f4

080125bc <rmw_uxrce_fini_client_memory>:
 80125bc:	b510      	push	{r4, lr}
 80125be:	4604      	mov	r4, r0
 80125c0:	6800      	ldr	r0, [r0, #0]
 80125c2:	b128      	cbz	r0, 80125d0 <rmw_uxrce_fini_client_memory+0x14>
 80125c4:	4b06      	ldr	r3, [pc, #24]	; (80125e0 <rmw_uxrce_fini_client_memory+0x24>)
 80125c6:	6819      	ldr	r1, [r3, #0]
 80125c8:	f7ed fe3a 	bl	8000240 <strcmp>
 80125cc:	b938      	cbnz	r0, 80125de <rmw_uxrce_fini_client_memory+0x22>
 80125ce:	6020      	str	r0, [r4, #0]
 80125d0:	6861      	ldr	r1, [r4, #4]
 80125d2:	b121      	cbz	r1, 80125de <rmw_uxrce_fini_client_memory+0x22>
 80125d4:	4803      	ldr	r0, [pc, #12]	; (80125e4 <rmw_uxrce_fini_client_memory+0x28>)
 80125d6:	f007 f8eb 	bl	80197b0 <put_memory>
 80125da:	2300      	movs	r3, #0
 80125dc:	6063      	str	r3, [r4, #4]
 80125de:	bd10      	pop	{r4, pc}
 80125e0:	0801da0c 	.word	0x0801da0c
 80125e4:	2000cb04 	.word	0x2000cb04

080125e8 <rmw_uxrce_fini_topic_memory>:
 80125e8:	b510      	push	{r4, lr}
 80125ea:	4604      	mov	r4, r0
 80125ec:	4803      	ldr	r0, [pc, #12]	; (80125fc <rmw_uxrce_fini_topic_memory+0x14>)
 80125ee:	4621      	mov	r1, r4
 80125f0:	f007 f8de 	bl	80197b0 <put_memory>
 80125f4:	2300      	movs	r3, #0
 80125f6:	61a3      	str	r3, [r4, #24]
 80125f8:	bd10      	pop	{r4, pc}
 80125fa:	bf00      	nop
 80125fc:	20011434 	.word	0x20011434

08012600 <rmw_uxrce_get_static_input_buffer_for_entity>:
 8012600:	b082      	sub	sp, #8
 8012602:	492b      	ldr	r1, [pc, #172]	; (80126b0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8012604:	b530      	push	{r4, r5, lr}
 8012606:	680d      	ldr	r5, [r1, #0]
 8012608:	ac03      	add	r4, sp, #12
 801260a:	e884 000c 	stmia.w	r4, {r2, r3}
 801260e:	461c      	mov	r4, r3
 8012610:	2d00      	cmp	r5, #0
 8012612:	d04b      	beq.n	80126ac <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8012614:	462b      	mov	r3, r5
 8012616:	2100      	movs	r1, #0
 8012618:	689a      	ldr	r2, [r3, #8]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 8012620:	4290      	cmp	r0, r2
 8012622:	bf08      	it	eq
 8012624:	3101      	addeq	r1, #1
 8012626:	2b00      	cmp	r3, #0
 8012628:	d1f6      	bne.n	8012618 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 801262a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801262e:	2b02      	cmp	r3, #2
 8012630:	d029      	beq.n	8012686 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 8012632:	d820      	bhi.n	8012676 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8012634:	428c      	cmp	r4, r1
 8012636:	d828      	bhi.n	801268a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8012638:	fab4 f284 	clz	r2, r4
 801263c:	0952      	lsrs	r2, r2, #5
 801263e:	b324      	cbz	r4, 801268a <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8012640:	b1dd      	cbz	r5, 801267a <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 8012642:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8012646:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 801264a:	e001      	b.n	8012650 <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 801264c:	686d      	ldr	r5, [r5, #4]
 801264e:	b1ad      	cbz	r5, 801267c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 8012650:	68ab      	ldr	r3, [r5, #8]
 8012652:	f8d3 1814 	ldr.w	r1, [r3, #2068]	; 0x814
 8012656:	4288      	cmp	r0, r1
 8012658:	d1f8      	bne.n	801264c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801265a:	f8d3 1818 	ldr.w	r1, [r3, #2072]	; 0x818
 801265e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8012662:	4561      	cmp	r1, ip
 8012664:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8012668:	eb73 0e04 	sbcs.w	lr, r3, r4
 801266c:	daee      	bge.n	801264c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 801266e:	468c      	mov	ip, r1
 8012670:	461c      	mov	r4, r3
 8012672:	462a      	mov	r2, r5
 8012674:	e7ea      	b.n	801264c <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 8012676:	2b03      	cmp	r3, #3
 8012678:	d0dc      	beq.n	8012634 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 801267a:	2200      	movs	r2, #0
 801267c:	4610      	mov	r0, r2
 801267e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012682:	b002      	add	sp, #8
 8012684:	4770      	bx	lr
 8012686:	428c      	cmp	r4, r1
 8012688:	d905      	bls.n	8012696 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 801268a:	4809      	ldr	r0, [pc, #36]	; (80126b0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 801268c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012690:	b002      	add	sp, #8
 8012692:	f007 b87d 	b.w	8019790 <get_memory>
 8012696:	fab4 f284 	clz	r2, r4
 801269a:	0952      	lsrs	r2, r2, #5
 801269c:	2c00      	cmp	r4, #0
 801269e:	d1ed      	bne.n	801267c <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80126a0:	4803      	ldr	r0, [pc, #12]	; (80126b0 <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80126a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126a6:	b002      	add	sp, #8
 80126a8:	f007 b872 	b.w	8019790 <get_memory>
 80126ac:	4629      	mov	r1, r5
 80126ae:	e7bc      	b.n	801262a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80126b0:	20011414 	.word	0x20011414

080126b4 <rmw_uxrce_find_static_input_buffer_by_owner>:
 80126b4:	4b12      	ldr	r3, [pc, #72]	; (8012700 <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	b530      	push	{r4, r5, lr}
 80126ba:	b1f3      	cbz	r3, 80126fa <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 80126bc:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80126c0:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
 80126c4:	2400      	movs	r4, #0
 80126c6:	e001      	b.n	80126cc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	b1a3      	cbz	r3, 80126f6 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 80126cc:	689a      	ldr	r2, [r3, #8]
 80126ce:	f8d2 1814 	ldr.w	r1, [r2, #2068]	; 0x814
 80126d2:	4288      	cmp	r0, r1
 80126d4:	d1f8      	bne.n	80126c8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80126d6:	f8d2 1818 	ldr.w	r1, [r2, #2072]	; 0x818
 80126da:	f502 6202 	add.w	r2, r2, #2080	; 0x820
 80126de:	4571      	cmp	r1, lr
 80126e0:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80126e4:	eb72 050c 	sbcs.w	r5, r2, ip
 80126e8:	daee      	bge.n	80126c8 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 80126ea:	461c      	mov	r4, r3
 80126ec:	685b      	ldr	r3, [r3, #4]
 80126ee:	468e      	mov	lr, r1
 80126f0:	4694      	mov	ip, r2
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d1ea      	bne.n	80126cc <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 80126f6:	4620      	mov	r0, r4
 80126f8:	bd30      	pop	{r4, r5, pc}
 80126fa:	461c      	mov	r4, r3
 80126fc:	4620      	mov	r0, r4
 80126fe:	bd30      	pop	{r4, r5, pc}
 8012700:	20011414 	.word	0x20011414
 8012704:	00000000 	.word	0x00000000

08012708 <rmw_uxrce_clean_expired_static_input_buffer>:
 8012708:	4b3d      	ldr	r3, [pc, #244]	; (8012800 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 801270a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801270e:	681f      	ldr	r7, [r3, #0]
 8012710:	ed2d 8b06 	vpush	{d8-d10}
 8012714:	b08d      	sub	sp, #52	; 0x34
 8012716:	f007 fac7 	bl	8019ca8 <rmw_uros_epoch_nanos>
 801271a:	2f00      	cmp	r7, #0
 801271c:	d05d      	beq.n	80127da <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 801271e:	46b8      	mov	r8, r7
 8012720:	4681      	mov	r9, r0
 8012722:	468a      	mov	sl, r1
 8012724:	ac04      	add	r4, sp, #16
 8012726:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801272a:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 801272e:	2b04      	cmp	r3, #4
 8012730:	ed9f 8b2d 	vldr	d8, [pc, #180]	; 80127e8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 8012734:	ed9f ab2e 	vldr	d10, [pc, #184]	; 80127f0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8012738:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 80127f8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 801273c:	d03f      	beq.n	80127be <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801273e:	2b05      	cmp	r3, #5
 8012740:	d044      	beq.n	80127cc <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 8012742:	2b03      	cmp	r3, #3
 8012744:	d03b      	beq.n	80127be <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8012746:	ed8d 8b04 	vstr	d8, [sp, #16]
 801274a:	ed8d ab06 	vstr	d10, [sp, #24]
 801274e:	ab08      	add	r3, sp, #32
 8012750:	ed8d 8b08 	vstr	d8, [sp, #32]
 8012754:	ed8d 8b0a 	vstr	d8, [sp, #40]	; 0x28
 8012758:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801275a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801275e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012762:	f006 fe29 	bl	80193b8 <rmw_time_equal>
 8012766:	b118      	cbz	r0, 8012770 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 8012768:	ed8d 9b04 	vstr	d9, [sp, #16]
 801276c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8012770:	f8d5 6818 	ldr.w	r6, [r5, #2072]	; 0x818
 8012774:	f505 6502 	add.w	r5, r5, #2080	; 0x820
 8012778:	f855 7c04 	ldr.w	r7, [r5, #-4]
 801277c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 8012780:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8012784:	f006 fe6e 	bl	8019464 <rmw_time_total_nsec>
 8012788:	1830      	adds	r0, r6, r0
 801278a:	eb47 0101 	adc.w	r1, r7, r1
 801278e:	4548      	cmp	r0, r9
 8012790:	eb71 030a 	sbcs.w	r3, r1, sl
 8012794:	db05      	blt.n	80127a2 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 8012796:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 801279a:	4591      	cmp	r9, r2
 801279c:	eb7a 0303 	sbcs.w	r3, sl, r3
 80127a0:	da03      	bge.n	80127aa <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80127a2:	4641      	mov	r1, r8
 80127a4:	4816      	ldr	r0, [pc, #88]	; (8012800 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80127a6:	f007 f803 	bl	80197b0 <put_memory>
 80127aa:	f1bb 0f00 	cmp.w	fp, #0
 80127ae:	d014      	beq.n	80127da <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80127b0:	46d8      	mov	r8, fp
 80127b2:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80127b6:	f895 3820 	ldrb.w	r3, [r5, #2080]	; 0x820
 80127ba:	2b04      	cmp	r3, #4
 80127bc:	d1bf      	bne.n	801273e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 80127be:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 80127c2:	3340      	adds	r3, #64	; 0x40
 80127c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80127c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80127ca:	e7c0      	b.n	801274e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80127cc:	f8d5 3814 	ldr.w	r3, [r5, #2068]	; 0x814
 80127d0:	3348      	adds	r3, #72	; 0x48
 80127d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80127d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80127d8:	e7b9      	b.n	801274e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 80127da:	b00d      	add	sp, #52	; 0x34
 80127dc:	ecbd 8b06 	vpop	{d8-d10}
 80127e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127e4:	f3af 8000 	nop.w
	...
 80127f0:	00000001 	.word	0x00000001
 80127f4:	00000000 	.word	0x00000000
 80127f8:	0000001e 	.word	0x0000001e
 80127fc:	00000000 	.word	0x00000000
 8012800:	20011414 	.word	0x20011414

08012804 <run_xrce_session>:
 8012804:	b510      	push	{r4, lr}
 8012806:	788c      	ldrb	r4, [r1, #2]
 8012808:	b086      	sub	sp, #24
 801280a:	2c01      	cmp	r4, #1
 801280c:	f8ad 200e 	strh.w	r2, [sp, #14]
 8012810:	d00c      	beq.n	801282c <run_xrce_session+0x28>
 8012812:	2401      	movs	r4, #1
 8012814:	4619      	mov	r1, r3
 8012816:	f10d 020e 	add.w	r2, sp, #14
 801281a:	f10d 0317 	add.w	r3, sp, #23
 801281e:	9400      	str	r4, [sp, #0]
 8012820:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012824:	f001 fd50 	bl	80142c8 <uxr_run_session_until_all_status>
 8012828:	b006      	add	sp, #24
 801282a:	bd10      	pop	{r4, pc}
 801282c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012830:	f001 f96c 	bl	8013b0c <uxr_flash_output_streams>
 8012834:	4620      	mov	r0, r4
 8012836:	b006      	add	sp, #24
 8012838:	bd10      	pop	{r4, pc}
 801283a:	bf00      	nop

0801283c <convert_qos_profile>:
 801283c:	7a4a      	ldrb	r2, [r1, #9]
 801283e:	f891 c008 	ldrb.w	ip, [r1, #8]
 8012842:	2a02      	cmp	r2, #2
 8012844:	bf18      	it	ne
 8012846:	2200      	movne	r2, #0
 8012848:	7002      	strb	r2, [r0, #0]
 801284a:	f1ac 0202 	sub.w	r2, ip, #2
 801284e:	fab2 f282 	clz	r2, r2
 8012852:	0952      	lsrs	r2, r2, #5
 8012854:	7042      	strb	r2, [r0, #1]
 8012856:	780a      	ldrb	r2, [r1, #0]
 8012858:	8889      	ldrh	r1, [r1, #4]
 801285a:	f1a2 0202 	sub.w	r2, r2, #2
 801285e:	8081      	strh	r1, [r0, #4]
 8012860:	fab2 f282 	clz	r2, r2
 8012864:	0952      	lsrs	r2, r2, #5
 8012866:	7082      	strb	r2, [r0, #2]
 8012868:	4770      	bx	lr
 801286a:	bf00      	nop

0801286c <generate_service_topics>:
 801286c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801286e:	461d      	mov	r5, r3
 8012870:	b083      	sub	sp, #12
 8012872:	4606      	mov	r6, r0
 8012874:	4c11      	ldr	r4, [pc, #68]	; (80128bc <generate_service_topics+0x50>)
 8012876:	4608      	mov	r0, r1
 8012878:	4b11      	ldr	r3, [pc, #68]	; (80128c0 <generate_service_topics+0x54>)
 801287a:	4617      	mov	r7, r2
 801287c:	4629      	mov	r1, r5
 801287e:	4a11      	ldr	r2, [pc, #68]	; (80128c4 <generate_service_topics+0x58>)
 8012880:	9401      	str	r4, [sp, #4]
 8012882:	9600      	str	r6, [sp, #0]
 8012884:	f008 fea2 	bl	801b5cc <sniprintf>
 8012888:	4a0f      	ldr	r2, [pc, #60]	; (80128c8 <generate_service_topics+0x5c>)
 801288a:	4604      	mov	r4, r0
 801288c:	4b0f      	ldr	r3, [pc, #60]	; (80128cc <generate_service_topics+0x60>)
 801288e:	9201      	str	r2, [sp, #4]
 8012890:	4638      	mov	r0, r7
 8012892:	4a0c      	ldr	r2, [pc, #48]	; (80128c4 <generate_service_topics+0x58>)
 8012894:	4629      	mov	r1, r5
 8012896:	9600      	str	r6, [sp, #0]
 8012898:	f008 fe98 	bl	801b5cc <sniprintf>
 801289c:	2c00      	cmp	r4, #0
 801289e:	bfa8      	it	ge
 80128a0:	42a5      	cmpge	r5, r4
 80128a2:	bfcc      	ite	gt
 80128a4:	2401      	movgt	r4, #1
 80128a6:	2400      	movle	r4, #0
 80128a8:	dd05      	ble.n	80128b6 <generate_service_topics+0x4a>
 80128aa:	2800      	cmp	r0, #0
 80128ac:	bfa8      	it	ge
 80128ae:	4285      	cmpge	r5, r0
 80128b0:	bfcc      	ite	gt
 80128b2:	2401      	movgt	r4, #1
 80128b4:	2400      	movle	r4, #0
 80128b6:	4620      	mov	r0, r4
 80128b8:	b003      	add	sp, #12
 80128ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128bc:	0801d3c8 	.word	0x0801d3c8
 80128c0:	0801d3c4 	.word	0x0801d3c4
 80128c4:	0801d3a8 	.word	0x0801d3a8
 80128c8:	0801d3bc 	.word	0x0801d3bc
 80128cc:	0801d3b8 	.word	0x0801d3b8

080128d0 <generate_service_types>:
 80128d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128d4:	4606      	mov	r6, r0
 80128d6:	b087      	sub	sp, #28
 80128d8:	461c      	mov	r4, r3
 80128da:	6883      	ldr	r3, [r0, #8]
 80128dc:	460d      	mov	r5, r1
 80128de:	4617      	mov	r7, r2
 80128e0:	4798      	blx	r3
 80128e2:	68f3      	ldr	r3, [r6, #12]
 80128e4:	4606      	mov	r6, r0
 80128e6:	4798      	blx	r3
 80128e8:	2300      	movs	r3, #0
 80128ea:	f8d0 b004 	ldr.w	fp, [r0, #4]
 80128ee:	6872      	ldr	r2, [r6, #4]
 80128f0:	702b      	strb	r3, [r5, #0]
 80128f2:	6813      	ldr	r3, [r2, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d03f      	beq.n	8012978 <generate_service_types+0xa8>
 80128f8:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801298c <generate_service_types+0xbc>
 80128fc:	4649      	mov	r1, r9
 80128fe:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8012994 <generate_service_types+0xc4>
 8012902:	4628      	mov	r0, r5
 8012904:	f8df a090 	ldr.w	sl, [pc, #144]	; 8012998 <generate_service_types+0xc8>
 8012908:	f8cd 8014 	str.w	r8, [sp, #20]
 801290c:	6852      	ldr	r2, [r2, #4]
 801290e:	9100      	str	r1, [sp, #0]
 8012910:	4621      	mov	r1, r4
 8012912:	f8cd 8008 	str.w	r8, [sp, #8]
 8012916:	f8cd a004 	str.w	sl, [sp, #4]
 801291a:	e9cd 9203 	strd	r9, r2, [sp, #12]
 801291e:	4a1a      	ldr	r2, [pc, #104]	; (8012988 <generate_service_types+0xb8>)
 8012920:	f008 fe54 	bl	801b5cc <sniprintf>
 8012924:	2300      	movs	r3, #0
 8012926:	42a0      	cmp	r0, r4
 8012928:	ea6f 0600 	mvn.w	r6, r0
 801292c:	703b      	strb	r3, [r7, #0]
 801292e:	f8db 3000 	ldr.w	r3, [fp]
 8012932:	ea4f 76d6 	mov.w	r6, r6, lsr #31
 8012936:	bfac      	ite	ge
 8012938:	2500      	movge	r5, #0
 801293a:	2501      	movlt	r5, #1
 801293c:	b30b      	cbz	r3, 8012982 <generate_service_types+0xb2>
 801293e:	4a13      	ldr	r2, [pc, #76]	; (801298c <generate_service_types+0xbc>)
 8012940:	f8cd 8014 	str.w	r8, [sp, #20]
 8012944:	402e      	ands	r6, r5
 8012946:	f8db 1004 	ldr.w	r1, [fp, #4]
 801294a:	4638      	mov	r0, r7
 801294c:	9104      	str	r1, [sp, #16]
 801294e:	4621      	mov	r1, r4
 8012950:	e9cd 2a00 	strd	r2, sl, [sp]
 8012954:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8012958:	4a0b      	ldr	r2, [pc, #44]	; (8012988 <generate_service_types+0xb8>)
 801295a:	f008 fe37 	bl	801b5cc <sniprintf>
 801295e:	2800      	cmp	r0, #0
 8012960:	bfb4      	ite	lt
 8012962:	2600      	movlt	r6, #0
 8012964:	f006 0601 	andge.w	r6, r6, #1
 8012968:	42a0      	cmp	r0, r4
 801296a:	bfac      	ite	ge
 801296c:	2000      	movge	r0, #0
 801296e:	f006 0001 	andlt.w	r0, r6, #1
 8012972:	b007      	add	sp, #28
 8012974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012978:	4b05      	ldr	r3, [pc, #20]	; (8012990 <generate_service_types+0xc0>)
 801297a:	f8df 9010 	ldr.w	r9, [pc, #16]	; 801298c <generate_service_types+0xbc>
 801297e:	4619      	mov	r1, r3
 8012980:	e7bd      	b.n	80128fe <generate_service_types+0x2e>
 8012982:	4b03      	ldr	r3, [pc, #12]	; (8012990 <generate_service_types+0xc0>)
 8012984:	461a      	mov	r2, r3
 8012986:	e7db      	b.n	8012940 <generate_service_types+0x70>
 8012988:	0801d3a0 	.word	0x0801d3a0
 801298c:	0801d39c 	.word	0x0801d39c
 8012990:	0801d420 	.word	0x0801d420
 8012994:	0801d3b0 	.word	0x0801d3b0
 8012998:	0801d3b4 	.word	0x0801d3b4

0801299c <generate_type_name>:
 801299c:	2300      	movs	r3, #0
 801299e:	b530      	push	{r4, r5, lr}
 80129a0:	700b      	strb	r3, [r1, #0]
 80129a2:	b087      	sub	sp, #28
 80129a4:	6803      	ldr	r3, [r0, #0]
 80129a6:	4614      	mov	r4, r2
 80129a8:	b1bb      	cbz	r3, 80129da <generate_type_name+0x3e>
 80129aa:	4a0e      	ldr	r2, [pc, #56]	; (80129e4 <generate_type_name+0x48>)
 80129ac:	4615      	mov	r5, r2
 80129ae:	9500      	str	r5, [sp, #0]
 80129b0:	9203      	str	r2, [sp, #12]
 80129b2:	4d0d      	ldr	r5, [pc, #52]	; (80129e8 <generate_type_name+0x4c>)
 80129b4:	6842      	ldr	r2, [r0, #4]
 80129b6:	4608      	mov	r0, r1
 80129b8:	490c      	ldr	r1, [pc, #48]	; (80129ec <generate_type_name+0x50>)
 80129ba:	9204      	str	r2, [sp, #16]
 80129bc:	9105      	str	r1, [sp, #20]
 80129be:	9102      	str	r1, [sp, #8]
 80129c0:	4621      	mov	r1, r4
 80129c2:	4a0b      	ldr	r2, [pc, #44]	; (80129f0 <generate_type_name+0x54>)
 80129c4:	9501      	str	r5, [sp, #4]
 80129c6:	f008 fe01 	bl	801b5cc <sniprintf>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	bfa8      	it	ge
 80129ce:	4284      	cmpge	r4, r0
 80129d0:	bfcc      	ite	gt
 80129d2:	2001      	movgt	r0, #1
 80129d4:	2000      	movle	r0, #0
 80129d6:	b007      	add	sp, #28
 80129d8:	bd30      	pop	{r4, r5, pc}
 80129da:	4b06      	ldr	r3, [pc, #24]	; (80129f4 <generate_type_name+0x58>)
 80129dc:	4a01      	ldr	r2, [pc, #4]	; (80129e4 <generate_type_name+0x48>)
 80129de:	461d      	mov	r5, r3
 80129e0:	e7e5      	b.n	80129ae <generate_type_name+0x12>
 80129e2:	bf00      	nop
 80129e4:	0801d39c 	.word	0x0801d39c
 80129e8:	0801d3b4 	.word	0x0801d3b4
 80129ec:	0801d3b0 	.word	0x0801d3b0
 80129f0:	0801d3a0 	.word	0x0801d3a0
 80129f4:	0801d420 	.word	0x0801d420

080129f8 <generate_topic_name>:
 80129f8:	b530      	push	{r4, r5, lr}
 80129fa:	4614      	mov	r4, r2
 80129fc:	b083      	sub	sp, #12
 80129fe:	4605      	mov	r5, r0
 8012a00:	4b07      	ldr	r3, [pc, #28]	; (8012a20 <generate_topic_name+0x28>)
 8012a02:	4a08      	ldr	r2, [pc, #32]	; (8012a24 <generate_topic_name+0x2c>)
 8012a04:	4608      	mov	r0, r1
 8012a06:	9500      	str	r5, [sp, #0]
 8012a08:	4621      	mov	r1, r4
 8012a0a:	f008 fddf 	bl	801b5cc <sniprintf>
 8012a0e:	2800      	cmp	r0, #0
 8012a10:	bfa8      	it	ge
 8012a12:	4284      	cmpge	r4, r0
 8012a14:	bfcc      	ite	gt
 8012a16:	2001      	movgt	r0, #1
 8012a18:	2000      	movle	r0, #0
 8012a1a:	b003      	add	sp, #12
 8012a1c:	bd30      	pop	{r4, r5, pc}
 8012a1e:	bf00      	nop
 8012a20:	0801d3d0 	.word	0x0801d3d0
 8012a24:	0801cda4 	.word	0x0801cda4

08012a28 <is_uxrce_rmw_identifier_valid>:
 8012a28:	b510      	push	{r4, lr}
 8012a2a:	4604      	mov	r4, r0
 8012a2c:	b140      	cbz	r0, 8012a40 <is_uxrce_rmw_identifier_valid+0x18>
 8012a2e:	f006 ff17 	bl	8019860 <rmw_get_implementation_identifier>
 8012a32:	4601      	mov	r1, r0
 8012a34:	4620      	mov	r0, r4
 8012a36:	f7ed fc03 	bl	8000240 <strcmp>
 8012a3a:	fab0 f080 	clz	r0, r0
 8012a3e:	0940      	lsrs	r0, r0, #5
 8012a40:	bd10      	pop	{r4, pc}
 8012a42:	bf00      	nop

08012a44 <get_message_typesupport_handle>:
 8012a44:	6883      	ldr	r3, [r0, #8]
 8012a46:	4718      	bx	r3

08012a48 <get_message_typesupport_handle_function>:
 8012a48:	b510      	push	{r4, lr}
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	6800      	ldr	r0, [r0, #0]
 8012a4e:	f7ed fbf7 	bl	8000240 <strcmp>
 8012a52:	2800      	cmp	r0, #0
 8012a54:	bf0c      	ite	eq
 8012a56:	4620      	moveq	r0, r4
 8012a58:	2000      	movne	r0, #0
 8012a5a:	bd10      	pop	{r4, pc}

08012a5c <get_service_typesupport_handle>:
 8012a5c:	6883      	ldr	r3, [r0, #8]
 8012a5e:	4718      	bx	r3

08012a60 <get_service_typesupport_handle_function>:
 8012a60:	b510      	push	{r4, lr}
 8012a62:	4604      	mov	r4, r0
 8012a64:	6800      	ldr	r0, [r0, #0]
 8012a66:	f7ed fbeb 	bl	8000240 <strcmp>
 8012a6a:	2800      	cmp	r0, #0
 8012a6c:	bf0c      	ite	eq
 8012a6e:	4620      	moveq	r0, r4
 8012a70:	2000      	movne	r0, #0
 8012a72:	bd10      	pop	{r4, pc}

08012a74 <rosidl_runtime_c__String__init>:
 8012a74:	b510      	push	{r4, lr}
 8012a76:	4604      	mov	r4, r0
 8012a78:	b086      	sub	sp, #24
 8012a7a:	b170      	cbz	r0, 8012a9a <rosidl_runtime_c__String__init+0x26>
 8012a7c:	a801      	add	r0, sp, #4
 8012a7e:	f7fd feef 	bl	8010860 <rcutils_get_default_allocator>
 8012a82:	9b01      	ldr	r3, [sp, #4]
 8012a84:	9905      	ldr	r1, [sp, #20]
 8012a86:	2001      	movs	r0, #1
 8012a88:	4798      	blx	r3
 8012a8a:	6020      	str	r0, [r4, #0]
 8012a8c:	b128      	cbz	r0, 8012a9a <rosidl_runtime_c__String__init+0x26>
 8012a8e:	2100      	movs	r1, #0
 8012a90:	2201      	movs	r2, #1
 8012a92:	7001      	strb	r1, [r0, #0]
 8012a94:	4610      	mov	r0, r2
 8012a96:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8012a9a:	b006      	add	sp, #24
 8012a9c:	bd10      	pop	{r4, pc}
 8012a9e:	bf00      	nop

08012aa0 <rosidl_runtime_c__String__fini>:
 8012aa0:	b320      	cbz	r0, 8012aec <rosidl_runtime_c__String__fini+0x4c>
 8012aa2:	6803      	ldr	r3, [r0, #0]
 8012aa4:	b510      	push	{r4, lr}
 8012aa6:	4604      	mov	r4, r0
 8012aa8:	b086      	sub	sp, #24
 8012aaa:	b173      	cbz	r3, 8012aca <rosidl_runtime_c__String__fini+0x2a>
 8012aac:	6883      	ldr	r3, [r0, #8]
 8012aae:	b1f3      	cbz	r3, 8012aee <rosidl_runtime_c__String__fini+0x4e>
 8012ab0:	a801      	add	r0, sp, #4
 8012ab2:	f7fd fed5 	bl	8010860 <rcutils_get_default_allocator>
 8012ab6:	9b02      	ldr	r3, [sp, #8]
 8012ab8:	9905      	ldr	r1, [sp, #20]
 8012aba:	6820      	ldr	r0, [r4, #0]
 8012abc:	4798      	blx	r3
 8012abe:	2300      	movs	r3, #0
 8012ac0:	e9c4 3300 	strd	r3, r3, [r4]
 8012ac4:	60a3      	str	r3, [r4, #8]
 8012ac6:	b006      	add	sp, #24
 8012ac8:	bd10      	pop	{r4, pc}
 8012aca:	6843      	ldr	r3, [r0, #4]
 8012acc:	b9db      	cbnz	r3, 8012b06 <rosidl_runtime_c__String__fini+0x66>
 8012ace:	6883      	ldr	r3, [r0, #8]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d0f8      	beq.n	8012ac6 <rosidl_runtime_c__String__fini+0x26>
 8012ad4:	4b12      	ldr	r3, [pc, #72]	; (8012b20 <rosidl_runtime_c__String__fini+0x80>)
 8012ad6:	2251      	movs	r2, #81	; 0x51
 8012ad8:	2101      	movs	r1, #1
 8012ada:	4812      	ldr	r0, [pc, #72]	; (8012b24 <rosidl_runtime_c__String__fini+0x84>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	f008 fc4a 	bl	801b378 <fwrite>
 8012ae4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ae8:	f008 f902 	bl	801acf0 <exit>
 8012aec:	4770      	bx	lr
 8012aee:	4b0c      	ldr	r3, [pc, #48]	; (8012b20 <rosidl_runtime_c__String__fini+0x80>)
 8012af0:	224c      	movs	r2, #76	; 0x4c
 8012af2:	2101      	movs	r1, #1
 8012af4:	480c      	ldr	r0, [pc, #48]	; (8012b28 <rosidl_runtime_c__String__fini+0x88>)
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	68db      	ldr	r3, [r3, #12]
 8012afa:	f008 fc3d 	bl	801b378 <fwrite>
 8012afe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b02:	f008 f8f5 	bl	801acf0 <exit>
 8012b06:	4b06      	ldr	r3, [pc, #24]	; (8012b20 <rosidl_runtime_c__String__fini+0x80>)
 8012b08:	224e      	movs	r2, #78	; 0x4e
 8012b0a:	2101      	movs	r1, #1
 8012b0c:	4807      	ldr	r0, [pc, #28]	; (8012b2c <rosidl_runtime_c__String__fini+0x8c>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	68db      	ldr	r3, [r3, #12]
 8012b12:	f008 fc31 	bl	801b378 <fwrite>
 8012b16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b1a:	f008 f8e9 	bl	801acf0 <exit>
 8012b1e:	bf00      	nop
 8012b20:	200003dc 	.word	0x200003dc
 8012b24:	0801d474 	.word	0x0801d474
 8012b28:	0801d3d4 	.word	0x0801d3d4
 8012b2c:	0801d424 	.word	0x0801d424

08012b30 <rosidl_runtime_c__String__assignn>:
 8012b30:	2900      	cmp	r1, #0
 8012b32:	bf18      	it	ne
 8012b34:	f1b2 3fff 	cmpne.w	r2, #4294967295	; 0xffffffff
 8012b38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b3c:	bf0c      	ite	eq
 8012b3e:	2401      	moveq	r4, #1
 8012b40:	2400      	movne	r4, #0
 8012b42:	b087      	sub	sp, #28
 8012b44:	2800      	cmp	r0, #0
 8012b46:	bf08      	it	eq
 8012b48:	f044 0401 	orreq.w	r4, r4, #1
 8012b4c:	b124      	cbz	r4, 8012b58 <rosidl_runtime_c__String__assignn+0x28>
 8012b4e:	2400      	movs	r4, #0
 8012b50:	4620      	mov	r0, r4
 8012b52:	b007      	add	sp, #28
 8012b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b58:	4616      	mov	r6, r2
 8012b5a:	4605      	mov	r5, r0
 8012b5c:	a801      	add	r0, sp, #4
 8012b5e:	460f      	mov	r7, r1
 8012b60:	f106 0901 	add.w	r9, r6, #1
 8012b64:	f7fd fe7c 	bl	8010860 <rcutils_get_default_allocator>
 8012b68:	9b03      	ldr	r3, [sp, #12]
 8012b6a:	9a05      	ldr	r2, [sp, #20]
 8012b6c:	4649      	mov	r1, r9
 8012b6e:	6828      	ldr	r0, [r5, #0]
 8012b70:	4798      	blx	r3
 8012b72:	4680      	mov	r8, r0
 8012b74:	2800      	cmp	r0, #0
 8012b76:	d0eb      	beq.n	8012b50 <rosidl_runtime_c__String__assignn+0x20>
 8012b78:	4639      	mov	r1, r7
 8012b7a:	4632      	mov	r2, r6
 8012b7c:	f008 ff5f 	bl	801ba3e <memcpy>
 8012b80:	f808 4006 	strb.w	r4, [r8, r6]
 8012b84:	2401      	movs	r4, #1
 8012b86:	f8c5 9008 	str.w	r9, [r5, #8]
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	e9c5 8600 	strd	r8, r6, [r5]
 8012b90:	b007      	add	sp, #28
 8012b92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b96:	bf00      	nop

08012b98 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8012b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b9c:	6805      	ldr	r5, [r0, #0]
 8012b9e:	4604      	mov	r4, r0
 8012ba0:	460e      	mov	r6, r1
 8012ba2:	4628      	mov	r0, r5
 8012ba4:	f7ed fb4c 	bl	8000240 <strcmp>
 8012ba8:	b1c8      	cbz	r0, 8012bde <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 8012baa:	4b11      	ldr	r3, [pc, #68]	; (8012bf0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	429d      	cmp	r5, r3
 8012bb0:	d112      	bne.n	8012bd8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012bb2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012bb6:	f8d8 4000 	ldr.w	r4, [r8]
 8012bba:	b16c      	cbz	r4, 8012bd8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8012bbc:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012bc0:	2700      	movs	r7, #0
 8012bc2:	3d04      	subs	r5, #4
 8012bc4:	4631      	mov	r1, r6
 8012bc6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012bca:	f7ed fb39 	bl	8000240 <strcmp>
 8012bce:	00bb      	lsls	r3, r7, #2
 8012bd0:	b140      	cbz	r0, 8012be4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8012bd2:	3701      	adds	r7, #1
 8012bd4:	42bc      	cmp	r4, r7
 8012bd6:	d1f5      	bne.n	8012bc4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8012bd8:	2000      	movs	r0, #0
 8012bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bde:	4620      	mov	r0, r4
 8012be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012be4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012bec:	58d3      	ldr	r3, [r2, r3]
 8012bee:	4718      	bx	r3
 8012bf0:	200002f8 	.word	0x200002f8

08012bf4 <rosidl_typesupport_c__get_service_typesupport_handle_function>:
 8012bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bf8:	6805      	ldr	r5, [r0, #0]
 8012bfa:	4604      	mov	r4, r0
 8012bfc:	460e      	mov	r6, r1
 8012bfe:	4628      	mov	r0, r5
 8012c00:	f7ed fb1e 	bl	8000240 <strcmp>
 8012c04:	b1c8      	cbz	r0, 8012c3a <rosidl_typesupport_c__get_service_typesupport_handle_function+0x46>
 8012c06:	4b11      	ldr	r3, [pc, #68]	; (8012c4c <rosidl_typesupport_c__get_service_typesupport_handle_function+0x58>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	429d      	cmp	r5, r3
 8012c0c:	d112      	bne.n	8012c34 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8012c0e:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8012c12:	f8d8 4000 	ldr.w	r4, [r8]
 8012c16:	b16c      	cbz	r4, 8012c34 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x40>
 8012c18:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8012c1c:	2700      	movs	r7, #0
 8012c1e:	3d04      	subs	r5, #4
 8012c20:	4631      	mov	r1, r6
 8012c22:	f855 0f04 	ldr.w	r0, [r5, #4]!
 8012c26:	f7ed fb0b 	bl	8000240 <strcmp>
 8012c2a:	00bb      	lsls	r3, r7, #2
 8012c2c:	b140      	cbz	r0, 8012c40 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x4c>
 8012c2e:	3701      	adds	r7, #1
 8012c30:	42bc      	cmp	r4, r7
 8012c32:	d1f5      	bne.n	8012c20 <rosidl_typesupport_c__get_service_typesupport_handle_function+0x2c>
 8012c34:	2000      	movs	r0, #0
 8012c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c3a:	4620      	mov	r0, r4
 8012c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c40:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c48:	58d3      	ldr	r3, [r2, r3]
 8012c4a:	4718      	bx	r3
 8012c4c:	200002f8 	.word	0x200002f8

08012c50 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8012c50:	4b04      	ldr	r3, [pc, #16]	; (8012c64 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	b10a      	cbz	r2, 8012c5a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 8012c56:	4803      	ldr	r0, [pc, #12]	; (8012c64 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8012c58:	4770      	bx	lr
 8012c5a:	4a03      	ldr	r2, [pc, #12]	; (8012c68 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8012c5c:	4801      	ldr	r0, [pc, #4]	; (8012c64 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8012c5e:	6812      	ldr	r2, [r2, #0]
 8012c60:	601a      	str	r2, [r3, #0]
 8012c62:	4770      	bx	lr
 8012c64:	20000308 	.word	0x20000308
 8012c68:	200002f8 	.word	0x200002f8

08012c6c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String>:
 8012c6c:	4a02      	ldr	r2, [pc, #8]	; (8012c78 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0xc>)
 8012c6e:	4b03      	ldr	r3, [pc, #12]	; (8012c7c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__String+0x10>)
 8012c70:	6812      	ldr	r2, [r2, #0]
 8012c72:	601a      	str	r2, [r3, #0]
 8012c74:	4770      	bx	lr
 8012c76:	bf00      	nop
 8012c78:	200002f8 	.word	0x200002f8
 8012c7c:	20000308 	.word	0x20000308

08012c80 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_init_function>:
 8012c80:	f007 b820 	b.w	8019cc4 <std_msgs__msg__String__init>

08012c84 <std_msgs__msg__String__rosidl_typesupport_introspection_c__String_fini_function>:
 8012c84:	f007 b830 	b.w	8019ce8 <std_msgs__msg__String__fini>

08012c88 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String>:
 8012c88:	4b04      	ldr	r3, [pc, #16]	; (8012c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	b10a      	cbz	r2, 8012c92 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0xa>
 8012c8e:	4803      	ldr	r0, [pc, #12]	; (8012c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8012c90:	4770      	bx	lr
 8012c92:	4a03      	ldr	r2, [pc, #12]	; (8012ca0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x18>)
 8012c94:	4801      	ldr	r0, [pc, #4]	; (8012c9c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__String+0x14>)
 8012c96:	6812      	ldr	r2, [r2, #0]
 8012c98:	601a      	str	r2, [r3, #0]
 8012c9a:	4770      	bx	lr
 8012c9c:	20000350 	.word	0x20000350
 8012ca0:	200002fc 	.word	0x200002fc

08012ca4 <_String__max_serialized_size>:
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	4770      	bx	lr

08012ca8 <_String__cdr_serialize>:
 8012ca8:	b1c8      	cbz	r0, 8012cde <_String__cdr_serialize+0x36>
 8012caa:	b570      	push	{r4, r5, r6, lr}
 8012cac:	6806      	ldr	r6, [r0, #0]
 8012cae:	4604      	mov	r4, r0
 8012cb0:	460d      	mov	r5, r1
 8012cb2:	b15e      	cbz	r6, 8012ccc <_String__cdr_serialize+0x24>
 8012cb4:	4630      	mov	r0, r6
 8012cb6:	f7ed facd 	bl	8000254 <strlen>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	1c42      	adds	r2, r0, #1
 8012cbe:	4631      	mov	r1, r6
 8012cc0:	4628      	mov	r0, r5
 8012cc2:	6063      	str	r3, [r4, #4]
 8012cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cc8:	f7fb bf76 	b.w	800ebb8 <ucdr_serialize_sequence_char>
 8012ccc:	4633      	mov	r3, r6
 8012cce:	4632      	mov	r2, r6
 8012cd0:	4631      	mov	r1, r6
 8012cd2:	4628      	mov	r0, r5
 8012cd4:	6063      	str	r3, [r4, #4]
 8012cd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012cda:	f7fb bf6d 	b.w	800ebb8 <ucdr_serialize_sequence_char>
 8012cde:	4770      	bx	lr

08012ce0 <get_serialized_size_std_msgs__msg__String>:
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	4604      	mov	r4, r0
 8012ce4:	b130      	cbz	r0, 8012cf4 <get_serialized_size_std_msgs__msg__String+0x14>
 8012ce6:	4608      	mov	r0, r1
 8012ce8:	2104      	movs	r1, #4
 8012cea:	f7fb fef5 	bl	800ead8 <ucdr_alignment>
 8012cee:	6863      	ldr	r3, [r4, #4]
 8012cf0:	3305      	adds	r3, #5
 8012cf2:	4418      	add	r0, r3
 8012cf4:	bd10      	pop	{r4, pc}
 8012cf6:	bf00      	nop

08012cf8 <_String__cdr_deserialize>:
 8012cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cfa:	460c      	mov	r4, r1
 8012cfc:	b083      	sub	sp, #12
 8012cfe:	b1a1      	cbz	r1, 8012d2a <_String__cdr_deserialize+0x32>
 8012d00:	688f      	ldr	r7, [r1, #8]
 8012d02:	ab01      	add	r3, sp, #4
 8012d04:	6809      	ldr	r1, [r1, #0]
 8012d06:	4606      	mov	r6, r0
 8012d08:	463a      	mov	r2, r7
 8012d0a:	f7fb ff67 	bl	800ebdc <ucdr_deserialize_sequence_char>
 8012d0e:	9b01      	ldr	r3, [sp, #4]
 8012d10:	4605      	mov	r5, r0
 8012d12:	b920      	cbnz	r0, 8012d1e <_String__cdr_deserialize+0x26>
 8012d14:	429f      	cmp	r7, r3
 8012d16:	d30c      	bcc.n	8012d32 <_String__cdr_deserialize+0x3a>
 8012d18:	4628      	mov	r0, r5
 8012d1a:	b003      	add	sp, #12
 8012d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d1e:	b103      	cbz	r3, 8012d22 <_String__cdr_deserialize+0x2a>
 8012d20:	3b01      	subs	r3, #1
 8012d22:	4628      	mov	r0, r5
 8012d24:	6063      	str	r3, [r4, #4]
 8012d26:	b003      	add	sp, #12
 8012d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d2a:	460d      	mov	r5, r1
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	b003      	add	sp, #12
 8012d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d32:	2101      	movs	r1, #1
 8012d34:	4630      	mov	r0, r6
 8012d36:	75b5      	strb	r5, [r6, #22]
 8012d38:	7571      	strb	r1, [r6, #21]
 8012d3a:	6065      	str	r5, [r4, #4]
 8012d3c:	f7fb fee4 	bl	800eb08 <ucdr_align_to>
 8012d40:	4630      	mov	r0, r6
 8012d42:	9901      	ldr	r1, [sp, #4]
 8012d44:	f7fb ff18 	bl	800eb78 <ucdr_advance_buffer>
 8012d48:	4628      	mov	r0, r5
 8012d4a:	b003      	add	sp, #12
 8012d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012d4e:	bf00      	nop

08012d50 <_String__get_serialized_size>:
 8012d50:	b510      	push	{r4, lr}
 8012d52:	4604      	mov	r4, r0
 8012d54:	b130      	cbz	r0, 8012d64 <_String__get_serialized_size+0x14>
 8012d56:	2104      	movs	r1, #4
 8012d58:	2000      	movs	r0, #0
 8012d5a:	f7fb febd 	bl	800ead8 <ucdr_alignment>
 8012d5e:	6863      	ldr	r3, [r4, #4]
 8012d60:	3305      	adds	r3, #5
 8012d62:	4418      	add	r0, r3
 8012d64:	bd10      	pop	{r4, pc}
 8012d66:	bf00      	nop

08012d68 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String>:
 8012d68:	4800      	ldr	r0, [pc, #0]	; (8012d6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__String+0x4>)
 8012d6a:	4770      	bx	lr
 8012d6c:	2000035c 	.word	0x2000035c

08012d70 <custom_test_msgs__srv__AddThreeInts_Request__init>:
 8012d70:	3800      	subs	r0, #0
 8012d72:	bf18      	it	ne
 8012d74:	2001      	movne	r0, #1
 8012d76:	4770      	bx	lr

08012d78 <custom_test_msgs__srv__AddThreeInts_Request__fini>:
 8012d78:	4770      	bx	lr
 8012d7a:	bf00      	nop

08012d7c <custom_test_msgs__srv__AddThreeInts_Response__init>:
 8012d7c:	3800      	subs	r0, #0
 8012d7e:	bf18      	it	ne
 8012d80:	2001      	movne	r0, #1
 8012d82:	4770      	bx	lr

08012d84 <custom_test_msgs__srv__AddThreeInts_Response__fini>:
 8012d84:	4770      	bx	lr
 8012d86:	bf00      	nop

08012d88 <drive_msgs__msg__DiffDrive__init>:
 8012d88:	b538      	push	{r3, r4, r5, lr}
 8012d8a:	4604      	mov	r4, r0
 8012d8c:	b128      	cbz	r0, 8012d9a <drive_msgs__msg__DiffDrive__init+0x12>
 8012d8e:	f7ff fe71 	bl	8012a74 <rosidl_runtime_c__String__init>
 8012d92:	4605      	mov	r5, r0
 8012d94:	b120      	cbz	r0, 8012da0 <drive_msgs__msg__DiffDrive__init+0x18>
 8012d96:	4628      	mov	r0, r5
 8012d98:	bd38      	pop	{r3, r4, r5, pc}
 8012d9a:	4605      	mov	r5, r0
 8012d9c:	4628      	mov	r0, r5
 8012d9e:	bd38      	pop	{r3, r4, r5, pc}
 8012da0:	4620      	mov	r0, r4
 8012da2:	f7ff fe7d 	bl	8012aa0 <rosidl_runtime_c__String__fini>
 8012da6:	4628      	mov	r0, r5
 8012da8:	bd38      	pop	{r3, r4, r5, pc}
 8012daa:	bf00      	nop

08012dac <drive_msgs__msg__DiffDrive__fini>:
 8012dac:	b108      	cbz	r0, 8012db2 <drive_msgs__msg__DiffDrive__fini+0x6>
 8012dae:	f7ff be77 	b.w	8012aa0 <rosidl_runtime_c__String__fini>
 8012db2:	4770      	bx	lr

08012db4 <ucdr_serialize_endian_array_char>:
 8012db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012db8:	4619      	mov	r1, r3
 8012dba:	461f      	mov	r7, r3
 8012dbc:	4605      	mov	r5, r0
 8012dbe:	4690      	mov	r8, r2
 8012dc0:	f7fb fe32 	bl	800ea28 <ucdr_check_buffer_available_for>
 8012dc4:	b9e0      	cbnz	r0, 8012e00 <ucdr_serialize_endian_array_char+0x4c>
 8012dc6:	463e      	mov	r6, r7
 8012dc8:	e00b      	b.n	8012de2 <ucdr_serialize_endian_array_char+0x2e>
 8012dca:	4441      	add	r1, r8
 8012dcc:	68a8      	ldr	r0, [r5, #8]
 8012dce:	4622      	mov	r2, r4
 8012dd0:	1b36      	subs	r6, r6, r4
 8012dd2:	f008 fe34 	bl	801ba3e <memcpy>
 8012dd6:	68ab      	ldr	r3, [r5, #8]
 8012dd8:	6928      	ldr	r0, [r5, #16]
 8012dda:	4423      	add	r3, r4
 8012ddc:	4420      	add	r0, r4
 8012dde:	60ab      	str	r3, [r5, #8]
 8012de0:	6128      	str	r0, [r5, #16]
 8012de2:	4631      	mov	r1, r6
 8012de4:	2201      	movs	r2, #1
 8012de6:	4628      	mov	r0, r5
 8012de8:	f7fb fea8 	bl	800eb3c <ucdr_check_final_buffer_behavior_array>
 8012dec:	1bb9      	subs	r1, r7, r6
 8012dee:	4604      	mov	r4, r0
 8012df0:	2800      	cmp	r0, #0
 8012df2:	d1ea      	bne.n	8012dca <ucdr_serialize_endian_array_char+0x16>
 8012df4:	2301      	movs	r3, #1
 8012df6:	7da8      	ldrb	r0, [r5, #22]
 8012df8:	756b      	strb	r3, [r5, #21]
 8012dfa:	4058      	eors	r0, r3
 8012dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e00:	463a      	mov	r2, r7
 8012e02:	4641      	mov	r1, r8
 8012e04:	68a8      	ldr	r0, [r5, #8]
 8012e06:	f008 fe1a 	bl	801ba3e <memcpy>
 8012e0a:	68aa      	ldr	r2, [r5, #8]
 8012e0c:	692b      	ldr	r3, [r5, #16]
 8012e0e:	443a      	add	r2, r7
 8012e10:	443b      	add	r3, r7
 8012e12:	60aa      	str	r2, [r5, #8]
 8012e14:	612b      	str	r3, [r5, #16]
 8012e16:	e7ed      	b.n	8012df4 <ucdr_serialize_endian_array_char+0x40>

08012e18 <ucdr_deserialize_endian_array_char>:
 8012e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	461f      	mov	r7, r3
 8012e20:	4605      	mov	r5, r0
 8012e22:	4690      	mov	r8, r2
 8012e24:	f7fb fe00 	bl	800ea28 <ucdr_check_buffer_available_for>
 8012e28:	b9e8      	cbnz	r0, 8012e66 <ucdr_deserialize_endian_array_char+0x4e>
 8012e2a:	463e      	mov	r6, r7
 8012e2c:	e00c      	b.n	8012e48 <ucdr_deserialize_endian_array_char+0x30>
 8012e2e:	eb08 0003 	add.w	r0, r8, r3
 8012e32:	68a9      	ldr	r1, [r5, #8]
 8012e34:	4622      	mov	r2, r4
 8012e36:	1b36      	subs	r6, r6, r4
 8012e38:	f008 fe01 	bl	801ba3e <memcpy>
 8012e3c:	68ab      	ldr	r3, [r5, #8]
 8012e3e:	6928      	ldr	r0, [r5, #16]
 8012e40:	4423      	add	r3, r4
 8012e42:	4420      	add	r0, r4
 8012e44:	60ab      	str	r3, [r5, #8]
 8012e46:	6128      	str	r0, [r5, #16]
 8012e48:	4631      	mov	r1, r6
 8012e4a:	2201      	movs	r2, #1
 8012e4c:	4628      	mov	r0, r5
 8012e4e:	f7fb fe75 	bl	800eb3c <ucdr_check_final_buffer_behavior_array>
 8012e52:	1bbb      	subs	r3, r7, r6
 8012e54:	4604      	mov	r4, r0
 8012e56:	2800      	cmp	r0, #0
 8012e58:	d1e9      	bne.n	8012e2e <ucdr_deserialize_endian_array_char+0x16>
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	7da8      	ldrb	r0, [r5, #22]
 8012e5e:	756b      	strb	r3, [r5, #21]
 8012e60:	4058      	eors	r0, r3
 8012e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e66:	463a      	mov	r2, r7
 8012e68:	68a9      	ldr	r1, [r5, #8]
 8012e6a:	4640      	mov	r0, r8
 8012e6c:	f008 fde7 	bl	801ba3e <memcpy>
 8012e70:	68aa      	ldr	r2, [r5, #8]
 8012e72:	692b      	ldr	r3, [r5, #16]
 8012e74:	443a      	add	r2, r7
 8012e76:	443b      	add	r3, r7
 8012e78:	60aa      	str	r2, [r5, #8]
 8012e7a:	612b      	str	r3, [r5, #16]
 8012e7c:	e7ed      	b.n	8012e5a <ucdr_deserialize_endian_array_char+0x42>
 8012e7e:	bf00      	nop

08012e80 <ucdr_serialize_array_uint8_t>:
 8012e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e84:	4688      	mov	r8, r1
 8012e86:	4611      	mov	r1, r2
 8012e88:	4617      	mov	r7, r2
 8012e8a:	4605      	mov	r5, r0
 8012e8c:	f7fb fdcc 	bl	800ea28 <ucdr_check_buffer_available_for>
 8012e90:	b9e0      	cbnz	r0, 8012ecc <ucdr_serialize_array_uint8_t+0x4c>
 8012e92:	463e      	mov	r6, r7
 8012e94:	e00b      	b.n	8012eae <ucdr_serialize_array_uint8_t+0x2e>
 8012e96:	4441      	add	r1, r8
 8012e98:	68a8      	ldr	r0, [r5, #8]
 8012e9a:	4622      	mov	r2, r4
 8012e9c:	1b36      	subs	r6, r6, r4
 8012e9e:	f008 fdce 	bl	801ba3e <memcpy>
 8012ea2:	68ab      	ldr	r3, [r5, #8]
 8012ea4:	6928      	ldr	r0, [r5, #16]
 8012ea6:	4423      	add	r3, r4
 8012ea8:	4420      	add	r0, r4
 8012eaa:	60ab      	str	r3, [r5, #8]
 8012eac:	6128      	str	r0, [r5, #16]
 8012eae:	4631      	mov	r1, r6
 8012eb0:	2201      	movs	r2, #1
 8012eb2:	4628      	mov	r0, r5
 8012eb4:	f7fb fe42 	bl	800eb3c <ucdr_check_final_buffer_behavior_array>
 8012eb8:	1bb9      	subs	r1, r7, r6
 8012eba:	4604      	mov	r4, r0
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	d1ea      	bne.n	8012e96 <ucdr_serialize_array_uint8_t+0x16>
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	7da8      	ldrb	r0, [r5, #22]
 8012ec4:	756b      	strb	r3, [r5, #21]
 8012ec6:	4058      	eors	r0, r3
 8012ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ecc:	463a      	mov	r2, r7
 8012ece:	4641      	mov	r1, r8
 8012ed0:	68a8      	ldr	r0, [r5, #8]
 8012ed2:	f008 fdb4 	bl	801ba3e <memcpy>
 8012ed6:	68aa      	ldr	r2, [r5, #8]
 8012ed8:	692b      	ldr	r3, [r5, #16]
 8012eda:	443a      	add	r2, r7
 8012edc:	443b      	add	r3, r7
 8012ede:	60aa      	str	r2, [r5, #8]
 8012ee0:	612b      	str	r3, [r5, #16]
 8012ee2:	e7ed      	b.n	8012ec0 <ucdr_serialize_array_uint8_t+0x40>

08012ee4 <ucdr_serialize_endian_array_uint8_t>:
 8012ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee8:	4619      	mov	r1, r3
 8012eea:	461f      	mov	r7, r3
 8012eec:	4605      	mov	r5, r0
 8012eee:	4690      	mov	r8, r2
 8012ef0:	f7fb fd9a 	bl	800ea28 <ucdr_check_buffer_available_for>
 8012ef4:	b9e0      	cbnz	r0, 8012f30 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8012ef6:	463e      	mov	r6, r7
 8012ef8:	e00b      	b.n	8012f12 <ucdr_serialize_endian_array_uint8_t+0x2e>
 8012efa:	4441      	add	r1, r8
 8012efc:	68a8      	ldr	r0, [r5, #8]
 8012efe:	4622      	mov	r2, r4
 8012f00:	1b36      	subs	r6, r6, r4
 8012f02:	f008 fd9c 	bl	801ba3e <memcpy>
 8012f06:	68ab      	ldr	r3, [r5, #8]
 8012f08:	6928      	ldr	r0, [r5, #16]
 8012f0a:	4423      	add	r3, r4
 8012f0c:	4420      	add	r0, r4
 8012f0e:	60ab      	str	r3, [r5, #8]
 8012f10:	6128      	str	r0, [r5, #16]
 8012f12:	4631      	mov	r1, r6
 8012f14:	2201      	movs	r2, #1
 8012f16:	4628      	mov	r0, r5
 8012f18:	f7fb fe10 	bl	800eb3c <ucdr_check_final_buffer_behavior_array>
 8012f1c:	1bb9      	subs	r1, r7, r6
 8012f1e:	4604      	mov	r4, r0
 8012f20:	2800      	cmp	r0, #0
 8012f22:	d1ea      	bne.n	8012efa <ucdr_serialize_endian_array_uint8_t+0x16>
 8012f24:	2301      	movs	r3, #1
 8012f26:	7da8      	ldrb	r0, [r5, #22]
 8012f28:	756b      	strb	r3, [r5, #21]
 8012f2a:	4058      	eors	r0, r3
 8012f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f30:	463a      	mov	r2, r7
 8012f32:	4641      	mov	r1, r8
 8012f34:	68a8      	ldr	r0, [r5, #8]
 8012f36:	f008 fd82 	bl	801ba3e <memcpy>
 8012f3a:	68aa      	ldr	r2, [r5, #8]
 8012f3c:	692b      	ldr	r3, [r5, #16]
 8012f3e:	443a      	add	r2, r7
 8012f40:	443b      	add	r3, r7
 8012f42:	60aa      	str	r2, [r5, #8]
 8012f44:	612b      	str	r3, [r5, #16]
 8012f46:	e7ed      	b.n	8012f24 <ucdr_serialize_endian_array_uint8_t+0x40>

08012f48 <ucdr_deserialize_array_uint8_t>:
 8012f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f4c:	4688      	mov	r8, r1
 8012f4e:	4611      	mov	r1, r2
 8012f50:	4617      	mov	r7, r2
 8012f52:	4605      	mov	r5, r0
 8012f54:	f7fb fd68 	bl	800ea28 <ucdr_check_buffer_available_for>
 8012f58:	b9e8      	cbnz	r0, 8012f96 <ucdr_deserialize_array_uint8_t+0x4e>
 8012f5a:	463e      	mov	r6, r7
 8012f5c:	e00c      	b.n	8012f78 <ucdr_deserialize_array_uint8_t+0x30>
 8012f5e:	eb08 0003 	add.w	r0, r8, r3
 8012f62:	68a9      	ldr	r1, [r5, #8]
 8012f64:	4622      	mov	r2, r4
 8012f66:	1b36      	subs	r6, r6, r4
 8012f68:	f008 fd69 	bl	801ba3e <memcpy>
 8012f6c:	68ab      	ldr	r3, [r5, #8]
 8012f6e:	6928      	ldr	r0, [r5, #16]
 8012f70:	4423      	add	r3, r4
 8012f72:	4420      	add	r0, r4
 8012f74:	60ab      	str	r3, [r5, #8]
 8012f76:	6128      	str	r0, [r5, #16]
 8012f78:	4631      	mov	r1, r6
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f7fb fddd 	bl	800eb3c <ucdr_check_final_buffer_behavior_array>
 8012f82:	1bbb      	subs	r3, r7, r6
 8012f84:	4604      	mov	r4, r0
 8012f86:	2800      	cmp	r0, #0
 8012f88:	d1e9      	bne.n	8012f5e <ucdr_deserialize_array_uint8_t+0x16>
 8012f8a:	2301      	movs	r3, #1
 8012f8c:	7da8      	ldrb	r0, [r5, #22]
 8012f8e:	756b      	strb	r3, [r5, #21]
 8012f90:	4058      	eors	r0, r3
 8012f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f96:	463a      	mov	r2, r7
 8012f98:	68a9      	ldr	r1, [r5, #8]
 8012f9a:	4640      	mov	r0, r8
 8012f9c:	f008 fd4f 	bl	801ba3e <memcpy>
 8012fa0:	68aa      	ldr	r2, [r5, #8]
 8012fa2:	692b      	ldr	r3, [r5, #16]
 8012fa4:	443a      	add	r2, r7
 8012fa6:	443b      	add	r3, r7
 8012fa8:	60aa      	str	r2, [r5, #8]
 8012faa:	612b      	str	r3, [r5, #16]
 8012fac:	e7ed      	b.n	8012f8a <ucdr_deserialize_array_uint8_t+0x42>
 8012fae:	bf00      	nop

08012fb0 <ucdr_deserialize_endian_array_uint8_t>:
 8012fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb4:	4619      	mov	r1, r3
 8012fb6:	461f      	mov	r7, r3
 8012fb8:	4605      	mov	r5, r0
 8012fba:	4690      	mov	r8, r2
 8012fbc:	f7fb fd34 	bl	800ea28 <ucdr_check_buffer_available_for>
 8012fc0:	b9e8      	cbnz	r0, 8012ffe <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8012fc2:	463e      	mov	r6, r7
 8012fc4:	e00c      	b.n	8012fe0 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8012fc6:	eb08 0003 	add.w	r0, r8, r3
 8012fca:	68a9      	ldr	r1, [r5, #8]
 8012fcc:	4622      	mov	r2, r4
 8012fce:	1b36      	subs	r6, r6, r4
 8012fd0:	f008 fd35 	bl	801ba3e <memcpy>
 8012fd4:	68ab      	ldr	r3, [r5, #8]
 8012fd6:	6928      	ldr	r0, [r5, #16]
 8012fd8:	4423      	add	r3, r4
 8012fda:	4420      	add	r0, r4
 8012fdc:	60ab      	str	r3, [r5, #8]
 8012fde:	6128      	str	r0, [r5, #16]
 8012fe0:	4631      	mov	r1, r6
 8012fe2:	2201      	movs	r2, #1
 8012fe4:	4628      	mov	r0, r5
 8012fe6:	f7fb fda9 	bl	800eb3c <ucdr_check_final_buffer_behavior_array>
 8012fea:	1bbb      	subs	r3, r7, r6
 8012fec:	4604      	mov	r4, r0
 8012fee:	2800      	cmp	r0, #0
 8012ff0:	d1e9      	bne.n	8012fc6 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8012ff2:	2301      	movs	r3, #1
 8012ff4:	7da8      	ldrb	r0, [r5, #22]
 8012ff6:	756b      	strb	r3, [r5, #21]
 8012ff8:	4058      	eors	r0, r3
 8012ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ffe:	463a      	mov	r2, r7
 8013000:	68a9      	ldr	r1, [r5, #8]
 8013002:	4640      	mov	r0, r8
 8013004:	f008 fd1b 	bl	801ba3e <memcpy>
 8013008:	68aa      	ldr	r2, [r5, #8]
 801300a:	692b      	ldr	r3, [r5, #16]
 801300c:	443a      	add	r2, r7
 801300e:	443b      	add	r3, r7
 8013010:	60aa      	str	r2, [r5, #8]
 8013012:	612b      	str	r3, [r5, #16]
 8013014:	e7ed      	b.n	8012ff2 <ucdr_deserialize_endian_array_uint8_t+0x42>
 8013016:	bf00      	nop

08013018 <uxr_buffer_delete_entity>:
 8013018:	b510      	push	{r4, lr}
 801301a:	2300      	movs	r3, #0
 801301c:	b08e      	sub	sp, #56	; 0x38
 801301e:	4604      	mov	r4, r0
 8013020:	9103      	str	r1, [sp, #12]
 8013022:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8013026:	2303      	movs	r3, #3
 8013028:	2204      	movs	r2, #4
 801302a:	9300      	str	r3, [sp, #0]
 801302c:	ab06      	add	r3, sp, #24
 801302e:	f001 fb77 	bl	8014720 <uxr_prepare_stream_to_write_submessage>
 8013032:	b918      	cbnz	r0, 801303c <uxr_buffer_delete_entity+0x24>
 8013034:	4604      	mov	r4, r0
 8013036:	4620      	mov	r0, r4
 8013038:	b00e      	add	sp, #56	; 0x38
 801303a:	bd10      	pop	{r4, pc}
 801303c:	9902      	ldr	r1, [sp, #8]
 801303e:	aa05      	add	r2, sp, #20
 8013040:	4620      	mov	r0, r4
 8013042:	f001 fca9 	bl	8014998 <uxr_init_base_object_request>
 8013046:	4604      	mov	r4, r0
 8013048:	a905      	add	r1, sp, #20
 801304a:	a806      	add	r0, sp, #24
 801304c:	f003 fbae 	bl	80167ac <uxr_serialize_DELETE_Payload>
 8013050:	4620      	mov	r0, r4
 8013052:	b00e      	add	sp, #56	; 0x38
 8013054:	bd10      	pop	{r4, pc}
 8013056:	bf00      	nop

08013058 <uxr_common_create_entity>:
 8013058:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801305c:	b510      	push	{r4, lr}
 801305e:	f1bc 0f01 	cmp.w	ip, #1
 8013062:	b08c      	sub	sp, #48	; 0x30
 8013064:	4604      	mov	r4, r0
 8013066:	9202      	str	r2, [sp, #8]
 8013068:	bf0c      	ite	eq
 801306a:	f003 0201 	andeq.w	r2, r3, #1
 801306e:	2200      	movne	r2, #0
 8013070:	330e      	adds	r3, #14
 8013072:	9103      	str	r1, [sp, #12]
 8013074:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8013078:	441a      	add	r2, r3
 801307a:	ab04      	add	r3, sp, #16
 801307c:	9101      	str	r1, [sp, #4]
 801307e:	2101      	movs	r1, #1
 8013080:	b292      	uxth	r2, r2
 8013082:	9100      	str	r1, [sp, #0]
 8013084:	9903      	ldr	r1, [sp, #12]
 8013086:	f001 fb4b 	bl	8014720 <uxr_prepare_stream_to_write_submessage>
 801308a:	b918      	cbnz	r0, 8013094 <uxr_common_create_entity+0x3c>
 801308c:	4604      	mov	r4, r0
 801308e:	4620      	mov	r0, r4
 8013090:	b00c      	add	sp, #48	; 0x30
 8013092:	bd10      	pop	{r4, pc}
 8013094:	9902      	ldr	r1, [sp, #8]
 8013096:	4620      	mov	r0, r4
 8013098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801309a:	f001 fc7d 	bl	8014998 <uxr_init_base_object_request>
 801309e:	4604      	mov	r4, r0
 80130a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80130a2:	a804      	add	r0, sp, #16
 80130a4:	f003 fadc 	bl	8016660 <uxr_serialize_CREATE_Payload>
 80130a8:	4620      	mov	r0, r4
 80130aa:	b00c      	add	sp, #48	; 0x30
 80130ac:	bd10      	pop	{r4, pc}
 80130ae:	bf00      	nop

080130b0 <uxr_buffer_create_participant_bin>:
 80130b0:	b570      	push	{r4, r5, r6, lr}
 80130b2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 80130b6:	4605      	mov	r5, r0
 80130b8:	ac11      	add	r4, sp, #68	; 0x44
 80130ba:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 80130be:	2303      	movs	r3, #3
 80130c0:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 80130c4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80130c8:	7223      	strb	r3, [r4, #8]
 80130ca:	2300      	movs	r3, #0
 80130cc:	2201      	movs	r2, #1
 80130ce:	f88d 3014 	strb.w	r3, [sp, #20]
 80130d2:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 80130d4:	7122      	strb	r2, [r4, #4]
 80130d6:	b1cb      	cbz	r3, 801310c <uxr_buffer_create_participant_bin+0x5c>
 80130d8:	f88d 201c 	strb.w	r2, [sp, #28]
 80130dc:	9308      	str	r3, [sp, #32]
 80130de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80130e2:	a915      	add	r1, sp, #84	; 0x54
 80130e4:	a809      	add	r0, sp, #36	; 0x24
 80130e6:	f7fb fcf3 	bl	800ead0 <ucdr_init_buffer>
 80130ea:	a905      	add	r1, sp, #20
 80130ec:	a809      	add	r0, sp, #36	; 0x24
 80130ee:	f002 fe6d 	bl	8015dcc <uxr_serialize_OBJK_DomainParticipant_Binary>
 80130f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80130f4:	9600      	str	r6, [sp, #0]
 80130f6:	4628      	mov	r0, r5
 80130f8:	9401      	str	r4, [sp, #4]
 80130fa:	60e3      	str	r3, [r4, #12]
 80130fc:	b29b      	uxth	r3, r3
 80130fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013102:	f7ff ffa9 	bl	8013058 <uxr_common_create_entity>
 8013106:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 801310a:	bd70      	pop	{r4, r5, r6, pc}
 801310c:	f88d 301c 	strb.w	r3, [sp, #28]
 8013110:	e7e5      	b.n	80130de <uxr_buffer_create_participant_bin+0x2e>
 8013112:	bf00      	nop

08013114 <uxr_buffer_create_topic_bin>:
 8013114:	b570      	push	{r4, r5, r6, lr}
 8013116:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 801311a:	4605      	mov	r5, r0
 801311c:	4618      	mov	r0, r3
 801311e:	9105      	str	r1, [sp, #20]
 8013120:	a997      	add	r1, sp, #604	; 0x25c
 8013122:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 8013126:	ac13      	add	r4, sp, #76	; 0x4c
 8013128:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801312c:	2302      	movs	r3, #2
 801312e:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8013132:	f000 fa8d 	bl	8013650 <uxr_object_id_to_raw>
 8013136:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 8013138:	f44f 7200 	mov.w	r2, #512	; 0x200
 801313c:	a917      	add	r1, sp, #92	; 0x5c
 801313e:	a80b      	add	r0, sp, #44	; 0x2c
 8013140:	9306      	str	r3, [sp, #24]
 8013142:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 8013144:	930a      	str	r3, [sp, #40]	; 0x28
 8013146:	2303      	movs	r3, #3
 8013148:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 801314c:	2301      	movs	r3, #1
 801314e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013152:	2300      	movs	r3, #0
 8013154:	f88d 301c 	strb.w	r3, [sp, #28]
 8013158:	f7fb fcba 	bl	800ead0 <ucdr_init_buffer>
 801315c:	a906      	add	r1, sp, #24
 801315e:	a80b      	add	r0, sp, #44	; 0x2c
 8013160:	f002 fe56 	bl	8015e10 <uxr_serialize_OBJK_Topic_Binary>
 8013164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013166:	4628      	mov	r0, r5
 8013168:	9600      	str	r6, [sp, #0]
 801316a:	9316      	str	r3, [sp, #88]	; 0x58
 801316c:	b29b      	uxth	r3, r3
 801316e:	9401      	str	r4, [sp, #4]
 8013170:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013174:	f7ff ff70 	bl	8013058 <uxr_common_create_entity>
 8013178:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 801317c:	bd70      	pop	{r4, r5, r6, pc}
 801317e:	bf00      	nop

08013180 <uxr_buffer_create_publisher_bin>:
 8013180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013182:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 8013186:	2603      	movs	r6, #3
 8013188:	4605      	mov	r5, r0
 801318a:	4618      	mov	r0, r3
 801318c:	9105      	str	r1, [sp, #20]
 801318e:	a992      	add	r1, sp, #584	; 0x248
 8013190:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 8013194:	ac0e      	add	r4, sp, #56	; 0x38
 8013196:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 801319a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801319e:	f000 fa57 	bl	8013650 <uxr_object_id_to_raw>
 80131a2:	2300      	movs	r3, #0
 80131a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131a8:	a912      	add	r1, sp, #72	; 0x48
 80131aa:	a806      	add	r0, sp, #24
 80131ac:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 80131b0:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 80131b4:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 80131b8:	f7fb fc8a 	bl	800ead0 <ucdr_init_buffer>
 80131bc:	a993      	add	r1, sp, #588	; 0x24c
 80131be:	a806      	add	r0, sp, #24
 80131c0:	f002 feda 	bl	8015f78 <uxr_serialize_OBJK_Publisher_Binary>
 80131c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131c6:	4628      	mov	r0, r5
 80131c8:	9700      	str	r7, [sp, #0]
 80131ca:	9311      	str	r3, [sp, #68]	; 0x44
 80131cc:	b29b      	uxth	r3, r3
 80131ce:	9401      	str	r4, [sp, #4]
 80131d0:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80131d4:	f7ff ff40 	bl	8013058 <uxr_common_create_entity>
 80131d8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 80131dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80131de:	bf00      	nop

080131e0 <uxr_buffer_create_subscriber_bin>:
 80131e0:	b570      	push	{r4, r5, r6, lr}
 80131e2:	f5ad 6d91 	sub.w	sp, sp, #1160	; 0x488
 80131e6:	4605      	mov	r5, r0
 80131e8:	4618      	mov	r0, r3
 80131ea:	9105      	str	r1, [sp, #20]
 80131ec:	a992      	add	r1, sp, #584	; 0x248
 80131ee:	f89d 6498 	ldrb.w	r6, [sp, #1176]	; 0x498
 80131f2:	ac0e      	add	r4, sp, #56	; 0x38
 80131f4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80131f8:	2304      	movs	r3, #4
 80131fa:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
 80131fe:	f000 fa27 	bl	8013650 <uxr_object_id_to_raw>
 8013202:	2300      	movs	r3, #0
 8013204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013208:	a912      	add	r1, sp, #72	; 0x48
 801320a:	a806      	add	r0, sp, #24
 801320c:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 8013210:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 8013214:	2303      	movs	r3, #3
 8013216:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 801321a:	f7fb fc59 	bl	800ead0 <ucdr_init_buffer>
 801321e:	a993      	add	r1, sp, #588	; 0x24c
 8013220:	a806      	add	r0, sp, #24
 8013222:	f002 ff59 	bl	80160d8 <uxr_serialize_OBJK_Subscriber_Binary>
 8013226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013228:	4628      	mov	r0, r5
 801322a:	9600      	str	r6, [sp, #0]
 801322c:	9311      	str	r3, [sp, #68]	; 0x44
 801322e:	b29b      	uxth	r3, r3
 8013230:	9401      	str	r4, [sp, #4]
 8013232:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013236:	f7ff ff0f 	bl	8013058 <uxr_common_create_entity>
 801323a:	f50d 6d91 	add.w	sp, sp, #1160	; 0x488
 801323e:	bd70      	pop	{r4, r5, r6, pc}

08013240 <uxr_buffer_create_datawriter_bin>:
 8013240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013244:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8013248:	4606      	mov	r6, r0
 801324a:	4618      	mov	r0, r3
 801324c:	2703      	movs	r7, #3
 801324e:	ac1d      	add	r4, sp, #116	; 0x74
 8013250:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 8013254:	9105      	str	r1, [sp, #20]
 8013256:	a9a1      	add	r1, sp, #644	; 0x284
 8013258:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 801325c:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013260:	2305      	movs	r3, #5
 8013262:	7123      	strb	r3, [r4, #4]
 8013264:	f000 f9f4 	bl	8013650 <uxr_object_id_to_raw>
 8013268:	a90e      	add	r1, sp, #56	; 0x38
 801326a:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 801326c:	7227      	strb	r7, [r4, #8]
 801326e:	f000 f9ef 	bl	8013650 <uxr_object_id_to_raw>
 8013272:	2300      	movs	r3, #0
 8013274:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8013278:	3d00      	subs	r5, #0
 801327a:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 801327e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8013282:	bf18      	it	ne
 8013284:	2501      	movne	r5, #1
 8013286:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801328a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801328e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013292:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013296:	2301      	movs	r3, #1
 8013298:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 801329c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 80132a0:	bb8a      	cbnz	r2, 8013306 <uxr_buffer_create_datawriter_bin+0xc6>
 80132a2:	f04f 0e23 	mov.w	lr, #35	; 0x23
 80132a6:	f04f 0c13 	mov.w	ip, #19
 80132aa:	250b      	movs	r5, #11
 80132ac:	2221      	movs	r2, #33	; 0x21
 80132ae:	2111      	movs	r1, #17
 80132b0:	2009      	movs	r0, #9
 80132b2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80132b6:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 80132ba:	b923      	cbnz	r3, 80132c6 <uxr_buffer_create_datawriter_bin+0x86>
 80132bc:	4672      	mov	r2, lr
 80132be:	4661      	mov	r1, ip
 80132c0:	4628      	mov	r0, r5
 80132c2:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80132c6:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	d025      	beq.n	801331a <uxr_buffer_create_datawriter_bin+0xda>
 80132ce:	2b03      	cmp	r3, #3
 80132d0:	d029      	beq.n	8013326 <uxr_buffer_create_datawriter_bin+0xe6>
 80132d2:	b32b      	cbz	r3, 8013320 <uxr_buffer_create_datawriter_bin+0xe0>
 80132d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132d8:	a921      	add	r1, sp, #132	; 0x84
 80132da:	a806      	add	r0, sp, #24
 80132dc:	f7fb fbf8 	bl	800ead0 <ucdr_init_buffer>
 80132e0:	a90e      	add	r1, sp, #56	; 0x38
 80132e2:	a806      	add	r0, sp, #24
 80132e4:	f002 ffaa 	bl	801623c <uxr_serialize_OBJK_DataWriter_Binary>
 80132e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132ea:	f8cd 8000 	str.w	r8, [sp]
 80132ee:	4630      	mov	r0, r6
 80132f0:	9401      	str	r4, [sp, #4]
 80132f2:	60e3      	str	r3, [r4, #12]
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80132fa:	f7ff fead 	bl	8013058 <uxr_common_create_entity>
 80132fe:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8013302:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013306:	f04f 0e22 	mov.w	lr, #34	; 0x22
 801330a:	f04f 0c12 	mov.w	ip, #18
 801330e:	250a      	movs	r5, #10
 8013310:	2220      	movs	r2, #32
 8013312:	2110      	movs	r1, #16
 8013314:	2008      	movs	r0, #8
 8013316:	2702      	movs	r7, #2
 8013318:	e7cd      	b.n	80132b6 <uxr_buffer_create_datawriter_bin+0x76>
 801331a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 801331e:	e7d9      	b.n	80132d4 <uxr_buffer_create_datawriter_bin+0x94>
 8013320:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8013324:	e7d6      	b.n	80132d4 <uxr_buffer_create_datawriter_bin+0x94>
 8013326:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801332a:	e7d3      	b.n	80132d4 <uxr_buffer_create_datawriter_bin+0x94>

0801332c <uxr_buffer_create_datareader_bin>:
 801332c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013330:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8013334:	4606      	mov	r6, r0
 8013336:	4618      	mov	r0, r3
 8013338:	2703      	movs	r7, #3
 801333a:	ac1f      	add	r4, sp, #124	; 0x7c
 801333c:	f8bd 52b0 	ldrh.w	r5, [sp, #688]	; 0x2b0
 8013340:	9105      	str	r1, [sp, #20]
 8013342:	a9a3      	add	r1, sp, #652	; 0x28c
 8013344:	f89d 82b4 	ldrb.w	r8, [sp, #692]	; 0x2b4
 8013348:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801334c:	2306      	movs	r3, #6
 801334e:	7123      	strb	r3, [r4, #4]
 8013350:	f000 f97e 	bl	8013650 <uxr_object_id_to_raw>
 8013354:	a90e      	add	r1, sp, #56	; 0x38
 8013356:	98aa      	ldr	r0, [sp, #680]	; 0x2a8
 8013358:	7227      	strb	r7, [r4, #8]
 801335a:	f000 f979 	bl	8013650 <uxr_object_id_to_raw>
 801335e:	2300      	movs	r3, #0
 8013360:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 8013364:	3d00      	subs	r5, #0
 8013366:	f89d 22ad 	ldrb.w	r2, [sp, #685]	; 0x2ad
 801336a:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 801336e:	bf18      	it	ne
 8013370:	2501      	movne	r5, #1
 8013372:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 8013376:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 801337a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 801337e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8013382:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8013386:	2301      	movs	r3, #1
 8013388:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 801338c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8013390:	bb8a      	cbnz	r2, 80133f6 <uxr_buffer_create_datareader_bin+0xca>
 8013392:	f04f 0e23 	mov.w	lr, #35	; 0x23
 8013396:	f04f 0c13 	mov.w	ip, #19
 801339a:	250b      	movs	r5, #11
 801339c:	2221      	movs	r2, #33	; 0x21
 801339e:	2111      	movs	r1, #17
 80133a0:	2009      	movs	r0, #9
 80133a2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80133a6:	f89d 32ae 	ldrb.w	r3, [sp, #686]	; 0x2ae
 80133aa:	b923      	cbnz	r3, 80133b6 <uxr_buffer_create_datareader_bin+0x8a>
 80133ac:	4672      	mov	r2, lr
 80133ae:	4661      	mov	r1, ip
 80133b0:	4628      	mov	r0, r5
 80133b2:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 80133b6:	f89d 32ac 	ldrb.w	r3, [sp, #684]	; 0x2ac
 80133ba:	2b01      	cmp	r3, #1
 80133bc:	d025      	beq.n	801340a <uxr_buffer_create_datareader_bin+0xde>
 80133be:	2b03      	cmp	r3, #3
 80133c0:	d029      	beq.n	8013416 <uxr_buffer_create_datareader_bin+0xea>
 80133c2:	b32b      	cbz	r3, 8013410 <uxr_buffer_create_datareader_bin+0xe4>
 80133c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133c8:	a923      	add	r1, sp, #140	; 0x8c
 80133ca:	a806      	add	r0, sp, #24
 80133cc:	f7fb fb80 	bl	800ead0 <ucdr_init_buffer>
 80133d0:	a90e      	add	r1, sp, #56	; 0x38
 80133d2:	a806      	add	r0, sp, #24
 80133d4:	f002 fef6 	bl	80161c4 <uxr_serialize_OBJK_DataReader_Binary>
 80133d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133da:	f8cd 8000 	str.w	r8, [sp]
 80133de:	4630      	mov	r0, r6
 80133e0:	9401      	str	r4, [sp, #4]
 80133e2:	60e3      	str	r3, [r4, #12]
 80133e4:	b29b      	uxth	r3, r3
 80133e6:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80133ea:	f7ff fe35 	bl	8013058 <uxr_common_create_entity>
 80133ee:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 80133f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133f6:	f04f 0e22 	mov.w	lr, #34	; 0x22
 80133fa:	f04f 0c12 	mov.w	ip, #18
 80133fe:	250a      	movs	r5, #10
 8013400:	2220      	movs	r2, #32
 8013402:	2110      	movs	r1, #16
 8013404:	2008      	movs	r0, #8
 8013406:	2702      	movs	r7, #2
 8013408:	e7cd      	b.n	80133a6 <uxr_buffer_create_datareader_bin+0x7a>
 801340a:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 801340e:	e7d9      	b.n	80133c4 <uxr_buffer_create_datareader_bin+0x98>
 8013410:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 8013414:	e7d6      	b.n	80133c4 <uxr_buffer_create_datareader_bin+0x98>
 8013416:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801341a:	e7d3      	b.n	80133c4 <uxr_buffer_create_datareader_bin+0x98>

0801341c <uxr_buffer_create_replier_bin>:
 801341c:	b570      	push	{r4, r5, r6, lr}
 801341e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8013422:	4605      	mov	r5, r0
 8013424:	4618      	mov	r0, r3
 8013426:	9105      	str	r1, [sp, #20]
 8013428:	a999      	add	r1, sp, #612	; 0x264
 801342a:	f89d 6294 	ldrb.w	r6, [sp, #660]	; 0x294
 801342e:	ac15      	add	r4, sp, #84	; 0x54
 8013430:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8013434:	2308      	movs	r3, #8
 8013436:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
 801343a:	f000 f909 	bl	8013650 <uxr_object_id_to_raw>
 801343e:	9b9e      	ldr	r3, [sp, #632]	; 0x278
 8013440:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013444:	a919      	add	r1, sp, #100	; 0x64
 8013446:	a80d      	add	r0, sp, #52	; 0x34
 8013448:	9306      	str	r3, [sp, #24]
 801344a:	9b9f      	ldr	r3, [sp, #636]	; 0x27c
 801344c:	9307      	str	r3, [sp, #28]
 801344e:	9ba0      	ldr	r3, [sp, #640]	; 0x280
 8013450:	9308      	str	r3, [sp, #32]
 8013452:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8013454:	930c      	str	r3, [sp, #48]	; 0x30
 8013456:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8013458:	930a      	str	r3, [sp, #40]	; 0x28
 801345a:	2301      	movs	r3, #1
 801345c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8013460:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013464:	2303      	movs	r3, #3
 8013466:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
 801346a:	f7fb fb31 	bl	800ead0 <ucdr_init_buffer>
 801346e:	a906      	add	r1, sp, #24
 8013470:	a80d      	add	r0, sp, #52	; 0x34
 8013472:	f002 ff0f 	bl	8016294 <uxr_serialize_OBJK_Replier_Binary>
 8013476:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013478:	4628      	mov	r0, r5
 801347a:	9600      	str	r6, [sp, #0]
 801347c:	9318      	str	r3, [sp, #96]	; 0x60
 801347e:	b29b      	uxth	r3, r3
 8013480:	9401      	str	r4, [sp, #4]
 8013482:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8013486:	f7ff fde7 	bl	8013058 <uxr_common_create_entity>
 801348a:	f50d 7d1a 	add.w	sp, sp, #616	; 0x268
 801348e:	bd70      	pop	{r4, r5, r6, pc}

08013490 <get_custom_error>:
 8013490:	4b01      	ldr	r3, [pc, #4]	; (8013498 <get_custom_error+0x8>)
 8013492:	7818      	ldrb	r0, [r3, #0]
 8013494:	4770      	bx	lr
 8013496:	bf00      	nop
 8013498:	20011454 	.word	0x20011454

0801349c <recv_custom_msg>:
 801349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134a0:	4693      	mov	fp, r2
 80134a2:	b089      	sub	sp, #36	; 0x24
 80134a4:	2200      	movs	r2, #0
 80134a6:	4604      	mov	r4, r0
 80134a8:	468a      	mov	sl, r1
 80134aa:	9305      	str	r3, [sp, #20]
 80134ac:	f88d 201e 	strb.w	r2, [sp, #30]
 80134b0:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 80134b4:	b322      	cbz	r2, 8013500 <recv_custom_msg+0x64>
 80134b6:	f200 2902 	addw	r9, r0, #514	; 0x202
 80134ba:	f10d 081f 	add.w	r8, sp, #31
 80134be:	af05      	add	r7, sp, #20
 80134c0:	f10d 061e 	add.w	r6, sp, #30
 80134c4:	f44f 7500 	mov.w	r5, #512	; 0x200
 80134c8:	e002      	b.n	80134d0 <recv_custom_msg+0x34>
 80134ca:	9b05      	ldr	r3, [sp, #20]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	dd0f      	ble.n	80134f0 <recv_custom_msg+0x54>
 80134d0:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 80134d4:	4623      	mov	r3, r4
 80134d6:	4622      	mov	r2, r4
 80134d8:	4648      	mov	r0, r9
 80134da:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80134de:	e9cd 5600 	strd	r5, r6, [sp]
 80134e2:	f001 fc6f 	bl	8014dc4 <uxr_read_framed_msg>
 80134e6:	2800      	cmp	r0, #0
 80134e8:	d0ef      	beq.n	80134ca <recv_custom_msg+0x2e>
 80134ea:	f89d 301e 	ldrb.w	r3, [sp, #30]
 80134ee:	b1b3      	cbz	r3, 801351e <recv_custom_msg+0x82>
 80134f0:	4b0f      	ldr	r3, [pc, #60]	; (8013530 <recv_custom_msg+0x94>)
 80134f2:	2000      	movs	r0, #0
 80134f4:	f89d 201f 	ldrb.w	r2, [sp, #31]
 80134f8:	701a      	strb	r2, [r3, #0]
 80134fa:	b009      	add	sp, #36	; 0x24
 80134fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013500:	f10d 021f 	add.w	r2, sp, #31
 8013504:	4601      	mov	r1, r0
 8013506:	9200      	str	r2, [sp, #0]
 8013508:	f44f 7200 	mov.w	r2, #512	; 0x200
 801350c:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8013510:	47a8      	blx	r5
 8013512:	2800      	cmp	r0, #0
 8013514:	d0ec      	beq.n	80134f0 <recv_custom_msg+0x54>
 8013516:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d1e8      	bne.n	80134f0 <recv_custom_msg+0x54>
 801351e:	f8cb 0000 	str.w	r0, [fp]
 8013522:	2001      	movs	r0, #1
 8013524:	f8ca 4000 	str.w	r4, [sl]
 8013528:	b009      	add	sp, #36	; 0x24
 801352a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801352e:	bf00      	nop
 8013530:	20011454 	.word	0x20011454

08013534 <send_custom_msg>:
 8013534:	b530      	push	{r4, r5, lr}
 8013536:	f890 5200 	ldrb.w	r5, [r0, #512]	; 0x200
 801353a:	b087      	sub	sp, #28
 801353c:	4614      	mov	r4, r2
 801353e:	b995      	cbnz	r5, 8013566 <send_custom_msg+0x32>
 8013540:	f8d0 5270 	ldr.w	r5, [r0, #624]	; 0x270
 8013544:	f10d 0317 	add.w	r3, sp, #23
 8013548:	47a8      	blx	r5
 801354a:	1e03      	subs	r3, r0, #0
 801354c:	bf18      	it	ne
 801354e:	2301      	movne	r3, #1
 8013550:	42a0      	cmp	r0, r4
 8013552:	bf18      	it	ne
 8013554:	2300      	movne	r3, #0
 8013556:	b91b      	cbnz	r3, 8013560 <send_custom_msg+0x2c>
 8013558:	4a0a      	ldr	r2, [pc, #40]	; (8013584 <send_custom_msg+0x50>)
 801355a:	f89d 1017 	ldrb.w	r1, [sp, #23]
 801355e:	7011      	strb	r1, [r2, #0]
 8013560:	4618      	mov	r0, r3
 8013562:	b007      	add	sp, #28
 8013564:	bd30      	pop	{r4, r5, pc}
 8013566:	460b      	mov	r3, r1
 8013568:	2200      	movs	r2, #0
 801356a:	f10d 0117 	add.w	r1, sp, #23
 801356e:	9400      	str	r4, [sp, #0]
 8013570:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8013574:	4602      	mov	r2, r0
 8013576:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 801357a:	f200 2002 	addw	r0, r0, #514	; 0x202
 801357e:	f001 fa43 	bl	8014a08 <uxr_write_framed_msg>
 8013582:	e7e2      	b.n	801354a <send_custom_msg+0x16>
 8013584:	20011454 	.word	0x20011454

08013588 <uxr_set_custom_transport_callbacks>:
 8013588:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 801358c:	9901      	ldr	r1, [sp, #4]
 801358e:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8013592:	9b00      	ldr	r3, [sp, #0]
 8013594:	e9c0 319c 	strd	r3, r1, [r0, #624]	; 0x270
 8013598:	4770      	bx	lr
 801359a:	bf00      	nop

0801359c <uxr_init_custom_transport>:
 801359c:	b538      	push	{r3, r4, r5, lr}
 801359e:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 80135a2:	b303      	cbz	r3, 80135e6 <uxr_init_custom_transport+0x4a>
 80135a4:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80135a8:	4604      	mov	r4, r0
 80135aa:	b1e2      	cbz	r2, 80135e6 <uxr_init_custom_transport+0x4a>
 80135ac:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 80135b0:	b1ca      	cbz	r2, 80135e6 <uxr_init_custom_transport+0x4a>
 80135b2:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 80135b6:	b1b2      	cbz	r2, 80135e6 <uxr_init_custom_transport+0x4a>
 80135b8:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 80135bc:	4798      	blx	r3
 80135be:	4605      	mov	r5, r0
 80135c0:	b188      	cbz	r0, 80135e6 <uxr_init_custom_transport+0x4a>
 80135c2:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80135c6:	b98b      	cbnz	r3, 80135ec <uxr_init_custom_transport+0x50>
 80135c8:	4b0b      	ldr	r3, [pc, #44]	; (80135f8 <uxr_init_custom_transport+0x5c>)
 80135ca:	4628      	mov	r0, r5
 80135cc:	490b      	ldr	r1, [pc, #44]	; (80135fc <uxr_init_custom_transport+0x60>)
 80135ce:	4a0c      	ldr	r2, [pc, #48]	; (8013600 <uxr_init_custom_transport+0x64>)
 80135d0:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 80135d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135d8:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 80135dc:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 80135e0:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 80135e4:	bd38      	pop	{r3, r4, r5, pc}
 80135e6:	2500      	movs	r5, #0
 80135e8:	4628      	mov	r0, r5
 80135ea:	bd38      	pop	{r3, r4, r5, pc}
 80135ec:	2100      	movs	r1, #0
 80135ee:	f204 2002 	addw	r0, r4, #514	; 0x202
 80135f2:	f001 fa03 	bl	80149fc <uxr_init_framing_io>
 80135f6:	e7e7      	b.n	80135c8 <uxr_init_custom_transport+0x2c>
 80135f8:	0801349d 	.word	0x0801349d
 80135fc:	08013535 	.word	0x08013535
 8013600:	08013491 	.word	0x08013491

08013604 <uxr_close_custom_transport>:
 8013604:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8013608:	4718      	bx	r3
 801360a:	bf00      	nop

0801360c <uxr_object_id>:
 801360c:	b082      	sub	sp, #8
 801360e:	2300      	movs	r3, #0
 8013610:	f88d 1006 	strb.w	r1, [sp, #6]
 8013614:	f360 030f 	bfi	r3, r0, #0, #16
 8013618:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801361c:	f362 431f 	bfi	r3, r2, #16, #16
 8013620:	4618      	mov	r0, r3
 8013622:	b002      	add	sp, #8
 8013624:	4770      	bx	lr
 8013626:	bf00      	nop

08013628 <uxr_object_id_from_raw>:
 8013628:	7843      	ldrb	r3, [r0, #1]
 801362a:	b082      	sub	sp, #8
 801362c:	7801      	ldrb	r1, [r0, #0]
 801362e:	2000      	movs	r0, #0
 8013630:	091a      	lsrs	r2, r3, #4
 8013632:	f003 030f 	and.w	r3, r3, #15
 8013636:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801363a:	f88d 3006 	strb.w	r3, [sp, #6]
 801363e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013642:	f362 000f 	bfi	r0, r2, #0, #16
 8013646:	f363 401f 	bfi	r0, r3, #16, #16
 801364a:	b002      	add	sp, #8
 801364c:	4770      	bx	lr
 801364e:	bf00      	nop

08013650 <uxr_object_id_to_raw>:
 8013650:	4602      	mov	r2, r0
 8013652:	f3c0 4303 	ubfx	r3, r0, #16, #4
 8013656:	b082      	sub	sp, #8
 8013658:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 801365c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 8013660:	f881 c000 	strb.w	ip, [r1]
 8013664:	7048      	strb	r0, [r1, #1]
 8013666:	b002      	add	sp, #8
 8013668:	4770      	bx	lr
 801366a:	bf00      	nop

0801366c <uxr_buffer_request_data>:
 801366c:	b530      	push	{r4, r5, lr}
 801366e:	b095      	sub	sp, #84	; 0x54
 8013670:	4604      	mov	r4, r0
 8013672:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8013674:	9303      	str	r3, [sp, #12]
 8013676:	2d00      	cmp	r5, #0
 8013678:	f88d 301c 	strb.w	r3, [sp, #28]
 801367c:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013680:	f04f 0200 	mov.w	r2, #0
 8013684:	bf14      	ite	ne
 8013686:	2101      	movne	r1, #1
 8013688:	4611      	moveq	r1, r2
 801368a:	f88d 201d 	strb.w	r2, [sp, #29]
 801368e:	f88d 201e 	strb.w	r2, [sp, #30]
 8013692:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8013696:	d021      	beq.n	80136dc <uxr_buffer_request_data+0x70>
 8013698:	686b      	ldr	r3, [r5, #4]
 801369a:	2210      	movs	r2, #16
 801369c:	6829      	ldr	r1, [r5, #0]
 801369e:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80136a2:	f8cd 1026 	str.w	r1, [sp, #38]	; 0x26
 80136a6:	2308      	movs	r3, #8
 80136a8:	2100      	movs	r1, #0
 80136aa:	4620      	mov	r0, r4
 80136ac:	e9cd 3100 	strd	r3, r1, [sp]
 80136b0:	ab0c      	add	r3, sp, #48	; 0x30
 80136b2:	9905      	ldr	r1, [sp, #20]
 80136b4:	f001 f834 	bl	8014720 <uxr_prepare_stream_to_write_submessage>
 80136b8:	b918      	cbnz	r0, 80136c2 <uxr_buffer_request_data+0x56>
 80136ba:	4604      	mov	r4, r0
 80136bc:	4620      	mov	r0, r4
 80136be:	b015      	add	sp, #84	; 0x54
 80136c0:	bd30      	pop	{r4, r5, pc}
 80136c2:	9904      	ldr	r1, [sp, #16]
 80136c4:	aa06      	add	r2, sp, #24
 80136c6:	4620      	mov	r0, r4
 80136c8:	f001 f966 	bl	8014998 <uxr_init_base_object_request>
 80136cc:	4604      	mov	r4, r0
 80136ce:	a906      	add	r1, sp, #24
 80136d0:	a80c      	add	r0, sp, #48	; 0x30
 80136d2:	f003 f915 	bl	8016900 <uxr_serialize_READ_DATA_Payload>
 80136d6:	4620      	mov	r0, r4
 80136d8:	b015      	add	sp, #84	; 0x54
 80136da:	bd30      	pop	{r4, r5, pc}
 80136dc:	2208      	movs	r2, #8
 80136de:	e7e2      	b.n	80136a6 <uxr_buffer_request_data+0x3a>

080136e0 <uxr_buffer_cancel_data>:
 80136e0:	b510      	push	{r4, lr}
 80136e2:	2300      	movs	r3, #0
 80136e4:	b094      	sub	sp, #80	; 0x50
 80136e6:	4604      	mov	r4, r0
 80136e8:	9205      	str	r2, [sp, #20]
 80136ea:	9301      	str	r3, [sp, #4]
 80136ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80136f0:	f88d 301e 	strb.w	r3, [sp, #30]
 80136f4:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80136f8:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80136fc:	2308      	movs	r3, #8
 80136fe:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8013702:	2201      	movs	r2, #1
 8013704:	9300      	str	r3, [sp, #0]
 8013706:	ab0c      	add	r3, sp, #48	; 0x30
 8013708:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 801370c:	2210      	movs	r2, #16
 801370e:	f001 f807 	bl	8014720 <uxr_prepare_stream_to_write_submessage>
 8013712:	b918      	cbnz	r0, 801371c <uxr_buffer_cancel_data+0x3c>
 8013714:	4604      	mov	r4, r0
 8013716:	4620      	mov	r0, r4
 8013718:	b014      	add	sp, #80	; 0x50
 801371a:	bd10      	pop	{r4, pc}
 801371c:	9905      	ldr	r1, [sp, #20]
 801371e:	aa06      	add	r2, sp, #24
 8013720:	4620      	mov	r0, r4
 8013722:	f001 f939 	bl	8014998 <uxr_init_base_object_request>
 8013726:	4604      	mov	r4, r0
 8013728:	a906      	add	r1, sp, #24
 801372a:	a80c      	add	r0, sp, #48	; 0x30
 801372c:	f003 f8e8 	bl	8016900 <uxr_serialize_READ_DATA_Payload>
 8013730:	4620      	mov	r0, r4
 8013732:	b014      	add	sp, #80	; 0x50
 8013734:	bd10      	pop	{r4, pc}
 8013736:	bf00      	nop

08013738 <read_submessage_format>:
 8013738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801373c:	b095      	sub	sp, #84	; 0x54
 801373e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	; 0x78
 8013742:	b113      	cbz	r3, 801374a <read_submessage_format+0x12>
 8013744:	b015      	add	sp, #84	; 0x54
 8013746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801374a:	4606      	mov	r6, r0
 801374c:	981c      	ldr	r0, [sp, #112]	; 0x70
 801374e:	460c      	mov	r4, r1
 8013750:	4615      	mov	r5, r2
 8013752:	9004      	str	r0, [sp, #16]
 8013754:	4699      	mov	r9, r3
 8013756:	981d      	ldr	r0, [sp, #116]	; 0x74
 8013758:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 801375c:	9005      	str	r0, [sp, #20]
 801375e:	a80c      	add	r0, sp, #48	; 0x30
 8013760:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8013764:	1a52      	subs	r2, r2, r1
 8013766:	f7fb f9b3 	bl	800ead0 <ucdr_init_buffer>
 801376a:	a80c      	add	r0, sp, #48	; 0x30
 801376c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013770:	f7fb f982 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 8013774:	69e2      	ldr	r2, [r4, #28]
 8013776:	b19a      	cbz	r2, 80137a0 <read_submessage_format+0x68>
 8013778:	f1b8 0f07 	cmp.w	r8, #7
 801377c:	f882 9014 	strb.w	r9, [r2, #20]
 8013780:	d040      	beq.n	8013804 <read_submessage_format+0xcc>
 8013782:	f1b8 0f08 	cmp.w	r8, #8
 8013786:	d02e      	beq.n	80137e6 <read_submessage_format+0xae>
 8013788:	f1b8 0f06 	cmp.w	r8, #6
 801378c:	d011      	beq.n	80137b2 <read_submessage_format+0x7a>
 801378e:	2301      	movs	r3, #1
 8013790:	7513      	strb	r3, [r2, #20]
 8013792:	4629      	mov	r1, r5
 8013794:	4620      	mov	r0, r4
 8013796:	f7fb f9ef 	bl	800eb78 <ucdr_advance_buffer>
 801379a:	b015      	add	sp, #84	; 0x54
 801379c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137a0:	f1b8 0f07 	cmp.w	r8, #7
 80137a4:	d02e      	beq.n	8013804 <read_submessage_format+0xcc>
 80137a6:	f1b8 0f08 	cmp.w	r8, #8
 80137aa:	d01c      	beq.n	80137e6 <read_submessage_format+0xae>
 80137ac:	f1b8 0f06 	cmp.w	r8, #6
 80137b0:	d1ef      	bne.n	8013792 <read_submessage_format+0x5a>
 80137b2:	f8d6 8088 	ldr.w	r8, [r6, #136]	; 0x88
 80137b6:	f1b8 0f00 	cmp.w	r8, #0
 80137ba:	d011      	beq.n	80137e0 <read_submessage_format+0xa8>
 80137bc:	ab0c      	add	r3, sp, #48	; 0x30
 80137be:	9501      	str	r5, [sp, #4]
 80137c0:	463a      	mov	r2, r7
 80137c2:	4630      	mov	r0, r6
 80137c4:	9300      	str	r3, [sp, #0]
 80137c6:	2306      	movs	r3, #6
 80137c8:	f88d 3016 	strb.w	r3, [sp, #22]
 80137cc:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 80137d0:	9302      	str	r3, [sp, #8]
 80137d2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80137d6:	47c0      	blx	r8
 80137d8:	2301      	movs	r3, #1
 80137da:	69e2      	ldr	r2, [r4, #28]
 80137dc:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80137e0:	2a00      	cmp	r2, #0
 80137e2:	d1d4      	bne.n	801378e <read_submessage_format+0x56>
 80137e4:	e7d5      	b.n	8013792 <read_submessage_format+0x5a>
 80137e6:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d0f8      	beq.n	80137e0 <read_submessage_format+0xa8>
 80137ee:	a80c      	add	r0, sp, #48	; 0x30
 80137f0:	a906      	add	r1, sp, #24
 80137f2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80137f6:	f003 f94f 	bl	8016a98 <uxr_deserialize_SampleIdentity>
 80137fa:	b9a0      	cbnz	r0, 8013826 <read_submessage_format+0xee>
 80137fc:	69e2      	ldr	r2, [r4, #28]
 80137fe:	2a00      	cmp	r2, #0
 8013800:	d1c5      	bne.n	801378e <read_submessage_format+0x56>
 8013802:	e7c6      	b.n	8013792 <read_submessage_format+0x5a>
 8013804:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
 8013808:	b13b      	cbz	r3, 801381a <read_submessage_format+0xe2>
 801380a:	a906      	add	r1, sp, #24
 801380c:	a80c      	add	r0, sp, #48	; 0x30
 801380e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8013812:	f002 fe15 	bl	8016440 <uxr_deserialize_BaseObjectRequest>
 8013816:	bb60      	cbnz	r0, 8013872 <read_submessage_format+0x13a>
 8013818:	69e2      	ldr	r2, [r4, #28]
 801381a:	68a3      	ldr	r3, [r4, #8]
 801381c:	442b      	add	r3, r5
 801381e:	60a3      	str	r3, [r4, #8]
 8013820:	2a00      	cmp	r2, #0
 8013822:	d1b4      	bne.n	801378e <read_submessage_format+0x56>
 8013824:	e7b5      	b.n	8013792 <read_submessage_format+0x5a>
 8013826:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013828:	a80c      	add	r0, sp, #48	; 0x30
 801382a:	eba8 0803 	sub.w	r8, r8, r3
 801382e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8013832:	44a8      	add	r8, r5
 8013834:	1a52      	subs	r2, r2, r1
 8013836:	f7fb f94b 	bl	800ead0 <ucdr_init_buffer>
 801383a:	a80c      	add	r0, sp, #48	; 0x30
 801383c:	fa1f f888 	uxth.w	r8, r8
 8013840:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8013844:	f7fb f918 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 8013848:	ab0c      	add	r3, sp, #48	; 0x30
 801384a:	2108      	movs	r1, #8
 801384c:	f8cd 8004 	str.w	r8, [sp, #4]
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	463a      	mov	r2, r7
 8013854:	f88d 1016 	strb.w	r1, [sp, #22]
 8013858:	ab06      	add	r3, sp, #24
 801385a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	; 0xa8
 801385e:	4630      	mov	r0, r6
 8013860:	9102      	str	r1, [sp, #8]
 8013862:	9905      	ldr	r1, [sp, #20]
 8013864:	f8d6 70a4 	ldr.w	r7, [r6, #164]	; 0xa4
 8013868:	47b8      	blx	r7
 801386a:	2301      	movs	r3, #1
 801386c:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 8013870:	e7c4      	b.n	80137fc <read_submessage_format+0xc4>
 8013872:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8013876:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013878:	a80c      	add	r0, sp, #48	; 0x30
 801387a:	1a52      	subs	r2, r2, r1
 801387c:	eba8 0803 	sub.w	r8, r8, r3
 8013880:	f7fb f926 	bl	800ead0 <ucdr_init_buffer>
 8013884:	a80c      	add	r0, sp, #48	; 0x30
 8013886:	44a8      	add	r8, r5
 8013888:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801388c:	f7fb f8f4 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 8013890:	ab0c      	add	r3, sp, #48	; 0x30
 8013892:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8013896:	fa1f f888 	uxth.w	r8, r8
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	463a      	mov	r2, r7
 801389e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80138a2:	4630      	mov	r0, r6
 80138a4:	f8cd 8004 	str.w	r8, [sp, #4]
 80138a8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80138ac:	2107      	movs	r1, #7
 80138ae:	f88d 1016 	strb.w	r1, [sp, #22]
 80138b2:	b29b      	uxth	r3, r3
 80138b4:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
 80138b8:	9102      	str	r1, [sp, #8]
 80138ba:	9905      	ldr	r1, [sp, #20]
 80138bc:	f8d6 70ac 	ldr.w	r7, [r6, #172]	; 0xac
 80138c0:	47b8      	blx	r7
 80138c2:	2301      	movs	r3, #1
 80138c4:	f886 30b4 	strb.w	r3, [r6, #180]	; 0xb4
 80138c8:	e7a6      	b.n	8013818 <read_submessage_format+0xe0>
 80138ca:	bf00      	nop

080138cc <on_get_fragmentation_info>:
 80138cc:	b500      	push	{lr}
 80138ce:	b08b      	sub	sp, #44	; 0x2c
 80138d0:	4601      	mov	r1, r0
 80138d2:	2204      	movs	r2, #4
 80138d4:	a802      	add	r0, sp, #8
 80138d6:	f7fb f8fb 	bl	800ead0 <ucdr_init_buffer>
 80138da:	f10d 0305 	add.w	r3, sp, #5
 80138de:	f10d 0206 	add.w	r2, sp, #6
 80138e2:	a901      	add	r1, sp, #4
 80138e4:	a802      	add	r0, sp, #8
 80138e6:	f001 fe5d 	bl	80155a4 <uxr_read_submessage_header>
 80138ea:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80138ee:	2b0d      	cmp	r3, #13
 80138f0:	d003      	beq.n	80138fa <on_get_fragmentation_info+0x2e>
 80138f2:	2000      	movs	r0, #0
 80138f4:	b00b      	add	sp, #44	; 0x2c
 80138f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80138fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80138fe:	f013 0f02 	tst.w	r3, #2
 8013902:	bf14      	ite	ne
 8013904:	2002      	movne	r0, #2
 8013906:	2001      	moveq	r0, #1
 8013908:	b00b      	add	sp, #44	; 0x2c
 801390a:	f85d fb04 	ldr.w	pc, [sp], #4
 801390e:	bf00      	nop

08013910 <read_submessage_get_info>:
 8013910:	b570      	push	{r4, r5, r6, lr}
 8013912:	2500      	movs	r5, #0
 8013914:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 8013918:	460e      	mov	r6, r1
 801391a:	4604      	mov	r4, r0
 801391c:	f44f 7224 	mov.w	r2, #656	; 0x290
 8013920:	4629      	mov	r1, r5
 8013922:	a810      	add	r0, sp, #64	; 0x40
 8013924:	9503      	str	r5, [sp, #12]
 8013926:	9504      	str	r5, [sp, #16]
 8013928:	f007 ffc0 	bl	801b8ac <memset>
 801392c:	a903      	add	r1, sp, #12
 801392e:	4630      	mov	r0, r6
 8013930:	f002 ff26 	bl	8016780 <uxr_deserialize_GET_INFO_Payload>
 8013934:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013938:	4620      	mov	r0, r4
 801393a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801393e:	f001 f823 	bl	8014988 <uxr_session_header_offset>
 8013942:	462b      	mov	r3, r5
 8013944:	220c      	movs	r2, #12
 8013946:	a905      	add	r1, sp, #20
 8013948:	9000      	str	r0, [sp, #0]
 801394a:	a808      	add	r0, sp, #32
 801394c:	f7fb f8ae 	bl	800eaac <ucdr_init_buffer_origin_offset>
 8013950:	a910      	add	r1, sp, #64	; 0x40
 8013952:	a808      	add	r0, sp, #32
 8013954:	f002 ff88 	bl	8016868 <uxr_serialize_INFO_Payload>
 8013958:	9b08      	ldr	r3, [sp, #32]
 801395a:	462a      	mov	r2, r5
 801395c:	4629      	mov	r1, r5
 801395e:	4620      	mov	r0, r4
 8013960:	f000 ffbe 	bl	80148e0 <uxr_stamp_session_header>
 8013964:	a808      	add	r0, sp, #32
 8013966:	f7fb f8e1 	bl	800eb2c <ucdr_buffer_length>
 801396a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801396c:	4602      	mov	r2, r0
 801396e:	a905      	add	r1, sp, #20
 8013970:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013974:	47a0      	blx	r4
 8013976:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 801397a:	bd70      	pop	{r4, r5, r6, pc}

0801397c <write_submessage_acknack.isra.0>:
 801397c:	b570      	push	{r4, r5, r6, lr}
 801397e:	b092      	sub	sp, #72	; 0x48
 8013980:	4605      	mov	r5, r0
 8013982:	460e      	mov	r6, r1
 8013984:	4614      	mov	r4, r2
 8013986:	f000 ffff 	bl	8014988 <uxr_session_header_offset>
 801398a:	a905      	add	r1, sp, #20
 801398c:	9000      	str	r0, [sp, #0]
 801398e:	2300      	movs	r3, #0
 8013990:	a80a      	add	r0, sp, #40	; 0x28
 8013992:	2211      	movs	r2, #17
 8013994:	f7fb f88a 	bl	800eaac <ucdr_init_buffer_origin_offset>
 8013998:	2218      	movs	r2, #24
 801399a:	2300      	movs	r3, #0
 801399c:	210a      	movs	r1, #10
 801399e:	fb02 5404 	mla	r4, r2, r4, r5
 80139a2:	a80a      	add	r0, sp, #40	; 0x28
 80139a4:	2205      	movs	r2, #5
 80139a6:	3450      	adds	r4, #80	; 0x50
 80139a8:	f001 fde2 	bl	8015570 <uxr_buffer_submessage_header>
 80139ac:	a903      	add	r1, sp, #12
 80139ae:	4620      	mov	r0, r4
 80139b0:	f006 fb50 	bl	801a054 <uxr_compute_acknack>
 80139b4:	ba40      	rev16	r0, r0
 80139b6:	a903      	add	r1, sp, #12
 80139b8:	f88d 6010 	strb.w	r6, [sp, #16]
 80139bc:	f8ad 000e 	strh.w	r0, [sp, #14]
 80139c0:	a80a      	add	r0, sp, #40	; 0x28
 80139c2:	f002 ffc3 	bl	801694c <uxr_serialize_ACKNACK_Payload>
 80139c6:	2200      	movs	r2, #0
 80139c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80139ca:	4628      	mov	r0, r5
 80139cc:	4611      	mov	r1, r2
 80139ce:	f000 ff87 	bl	80148e0 <uxr_stamp_session_header>
 80139d2:	a80a      	add	r0, sp, #40	; 0x28
 80139d4:	f7fb f8aa 	bl	800eb2c <ucdr_buffer_length>
 80139d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80139da:	4602      	mov	r2, r0
 80139dc:	a905      	add	r1, sp, #20
 80139de:	e9d3 0400 	ldrd	r0, r4, [r3]
 80139e2:	47a0      	blx	r4
 80139e4:	b012      	add	sp, #72	; 0x48
 80139e6:	bd70      	pop	{r4, r5, r6, pc}

080139e8 <uxr_init_session>:
 80139e8:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 8013a20 <uxr_init_session+0x38>
 80139ec:	2300      	movs	r3, #0
 80139ee:	b510      	push	{r4, lr}
 80139f0:	4604      	mov	r4, r0
 80139f2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 80139f6:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 80139fa:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 80139fe:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 8013a02:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 8013a06:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 8013a0a:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 8013a0e:	2181      	movs	r1, #129	; 0x81
 8013a10:	f000 feca 	bl	80147a8 <uxr_init_session_info>
 8013a14:	f104 0008 	add.w	r0, r4, #8
 8013a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a1c:	f001 bcc4 	b.w	80153a8 <uxr_init_stream_storage>
	...

08013a28 <uxr_set_status_callback>:
 8013a28:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 8013a2c:	4770      	bx	lr
 8013a2e:	bf00      	nop

08013a30 <uxr_set_topic_callback>:
 8013a30:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop

08013a38 <uxr_set_request_callback>:
 8013a38:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 8013a3c:	4770      	bx	lr
 8013a3e:	bf00      	nop

08013a40 <uxr_set_reply_callback>:
 8013a40:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop

08013a48 <uxr_create_output_best_effort_stream>:
 8013a48:	b510      	push	{r4, lr}
 8013a4a:	4604      	mov	r4, r0
 8013a4c:	b084      	sub	sp, #16
 8013a4e:	e9cd 2100 	strd	r2, r1, [sp]
 8013a52:	f000 ff99 	bl	8014988 <uxr_session_header_offset>
 8013a56:	4603      	mov	r3, r0
 8013a58:	f104 0008 	add.w	r0, r4, #8
 8013a5c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8013a60:	b004      	add	sp, #16
 8013a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a66:	f001 bce5 	b.w	8015434 <uxr_add_output_best_effort_buffer>
 8013a6a:	bf00      	nop

08013a6c <uxr_create_output_reliable_stream>:
 8013a6c:	b530      	push	{r4, r5, lr}
 8013a6e:	b089      	sub	sp, #36	; 0x24
 8013a70:	4604      	mov	r4, r0
 8013a72:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8013a76:	9303      	str	r3, [sp, #12]
 8013a78:	f000 ff86 	bl	8014988 <uxr_session_header_offset>
 8013a7c:	4605      	mov	r5, r0
 8013a7e:	9905      	ldr	r1, [sp, #20]
 8013a80:	f104 0008 	add.w	r0, r4, #8
 8013a84:	9500      	str	r5, [sp, #0]
 8013a86:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013a8a:	f001 fce7 	bl	801545c <uxr_add_output_reliable_buffer>
 8013a8e:	2200      	movs	r2, #0
 8013a90:	fa5f fc80 	uxtb.w	ip, r0
 8013a94:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8013a98:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8013a9c:	0e03      	lsrs	r3, r0, #24
 8013a9e:	f36c 0207 	bfi	r2, ip, #0, #8
 8013aa2:	f364 220f 	bfi	r2, r4, #8, #8
 8013aa6:	f361 4217 	bfi	r2, r1, #16, #8
 8013aaa:	f363 621f 	bfi	r2, r3, #24, #8
 8013aae:	4610      	mov	r0, r2
 8013ab0:	b009      	add	sp, #36	; 0x24
 8013ab2:	bd30      	pop	{r4, r5, pc}

08013ab4 <uxr_create_input_best_effort_stream>:
 8013ab4:	b082      	sub	sp, #8
 8013ab6:	3008      	adds	r0, #8
 8013ab8:	b002      	add	sp, #8
 8013aba:	f001 bce9 	b.w	8015490 <uxr_add_input_best_effort_buffer>
 8013abe:	bf00      	nop

08013ac0 <uxr_create_input_reliable_stream>:
 8013ac0:	b510      	push	{r4, lr}
 8013ac2:	4c0c      	ldr	r4, [pc, #48]	; (8013af4 <uxr_create_input_reliable_stream+0x34>)
 8013ac4:	b084      	sub	sp, #16
 8013ac6:	3008      	adds	r0, #8
 8013ac8:	9400      	str	r4, [sp, #0]
 8013aca:	f001 fcf7 	bl	80154bc <uxr_add_input_reliable_buffer>
 8013ace:	2200      	movs	r2, #0
 8013ad0:	fa5f fe80 	uxtb.w	lr, r0
 8013ad4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8013ad8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8013adc:	0e03      	lsrs	r3, r0, #24
 8013ade:	f36e 0207 	bfi	r2, lr, #0, #8
 8013ae2:	f36c 220f 	bfi	r2, ip, #8, #8
 8013ae6:	f361 4217 	bfi	r2, r1, #16, #8
 8013aea:	f363 621f 	bfi	r2, r3, #24, #8
 8013aee:	4610      	mov	r0, r2
 8013af0:	b004      	add	sp, #16
 8013af2:	bd10      	pop	{r4, pc}
 8013af4:	080138cd 	.word	0x080138cd

08013af8 <uxr_epoch_nanos>:
 8013af8:	b510      	push	{r4, lr}
 8013afa:	4604      	mov	r4, r0
 8013afc:	f001 fd9a 	bl	8015634 <uxr_nanos>
 8013b00:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 8013b04:	1ac0      	subs	r0, r0, r3
 8013b06:	eb61 0102 	sbc.w	r1, r1, r2
 8013b0a:	bd10      	pop	{r4, pc}

08013b0c <uxr_flash_output_streams>:
 8013b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b10:	7e03      	ldrb	r3, [r0, #24]
 8013b12:	b084      	sub	sp, #16
 8013b14:	4604      	mov	r4, r0
 8013b16:	b1fb      	cbz	r3, 8013b58 <uxr_flash_output_streams+0x4c>
 8013b18:	f04f 0900 	mov.w	r9, #0
 8013b1c:	f10d 0802 	add.w	r8, sp, #2
 8013b20:	af03      	add	r7, sp, #12
 8013b22:	ae02      	add	r6, sp, #8
 8013b24:	4648      	mov	r0, r9
 8013b26:	2201      	movs	r2, #1
 8013b28:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8013b2c:	4611      	mov	r1, r2
 8013b2e:	3508      	adds	r5, #8
 8013b30:	f001 fbe0 	bl	80152f4 <uxr_stream_id>
 8013b34:	4684      	mov	ip, r0
 8013b36:	4643      	mov	r3, r8
 8013b38:	463a      	mov	r2, r7
 8013b3a:	4631      	mov	r1, r6
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	f8cd c004 	str.w	ip, [sp, #4]
 8013b42:	f006 fb11 	bl	801a168 <uxr_prepare_best_effort_buffer_to_send>
 8013b46:	2800      	cmp	r0, #0
 8013b48:	d13d      	bne.n	8013bc6 <uxr_flash_output_streams+0xba>
 8013b4a:	f109 0901 	add.w	r9, r9, #1
 8013b4e:	7e23      	ldrb	r3, [r4, #24]
 8013b50:	fa5f f089 	uxtb.w	r0, r9
 8013b54:	4283      	cmp	r3, r0
 8013b56:	d8e6      	bhi.n	8013b26 <uxr_flash_output_streams+0x1a>
 8013b58:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013b5c:	b383      	cbz	r3, 8013bc0 <uxr_flash_output_streams+0xb4>
 8013b5e:	f04f 0900 	mov.w	r9, #0
 8013b62:	f10d 0802 	add.w	r8, sp, #2
 8013b66:	af03      	add	r7, sp, #12
 8013b68:	ae02      	add	r6, sp, #8
 8013b6a:	4648      	mov	r0, r9
 8013b6c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8013b70:	2201      	movs	r2, #1
 8013b72:	2102      	movs	r1, #2
 8013b74:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8013b78:	f001 fbbc 	bl	80152f4 <uxr_stream_id>
 8013b7c:	9001      	str	r0, [sp, #4]
 8013b7e:	3520      	adds	r5, #32
 8013b80:	e00c      	b.n	8013b9c <uxr_flash_output_streams+0x90>
 8013b82:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013b86:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013b8a:	9b02      	ldr	r3, [sp, #8]
 8013b8c:	f000 fea8 	bl	80148e0 <uxr_stamp_session_header>
 8013b90:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013b92:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8013b96:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8013b9a:	47d0      	blx	sl
 8013b9c:	4643      	mov	r3, r8
 8013b9e:	463a      	mov	r2, r7
 8013ba0:	4631      	mov	r1, r6
 8013ba2:	4628      	mov	r0, r5
 8013ba4:	f006 fd04 	bl	801a5b0 <uxr_prepare_next_reliable_buffer_to_send>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	4620      	mov	r0, r4
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d1e8      	bne.n	8013b82 <uxr_flash_output_streams+0x76>
 8013bb0:	f109 0901 	add.w	r9, r9, #1
 8013bb4:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8013bb8:	fa5f f089 	uxtb.w	r0, r9
 8013bbc:	4283      	cmp	r3, r0
 8013bbe:	d8d5      	bhi.n	8013b6c <uxr_flash_output_streams+0x60>
 8013bc0:	b004      	add	sp, #16
 8013bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bc6:	9b02      	ldr	r3, [sp, #8]
 8013bc8:	4620      	mov	r0, r4
 8013bca:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013bce:	f109 0901 	add.w	r9, r9, #1
 8013bd2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8013bd6:	f000 fe83 	bl	80148e0 <uxr_stamp_session_header>
 8013bda:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013bdc:	9a03      	ldr	r2, [sp, #12]
 8013bde:	685d      	ldr	r5, [r3, #4]
 8013be0:	6818      	ldr	r0, [r3, #0]
 8013be2:	9902      	ldr	r1, [sp, #8]
 8013be4:	47a8      	blx	r5
 8013be6:	7e23      	ldrb	r3, [r4, #24]
 8013be8:	fa5f f089 	uxtb.w	r0, r9
 8013bec:	4283      	cmp	r3, r0
 8013bee:	d89a      	bhi.n	8013b26 <uxr_flash_output_streams+0x1a>
 8013bf0:	e7b2      	b.n	8013b58 <uxr_flash_output_streams+0x4c>
 8013bf2:	bf00      	nop

08013bf4 <read_submessage_info>:
 8013bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf8:	460d      	mov	r5, r1
 8013bfa:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 8013bfe:	4606      	mov	r6, r0
 8013c00:	4669      	mov	r1, sp
 8013c02:	4628      	mov	r0, r5
 8013c04:	f002 fcce 	bl	80165a4 <uxr_deserialize_BaseObjectReply>
 8013c08:	4604      	mov	r4, r0
 8013c0a:	a902      	add	r1, sp, #8
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8013c12:	f7f9 fc6d 	bl	800d4f0 <ucdr_deserialize_bool>
 8013c16:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8013c1a:	4004      	ands	r4, r0
 8013c1c:	b2e4      	uxtb	r4, r4
 8013c1e:	b95b      	cbnz	r3, 8013c38 <read_submessage_info+0x44>
 8013c20:	a987      	add	r1, sp, #540	; 0x21c
 8013c22:	4628      	mov	r0, r5
 8013c24:	f7f9 fc64 	bl	800d4f0 <ucdr_deserialize_bool>
 8013c28:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 8013c2c:	4680      	mov	r8, r0
 8013c2e:	b94b      	cbnz	r3, 8013c44 <read_submessage_info+0x50>
 8013c30:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 8013c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c38:	a903      	add	r1, sp, #12
 8013c3a:	4628      	mov	r0, r5
 8013c3c:	f002 fb5e 	bl	80162fc <uxr_deserialize_ObjectVariant>
 8013c40:	4004      	ands	r4, r0
 8013c42:	e7ed      	b.n	8013c20 <read_submessage_info+0x2c>
 8013c44:	a988      	add	r1, sp, #544	; 0x220
 8013c46:	4628      	mov	r0, r5
 8013c48:	f7f9 fc80 	bl	800d54c <ucdr_deserialize_uint8_t>
 8013c4c:	ea14 0f08 	tst.w	r4, r8
 8013c50:	d0ee      	beq.n	8013c30 <read_submessage_info+0x3c>
 8013c52:	2800      	cmp	r0, #0
 8013c54:	d0ec      	beq.n	8013c30 <read_submessage_info+0x3c>
 8013c56:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 8013c5a:	2b0d      	cmp	r3, #13
 8013c5c:	d1e8      	bne.n	8013c30 <read_submessage_info+0x3c>
 8013c5e:	a98a      	add	r1, sp, #552	; 0x228
 8013c60:	4628      	mov	r0, r5
 8013c62:	f7fa fa19 	bl	800e098 <ucdr_deserialize_int16_t>
 8013c66:	b138      	cbz	r0, 8013c78 <read_submessage_info+0x84>
 8013c68:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	dd06      	ble.n	8013c7e <read_submessage_info+0x8a>
 8013c70:	2f00      	cmp	r7, #0
 8013c72:	bf14      	ite	ne
 8013c74:	2001      	movne	r0, #1
 8013c76:	2002      	moveq	r0, #2
 8013c78:	f886 00b5 	strb.w	r0, [r6, #181]	; 0xb5
 8013c7c:	e7d8      	b.n	8013c30 <read_submessage_info+0x3c>
 8013c7e:	2000      	movs	r0, #0
 8013c80:	e7fa      	b.n	8013c78 <read_submessage_info+0x84>
 8013c82:	bf00      	nop

08013c84 <read_submessage_list>:
 8013c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c88:	4604      	mov	r4, r0
 8013c8a:	b097      	sub	sp, #92	; 0x5c
 8013c8c:	460d      	mov	r5, r1
 8013c8e:	4ec1      	ldr	r6, [pc, #772]	; (8013f94 <read_submessage_list+0x310>)
 8013c90:	9209      	str	r2, [sp, #36]	; 0x24
 8013c92:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 8013c96:	aa0c      	add	r2, sp, #48	; 0x30
 8013c98:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	f001 fc81 	bl	80155a4 <uxr_read_submessage_header>
 8013ca2:	2800      	cmp	r0, #0
 8013ca4:	f000 8142 	beq.w	8013f2c <read_submessage_list+0x2a8>
 8013ca8:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 8013cac:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8013cb0:	3b02      	subs	r3, #2
 8013cb2:	2b0d      	cmp	r3, #13
 8013cb4:	d8ed      	bhi.n	8013c92 <read_submessage_list+0xe>
 8013cb6:	a101      	add	r1, pc, #4	; (adr r1, 8013cbc <read_submessage_list+0x38>)
 8013cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013cbc:	08013f23 	.word	0x08013f23
 8013cc0:	08013c93 	.word	0x08013c93
 8013cc4:	08013f13 	.word	0x08013f13
 8013cc8:	08013eb1 	.word	0x08013eb1
 8013ccc:	08013ea7 	.word	0x08013ea7
 8013cd0:	08013c93 	.word	0x08013c93
 8013cd4:	08013c93 	.word	0x08013c93
 8013cd8:	08013dfd 	.word	0x08013dfd
 8013cdc:	08013d8f 	.word	0x08013d8f
 8013ce0:	08013d4f 	.word	0x08013d4f
 8013ce4:	08013c93 	.word	0x08013c93
 8013ce8:	08013c93 	.word	0x08013c93
 8013cec:	08013c93 	.word	0x08013c93
 8013cf0:	08013cf5 	.word	0x08013cf5
 8013cf4:	a910      	add	r1, sp, #64	; 0x40
 8013cf6:	4628      	mov	r0, r5
 8013cf8:	f002 fe7c 	bl	80169f4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8013cfc:	f8d4 8090 	ldr.w	r8, [r4, #144]	; 0x90
 8013d00:	f1b8 0f00 	cmp.w	r8, #0
 8013d04:	f000 811a 	beq.w	8013f3c <read_submessage_list+0x2b8>
 8013d08:	f001 fc94 	bl	8015634 <uxr_nanos>
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	460b      	mov	r3, r1
 8013d10:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8013d14:	2100      	movs	r1, #0
 8013d16:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013d18:	9006      	str	r0, [sp, #24]
 8013d1a:	468c      	mov	ip, r1
 8013d1c:	9815      	ldr	r0, [sp, #84]	; 0x54
 8013d1e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8013d22:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8013d24:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8013d28:	468c      	mov	ip, r1
 8013d2a:	9811      	ldr	r0, [sp, #68]	; 0x44
 8013d2c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8013d30:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8013d34:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	; 0x48
 8013d38:	fbc7 0106 	smlal	r0, r1, r7, r6
 8013d3c:	e9cd 0100 	strd	r0, r1, [sp]
 8013d40:	4620      	mov	r0, r4
 8013d42:	47c0      	blx	r8
 8013d44:	f04f 0301 	mov.w	r3, #1
 8013d48:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 8013d4c:	e7a1      	b.n	8013c92 <read_submessage_list+0xe>
 8013d4e:	a910      	add	r1, sp, #64	; 0x40
 8013d50:	4628      	mov	r0, r5
 8013d52:	f002 fe3b 	bl	80169cc <uxr_deserialize_HEARTBEAT_Payload>
 8013d56:	2100      	movs	r1, #0
 8013d58:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8013d5c:	f001 faf8 	bl	8015350 <uxr_stream_id_from_raw>
 8013d60:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8013d64:	900f      	str	r0, [sp, #60]	; 0x3c
 8013d66:	f104 0008 	add.w	r0, r4, #8
 8013d6a:	4641      	mov	r1, r8
 8013d6c:	f001 fbde 	bl	801552c <uxr_get_input_reliable_stream>
 8013d70:	2800      	cmp	r0, #0
 8013d72:	d08e      	beq.n	8013c92 <read_submessage_list+0xe>
 8013d74:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8013d78:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8013d7c:	f006 f95e 	bl	801a03c <uxr_process_heartbeat>
 8013d80:	4642      	mov	r2, r8
 8013d82:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8013d86:	4620      	mov	r0, r4
 8013d88:	f7ff fdf8 	bl	801397c <write_submessage_acknack.isra.0>
 8013d8c:	e781      	b.n	8013c92 <read_submessage_list+0xe>
 8013d8e:	a910      	add	r1, sp, #64	; 0x40
 8013d90:	4628      	mov	r0, r5
 8013d92:	f002 fdf3 	bl	801697c <uxr_deserialize_ACKNACK_Payload>
 8013d96:	2100      	movs	r1, #0
 8013d98:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8013d9c:	f001 fad8 	bl	8015350 <uxr_stream_id_from_raw>
 8013da0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8013da4:	900d      	str	r0, [sp, #52]	; 0x34
 8013da6:	f104 0008 	add.w	r0, r4, #8
 8013daa:	f001 fba9 	bl	8015500 <uxr_get_output_reliable_stream>
 8013dae:	4680      	mov	r8, r0
 8013db0:	2800      	cmp	r0, #0
 8013db2:	f43f af6e 	beq.w	8013c92 <read_submessage_list+0xe>
 8013db6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8013dba:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8013dbe:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 8013dc2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8013dc6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8013dca:	b289      	uxth	r1, r1
 8013dcc:	f006 fc98 	bl	801a700 <uxr_process_acknack>
 8013dd0:	4640      	mov	r0, r8
 8013dd2:	f006 fc59 	bl	801a688 <uxr_begin_output_nack_buffer_it>
 8013dd6:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 8013dda:	e005      	b.n	8013de8 <read_submessage_list+0x164>
 8013ddc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013dde:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8013de2:	e9d3 0900 	ldrd	r0, r9, [r3]
 8013de6:	47c8      	blx	r9
 8013de8:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8013dec:	aa0f      	add	r2, sp, #60	; 0x3c
 8013dee:	4651      	mov	r1, sl
 8013df0:	4640      	mov	r0, r8
 8013df2:	f006 fc4b 	bl	801a68c <uxr_next_reliable_nack_buffer_to_send>
 8013df6:	2800      	cmp	r0, #0
 8013df8:	d1f0      	bne.n	8013ddc <read_submessage_list+0x158>
 8013dfa:	e74a      	b.n	8013c92 <read_submessage_list+0xe>
 8013dfc:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8013e00:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 8013e04:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8013e08:	4628      	mov	r0, r5
 8013e0a:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8013e0e:	4651      	mov	r1, sl
 8013e10:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8013e14:	f1a8 0804 	sub.w	r8, r8, #4
 8013e18:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 8013e1c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8013e20:	fa1f f888 	uxth.w	r8, r8
 8013e24:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8013e28:	f009 090e 	and.w	r9, r9, #14
 8013e2c:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8013e30:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8013e34:	f002 fb04 	bl	8016440 <uxr_deserialize_BaseObjectRequest>
 8013e38:	4650      	mov	r0, sl
 8013e3a:	a90f      	add	r1, sp, #60	; 0x3c
 8013e3c:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8013e40:	f000 fdca 	bl	80149d8 <uxr_parse_base_object_request>
 8013e44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e46:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 8013e4a:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 8013e4e:	9110      	str	r1, [sp, #64]	; 0x40
 8013e50:	f1bb 0f00 	cmp.w	fp, #0
 8013e54:	d006      	beq.n	8013e64 <read_submessage_list+0x1e0>
 8013e56:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8013e5a:	4652      	mov	r2, sl
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	9300      	str	r3, [sp, #0]
 8013e60:	2300      	movs	r3, #0
 8013e62:	47d8      	blx	fp
 8013e64:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013e66:	b182      	cbz	r2, 8013e8a <read_submessage_list+0x206>
 8013e68:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8013e6a:	f04f 0c00 	mov.w	ip, #0
 8013e6e:	3902      	subs	r1, #2
 8013e70:	e003      	b.n	8013e7a <read_submessage_list+0x1f6>
 8013e72:	f10c 0c01 	add.w	ip, ip, #1
 8013e76:	4594      	cmp	ip, r2
 8013e78:	d007      	beq.n	8013e8a <read_submessage_list+0x206>
 8013e7a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8013e7e:	4553      	cmp	r3, sl
 8013e80:	d1f7      	bne.n	8013e72 <read_submessage_list+0x1ee>
 8013e82:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013e84:	2200      	movs	r2, #0
 8013e86:	f803 200c 	strb.w	r2, [r3, ip]
 8013e8a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8013e8e:	464b      	mov	r3, r9
 8013e90:	4642      	mov	r2, r8
 8013e92:	4620      	mov	r0, r4
 8013e94:	9102      	str	r1, [sp, #8]
 8013e96:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013e98:	9101      	str	r1, [sp, #4]
 8013e9a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8013e9c:	9100      	str	r1, [sp, #0]
 8013e9e:	4629      	mov	r1, r5
 8013ea0:	f7ff fc4a 	bl	8013738 <read_submessage_format>
 8013ea4:	e6f5      	b.n	8013c92 <read_submessage_list+0xe>
 8013ea6:	4629      	mov	r1, r5
 8013ea8:	4620      	mov	r0, r4
 8013eaa:	f7ff fea3 	bl	8013bf4 <read_submessage_info>
 8013eae:	e6f0      	b.n	8013c92 <read_submessage_list+0xe>
 8013eb0:	2a00      	cmp	r2, #0
 8013eb2:	d03e      	beq.n	8013f32 <read_submessage_list+0x2ae>
 8013eb4:	a910      	add	r1, sp, #64	; 0x40
 8013eb6:	4628      	mov	r0, r5
 8013eb8:	f002 fcb8 	bl	801682c <uxr_deserialize_STATUS_Payload>
 8013ebc:	a90e      	add	r1, sp, #56	; 0x38
 8013ebe:	aa0d      	add	r2, sp, #52	; 0x34
 8013ec0:	a810      	add	r0, sp, #64	; 0x40
 8013ec2:	f000 fd89 	bl	80149d8 <uxr_parse_base_object_request>
 8013ec6:	990e      	ldr	r1, [sp, #56]	; 0x38
 8013ec8:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 8013ecc:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8013ed0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 8013ed4:	910f      	str	r1, [sp, #60]	; 0x3c
 8013ed6:	f1ba 0f00 	cmp.w	sl, #0
 8013eda:	d006      	beq.n	8013eea <read_submessage_list+0x266>
 8013edc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8013ee0:	4642      	mov	r2, r8
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	9300      	str	r3, [sp, #0]
 8013ee6:	464b      	mov	r3, r9
 8013ee8:	47d0      	blx	sl
 8013eea:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8013eec:	2a00      	cmp	r2, #0
 8013eee:	f43f aed0 	beq.w	8013c92 <read_submessage_list+0xe>
 8013ef2:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8013ef4:	2100      	movs	r1, #0
 8013ef6:	3802      	subs	r0, #2
 8013ef8:	e003      	b.n	8013f02 <read_submessage_list+0x27e>
 8013efa:	3101      	adds	r1, #1
 8013efc:	4291      	cmp	r1, r2
 8013efe:	f43f aec8 	beq.w	8013c92 <read_submessage_list+0xe>
 8013f02:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8013f06:	4543      	cmp	r3, r8
 8013f08:	d1f7      	bne.n	8013efa <read_submessage_list+0x276>
 8013f0a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8013f0c:	f803 9001 	strb.w	r9, [r3, r1]
 8013f10:	e6bf      	b.n	8013c92 <read_submessage_list+0xe>
 8013f12:	2a00      	cmp	r2, #0
 8013f14:	f47f aebd 	bne.w	8013c92 <read_submessage_list+0xe>
 8013f18:	4629      	mov	r1, r5
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	f000 fca0 	bl	8014860 <uxr_read_create_session_status>
 8013f20:	e6b7      	b.n	8013c92 <read_submessage_list+0xe>
 8013f22:	4629      	mov	r1, r5
 8013f24:	4620      	mov	r0, r4
 8013f26:	f7ff fcf3 	bl	8013910 <read_submessage_get_info>
 8013f2a:	e6b2      	b.n	8013c92 <read_submessage_list+0xe>
 8013f2c:	b017      	add	sp, #92	; 0x5c
 8013f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f32:	4629      	mov	r1, r5
 8013f34:	4620      	mov	r0, r4
 8013f36:	f000 fca1 	bl	801487c <uxr_read_delete_session_status>
 8013f3a:	e6aa      	b.n	8013c92 <read_submessage_list+0xe>
 8013f3c:	f001 fb7a 	bl	8015634 <uxr_nanos>
 8013f40:	4642      	mov	r2, r8
 8013f42:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8013f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013f46:	fbc7 3206 	smlal	r3, r2, r7, r6
 8013f4a:	1818      	adds	r0, r3, r0
 8013f4c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8013f4e:	eb42 0101 	adc.w	r1, r2, r1
 8013f52:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013f54:	4642      	mov	r2, r8
 8013f56:	fbc7 3206 	smlal	r3, r2, r7, r6
 8013f5a:	469c      	mov	ip, r3
 8013f5c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	; 0x40
 8013f60:	fbc3 7806 	smlal	r7, r8, r3, r6
 8013f64:	4643      	mov	r3, r8
 8013f66:	eb1c 0c07 	adds.w	ip, ip, r7
 8013f6a:	eb42 0203 	adc.w	r2, r2, r3
 8013f6e:	ebb0 030c 	subs.w	r3, r0, ip
 8013f72:	eb61 0202 	sbc.w	r2, r1, r2
 8013f76:	2a00      	cmp	r2, #0
 8013f78:	db08      	blt.n	8013f8c <read_submessage_list+0x308>
 8013f7a:	085b      	lsrs	r3, r3, #1
 8013f7c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8013f80:	1052      	asrs	r2, r2, #1
 8013f82:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
 8013f86:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
 8013f8a:	e6db      	b.n	8013d44 <read_submessage_list+0xc0>
 8013f8c:	3301      	adds	r3, #1
 8013f8e:	f142 0200 	adc.w	r2, r2, #0
 8013f92:	e7f2      	b.n	8013f7a <read_submessage_list+0x2f6>
 8013f94:	3b9aca00 	.word	0x3b9aca00

08013f98 <listen_message_reliably>:
 8013f98:	1e0b      	subs	r3, r1, #0
 8013f9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9e:	bfb8      	it	lt
 8013fa0:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 8013fa4:	b09d      	sub	sp, #116	; 0x74
 8013fa6:	4680      	mov	r8, r0
 8013fa8:	9305      	str	r3, [sp, #20]
 8013faa:	f001 fb27 	bl	80155fc <uxr_millis>
 8013fae:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 8013fb2:	4681      	mov	r9, r0
 8013fb4:	2a00      	cmp	r2, #0
 8013fb6:	f000 809a 	beq.w	80140ee <listen_message_reliably+0x156>
 8013fba:	2600      	movs	r6, #0
 8013fbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013fc0:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8013fc4:	460f      	mov	r7, r1
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	9303      	str	r3, [sp, #12]
 8013fca:	e00e      	b.n	8013fea <listen_message_reliably+0x52>
 8013fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013fce:	3601      	adds	r6, #1
 8013fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013fd2:	455a      	cmp	r2, fp
 8013fd4:	9903      	ldr	r1, [sp, #12]
 8013fd6:	b2f0      	uxtb	r0, r6
 8013fd8:	eb73 0101 	sbcs.w	r1, r3, r1
 8013fdc:	da01      	bge.n	8013fe2 <listen_message_reliably+0x4a>
 8013fde:	4693      	mov	fp, r2
 8013fe0:	9303      	str	r3, [sp, #12]
 8013fe2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 8013fe6:	4283      	cmp	r3, r0
 8013fe8:	d95f      	bls.n	80140aa <listen_message_reliably+0x112>
 8013fea:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8013fee:	2102      	movs	r1, #2
 8013ff0:	2201      	movs	r2, #1
 8013ff2:	00e4      	lsls	r4, r4, #3
 8013ff4:	f001 f97e 	bl	80152f4 <uxr_stream_id>
 8013ff8:	4601      	mov	r1, r0
 8013ffa:	f104 0520 	add.w	r5, r4, #32
 8013ffe:	463b      	mov	r3, r7
 8014000:	464a      	mov	r2, r9
 8014002:	9109      	str	r1, [sp, #36]	; 0x24
 8014004:	4445      	add	r5, r8
 8014006:	4628      	mov	r0, r5
 8014008:	f006 fb12 	bl	801a630 <uxr_update_output_stream_heartbeat_timestamp>
 801400c:	eb08 0304 	add.w	r3, r8, r4
 8014010:	2800      	cmp	r0, #0
 8014012:	d0db      	beq.n	8013fcc <listen_message_reliably+0x34>
 8014014:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 8014018:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 801401c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8014020:	4640      	mov	r0, r8
 8014022:	3501      	adds	r5, #1
 8014024:	4444      	add	r4, r8
 8014026:	9304      	str	r3, [sp, #16]
 8014028:	f000 fcae 	bl	8014988 <uxr_session_header_offset>
 801402c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014030:	2300      	movs	r3, #0
 8014032:	2211      	movs	r2, #17
 8014034:	a90c      	add	r1, sp, #48	; 0x30
 8014036:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 801403a:	9000      	str	r0, [sp, #0]
 801403c:	4650      	mov	r0, sl
 801403e:	3601      	adds	r6, #1
 8014040:	f7fa fd34 	bl	800eaac <ucdr_init_buffer_origin_offset>
 8014044:	2300      	movs	r3, #0
 8014046:	2205      	movs	r2, #5
 8014048:	210b      	movs	r1, #11
 801404a:	4650      	mov	r0, sl
 801404c:	f001 fa90 	bl	8015570 <uxr_buffer_submessage_header>
 8014050:	2101      	movs	r1, #1
 8014052:	8968      	ldrh	r0, [r5, #10]
 8014054:	f006 fbb0 	bl	801a7b8 <uxr_seq_num_add>
 8014058:	892b      	ldrh	r3, [r5, #8]
 801405a:	4602      	mov	r2, r0
 801405c:	a90a      	add	r1, sp, #40	; 0x28
 801405e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8014062:	4650      	mov	r0, sl
 8014064:	9b04      	ldr	r3, [sp, #16]
 8014066:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801406a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801406e:	f002 fc99 	bl	80169a4 <uxr_serialize_HEARTBEAT_Payload>
 8014072:	2200      	movs	r2, #0
 8014074:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014076:	4640      	mov	r0, r8
 8014078:	4611      	mov	r1, r2
 801407a:	f000 fc31 	bl	80148e0 <uxr_stamp_session_header>
 801407e:	4650      	mov	r0, sl
 8014080:	f7fa fd54 	bl	800eb2c <ucdr_buffer_length>
 8014084:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8014088:	4602      	mov	r2, r0
 801408a:	a90c      	add	r1, sp, #48	; 0x30
 801408c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8014090:	47a8      	blx	r5
 8014092:	9903      	ldr	r1, [sp, #12]
 8014094:	b2f0      	uxtb	r0, r6
 8014096:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 801409a:	455a      	cmp	r2, fp
 801409c:	eb73 0101 	sbcs.w	r1, r3, r1
 80140a0:	db9d      	blt.n	8013fde <listen_message_reliably+0x46>
 80140a2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 80140a6:	4283      	cmp	r3, r0
 80140a8:	d89f      	bhi.n	8013fea <listen_message_reliably+0x52>
 80140aa:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80140ae:	9a03      	ldr	r2, [sp, #12]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	bf08      	it	eq
 80140b4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 80140b8:	d019      	beq.n	80140ee <listen_message_reliably+0x156>
 80140ba:	ebab 0309 	sub.w	r3, fp, r9
 80140be:	2b00      	cmp	r3, #0
 80140c0:	9d05      	ldr	r5, [sp, #20]
 80140c2:	f8d8 0070 	ldr.w	r0, [r8, #112]	; 0x70
 80140c6:	aa08      	add	r2, sp, #32
 80140c8:	bf08      	it	eq
 80140ca:	2301      	moveq	r3, #1
 80140cc:	a907      	add	r1, sp, #28
 80140ce:	6884      	ldr	r4, [r0, #8]
 80140d0:	429d      	cmp	r5, r3
 80140d2:	6800      	ldr	r0, [r0, #0]
 80140d4:	bfa8      	it	ge
 80140d6:	461d      	movge	r5, r3
 80140d8:	462b      	mov	r3, r5
 80140da:	47a0      	blx	r4
 80140dc:	b948      	cbnz	r0, 80140f2 <listen_message_reliably+0x15a>
 80140de:	9b05      	ldr	r3, [sp, #20]
 80140e0:	1b5b      	subs	r3, r3, r5
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	9305      	str	r3, [sp, #20]
 80140e6:	f73f af60 	bgt.w	8013faa <listen_message_reliably+0x12>
 80140ea:	4604      	mov	r4, r0
 80140ec:	e012      	b.n	8014114 <listen_message_reliably+0x17c>
 80140ee:	9b05      	ldr	r3, [sp, #20]
 80140f0:	e7e5      	b.n	80140be <listen_message_reliably+0x126>
 80140f2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80140f6:	4604      	mov	r4, r0
 80140f8:	2500      	movs	r5, #0
 80140fa:	a80c      	add	r0, sp, #48	; 0x30
 80140fc:	f7fa fce8 	bl	800ead0 <ucdr_init_buffer>
 8014100:	f10d 031a 	add.w	r3, sp, #26
 8014104:	aa06      	add	r2, sp, #24
 8014106:	a90c      	add	r1, sp, #48	; 0x30
 8014108:	4640      	mov	r0, r8
 801410a:	f88d 5018 	strb.w	r5, [sp, #24]
 801410e:	f000 fbfb 	bl	8014908 <uxr_read_session_header>
 8014112:	b918      	cbnz	r0, 801411c <listen_message_reliably+0x184>
 8014114:	4620      	mov	r0, r4
 8014116:	b01d      	add	sp, #116	; 0x74
 8014118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801411c:	4629      	mov	r1, r5
 801411e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014122:	f001 f915 	bl	8015350 <uxr_stream_id_from_raw>
 8014126:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801412a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801412e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8014132:	2e01      	cmp	r6, #1
 8014134:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 8014138:	d04b      	beq.n	80141d2 <listen_message_reliably+0x23a>
 801413a:	2e02      	cmp	r6, #2
 801413c:	d00f      	beq.n	801415e <listen_message_reliably+0x1c6>
 801413e:	2e00      	cmp	r6, #0
 8014140:	d1e8      	bne.n	8014114 <listen_message_reliably+0x17c>
 8014142:	4631      	mov	r1, r6
 8014144:	4630      	mov	r0, r6
 8014146:	f001 f903 	bl	8015350 <uxr_stream_id_from_raw>
 801414a:	4602      	mov	r2, r0
 801414c:	a90c      	add	r1, sp, #48	; 0x30
 801414e:	4640      	mov	r0, r8
 8014150:	920a      	str	r2, [sp, #40]	; 0x28
 8014152:	f7ff fd97 	bl	8013c84 <read_submessage_list>
 8014156:	4620      	mov	r0, r4
 8014158:	b01d      	add	sp, #116	; 0x74
 801415a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801415e:	4629      	mov	r1, r5
 8014160:	f108 0008 	add.w	r0, r8, #8
 8014164:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 8014168:	f001 f9e0 	bl	801552c <uxr_get_input_reliable_stream>
 801416c:	4607      	mov	r7, r0
 801416e:	b338      	cbz	r0, 80141c0 <listen_message_reliably+0x228>
 8014170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014172:	a80c      	add	r0, sp, #48	; 0x30
 8014174:	9203      	str	r2, [sp, #12]
 8014176:	f7fa fcdd 	bl	800eb34 <ucdr_buffer_remaining>
 801417a:	4603      	mov	r3, r0
 801417c:	f10d 0019 	add.w	r0, sp, #25
 8014180:	9a03      	ldr	r2, [sp, #12]
 8014182:	4651      	mov	r1, sl
 8014184:	9000      	str	r0, [sp, #0]
 8014186:	4638      	mov	r0, r7
 8014188:	f005 fe5c 	bl	8019e44 <uxr_receive_reliable_message>
 801418c:	b1c0      	cbz	r0, 80141c0 <listen_message_reliably+0x228>
 801418e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8014192:	b393      	cbz	r3, 80141fa <listen_message_reliably+0x262>
 8014194:	ae14      	add	r6, sp, #80	; 0x50
 8014196:	f04f 0a02 	mov.w	sl, #2
 801419a:	e00a      	b.n	80141b2 <listen_message_reliably+0x21a>
 801419c:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 80141a0:	4631      	mov	r1, r6
 80141a2:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
 80141a6:	4640      	mov	r0, r8
 80141a8:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 80141ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141ae:	f7ff fd69 	bl	8013c84 <read_submessage_list>
 80141b2:	2204      	movs	r2, #4
 80141b4:	4631      	mov	r1, r6
 80141b6:	4638      	mov	r0, r7
 80141b8:	f005 fec6 	bl	8019f48 <uxr_next_input_reliable_buffer_available>
 80141bc:	2800      	cmp	r0, #0
 80141be:	d1ed      	bne.n	801419c <listen_message_reliably+0x204>
 80141c0:	4640      	mov	r0, r8
 80141c2:	462a      	mov	r2, r5
 80141c4:	4649      	mov	r1, r9
 80141c6:	f7ff fbd9 	bl	801397c <write_submessage_acknack.isra.0>
 80141ca:	4620      	mov	r0, r4
 80141cc:	b01d      	add	sp, #116	; 0x74
 80141ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141d2:	4629      	mov	r1, r5
 80141d4:	f108 0008 	add.w	r0, r8, #8
 80141d8:	f001 f99e 	bl	8015518 <uxr_get_input_best_effort_stream>
 80141dc:	2800      	cmp	r0, #0
 80141de:	d099      	beq.n	8014114 <listen_message_reliably+0x17c>
 80141e0:	4651      	mov	r1, sl
 80141e2:	f005 fda5 	bl	8019d30 <uxr_receive_best_effort_message>
 80141e6:	2800      	cmp	r0, #0
 80141e8:	d094      	beq.n	8014114 <listen_message_reliably+0x17c>
 80141ea:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80141ee:	a90c      	add	r1, sp, #48	; 0x30
 80141f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80141f2:	4640      	mov	r0, r8
 80141f4:	f7ff fd46 	bl	8013c84 <read_submessage_list>
 80141f8:	e78c      	b.n	8014114 <listen_message_reliably+0x17c>
 80141fa:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 80141fe:	a90c      	add	r1, sp, #48	; 0x30
 8014200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014202:	4640      	mov	r0, r8
 8014204:	f7ff fd3e 	bl	8013c84 <read_submessage_list>
 8014208:	e7c4      	b.n	8014194 <listen_message_reliably+0x1fc>
 801420a:	bf00      	nop

0801420c <uxr_run_session_timeout>:
 801420c:	b570      	push	{r4, r5, r6, lr}
 801420e:	4604      	mov	r4, r0
 8014210:	460d      	mov	r5, r1
 8014212:	f001 f9f3 	bl	80155fc <uxr_millis>
 8014216:	4606      	mov	r6, r0
 8014218:	4620      	mov	r0, r4
 801421a:	f7ff fc77 	bl	8013b0c <uxr_flash_output_streams>
 801421e:	4629      	mov	r1, r5
 8014220:	4620      	mov	r0, r4
 8014222:	f7ff feb9 	bl	8013f98 <listen_message_reliably>
 8014226:	f001 f9e9 	bl	80155fc <uxr_millis>
 801422a:	1b83      	subs	r3, r0, r6
 801422c:	1ae9      	subs	r1, r5, r3
 801422e:	2900      	cmp	r1, #0
 8014230:	dcf6      	bgt.n	8014220 <uxr_run_session_timeout+0x14>
 8014232:	f104 0008 	add.w	r0, r4, #8
 8014236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801423a:	f001 b983 	b.w	8015544 <uxr_output_streams_confirmed>
 801423e:	bf00      	nop

08014240 <uxr_run_session_until_data>:
 8014240:	b570      	push	{r4, r5, r6, lr}
 8014242:	4604      	mov	r4, r0
 8014244:	460d      	mov	r5, r1
 8014246:	f001 f9d9 	bl	80155fc <uxr_millis>
 801424a:	4606      	mov	r6, r0
 801424c:	4620      	mov	r0, r4
 801424e:	f7ff fc5d 	bl	8013b0c <uxr_flash_output_streams>
 8014252:	2300      	movs	r3, #0
 8014254:	4629      	mov	r1, r5
 8014256:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
 801425a:	e005      	b.n	8014268 <uxr_run_session_until_data+0x28>
 801425c:	f001 f9ce 	bl	80155fc <uxr_millis>
 8014260:	1b83      	subs	r3, r0, r6
 8014262:	1ae9      	subs	r1, r5, r3
 8014264:	2900      	cmp	r1, #0
 8014266:	dd07      	ble.n	8014278 <uxr_run_session_until_data+0x38>
 8014268:	4620      	mov	r0, r4
 801426a:	f7ff fe95 	bl	8013f98 <listen_message_reliably>
 801426e:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 8014272:	2800      	cmp	r0, #0
 8014274:	d0f2      	beq.n	801425c <uxr_run_session_until_data+0x1c>
 8014276:	bd70      	pop	{r4, r5, r6, pc}
 8014278:	f894 00b4 	ldrb.w	r0, [r4, #180]	; 0xb4
 801427c:	bd70      	pop	{r4, r5, r6, pc}
 801427e:	bf00      	nop

08014280 <uxr_run_session_until_confirm_delivery>:
 8014280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014284:	4606      	mov	r6, r0
 8014286:	460d      	mov	r5, r1
 8014288:	f001 f9b8 	bl	80155fc <uxr_millis>
 801428c:	4607      	mov	r7, r0
 801428e:	4630      	mov	r0, r6
 8014290:	f106 0808 	add.w	r8, r6, #8
 8014294:	f7ff fc3a 	bl	8013b0c <uxr_flash_output_streams>
 8014298:	2d00      	cmp	r5, #0
 801429a:	db10      	blt.n	80142be <uxr_run_session_until_confirm_delivery+0x3e>
 801429c:	462c      	mov	r4, r5
 801429e:	e006      	b.n	80142ae <uxr_run_session_until_confirm_delivery+0x2e>
 80142a0:	f7ff fe7a 	bl	8013f98 <listen_message_reliably>
 80142a4:	f001 f9aa 	bl	80155fc <uxr_millis>
 80142a8:	1bc3      	subs	r3, r0, r7
 80142aa:	1aec      	subs	r4, r5, r3
 80142ac:	d407      	bmi.n	80142be <uxr_run_session_until_confirm_delivery+0x3e>
 80142ae:	4640      	mov	r0, r8
 80142b0:	f001 f948 	bl	8015544 <uxr_output_streams_confirmed>
 80142b4:	4603      	mov	r3, r0
 80142b6:	4621      	mov	r1, r4
 80142b8:	4630      	mov	r0, r6
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d0f0      	beq.n	80142a0 <uxr_run_session_until_confirm_delivery+0x20>
 80142be:	4640      	mov	r0, r8
 80142c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142c4:	f001 b93e 	b.w	8015544 <uxr_output_streams_confirmed>

080142c8 <uxr_run_session_until_all_status>:
 80142c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142cc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80142d0:	4606      	mov	r6, r0
 80142d2:	4688      	mov	r8, r1
 80142d4:	4692      	mov	sl, r2
 80142d6:	461f      	mov	r7, r3
 80142d8:	f7ff fc18 	bl	8013b0c <uxr_flash_output_streams>
 80142dc:	f1bb 0f00 	cmp.w	fp, #0
 80142e0:	d004      	beq.n	80142ec <uxr_run_session_until_all_status+0x24>
 80142e2:	465a      	mov	r2, fp
 80142e4:	21ff      	movs	r1, #255	; 0xff
 80142e6:	4638      	mov	r0, r7
 80142e8:	f007 fae0 	bl	801b8ac <memset>
 80142ec:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 80142f0:	1e7d      	subs	r5, r7, #1
 80142f2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	; 0x74
 80142f6:	f001 f981 	bl	80155fc <uxr_millis>
 80142fa:	4641      	mov	r1, r8
 80142fc:	4681      	mov	r9, r0
 80142fe:	4630      	mov	r0, r6
 8014300:	f7ff fe4a 	bl	8013f98 <listen_message_reliably>
 8014304:	f001 f97a 	bl	80155fc <uxr_millis>
 8014308:	eba0 0009 	sub.w	r0, r0, r9
 801430c:	eba8 0100 	sub.w	r1, r8, r0
 8014310:	f1bb 0f00 	cmp.w	fp, #0
 8014314:	d029      	beq.n	801436a <uxr_run_session_until_all_status+0xa2>
 8014316:	46ae      	mov	lr, r5
 8014318:	f04f 0c00 	mov.w	ip, #0
 801431c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8014320:	2cff      	cmp	r4, #255	; 0xff
 8014322:	d015      	beq.n	8014350 <uxr_run_session_until_all_status+0x88>
 8014324:	f10c 0c01 	add.w	ip, ip, #1
 8014328:	45e3      	cmp	fp, ip
 801432a:	d8f7      	bhi.n	801431c <uxr_run_session_until_all_status+0x54>
 801432c:	2300      	movs	r3, #0
 801432e:	67f3      	str	r3, [r6, #124]	; 0x7c
 8014330:	e000      	b.n	8014334 <uxr_run_session_until_all_status+0x6c>
 8014332:	b158      	cbz	r0, 801434c <uxr_run_session_until_all_status+0x84>
 8014334:	462b      	mov	r3, r5
 8014336:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801433a:	3302      	adds	r3, #2
 801433c:	2801      	cmp	r0, #1
 801433e:	eba3 0307 	sub.w	r3, r3, r7
 8014342:	bf8c      	ite	hi
 8014344:	2000      	movhi	r0, #0
 8014346:	2001      	movls	r0, #1
 8014348:	459b      	cmp	fp, r3
 801434a:	d8f2      	bhi.n	8014332 <uxr_run_session_until_all_status+0x6a>
 801434c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014350:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8014354:	f10c 0c01 	add.w	ip, ip, #1
 8014358:	45dc      	cmp	ip, fp
 801435a:	d201      	bcs.n	8014360 <uxr_run_session_until_all_status+0x98>
 801435c:	2b00      	cmp	r3, #0
 801435e:	d0dd      	beq.n	801431c <uxr_run_session_until_all_status+0x54>
 8014360:	2900      	cmp	r1, #0
 8014362:	dde3      	ble.n	801432c <uxr_run_session_until_all_status+0x64>
 8014364:	2b00      	cmp	r3, #0
 8014366:	d1ca      	bne.n	80142fe <uxr_run_session_until_all_status+0x36>
 8014368:	e7e0      	b.n	801432c <uxr_run_session_until_all_status+0x64>
 801436a:	2001      	movs	r0, #1
 801436c:	f8c6 b07c 	str.w	fp, [r6, #124]	; 0x7c
 8014370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014374 <wait_session_status>:
 8014374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014378:	4604      	mov	r4, r0
 801437a:	b09d      	sub	sp, #116	; 0x74
 801437c:	20ff      	movs	r0, #255	; 0xff
 801437e:	9303      	str	r3, [sp, #12]
 8014380:	7160      	strb	r0, [r4, #5]
 8014382:	2b00      	cmp	r3, #0
 8014384:	f000 80b6 	beq.w	80144f4 <wait_session_status+0x180>
 8014388:	4689      	mov	r9, r1
 801438a:	4692      	mov	sl, r2
 801438c:	f04f 0b00 	mov.w	fp, #0
 8014390:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8014392:	4652      	mov	r2, sl
 8014394:	4649      	mov	r1, r9
 8014396:	e9d3 0500 	ldrd	r0, r5, [r3]
 801439a:	47a8      	blx	r5
 801439c:	f001 f92e 	bl	80155fc <uxr_millis>
 80143a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80143a4:	4605      	mov	r5, r0
 80143a6:	e009      	b.n	80143bc <wait_session_status+0x48>
 80143a8:	f001 f928 	bl	80155fc <uxr_millis>
 80143ac:	1b40      	subs	r0, r0, r5
 80143ae:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	dd40      	ble.n	8014438 <wait_session_status+0xc4>
 80143b6:	7960      	ldrb	r0, [r4, #5]
 80143b8:	28ff      	cmp	r0, #255	; 0xff
 80143ba:	d145      	bne.n	8014448 <wait_session_status+0xd4>
 80143bc:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80143be:	a908      	add	r1, sp, #32
 80143c0:	6896      	ldr	r6, [r2, #8]
 80143c2:	6810      	ldr	r0, [r2, #0]
 80143c4:	aa09      	add	r2, sp, #36	; 0x24
 80143c6:	47b0      	blx	r6
 80143c8:	2800      	cmp	r0, #0
 80143ca:	d0ed      	beq.n	80143a8 <wait_session_status+0x34>
 80143cc:	a80c      	add	r0, sp, #48	; 0x30
 80143ce:	2600      	movs	r6, #0
 80143d0:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 80143d4:	f7fa fb7c 	bl	800ead0 <ucdr_init_buffer>
 80143d8:	f10d 031e 	add.w	r3, sp, #30
 80143dc:	aa07      	add	r2, sp, #28
 80143de:	a90c      	add	r1, sp, #48	; 0x30
 80143e0:	4620      	mov	r0, r4
 80143e2:	f88d 601c 	strb.w	r6, [sp, #28]
 80143e6:	f000 fa8f 	bl	8014908 <uxr_read_session_header>
 80143ea:	2800      	cmp	r0, #0
 80143ec:	d0dc      	beq.n	80143a8 <wait_session_status+0x34>
 80143ee:	4631      	mov	r1, r6
 80143f0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 80143f4:	f000 ffac 	bl	8015350 <uxr_stream_id_from_raw>
 80143f8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80143fc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8014400:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8014404:	2f01      	cmp	r7, #1
 8014406:	9302      	str	r3, [sp, #8]
 8014408:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 801440c:	d05c      	beq.n	80144c8 <wait_session_status+0x154>
 801440e:	2f02      	cmp	r7, #2
 8014410:	d020      	beq.n	8014454 <wait_session_status+0xe0>
 8014412:	2f00      	cmp	r7, #0
 8014414:	d1c8      	bne.n	80143a8 <wait_session_status+0x34>
 8014416:	4639      	mov	r1, r7
 8014418:	4638      	mov	r0, r7
 801441a:	f000 ff99 	bl	8015350 <uxr_stream_id_from_raw>
 801441e:	a90c      	add	r1, sp, #48	; 0x30
 8014420:	4602      	mov	r2, r0
 8014422:	900b      	str	r0, [sp, #44]	; 0x2c
 8014424:	4620      	mov	r0, r4
 8014426:	f7ff fc2d 	bl	8013c84 <read_submessage_list>
 801442a:	f001 f8e7 	bl	80155fc <uxr_millis>
 801442e:	1b40      	subs	r0, r0, r5
 8014430:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 8014434:	2b00      	cmp	r3, #0
 8014436:	dcbe      	bgt.n	80143b6 <wait_session_status+0x42>
 8014438:	f10b 0b01 	add.w	fp, fp, #1
 801443c:	9b03      	ldr	r3, [sp, #12]
 801443e:	7960      	ldrb	r0, [r4, #5]
 8014440:	455b      	cmp	r3, fp
 8014442:	d001      	beq.n	8014448 <wait_session_status+0xd4>
 8014444:	28ff      	cmp	r0, #255	; 0xff
 8014446:	d0a3      	beq.n	8014390 <wait_session_status+0x1c>
 8014448:	38ff      	subs	r0, #255	; 0xff
 801444a:	bf18      	it	ne
 801444c:	2001      	movne	r0, #1
 801444e:	b01d      	add	sp, #116	; 0x74
 8014450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014454:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8014458:	4631      	mov	r1, r6
 801445a:	f104 0008 	add.w	r0, r4, #8
 801445e:	9304      	str	r3, [sp, #16]
 8014460:	f001 f864 	bl	801552c <uxr_get_input_reliable_stream>
 8014464:	4680      	mov	r8, r0
 8014466:	b348      	cbz	r0, 80144bc <wait_session_status+0x148>
 8014468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801446a:	a80c      	add	r0, sp, #48	; 0x30
 801446c:	9205      	str	r2, [sp, #20]
 801446e:	f7fa fb61 	bl	800eb34 <ucdr_buffer_remaining>
 8014472:	4603      	mov	r3, r0
 8014474:	f10d 001d 	add.w	r0, sp, #29
 8014478:	9a05      	ldr	r2, [sp, #20]
 801447a:	9000      	str	r0, [sp, #0]
 801447c:	4640      	mov	r0, r8
 801447e:	9902      	ldr	r1, [sp, #8]
 8014480:	f005 fce0 	bl	8019e44 <uxr_receive_reliable_message>
 8014484:	b1d0      	cbz	r0, 80144bc <wait_session_status+0x148>
 8014486:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801448a:	2b00      	cmp	r3, #0
 801448c:	d03a      	beq.n	8014504 <wait_session_status+0x190>
 801448e:	9f04      	ldr	r7, [sp, #16]
 8014490:	e00a      	b.n	80144a8 <wait_session_status+0x134>
 8014492:	f04f 0302 	mov.w	r3, #2
 8014496:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 801449a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801449e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 80144a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80144a4:	f7ff fbee 	bl	8013c84 <read_submessage_list>
 80144a8:	a914      	add	r1, sp, #80	; 0x50
 80144aa:	2204      	movs	r2, #4
 80144ac:	4640      	mov	r0, r8
 80144ae:	f005 fd4b 	bl	8019f48 <uxr_next_input_reliable_buffer_available>
 80144b2:	4603      	mov	r3, r0
 80144b4:	a914      	add	r1, sp, #80	; 0x50
 80144b6:	4620      	mov	r0, r4
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d1ea      	bne.n	8014492 <wait_session_status+0x11e>
 80144bc:	4632      	mov	r2, r6
 80144be:	9904      	ldr	r1, [sp, #16]
 80144c0:	4620      	mov	r0, r4
 80144c2:	f7ff fa5b 	bl	801397c <write_submessage_acknack.isra.0>
 80144c6:	e76f      	b.n	80143a8 <wait_session_status+0x34>
 80144c8:	4631      	mov	r1, r6
 80144ca:	f104 0008 	add.w	r0, r4, #8
 80144ce:	f001 f823 	bl	8015518 <uxr_get_input_best_effort_stream>
 80144d2:	2800      	cmp	r0, #0
 80144d4:	f43f af68 	beq.w	80143a8 <wait_session_status+0x34>
 80144d8:	9902      	ldr	r1, [sp, #8]
 80144da:	f005 fc29 	bl	8019d30 <uxr_receive_best_effort_message>
 80144de:	2800      	cmp	r0, #0
 80144e0:	f43f af62 	beq.w	80143a8 <wait_session_status+0x34>
 80144e4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 80144e8:	a90c      	add	r1, sp, #48	; 0x30
 80144ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80144ec:	4620      	mov	r0, r4
 80144ee:	f7ff fbc9 	bl	8013c84 <read_submessage_list>
 80144f2:	e759      	b.n	80143a8 <wait_session_status+0x34>
 80144f4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80144f6:	e9d3 0400 	ldrd	r0, r4, [r3]
 80144fa:	47a0      	blx	r4
 80144fc:	2001      	movs	r0, #1
 80144fe:	b01d      	add	sp, #116	; 0x74
 8014500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014504:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 8014508:	a90c      	add	r1, sp, #48	; 0x30
 801450a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801450c:	4620      	mov	r0, r4
 801450e:	f7ff fbb9 	bl	8013c84 <read_submessage_list>
 8014512:	e7bc      	b.n	801448e <wait_session_status+0x11a>

08014514 <uxr_delete_session_retries>:
 8014514:	b530      	push	{r4, r5, lr}
 8014516:	b08f      	sub	sp, #60	; 0x3c
 8014518:	4604      	mov	r4, r0
 801451a:	460d      	mov	r5, r1
 801451c:	f000 fa34 	bl	8014988 <uxr_session_header_offset>
 8014520:	2300      	movs	r3, #0
 8014522:	2210      	movs	r2, #16
 8014524:	a902      	add	r1, sp, #8
 8014526:	9000      	str	r0, [sp, #0]
 8014528:	a806      	add	r0, sp, #24
 801452a:	f7fa fabf 	bl	800eaac <ucdr_init_buffer_origin_offset>
 801452e:	a906      	add	r1, sp, #24
 8014530:	4620      	mov	r0, r4
 8014532:	f000 f979 	bl	8014828 <uxr_buffer_delete_session>
 8014536:	2200      	movs	r2, #0
 8014538:	9b06      	ldr	r3, [sp, #24]
 801453a:	4620      	mov	r0, r4
 801453c:	4611      	mov	r1, r2
 801453e:	f000 f9cf 	bl	80148e0 <uxr_stamp_session_header>
 8014542:	a806      	add	r0, sp, #24
 8014544:	f7fa faf2 	bl	800eb2c <ucdr_buffer_length>
 8014548:	462b      	mov	r3, r5
 801454a:	4602      	mov	r2, r0
 801454c:	a902      	add	r1, sp, #8
 801454e:	4620      	mov	r0, r4
 8014550:	f7ff ff10 	bl	8014374 <wait_session_status>
 8014554:	b118      	cbz	r0, 801455e <uxr_delete_session_retries+0x4a>
 8014556:	7960      	ldrb	r0, [r4, #5]
 8014558:	fab0 f080 	clz	r0, r0
 801455c:	0940      	lsrs	r0, r0, #5
 801455e:	b00f      	add	sp, #60	; 0x3c
 8014560:	bd30      	pop	{r4, r5, pc}
 8014562:	bf00      	nop

08014564 <uxr_create_session>:
 8014564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014568:	f100 0b08 	add.w	fp, r0, #8
 801456c:	4604      	mov	r4, r0
 801456e:	b0ab      	sub	sp, #172	; 0xac
 8014570:	4658      	mov	r0, fp
 8014572:	465e      	mov	r6, fp
 8014574:	f000 ff22 	bl	80153bc <uxr_reset_stream_storage>
 8014578:	4620      	mov	r0, r4
 801457a:	f000 fa05 	bl	8014988 <uxr_session_header_offset>
 801457e:	2300      	movs	r3, #0
 8014580:	221c      	movs	r2, #28
 8014582:	a90b      	add	r1, sp, #44	; 0x2c
 8014584:	9000      	str	r0, [sp, #0]
 8014586:	a812      	add	r0, sp, #72	; 0x48
 8014588:	f7fa fa90 	bl	800eaac <ucdr_init_buffer_origin_offset>
 801458c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801458e:	a912      	add	r1, sp, #72	; 0x48
 8014590:	4620      	mov	r0, r4
 8014592:	8a1a      	ldrh	r2, [r3, #16]
 8014594:	3a04      	subs	r2, #4
 8014596:	b292      	uxth	r2, r2
 8014598:	f000 f91c 	bl	80147d4 <uxr_buffer_create_session>
 801459c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801459e:	4620      	mov	r0, r4
 80145a0:	f000 f98a 	bl	80148b8 <uxr_stamp_create_session_header>
 80145a4:	a812      	add	r0, sp, #72	; 0x48
 80145a6:	f7fa fac1 	bl	800eb2c <ucdr_buffer_length>
 80145aa:	23ff      	movs	r3, #255	; 0xff
 80145ac:	4681      	mov	r9, r0
 80145ae:	7163      	strb	r3, [r4, #5]
 80145b0:	230a      	movs	r3, #10
 80145b2:	9303      	str	r3, [sp, #12]
 80145b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80145b6:	464a      	mov	r2, r9
 80145b8:	a90b      	add	r1, sp, #44	; 0x2c
 80145ba:	e9d3 0500 	ldrd	r0, r5, [r3]
 80145be:	47a8      	blx	r5
 80145c0:	f001 f81c 	bl	80155fc <uxr_millis>
 80145c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80145c8:	4605      	mov	r5, r0
 80145ca:	e009      	b.n	80145e0 <uxr_create_session+0x7c>
 80145cc:	f001 f816 	bl	80155fc <uxr_millis>
 80145d0:	1b40      	subs	r0, r0, r5
 80145d2:	7962      	ldrb	r2, [r4, #5]
 80145d4:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 80145d8:	2b00      	cmp	r3, #0
 80145da:	dd38      	ble.n	801464e <uxr_create_session+0xea>
 80145dc:	2aff      	cmp	r2, #255	; 0xff
 80145de:	d13c      	bne.n	801465a <uxr_create_session+0xf6>
 80145e0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 80145e2:	a907      	add	r1, sp, #28
 80145e4:	6897      	ldr	r7, [r2, #8]
 80145e6:	6810      	ldr	r0, [r2, #0]
 80145e8:	aa08      	add	r2, sp, #32
 80145ea:	47b8      	blx	r7
 80145ec:	2800      	cmp	r0, #0
 80145ee:	d0ed      	beq.n	80145cc <uxr_create_session+0x68>
 80145f0:	a81a      	add	r0, sp, #104	; 0x68
 80145f2:	2700      	movs	r7, #0
 80145f4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 80145f8:	f7fa fa6a 	bl	800ead0 <ucdr_init_buffer>
 80145fc:	f10d 031a 	add.w	r3, sp, #26
 8014600:	aa06      	add	r2, sp, #24
 8014602:	a91a      	add	r1, sp, #104	; 0x68
 8014604:	4620      	mov	r0, r4
 8014606:	f88d 7018 	strb.w	r7, [sp, #24]
 801460a:	f000 f97d 	bl	8014908 <uxr_read_session_header>
 801460e:	2800      	cmp	r0, #0
 8014610:	d0dc      	beq.n	80145cc <uxr_create_session+0x68>
 8014612:	4639      	mov	r1, r7
 8014614:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8014618:	f000 fe9a 	bl	8015350 <uxr_stream_id_from_raw>
 801461c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8014620:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8014624:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8014628:	2f01      	cmp	r7, #1
 801462a:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 801462e:	d053      	beq.n	80146d8 <uxr_create_session+0x174>
 8014630:	2f02      	cmp	r7, #2
 8014632:	d018      	beq.n	8014666 <uxr_create_session+0x102>
 8014634:	2f00      	cmp	r7, #0
 8014636:	d1c9      	bne.n	80145cc <uxr_create_session+0x68>
 8014638:	4639      	mov	r1, r7
 801463a:	4638      	mov	r0, r7
 801463c:	f000 fe88 	bl	8015350 <uxr_stream_id_from_raw>
 8014640:	a91a      	add	r1, sp, #104	; 0x68
 8014642:	4602      	mov	r2, r0
 8014644:	900a      	str	r0, [sp, #40]	; 0x28
 8014646:	4620      	mov	r0, r4
 8014648:	f7ff fb1c 	bl	8013c84 <read_submessage_list>
 801464c:	e7be      	b.n	80145cc <uxr_create_session+0x68>
 801464e:	9b03      	ldr	r3, [sp, #12]
 8014650:	3b01      	subs	r3, #1
 8014652:	9303      	str	r3, [sp, #12]
 8014654:	d001      	beq.n	801465a <uxr_create_session+0xf6>
 8014656:	2aff      	cmp	r2, #255	; 0xff
 8014658:	d0ac      	beq.n	80145b4 <uxr_create_session+0x50>
 801465a:	2a00      	cmp	r2, #0
 801465c:	d051      	beq.n	8014702 <uxr_create_session+0x19e>
 801465e:	2000      	movs	r0, #0
 8014660:	b02b      	add	sp, #172	; 0xac
 8014662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014666:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 801466a:	4641      	mov	r1, r8
 801466c:	4630      	mov	r0, r6
 801466e:	9304      	str	r3, [sp, #16]
 8014670:	f000 ff5c 	bl	801552c <uxr_get_input_reliable_stream>
 8014674:	4682      	mov	sl, r0
 8014676:	b348      	cbz	r0, 80146cc <uxr_create_session+0x168>
 8014678:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801467a:	a81a      	add	r0, sp, #104	; 0x68
 801467c:	9205      	str	r2, [sp, #20]
 801467e:	f7fa fa59 	bl	800eb34 <ucdr_buffer_remaining>
 8014682:	4603      	mov	r3, r0
 8014684:	f10d 0019 	add.w	r0, sp, #25
 8014688:	9a05      	ldr	r2, [sp, #20]
 801468a:	4659      	mov	r1, fp
 801468c:	9000      	str	r0, [sp, #0]
 801468e:	4650      	mov	r0, sl
 8014690:	f005 fbd8 	bl	8019e44 <uxr_receive_reliable_message>
 8014694:	b1d0      	cbz	r0, 80146cc <uxr_create_session+0x168>
 8014696:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d038      	beq.n	8014710 <uxr_create_session+0x1ac>
 801469e:	9f04      	ldr	r7, [sp, #16]
 80146a0:	e00a      	b.n	80146b8 <uxr_create_session+0x154>
 80146a2:	f04f 0302 	mov.w	r3, #2
 80146a6:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 80146aa:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 80146ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146b4:	f7ff fae6 	bl	8013c84 <read_submessage_list>
 80146b8:	a922      	add	r1, sp, #136	; 0x88
 80146ba:	2204      	movs	r2, #4
 80146bc:	4650      	mov	r0, sl
 80146be:	f005 fc43 	bl	8019f48 <uxr_next_input_reliable_buffer_available>
 80146c2:	4603      	mov	r3, r0
 80146c4:	a922      	add	r1, sp, #136	; 0x88
 80146c6:	4620      	mov	r0, r4
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d1ea      	bne.n	80146a2 <uxr_create_session+0x13e>
 80146cc:	4642      	mov	r2, r8
 80146ce:	9904      	ldr	r1, [sp, #16]
 80146d0:	4620      	mov	r0, r4
 80146d2:	f7ff f953 	bl	801397c <write_submessage_acknack.isra.0>
 80146d6:	e779      	b.n	80145cc <uxr_create_session+0x68>
 80146d8:	4641      	mov	r1, r8
 80146da:	4630      	mov	r0, r6
 80146dc:	f000 ff1c 	bl	8015518 <uxr_get_input_best_effort_stream>
 80146e0:	2800      	cmp	r0, #0
 80146e2:	f43f af73 	beq.w	80145cc <uxr_create_session+0x68>
 80146e6:	4659      	mov	r1, fp
 80146e8:	f005 fb22 	bl	8019d30 <uxr_receive_best_effort_message>
 80146ec:	2800      	cmp	r0, #0
 80146ee:	f43f af6d 	beq.w	80145cc <uxr_create_session+0x68>
 80146f2:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 80146f6:	a91a      	add	r1, sp, #104	; 0x68
 80146f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146fa:	4620      	mov	r0, r4
 80146fc:	f7ff fac2 	bl	8013c84 <read_submessage_list>
 8014700:	e764      	b.n	80145cc <uxr_create_session+0x68>
 8014702:	4630      	mov	r0, r6
 8014704:	f000 fe5a 	bl	80153bc <uxr_reset_stream_storage>
 8014708:	2001      	movs	r0, #1
 801470a:	b02b      	add	sp, #172	; 0xac
 801470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014710:	f88d 702a 	strb.w	r7, [sp, #42]	; 0x2a
 8014714:	a91a      	add	r1, sp, #104	; 0x68
 8014716:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014718:	4620      	mov	r0, r4
 801471a:	f7ff fab3 	bl	8013c84 <read_submessage_list>
 801471e:	e7be      	b.n	801469e <uxr_create_session+0x13a>

08014720 <uxr_prepare_stream_to_write_submessage>:
 8014720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014724:	b082      	sub	sp, #8
 8014726:	4604      	mov	r4, r0
 8014728:	4610      	mov	r0, r2
 801472a:	4615      	mov	r5, r2
 801472c:	461e      	mov	r6, r3
 801472e:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 8014732:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8014736:	f105 0904 	add.w	r9, r5, #4
 801473a:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 801473e:	9101      	str	r1, [sp, #4]
 8014740:	f000 ff56 	bl	80155f0 <uxr_submessage_padding>
 8014744:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8014748:	4481      	add	r9, r0
 801474a:	2b01      	cmp	r3, #1
 801474c:	d01d      	beq.n	801478a <uxr_prepare_stream_to_write_submessage+0x6a>
 801474e:	2b02      	cmp	r3, #2
 8014750:	d116      	bne.n	8014780 <uxr_prepare_stream_to_write_submessage+0x60>
 8014752:	f104 0008 	add.w	r0, r4, #8
 8014756:	4651      	mov	r1, sl
 8014758:	f000 fed2 	bl	8015500 <uxr_get_output_reliable_stream>
 801475c:	4604      	mov	r4, r0
 801475e:	b158      	cbz	r0, 8014778 <uxr_prepare_stream_to_write_submessage+0x58>
 8014760:	4649      	mov	r1, r9
 8014762:	4632      	mov	r2, r6
 8014764:	f005 fdb6 	bl	801a2d4 <uxr_prepare_reliable_buffer_to_write>
 8014768:	4604      	mov	r4, r0
 801476a:	b12c      	cbz	r4, 8014778 <uxr_prepare_stream_to_write_submessage+0x58>
 801476c:	4643      	mov	r3, r8
 801476e:	b2aa      	uxth	r2, r5
 8014770:	4639      	mov	r1, r7
 8014772:	4630      	mov	r0, r6
 8014774:	f000 fefc 	bl	8015570 <uxr_buffer_submessage_header>
 8014778:	4620      	mov	r0, r4
 801477a:	b002      	add	sp, #8
 801477c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014780:	2400      	movs	r4, #0
 8014782:	4620      	mov	r0, r4
 8014784:	b002      	add	sp, #8
 8014786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801478a:	f104 0008 	add.w	r0, r4, #8
 801478e:	4651      	mov	r1, sl
 8014790:	f000 feae 	bl	80154f0 <uxr_get_output_best_effort_stream>
 8014794:	4604      	mov	r4, r0
 8014796:	2800      	cmp	r0, #0
 8014798:	d0ee      	beq.n	8014778 <uxr_prepare_stream_to_write_submessage+0x58>
 801479a:	4649      	mov	r1, r9
 801479c:	4632      	mov	r2, r6
 801479e:	f005 fcc3 	bl	801a128 <uxr_prepare_best_effort_buffer_to_write>
 80147a2:	4604      	mov	r4, r0
 80147a4:	e7e1      	b.n	801476a <uxr_prepare_stream_to_write_submessage+0x4a>
 80147a6:	bf00      	nop

080147a8 <uxr_init_session_info>:
 80147a8:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 80147ac:	23ff      	movs	r3, #255	; 0xff
 80147ae:	7102      	strb	r2, [r0, #4]
 80147b0:	f880 c001 	strb.w	ip, [r0, #1]
 80147b4:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80147b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80147bc:	7001      	strb	r1, [r0, #0]
 80147be:	f880 c002 	strb.w	ip, [r0, #2]
 80147c2:	7143      	strb	r3, [r0, #5]
 80147c4:	70c2      	strb	r2, [r0, #3]
 80147c6:	b500      	push	{lr}
 80147c8:	f04f 0e09 	mov.w	lr, #9
 80147cc:	f8a0 e006 	strh.w	lr, [r0, #6]
 80147d0:	f85d fb04 	ldr.w	pc, [sp], #4

080147d4 <uxr_buffer_create_session>:
 80147d4:	b530      	push	{r4, r5, lr}
 80147d6:	2300      	movs	r3, #0
 80147d8:	b089      	sub	sp, #36	; 0x24
 80147da:	4d12      	ldr	r5, [pc, #72]	; (8014824 <uxr_buffer_create_session+0x50>)
 80147dc:	460c      	mov	r4, r1
 80147de:	9307      	str	r3, [sp, #28]
 80147e0:	4619      	mov	r1, r3
 80147e2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80147e6:	2201      	movs	r2, #1
 80147e8:	9301      	str	r3, [sp, #4]
 80147ea:	80c2      	strh	r2, [r0, #6]
 80147ec:	f88d 2004 	strb.w	r2, [sp, #4]
 80147f0:	682a      	ldr	r2, [r5, #0]
 80147f2:	9303      	str	r3, [sp, #12]
 80147f4:	9200      	str	r2, [sp, #0]
 80147f6:	88aa      	ldrh	r2, [r5, #4]
 80147f8:	9306      	str	r3, [sp, #24]
 80147fa:	f8ad 2006 	strh.w	r2, [sp, #6]
 80147fe:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8014802:	9202      	str	r2, [sp, #8]
 8014804:	7802      	ldrb	r2, [r0, #0]
 8014806:	4620      	mov	r0, r4
 8014808:	f88d 200c 	strb.w	r2, [sp, #12]
 801480c:	2210      	movs	r2, #16
 801480e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8014812:	f000 fead 	bl	8015570 <uxr_buffer_submessage_header>
 8014816:	4669      	mov	r1, sp
 8014818:	4620      	mov	r0, r4
 801481a:	f001 ff1f 	bl	801665c <uxr_serialize_CREATE_CLIENT_Payload>
 801481e:	b009      	add	sp, #36	; 0x24
 8014820:	bd30      	pop	{r4, r5, pc}
 8014822:	bf00      	nop
 8014824:	0801c810 	.word	0x0801c810

08014828 <uxr_buffer_delete_session>:
 8014828:	4a0c      	ldr	r2, [pc, #48]	; (801485c <uxr_buffer_delete_session+0x34>)
 801482a:	2302      	movs	r3, #2
 801482c:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8014830:	b510      	push	{r4, lr}
 8014832:	460c      	mov	r4, r1
 8014834:	b082      	sub	sp, #8
 8014836:	8911      	ldrh	r1, [r2, #8]
 8014838:	2204      	movs	r2, #4
 801483a:	80c3      	strh	r3, [r0, #6]
 801483c:	2300      	movs	r3, #0
 801483e:	f8ad 1006 	strh.w	r1, [sp, #6]
 8014842:	4620      	mov	r0, r4
 8014844:	2103      	movs	r1, #3
 8014846:	f8ad c004 	strh.w	ip, [sp, #4]
 801484a:	f000 fe91 	bl	8015570 <uxr_buffer_submessage_header>
 801484e:	a901      	add	r1, sp, #4
 8014850:	4620      	mov	r0, r4
 8014852:	f001 ffab 	bl	80167ac <uxr_serialize_DELETE_Payload>
 8014856:	b002      	add	sp, #8
 8014858:	bd10      	pop	{r4, pc}
 801485a:	bf00      	nop
 801485c:	0801c810 	.word	0x0801c810

08014860 <uxr_read_create_session_status>:
 8014860:	b510      	push	{r4, lr}
 8014862:	460b      	mov	r3, r1
 8014864:	b088      	sub	sp, #32
 8014866:	4604      	mov	r4, r0
 8014868:	a901      	add	r1, sp, #4
 801486a:	4618      	mov	r0, r3
 801486c:	f001 ffae 	bl	80167cc <uxr_deserialize_STATUS_AGENT_Payload>
 8014870:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8014874:	7163      	strb	r3, [r4, #5]
 8014876:	b008      	add	sp, #32
 8014878:	bd10      	pop	{r4, pc}
 801487a:	bf00      	nop

0801487c <uxr_read_delete_session_status>:
 801487c:	b510      	push	{r4, lr}
 801487e:	b084      	sub	sp, #16
 8014880:	4604      	mov	r4, r0
 8014882:	4608      	mov	r0, r1
 8014884:	a902      	add	r1, sp, #8
 8014886:	f001 ffd1 	bl	801682c <uxr_deserialize_STATUS_Payload>
 801488a:	88e3      	ldrh	r3, [r4, #6]
 801488c:	2b02      	cmp	r3, #2
 801488e:	d001      	beq.n	8014894 <uxr_read_delete_session_status+0x18>
 8014890:	b004      	add	sp, #16
 8014892:	bd10      	pop	{r4, pc}
 8014894:	f10d 000a 	add.w	r0, sp, #10
 8014898:	f7fe fec6 	bl	8013628 <uxr_object_id_from_raw>
 801489c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80148a0:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80148a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	2b02      	cmp	r3, #2
 80148ac:	d1f0      	bne.n	8014890 <uxr_read_delete_session_status+0x14>
 80148ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80148b2:	7163      	strb	r3, [r4, #5]
 80148b4:	e7ec      	b.n	8014890 <uxr_read_delete_session_status+0x14>
 80148b6:	bf00      	nop

080148b8 <uxr_stamp_create_session_header>:
 80148b8:	b510      	push	{r4, lr}
 80148ba:	2208      	movs	r2, #8
 80148bc:	b08a      	sub	sp, #40	; 0x28
 80148be:	4604      	mov	r4, r0
 80148c0:	eb0d 0002 	add.w	r0, sp, r2
 80148c4:	f7fa f904 	bl	800ead0 <ucdr_init_buffer>
 80148c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148cc:	2300      	movs	r3, #0
 80148ce:	a802      	add	r0, sp, #8
 80148d0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80148d4:	9400      	str	r4, [sp, #0]
 80148d6:	461a      	mov	r2, r3
 80148d8:	f001 f846 	bl	8015968 <uxr_serialize_message_header>
 80148dc:	b00a      	add	sp, #40	; 0x28
 80148de:	bd10      	pop	{r4, pc}

080148e0 <uxr_stamp_session_header>:
 80148e0:	b530      	push	{r4, r5, lr}
 80148e2:	b08d      	sub	sp, #52	; 0x34
 80148e4:	4604      	mov	r4, r0
 80148e6:	460d      	mov	r5, r1
 80148e8:	4619      	mov	r1, r3
 80148ea:	a804      	add	r0, sp, #16
 80148ec:	9203      	str	r2, [sp, #12]
 80148ee:	2208      	movs	r2, #8
 80148f0:	f7fa f8ee 	bl	800ead0 <ucdr_init_buffer>
 80148f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80148f8:	9b03      	ldr	r3, [sp, #12]
 80148fa:	462a      	mov	r2, r5
 80148fc:	a804      	add	r0, sp, #16
 80148fe:	9400      	str	r4, [sp, #0]
 8014900:	f001 f832 	bl	8015968 <uxr_serialize_message_header>
 8014904:	b00d      	add	sp, #52	; 0x34
 8014906:	bd30      	pop	{r4, r5, pc}

08014908 <uxr_read_session_header>:
 8014908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801490c:	4607      	mov	r7, r0
 801490e:	b084      	sub	sp, #16
 8014910:	4608      	mov	r0, r1
 8014912:	460c      	mov	r4, r1
 8014914:	4615      	mov	r5, r2
 8014916:	461e      	mov	r6, r3
 8014918:	f7fa f90c 	bl	800eb34 <ucdr_buffer_remaining>
 801491c:	2808      	cmp	r0, #8
 801491e:	d803      	bhi.n	8014928 <uxr_read_session_header+0x20>
 8014920:	2000      	movs	r0, #0
 8014922:	b004      	add	sp, #16
 8014924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014928:	f10d 080c 	add.w	r8, sp, #12
 801492c:	4633      	mov	r3, r6
 801492e:	462a      	mov	r2, r5
 8014930:	4620      	mov	r0, r4
 8014932:	f10d 010b 	add.w	r1, sp, #11
 8014936:	f8cd 8000 	str.w	r8, [sp]
 801493a:	f001 f833 	bl	80159a4 <uxr_deserialize_message_header>
 801493e:	783a      	ldrb	r2, [r7, #0]
 8014940:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8014944:	4293      	cmp	r3, r2
 8014946:	d1eb      	bne.n	8014920 <uxr_read_session_header+0x18>
 8014948:	061b      	lsls	r3, r3, #24
 801494a:	d41b      	bmi.n	8014984 <uxr_read_session_header+0x7c>
 801494c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8014950:	787b      	ldrb	r3, [r7, #1]
 8014952:	429a      	cmp	r2, r3
 8014954:	d003      	beq.n	801495e <uxr_read_session_header+0x56>
 8014956:	2001      	movs	r0, #1
 8014958:	f080 0001 	eor.w	r0, r0, #1
 801495c:	e7e1      	b.n	8014922 <uxr_read_session_header+0x1a>
 801495e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8014962:	1cb8      	adds	r0, r7, #2
 8014964:	78bb      	ldrb	r3, [r7, #2]
 8014966:	429a      	cmp	r2, r3
 8014968:	d1f5      	bne.n	8014956 <uxr_read_session_header+0x4e>
 801496a:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801496e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8014972:	429a      	cmp	r2, r3
 8014974:	d1ef      	bne.n	8014956 <uxr_read_session_header+0x4e>
 8014976:	f89d 200f 	ldrb.w	r2, [sp, #15]
 801497a:	7843      	ldrb	r3, [r0, #1]
 801497c:	429a      	cmp	r2, r3
 801497e:	d1ea      	bne.n	8014956 <uxr_read_session_header+0x4e>
 8014980:	2000      	movs	r0, #0
 8014982:	e7e9      	b.n	8014958 <uxr_read_session_header+0x50>
 8014984:	2001      	movs	r0, #1
 8014986:	e7cc      	b.n	8014922 <uxr_read_session_header+0x1a>

08014988 <uxr_session_header_offset>:
 8014988:	f990 3000 	ldrsb.w	r3, [r0]
 801498c:	2b00      	cmp	r3, #0
 801498e:	bfac      	ite	ge
 8014990:	2008      	movge	r0, #8
 8014992:	2004      	movlt	r0, #4
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop

08014998 <uxr_init_base_object_request>:
 8014998:	b510      	push	{r4, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 80149a0:	9101      	str	r1, [sp, #4]
 80149a2:	88c3      	ldrh	r3, [r0, #6]
 80149a4:	f1a3 010a 	sub.w	r1, r3, #10
 80149a8:	b289      	uxth	r1, r1
 80149aa:	42a1      	cmp	r1, r4
 80149ac:	d80f      	bhi.n	80149ce <uxr_init_base_object_request+0x36>
 80149ae:	3301      	adds	r3, #1
 80149b0:	b29c      	uxth	r4, r3
 80149b2:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80149b6:	b2db      	uxtb	r3, r3
 80149b8:	80c4      	strh	r4, [r0, #6]
 80149ba:	1c91      	adds	r1, r2, #2
 80149bc:	9801      	ldr	r0, [sp, #4]
 80149be:	f882 c000 	strb.w	ip, [r2]
 80149c2:	7053      	strb	r3, [r2, #1]
 80149c4:	f7fe fe44 	bl	8013650 <uxr_object_id_to_raw>
 80149c8:	4620      	mov	r0, r4
 80149ca:	b002      	add	sp, #8
 80149cc:	bd10      	pop	{r4, pc}
 80149ce:	230a      	movs	r3, #10
 80149d0:	f04f 0c00 	mov.w	ip, #0
 80149d4:	461c      	mov	r4, r3
 80149d6:	e7ef      	b.n	80149b8 <uxr_init_base_object_request+0x20>

080149d8 <uxr_parse_base_object_request>:
 80149d8:	b570      	push	{r4, r5, r6, lr}
 80149da:	4604      	mov	r4, r0
 80149dc:	3002      	adds	r0, #2
 80149de:	460d      	mov	r5, r1
 80149e0:	4616      	mov	r6, r2
 80149e2:	f7fe fe21 	bl	8013628 <uxr_object_id_from_raw>
 80149e6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80149ea:	8028      	strh	r0, [r5, #0]
 80149ec:	806b      	strh	r3, [r5, #2]
 80149ee:	7822      	ldrb	r2, [r4, #0]
 80149f0:	7863      	ldrb	r3, [r4, #1]
 80149f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80149f6:	8033      	strh	r3, [r6, #0]
 80149f8:	bd70      	pop	{r4, r5, r6, pc}
 80149fa:	bf00      	nop

080149fc <uxr_init_framing_io>:
 80149fc:	2300      	movs	r3, #0
 80149fe:	7041      	strb	r1, [r0, #1]
 8014a00:	7003      	strb	r3, [r0, #0]
 8014a02:	8583      	strh	r3, [r0, #44]	; 0x2c
 8014a04:	4770      	bx	lr
 8014a06:	bf00      	nop

08014a08 <uxr_write_framed_msg>:
 8014a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a0c:	4617      	mov	r7, r2
 8014a0e:	7842      	ldrb	r2, [r0, #1]
 8014a10:	460e      	mov	r6, r1
 8014a12:	b083      	sub	sp, #12
 8014a14:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8014a18:	469b      	mov	fp, r3
 8014a1a:	237e      	movs	r3, #126	; 0x7e
 8014a1c:	4604      	mov	r4, r0
 8014a1e:	2901      	cmp	r1, #1
 8014a20:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8014a24:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014a28:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8014a2c:	f240 8115 	bls.w	8014c5a <uxr_write_framed_msg+0x252>
 8014a30:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8014a34:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8014a38:	2202      	movs	r2, #2
 8014a3a:	2901      	cmp	r1, #1
 8014a3c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014a40:	d952      	bls.n	8014ae8 <uxr_write_framed_msg+0xe0>
 8014a42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a44:	2103      	movs	r1, #3
 8014a46:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8014a4a:	b2dd      	uxtb	r5, r3
 8014a4c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8014a50:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8014a54:	2a01      	cmp	r2, #1
 8014a56:	d95c      	bls.n	8014b12 <uxr_write_framed_msg+0x10a>
 8014a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a5a:	1862      	adds	r2, r4, r1
 8014a5c:	3101      	adds	r1, #1
 8014a5e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8014a62:	f882 5038 	strb.w	r5, [r2, #56]	; 0x38
 8014a66:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8014a6a:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8014a6e:	2a01      	cmp	r2, #1
 8014a70:	d961      	bls.n	8014b36 <uxr_write_framed_msg+0x12e>
 8014a72:	1c4a      	adds	r2, r1, #1
 8014a74:	4421      	add	r1, r4
 8014a76:	b2d2      	uxtb	r2, r2
 8014a78:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8014a7c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d06a      	beq.n	8014b5a <uxr_write_framed_msg+0x152>
 8014a84:	f04f 0800 	mov.w	r8, #0
 8014a88:	46c1      	mov	r9, r8
 8014a8a:	e016      	b.n	8014aba <uxr_write_framed_msg+0xb2>
 8014a8c:	2a29      	cmp	r2, #41	; 0x29
 8014a8e:	d868      	bhi.n	8014b62 <uxr_write_framed_msg+0x15a>
 8014a90:	18a0      	adds	r0, r4, r2
 8014a92:	3201      	adds	r2, #1
 8014a94:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8014a98:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014a9c:	ea88 0101 	eor.w	r1, r8, r1
 8014aa0:	4b7d      	ldr	r3, [pc, #500]	; (8014c98 <uxr_write_framed_msg+0x290>)
 8014aa2:	f109 0901 	add.w	r9, r9, #1
 8014aa6:	b2c9      	uxtb	r1, r1
 8014aa8:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8014aac:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8014ab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014ab2:	454b      	cmp	r3, r9
 8014ab4:	d969      	bls.n	8014b8a <uxr_write_framed_msg+0x182>
 8014ab6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014aba:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8014abe:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8014ac2:	2801      	cmp	r0, #1
 8014ac4:	d8e2      	bhi.n	8014a8c <uxr_write_framed_msg+0x84>
 8014ac6:	1c50      	adds	r0, r2, #1
 8014ac8:	b2c0      	uxtb	r0, r0
 8014aca:	2829      	cmp	r0, #41	; 0x29
 8014acc:	d849      	bhi.n	8014b62 <uxr_write_framed_msg+0x15a>
 8014ace:	18a0      	adds	r0, r4, r2
 8014ad0:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8014ad4:	3202      	adds	r2, #2
 8014ad6:	f081 0520 	eor.w	r5, r1, #32
 8014ada:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8014ade:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8014ae2:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014ae6:	e7d9      	b.n	8014a9c <uxr_write_framed_msg+0x94>
 8014ae8:	2104      	movs	r1, #4
 8014aea:	f04f 0c03 	mov.w	ip, #3
 8014aee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014af0:	4422      	add	r2, r4
 8014af2:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8014af6:	44a4      	add	ip, r4
 8014af8:	b2dd      	uxtb	r5, r3
 8014afa:	f080 0020 	eor.w	r0, r0, #32
 8014afe:	f882 e038 	strb.w	lr, [r2, #56]	; 0x38
 8014b02:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8014b06:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8014b0a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8014b0e:	2a01      	cmp	r2, #1
 8014b10:	d8a2      	bhi.n	8014a58 <uxr_write_framed_msg+0x50>
 8014b12:	1862      	adds	r2, r4, r1
 8014b14:	207d      	movs	r0, #125	; 0x7d
 8014b16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014b18:	f085 0520 	eor.w	r5, r5, #32
 8014b1c:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38
 8014b20:	3102      	adds	r1, #2
 8014b22:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8014b26:	f882 5039 	strb.w	r5, [r2, #57]	; 0x39
 8014b2a:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8014b2e:	f1a0 027d 	sub.w	r2, r0, #125	; 0x7d
 8014b32:	2a01      	cmp	r2, #1
 8014b34:	d89d      	bhi.n	8014a72 <uxr_write_framed_msg+0x6a>
 8014b36:	1c4d      	adds	r5, r1, #1
 8014b38:	1c8a      	adds	r2, r1, #2
 8014b3a:	f080 0020 	eor.w	r0, r0, #32
 8014b3e:	4421      	add	r1, r4
 8014b40:	fa54 f585 	uxtab	r5, r4, r5
 8014b44:	b2d2      	uxtb	r2, r2
 8014b46:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8014b4a:	f881 c038 	strb.w	ip, [r1, #56]	; 0x38
 8014b4e:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
 8014b52:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d194      	bne.n	8014a84 <uxr_write_framed_msg+0x7c>
 8014b5a:	4619      	mov	r1, r3
 8014b5c:	f8ad 3004 	strh.w	r3, [sp, #4]
 8014b60:	e019      	b.n	8014b96 <uxr_write_framed_msg+0x18e>
 8014b62:	2500      	movs	r5, #0
 8014b64:	e000      	b.n	8014b68 <uxr_write_framed_msg+0x160>
 8014b66:	b160      	cbz	r0, 8014b82 <uxr_write_framed_msg+0x17a>
 8014b68:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014b6c:	1b52      	subs	r2, r2, r5
 8014b6e:	4653      	mov	r3, sl
 8014b70:	4638      	mov	r0, r7
 8014b72:	4421      	add	r1, r4
 8014b74:	47b0      	blx	r6
 8014b76:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014b7a:	4405      	add	r5, r0
 8014b7c:	4295      	cmp	r5, r2
 8014b7e:	d3f2      	bcc.n	8014b66 <uxr_write_framed_msg+0x15e>
 8014b80:	d066      	beq.n	8014c50 <uxr_write_framed_msg+0x248>
 8014b82:	2000      	movs	r0, #0
 8014b84:	b003      	add	sp, #12
 8014b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b8a:	fa5f f188 	uxtb.w	r1, r8
 8014b8e:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014b92:	f8ad 8004 	strh.w	r8, [sp, #4]
 8014b96:	f04f 0900 	mov.w	r9, #0
 8014b9a:	f04f 0b7d 	mov.w	fp, #125	; 0x7d
 8014b9e:	46c8      	mov	r8, r9
 8014ba0:	e013      	b.n	8014bca <uxr_write_framed_msg+0x1c2>
 8014ba2:	2a29      	cmp	r2, #41	; 0x29
 8014ba4:	d824      	bhi.n	8014bf0 <uxr_write_framed_msg+0x1e8>
 8014ba6:	18a3      	adds	r3, r4, r2
 8014ba8:	3201      	adds	r2, #1
 8014baa:	f883 1038 	strb.w	r1, [r3, #56]	; 0x38
 8014bae:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014bb2:	f109 0901 	add.w	r9, r9, #1
 8014bb6:	f1b9 0f02 	cmp.w	r9, #2
 8014bba:	d02d      	beq.n	8014c18 <uxr_write_framed_msg+0x210>
 8014bbc:	f109 0308 	add.w	r3, r9, #8
 8014bc0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014bc4:	446b      	add	r3, sp
 8014bc6:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8014bca:	f1a1 037d 	sub.w	r3, r1, #125	; 0x7d
 8014bce:	2b01      	cmp	r3, #1
 8014bd0:	d8e7      	bhi.n	8014ba2 <uxr_write_framed_msg+0x19a>
 8014bd2:	1c53      	adds	r3, r2, #1
 8014bd4:	b2db      	uxtb	r3, r3
 8014bd6:	2b29      	cmp	r3, #41	; 0x29
 8014bd8:	d80a      	bhi.n	8014bf0 <uxr_write_framed_msg+0x1e8>
 8014bda:	18a3      	adds	r3, r4, r2
 8014bdc:	f081 0120 	eor.w	r1, r1, #32
 8014be0:	3202      	adds	r2, #2
 8014be2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
 8014be6:	f883 b038 	strb.w	fp, [r3, #56]	; 0x38
 8014bea:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014bee:	e7e0      	b.n	8014bb2 <uxr_write_framed_msg+0x1aa>
 8014bf0:	2500      	movs	r5, #0
 8014bf2:	e001      	b.n	8014bf8 <uxr_write_framed_msg+0x1f0>
 8014bf4:	2800      	cmp	r0, #0
 8014bf6:	d0c4      	beq.n	8014b82 <uxr_write_framed_msg+0x17a>
 8014bf8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014bfc:	1b52      	subs	r2, r2, r5
 8014bfe:	4653      	mov	r3, sl
 8014c00:	4638      	mov	r0, r7
 8014c02:	4421      	add	r1, r4
 8014c04:	47b0      	blx	r6
 8014c06:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014c0a:	4405      	add	r5, r0
 8014c0c:	4295      	cmp	r5, r2
 8014c0e:	d3f1      	bcc.n	8014bf4 <uxr_write_framed_msg+0x1ec>
 8014c10:	d1b7      	bne.n	8014b82 <uxr_write_framed_msg+0x17a>
 8014c12:	f884 8062 	strb.w	r8, [r4, #98]	; 0x62
 8014c16:	e7d1      	b.n	8014bbc <uxr_write_framed_msg+0x1b4>
 8014c18:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014c1c:	b19a      	cbz	r2, 8014c46 <uxr_write_framed_msg+0x23e>
 8014c1e:	2500      	movs	r5, #0
 8014c20:	e001      	b.n	8014c26 <uxr_write_framed_msg+0x21e>
 8014c22:	2800      	cmp	r0, #0
 8014c24:	d0ad      	beq.n	8014b82 <uxr_write_framed_msg+0x17a>
 8014c26:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8014c2a:	1b52      	subs	r2, r2, r5
 8014c2c:	4653      	mov	r3, sl
 8014c2e:	4638      	mov	r0, r7
 8014c30:	4421      	add	r1, r4
 8014c32:	47b0      	blx	r6
 8014c34:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8014c38:	4405      	add	r5, r0
 8014c3a:	4295      	cmp	r5, r2
 8014c3c:	d3f1      	bcc.n	8014c22 <uxr_write_framed_msg+0x21a>
 8014c3e:	d1a0      	bne.n	8014b82 <uxr_write_framed_msg+0x17a>
 8014c40:	2300      	movs	r3, #0
 8014c42:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014c46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c48:	b298      	uxth	r0, r3
 8014c4a:	b003      	add	sp, #12
 8014c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c50:	f04f 0300 	mov.w	r3, #0
 8014c54:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8014c58:	e72a      	b.n	8014ab0 <uxr_write_framed_msg+0xa8>
 8014c5a:	217d      	movs	r1, #125	; 0x7d
 8014c5c:	f082 0220 	eor.w	r2, r2, #32
 8014c60:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8014c64:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8014c68:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8014c6c:	2203      	movs	r2, #3
 8014c6e:	2901      	cmp	r1, #1
 8014c70:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8014c74:	d803      	bhi.n	8014c7e <uxr_write_framed_msg+0x276>
 8014c76:	2105      	movs	r1, #5
 8014c78:	f04f 0c04 	mov.w	ip, #4
 8014c7c:	e737      	b.n	8014aee <uxr_write_framed_msg+0xe6>
 8014c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014c80:	2104      	movs	r1, #4
 8014c82:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8014c86:	b2dd      	uxtb	r5, r3
 8014c88:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
 8014c8c:	f1a5 027d 	sub.w	r2, r5, #125	; 0x7d
 8014c90:	2a01      	cmp	r2, #1
 8014c92:	f63f aee1 	bhi.w	8014a58 <uxr_write_framed_msg+0x50>
 8014c96:	e73c      	b.n	8014b12 <uxr_write_framed_msg+0x10a>
 8014c98:	0801d60c 	.word	0x0801d60c

08014c9c <uxr_framing_read_transport>:
 8014c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca0:	4604      	mov	r4, r0
 8014ca2:	b085      	sub	sp, #20
 8014ca4:	4692      	mov	sl, r2
 8014ca6:	4689      	mov	r9, r1
 8014ca8:	461d      	mov	r5, r3
 8014caa:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8014cac:	f000 fca6 	bl	80155fc <uxr_millis>
 8014cb0:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8014cb4:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
 8014cb8:	4680      	mov	r8, r0
 8014cba:	42ba      	cmp	r2, r7
 8014cbc:	d05f      	beq.n	8014d7e <uxr_framing_read_transport+0xe2>
 8014cbe:	d817      	bhi.n	8014cf0 <uxr_framing_read_transport+0x54>
 8014cc0:	3f01      	subs	r7, #1
 8014cc2:	1aba      	subs	r2, r7, r2
 8014cc4:	2700      	movs	r7, #0
 8014cc6:	b2d2      	uxtb	r2, r2
 8014cc8:	42b2      	cmp	r2, r6
 8014cca:	d81a      	bhi.n	8014d02 <uxr_framing_read_transport+0x66>
 8014ccc:	19d3      	adds	r3, r2, r7
 8014cce:	42b3      	cmp	r3, r6
 8014cd0:	d852      	bhi.n	8014d78 <uxr_framing_read_transport+0xdc>
 8014cd2:	b9d2      	cbnz	r2, 8014d0a <uxr_framing_read_transport+0x6e>
 8014cd4:	2600      	movs	r6, #0
 8014cd6:	f000 fc91 	bl	80155fc <uxr_millis>
 8014cda:	682b      	ldr	r3, [r5, #0]
 8014cdc:	eba0 0008 	sub.w	r0, r0, r8
 8014ce0:	1a1b      	subs	r3, r3, r0
 8014ce2:	4630      	mov	r0, r6
 8014ce4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014ce8:	602b      	str	r3, [r5, #0]
 8014cea:	b005      	add	sp, #20
 8014cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014cf0:	2f00      	cmp	r7, #0
 8014cf2:	d060      	beq.n	8014db6 <uxr_framing_read_transport+0x11a>
 8014cf4:	f1c2 022a 	rsb	r2, r2, #42	; 0x2a
 8014cf8:	3f01      	subs	r7, #1
 8014cfa:	b2d2      	uxtb	r2, r2
 8014cfc:	b2ff      	uxtb	r7, r7
 8014cfe:	42b2      	cmp	r2, r6
 8014d00:	d9e4      	bls.n	8014ccc <uxr_framing_read_transport+0x30>
 8014d02:	b2f2      	uxtb	r2, r6
 8014d04:	2700      	movs	r7, #0
 8014d06:	2a00      	cmp	r2, #0
 8014d08:	d0e4      	beq.n	8014cd4 <uxr_framing_read_transport+0x38>
 8014d0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d0c:	4650      	mov	r0, sl
 8014d0e:	9203      	str	r2, [sp, #12]
 8014d10:	9300      	str	r3, [sp, #0]
 8014d12:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014d16:	682b      	ldr	r3, [r5, #0]
 8014d18:	3102      	adds	r1, #2
 8014d1a:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 8014dc0 <uxr_framing_read_transport+0x124>
 8014d1e:	4421      	add	r1, r4
 8014d20:	47c8      	blx	r9
 8014d22:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014d26:	4606      	mov	r6, r0
 8014d28:	4403      	add	r3, r0
 8014d2a:	0859      	lsrs	r1, r3, #1
 8014d2c:	fbab 2101 	umull	r2, r1, fp, r1
 8014d30:	222a      	movs	r2, #42	; 0x2a
 8014d32:	0889      	lsrs	r1, r1, #2
 8014d34:	fb02 3111 	mls	r1, r2, r1, r3
 8014d38:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8014d3c:	2800      	cmp	r0, #0
 8014d3e:	d0c9      	beq.n	8014cd4 <uxr_framing_read_transport+0x38>
 8014d40:	9a03      	ldr	r2, [sp, #12]
 8014d42:	4290      	cmp	r0, r2
 8014d44:	d1c7      	bne.n	8014cd6 <uxr_framing_read_transport+0x3a>
 8014d46:	2f00      	cmp	r7, #0
 8014d48:	d0c5      	beq.n	8014cd6 <uxr_framing_read_transport+0x3a>
 8014d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d4c:	3102      	adds	r1, #2
 8014d4e:	463a      	mov	r2, r7
 8014d50:	4650      	mov	r0, sl
 8014d52:	4421      	add	r1, r4
 8014d54:	9300      	str	r3, [sp, #0]
 8014d56:	2300      	movs	r3, #0
 8014d58:	47c8      	blx	r9
 8014d5a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8014d5e:	4406      	add	r6, r0
 8014d60:	1813      	adds	r3, r2, r0
 8014d62:	085a      	lsrs	r2, r3, #1
 8014d64:	fbab 1b02 	umull	r1, fp, fp, r2
 8014d68:	222a      	movs	r2, #42	; 0x2a
 8014d6a:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8014d6e:	fb02 331b 	mls	r3, r2, fp, r3
 8014d72:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8014d76:	e7ae      	b.n	8014cd6 <uxr_framing_read_transport+0x3a>
 8014d78:	1ab6      	subs	r6, r6, r2
 8014d7a:	b2f7      	uxtb	r7, r6
 8014d7c:	e7a9      	b.n	8014cd2 <uxr_framing_read_transport+0x36>
 8014d7e:	2300      	movs	r3, #0
 8014d80:	2e28      	cmp	r6, #40	; 0x28
 8014d82:	85a3      	strh	r3, [r4, #44]	; 0x2c
 8014d84:	d9bd      	bls.n	8014d02 <uxr_framing_read_transport+0x66>
 8014d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014d88:	2229      	movs	r2, #41	; 0x29
 8014d8a:	1ca1      	adds	r1, r4, #2
 8014d8c:	4650      	mov	r0, sl
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	682b      	ldr	r3, [r5, #0]
 8014d92:	47c8      	blx	r9
 8014d94:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8014d98:	4606      	mov	r6, r0
 8014d9a:	212a      	movs	r1, #42	; 0x2a
 8014d9c:	4403      	add	r3, r0
 8014d9e:	4808      	ldr	r0, [pc, #32]	; (8014dc0 <uxr_framing_read_transport+0x124>)
 8014da0:	085a      	lsrs	r2, r3, #1
 8014da2:	fba0 0202 	umull	r0, r2, r0, r2
 8014da6:	0892      	lsrs	r2, r2, #2
 8014da8:	fb01 3312 	mls	r3, r1, r2, r3
 8014dac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8014db0:	2e00      	cmp	r6, #0
 8014db2:	d08f      	beq.n	8014cd4 <uxr_framing_read_transport+0x38>
 8014db4:	e78f      	b.n	8014cd6 <uxr_framing_read_transport+0x3a>
 8014db6:	f1c2 0229 	rsb	r2, r2, #41	; 0x29
 8014dba:	b2d2      	uxtb	r2, r2
 8014dbc:	e784      	b.n	8014cc8 <uxr_framing_read_transport+0x2c>
 8014dbe:	bf00      	nop
 8014dc0:	30c30c31 	.word	0x30c30c31

08014dc4 <uxr_read_framed_msg>:
 8014dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dc8:	461e      	mov	r6, r3
 8014dca:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8014dce:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8014dd2:	b083      	sub	sp, #12
 8014dd4:	4604      	mov	r4, r0
 8014dd6:	4688      	mov	r8, r1
 8014dd8:	429d      	cmp	r5, r3
 8014dda:	4691      	mov	r9, r2
 8014ddc:	f000 818c 	beq.w	80150f8 <uxr_read_framed_msg+0x334>
 8014de0:	7823      	ldrb	r3, [r4, #0]
 8014de2:	4dc3      	ldr	r5, [pc, #780]	; (80150f0 <uxr_read_framed_msg+0x32c>)
 8014de4:	4fc3      	ldr	r7, [pc, #780]	; (80150f4 <uxr_read_framed_msg+0x330>)
 8014de6:	2b07      	cmp	r3, #7
 8014de8:	d8fd      	bhi.n	8014de6 <uxr_read_framed_msg+0x22>
 8014dea:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014dee:	011c      	.short	0x011c
 8014df0:	00d900fb 	.word	0x00d900fb
 8014df4:	008f00ba 	.word	0x008f00ba
 8014df8:	00320051 	.word	0x00320051
 8014dfc:	0008      	.short	0x0008
 8014dfe:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014e02:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014e06:	4299      	cmp	r1, r3
 8014e08:	f000 814d 	beq.w	80150a6 <uxr_read_framed_msg+0x2e2>
 8014e0c:	18e2      	adds	r2, r4, r3
 8014e0e:	7892      	ldrb	r2, [r2, #2]
 8014e10:	2a7d      	cmp	r2, #125	; 0x7d
 8014e12:	f000 81b8 	beq.w	8015186 <uxr_read_framed_msg+0x3c2>
 8014e16:	3301      	adds	r3, #1
 8014e18:	212a      	movs	r1, #42	; 0x2a
 8014e1a:	2a7e      	cmp	r2, #126	; 0x7e
 8014e1c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8014e20:	fba5 c000 	umull	ip, r0, r5, r0
 8014e24:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8014e28:	fb01 3310 	mls	r3, r1, r0, r3
 8014e2c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014e30:	f000 8257 	beq.w	80152e2 <uxr_read_framed_msg+0x51e>
 8014e34:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014e36:	2000      	movs	r0, #0
 8014e38:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8014e3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8014e3e:	7020      	strb	r0, [r4, #0]
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	4299      	cmp	r1, r3
 8014e44:	86a3      	strh	r3, [r4, #52]	; 0x34
 8014e46:	f000 8178 	beq.w	801513a <uxr_read_framed_msg+0x376>
 8014e4a:	2000      	movs	r0, #0
 8014e4c:	b003      	add	sp, #12
 8014e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e52:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014e56:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014e5a:	4298      	cmp	r0, r3
 8014e5c:	f000 8132 	beq.w	80150c4 <uxr_read_framed_msg+0x300>
 8014e60:	18e2      	adds	r2, r4, r3
 8014e62:	7891      	ldrb	r1, [r2, #2]
 8014e64:	297d      	cmp	r1, #125	; 0x7d
 8014e66:	f000 8170 	beq.w	801514a <uxr_read_framed_msg+0x386>
 8014e6a:	3301      	adds	r3, #1
 8014e6c:	202a      	movs	r0, #42	; 0x2a
 8014e6e:	297e      	cmp	r1, #126	; 0x7e
 8014e70:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8014e74:	fba5 c202 	umull	ip, r2, r5, r2
 8014e78:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014e7c:	fb00 3312 	mls	r3, r0, r2, r3
 8014e80:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014e84:	f000 821d 	beq.w	80152c2 <uxr_read_framed_msg+0x4fe>
 8014e88:	2307      	movs	r3, #7
 8014e8a:	86a1      	strh	r1, [r4, #52]	; 0x34
 8014e8c:	7023      	strb	r3, [r4, #0]
 8014e8e:	e7aa      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 8014e90:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8014e92:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8014e96:	459e      	cmp	lr, r3
 8014e98:	d827      	bhi.n	8014eea <uxr_read_framed_msg+0x126>
 8014e9a:	e032      	b.n	8014f02 <uxr_read_framed_msg+0x13e>
 8014e9c:	fba5 b101 	umull	fp, r1, r5, r1
 8014ea0:	f89c c002 	ldrb.w	ip, [ip, #2]
 8014ea4:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8014ea8:	0889      	lsrs	r1, r1, #2
 8014eaa:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8014eae:	fb0b 0111 	mls	r1, fp, r1, r0
 8014eb2:	f000 80d4 	beq.w	801505e <uxr_read_framed_msg+0x29a>
 8014eb6:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8014eba:	f884 102d 	strb.w	r1, [r4, #45]	; 0x2d
 8014ebe:	f000 80cb 	beq.w	8015058 <uxr_read_framed_msg+0x294>
 8014ec2:	f806 c003 	strb.w	ip, [r6, r3]
 8014ec6:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8014ec8:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8014eca:	ea80 010c 	eor.w	r1, r0, ip
 8014ece:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8014ed2:	3301      	adds	r3, #1
 8014ed4:	b2c9      	uxtb	r1, r1
 8014ed6:	b29b      	uxth	r3, r3
 8014ed8:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8014edc:	4573      	cmp	r3, lr
 8014ede:	8663      	strh	r3, [r4, #50]	; 0x32
 8014ee0:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8014ee4:	86e2      	strh	r2, [r4, #54]	; 0x36
 8014ee6:	f080 811d 	bcs.w	8015124 <uxr_read_framed_msg+0x360>
 8014eea:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014eee:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8014ef2:	1c50      	adds	r0, r2, #1
 8014ef4:	eb04 0c02 	add.w	ip, r4, r2
 8014ef8:	4592      	cmp	sl, r2
 8014efa:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8014efe:	d1cd      	bne.n	8014e9c <uxr_read_framed_msg+0xd8>
 8014f00:	459e      	cmp	lr, r3
 8014f02:	f040 8114 	bne.w	801512e <uxr_read_framed_msg+0x36a>
 8014f06:	2306      	movs	r3, #6
 8014f08:	7023      	strb	r3, [r4, #0]
 8014f0a:	e76c      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 8014f0c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014f10:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014f14:	4298      	cmp	r0, r3
 8014f16:	f000 80c6 	beq.w	80150a6 <uxr_read_framed_msg+0x2e2>
 8014f1a:	18e2      	adds	r2, r4, r3
 8014f1c:	7891      	ldrb	r1, [r2, #2]
 8014f1e:	297d      	cmp	r1, #125	; 0x7d
 8014f20:	f000 8193 	beq.w	801524a <uxr_read_framed_msg+0x486>
 8014f24:	3301      	adds	r3, #1
 8014f26:	202a      	movs	r0, #42	; 0x2a
 8014f28:	297e      	cmp	r1, #126	; 0x7e
 8014f2a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8014f2e:	fba5 c202 	umull	ip, r2, r5, r2
 8014f32:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014f36:	fb00 3312 	mls	r3, r0, r2, r3
 8014f3a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014f3e:	f000 81d0 	beq.w	80152e2 <uxr_read_framed_msg+0x51e>
 8014f42:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8014f44:	2000      	movs	r0, #0
 8014f46:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8014f4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014f4c:	8660      	strh	r0, [r4, #50]	; 0x32
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	86e0      	strh	r0, [r4, #54]	; 0x36
 8014f52:	428b      	cmp	r3, r1
 8014f54:	8623      	strh	r3, [r4, #48]	; 0x30
 8014f56:	f240 80e2 	bls.w	801511e <uxr_read_framed_msg+0x35a>
 8014f5a:	7020      	strb	r0, [r4, #0]
 8014f5c:	b003      	add	sp, #12
 8014f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f62:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014f66:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014f6a:	4298      	cmp	r0, r3
 8014f6c:	f000 80aa 	beq.w	80150c4 <uxr_read_framed_msg+0x300>
 8014f70:	18e2      	adds	r2, r4, r3
 8014f72:	7891      	ldrb	r1, [r2, #2]
 8014f74:	297d      	cmp	r1, #125	; 0x7d
 8014f76:	f000 8186 	beq.w	8015286 <uxr_read_framed_msg+0x4c2>
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	202a      	movs	r0, #42	; 0x2a
 8014f7e:	297e      	cmp	r1, #126	; 0x7e
 8014f80:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8014f84:	fba5 c202 	umull	ip, r2, r5, r2
 8014f88:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014f8c:	fb00 3312 	mls	r3, r0, r2, r3
 8014f90:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8014f94:	f000 8195 	beq.w	80152c2 <uxr_read_framed_msg+0x4fe>
 8014f98:	2304      	movs	r3, #4
 8014f9a:	8621      	strh	r1, [r4, #48]	; 0x30
 8014f9c:	7023      	strb	r3, [r4, #0]
 8014f9e:	e722      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 8014fa0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8014fa4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8014fa8:	4290      	cmp	r0, r2
 8014faa:	f000 80b4 	beq.w	8015116 <uxr_read_framed_msg+0x352>
 8014fae:	18a3      	adds	r3, r4, r2
 8014fb0:	7899      	ldrb	r1, [r3, #2]
 8014fb2:	297d      	cmp	r1, #125	; 0x7d
 8014fb4:	f000 8107 	beq.w	80151c6 <uxr_read_framed_msg+0x402>
 8014fb8:	3201      	adds	r2, #1
 8014fba:	232a      	movs	r3, #42	; 0x2a
 8014fbc:	297e      	cmp	r1, #126	; 0x7e
 8014fbe:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8014fc2:	fba5 c000 	umull	ip, r0, r5, r0
 8014fc6:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8014fca:	fb03 2210 	mls	r2, r3, r0, r2
 8014fce:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8014fd2:	f000 818a 	beq.w	80152ea <uxr_read_framed_msg+0x526>
 8014fd6:	7863      	ldrb	r3, [r4, #1]
 8014fd8:	428b      	cmp	r3, r1
 8014fda:	bf0c      	ite	eq
 8014fdc:	2303      	moveq	r3, #3
 8014fde:	2300      	movne	r3, #0
 8014fe0:	7023      	strb	r3, [r4, #0]
 8014fe2:	e700      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8014fea:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
 8014fee:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8014ff2:	4299      	cmp	r1, r3
 8014ff4:	d06a      	beq.n	80150cc <uxr_read_framed_msg+0x308>
 8014ff6:	18e2      	adds	r2, r4, r3
 8014ff8:	7890      	ldrb	r0, [r2, #2]
 8014ffa:	287d      	cmp	r0, #125	; 0x7d
 8014ffc:	f000 8100 	beq.w	8015200 <uxr_read_framed_msg+0x43c>
 8015000:	3301      	adds	r3, #1
 8015002:	212a      	movs	r1, #42	; 0x2a
 8015004:	287e      	cmp	r0, #126	; 0x7e
 8015006:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 801500a:	ea4f 0253 	mov.w	r2, r3, lsr #1
 801500e:	fba5 c202 	umull	ip, r2, r5, r2
 8015012:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015016:	fb01 3312 	mls	r3, r1, r2, r3
 801501a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801501e:	d055      	beq.n	80150cc <uxr_read_framed_msg+0x308>
 8015020:	2302      	movs	r3, #2
 8015022:	7023      	strb	r3, [r4, #0]
 8015024:	e6df      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 8015026:	f894 c02c 	ldrb.w	ip, [r4, #44]	; 0x2c
 801502a:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 801502e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8015032:	1c5a      	adds	r2, r3, #1
 8015034:	459c      	cmp	ip, r3
 8015036:	eb04 0103 	add.w	r1, r4, r3
 801503a:	ea4f 0352 	mov.w	r3, r2, lsr #1
 801503e:	f43f af04 	beq.w	8014e4a <uxr_read_framed_msg+0x86>
 8015042:	fba5 0303 	umull	r0, r3, r5, r3
 8015046:	7889      	ldrb	r1, [r1, #2]
 8015048:	089b      	lsrs	r3, r3, #2
 801504a:	297e      	cmp	r1, #126	; 0x7e
 801504c:	fb0e 2313 	mls	r3, lr, r3, r2
 8015050:	b2db      	uxtb	r3, r3
 8015052:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8015056:	d1ec      	bne.n	8015032 <uxr_read_framed_msg+0x26e>
 8015058:	2301      	movs	r3, #1
 801505a:	7023      	strb	r3, [r4, #0]
 801505c:	e6c3      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 801505e:	1c50      	adds	r0, r2, #1
 8015060:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
 8015064:	3202      	adds	r2, #2
 8015066:	0841      	lsrs	r1, r0, #1
 8015068:	fba5 c101 	umull	ip, r1, r5, r1
 801506c:	0889      	lsrs	r1, r1, #2
 801506e:	fb0b 0111 	mls	r1, fp, r1, r0
 8015072:	1860      	adds	r0, r4, r1
 8015074:	b2c9      	uxtb	r1, r1
 8015076:	458a      	cmp	sl, r1
 8015078:	f43f af42 	beq.w	8014f00 <uxr_read_framed_msg+0x13c>
 801507c:	0851      	lsrs	r1, r2, #1
 801507e:	7880      	ldrb	r0, [r0, #2]
 8015080:	fba5 a101 	umull	sl, r1, r5, r1
 8015084:	287e      	cmp	r0, #126	; 0x7e
 8015086:	f080 0c20 	eor.w	ip, r0, #32
 801508a:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801508e:	fb0b 2211 	mls	r2, fp, r1, r2
 8015092:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8015096:	f47f af14 	bne.w	8014ec2 <uxr_read_framed_msg+0xfe>
 801509a:	459e      	cmp	lr, r3
 801509c:	f43f af33 	beq.w	8014f06 <uxr_read_framed_msg+0x142>
 80150a0:	2301      	movs	r3, #1
 80150a2:	7023      	strb	r3, [r4, #0]
 80150a4:	e69f      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 80150a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150a8:	9300      	str	r3, [sp, #0]
 80150aa:	2301      	movs	r3, #1
 80150ac:	9301      	str	r3, [sp, #4]
 80150ae:	464a      	mov	r2, r9
 80150b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150b2:	4641      	mov	r1, r8
 80150b4:	4620      	mov	r0, r4
 80150b6:	f7ff fdf1 	bl	8014c9c <uxr_framing_read_transport>
 80150ba:	2800      	cmp	r0, #0
 80150bc:	f43f aec5 	beq.w	8014e4a <uxr_read_framed_msg+0x86>
 80150c0:	7823      	ldrb	r3, [r4, #0]
 80150c2:	e690      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 80150c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150c6:	9300      	str	r3, [sp, #0]
 80150c8:	2302      	movs	r3, #2
 80150ca:	e7ef      	b.n	80150ac <uxr_read_framed_msg+0x2e8>
 80150cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150ce:	464a      	mov	r2, r9
 80150d0:	4641      	mov	r1, r8
 80150d2:	4620      	mov	r0, r4
 80150d4:	9300      	str	r3, [sp, #0]
 80150d6:	2304      	movs	r3, #4
 80150d8:	9301      	str	r3, [sp, #4]
 80150da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150dc:	f7ff fdde 	bl	8014c9c <uxr_framing_read_transport>
 80150e0:	2800      	cmp	r0, #0
 80150e2:	d1ed      	bne.n	80150c0 <uxr_read_framed_msg+0x2fc>
 80150e4:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80150e8:	2b7e      	cmp	r3, #126	; 0x7e
 80150ea:	d0e9      	beq.n	80150c0 <uxr_read_framed_msg+0x2fc>
 80150ec:	e6ad      	b.n	8014e4a <uxr_read_framed_msg+0x86>
 80150ee:	bf00      	nop
 80150f0:	30c30c31 	.word	0x30c30c31
 80150f4:	0801d60c 	.word	0x0801d60c
 80150f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80150fa:	9300      	str	r3, [sp, #0]
 80150fc:	2305      	movs	r3, #5
 80150fe:	9301      	str	r3, [sp, #4]
 8015100:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015102:	f7ff fdcb 	bl	8014c9c <uxr_framing_read_transport>
 8015106:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 801510a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 801510e:	429a      	cmp	r2, r3
 8015110:	f43f ae9b 	beq.w	8014e4a <uxr_read_framed_msg+0x86>
 8015114:	e664      	b.n	8014de0 <uxr_read_framed_msg+0x1c>
 8015116:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015118:	9300      	str	r3, [sp, #0]
 801511a:	2303      	movs	r3, #3
 801511c:	e7c6      	b.n	80150ac <uxr_read_framed_msg+0x2e8>
 801511e:	2305      	movs	r3, #5
 8015120:	7023      	strb	r3, [r4, #0]
 8015122:	e660      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 8015124:	f43f aeef 	beq.w	8014f06 <uxr_read_framed_msg+0x142>
 8015128:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801512c:	d094      	beq.n	8015058 <uxr_read_framed_msg+0x294>
 801512e:	ebae 0303 	sub.w	r3, lr, r3
 8015132:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015134:	3302      	adds	r3, #2
 8015136:	9200      	str	r2, [sp, #0]
 8015138:	e7b8      	b.n	80150ac <uxr_read_framed_msg+0x2e8>
 801513a:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 801513e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015140:	7013      	strb	r3, [r2, #0]
 8015142:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8015144:	b003      	add	sp, #12
 8015146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801514a:	1c59      	adds	r1, r3, #1
 801514c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015150:	084a      	lsrs	r2, r1, #1
 8015152:	fba5 e202 	umull	lr, r2, r5, r2
 8015156:	0892      	lsrs	r2, r2, #2
 8015158:	fb0c 1212 	mls	r2, ip, r2, r1
 801515c:	b2d1      	uxtb	r1, r2
 801515e:	4288      	cmp	r0, r1
 8015160:	d0b0      	beq.n	80150c4 <uxr_read_framed_msg+0x300>
 8015162:	3302      	adds	r3, #2
 8015164:	4422      	add	r2, r4
 8015166:	7891      	ldrb	r1, [r2, #2]
 8015168:	085a      	lsrs	r2, r3, #1
 801516a:	fba5 0202 	umull	r0, r2, r5, r2
 801516e:	297e      	cmp	r1, #126	; 0x7e
 8015170:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015174:	fb0c 3312 	mls	r3, ip, r2, r3
 8015178:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801517c:	f000 80a1 	beq.w	80152c2 <uxr_read_framed_msg+0x4fe>
 8015180:	f081 0120 	eor.w	r1, r1, #32
 8015184:	e680      	b.n	8014e88 <uxr_read_framed_msg+0xc4>
 8015186:	f103 0c01 	add.w	ip, r3, #1
 801518a:	202a      	movs	r0, #42	; 0x2a
 801518c:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8015190:	fba5 e202 	umull	lr, r2, r5, r2
 8015194:	0892      	lsrs	r2, r2, #2
 8015196:	fb00 c212 	mls	r2, r0, r2, ip
 801519a:	fa5f fc82 	uxtb.w	ip, r2
 801519e:	4561      	cmp	r1, ip
 80151a0:	d081      	beq.n	80150a6 <uxr_read_framed_msg+0x2e2>
 80151a2:	3302      	adds	r3, #2
 80151a4:	4422      	add	r2, r4
 80151a6:	0859      	lsrs	r1, r3, #1
 80151a8:	7892      	ldrb	r2, [r2, #2]
 80151aa:	fba5 c101 	umull	ip, r1, r5, r1
 80151ae:	2a7e      	cmp	r2, #126	; 0x7e
 80151b0:	ea4f 0191 	mov.w	r1, r1, lsr #2
 80151b4:	fb00 3311 	mls	r3, r0, r1, r3
 80151b8:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80151bc:	f000 8091 	beq.w	80152e2 <uxr_read_framed_msg+0x51e>
 80151c0:	f082 0220 	eor.w	r2, r2, #32
 80151c4:	e636      	b.n	8014e34 <uxr_read_framed_msg+0x70>
 80151c6:	1c51      	adds	r1, r2, #1
 80151c8:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80151cc:	084b      	lsrs	r3, r1, #1
 80151ce:	fba5 e303 	umull	lr, r3, r5, r3
 80151d2:	089b      	lsrs	r3, r3, #2
 80151d4:	fb0c 1313 	mls	r3, ip, r3, r1
 80151d8:	b2d9      	uxtb	r1, r3
 80151da:	4288      	cmp	r0, r1
 80151dc:	d09b      	beq.n	8015116 <uxr_read_framed_msg+0x352>
 80151de:	3202      	adds	r2, #2
 80151e0:	4423      	add	r3, r4
 80151e2:	0850      	lsrs	r0, r2, #1
 80151e4:	789b      	ldrb	r3, [r3, #2]
 80151e6:	fba5 1000 	umull	r1, r0, r5, r0
 80151ea:	2b7e      	cmp	r3, #126	; 0x7e
 80151ec:	ea4f 0090 	mov.w	r0, r0, lsr #2
 80151f0:	fb0c 2210 	mls	r2, ip, r0, r2
 80151f4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80151f8:	d077      	beq.n	80152ea <uxr_read_framed_msg+0x526>
 80151fa:	f083 0120 	eor.w	r1, r3, #32
 80151fe:	e6ea      	b.n	8014fd6 <uxr_read_framed_msg+0x212>
 8015200:	f103 0c01 	add.w	ip, r3, #1
 8015204:	202a      	movs	r0, #42	; 0x2a
 8015206:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801520a:	fba5 e202 	umull	lr, r2, r5, r2
 801520e:	0892      	lsrs	r2, r2, #2
 8015210:	fb00 c212 	mls	r2, r0, r2, ip
 8015214:	fa5f fc82 	uxtb.w	ip, r2
 8015218:	4561      	cmp	r1, ip
 801521a:	f43f af57 	beq.w	80150cc <uxr_read_framed_msg+0x308>
 801521e:	3302      	adds	r3, #2
 8015220:	4422      	add	r2, r4
 8015222:	7891      	ldrb	r1, [r2, #2]
 8015224:	085a      	lsrs	r2, r3, #1
 8015226:	fba5 c202 	umull	ip, r2, r5, r2
 801522a:	297e      	cmp	r1, #126	; 0x7e
 801522c:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015230:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015234:	fb00 3312 	mls	r3, r0, r2, r3
 8015238:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801523c:	f43f af46 	beq.w	80150cc <uxr_read_framed_msg+0x308>
 8015240:	f081 0120 	eor.w	r1, r1, #32
 8015244:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8015248:	e6ea      	b.n	8015020 <uxr_read_framed_msg+0x25c>
 801524a:	1c59      	adds	r1, r3, #1
 801524c:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8015250:	084a      	lsrs	r2, r1, #1
 8015252:	fba5 e202 	umull	lr, r2, r5, r2
 8015256:	0892      	lsrs	r2, r2, #2
 8015258:	fb0c 1212 	mls	r2, ip, r2, r1
 801525c:	b2d1      	uxtb	r1, r2
 801525e:	4288      	cmp	r0, r1
 8015260:	f43f af21 	beq.w	80150a6 <uxr_read_framed_msg+0x2e2>
 8015264:	3302      	adds	r3, #2
 8015266:	4422      	add	r2, r4
 8015268:	7891      	ldrb	r1, [r2, #2]
 801526a:	085a      	lsrs	r2, r3, #1
 801526c:	fba5 0202 	umull	r0, r2, r5, r2
 8015270:	297e      	cmp	r1, #126	; 0x7e
 8015272:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8015276:	fb0c 3312 	mls	r3, ip, r2, r3
 801527a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 801527e:	d030      	beq.n	80152e2 <uxr_read_framed_msg+0x51e>
 8015280:	f081 0120 	eor.w	r1, r1, #32
 8015284:	e65d      	b.n	8014f42 <uxr_read_framed_msg+0x17e>
 8015286:	1c59      	adds	r1, r3, #1
 8015288:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801528c:	084a      	lsrs	r2, r1, #1
 801528e:	fba5 e202 	umull	lr, r2, r5, r2
 8015292:	0892      	lsrs	r2, r2, #2
 8015294:	fb0c 1212 	mls	r2, ip, r2, r1
 8015298:	b2d1      	uxtb	r1, r2
 801529a:	4288      	cmp	r0, r1
 801529c:	f43f af12 	beq.w	80150c4 <uxr_read_framed_msg+0x300>
 80152a0:	3302      	adds	r3, #2
 80152a2:	4422      	add	r2, r4
 80152a4:	7891      	ldrb	r1, [r2, #2]
 80152a6:	085a      	lsrs	r2, r3, #1
 80152a8:	fba5 0202 	umull	r0, r2, r5, r2
 80152ac:	297e      	cmp	r1, #126	; 0x7e
 80152ae:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80152b2:	fb0c 3312 	mls	r3, ip, r2, r3
 80152b6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80152ba:	d002      	beq.n	80152c2 <uxr_read_framed_msg+0x4fe>
 80152bc:	f081 0120 	eor.w	r1, r1, #32
 80152c0:	e66a      	b.n	8014f98 <uxr_read_framed_msg+0x1d4>
 80152c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152c4:	9300      	str	r3, [sp, #0]
 80152c6:	2302      	movs	r3, #2
 80152c8:	9301      	str	r3, [sp, #4]
 80152ca:	464a      	mov	r2, r9
 80152cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152ce:	4641      	mov	r1, r8
 80152d0:	4620      	mov	r0, r4
 80152d2:	f7ff fce3 	bl	8014c9c <uxr_framing_read_transport>
 80152d6:	2800      	cmp	r0, #0
 80152d8:	f47f aef2 	bne.w	80150c0 <uxr_read_framed_msg+0x2fc>
 80152dc:	2301      	movs	r3, #1
 80152de:	7023      	strb	r3, [r4, #0]
 80152e0:	e581      	b.n	8014de6 <uxr_read_framed_msg+0x22>
 80152e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152e4:	9300      	str	r3, [sp, #0]
 80152e6:	2301      	movs	r3, #1
 80152e8:	e7ee      	b.n	80152c8 <uxr_read_framed_msg+0x504>
 80152ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80152ec:	9300      	str	r3, [sp, #0]
 80152ee:	2303      	movs	r3, #3
 80152f0:	e7ea      	b.n	80152c8 <uxr_read_framed_msg+0x504>
 80152f2:	bf00      	nop

080152f4 <uxr_stream_id>:
 80152f4:	2901      	cmp	r1, #1
 80152f6:	4684      	mov	ip, r0
 80152f8:	b500      	push	{lr}
 80152fa:	b083      	sub	sp, #12
 80152fc:	d01f      	beq.n	801533e <uxr_stream_id+0x4a>
 80152fe:	2902      	cmp	r1, #2
 8015300:	f04f 0e00 	mov.w	lr, #0
 8015304:	d020      	beq.n	8015348 <uxr_stream_id+0x54>
 8015306:	2300      	movs	r3, #0
 8015308:	2000      	movs	r0, #0
 801530a:	f36e 0307 	bfi	r3, lr, #0, #8
 801530e:	f36c 230f 	bfi	r3, ip, #8, #8
 8015312:	f361 4317 	bfi	r3, r1, #16, #8
 8015316:	f362 631f 	bfi	r3, r2, #24, #8
 801531a:	fa5f fc83 	uxtb.w	ip, r3
 801531e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015322:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015326:	0e1b      	lsrs	r3, r3, #24
 8015328:	f36c 0007 	bfi	r0, ip, #0, #8
 801532c:	f361 200f 	bfi	r0, r1, #8, #8
 8015330:	f362 4017 	bfi	r0, r2, #16, #8
 8015334:	f363 601f 	bfi	r0, r3, #24, #8
 8015338:	b003      	add	sp, #12
 801533a:	f85d fb04 	ldr.w	pc, [sp], #4
 801533e:	f100 0e01 	add.w	lr, r0, #1
 8015342:	fa5f fe8e 	uxtb.w	lr, lr
 8015346:	e7de      	b.n	8015306 <uxr_stream_id+0x12>
 8015348:	f080 0e80 	eor.w	lr, r0, #128	; 0x80
 801534c:	e7db      	b.n	8015306 <uxr_stream_id+0x12>
 801534e:	bf00      	nop

08015350 <uxr_stream_id_from_raw>:
 8015350:	b082      	sub	sp, #8
 8015352:	b130      	cbz	r0, 8015362 <uxr_stream_id_from_raw+0x12>
 8015354:	0603      	lsls	r3, r0, #24
 8015356:	d421      	bmi.n	801539c <uxr_stream_id_from_raw+0x4c>
 8015358:	1e42      	subs	r2, r0, #1
 801535a:	f04f 0c01 	mov.w	ip, #1
 801535e:	b2d2      	uxtb	r2, r2
 8015360:	e001      	b.n	8015366 <uxr_stream_id_from_raw+0x16>
 8015362:	4684      	mov	ip, r0
 8015364:	4602      	mov	r2, r0
 8015366:	2300      	movs	r3, #0
 8015368:	f360 0307 	bfi	r3, r0, #0, #8
 801536c:	2000      	movs	r0, #0
 801536e:	f362 230f 	bfi	r3, r2, #8, #8
 8015372:	f36c 4317 	bfi	r3, ip, #16, #8
 8015376:	f361 631f 	bfi	r3, r1, #24, #8
 801537a:	fa5f fc83 	uxtb.w	ip, r3
 801537e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8015382:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8015386:	0e1b      	lsrs	r3, r3, #24
 8015388:	f36c 0007 	bfi	r0, ip, #0, #8
 801538c:	f361 200f 	bfi	r0, r1, #8, #8
 8015390:	f362 4017 	bfi	r0, r2, #16, #8
 8015394:	f363 601f 	bfi	r0, r3, #24, #8
 8015398:	b002      	add	sp, #8
 801539a:	4770      	bx	lr
 801539c:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 80153a0:	f04f 0c02 	mov.w	ip, #2
 80153a4:	e7df      	b.n	8015366 <uxr_stream_id_from_raw+0x16>
 80153a6:	bf00      	nop

080153a8 <uxr_init_stream_storage>:
 80153a8:	2300      	movs	r3, #0
 80153aa:	7403      	strb	r3, [r0, #16]
 80153ac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 80153b0:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 80153b4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80153b8:	4770      	bx	lr
 80153ba:	bf00      	nop

080153bc <uxr_reset_stream_storage>:
 80153bc:	b570      	push	{r4, r5, r6, lr}
 80153be:	7c03      	ldrb	r3, [r0, #16]
 80153c0:	4604      	mov	r4, r0
 80153c2:	b14b      	cbz	r3, 80153d8 <uxr_reset_stream_storage+0x1c>
 80153c4:	4606      	mov	r6, r0
 80153c6:	2500      	movs	r5, #0
 80153c8:	4630      	mov	r0, r6
 80153ca:	3501      	adds	r5, #1
 80153cc:	f004 fea6 	bl	801a11c <uxr_reset_output_best_effort_stream>
 80153d0:	7c23      	ldrb	r3, [r4, #16]
 80153d2:	3610      	adds	r6, #16
 80153d4:	42ab      	cmp	r3, r5
 80153d6:	d8f7      	bhi.n	80153c8 <uxr_reset_stream_storage+0xc>
 80153d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80153dc:	b15b      	cbz	r3, 80153f6 <uxr_reset_stream_storage+0x3a>
 80153de:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80153e2:	2500      	movs	r5, #0
 80153e4:	4630      	mov	r0, r6
 80153e6:	3501      	adds	r5, #1
 80153e8:	f004 fc9e 	bl	8019d28 <uxr_reset_input_best_effort_stream>
 80153ec:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80153f0:	3602      	adds	r6, #2
 80153f2:	42ab      	cmp	r3, r5
 80153f4:	d8f6      	bhi.n	80153e4 <uxr_reset_stream_storage+0x28>
 80153f6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80153fa:	b15b      	cbz	r3, 8015414 <uxr_reset_stream_storage+0x58>
 80153fc:	f104 0618 	add.w	r6, r4, #24
 8015400:	2500      	movs	r5, #0
 8015402:	4630      	mov	r0, r6
 8015404:	3501      	adds	r5, #1
 8015406:	f004 ff37 	bl	801a278 <uxr_reset_output_reliable_stream>
 801540a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 801540e:	3628      	adds	r6, #40	; 0x28
 8015410:	42ab      	cmp	r3, r5
 8015412:	d8f6      	bhi.n	8015402 <uxr_reset_stream_storage+0x46>
 8015414:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8015418:	b15b      	cbz	r3, 8015432 <uxr_reset_stream_storage+0x76>
 801541a:	f104 0648 	add.w	r6, r4, #72	; 0x48
 801541e:	2500      	movs	r5, #0
 8015420:	4630      	mov	r0, r6
 8015422:	3501      	adds	r5, #1
 8015424:	f004 fcec 	bl	8019e00 <uxr_reset_input_reliable_stream>
 8015428:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 801542c:	3618      	adds	r6, #24
 801542e:	42ab      	cmp	r3, r5
 8015430:	d8f6      	bhi.n	8015420 <uxr_reset_stream_storage+0x64>
 8015432:	bd70      	pop	{r4, r5, r6, pc}

08015434 <uxr_add_output_best_effort_buffer>:
 8015434:	b510      	push	{r4, lr}
 8015436:	7c04      	ldrb	r4, [r0, #16]
 8015438:	b082      	sub	sp, #8
 801543a:	f104 0c01 	add.w	ip, r4, #1
 801543e:	f880 c010 	strb.w	ip, [r0, #16]
 8015442:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8015446:	f004 fe5f 	bl	801a108 <uxr_init_output_best_effort_stream>
 801544a:	2201      	movs	r2, #1
 801544c:	4620      	mov	r0, r4
 801544e:	4611      	mov	r1, r2
 8015450:	b002      	add	sp, #8
 8015452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015456:	f7ff bf4d 	b.w	80152f4 <uxr_stream_id>
 801545a:	bf00      	nop

0801545c <uxr_add_output_reliable_buffer>:
 801545c:	b510      	push	{r4, lr}
 801545e:	b084      	sub	sp, #16
 8015460:	4684      	mov	ip, r0
 8015462:	2028      	movs	r0, #40	; 0x28
 8015464:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8015468:	9400      	str	r4, [sp, #0]
 801546a:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 801546e:	fb00 c004 	mla	r0, r0, r4, ip
 8015472:	f104 0e01 	add.w	lr, r4, #1
 8015476:	3018      	adds	r0, #24
 8015478:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 801547c:	f004 fec4 	bl	801a208 <uxr_init_output_reliable_stream>
 8015480:	2201      	movs	r2, #1
 8015482:	2102      	movs	r1, #2
 8015484:	4620      	mov	r0, r4
 8015486:	b004      	add	sp, #16
 8015488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801548c:	f7ff bf32 	b.w	80152f4 <uxr_stream_id>

08015490 <uxr_add_input_best_effort_buffer>:
 8015490:	b510      	push	{r4, lr}
 8015492:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 8015496:	b082      	sub	sp, #8
 8015498:	1c62      	adds	r2, r4, #1
 801549a:	f104 0321 	add.w	r3, r4, #33	; 0x21
 801549e:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
 80154a2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80154a6:	f004 fc3b 	bl	8019d20 <uxr_init_input_best_effort_stream>
 80154aa:	2200      	movs	r2, #0
 80154ac:	2101      	movs	r1, #1
 80154ae:	4620      	mov	r0, r4
 80154b0:	b002      	add	sp, #8
 80154b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154b6:	f7ff bf1d 	b.w	80152f4 <uxr_stream_id>
 80154ba:	bf00      	nop

080154bc <uxr_add_input_reliable_buffer>:
 80154bc:	b510      	push	{r4, lr}
 80154be:	b084      	sub	sp, #16
 80154c0:	4684      	mov	ip, r0
 80154c2:	2018      	movs	r0, #24
 80154c4:	9c06      	ldr	r4, [sp, #24]
 80154c6:	9400      	str	r4, [sp, #0]
 80154c8:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 80154cc:	fb00 c004 	mla	r0, r0, r4, ip
 80154d0:	f104 0e01 	add.w	lr, r4, #1
 80154d4:	3048      	adds	r0, #72	; 0x48
 80154d6:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 80154da:	f004 fc6b 	bl	8019db4 <uxr_init_input_reliable_stream>
 80154de:	2200      	movs	r2, #0
 80154e0:	2102      	movs	r1, #2
 80154e2:	4620      	mov	r0, r4
 80154e4:	b004      	add	sp, #16
 80154e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154ea:	f7ff bf03 	b.w	80152f4 <uxr_stream_id>
 80154ee:	bf00      	nop

080154f0 <uxr_get_output_best_effort_stream>:
 80154f0:	7c03      	ldrb	r3, [r0, #16]
 80154f2:	428b      	cmp	r3, r1
 80154f4:	bf8c      	ite	hi
 80154f6:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80154fa:	2000      	movls	r0, #0
 80154fc:	4770      	bx	lr
 80154fe:	bf00      	nop

08015500 <uxr_get_output_reliable_stream>:
 8015500:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8015504:	428b      	cmp	r3, r1
 8015506:	d904      	bls.n	8015512 <uxr_get_output_reliable_stream+0x12>
 8015508:	2328      	movs	r3, #40	; 0x28
 801550a:	fb03 0001 	mla	r0, r3, r1, r0
 801550e:	3018      	adds	r0, #24
 8015510:	4770      	bx	lr
 8015512:	2000      	movs	r0, #0
 8015514:	4770      	bx	lr
 8015516:	bf00      	nop

08015518 <uxr_get_input_best_effort_stream>:
 8015518:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 801551c:	428b      	cmp	r3, r1
 801551e:	d903      	bls.n	8015528 <uxr_get_input_best_effort_stream+0x10>
 8015520:	3121      	adds	r1, #33	; 0x21
 8015522:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 8015526:	4770      	bx	lr
 8015528:	2000      	movs	r0, #0
 801552a:	4770      	bx	lr

0801552c <uxr_get_input_reliable_stream>:
 801552c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8015530:	428b      	cmp	r3, r1
 8015532:	d904      	bls.n	801553e <uxr_get_input_reliable_stream+0x12>
 8015534:	2318      	movs	r3, #24
 8015536:	fb03 0001 	mla	r0, r3, r1, r0
 801553a:	3048      	adds	r0, #72	; 0x48
 801553c:	4770      	bx	lr
 801553e:	2000      	movs	r0, #0
 8015540:	4770      	bx	lr
 8015542:	bf00      	nop

08015544 <uxr_output_streams_confirmed>:
 8015544:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8015548:	b183      	cbz	r3, 801556c <uxr_output_streams_confirmed+0x28>
 801554a:	b570      	push	{r4, r5, r6, lr}
 801554c:	4606      	mov	r6, r0
 801554e:	f100 0518 	add.w	r5, r0, #24
 8015552:	2400      	movs	r4, #0
 8015554:	e000      	b.n	8015558 <uxr_output_streams_confirmed+0x14>
 8015556:	b140      	cbz	r0, 801556a <uxr_output_streams_confirmed+0x26>
 8015558:	4628      	mov	r0, r5
 801555a:	3401      	adds	r4, #1
 801555c:	f005 f900 	bl	801a760 <uxr_is_output_up_to_date>
 8015560:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 8015564:	3528      	adds	r5, #40	; 0x28
 8015566:	42a3      	cmp	r3, r4
 8015568:	d8f5      	bhi.n	8015556 <uxr_output_streams_confirmed+0x12>
 801556a:	bd70      	pop	{r4, r5, r6, pc}
 801556c:	2001      	movs	r0, #1
 801556e:	4770      	bx	lr

08015570 <uxr_buffer_submessage_header>:
 8015570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015572:	460e      	mov	r6, r1
 8015574:	2104      	movs	r1, #4
 8015576:	4604      	mov	r4, r0
 8015578:	4615      	mov	r5, r2
 801557a:	461f      	mov	r7, r3
 801557c:	f7f9 fac4 	bl	800eb08 <ucdr_align_to>
 8015580:	2301      	movs	r3, #1
 8015582:	4631      	mov	r1, r6
 8015584:	4620      	mov	r0, r4
 8015586:	ea47 0203 	orr.w	r2, r7, r3
 801558a:	7523      	strb	r3, [r4, #20]
 801558c:	462b      	mov	r3, r5
 801558e:	f000 fa29 	bl	80159e4 <uxr_serialize_submessage_header>
 8015592:	4620      	mov	r0, r4
 8015594:	f7f9 face 	bl	800eb34 <ucdr_buffer_remaining>
 8015598:	42a8      	cmp	r0, r5
 801559a:	bf34      	ite	cc
 801559c:	2000      	movcc	r0, #0
 801559e:	2001      	movcs	r0, #1
 80155a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155a2:	bf00      	nop

080155a4 <uxr_read_submessage_header>:
 80155a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a8:	4604      	mov	r4, r0
 80155aa:	460d      	mov	r5, r1
 80155ac:	2104      	movs	r1, #4
 80155ae:	4616      	mov	r6, r2
 80155b0:	4698      	mov	r8, r3
 80155b2:	f7f9 faa9 	bl	800eb08 <ucdr_align_to>
 80155b6:	4620      	mov	r0, r4
 80155b8:	f7f9 fabc 	bl	800eb34 <ucdr_buffer_remaining>
 80155bc:	2803      	cmp	r0, #3
 80155be:	bf8c      	ite	hi
 80155c0:	2701      	movhi	r7, #1
 80155c2:	2700      	movls	r7, #0
 80155c4:	d802      	bhi.n	80155cc <uxr_read_submessage_header+0x28>
 80155c6:	4638      	mov	r0, r7
 80155c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155cc:	4633      	mov	r3, r6
 80155ce:	4642      	mov	r2, r8
 80155d0:	4620      	mov	r0, r4
 80155d2:	4629      	mov	r1, r5
 80155d4:	f000 fa1a 	bl	8015a0c <uxr_deserialize_submessage_header>
 80155d8:	f898 3000 	ldrb.w	r3, [r8]
 80155dc:	4638      	mov	r0, r7
 80155de:	f003 0201 	and.w	r2, r3, #1
 80155e2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80155e6:	f888 3000 	strb.w	r3, [r8]
 80155ea:	7522      	strb	r2, [r4, #20]
 80155ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155f0 <uxr_submessage_padding>:
 80155f0:	f010 0003 	ands.w	r0, r0, #3
 80155f4:	bf18      	it	ne
 80155f6:	f1c0 0004 	rsbne	r0, r0, #4
 80155fa:	4770      	bx	lr

080155fc <uxr_millis>:
 80155fc:	b510      	push	{r4, lr}
 80155fe:	b084      	sub	sp, #16
 8015600:	2001      	movs	r0, #1
 8015602:	4669      	mov	r1, sp
 8015604:	f7ec f8c8 	bl	8001798 <clock_gettime>
 8015608:	4908      	ldr	r1, [pc, #32]	; (801562c <uxr_millis+0x30>)
 801560a:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 801560e:	fba0 0301 	umull	r0, r3, r0, r1
 8015612:	1900      	adds	r0, r0, r4
 8015614:	fb01 3102 	mla	r1, r1, r2, r3
 8015618:	4a05      	ldr	r2, [pc, #20]	; (8015630 <uxr_millis+0x34>)
 801561a:	f04f 0300 	mov.w	r3, #0
 801561e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8015622:	f7ea fe75 	bl	8000310 <__aeabi_ldivmod>
 8015626:	b004      	add	sp, #16
 8015628:	bd10      	pop	{r4, pc}
 801562a:	bf00      	nop
 801562c:	3b9aca00 	.word	0x3b9aca00
 8015630:	000f4240 	.word	0x000f4240

08015634 <uxr_nanos>:
 8015634:	b510      	push	{r4, lr}
 8015636:	b084      	sub	sp, #16
 8015638:	2001      	movs	r0, #1
 801563a:	4669      	mov	r1, sp
 801563c:	f7ec f8ac 	bl	8001798 <clock_gettime>
 8015640:	4a06      	ldr	r2, [pc, #24]	; (801565c <uxr_nanos+0x28>)
 8015642:	9800      	ldr	r0, [sp, #0]
 8015644:	9902      	ldr	r1, [sp, #8]
 8015646:	fba0 0302 	umull	r0, r3, r0, r2
 801564a:	9c01      	ldr	r4, [sp, #4]
 801564c:	1840      	adds	r0, r0, r1
 801564e:	fb02 3304 	mla	r3, r2, r4, r3
 8015652:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8015656:	b004      	add	sp, #16
 8015658:	bd10      	pop	{r4, pc}
 801565a:	bf00      	nop
 801565c:	3b9aca00 	.word	0x3b9aca00

08015660 <on_full_output_buffer_fragmented>:
 8015660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015664:	460c      	mov	r4, r1
 8015666:	b08a      	sub	sp, #40	; 0x28
 8015668:	4606      	mov	r6, r0
 801566a:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 801566e:	f104 0008 	add.w	r0, r4, #8
 8015672:	f7ff ff45 	bl	8015500 <uxr_get_output_reliable_stream>
 8015676:	4605      	mov	r5, r0
 8015678:	f005 f87c 	bl	801a774 <get_available_free_slots>
 801567c:	b968      	cbnz	r0, 801569a <on_full_output_buffer_fragmented+0x3a>
 801567e:	4620      	mov	r0, r4
 8015680:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 8015684:	4798      	blx	r3
 8015686:	b918      	cbnz	r0, 8015690 <on_full_output_buffer_fragmented+0x30>
 8015688:	2001      	movs	r0, #1
 801568a:	b00a      	add	sp, #40	; 0x28
 801568c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015690:	4628      	mov	r0, r5
 8015692:	f005 f86f 	bl	801a774 <get_available_free_slots>
 8015696:	2800      	cmp	r0, #0
 8015698:	d0f6      	beq.n	8015688 <on_full_output_buffer_fragmented+0x28>
 801569a:	8929      	ldrh	r1, [r5, #8]
 801569c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80156a0:	89eb      	ldrh	r3, [r5, #14]
 80156a2:	7b28      	ldrb	r0, [r5, #12]
 80156a4:	686f      	ldr	r7, [r5, #4]
 80156a6:	1a12      	subs	r2, r2, r0
 80156a8:	fbb3 f0f1 	udiv	r0, r3, r1
 80156ac:	fbb7 f7f1 	udiv	r7, r7, r1
 80156b0:	fb01 3110 	mls	r1, r1, r0, r3
 80156b4:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 80156b8:	b289      	uxth	r1, r1
 80156ba:	fb07 f101 	mul.w	r1, r7, r1
 80156be:	3f04      	subs	r7, #4
 80156c0:	443a      	add	r2, r7
 80156c2:	3104      	adds	r1, #4
 80156c4:	fa1f f882 	uxth.w	r8, r2
 80156c8:	463a      	mov	r2, r7
 80156ca:	eba3 0308 	sub.w	r3, r3, r8
 80156ce:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 80156d2:	682b      	ldr	r3, [r5, #0]
 80156d4:	4419      	add	r1, r3
 80156d6:	2300      	movs	r3, #0
 80156d8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80156dc:	9000      	str	r0, [sp, #0]
 80156de:	a802      	add	r0, sp, #8
 80156e0:	f7f9 f9e4 	bl	800eaac <ucdr_init_buffer_origin_offset>
 80156e4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 80156e8:	f102 0308 	add.w	r3, r2, #8
 80156ec:	42bb      	cmp	r3, r7
 80156ee:	d927      	bls.n	8015740 <on_full_output_buffer_fragmented+0xe0>
 80156f0:	4642      	mov	r2, r8
 80156f2:	2300      	movs	r3, #0
 80156f4:	210d      	movs	r1, #13
 80156f6:	a802      	add	r0, sp, #8
 80156f8:	f7ff ff3a 	bl	8015570 <uxr_buffer_submessage_header>
 80156fc:	8929      	ldrh	r1, [r5, #8]
 80156fe:	89eb      	ldrh	r3, [r5, #14]
 8015700:	686a      	ldr	r2, [r5, #4]
 8015702:	fbb3 f0f1 	udiv	r0, r3, r1
 8015706:	fbb2 f2f1 	udiv	r2, r2, r1
 801570a:	fb01 3310 	mls	r3, r1, r0, r3
 801570e:	b29b      	uxth	r3, r3
 8015710:	fb02 f303 	mul.w	r3, r2, r3
 8015714:	682a      	ldr	r2, [r5, #0]
 8015716:	50d7      	str	r7, [r2, r3]
 8015718:	2101      	movs	r1, #1
 801571a:	89e8      	ldrh	r0, [r5, #14]
 801571c:	f005 f84c 	bl	801a7b8 <uxr_seq_num_add>
 8015720:	9904      	ldr	r1, [sp, #16]
 8015722:	9a03      	ldr	r2, [sp, #12]
 8015724:	81e8      	strh	r0, [r5, #14]
 8015726:	4630      	mov	r0, r6
 8015728:	1a52      	subs	r2, r2, r1
 801572a:	f7f9 f9d1 	bl	800ead0 <ucdr_init_buffer>
 801572e:	4630      	mov	r0, r6
 8015730:	4622      	mov	r2, r4
 8015732:	490f      	ldr	r1, [pc, #60]	; (8015770 <on_full_output_buffer_fragmented+0x110>)
 8015734:	f7f9 f9a0 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 8015738:	2000      	movs	r0, #0
 801573a:	b00a      	add	sp, #40	; 0x28
 801573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015740:	b292      	uxth	r2, r2
 8015742:	2302      	movs	r3, #2
 8015744:	210d      	movs	r1, #13
 8015746:	a802      	add	r0, sp, #8
 8015748:	f7ff ff12 	bl	8015570 <uxr_buffer_submessage_header>
 801574c:	8928      	ldrh	r0, [r5, #8]
 801574e:	89eb      	ldrh	r3, [r5, #14]
 8015750:	6869      	ldr	r1, [r5, #4]
 8015752:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8015756:	fbb3 f7f0 	udiv	r7, r3, r0
 801575a:	fbb1 f1f0 	udiv	r1, r1, r0
 801575e:	fb00 3317 	mls	r3, r0, r7, r3
 8015762:	3208      	adds	r2, #8
 8015764:	b29b      	uxth	r3, r3
 8015766:	fb01 f303 	mul.w	r3, r1, r3
 801576a:	6829      	ldr	r1, [r5, #0]
 801576c:	50ca      	str	r2, [r1, r3]
 801576e:	e7d3      	b.n	8015718 <on_full_output_buffer_fragmented+0xb8>
 8015770:	08015661 	.word	0x08015661

08015774 <uxr_prepare_output_stream>:
 8015774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015776:	b087      	sub	sp, #28
 8015778:	2707      	movs	r7, #7
 801577a:	2500      	movs	r5, #0
 801577c:	461c      	mov	r4, r3
 801577e:	4606      	mov	r6, r0
 8015780:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8015784:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015786:	e9cd 7500 	strd	r7, r5, [sp]
 801578a:	3204      	adds	r2, #4
 801578c:	f7fe ffc8 	bl	8014720 <uxr_prepare_stream_to_write_submessage>
 8015790:	f080 0201 	eor.w	r2, r0, #1
 8015794:	b2d2      	uxtb	r2, r2
 8015796:	75a2      	strb	r2, [r4, #22]
 8015798:	b112      	cbz	r2, 80157a0 <uxr_prepare_output_stream+0x2c>
 801579a:	4628      	mov	r0, r5
 801579c:	b007      	add	sp, #28
 801579e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80157a0:	aa05      	add	r2, sp, #20
 80157a2:	9902      	ldr	r1, [sp, #8]
 80157a4:	4630      	mov	r0, r6
 80157a6:	f7ff f8f7 	bl	8014998 <uxr_init_base_object_request>
 80157aa:	a905      	add	r1, sp, #20
 80157ac:	4605      	mov	r5, r0
 80157ae:	4620      	mov	r0, r4
 80157b0:	f001 f8bc 	bl	801692c <uxr_serialize_WRITE_DATA_Payload_Data>
 80157b4:	69a6      	ldr	r6, [r4, #24]
 80157b6:	69e7      	ldr	r7, [r4, #28]
 80157b8:	4620      	mov	r0, r4
 80157ba:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 80157be:	1a52      	subs	r2, r2, r1
 80157c0:	f7f9 f986 	bl	800ead0 <ucdr_init_buffer>
 80157c4:	4620      	mov	r0, r4
 80157c6:	463a      	mov	r2, r7
 80157c8:	4631      	mov	r1, r6
 80157ca:	f7f9 f955 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 80157ce:	4628      	mov	r0, r5
 80157d0:	b007      	add	sp, #28
 80157d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080157d4 <uxr_prepare_output_stream_fragmented>:
 80157d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157d8:	b091      	sub	sp, #68	; 0x44
 80157da:	4605      	mov	r5, r0
 80157dc:	3008      	adds	r0, #8
 80157de:	461e      	mov	r6, r3
 80157e0:	9105      	str	r1, [sp, #20]
 80157e2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80157e6:	9204      	str	r2, [sp, #16]
 80157e8:	f7ff fe8a 	bl	8015500 <uxr_get_output_reliable_stream>
 80157ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80157f0:	2b01      	cmp	r3, #1
 80157f2:	f000 8093 	beq.w	801591c <uxr_prepare_output_stream_fragmented+0x148>
 80157f6:	4604      	mov	r4, r0
 80157f8:	2800      	cmp	r0, #0
 80157fa:	f000 808f 	beq.w	801591c <uxr_prepare_output_stream_fragmented+0x148>
 80157fe:	f004 ffb9 	bl	801a774 <get_available_free_slots>
 8015802:	2800      	cmp	r0, #0
 8015804:	f000 8085 	beq.w	8015912 <uxr_prepare_output_stream_fragmented+0x13e>
 8015808:	8923      	ldrh	r3, [r4, #8]
 801580a:	89e7      	ldrh	r7, [r4, #14]
 801580c:	6862      	ldr	r2, [r4, #4]
 801580e:	fbb7 f9f3 	udiv	r9, r7, r3
 8015812:	fbb2 f2f3 	udiv	r2, r2, r3
 8015816:	fb03 7919 	mls	r9, r3, r9, r7
 801581a:	6823      	ldr	r3, [r4, #0]
 801581c:	f1a2 0b04 	sub.w	fp, r2, #4
 8015820:	9203      	str	r2, [sp, #12]
 8015822:	fa1f f989 	uxth.w	r9, r9
 8015826:	fb02 f909 	mul.w	r9, r2, r9
 801582a:	f109 0904 	add.w	r9, r9, #4
 801582e:	4499      	add	r9, r3
 8015830:	7b23      	ldrb	r3, [r4, #12]
 8015832:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015836:	4543      	cmp	r3, r8
 8015838:	d37c      	bcc.n	8015934 <uxr_prepare_output_stream_fragmented+0x160>
 801583a:	f1ab 0a04 	sub.w	sl, fp, #4
 801583e:	465a      	mov	r2, fp
 8015840:	4649      	mov	r1, r9
 8015842:	a808      	add	r0, sp, #32
 8015844:	ebaa 0a03 	sub.w	sl, sl, r3
 8015848:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801584a:	f8cd 8000 	str.w	r8, [sp]
 801584e:	3308      	adds	r3, #8
 8015850:	fa1f fa8a 	uxth.w	sl, sl
 8015854:	9302      	str	r3, [sp, #8]
 8015856:	2300      	movs	r3, #0
 8015858:	f7f9 f928 	bl	800eaac <ucdr_init_buffer_origin_offset>
 801585c:	9b02      	ldr	r3, [sp, #8]
 801585e:	4652      	mov	r2, sl
 8015860:	210d      	movs	r1, #13
 8015862:	455b      	cmp	r3, fp
 8015864:	bf34      	ite	cc
 8015866:	2302      	movcc	r3, #2
 8015868:	2300      	movcs	r3, #0
 801586a:	a808      	add	r0, sp, #32
 801586c:	f7ff fe80 	bl	8015570 <uxr_buffer_submessage_header>
 8015870:	8921      	ldrh	r1, [r4, #8]
 8015872:	6863      	ldr	r3, [r4, #4]
 8015874:	4638      	mov	r0, r7
 8015876:	fbb7 f2f1 	udiv	r2, r7, r1
 801587a:	fbb3 f3f1 	udiv	r3, r3, r1
 801587e:	fb01 7212 	mls	r2, r1, r2, r7
 8015882:	2101      	movs	r1, #1
 8015884:	b292      	uxth	r2, r2
 8015886:	fb02 f303 	mul.w	r3, r2, r3
 801588a:	6822      	ldr	r2, [r4, #0]
 801588c:	f842 b003 	str.w	fp, [r2, r3]
 8015890:	f004 ff92 	bl	801a7b8 <uxr_seq_num_add>
 8015894:	9b03      	ldr	r3, [sp, #12]
 8015896:	f108 0104 	add.w	r1, r8, #4
 801589a:	4607      	mov	r7, r0
 801589c:	f1a3 0208 	sub.w	r2, r3, #8
 80158a0:	4630      	mov	r0, r6
 80158a2:	4449      	add	r1, r9
 80158a4:	eba2 0208 	sub.w	r2, r2, r8
 80158a8:	f7f9 f912 	bl	800ead0 <ucdr_init_buffer>
 80158ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80158ae:	2107      	movs	r1, #7
 80158b0:	81e7      	strh	r7, [r4, #14]
 80158b2:	1d1a      	adds	r2, r3, #4
 80158b4:	2300      	movs	r3, #0
 80158b6:	4630      	mov	r0, r6
 80158b8:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80158bc:	bf28      	it	cs
 80158be:	461a      	movcs	r2, r3
 80158c0:	b292      	uxth	r2, r2
 80158c2:	f7ff fe55 	bl	8015570 <uxr_buffer_submessage_header>
 80158c6:	aa07      	add	r2, sp, #28
 80158c8:	9904      	ldr	r1, [sp, #16]
 80158ca:	4628      	mov	r0, r5
 80158cc:	f7ff f864 	bl	8014998 <uxr_init_base_object_request>
 80158d0:	4604      	mov	r4, r0
 80158d2:	b320      	cbz	r0, 801591e <uxr_prepare_output_stream_fragmented+0x14a>
 80158d4:	a907      	add	r1, sp, #28
 80158d6:	4630      	mov	r0, r6
 80158d8:	f001 f828 	bl	801692c <uxr_serialize_WRITE_DATA_Payload_Data>
 80158dc:	4630      	mov	r0, r6
 80158de:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80158e2:	1a52      	subs	r2, r2, r1
 80158e4:	f7f9 f8f4 	bl	800ead0 <ucdr_init_buffer>
 80158e8:	9b05      	ldr	r3, [sp, #20]
 80158ea:	9a02      	ldr	r2, [sp, #8]
 80158ec:	4630      	mov	r0, r6
 80158ee:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 80158f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80158f4:	f8c5 20c4 	str.w	r2, [r5, #196]	; 0xc4
 80158f8:	462a      	mov	r2, r5
 80158fa:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 80158fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8015900:	4918      	ldr	r1, [pc, #96]	; (8015964 <uxr_prepare_output_stream_fragmented+0x190>)
 8015902:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8015906:	f7f9 f8b7 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 801590a:	4620      	mov	r0, r4
 801590c:	b011      	add	sp, #68	; 0x44
 801590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015912:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015914:	4628      	mov	r0, r5
 8015916:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015918:	4798      	blx	r3
 801591a:	b920      	cbnz	r0, 8015926 <uxr_prepare_output_stream_fragmented+0x152>
 801591c:	2400      	movs	r4, #0
 801591e:	4620      	mov	r0, r4
 8015920:	b011      	add	sp, #68	; 0x44
 8015922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015926:	4620      	mov	r0, r4
 8015928:	f004 ff24 	bl	801a774 <get_available_free_slots>
 801592c:	2800      	cmp	r0, #0
 801592e:	f47f af6b 	bne.w	8015808 <uxr_prepare_output_stream_fragmented+0x34>
 8015932:	e7f3      	b.n	801591c <uxr_prepare_output_stream_fragmented+0x148>
 8015934:	4638      	mov	r0, r7
 8015936:	2101      	movs	r1, #1
 8015938:	f004 ff3e 	bl	801a7b8 <uxr_seq_num_add>
 801593c:	8922      	ldrh	r2, [r4, #8]
 801593e:	6863      	ldr	r3, [r4, #4]
 8015940:	4607      	mov	r7, r0
 8015942:	fbb3 f9f2 	udiv	r9, r3, r2
 8015946:	fbb0 f3f2 	udiv	r3, r0, r2
 801594a:	fb02 0313 	mls	r3, r2, r3, r0
 801594e:	b29b      	uxth	r3, r3
 8015950:	fb03 f909 	mul.w	r9, r3, r9
 8015954:	6823      	ldr	r3, [r4, #0]
 8015956:	f109 0904 	add.w	r9, r9, #4
 801595a:	4499      	add	r9, r3
 801595c:	7b23      	ldrb	r3, [r4, #12]
 801595e:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8015962:	e76a      	b.n	801583a <uxr_prepare_output_stream_fragmented+0x66>
 8015964:	08015661 	.word	0x08015661

08015968 <uxr_serialize_message_header>:
 8015968:	b5f0      	push	{r4, r5, r6, r7, lr}
 801596a:	4616      	mov	r6, r2
 801596c:	b083      	sub	sp, #12
 801596e:	4604      	mov	r4, r0
 8015970:	460d      	mov	r5, r1
 8015972:	9301      	str	r3, [sp, #4]
 8015974:	9f08      	ldr	r7, [sp, #32]
 8015976:	f7f7 fdd3 	bl	800d520 <ucdr_serialize_uint8_t>
 801597a:	4631      	mov	r1, r6
 801597c:	4620      	mov	r0, r4
 801597e:	f7f7 fdcf 	bl	800d520 <ucdr_serialize_uint8_t>
 8015982:	9a01      	ldr	r2, [sp, #4]
 8015984:	2101      	movs	r1, #1
 8015986:	4620      	mov	r0, r4
 8015988:	f7f7 fe76 	bl	800d678 <ucdr_serialize_endian_uint16_t>
 801598c:	062b      	lsls	r3, r5, #24
 801598e:	d501      	bpl.n	8015994 <uxr_serialize_message_header+0x2c>
 8015990:	b003      	add	sp, #12
 8015992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015994:	2204      	movs	r2, #4
 8015996:	4639      	mov	r1, r7
 8015998:	4620      	mov	r0, r4
 801599a:	b003      	add	sp, #12
 801599c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80159a0:	f7fd ba6e 	b.w	8012e80 <ucdr_serialize_array_uint8_t>

080159a4 <uxr_deserialize_message_header>:
 80159a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80159a6:	4616      	mov	r6, r2
 80159a8:	b083      	sub	sp, #12
 80159aa:	4604      	mov	r4, r0
 80159ac:	460d      	mov	r5, r1
 80159ae:	9301      	str	r3, [sp, #4]
 80159b0:	9f08      	ldr	r7, [sp, #32]
 80159b2:	f7f7 fdcb 	bl	800d54c <ucdr_deserialize_uint8_t>
 80159b6:	4631      	mov	r1, r6
 80159b8:	4620      	mov	r0, r4
 80159ba:	f7f7 fdc7 	bl	800d54c <ucdr_deserialize_uint8_t>
 80159be:	9a01      	ldr	r2, [sp, #4]
 80159c0:	2101      	movs	r1, #1
 80159c2:	4620      	mov	r0, r4
 80159c4:	f7f7 ff4c 	bl	800d860 <ucdr_deserialize_endian_uint16_t>
 80159c8:	f995 3000 	ldrsb.w	r3, [r5]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	da01      	bge.n	80159d4 <uxr_deserialize_message_header+0x30>
 80159d0:	b003      	add	sp, #12
 80159d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159d4:	2204      	movs	r2, #4
 80159d6:	4639      	mov	r1, r7
 80159d8:	4620      	mov	r0, r4
 80159da:	b003      	add	sp, #12
 80159dc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80159e0:	f7fd bab2 	b.w	8012f48 <ucdr_deserialize_array_uint8_t>

080159e4 <uxr_serialize_submessage_header>:
 80159e4:	b530      	push	{r4, r5, lr}
 80159e6:	4615      	mov	r5, r2
 80159e8:	b083      	sub	sp, #12
 80159ea:	4604      	mov	r4, r0
 80159ec:	9301      	str	r3, [sp, #4]
 80159ee:	f7f7 fd97 	bl	800d520 <ucdr_serialize_uint8_t>
 80159f2:	4629      	mov	r1, r5
 80159f4:	4620      	mov	r0, r4
 80159f6:	f7f7 fd93 	bl	800d520 <ucdr_serialize_uint8_t>
 80159fa:	9a01      	ldr	r2, [sp, #4]
 80159fc:	2101      	movs	r1, #1
 80159fe:	4620      	mov	r0, r4
 8015a00:	b003      	add	sp, #12
 8015a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a06:	f7f7 be37 	b.w	800d678 <ucdr_serialize_endian_uint16_t>
 8015a0a:	bf00      	nop

08015a0c <uxr_deserialize_submessage_header>:
 8015a0c:	b530      	push	{r4, r5, lr}
 8015a0e:	4615      	mov	r5, r2
 8015a10:	b083      	sub	sp, #12
 8015a12:	4604      	mov	r4, r0
 8015a14:	9301      	str	r3, [sp, #4]
 8015a16:	f7f7 fd99 	bl	800d54c <ucdr_deserialize_uint8_t>
 8015a1a:	4629      	mov	r1, r5
 8015a1c:	4620      	mov	r0, r4
 8015a1e:	f7f7 fd95 	bl	800d54c <ucdr_deserialize_uint8_t>
 8015a22:	9a01      	ldr	r2, [sp, #4]
 8015a24:	2101      	movs	r1, #1
 8015a26:	4620      	mov	r0, r4
 8015a28:	b003      	add	sp, #12
 8015a2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015a2e:	f7f7 bf17 	b.w	800d860 <ucdr_deserialize_endian_uint16_t>
 8015a32:	bf00      	nop

08015a34 <uxr_serialize_CLIENT_Representation>:
 8015a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a38:	2204      	movs	r2, #4
 8015a3a:	460e      	mov	r6, r1
 8015a3c:	4605      	mov	r5, r0
 8015a3e:	f7fd fa1f 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8015a42:	4607      	mov	r7, r0
 8015a44:	2202      	movs	r2, #2
 8015a46:	1d31      	adds	r1, r6, #4
 8015a48:	4628      	mov	r0, r5
 8015a4a:	f7fd fa19 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8015a4e:	4038      	ands	r0, r7
 8015a50:	2202      	movs	r2, #2
 8015a52:	1db1      	adds	r1, r6, #6
 8015a54:	b2c7      	uxtb	r7, r0
 8015a56:	4628      	mov	r0, r5
 8015a58:	f7fd fa12 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8015a5c:	2204      	movs	r2, #4
 8015a5e:	4007      	ands	r7, r0
 8015a60:	f106 0108 	add.w	r1, r6, #8
 8015a64:	4628      	mov	r0, r5
 8015a66:	f7fd fa0b 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8015a6a:	4007      	ands	r7, r0
 8015a6c:	7b31      	ldrb	r1, [r6, #12]
 8015a6e:	4628      	mov	r0, r5
 8015a70:	f7f7 fd56 	bl	800d520 <ucdr_serialize_uint8_t>
 8015a74:	7b71      	ldrb	r1, [r6, #13]
 8015a76:	4007      	ands	r7, r0
 8015a78:	4628      	mov	r0, r5
 8015a7a:	f7f7 fd23 	bl	800d4c4 <ucdr_serialize_bool>
 8015a7e:	7b73      	ldrb	r3, [r6, #13]
 8015a80:	ea07 0800 	and.w	r8, r7, r0
 8015a84:	b93b      	cbnz	r3, 8015a96 <uxr_serialize_CLIENT_Representation+0x62>
 8015a86:	8bb1      	ldrh	r1, [r6, #28]
 8015a88:	4628      	mov	r0, r5
 8015a8a:	f7f7 fd75 	bl	800d578 <ucdr_serialize_uint16_t>
 8015a8e:	ea08 0000 	and.w	r0, r8, r0
 8015a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a96:	6931      	ldr	r1, [r6, #16]
 8015a98:	4628      	mov	r0, r5
 8015a9a:	f7f7 ff57 	bl	800d94c <ucdr_serialize_uint32_t>
 8015a9e:	6933      	ldr	r3, [r6, #16]
 8015aa0:	b1e3      	cbz	r3, 8015adc <uxr_serialize_CLIENT_Representation+0xa8>
 8015aa2:	b1c0      	cbz	r0, 8015ad6 <uxr_serialize_CLIENT_Representation+0xa2>
 8015aa4:	4637      	mov	r7, r6
 8015aa6:	f04f 0900 	mov.w	r9, #0
 8015aaa:	e000      	b.n	8015aae <uxr_serialize_CLIENT_Representation+0x7a>
 8015aac:	b19c      	cbz	r4, 8015ad6 <uxr_serialize_CLIENT_Representation+0xa2>
 8015aae:	6979      	ldr	r1, [r7, #20]
 8015ab0:	4628      	mov	r0, r5
 8015ab2:	f004 f91d 	bl	8019cf0 <ucdr_serialize_string>
 8015ab6:	69b9      	ldr	r1, [r7, #24]
 8015ab8:	4604      	mov	r4, r0
 8015aba:	4628      	mov	r0, r5
 8015abc:	f004 f918 	bl	8019cf0 <ucdr_serialize_string>
 8015ac0:	f109 0901 	add.w	r9, r9, #1
 8015ac4:	6933      	ldr	r3, [r6, #16]
 8015ac6:	4004      	ands	r4, r0
 8015ac8:	3708      	adds	r7, #8
 8015aca:	4599      	cmp	r9, r3
 8015acc:	b2e4      	uxtb	r4, r4
 8015ace:	d3ed      	bcc.n	8015aac <uxr_serialize_CLIENT_Representation+0x78>
 8015ad0:	ea08 0804 	and.w	r8, r8, r4
 8015ad4:	e7d7      	b.n	8015a86 <uxr_serialize_CLIENT_Representation+0x52>
 8015ad6:	f04f 0800 	mov.w	r8, #0
 8015ada:	e7d4      	b.n	8015a86 <uxr_serialize_CLIENT_Representation+0x52>
 8015adc:	ea08 0800 	and.w	r8, r8, r0
 8015ae0:	e7d1      	b.n	8015a86 <uxr_serialize_CLIENT_Representation+0x52>
 8015ae2:	bf00      	nop

08015ae4 <uxr_deserialize_CLIENT_Representation>:
 8015ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ae8:	2204      	movs	r2, #4
 8015aea:	460c      	mov	r4, r1
 8015aec:	4605      	mov	r5, r0
 8015aee:	f7fd fa2b 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8015af2:	4607      	mov	r7, r0
 8015af4:	2202      	movs	r2, #2
 8015af6:	1d21      	adds	r1, r4, #4
 8015af8:	4628      	mov	r0, r5
 8015afa:	f7fd fa25 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8015afe:	4038      	ands	r0, r7
 8015b00:	2202      	movs	r2, #2
 8015b02:	1da1      	adds	r1, r4, #6
 8015b04:	b2c6      	uxtb	r6, r0
 8015b06:	4628      	mov	r0, r5
 8015b08:	f7fd fa1e 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8015b0c:	2204      	movs	r2, #4
 8015b0e:	4006      	ands	r6, r0
 8015b10:	f104 0108 	add.w	r1, r4, #8
 8015b14:	4628      	mov	r0, r5
 8015b16:	f7fd fa17 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8015b1a:	4006      	ands	r6, r0
 8015b1c:	f104 010c 	add.w	r1, r4, #12
 8015b20:	4628      	mov	r0, r5
 8015b22:	f7f7 fd13 	bl	800d54c <ucdr_deserialize_uint8_t>
 8015b26:	f104 010d 	add.w	r1, r4, #13
 8015b2a:	ea06 0700 	and.w	r7, r6, r0
 8015b2e:	4628      	mov	r0, r5
 8015b30:	f7f7 fcde 	bl	800d4f0 <ucdr_deserialize_bool>
 8015b34:	7b63      	ldrb	r3, [r4, #13]
 8015b36:	4007      	ands	r7, r0
 8015b38:	b93b      	cbnz	r3, 8015b4a <uxr_deserialize_CLIENT_Representation+0x66>
 8015b3a:	f104 011c 	add.w	r1, r4, #28
 8015b3e:	4628      	mov	r0, r5
 8015b40:	f7f7 fe1a 	bl	800d778 <ucdr_deserialize_uint16_t>
 8015b44:	4038      	ands	r0, r7
 8015b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b4a:	f104 0110 	add.w	r1, r4, #16
 8015b4e:	4628      	mov	r0, r5
 8015b50:	f7f8 f82c 	bl	800dbac <ucdr_deserialize_uint32_t>
 8015b54:	6923      	ldr	r3, [r4, #16]
 8015b56:	2b01      	cmp	r3, #1
 8015b58:	d903      	bls.n	8015b62 <uxr_deserialize_CLIENT_Representation+0x7e>
 8015b5a:	2301      	movs	r3, #1
 8015b5c:	2700      	movs	r7, #0
 8015b5e:	75ab      	strb	r3, [r5, #22]
 8015b60:	e7eb      	b.n	8015b3a <uxr_deserialize_CLIENT_Representation+0x56>
 8015b62:	b30b      	cbz	r3, 8015ba8 <uxr_deserialize_CLIENT_Representation+0xc4>
 8015b64:	b1f0      	cbz	r0, 8015ba4 <uxr_deserialize_CLIENT_Representation+0xc0>
 8015b66:	46a0      	mov	r8, r4
 8015b68:	f04f 0900 	mov.w	r9, #0
 8015b6c:	e000      	b.n	8015b70 <uxr_deserialize_CLIENT_Representation+0x8c>
 8015b6e:	b1ce      	cbz	r6, 8015ba4 <uxr_deserialize_CLIENT_Representation+0xc0>
 8015b70:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8015b74:	f108 0808 	add.w	r8, r8, #8
 8015b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015b7c:	4628      	mov	r0, r5
 8015b7e:	f004 f8c7 	bl	8019d10 <ucdr_deserialize_string>
 8015b82:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015b86:	4606      	mov	r6, r0
 8015b88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015b8c:	4628      	mov	r0, r5
 8015b8e:	f109 0901 	add.w	r9, r9, #1
 8015b92:	f004 f8bd 	bl	8019d10 <ucdr_deserialize_string>
 8015b96:	6923      	ldr	r3, [r4, #16]
 8015b98:	4006      	ands	r6, r0
 8015b9a:	4599      	cmp	r9, r3
 8015b9c:	b2f6      	uxtb	r6, r6
 8015b9e:	d3e6      	bcc.n	8015b6e <uxr_deserialize_CLIENT_Representation+0x8a>
 8015ba0:	4037      	ands	r7, r6
 8015ba2:	e7ca      	b.n	8015b3a <uxr_deserialize_CLIENT_Representation+0x56>
 8015ba4:	2700      	movs	r7, #0
 8015ba6:	e7c8      	b.n	8015b3a <uxr_deserialize_CLIENT_Representation+0x56>
 8015ba8:	4007      	ands	r7, r0
 8015baa:	e7c6      	b.n	8015b3a <uxr_deserialize_CLIENT_Representation+0x56>

08015bac <uxr_serialize_AGENT_Representation>:
 8015bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015bb0:	2204      	movs	r2, #4
 8015bb2:	460f      	mov	r7, r1
 8015bb4:	4605      	mov	r5, r0
 8015bb6:	f7fd f963 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8015bba:	4604      	mov	r4, r0
 8015bbc:	2202      	movs	r2, #2
 8015bbe:	1d39      	adds	r1, r7, #4
 8015bc0:	4628      	mov	r0, r5
 8015bc2:	f7fd f95d 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8015bc6:	4020      	ands	r0, r4
 8015bc8:	2202      	movs	r2, #2
 8015bca:	1db9      	adds	r1, r7, #6
 8015bcc:	b2c4      	uxtb	r4, r0
 8015bce:	4628      	mov	r0, r5
 8015bd0:	f7fd f956 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8015bd4:	7a39      	ldrb	r1, [r7, #8]
 8015bd6:	4004      	ands	r4, r0
 8015bd8:	4628      	mov	r0, r5
 8015bda:	f7f7 fc73 	bl	800d4c4 <ucdr_serialize_bool>
 8015bde:	7a3b      	ldrb	r3, [r7, #8]
 8015be0:	ea00 0804 	and.w	r8, r0, r4
 8015be4:	b913      	cbnz	r3, 8015bec <uxr_serialize_AGENT_Representation+0x40>
 8015be6:	4640      	mov	r0, r8
 8015be8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bec:	68f9      	ldr	r1, [r7, #12]
 8015bee:	4628      	mov	r0, r5
 8015bf0:	f7f7 feac 	bl	800d94c <ucdr_serialize_uint32_t>
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	b303      	cbz	r3, 8015c3a <uxr_serialize_AGENT_Representation+0x8e>
 8015bf8:	b1d0      	cbz	r0, 8015c30 <uxr_serialize_AGENT_Representation+0x84>
 8015bfa:	463e      	mov	r6, r7
 8015bfc:	f04f 0900 	mov.w	r9, #0
 8015c00:	e000      	b.n	8015c04 <uxr_serialize_AGENT_Representation+0x58>
 8015c02:	b1ac      	cbz	r4, 8015c30 <uxr_serialize_AGENT_Representation+0x84>
 8015c04:	6931      	ldr	r1, [r6, #16]
 8015c06:	4628      	mov	r0, r5
 8015c08:	f004 f872 	bl	8019cf0 <ucdr_serialize_string>
 8015c0c:	6971      	ldr	r1, [r6, #20]
 8015c0e:	4604      	mov	r4, r0
 8015c10:	4628      	mov	r0, r5
 8015c12:	f004 f86d 	bl	8019cf0 <ucdr_serialize_string>
 8015c16:	f109 0901 	add.w	r9, r9, #1
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	4004      	ands	r4, r0
 8015c1e:	3608      	adds	r6, #8
 8015c20:	4599      	cmp	r9, r3
 8015c22:	b2e4      	uxtb	r4, r4
 8015c24:	d3ed      	bcc.n	8015c02 <uxr_serialize_AGENT_Representation+0x56>
 8015c26:	ea08 0804 	and.w	r8, r8, r4
 8015c2a:	4640      	mov	r0, r8
 8015c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c30:	f04f 0800 	mov.w	r8, #0
 8015c34:	4640      	mov	r0, r8
 8015c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015c3a:	ea08 0800 	and.w	r8, r8, r0
 8015c3e:	e7d2      	b.n	8015be6 <uxr_serialize_AGENT_Representation+0x3a>

08015c40 <uxr_serialize_DATAWRITER_Representation>:
 8015c40:	b570      	push	{r4, r5, r6, lr}
 8015c42:	460d      	mov	r5, r1
 8015c44:	7809      	ldrb	r1, [r1, #0]
 8015c46:	4606      	mov	r6, r0
 8015c48:	f7f7 fc6a 	bl	800d520 <ucdr_serialize_uint8_t>
 8015c4c:	4604      	mov	r4, r0
 8015c4e:	b130      	cbz	r0, 8015c5e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015c50:	782b      	ldrb	r3, [r5, #0]
 8015c52:	2b02      	cmp	r3, #2
 8015c54:	d00c      	beq.n	8015c70 <uxr_serialize_DATAWRITER_Representation+0x30>
 8015c56:	2b03      	cmp	r3, #3
 8015c58:	d010      	beq.n	8015c7c <uxr_serialize_DATAWRITER_Representation+0x3c>
 8015c5a:	2b01      	cmp	r3, #1
 8015c5c:	d008      	beq.n	8015c70 <uxr_serialize_DATAWRITER_Representation+0x30>
 8015c5e:	2202      	movs	r2, #2
 8015c60:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8015c64:	4630      	mov	r0, r6
 8015c66:	f7fd f90b 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8015c6a:	4020      	ands	r0, r4
 8015c6c:	b2c0      	uxtb	r0, r0
 8015c6e:	bd70      	pop	{r4, r5, r6, pc}
 8015c70:	6869      	ldr	r1, [r5, #4]
 8015c72:	4630      	mov	r0, r6
 8015c74:	f004 f83c 	bl	8019cf0 <ucdr_serialize_string>
 8015c78:	4604      	mov	r4, r0
 8015c7a:	e7f0      	b.n	8015c5e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015c7c:	4629      	mov	r1, r5
 8015c7e:	4630      	mov	r0, r6
 8015c80:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8015c84:	3104      	adds	r1, #4
 8015c86:	f7f8 ffc3 	bl	800ec10 <ucdr_serialize_sequence_uint8_t>
 8015c8a:	4604      	mov	r4, r0
 8015c8c:	e7e7      	b.n	8015c5e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8015c8e:	bf00      	nop

08015c90 <uxr_serialize_ObjectVariant.part.0>:
 8015c90:	b570      	push	{r4, r5, r6, lr}
 8015c92:	780b      	ldrb	r3, [r1, #0]
 8015c94:	460c      	mov	r4, r1
 8015c96:	4605      	mov	r5, r0
 8015c98:	3b01      	subs	r3, #1
 8015c9a:	2b0d      	cmp	r3, #13
 8015c9c:	d854      	bhi.n	8015d48 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015c9e:	e8df f003 	tbb	[pc, r3]
 8015ca2:	0730      	.short	0x0730
 8015ca4:	07071b1b 	.word	0x07071b1b
 8015ca8:	0c530707 	.word	0x0c530707
 8015cac:	494e0c0c 	.word	0x494e0c0c
 8015cb0:	3104      	adds	r1, #4
 8015cb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cb6:	f7ff bfc3 	b.w	8015c40 <uxr_serialize_DATAWRITER_Representation>
 8015cba:	7909      	ldrb	r1, [r1, #4]
 8015cbc:	f7f7 fc30 	bl	800d520 <ucdr_serialize_uint8_t>
 8015cc0:	b1e8      	cbz	r0, 8015cfe <uxr_serialize_ObjectVariant.part.0+0x6e>
 8015cc2:	7923      	ldrb	r3, [r4, #4]
 8015cc4:	2b01      	cmp	r3, #1
 8015cc6:	d001      	beq.n	8015ccc <uxr_serialize_ObjectVariant.part.0+0x3c>
 8015cc8:	2b02      	cmp	r3, #2
 8015cca:	d13d      	bne.n	8015d48 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8015ccc:	68a1      	ldr	r1, [r4, #8]
 8015cce:	4628      	mov	r0, r5
 8015cd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015cd4:	f004 b80c 	b.w	8019cf0 <ucdr_serialize_string>
 8015cd8:	7909      	ldrb	r1, [r1, #4]
 8015cda:	f7f7 fc21 	bl	800d520 <ucdr_serialize_uint8_t>
 8015cde:	4606      	mov	r6, r0
 8015ce0:	b120      	cbz	r0, 8015cec <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015ce2:	7923      	ldrb	r3, [r4, #4]
 8015ce4:	2b02      	cmp	r3, #2
 8015ce6:	d039      	beq.n	8015d5c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8015ce8:	2b03      	cmp	r3, #3
 8015cea:	d02f      	beq.n	8015d4c <uxr_serialize_ObjectVariant.part.0+0xbc>
 8015cec:	2202      	movs	r2, #2
 8015cee:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8015cf2:	4628      	mov	r0, r5
 8015cf4:	f7fd f8c4 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8015cf8:	4030      	ands	r0, r6
 8015cfa:	b2c0      	uxtb	r0, r0
 8015cfc:	bd70      	pop	{r4, r5, r6, pc}
 8015cfe:	2000      	movs	r0, #0
 8015d00:	bd70      	pop	{r4, r5, r6, pc}
 8015d02:	7909      	ldrb	r1, [r1, #4]
 8015d04:	f7f7 fc0c 	bl	800d520 <ucdr_serialize_uint8_t>
 8015d08:	4606      	mov	r6, r0
 8015d0a:	b158      	cbz	r0, 8015d24 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015d0c:	7923      	ldrb	r3, [r4, #4]
 8015d0e:	2b02      	cmp	r3, #2
 8015d10:	d003      	beq.n	8015d1a <uxr_serialize_ObjectVariant.part.0+0x8a>
 8015d12:	2b03      	cmp	r3, #3
 8015d14:	d028      	beq.n	8015d68 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8015d16:	2b01      	cmp	r3, #1
 8015d18:	d104      	bne.n	8015d24 <uxr_serialize_ObjectVariant.part.0+0x94>
 8015d1a:	68a1      	ldr	r1, [r4, #8]
 8015d1c:	4628      	mov	r0, r5
 8015d1e:	f003 ffe7 	bl	8019cf0 <ucdr_serialize_string>
 8015d22:	4606      	mov	r6, r0
 8015d24:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 8015d28:	4628      	mov	r0, r5
 8015d2a:	f7f8 f935 	bl	800df98 <ucdr_serialize_int16_t>
 8015d2e:	4030      	ands	r0, r6
 8015d30:	b2c0      	uxtb	r0, r0
 8015d32:	bd70      	pop	{r4, r5, r6, pc}
 8015d34:	3104      	adds	r1, #4
 8015d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d3a:	f7ff be7b 	b.w	8015a34 <uxr_serialize_CLIENT_Representation>
 8015d3e:	3104      	adds	r1, #4
 8015d40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015d44:	f7ff bf32 	b.w	8015bac <uxr_serialize_AGENT_Representation>
 8015d48:	2001      	movs	r0, #1
 8015d4a:	bd70      	pop	{r4, r5, r6, pc}
 8015d4c:	68a2      	ldr	r2, [r4, #8]
 8015d4e:	f104 010c 	add.w	r1, r4, #12
 8015d52:	4628      	mov	r0, r5
 8015d54:	f7f8 ff5c 	bl	800ec10 <ucdr_serialize_sequence_uint8_t>
 8015d58:	4606      	mov	r6, r0
 8015d5a:	e7c7      	b.n	8015cec <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015d5c:	68a1      	ldr	r1, [r4, #8]
 8015d5e:	4628      	mov	r0, r5
 8015d60:	f003 ffc6 	bl	8019cf0 <ucdr_serialize_string>
 8015d64:	4606      	mov	r6, r0
 8015d66:	e7c1      	b.n	8015cec <uxr_serialize_ObjectVariant.part.0+0x5c>
 8015d68:	68a2      	ldr	r2, [r4, #8]
 8015d6a:	f104 010c 	add.w	r1, r4, #12
 8015d6e:	4628      	mov	r0, r5
 8015d70:	f7f8 ff4e 	bl	800ec10 <ucdr_serialize_sequence_uint8_t>
 8015d74:	4606      	mov	r6, r0
 8015d76:	e7d5      	b.n	8015d24 <uxr_serialize_ObjectVariant.part.0+0x94>

08015d78 <uxr_deserialize_DATAWRITER_Representation>:
 8015d78:	b570      	push	{r4, r5, r6, lr}
 8015d7a:	4606      	mov	r6, r0
 8015d7c:	460d      	mov	r5, r1
 8015d7e:	f7f7 fbe5 	bl	800d54c <ucdr_deserialize_uint8_t>
 8015d82:	4604      	mov	r4, r0
 8015d84:	b130      	cbz	r0, 8015d94 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015d86:	782b      	ldrb	r3, [r5, #0]
 8015d88:	2b02      	cmp	r3, #2
 8015d8a:	d00c      	beq.n	8015da6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015d8c:	2b03      	cmp	r3, #3
 8015d8e:	d012      	beq.n	8015db6 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8015d90:	2b01      	cmp	r3, #1
 8015d92:	d008      	beq.n	8015da6 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8015d94:	2202      	movs	r2, #2
 8015d96:	f505 7102 	add.w	r1, r5, #520	; 0x208
 8015d9a:	4630      	mov	r0, r6
 8015d9c:	f7fd f8d4 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8015da0:	4020      	ands	r0, r4
 8015da2:	b2c0      	uxtb	r0, r0
 8015da4:	bd70      	pop	{r4, r5, r6, pc}
 8015da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015daa:	6869      	ldr	r1, [r5, #4]
 8015dac:	4630      	mov	r0, r6
 8015dae:	f003 ffaf 	bl	8019d10 <ucdr_deserialize_string>
 8015db2:	4604      	mov	r4, r0
 8015db4:	e7ee      	b.n	8015d94 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015db6:	1d2b      	adds	r3, r5, #4
 8015db8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015dbc:	f105 0108 	add.w	r1, r5, #8
 8015dc0:	4630      	mov	r0, r6
 8015dc2:	f7f8 ff37 	bl	800ec34 <ucdr_deserialize_sequence_uint8_t>
 8015dc6:	4604      	mov	r4, r0
 8015dc8:	e7e4      	b.n	8015d94 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8015dca:	bf00      	nop

08015dcc <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8015dcc:	b570      	push	{r4, r5, r6, lr}
 8015dce:	460d      	mov	r5, r1
 8015dd0:	7809      	ldrb	r1, [r1, #0]
 8015dd2:	4606      	mov	r6, r0
 8015dd4:	f7f7 fb76 	bl	800d4c4 <ucdr_serialize_bool>
 8015dd8:	782b      	ldrb	r3, [r5, #0]
 8015dda:	4604      	mov	r4, r0
 8015ddc:	b94b      	cbnz	r3, 8015df2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8015dde:	7a29      	ldrb	r1, [r5, #8]
 8015de0:	4630      	mov	r0, r6
 8015de2:	f7f7 fb6f 	bl	800d4c4 <ucdr_serialize_bool>
 8015de6:	7a2b      	ldrb	r3, [r5, #8]
 8015de8:	4004      	ands	r4, r0
 8015dea:	b2e4      	uxtb	r4, r4
 8015dec:	b943      	cbnz	r3, 8015e00 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8015dee:	4620      	mov	r0, r4
 8015df0:	bd70      	pop	{r4, r5, r6, pc}
 8015df2:	6869      	ldr	r1, [r5, #4]
 8015df4:	4630      	mov	r0, r6
 8015df6:	f003 ff7b 	bl	8019cf0 <ucdr_serialize_string>
 8015dfa:	4004      	ands	r4, r0
 8015dfc:	b2e4      	uxtb	r4, r4
 8015dfe:	e7ee      	b.n	8015dde <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8015e00:	68e9      	ldr	r1, [r5, #12]
 8015e02:	4630      	mov	r0, r6
 8015e04:	f003 ff74 	bl	8019cf0 <ucdr_serialize_string>
 8015e08:	4004      	ands	r4, r0
 8015e0a:	4620      	mov	r0, r4
 8015e0c:	bd70      	pop	{r4, r5, r6, pc}
 8015e0e:	bf00      	nop

08015e10 <uxr_serialize_OBJK_Topic_Binary>:
 8015e10:	b570      	push	{r4, r5, r6, lr}
 8015e12:	460d      	mov	r5, r1
 8015e14:	4606      	mov	r6, r0
 8015e16:	6809      	ldr	r1, [r1, #0]
 8015e18:	f003 ff6a 	bl	8019cf0 <ucdr_serialize_string>
 8015e1c:	4604      	mov	r4, r0
 8015e1e:	7929      	ldrb	r1, [r5, #4]
 8015e20:	4630      	mov	r0, r6
 8015e22:	f7f7 fb4f 	bl	800d4c4 <ucdr_serialize_bool>
 8015e26:	792b      	ldrb	r3, [r5, #4]
 8015e28:	4004      	ands	r4, r0
 8015e2a:	b2e4      	uxtb	r4, r4
 8015e2c:	b943      	cbnz	r3, 8015e40 <uxr_serialize_OBJK_Topic_Binary+0x30>
 8015e2e:	7b29      	ldrb	r1, [r5, #12]
 8015e30:	4630      	mov	r0, r6
 8015e32:	f7f7 fb47 	bl	800d4c4 <ucdr_serialize_bool>
 8015e36:	7b2b      	ldrb	r3, [r5, #12]
 8015e38:	4004      	ands	r4, r0
 8015e3a:	b93b      	cbnz	r3, 8015e4c <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8015e3c:	4620      	mov	r0, r4
 8015e3e:	bd70      	pop	{r4, r5, r6, pc}
 8015e40:	68a9      	ldr	r1, [r5, #8]
 8015e42:	4630      	mov	r0, r6
 8015e44:	f003 ff54 	bl	8019cf0 <ucdr_serialize_string>
 8015e48:	4004      	ands	r4, r0
 8015e4a:	e7f0      	b.n	8015e2e <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8015e4c:	6929      	ldr	r1, [r5, #16]
 8015e4e:	4630      	mov	r0, r6
 8015e50:	f003 ff4e 	bl	8019cf0 <ucdr_serialize_string>
 8015e54:	4004      	ands	r4, r0
 8015e56:	b2e4      	uxtb	r4, r4
 8015e58:	4620      	mov	r0, r4
 8015e5a:	bd70      	pop	{r4, r5, r6, pc}

08015e5c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8015e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e60:	460c      	mov	r4, r1
 8015e62:	7809      	ldrb	r1, [r1, #0]
 8015e64:	4606      	mov	r6, r0
 8015e66:	f7f7 fb2d 	bl	800d4c4 <ucdr_serialize_bool>
 8015e6a:	7823      	ldrb	r3, [r4, #0]
 8015e6c:	4605      	mov	r5, r0
 8015e6e:	b96b      	cbnz	r3, 8015e8c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8015e70:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8015e74:	4630      	mov	r0, r6
 8015e76:	f7f7 fb25 	bl	800d4c4 <ucdr_serialize_bool>
 8015e7a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015e7e:	4005      	ands	r5, r0
 8015e80:	b2ed      	uxtb	r5, r5
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d169      	bne.n	8015f5a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8015e86:	4628      	mov	r0, r5
 8015e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e8c:	6861      	ldr	r1, [r4, #4]
 8015e8e:	4630      	mov	r0, r6
 8015e90:	f7f7 fd5c 	bl	800d94c <ucdr_serialize_uint32_t>
 8015e94:	6863      	ldr	r3, [r4, #4]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d06b      	beq.n	8015f72 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	d067      	beq.n	8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015e9e:	68a1      	ldr	r1, [r4, #8]
 8015ea0:	4630      	mov	r0, r6
 8015ea2:	f003 ff25 	bl	8019cf0 <ucdr_serialize_string>
 8015ea6:	6863      	ldr	r3, [r4, #4]
 8015ea8:	2b01      	cmp	r3, #1
 8015eaa:	d953      	bls.n	8015f54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015eac:	2800      	cmp	r0, #0
 8015eae:	d05e      	beq.n	8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015eb0:	68e1      	ldr	r1, [r4, #12]
 8015eb2:	4630      	mov	r0, r6
 8015eb4:	f003 ff1c 	bl	8019cf0 <ucdr_serialize_string>
 8015eb8:	6863      	ldr	r3, [r4, #4]
 8015eba:	2b02      	cmp	r3, #2
 8015ebc:	d94a      	bls.n	8015f54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015ebe:	2800      	cmp	r0, #0
 8015ec0:	d055      	beq.n	8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015ec2:	6921      	ldr	r1, [r4, #16]
 8015ec4:	4630      	mov	r0, r6
 8015ec6:	f003 ff13 	bl	8019cf0 <ucdr_serialize_string>
 8015eca:	6863      	ldr	r3, [r4, #4]
 8015ecc:	2b03      	cmp	r3, #3
 8015ece:	d941      	bls.n	8015f54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015ed0:	2800      	cmp	r0, #0
 8015ed2:	d04c      	beq.n	8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015ed4:	6961      	ldr	r1, [r4, #20]
 8015ed6:	4630      	mov	r0, r6
 8015ed8:	f003 ff0a 	bl	8019cf0 <ucdr_serialize_string>
 8015edc:	6863      	ldr	r3, [r4, #4]
 8015ede:	2b04      	cmp	r3, #4
 8015ee0:	d938      	bls.n	8015f54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015ee2:	2800      	cmp	r0, #0
 8015ee4:	d043      	beq.n	8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015ee6:	69a1      	ldr	r1, [r4, #24]
 8015ee8:	4630      	mov	r0, r6
 8015eea:	f003 ff01 	bl	8019cf0 <ucdr_serialize_string>
 8015eee:	6863      	ldr	r3, [r4, #4]
 8015ef0:	2b05      	cmp	r3, #5
 8015ef2:	d92f      	bls.n	8015f54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015ef4:	2800      	cmp	r0, #0
 8015ef6:	d03a      	beq.n	8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015ef8:	69e1      	ldr	r1, [r4, #28]
 8015efa:	4630      	mov	r0, r6
 8015efc:	f003 fef8 	bl	8019cf0 <ucdr_serialize_string>
 8015f00:	6863      	ldr	r3, [r4, #4]
 8015f02:	2b06      	cmp	r3, #6
 8015f04:	d926      	bls.n	8015f54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015f06:	b390      	cbz	r0, 8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015f08:	6a21      	ldr	r1, [r4, #32]
 8015f0a:	4630      	mov	r0, r6
 8015f0c:	f003 fef0 	bl	8019cf0 <ucdr_serialize_string>
 8015f10:	6863      	ldr	r3, [r4, #4]
 8015f12:	2b07      	cmp	r3, #7
 8015f14:	d91e      	bls.n	8015f54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015f16:	b350      	cbz	r0, 8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015f18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015f1a:	4630      	mov	r0, r6
 8015f1c:	f003 fee8 	bl	8019cf0 <ucdr_serialize_string>
 8015f20:	6863      	ldr	r3, [r4, #4]
 8015f22:	2b08      	cmp	r3, #8
 8015f24:	d916      	bls.n	8015f54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015f26:	b310      	cbz	r0, 8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015f28:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8015f2a:	4630      	mov	r0, r6
 8015f2c:	f003 fee0 	bl	8019cf0 <ucdr_serialize_string>
 8015f30:	6863      	ldr	r3, [r4, #4]
 8015f32:	2b09      	cmp	r3, #9
 8015f34:	d90e      	bls.n	8015f54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8015f36:	b1d0      	cbz	r0, 8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015f38:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8015f3c:	2709      	movs	r7, #9
 8015f3e:	e000      	b.n	8015f42 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8015f40:	b1a8      	cbz	r0, 8015f6e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8015f42:	f858 1b04 	ldr.w	r1, [r8], #4
 8015f46:	4630      	mov	r0, r6
 8015f48:	f003 fed2 	bl	8019cf0 <ucdr_serialize_string>
 8015f4c:	3701      	adds	r7, #1
 8015f4e:	6862      	ldr	r2, [r4, #4]
 8015f50:	4297      	cmp	r7, r2
 8015f52:	d3f5      	bcc.n	8015f40 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8015f54:	4005      	ands	r5, r0
 8015f56:	b2ed      	uxtb	r5, r5
 8015f58:	e78a      	b.n	8015e70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8015f5c:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8015f60:	4630      	mov	r0, r6
 8015f62:	f7f8 fe55 	bl	800ec10 <ucdr_serialize_sequence_uint8_t>
 8015f66:	4005      	ands	r5, r0
 8015f68:	4628      	mov	r0, r5
 8015f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f6e:	2500      	movs	r5, #0
 8015f70:	e77e      	b.n	8015e70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8015f72:	4028      	ands	r0, r5
 8015f74:	b2c5      	uxtb	r5, r0
 8015f76:	e77b      	b.n	8015e70 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08015f78 <uxr_serialize_OBJK_Publisher_Binary>:
 8015f78:	b570      	push	{r4, r5, r6, lr}
 8015f7a:	460d      	mov	r5, r1
 8015f7c:	7809      	ldrb	r1, [r1, #0]
 8015f7e:	4606      	mov	r6, r0
 8015f80:	f7f7 faa0 	bl	800d4c4 <ucdr_serialize_bool>
 8015f84:	782b      	ldrb	r3, [r5, #0]
 8015f86:	4604      	mov	r4, r0
 8015f88:	b94b      	cbnz	r3, 8015f9e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8015f8a:	7a29      	ldrb	r1, [r5, #8]
 8015f8c:	4630      	mov	r0, r6
 8015f8e:	f7f7 fa99 	bl	800d4c4 <ucdr_serialize_bool>
 8015f92:	7a2b      	ldrb	r3, [r5, #8]
 8015f94:	4004      	ands	r4, r0
 8015f96:	b2e4      	uxtb	r4, r4
 8015f98:	b943      	cbnz	r3, 8015fac <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8015f9a:	4620      	mov	r0, r4
 8015f9c:	bd70      	pop	{r4, r5, r6, pc}
 8015f9e:	6869      	ldr	r1, [r5, #4]
 8015fa0:	4630      	mov	r0, r6
 8015fa2:	f003 fea5 	bl	8019cf0 <ucdr_serialize_string>
 8015fa6:	4004      	ands	r4, r0
 8015fa8:	b2e4      	uxtb	r4, r4
 8015faa:	e7ee      	b.n	8015f8a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8015fac:	f105 010c 	add.w	r1, r5, #12
 8015fb0:	4630      	mov	r0, r6
 8015fb2:	f7ff ff53 	bl	8015e5c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8015fb6:	4004      	ands	r4, r0
 8015fb8:	4620      	mov	r0, r4
 8015fba:	bd70      	pop	{r4, r5, r6, pc}

08015fbc <uxr_serialize_OBJK_Subscriber_Binary_Qos>:
 8015fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fc0:	460c      	mov	r4, r1
 8015fc2:	7809      	ldrb	r1, [r1, #0]
 8015fc4:	4606      	mov	r6, r0
 8015fc6:	f7f7 fa7d 	bl	800d4c4 <ucdr_serialize_bool>
 8015fca:	7823      	ldrb	r3, [r4, #0]
 8015fcc:	4605      	mov	r5, r0
 8015fce:	b96b      	cbnz	r3, 8015fec <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x30>
 8015fd0:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 8015fd4:	4630      	mov	r0, r6
 8015fd6:	f7f7 fa75 	bl	800d4c4 <ucdr_serialize_bool>
 8015fda:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8015fde:	4005      	ands	r5, r0
 8015fe0:	b2ed      	uxtb	r5, r5
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d169      	bne.n	80160ba <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xfe>
 8015fe6:	4628      	mov	r0, r5
 8015fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fec:	6861      	ldr	r1, [r4, #4]
 8015fee:	4630      	mov	r0, r6
 8015ff0:	f7f7 fcac 	bl	800d94c <ucdr_serialize_uint32_t>
 8015ff4:	6863      	ldr	r3, [r4, #4]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d06b      	beq.n	80160d2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x116>
 8015ffa:	2800      	cmp	r0, #0
 8015ffc:	d067      	beq.n	80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8015ffe:	68a1      	ldr	r1, [r4, #8]
 8016000:	4630      	mov	r0, r6
 8016002:	f003 fe75 	bl	8019cf0 <ucdr_serialize_string>
 8016006:	6863      	ldr	r3, [r4, #4]
 8016008:	2b01      	cmp	r3, #1
 801600a:	d953      	bls.n	80160b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801600c:	2800      	cmp	r0, #0
 801600e:	d05e      	beq.n	80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016010:	68e1      	ldr	r1, [r4, #12]
 8016012:	4630      	mov	r0, r6
 8016014:	f003 fe6c 	bl	8019cf0 <ucdr_serialize_string>
 8016018:	6863      	ldr	r3, [r4, #4]
 801601a:	2b02      	cmp	r3, #2
 801601c:	d94a      	bls.n	80160b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 801601e:	2800      	cmp	r0, #0
 8016020:	d055      	beq.n	80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016022:	6921      	ldr	r1, [r4, #16]
 8016024:	4630      	mov	r0, r6
 8016026:	f003 fe63 	bl	8019cf0 <ucdr_serialize_string>
 801602a:	6863      	ldr	r3, [r4, #4]
 801602c:	2b03      	cmp	r3, #3
 801602e:	d941      	bls.n	80160b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016030:	2800      	cmp	r0, #0
 8016032:	d04c      	beq.n	80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016034:	6961      	ldr	r1, [r4, #20]
 8016036:	4630      	mov	r0, r6
 8016038:	f003 fe5a 	bl	8019cf0 <ucdr_serialize_string>
 801603c:	6863      	ldr	r3, [r4, #4]
 801603e:	2b04      	cmp	r3, #4
 8016040:	d938      	bls.n	80160b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016042:	2800      	cmp	r0, #0
 8016044:	d043      	beq.n	80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016046:	69a1      	ldr	r1, [r4, #24]
 8016048:	4630      	mov	r0, r6
 801604a:	f003 fe51 	bl	8019cf0 <ucdr_serialize_string>
 801604e:	6863      	ldr	r3, [r4, #4]
 8016050:	2b05      	cmp	r3, #5
 8016052:	d92f      	bls.n	80160b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016054:	2800      	cmp	r0, #0
 8016056:	d03a      	beq.n	80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016058:	69e1      	ldr	r1, [r4, #28]
 801605a:	4630      	mov	r0, r6
 801605c:	f003 fe48 	bl	8019cf0 <ucdr_serialize_string>
 8016060:	6863      	ldr	r3, [r4, #4]
 8016062:	2b06      	cmp	r3, #6
 8016064:	d926      	bls.n	80160b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016066:	b390      	cbz	r0, 80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016068:	6a21      	ldr	r1, [r4, #32]
 801606a:	4630      	mov	r0, r6
 801606c:	f003 fe40 	bl	8019cf0 <ucdr_serialize_string>
 8016070:	6863      	ldr	r3, [r4, #4]
 8016072:	2b07      	cmp	r3, #7
 8016074:	d91e      	bls.n	80160b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016076:	b350      	cbz	r0, 80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016078:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801607a:	4630      	mov	r0, r6
 801607c:	f003 fe38 	bl	8019cf0 <ucdr_serialize_string>
 8016080:	6863      	ldr	r3, [r4, #4]
 8016082:	2b08      	cmp	r3, #8
 8016084:	d916      	bls.n	80160b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016086:	b310      	cbz	r0, 80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016088:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801608a:	4630      	mov	r0, r6
 801608c:	f003 fe30 	bl	8019cf0 <ucdr_serialize_string>
 8016090:	6863      	ldr	r3, [r4, #4]
 8016092:	2b09      	cmp	r3, #9
 8016094:	d90e      	bls.n	80160b4 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xf8>
 8016096:	b1d0      	cbz	r0, 80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 8016098:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 801609c:	2709      	movs	r7, #9
 801609e:	e000      	b.n	80160a2 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe6>
 80160a0:	b1a8      	cbz	r0, 80160ce <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x112>
 80160a2:	f858 1b04 	ldr.w	r1, [r8], #4
 80160a6:	4630      	mov	r0, r6
 80160a8:	f003 fe22 	bl	8019cf0 <ucdr_serialize_string>
 80160ac:	3701      	adds	r7, #1
 80160ae:	6862      	ldr	r2, [r4, #4]
 80160b0:	4297      	cmp	r7, r2
 80160b2:	d3f5      	bcc.n	80160a0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0xe4>
 80160b4:	4005      	ands	r5, r0
 80160b6:	b2ed      	uxtb	r5, r5
 80160b8:	e78a      	b.n	8015fd0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80160ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80160bc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80160c0:	4630      	mov	r0, r6
 80160c2:	f7f8 fda5 	bl	800ec10 <ucdr_serialize_sequence_uint8_t>
 80160c6:	4005      	ands	r5, r0
 80160c8:	4628      	mov	r0, r5
 80160ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160ce:	2500      	movs	r5, #0
 80160d0:	e77e      	b.n	8015fd0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>
 80160d2:	4028      	ands	r0, r5
 80160d4:	b2c5      	uxtb	r5, r0
 80160d6:	e77b      	b.n	8015fd0 <uxr_serialize_OBJK_Subscriber_Binary_Qos+0x14>

080160d8 <uxr_serialize_OBJK_Subscriber_Binary>:
 80160d8:	b570      	push	{r4, r5, r6, lr}
 80160da:	460d      	mov	r5, r1
 80160dc:	7809      	ldrb	r1, [r1, #0]
 80160de:	4606      	mov	r6, r0
 80160e0:	f7f7 f9f0 	bl	800d4c4 <ucdr_serialize_bool>
 80160e4:	782b      	ldrb	r3, [r5, #0]
 80160e6:	4604      	mov	r4, r0
 80160e8:	b94b      	cbnz	r3, 80160fe <uxr_serialize_OBJK_Subscriber_Binary+0x26>
 80160ea:	7a29      	ldrb	r1, [r5, #8]
 80160ec:	4630      	mov	r0, r6
 80160ee:	f7f7 f9e9 	bl	800d4c4 <ucdr_serialize_bool>
 80160f2:	7a2b      	ldrb	r3, [r5, #8]
 80160f4:	4004      	ands	r4, r0
 80160f6:	b2e4      	uxtb	r4, r4
 80160f8:	b943      	cbnz	r3, 801610c <uxr_serialize_OBJK_Subscriber_Binary+0x34>
 80160fa:	4620      	mov	r0, r4
 80160fc:	bd70      	pop	{r4, r5, r6, pc}
 80160fe:	6869      	ldr	r1, [r5, #4]
 8016100:	4630      	mov	r0, r6
 8016102:	f003 fdf5 	bl	8019cf0 <ucdr_serialize_string>
 8016106:	4004      	ands	r4, r0
 8016108:	b2e4      	uxtb	r4, r4
 801610a:	e7ee      	b.n	80160ea <uxr_serialize_OBJK_Subscriber_Binary+0x12>
 801610c:	f105 010c 	add.w	r1, r5, #12
 8016110:	4630      	mov	r0, r6
 8016112:	f7ff ff53 	bl	8015fbc <uxr_serialize_OBJK_Subscriber_Binary_Qos>
 8016116:	4004      	ands	r4, r0
 8016118:	4620      	mov	r0, r4
 801611a:	bd70      	pop	{r4, r5, r6, pc}

0801611c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 801611c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8016120:	4688      	mov	r8, r1
 8016122:	4681      	mov	r9, r0
 8016124:	8809      	ldrh	r1, [r1, #0]
 8016126:	f7f7 fa27 	bl	800d578 <ucdr_serialize_uint16_t>
 801612a:	4606      	mov	r6, r0
 801612c:	f898 1002 	ldrb.w	r1, [r8, #2]
 8016130:	4648      	mov	r0, r9
 8016132:	f7f7 f9c7 	bl	800d4c4 <ucdr_serialize_bool>
 8016136:	f898 3002 	ldrb.w	r3, [r8, #2]
 801613a:	4006      	ands	r6, r0
 801613c:	b2f5      	uxtb	r5, r6
 801613e:	b9eb      	cbnz	r3, 801617c <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8016140:	f898 1006 	ldrb.w	r1, [r8, #6]
 8016144:	4648      	mov	r0, r9
 8016146:	f7f7 f9bd 	bl	800d4c4 <ucdr_serialize_bool>
 801614a:	f898 3006 	ldrb.w	r3, [r8, #6]
 801614e:	4005      	ands	r5, r0
 8016150:	bb7b      	cbnz	r3, 80161b2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8016152:	f898 100c 	ldrb.w	r1, [r8, #12]
 8016156:	4648      	mov	r0, r9
 8016158:	f7f7 f9b4 	bl	800d4c4 <ucdr_serialize_bool>
 801615c:	f898 300c 	ldrb.w	r3, [r8, #12]
 8016160:	4005      	ands	r5, r0
 8016162:	b9f3      	cbnz	r3, 80161a2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8016164:	f898 1014 	ldrb.w	r1, [r8, #20]
 8016168:	4648      	mov	r0, r9
 801616a:	f7f7 f9ab 	bl	800d4c4 <ucdr_serialize_bool>
 801616e:	f898 3014 	ldrb.w	r3, [r8, #20]
 8016172:	4005      	ands	r5, r0
 8016174:	b94b      	cbnz	r3, 801618a <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8016176:	4628      	mov	r0, r5
 8016178:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 801617c:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8016180:	4648      	mov	r0, r9
 8016182:	f7f7 f9f9 	bl	800d578 <ucdr_serialize_uint16_t>
 8016186:	4005      	ands	r5, r0
 8016188:	e7da      	b.n	8016140 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 801618a:	f8d8 2018 	ldr.w	r2, [r8, #24]
 801618e:	f108 011c 	add.w	r1, r8, #28
 8016192:	4648      	mov	r0, r9
 8016194:	f7f8 fd3c 	bl	800ec10 <ucdr_serialize_sequence_uint8_t>
 8016198:	4028      	ands	r0, r5
 801619a:	b2c5      	uxtb	r5, r0
 801619c:	4628      	mov	r0, r5
 801619e:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80161a2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80161a6:	4648      	mov	r0, r9
 80161a8:	f7f7 fbd0 	bl	800d94c <ucdr_serialize_uint32_t>
 80161ac:	4028      	ands	r0, r5
 80161ae:	b2c5      	uxtb	r5, r0
 80161b0:	e7d8      	b.n	8016164 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80161b2:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80161b6:	4648      	mov	r0, r9
 80161b8:	f7f7 fbc8 	bl	800d94c <ucdr_serialize_uint32_t>
 80161bc:	4028      	ands	r0, r5
 80161be:	b2c5      	uxtb	r5, r0
 80161c0:	e7c7      	b.n	8016152 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80161c2:	bf00      	nop

080161c4 <uxr_serialize_OBJK_DataReader_Binary>:
 80161c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161c6:	2202      	movs	r2, #2
 80161c8:	460c      	mov	r4, r1
 80161ca:	4606      	mov	r6, r0
 80161cc:	f7fc fe58 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 80161d0:	4605      	mov	r5, r0
 80161d2:	78a1      	ldrb	r1, [r4, #2]
 80161d4:	4630      	mov	r0, r6
 80161d6:	f7f7 f975 	bl	800d4c4 <ucdr_serialize_bool>
 80161da:	78a3      	ldrb	r3, [r4, #2]
 80161dc:	4005      	ands	r5, r0
 80161de:	b2ed      	uxtb	r5, r5
 80161e0:	b90b      	cbnz	r3, 80161e6 <uxr_serialize_OBJK_DataReader_Binary+0x22>
 80161e2:	4628      	mov	r0, r5
 80161e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161e6:	f104 0108 	add.w	r1, r4, #8
 80161ea:	4630      	mov	r0, r6
 80161ec:	f7ff ff96 	bl	801611c <uxr_serialize_OBJK_Endpoint_QosBinary>
 80161f0:	4607      	mov	r7, r0
 80161f2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80161f6:	4630      	mov	r0, r6
 80161f8:	f7f7 f964 	bl	800d4c4 <ucdr_serialize_bool>
 80161fc:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8016200:	4038      	ands	r0, r7
 8016202:	b2c7      	uxtb	r7, r0
 8016204:	b95b      	cbnz	r3, 801621e <uxr_serialize_OBJK_DataReader_Binary+0x5a>
 8016206:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801620a:	4630      	mov	r0, r6
 801620c:	f7f7 f95a 	bl	800d4c4 <ucdr_serialize_bool>
 8016210:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8016214:	4007      	ands	r7, r0
 8016216:	b94b      	cbnz	r3, 801622c <uxr_serialize_OBJK_DataReader_Binary+0x68>
 8016218:	403d      	ands	r5, r7
 801621a:	4628      	mov	r0, r5
 801621c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801621e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8016222:	4630      	mov	r0, r6
 8016224:	f7f7 fde8 	bl	800ddf8 <ucdr_serialize_uint64_t>
 8016228:	4007      	ands	r7, r0
 801622a:	e7ec      	b.n	8016206 <uxr_serialize_OBJK_DataReader_Binary+0x42>
 801622c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801622e:	4630      	mov	r0, r6
 8016230:	f003 fd5e 	bl	8019cf0 <ucdr_serialize_string>
 8016234:	4007      	ands	r7, r0
 8016236:	b2ff      	uxtb	r7, r7
 8016238:	e7ee      	b.n	8016218 <uxr_serialize_OBJK_DataReader_Binary+0x54>
 801623a:	bf00      	nop

0801623c <uxr_serialize_OBJK_DataWriter_Binary>:
 801623c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801623e:	2202      	movs	r2, #2
 8016240:	460d      	mov	r5, r1
 8016242:	4606      	mov	r6, r0
 8016244:	f7fc fe1c 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016248:	4604      	mov	r4, r0
 801624a:	78a9      	ldrb	r1, [r5, #2]
 801624c:	4630      	mov	r0, r6
 801624e:	f7f7 f939 	bl	800d4c4 <ucdr_serialize_bool>
 8016252:	78ab      	ldrb	r3, [r5, #2]
 8016254:	4004      	ands	r4, r0
 8016256:	b2e4      	uxtb	r4, r4
 8016258:	b90b      	cbnz	r3, 801625e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801625a:	4620      	mov	r0, r4
 801625c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801625e:	f105 0108 	add.w	r1, r5, #8
 8016262:	4630      	mov	r0, r6
 8016264:	f7ff ff5a 	bl	801611c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8016268:	4607      	mov	r7, r0
 801626a:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 801626e:	4630      	mov	r0, r6
 8016270:	f7f7 f928 	bl	800d4c4 <ucdr_serialize_bool>
 8016274:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8016278:	4038      	ands	r0, r7
 801627a:	b2c7      	uxtb	r7, r0
 801627c:	b913      	cbnz	r3, 8016284 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801627e:	403c      	ands	r4, r7
 8016280:	4620      	mov	r0, r4
 8016282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016284:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 8016288:	4630      	mov	r0, r6
 801628a:	f7f7 fdb5 	bl	800ddf8 <ucdr_serialize_uint64_t>
 801628e:	4007      	ands	r7, r0
 8016290:	e7f5      	b.n	801627e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8016292:	bf00      	nop

08016294 <uxr_serialize_OBJK_Replier_Binary>:
 8016294:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
 8016298:	460f      	mov	r7, r1
 801629a:	4680      	mov	r8, r0
 801629c:	6809      	ldr	r1, [r1, #0]
 801629e:	f003 fd27 	bl	8019cf0 <ucdr_serialize_string>
 80162a2:	4605      	mov	r5, r0
 80162a4:	6879      	ldr	r1, [r7, #4]
 80162a6:	4640      	mov	r0, r8
 80162a8:	f003 fd22 	bl	8019cf0 <ucdr_serialize_string>
 80162ac:	4005      	ands	r5, r0
 80162ae:	68b9      	ldr	r1, [r7, #8]
 80162b0:	4640      	mov	r0, r8
 80162b2:	b2ec      	uxtb	r4, r5
 80162b4:	f003 fd1c 	bl	8019cf0 <ucdr_serialize_string>
 80162b8:	7b39      	ldrb	r1, [r7, #12]
 80162ba:	4004      	ands	r4, r0
 80162bc:	4640      	mov	r0, r8
 80162be:	f7f7 f901 	bl	800d4c4 <ucdr_serialize_bool>
 80162c2:	7b3b      	ldrb	r3, [r7, #12]
 80162c4:	4004      	ands	r4, r0
 80162c6:	b94b      	cbnz	r3, 80162dc <uxr_serialize_OBJK_Replier_Binary+0x48>
 80162c8:	7d39      	ldrb	r1, [r7, #20]
 80162ca:	4640      	mov	r0, r8
 80162cc:	f7f7 f8fa 	bl	800d4c4 <ucdr_serialize_bool>
 80162d0:	7d3b      	ldrb	r3, [r7, #20]
 80162d2:	4004      	ands	r4, r0
 80162d4:	b943      	cbnz	r3, 80162e8 <uxr_serialize_OBJK_Replier_Binary+0x54>
 80162d6:	4620      	mov	r0, r4
 80162d8:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80162dc:	6939      	ldr	r1, [r7, #16]
 80162de:	4640      	mov	r0, r8
 80162e0:	f003 fd06 	bl	8019cf0 <ucdr_serialize_string>
 80162e4:	4004      	ands	r4, r0
 80162e6:	e7ef      	b.n	80162c8 <uxr_serialize_OBJK_Replier_Binary+0x34>
 80162e8:	69b9      	ldr	r1, [r7, #24]
 80162ea:	4640      	mov	r0, r8
 80162ec:	f003 fd00 	bl	8019cf0 <ucdr_serialize_string>
 80162f0:	4004      	ands	r4, r0
 80162f2:	b2e4      	uxtb	r4, r4
 80162f4:	4620      	mov	r0, r4
 80162f6:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
 80162fa:	bf00      	nop

080162fc <uxr_deserialize_ObjectVariant>:
 80162fc:	b570      	push	{r4, r5, r6, lr}
 80162fe:	4605      	mov	r5, r0
 8016300:	460e      	mov	r6, r1
 8016302:	f7f7 f923 	bl	800d54c <ucdr_deserialize_uint8_t>
 8016306:	b168      	cbz	r0, 8016324 <uxr_deserialize_ObjectVariant+0x28>
 8016308:	7833      	ldrb	r3, [r6, #0]
 801630a:	4604      	mov	r4, r0
 801630c:	3b01      	subs	r3, #1
 801630e:	2b0d      	cmp	r3, #13
 8016310:	d809      	bhi.n	8016326 <uxr_deserialize_ObjectVariant+0x2a>
 8016312:	e8df f003 	tbb	[pc, r3]
 8016316:	0a41      	.short	0x0a41
 8016318:	0a0a2323 	.word	0x0a0a2323
 801631c:	10080a0a 	.word	0x10080a0a
 8016320:	565c1010 	.word	0x565c1010
 8016324:	2400      	movs	r4, #0
 8016326:	4620      	mov	r0, r4
 8016328:	bd70      	pop	{r4, r5, r6, pc}
 801632a:	1d31      	adds	r1, r6, #4
 801632c:	4628      	mov	r0, r5
 801632e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016332:	f7ff bd21 	b.w	8015d78 <uxr_deserialize_DATAWRITER_Representation>
 8016336:	1d31      	adds	r1, r6, #4
 8016338:	4628      	mov	r0, r5
 801633a:	f7f7 f907 	bl	800d54c <ucdr_deserialize_uint8_t>
 801633e:	2800      	cmp	r0, #0
 8016340:	d0f0      	beq.n	8016324 <uxr_deserialize_ObjectVariant+0x28>
 8016342:	7933      	ldrb	r3, [r6, #4]
 8016344:	2b01      	cmp	r3, #1
 8016346:	d001      	beq.n	801634c <uxr_deserialize_ObjectVariant+0x50>
 8016348:	2b02      	cmp	r3, #2
 801634a:	d1ec      	bne.n	8016326 <uxr_deserialize_ObjectVariant+0x2a>
 801634c:	68b1      	ldr	r1, [r6, #8]
 801634e:	4628      	mov	r0, r5
 8016350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016354:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016358:	f003 bcda 	b.w	8019d10 <ucdr_deserialize_string>
 801635c:	1d31      	adds	r1, r6, #4
 801635e:	4628      	mov	r0, r5
 8016360:	f7f7 f8f4 	bl	800d54c <ucdr_deserialize_uint8_t>
 8016364:	4604      	mov	r4, r0
 8016366:	b170      	cbz	r0, 8016386 <uxr_deserialize_ObjectVariant+0x8a>
 8016368:	7933      	ldrb	r3, [r6, #4]
 801636a:	2b02      	cmp	r3, #2
 801636c:	d04c      	beq.n	8016408 <uxr_deserialize_ObjectVariant+0x10c>
 801636e:	2b03      	cmp	r3, #3
 8016370:	d109      	bne.n	8016386 <uxr_deserialize_ObjectVariant+0x8a>
 8016372:	f106 0308 	add.w	r3, r6, #8
 8016376:	f44f 7200 	mov.w	r2, #512	; 0x200
 801637a:	f106 010c 	add.w	r1, r6, #12
 801637e:	4628      	mov	r0, r5
 8016380:	f7f8 fc58 	bl	800ec34 <ucdr_deserialize_sequence_uint8_t>
 8016384:	4604      	mov	r4, r0
 8016386:	2202      	movs	r2, #2
 8016388:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 801638c:	4628      	mov	r0, r5
 801638e:	f7fc fddb 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8016392:	4020      	ands	r0, r4
 8016394:	b2c4      	uxtb	r4, r0
 8016396:	e7c6      	b.n	8016326 <uxr_deserialize_ObjectVariant+0x2a>
 8016398:	1d31      	adds	r1, r6, #4
 801639a:	4628      	mov	r0, r5
 801639c:	f7f7 f8d6 	bl	800d54c <ucdr_deserialize_uint8_t>
 80163a0:	4604      	mov	r4, r0
 80163a2:	b130      	cbz	r0, 80163b2 <uxr_deserialize_ObjectVariant+0xb6>
 80163a4:	7933      	ldrb	r3, [r6, #4]
 80163a6:	2b02      	cmp	r3, #2
 80163a8:	d036      	beq.n	8016418 <uxr_deserialize_ObjectVariant+0x11c>
 80163aa:	2b03      	cmp	r3, #3
 80163ac:	d03c      	beq.n	8016428 <uxr_deserialize_ObjectVariant+0x12c>
 80163ae:	2b01      	cmp	r3, #1
 80163b0:	d032      	beq.n	8016418 <uxr_deserialize_ObjectVariant+0x11c>
 80163b2:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 80163b6:	4628      	mov	r0, r5
 80163b8:	f7f7 fe6e 	bl	800e098 <ucdr_deserialize_int16_t>
 80163bc:	4020      	ands	r0, r4
 80163be:	b2c4      	uxtb	r4, r0
 80163c0:	e7b1      	b.n	8016326 <uxr_deserialize_ObjectVariant+0x2a>
 80163c2:	1d31      	adds	r1, r6, #4
 80163c4:	4628      	mov	r0, r5
 80163c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163ca:	f7ff bb8b 	b.w	8015ae4 <uxr_deserialize_CLIENT_Representation>
 80163ce:	2204      	movs	r2, #4
 80163d0:	4628      	mov	r0, r5
 80163d2:	18b1      	adds	r1, r6, r2
 80163d4:	f7fc fdb8 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 80163d8:	4604      	mov	r4, r0
 80163da:	2202      	movs	r2, #2
 80163dc:	f106 0108 	add.w	r1, r6, #8
 80163e0:	4628      	mov	r0, r5
 80163e2:	f7fc fdb1 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 80163e6:	4004      	ands	r4, r0
 80163e8:	2202      	movs	r2, #2
 80163ea:	f106 010a 	add.w	r1, r6, #10
 80163ee:	4628      	mov	r0, r5
 80163f0:	b2e4      	uxtb	r4, r4
 80163f2:	f7fc fda9 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 80163f6:	4603      	mov	r3, r0
 80163f8:	f106 010c 	add.w	r1, r6, #12
 80163fc:	4628      	mov	r0, r5
 80163fe:	401c      	ands	r4, r3
 8016400:	f7f7 f876 	bl	800d4f0 <ucdr_deserialize_bool>
 8016404:	4004      	ands	r4, r0
 8016406:	e78e      	b.n	8016326 <uxr_deserialize_ObjectVariant+0x2a>
 8016408:	f44f 7200 	mov.w	r2, #512	; 0x200
 801640c:	68b1      	ldr	r1, [r6, #8]
 801640e:	4628      	mov	r0, r5
 8016410:	f003 fc7e 	bl	8019d10 <ucdr_deserialize_string>
 8016414:	4604      	mov	r4, r0
 8016416:	e7b6      	b.n	8016386 <uxr_deserialize_ObjectVariant+0x8a>
 8016418:	f44f 7200 	mov.w	r2, #512	; 0x200
 801641c:	68b1      	ldr	r1, [r6, #8]
 801641e:	4628      	mov	r0, r5
 8016420:	f003 fc76 	bl	8019d10 <ucdr_deserialize_string>
 8016424:	4604      	mov	r4, r0
 8016426:	e7c4      	b.n	80163b2 <uxr_deserialize_ObjectVariant+0xb6>
 8016428:	f106 0308 	add.w	r3, r6, #8
 801642c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016430:	f106 010c 	add.w	r1, r6, #12
 8016434:	4628      	mov	r0, r5
 8016436:	f7f8 fbfd 	bl	800ec34 <ucdr_deserialize_sequence_uint8_t>
 801643a:	4604      	mov	r4, r0
 801643c:	e7b9      	b.n	80163b2 <uxr_deserialize_ObjectVariant+0xb6>
 801643e:	bf00      	nop

08016440 <uxr_deserialize_BaseObjectRequest>:
 8016440:	b570      	push	{r4, r5, r6, lr}
 8016442:	2202      	movs	r2, #2
 8016444:	4605      	mov	r5, r0
 8016446:	460e      	mov	r6, r1
 8016448:	f7fc fd7e 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 801644c:	2202      	movs	r2, #2
 801644e:	4604      	mov	r4, r0
 8016450:	4628      	mov	r0, r5
 8016452:	18b1      	adds	r1, r6, r2
 8016454:	f7fc fd78 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8016458:	4020      	ands	r0, r4
 801645a:	b2c0      	uxtb	r0, r0
 801645c:	bd70      	pop	{r4, r5, r6, pc}
 801645e:	bf00      	nop

08016460 <uxr_serialize_ActivityInfoVariant>:
 8016460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016464:	460e      	mov	r6, r1
 8016466:	7809      	ldrb	r1, [r1, #0]
 8016468:	4680      	mov	r8, r0
 801646a:	f7f7 f859 	bl	800d520 <ucdr_serialize_uint8_t>
 801646e:	4607      	mov	r7, r0
 8016470:	b138      	cbz	r0, 8016482 <uxr_serialize_ActivityInfoVariant+0x22>
 8016472:	7833      	ldrb	r3, [r6, #0]
 8016474:	2b06      	cmp	r3, #6
 8016476:	f000 8081 	beq.w	801657c <uxr_serialize_ActivityInfoVariant+0x11c>
 801647a:	2b0d      	cmp	r3, #13
 801647c:	d014      	beq.n	80164a8 <uxr_serialize_ActivityInfoVariant+0x48>
 801647e:	2b05      	cmp	r3, #5
 8016480:	d002      	beq.n	8016488 <uxr_serialize_ActivityInfoVariant+0x28>
 8016482:	4638      	mov	r0, r7
 8016484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016488:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801648c:	4640      	mov	r0, r8
 801648e:	f7f7 fd83 	bl	800df98 <ucdr_serialize_int16_t>
 8016492:	4607      	mov	r7, r0
 8016494:	4640      	mov	r0, r8
 8016496:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 801649a:	f7f7 fcad 	bl	800ddf8 <ucdr_serialize_uint64_t>
 801649e:	4038      	ands	r0, r7
 80164a0:	b2c7      	uxtb	r7, r0
 80164a2:	4638      	mov	r0, r7
 80164a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164a8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80164ac:	4640      	mov	r0, r8
 80164ae:	f7f7 fd73 	bl	800df98 <ucdr_serialize_int16_t>
 80164b2:	68f1      	ldr	r1, [r6, #12]
 80164b4:	4607      	mov	r7, r0
 80164b6:	4640      	mov	r0, r8
 80164b8:	f7f7 fa48 	bl	800d94c <ucdr_serialize_uint32_t>
 80164bc:	68f3      	ldr	r3, [r6, #12]
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d0ed      	beq.n	801649e <uxr_serialize_ActivityInfoVariant+0x3e>
 80164c2:	b318      	cbz	r0, 801650c <uxr_serialize_ActivityInfoVariant+0xac>
 80164c4:	f106 090c 	add.w	r9, r6, #12
 80164c8:	2400      	movs	r4, #0
 80164ca:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80164ce:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 80164d2:	7c29      	ldrb	r1, [r5, #16]
 80164d4:	4640      	mov	r0, r8
 80164d6:	f7f7 f823 	bl	800d520 <ucdr_serialize_uint8_t>
 80164da:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 80164de:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80164e2:	2800      	cmp	r0, #0
 80164e4:	d051      	beq.n	801658a <uxr_serialize_ActivityInfoVariant+0x12a>
 80164e6:	7c2b      	ldrb	r3, [r5, #16]
 80164e8:	00c9      	lsls	r1, r1, #3
 80164ea:	2b03      	cmp	r3, #3
 80164ec:	d854      	bhi.n	8016598 <uxr_serialize_ActivityInfoVariant+0x138>
 80164ee:	e8df f003 	tbb	[pc, r3]
 80164f2:	2133      	.short	0x2133
 80164f4:	020f      	.short	0x020f
 80164f6:	4449      	add	r1, r9
 80164f8:	4640      	mov	r0, r8
 80164fa:	6889      	ldr	r1, [r1, #8]
 80164fc:	f003 fbf8 	bl	8019cf0 <ucdr_serialize_string>
 8016500:	3401      	adds	r4, #1
 8016502:	68f2      	ldr	r2, [r6, #12]
 8016504:	4294      	cmp	r4, r2
 8016506:	d244      	bcs.n	8016592 <uxr_serialize_ActivityInfoVariant+0x132>
 8016508:	2800      	cmp	r0, #0
 801650a:	d1de      	bne.n	80164ca <uxr_serialize_ActivityInfoVariant+0x6a>
 801650c:	2700      	movs	r7, #0
 801650e:	e7b8      	b.n	8016482 <uxr_serialize_ActivityInfoVariant+0x22>
 8016510:	3108      	adds	r1, #8
 8016512:	44a2      	add	sl, r4
 8016514:	2210      	movs	r2, #16
 8016516:	4640      	mov	r0, r8
 8016518:	4449      	add	r1, r9
 801651a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801651e:	f7fc fcaf 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016522:	4605      	mov	r5, r0
 8016524:	f8da 1024 	ldr.w	r1, [sl, #36]	; 0x24
 8016528:	4640      	mov	r0, r8
 801652a:	f7f7 fa0f 	bl	800d94c <ucdr_serialize_uint32_t>
 801652e:	4028      	ands	r0, r5
 8016530:	b2c0      	uxtb	r0, r0
 8016532:	e7e5      	b.n	8016500 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016534:	3108      	adds	r1, #8
 8016536:	44a2      	add	sl, r4
 8016538:	2204      	movs	r2, #4
 801653a:	4640      	mov	r0, r8
 801653c:	4449      	add	r1, r9
 801653e:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016542:	f7fc fc9d 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016546:	4605      	mov	r5, r0
 8016548:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 801654c:	4640      	mov	r0, r8
 801654e:	f7f7 f813 	bl	800d578 <ucdr_serialize_uint16_t>
 8016552:	4028      	ands	r0, r5
 8016554:	b2c0      	uxtb	r0, r0
 8016556:	e7d3      	b.n	8016500 <uxr_serialize_ActivityInfoVariant+0xa0>
 8016558:	3108      	adds	r1, #8
 801655a:	44a2      	add	sl, r4
 801655c:	2202      	movs	r2, #2
 801655e:	4640      	mov	r0, r8
 8016560:	4449      	add	r1, r9
 8016562:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 8016566:	f7fc fc8b 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 801656a:	4605      	mov	r5, r0
 801656c:	f89a 1016 	ldrb.w	r1, [sl, #22]
 8016570:	4640      	mov	r0, r8
 8016572:	f7f6 ffd5 	bl	800d520 <ucdr_serialize_uint8_t>
 8016576:	4028      	ands	r0, r5
 8016578:	b2c0      	uxtb	r0, r0
 801657a:	e7c1      	b.n	8016500 <uxr_serialize_ActivityInfoVariant+0xa0>
 801657c:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016580:	4640      	mov	r0, r8
 8016582:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016586:	f7f7 bd07 	b.w	800df98 <ucdr_serialize_int16_t>
 801658a:	3401      	adds	r4, #1
 801658c:	68f2      	ldr	r2, [r6, #12]
 801658e:	42a2      	cmp	r2, r4
 8016590:	d8bc      	bhi.n	801650c <uxr_serialize_ActivityInfoVariant+0xac>
 8016592:	4007      	ands	r7, r0
 8016594:	b2ff      	uxtb	r7, r7
 8016596:	e774      	b.n	8016482 <uxr_serialize_ActivityInfoVariant+0x22>
 8016598:	3401      	adds	r4, #1
 801659a:	68f3      	ldr	r3, [r6, #12]
 801659c:	3518      	adds	r5, #24
 801659e:	429c      	cmp	r4, r3
 80165a0:	d397      	bcc.n	80164d2 <uxr_serialize_ActivityInfoVariant+0x72>
 80165a2:	e76e      	b.n	8016482 <uxr_serialize_ActivityInfoVariant+0x22>

080165a4 <uxr_deserialize_BaseObjectReply>:
 80165a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165a8:	2202      	movs	r2, #2
 80165aa:	4606      	mov	r6, r0
 80165ac:	460f      	mov	r7, r1
 80165ae:	f7fc fccb 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 80165b2:	2202      	movs	r2, #2
 80165b4:	4605      	mov	r5, r0
 80165b6:	4630      	mov	r0, r6
 80165b8:	18b9      	adds	r1, r7, r2
 80165ba:	f7fc fcc5 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 80165be:	4680      	mov	r8, r0
 80165c0:	1d39      	adds	r1, r7, #4
 80165c2:	4630      	mov	r0, r6
 80165c4:	f7f6 ffc2 	bl	800d54c <ucdr_deserialize_uint8_t>
 80165c8:	ea05 0508 	and.w	r5, r5, r8
 80165cc:	4604      	mov	r4, r0
 80165ce:	1d79      	adds	r1, r7, #5
 80165d0:	4630      	mov	r0, r6
 80165d2:	402c      	ands	r4, r5
 80165d4:	f7f6 ffba 	bl	800d54c <ucdr_deserialize_uint8_t>
 80165d8:	4020      	ands	r0, r4
 80165da:	b2c0      	uxtb	r0, r0
 80165dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080165e0 <uxr_serialize_ReadSpecification>:
 80165e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165e2:	460e      	mov	r6, r1
 80165e4:	4607      	mov	r7, r0
 80165e6:	7809      	ldrb	r1, [r1, #0]
 80165e8:	f7f6 ff9a 	bl	800d520 <ucdr_serialize_uint8_t>
 80165ec:	4604      	mov	r4, r0
 80165ee:	7871      	ldrb	r1, [r6, #1]
 80165f0:	4638      	mov	r0, r7
 80165f2:	f7f6 ff95 	bl	800d520 <ucdr_serialize_uint8_t>
 80165f6:	4004      	ands	r4, r0
 80165f8:	78b1      	ldrb	r1, [r6, #2]
 80165fa:	4638      	mov	r0, r7
 80165fc:	f7f6 ff62 	bl	800d4c4 <ucdr_serialize_bool>
 8016600:	78b3      	ldrb	r3, [r6, #2]
 8016602:	b2e4      	uxtb	r4, r4
 8016604:	4004      	ands	r4, r0
 8016606:	b943      	cbnz	r3, 801661a <uxr_serialize_ReadSpecification+0x3a>
 8016608:	7a31      	ldrb	r1, [r6, #8]
 801660a:	4638      	mov	r0, r7
 801660c:	f7f6 ff5a 	bl	800d4c4 <ucdr_serialize_bool>
 8016610:	7a33      	ldrb	r3, [r6, #8]
 8016612:	4004      	ands	r4, r0
 8016614:	b93b      	cbnz	r3, 8016626 <uxr_serialize_ReadSpecification+0x46>
 8016616:	4620      	mov	r0, r4
 8016618:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801661a:	6871      	ldr	r1, [r6, #4]
 801661c:	4638      	mov	r0, r7
 801661e:	f003 fb67 	bl	8019cf0 <ucdr_serialize_string>
 8016622:	4004      	ands	r4, r0
 8016624:	e7f0      	b.n	8016608 <uxr_serialize_ReadSpecification+0x28>
 8016626:	8971      	ldrh	r1, [r6, #10]
 8016628:	4638      	mov	r0, r7
 801662a:	f7f6 ffa5 	bl	800d578 <ucdr_serialize_uint16_t>
 801662e:	4605      	mov	r5, r0
 8016630:	89b1      	ldrh	r1, [r6, #12]
 8016632:	4638      	mov	r0, r7
 8016634:	f7f6 ffa0 	bl	800d578 <ucdr_serialize_uint16_t>
 8016638:	4005      	ands	r5, r0
 801663a:	89f1      	ldrh	r1, [r6, #14]
 801663c:	4638      	mov	r0, r7
 801663e:	b2ed      	uxtb	r5, r5
 8016640:	f7f6 ff9a 	bl	800d578 <ucdr_serialize_uint16_t>
 8016644:	8a31      	ldrh	r1, [r6, #16]
 8016646:	4025      	ands	r5, r4
 8016648:	4604      	mov	r4, r0
 801664a:	4638      	mov	r0, r7
 801664c:	4025      	ands	r5, r4
 801664e:	f7f6 ff93 	bl	800d578 <ucdr_serialize_uint16_t>
 8016652:	ea00 0405 	and.w	r4, r0, r5
 8016656:	4620      	mov	r0, r4
 8016658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801665a:	bf00      	nop

0801665c <uxr_serialize_CREATE_CLIENT_Payload>:
 801665c:	f7ff b9ea 	b.w	8015a34 <uxr_serialize_CLIENT_Representation>

08016660 <uxr_serialize_CREATE_Payload>:
 8016660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016662:	2202      	movs	r2, #2
 8016664:	4607      	mov	r7, r0
 8016666:	460e      	mov	r6, r1
 8016668:	f7fc fc0a 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 801666c:	2202      	movs	r2, #2
 801666e:	4605      	mov	r5, r0
 8016670:	4638      	mov	r0, r7
 8016672:	18b1      	adds	r1, r6, r2
 8016674:	f7fc fc04 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016678:	7931      	ldrb	r1, [r6, #4]
 801667a:	4604      	mov	r4, r0
 801667c:	4638      	mov	r0, r7
 801667e:	f7f6 ff4f 	bl	800d520 <ucdr_serialize_uint8_t>
 8016682:	b170      	cbz	r0, 80166a2 <uxr_serialize_CREATE_Payload+0x42>
 8016684:	7933      	ldrb	r3, [r6, #4]
 8016686:	402c      	ands	r4, r5
 8016688:	3b01      	subs	r3, #1
 801668a:	b2e4      	uxtb	r4, r4
 801668c:	2b0d      	cmp	r3, #13
 801668e:	d809      	bhi.n	80166a4 <uxr_serialize_CREATE_Payload+0x44>
 8016690:	e8df f003 	tbb	[pc, r3]
 8016694:	23230a4c 	.word	0x23230a4c
 8016698:	0a0a0a0a 	.word	0x0a0a0a0a
 801669c:	12121208 	.word	0x12121208
 80166a0:	3e45      	.short	0x3e45
 80166a2:	2400      	movs	r4, #0
 80166a4:	4620      	mov	r0, r4
 80166a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166a8:	f106 0108 	add.w	r1, r6, #8
 80166ac:	4638      	mov	r0, r7
 80166ae:	f7ff fac7 	bl	8015c40 <uxr_serialize_DATAWRITER_Representation>
 80166b2:	4004      	ands	r4, r0
 80166b4:	4620      	mov	r0, r4
 80166b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166b8:	7a31      	ldrb	r1, [r6, #8]
 80166ba:	4638      	mov	r0, r7
 80166bc:	f7f6 ff30 	bl	800d520 <ucdr_serialize_uint8_t>
 80166c0:	2800      	cmp	r0, #0
 80166c2:	d0ee      	beq.n	80166a2 <uxr_serialize_CREATE_Payload+0x42>
 80166c4:	7a33      	ldrb	r3, [r6, #8]
 80166c6:	2b01      	cmp	r3, #1
 80166c8:	d001      	beq.n	80166ce <uxr_serialize_CREATE_Payload+0x6e>
 80166ca:	2b02      	cmp	r3, #2
 80166cc:	d1ea      	bne.n	80166a4 <uxr_serialize_CREATE_Payload+0x44>
 80166ce:	68f1      	ldr	r1, [r6, #12]
 80166d0:	4638      	mov	r0, r7
 80166d2:	f003 fb0d 	bl	8019cf0 <ucdr_serialize_string>
 80166d6:	4004      	ands	r4, r0
 80166d8:	e7e4      	b.n	80166a4 <uxr_serialize_CREATE_Payload+0x44>
 80166da:	7a31      	ldrb	r1, [r6, #8]
 80166dc:	4638      	mov	r0, r7
 80166de:	f7f6 ff1f 	bl	800d520 <ucdr_serialize_uint8_t>
 80166e2:	4605      	mov	r5, r0
 80166e4:	b158      	cbz	r0, 80166fe <uxr_serialize_CREATE_Payload+0x9e>
 80166e6:	7a33      	ldrb	r3, [r6, #8]
 80166e8:	2b02      	cmp	r3, #2
 80166ea:	d034      	beq.n	8016756 <uxr_serialize_CREATE_Payload+0xf6>
 80166ec:	2b03      	cmp	r3, #3
 80166ee:	d106      	bne.n	80166fe <uxr_serialize_CREATE_Payload+0x9e>
 80166f0:	68f2      	ldr	r2, [r6, #12]
 80166f2:	f106 0110 	add.w	r1, r6, #16
 80166f6:	4638      	mov	r0, r7
 80166f8:	f7f8 fa8a 	bl	800ec10 <ucdr_serialize_sequence_uint8_t>
 80166fc:	4605      	mov	r5, r0
 80166fe:	2202      	movs	r2, #2
 8016700:	f506 7104 	add.w	r1, r6, #528	; 0x210
 8016704:	4638      	mov	r0, r7
 8016706:	f7fc fbbb 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 801670a:	4028      	ands	r0, r5
 801670c:	4004      	ands	r4, r0
 801670e:	e7c9      	b.n	80166a4 <uxr_serialize_CREATE_Payload+0x44>
 8016710:	f106 0108 	add.w	r1, r6, #8
 8016714:	4638      	mov	r0, r7
 8016716:	f7ff f98d 	bl	8015a34 <uxr_serialize_CLIENT_Representation>
 801671a:	4004      	ands	r4, r0
 801671c:	e7c2      	b.n	80166a4 <uxr_serialize_CREATE_Payload+0x44>
 801671e:	f106 0108 	add.w	r1, r6, #8
 8016722:	4638      	mov	r0, r7
 8016724:	f7ff fa42 	bl	8015bac <uxr_serialize_AGENT_Representation>
 8016728:	4004      	ands	r4, r0
 801672a:	e7bb      	b.n	80166a4 <uxr_serialize_CREATE_Payload+0x44>
 801672c:	7a31      	ldrb	r1, [r6, #8]
 801672e:	4638      	mov	r0, r7
 8016730:	f7f6 fef6 	bl	800d520 <ucdr_serialize_uint8_t>
 8016734:	4605      	mov	r5, r0
 8016736:	b130      	cbz	r0, 8016746 <uxr_serialize_CREATE_Payload+0xe6>
 8016738:	7a33      	ldrb	r3, [r6, #8]
 801673a:	2b02      	cmp	r3, #2
 801673c:	d011      	beq.n	8016762 <uxr_serialize_CREATE_Payload+0x102>
 801673e:	2b03      	cmp	r3, #3
 8016740:	d015      	beq.n	801676e <uxr_serialize_CREATE_Payload+0x10e>
 8016742:	2b01      	cmp	r3, #1
 8016744:	d00d      	beq.n	8016762 <uxr_serialize_CREATE_Payload+0x102>
 8016746:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 801674a:	4638      	mov	r0, r7
 801674c:	f7f7 fc24 	bl	800df98 <ucdr_serialize_int16_t>
 8016750:	4028      	ands	r0, r5
 8016752:	4004      	ands	r4, r0
 8016754:	e7a6      	b.n	80166a4 <uxr_serialize_CREATE_Payload+0x44>
 8016756:	68f1      	ldr	r1, [r6, #12]
 8016758:	4638      	mov	r0, r7
 801675a:	f003 fac9 	bl	8019cf0 <ucdr_serialize_string>
 801675e:	4605      	mov	r5, r0
 8016760:	e7cd      	b.n	80166fe <uxr_serialize_CREATE_Payload+0x9e>
 8016762:	68f1      	ldr	r1, [r6, #12]
 8016764:	4638      	mov	r0, r7
 8016766:	f003 fac3 	bl	8019cf0 <ucdr_serialize_string>
 801676a:	4605      	mov	r5, r0
 801676c:	e7eb      	b.n	8016746 <uxr_serialize_CREATE_Payload+0xe6>
 801676e:	68f2      	ldr	r2, [r6, #12]
 8016770:	f106 0110 	add.w	r1, r6, #16
 8016774:	4638      	mov	r0, r7
 8016776:	f7f8 fa4b 	bl	800ec10 <ucdr_serialize_sequence_uint8_t>
 801677a:	4605      	mov	r5, r0
 801677c:	e7e3      	b.n	8016746 <uxr_serialize_CREATE_Payload+0xe6>
 801677e:	bf00      	nop

08016780 <uxr_deserialize_GET_INFO_Payload>:
 8016780:	b570      	push	{r4, r5, r6, lr}
 8016782:	2202      	movs	r2, #2
 8016784:	4605      	mov	r5, r0
 8016786:	460e      	mov	r6, r1
 8016788:	f7fc fbde 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 801678c:	2202      	movs	r2, #2
 801678e:	4604      	mov	r4, r0
 8016790:	4628      	mov	r0, r5
 8016792:	18b1      	adds	r1, r6, r2
 8016794:	f7fc fbd8 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8016798:	4603      	mov	r3, r0
 801679a:	1d31      	adds	r1, r6, #4
 801679c:	4628      	mov	r0, r5
 801679e:	401c      	ands	r4, r3
 80167a0:	f7f7 fa04 	bl	800dbac <ucdr_deserialize_uint32_t>
 80167a4:	b2e4      	uxtb	r4, r4
 80167a6:	4020      	ands	r0, r4
 80167a8:	bd70      	pop	{r4, r5, r6, pc}
 80167aa:	bf00      	nop

080167ac <uxr_serialize_DELETE_Payload>:
 80167ac:	b570      	push	{r4, r5, r6, lr}
 80167ae:	2202      	movs	r2, #2
 80167b0:	4605      	mov	r5, r0
 80167b2:	460e      	mov	r6, r1
 80167b4:	f7fc fb64 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 80167b8:	2202      	movs	r2, #2
 80167ba:	4604      	mov	r4, r0
 80167bc:	4628      	mov	r0, r5
 80167be:	18b1      	adds	r1, r6, r2
 80167c0:	f7fc fb5e 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 80167c4:	4020      	ands	r0, r4
 80167c6:	b2c0      	uxtb	r0, r0
 80167c8:	bd70      	pop	{r4, r5, r6, pc}
 80167ca:	bf00      	nop

080167cc <uxr_deserialize_STATUS_AGENT_Payload>:
 80167cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167d0:	460e      	mov	r6, r1
 80167d2:	4605      	mov	r5, r0
 80167d4:	f7f6 feba 	bl	800d54c <ucdr_deserialize_uint8_t>
 80167d8:	4604      	mov	r4, r0
 80167da:	1c71      	adds	r1, r6, #1
 80167dc:	4628      	mov	r0, r5
 80167de:	f7f6 feb5 	bl	800d54c <ucdr_deserialize_uint8_t>
 80167e2:	2204      	movs	r2, #4
 80167e4:	4681      	mov	r9, r0
 80167e6:	4628      	mov	r0, r5
 80167e8:	18b1      	adds	r1, r6, r2
 80167ea:	f7fc fbad 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 80167ee:	f106 0108 	add.w	r1, r6, #8
 80167f2:	4680      	mov	r8, r0
 80167f4:	2202      	movs	r2, #2
 80167f6:	4628      	mov	r0, r5
 80167f8:	f7fc fba6 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 80167fc:	ea04 0309 	and.w	r3, r4, r9
 8016800:	4607      	mov	r7, r0
 8016802:	2202      	movs	r2, #2
 8016804:	b2db      	uxtb	r3, r3
 8016806:	f106 010a 	add.w	r1, r6, #10
 801680a:	4628      	mov	r0, r5
 801680c:	ea03 0408 	and.w	r4, r3, r8
 8016810:	f7fc fb9a 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8016814:	4603      	mov	r3, r0
 8016816:	4628      	mov	r0, r5
 8016818:	403c      	ands	r4, r7
 801681a:	f106 010c 	add.w	r1, r6, #12
 801681e:	461d      	mov	r5, r3
 8016820:	f7f6 fe66 	bl	800d4f0 <ucdr_deserialize_bool>
 8016824:	4025      	ands	r5, r4
 8016826:	4028      	ands	r0, r5
 8016828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801682c <uxr_deserialize_STATUS_Payload>:
 801682c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016830:	2202      	movs	r2, #2
 8016832:	4606      	mov	r6, r0
 8016834:	460f      	mov	r7, r1
 8016836:	f7fc fb87 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 801683a:	2202      	movs	r2, #2
 801683c:	4605      	mov	r5, r0
 801683e:	4630      	mov	r0, r6
 8016840:	18b9      	adds	r1, r7, r2
 8016842:	f7fc fb81 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8016846:	4680      	mov	r8, r0
 8016848:	1d39      	adds	r1, r7, #4
 801684a:	4630      	mov	r0, r6
 801684c:	f7f6 fe7e 	bl	800d54c <ucdr_deserialize_uint8_t>
 8016850:	ea05 0508 	and.w	r5, r5, r8
 8016854:	4604      	mov	r4, r0
 8016856:	1d79      	adds	r1, r7, #5
 8016858:	4630      	mov	r0, r6
 801685a:	402c      	ands	r4, r5
 801685c:	f7f6 fe76 	bl	800d54c <ucdr_deserialize_uint8_t>
 8016860:	4020      	ands	r0, r4
 8016862:	b2c0      	uxtb	r0, r0
 8016864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016868 <uxr_serialize_INFO_Payload>:
 8016868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801686c:	2202      	movs	r2, #2
 801686e:	460c      	mov	r4, r1
 8016870:	4605      	mov	r5, r0
 8016872:	f7fc fb05 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016876:	2202      	movs	r2, #2
 8016878:	4680      	mov	r8, r0
 801687a:	4628      	mov	r0, r5
 801687c:	18a1      	adds	r1, r4, r2
 801687e:	f7fc faff 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016882:	4607      	mov	r7, r0
 8016884:	7921      	ldrb	r1, [r4, #4]
 8016886:	4628      	mov	r0, r5
 8016888:	f7f6 fe4a 	bl	800d520 <ucdr_serialize_uint8_t>
 801688c:	ea08 0807 	and.w	r8, r8, r7
 8016890:	4606      	mov	r6, r0
 8016892:	7961      	ldrb	r1, [r4, #5]
 8016894:	4628      	mov	r0, r5
 8016896:	ea06 0608 	and.w	r6, r6, r8
 801689a:	f7f6 fe41 	bl	800d520 <ucdr_serialize_uint8_t>
 801689e:	7a21      	ldrb	r1, [r4, #8]
 80168a0:	4030      	ands	r0, r6
 80168a2:	b2c7      	uxtb	r7, r0
 80168a4:	4628      	mov	r0, r5
 80168a6:	f7f6 fe0d 	bl	800d4c4 <ucdr_serialize_bool>
 80168aa:	7a23      	ldrb	r3, [r4, #8]
 80168ac:	4606      	mov	r6, r0
 80168ae:	b96b      	cbnz	r3, 80168cc <uxr_serialize_INFO_Payload+0x64>
 80168b0:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 80168b4:	4628      	mov	r0, r5
 80168b6:	f7f6 fe05 	bl	800d4c4 <ucdr_serialize_bool>
 80168ba:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 80168be:	4030      	ands	r0, r6
 80168c0:	b2c6      	uxtb	r6, r0
 80168c2:	b983      	cbnz	r3, 80168e6 <uxr_serialize_INFO_Payload+0x7e>
 80168c4:	ea06 0007 	and.w	r0, r6, r7
 80168c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168cc:	7b21      	ldrb	r1, [r4, #12]
 80168ce:	4628      	mov	r0, r5
 80168d0:	f7f6 fe26 	bl	800d520 <ucdr_serialize_uint8_t>
 80168d4:	b188      	cbz	r0, 80168fa <uxr_serialize_INFO_Payload+0x92>
 80168d6:	f104 010c 	add.w	r1, r4, #12
 80168da:	4628      	mov	r0, r5
 80168dc:	f7ff f9d8 	bl	8015c90 <uxr_serialize_ObjectVariant.part.0>
 80168e0:	4030      	ands	r0, r6
 80168e2:	b2c6      	uxtb	r6, r0
 80168e4:	e7e4      	b.n	80168b0 <uxr_serialize_INFO_Payload+0x48>
 80168e6:	f504 7108 	add.w	r1, r4, #544	; 0x220
 80168ea:	4628      	mov	r0, r5
 80168ec:	f7ff fdb8 	bl	8016460 <uxr_serialize_ActivityInfoVariant>
 80168f0:	4006      	ands	r6, r0
 80168f2:	ea06 0007 	and.w	r0, r6, r7
 80168f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80168fa:	4606      	mov	r6, r0
 80168fc:	e7d8      	b.n	80168b0 <uxr_serialize_INFO_Payload+0x48>
 80168fe:	bf00      	nop

08016900 <uxr_serialize_READ_DATA_Payload>:
 8016900:	b570      	push	{r4, r5, r6, lr}
 8016902:	2202      	movs	r2, #2
 8016904:	4605      	mov	r5, r0
 8016906:	460e      	mov	r6, r1
 8016908:	f7fc faba 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 801690c:	2202      	movs	r2, #2
 801690e:	4604      	mov	r4, r0
 8016910:	4628      	mov	r0, r5
 8016912:	18b1      	adds	r1, r6, r2
 8016914:	f7fc fab4 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016918:	4603      	mov	r3, r0
 801691a:	1d31      	adds	r1, r6, #4
 801691c:	4628      	mov	r0, r5
 801691e:	401c      	ands	r4, r3
 8016920:	f7ff fe5e 	bl	80165e0 <uxr_serialize_ReadSpecification>
 8016924:	b2e4      	uxtb	r4, r4
 8016926:	4020      	ands	r0, r4
 8016928:	bd70      	pop	{r4, r5, r6, pc}
 801692a:	bf00      	nop

0801692c <uxr_serialize_WRITE_DATA_Payload_Data>:
 801692c:	b570      	push	{r4, r5, r6, lr}
 801692e:	2202      	movs	r2, #2
 8016930:	4605      	mov	r5, r0
 8016932:	460e      	mov	r6, r1
 8016934:	f7fc faa4 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016938:	2202      	movs	r2, #2
 801693a:	4604      	mov	r4, r0
 801693c:	4628      	mov	r0, r5
 801693e:	18b1      	adds	r1, r6, r2
 8016940:	f7fc fa9e 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016944:	4020      	ands	r0, r4
 8016946:	b2c0      	uxtb	r0, r0
 8016948:	bd70      	pop	{r4, r5, r6, pc}
 801694a:	bf00      	nop

0801694c <uxr_serialize_ACKNACK_Payload>:
 801694c:	b570      	push	{r4, r5, r6, lr}
 801694e:	460c      	mov	r4, r1
 8016950:	4605      	mov	r5, r0
 8016952:	460e      	mov	r6, r1
 8016954:	f834 1b02 	ldrh.w	r1, [r4], #2
 8016958:	f7f6 fe0e 	bl	800d578 <ucdr_serialize_uint16_t>
 801695c:	2202      	movs	r2, #2
 801695e:	4621      	mov	r1, r4
 8016960:	4604      	mov	r4, r0
 8016962:	4628      	mov	r0, r5
 8016964:	f7fc fa8c 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016968:	4603      	mov	r3, r0
 801696a:	7931      	ldrb	r1, [r6, #4]
 801696c:	4628      	mov	r0, r5
 801696e:	401c      	ands	r4, r3
 8016970:	f7f6 fdd6 	bl	800d520 <ucdr_serialize_uint8_t>
 8016974:	b2e4      	uxtb	r4, r4
 8016976:	4020      	ands	r0, r4
 8016978:	bd70      	pop	{r4, r5, r6, pc}
 801697a:	bf00      	nop

0801697c <uxr_deserialize_ACKNACK_Payload>:
 801697c:	b570      	push	{r4, r5, r6, lr}
 801697e:	460e      	mov	r6, r1
 8016980:	4605      	mov	r5, r0
 8016982:	f7f6 fef9 	bl	800d778 <ucdr_deserialize_uint16_t>
 8016986:	2202      	movs	r2, #2
 8016988:	4604      	mov	r4, r0
 801698a:	4628      	mov	r0, r5
 801698c:	18b1      	adds	r1, r6, r2
 801698e:	f7fc fadb 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8016992:	4603      	mov	r3, r0
 8016994:	1d31      	adds	r1, r6, #4
 8016996:	4628      	mov	r0, r5
 8016998:	401c      	ands	r4, r3
 801699a:	f7f6 fdd7 	bl	800d54c <ucdr_deserialize_uint8_t>
 801699e:	b2e4      	uxtb	r4, r4
 80169a0:	4020      	ands	r0, r4
 80169a2:	bd70      	pop	{r4, r5, r6, pc}

080169a4 <uxr_serialize_HEARTBEAT_Payload>:
 80169a4:	b570      	push	{r4, r5, r6, lr}
 80169a6:	460d      	mov	r5, r1
 80169a8:	4606      	mov	r6, r0
 80169aa:	8809      	ldrh	r1, [r1, #0]
 80169ac:	f7f6 fde4 	bl	800d578 <ucdr_serialize_uint16_t>
 80169b0:	8869      	ldrh	r1, [r5, #2]
 80169b2:	4604      	mov	r4, r0
 80169b4:	4630      	mov	r0, r6
 80169b6:	f7f6 fddf 	bl	800d578 <ucdr_serialize_uint16_t>
 80169ba:	4603      	mov	r3, r0
 80169bc:	7929      	ldrb	r1, [r5, #4]
 80169be:	4630      	mov	r0, r6
 80169c0:	401c      	ands	r4, r3
 80169c2:	f7f6 fdad 	bl	800d520 <ucdr_serialize_uint8_t>
 80169c6:	b2e4      	uxtb	r4, r4
 80169c8:	4020      	ands	r0, r4
 80169ca:	bd70      	pop	{r4, r5, r6, pc}

080169cc <uxr_deserialize_HEARTBEAT_Payload>:
 80169cc:	b570      	push	{r4, r5, r6, lr}
 80169ce:	460e      	mov	r6, r1
 80169d0:	4605      	mov	r5, r0
 80169d2:	f7f6 fed1 	bl	800d778 <ucdr_deserialize_uint16_t>
 80169d6:	4604      	mov	r4, r0
 80169d8:	1cb1      	adds	r1, r6, #2
 80169da:	4628      	mov	r0, r5
 80169dc:	f7f6 fecc 	bl	800d778 <ucdr_deserialize_uint16_t>
 80169e0:	4603      	mov	r3, r0
 80169e2:	1d31      	adds	r1, r6, #4
 80169e4:	4628      	mov	r0, r5
 80169e6:	401c      	ands	r4, r3
 80169e8:	f7f6 fdb0 	bl	800d54c <ucdr_deserialize_uint8_t>
 80169ec:	b2e4      	uxtb	r4, r4
 80169ee:	4020      	ands	r0, r4
 80169f0:	bd70      	pop	{r4, r5, r6, pc}
 80169f2:	bf00      	nop

080169f4 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 80169f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169f8:	460e      	mov	r6, r1
 80169fa:	4605      	mov	r5, r0
 80169fc:	f7f7 fc58 	bl	800e2b0 <ucdr_deserialize_int32_t>
 8016a00:	4607      	mov	r7, r0
 8016a02:	1d31      	adds	r1, r6, #4
 8016a04:	4628      	mov	r0, r5
 8016a06:	f7f7 f8d1 	bl	800dbac <ucdr_deserialize_uint32_t>
 8016a0a:	4680      	mov	r8, r0
 8016a0c:	f106 0108 	add.w	r1, r6, #8
 8016a10:	4628      	mov	r0, r5
 8016a12:	f7f7 fc4d 	bl	800e2b0 <ucdr_deserialize_int32_t>
 8016a16:	ea07 0708 	and.w	r7, r7, r8
 8016a1a:	4604      	mov	r4, r0
 8016a1c:	f106 010c 	add.w	r1, r6, #12
 8016a20:	4628      	mov	r0, r5
 8016a22:	403c      	ands	r4, r7
 8016a24:	f7f7 f8c2 	bl	800dbac <ucdr_deserialize_uint32_t>
 8016a28:	f106 0110 	add.w	r1, r6, #16
 8016a2c:	4004      	ands	r4, r0
 8016a2e:	4628      	mov	r0, r5
 8016a30:	f7f7 fc3e 	bl	800e2b0 <ucdr_deserialize_int32_t>
 8016a34:	4603      	mov	r3, r0
 8016a36:	b2e4      	uxtb	r4, r4
 8016a38:	4628      	mov	r0, r5
 8016a3a:	461d      	mov	r5, r3
 8016a3c:	f106 0114 	add.w	r1, r6, #20
 8016a40:	f7f7 f8b4 	bl	800dbac <ucdr_deserialize_uint32_t>
 8016a44:	402c      	ands	r4, r5
 8016a46:	4020      	ands	r0, r4
 8016a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a4c <uxr_serialize_SampleIdentity>:
 8016a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a50:	4604      	mov	r4, r0
 8016a52:	460d      	mov	r5, r1
 8016a54:	220c      	movs	r2, #12
 8016a56:	f7fc fa13 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016a5a:	2203      	movs	r2, #3
 8016a5c:	f105 010c 	add.w	r1, r5, #12
 8016a60:	4607      	mov	r7, r0
 8016a62:	4620      	mov	r0, r4
 8016a64:	f7fc fa0c 	bl	8012e80 <ucdr_serialize_array_uint8_t>
 8016a68:	7be9      	ldrb	r1, [r5, #15]
 8016a6a:	4680      	mov	r8, r0
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	f7f6 fd57 	bl	800d520 <ucdr_serialize_uint8_t>
 8016a72:	6929      	ldr	r1, [r5, #16]
 8016a74:	4606      	mov	r6, r0
 8016a76:	4620      	mov	r0, r4
 8016a78:	f7f7 fb82 	bl	800e180 <ucdr_serialize_int32_t>
 8016a7c:	ea07 0708 	and.w	r7, r7, r8
 8016a80:	4603      	mov	r3, r0
 8016a82:	4620      	mov	r0, r4
 8016a84:	403e      	ands	r6, r7
 8016a86:	6969      	ldr	r1, [r5, #20]
 8016a88:	461c      	mov	r4, r3
 8016a8a:	f7f6 ff5f 	bl	800d94c <ucdr_serialize_uint32_t>
 8016a8e:	4034      	ands	r4, r6
 8016a90:	4020      	ands	r0, r4
 8016a92:	b2c0      	uxtb	r0, r0
 8016a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016a98 <uxr_deserialize_SampleIdentity>:
 8016a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a9c:	4604      	mov	r4, r0
 8016a9e:	460d      	mov	r5, r1
 8016aa0:	220c      	movs	r2, #12
 8016aa2:	f7fc fa51 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8016aa6:	2203      	movs	r2, #3
 8016aa8:	f105 010c 	add.w	r1, r5, #12
 8016aac:	4607      	mov	r7, r0
 8016aae:	4620      	mov	r0, r4
 8016ab0:	f7fc fa4a 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8016ab4:	f105 010f 	add.w	r1, r5, #15
 8016ab8:	4680      	mov	r8, r0
 8016aba:	4620      	mov	r0, r4
 8016abc:	f7f6 fd46 	bl	800d54c <ucdr_deserialize_uint8_t>
 8016ac0:	f105 0110 	add.w	r1, r5, #16
 8016ac4:	4606      	mov	r6, r0
 8016ac6:	4620      	mov	r0, r4
 8016ac8:	f7f7 fbf2 	bl	800e2b0 <ucdr_deserialize_int32_t>
 8016acc:	ea07 0708 	and.w	r7, r7, r8
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	4620      	mov	r0, r4
 8016ad4:	403e      	ands	r6, r7
 8016ad6:	f105 0114 	add.w	r1, r5, #20
 8016ada:	461c      	mov	r4, r3
 8016adc:	f7f7 f866 	bl	800dbac <ucdr_deserialize_uint32_t>
 8016ae0:	4034      	ands	r4, r6
 8016ae2:	4020      	ands	r0, r4
 8016ae4:	b2c0      	uxtb	r0, r0
 8016ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016aea:	bf00      	nop

08016aec <rcl_client_get_rmw_handle>:
 8016aec:	b118      	cbz	r0, 8016af6 <rcl_client_get_rmw_handle+0xa>
 8016aee:	6800      	ldr	r0, [r0, #0]
 8016af0:	b108      	cbz	r0, 8016af6 <rcl_client_get_rmw_handle+0xa>
 8016af2:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8016af6:	4770      	bx	lr

08016af8 <rcl_send_request>:
 8016af8:	b570      	push	{r4, r5, r6, lr}
 8016afa:	b082      	sub	sp, #8
 8016afc:	b1f8      	cbz	r0, 8016b3e <rcl_send_request+0x46>
 8016afe:	4604      	mov	r4, r0
 8016b00:	6800      	ldr	r0, [r0, #0]
 8016b02:	b1e0      	cbz	r0, 8016b3e <rcl_send_request+0x46>
 8016b04:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8016b08:	b1cb      	cbz	r3, 8016b3e <rcl_send_request+0x46>
 8016b0a:	460e      	mov	r6, r1
 8016b0c:	b1e1      	cbz	r1, 8016b48 <rcl_send_request+0x50>
 8016b0e:	4615      	mov	r5, r2
 8016b10:	b1d2      	cbz	r2, 8016b48 <rcl_send_request+0x50>
 8016b12:	2105      	movs	r1, #5
 8016b14:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8016b18:	f002 fa2e 	bl	8018f78 <__atomic_load_8>
 8016b1c:	4602      	mov	r2, r0
 8016b1e:	460b      	mov	r3, r1
 8016b20:	4631      	mov	r1, r6
 8016b22:	e9c5 2300 	strd	r2, r3, [r5]
 8016b26:	6823      	ldr	r3, [r4, #0]
 8016b28:	462a      	mov	r2, r5
 8016b2a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8016b2e:	f7fa ff17 	bl	8011960 <rmw_send_request>
 8016b32:	4606      	mov	r6, r0
 8016b34:	b160      	cbz	r0, 8016b50 <rcl_send_request+0x58>
 8016b36:	2601      	movs	r6, #1
 8016b38:	4630      	mov	r0, r6
 8016b3a:	b002      	add	sp, #8
 8016b3c:	bd70      	pop	{r4, r5, r6, pc}
 8016b3e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
 8016b42:	4630      	mov	r0, r6
 8016b44:	b002      	add	sp, #8
 8016b46:	bd70      	pop	{r4, r5, r6, pc}
 8016b48:	260b      	movs	r6, #11
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	b002      	add	sp, #8
 8016b4e:	bd70      	pop	{r4, r5, r6, pc}
 8016b50:	6820      	ldr	r0, [r4, #0]
 8016b52:	2105      	movs	r1, #5
 8016b54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016b58:	f500 7088 	add.w	r0, r0, #272	; 0x110
 8016b5c:	9100      	str	r1, [sp, #0]
 8016b5e:	f002 fa77 	bl	8019050 <__atomic_exchange_8>
 8016b62:	4630      	mov	r0, r6
 8016b64:	b002      	add	sp, #8
 8016b66:	bd70      	pop	{r4, r5, r6, pc}

08016b68 <rcl_take_response>:
 8016b68:	b570      	push	{r4, r5, r6, lr}
 8016b6a:	468e      	mov	lr, r1
 8016b6c:	b08c      	sub	sp, #48	; 0x30
 8016b6e:	460c      	mov	r4, r1
 8016b70:	4616      	mov	r6, r2
 8016b72:	f10d 0c18 	add.w	ip, sp, #24
 8016b76:	4605      	mov	r5, r0
 8016b78:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016b7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016b80:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016b84:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016b88:	b35d      	cbz	r5, 8016be2 <rcl_take_response+0x7a>
 8016b8a:	682b      	ldr	r3, [r5, #0]
 8016b8c:	b34b      	cbz	r3, 8016be2 <rcl_take_response+0x7a>
 8016b8e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
 8016b92:	b330      	cbz	r0, 8016be2 <rcl_take_response+0x7a>
 8016b94:	b346      	cbz	r6, 8016be8 <rcl_take_response+0x80>
 8016b96:	2300      	movs	r3, #0
 8016b98:	4632      	mov	r2, r6
 8016b9a:	a902      	add	r1, sp, #8
 8016b9c:	f88d 3007 	strb.w	r3, [sp, #7]
 8016ba0:	f10d 0307 	add.w	r3, sp, #7
 8016ba4:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8016bf0 <rcl_take_response+0x88>
 8016ba8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016bac:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016bb0:	f7fa ffde 	bl	8011b70 <rmw_take_response>
 8016bb4:	4605      	mov	r5, r0
 8016bb6:	b9c8      	cbnz	r0, 8016bec <rcl_take_response+0x84>
 8016bb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016bbc:	f240 13f5 	movw	r3, #501	; 0x1f5
 8016bc0:	2a00      	cmp	r2, #0
 8016bc2:	bf08      	it	eq
 8016bc4:	461d      	moveq	r5, r3
 8016bc6:	f10d 0e18 	add.w	lr, sp, #24
 8016bca:	46a4      	mov	ip, r4
 8016bcc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016bd0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016bd4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016bd8:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016bdc:	4628      	mov	r0, r5
 8016bde:	b00c      	add	sp, #48	; 0x30
 8016be0:	bd70      	pop	{r4, r5, r6, pc}
 8016be2:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8016be6:	e7ee      	b.n	8016bc6 <rcl_take_response+0x5e>
 8016be8:	250b      	movs	r5, #11
 8016bea:	e7ec      	b.n	8016bc6 <rcl_take_response+0x5e>
 8016bec:	2501      	movs	r5, #1
 8016bee:	e7ea      	b.n	8016bc6 <rcl_take_response+0x5e>
	...

08016bf8 <rcl_client_is_valid>:
 8016bf8:	b130      	cbz	r0, 8016c08 <rcl_client_is_valid+0x10>
 8016bfa:	6800      	ldr	r0, [r0, #0]
 8016bfc:	b120      	cbz	r0, 8016c08 <rcl_client_is_valid+0x10>
 8016bfe:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
 8016c02:	3800      	subs	r0, #0
 8016c04:	bf18      	it	ne
 8016c06:	2001      	movne	r0, #1
 8016c08:	4770      	bx	lr
 8016c0a:	bf00      	nop

08016c0c <rcl_convert_rmw_ret_to_rcl_ret>:
 8016c0c:	280b      	cmp	r0, #11
 8016c0e:	dc0d      	bgt.n	8016c2c <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8016c10:	2800      	cmp	r0, #0
 8016c12:	db09      	blt.n	8016c28 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016c14:	280b      	cmp	r0, #11
 8016c16:	d807      	bhi.n	8016c28 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8016c18:	e8df f000 	tbb	[pc, r0]
 8016c1c:	07060607 	.word	0x07060607
 8016c20:	06060606 	.word	0x06060606
 8016c24:	07070606 	.word	0x07070606
 8016c28:	2001      	movs	r0, #1
 8016c2a:	4770      	bx	lr
 8016c2c:	28cb      	cmp	r0, #203	; 0xcb
 8016c2e:	bf18      	it	ne
 8016c30:	2001      	movne	r0, #1
 8016c32:	4770      	bx	lr

08016c34 <rcl_get_zero_initialized_context>:
 8016c34:	4a03      	ldr	r2, [pc, #12]	; (8016c44 <rcl_get_zero_initialized_context+0x10>)
 8016c36:	4603      	mov	r3, r0
 8016c38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016c3c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016c40:	4618      	mov	r0, r3
 8016c42:	4770      	bx	lr
 8016c44:	0801d80c 	.word	0x0801d80c

08016c48 <rcl_context_is_valid>:
 8016c48:	b118      	cbz	r0, 8016c52 <rcl_context_is_valid+0xa>
 8016c4a:	6840      	ldr	r0, [r0, #4]
 8016c4c:	3800      	subs	r0, #0
 8016c4e:	bf18      	it	ne
 8016c50:	2001      	movne	r0, #1
 8016c52:	4770      	bx	lr

08016c54 <__cleanup_context>:
 8016c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016c58:	4606      	mov	r6, r0
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	6800      	ldr	r0, [r0, #0]
 8016c5e:	6073      	str	r3, [r6, #4]
 8016c60:	2800      	cmp	r0, #0
 8016c62:	d049      	beq.n	8016cf8 <__cleanup_context+0xa4>
 8016c64:	6947      	ldr	r7, [r0, #20]
 8016c66:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8016c6a:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8016c6e:	b137      	cbz	r7, 8016c7e <__cleanup_context+0x2a>
 8016c70:	3014      	adds	r0, #20
 8016c72:	f7f8 f861 	bl	800ed38 <rcl_init_options_fini>
 8016c76:	4607      	mov	r7, r0
 8016c78:	2800      	cmp	r0, #0
 8016c7a:	d144      	bne.n	8016d06 <__cleanup_context+0xb2>
 8016c7c:	6830      	ldr	r0, [r6, #0]
 8016c7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016c80:	b143      	cbz	r3, 8016c94 <__cleanup_context+0x40>
 8016c82:	3028      	adds	r0, #40	; 0x28
 8016c84:	f7fa fb74 	bl	8011370 <rmw_context_fini>
 8016c88:	b118      	cbz	r0, 8016c92 <__cleanup_context+0x3e>
 8016c8a:	2f00      	cmp	r7, #0
 8016c8c:	d03e      	beq.n	8016d0c <__cleanup_context+0xb8>
 8016c8e:	f7f9 fe33 	bl	80108f8 <rcutils_reset_error>
 8016c92:	6830      	ldr	r0, [r6, #0]
 8016c94:	6a03      	ldr	r3, [r0, #32]
 8016c96:	b1db      	cbz	r3, 8016cd0 <__cleanup_context+0x7c>
 8016c98:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8016c9c:	2a01      	cmp	r2, #1
 8016c9e:	f17c 0100 	sbcs.w	r1, ip, #0
 8016ca2:	db11      	blt.n	8016cc8 <__cleanup_context+0x74>
 8016ca4:	2400      	movs	r4, #0
 8016ca6:	4625      	mov	r5, r4
 8016ca8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016cac:	4649      	mov	r1, r9
 8016cae:	b1b8      	cbz	r0, 8016ce0 <__cleanup_context+0x8c>
 8016cb0:	47c0      	blx	r8
 8016cb2:	6833      	ldr	r3, [r6, #0]
 8016cb4:	3401      	adds	r4, #1
 8016cb6:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8016cba:	f145 0500 	adc.w	r5, r5, #0
 8016cbe:	6a1b      	ldr	r3, [r3, #32]
 8016cc0:	4294      	cmp	r4, r2
 8016cc2:	eb75 010c 	sbcs.w	r1, r5, ip
 8016cc6:	dbef      	blt.n	8016ca8 <__cleanup_context+0x54>
 8016cc8:	4618      	mov	r0, r3
 8016cca:	4649      	mov	r1, r9
 8016ccc:	47c0      	blx	r8
 8016cce:	6830      	ldr	r0, [r6, #0]
 8016cd0:	4649      	mov	r1, r9
 8016cd2:	47c0      	blx	r8
 8016cd4:	2300      	movs	r3, #0
 8016cd6:	4638      	mov	r0, r7
 8016cd8:	e9c6 3300 	strd	r3, r3, [r6]
 8016cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016ce0:	3401      	adds	r4, #1
 8016ce2:	f145 0500 	adc.w	r5, r5, #0
 8016ce6:	4294      	cmp	r4, r2
 8016ce8:	eb75 010c 	sbcs.w	r1, r5, ip
 8016cec:	dbdc      	blt.n	8016ca8 <__cleanup_context+0x54>
 8016cee:	4618      	mov	r0, r3
 8016cf0:	4649      	mov	r1, r9
 8016cf2:	47c0      	blx	r8
 8016cf4:	6830      	ldr	r0, [r6, #0]
 8016cf6:	e7eb      	b.n	8016cd0 <__cleanup_context+0x7c>
 8016cf8:	4607      	mov	r7, r0
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	4638      	mov	r0, r7
 8016cfe:	e9c6 3300 	strd	r3, r3, [r6]
 8016d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d06:	f7f9 fdf7 	bl	80108f8 <rcutils_reset_error>
 8016d0a:	e7b7      	b.n	8016c7c <__cleanup_context+0x28>
 8016d0c:	f7ff ff7e 	bl	8016c0c <rcl_convert_rmw_ret_to_rcl_ret>
 8016d10:	4607      	mov	r7, r0
 8016d12:	e7bc      	b.n	8016c8e <__cleanup_context+0x3a>

08016d14 <rcl_get_zero_initialized_guard_condition>:
 8016d14:	4a03      	ldr	r2, [pc, #12]	; (8016d24 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016d16:	4603      	mov	r3, r0
 8016d18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d1c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d20:	4618      	mov	r0, r3
 8016d22:	4770      	bx	lr
 8016d24:	0801d814 	.word	0x0801d814

08016d28 <rcl_guard_condition_init_from_rmw>:
 8016d28:	b082      	sub	sp, #8
 8016d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d2e:	b086      	sub	sp, #24
 8016d30:	4604      	mov	r4, r0
 8016d32:	460e      	mov	r6, r1
 8016d34:	4615      	mov	r5, r2
 8016d36:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8016d3a:	f10d 0e04 	add.w	lr, sp, #4
 8016d3e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8016d42:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016d46:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016d4a:	f8dc 3000 	ldr.w	r3, [ip]
 8016d4e:	a801      	add	r0, sp, #4
 8016d50:	f8ce 3000 	str.w	r3, [lr]
 8016d54:	f7f9 fd92 	bl	801087c <rcutils_allocator_is_valid>
 8016d58:	f080 0301 	eor.w	r3, r0, #1
 8016d5c:	b2db      	uxtb	r3, r3
 8016d5e:	bb3b      	cbnz	r3, 8016db0 <rcl_guard_condition_init_from_rmw+0x88>
 8016d60:	b334      	cbz	r4, 8016db0 <rcl_guard_condition_init_from_rmw+0x88>
 8016d62:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8016d66:	f1b8 0f00 	cmp.w	r8, #0
 8016d6a:	d11a      	bne.n	8016da2 <rcl_guard_condition_init_from_rmw+0x7a>
 8016d6c:	b305      	cbz	r5, 8016db0 <rcl_guard_condition_init_from_rmw+0x88>
 8016d6e:	4628      	mov	r0, r5
 8016d70:	f7ff ff6a 	bl	8016c48 <rcl_context_is_valid>
 8016d74:	b1f0      	cbz	r0, 8016db4 <rcl_guard_condition_init_from_rmw+0x8c>
 8016d76:	9b01      	ldr	r3, [sp, #4]
 8016d78:	201c      	movs	r0, #28
 8016d7a:	9905      	ldr	r1, [sp, #20]
 8016d7c:	4798      	blx	r3
 8016d7e:	4607      	mov	r7, r0
 8016d80:	6060      	str	r0, [r4, #4]
 8016d82:	b320      	cbz	r0, 8016dce <rcl_guard_condition_init_from_rmw+0xa6>
 8016d84:	b1c6      	cbz	r6, 8016db8 <rcl_guard_condition_init_from_rmw+0x90>
 8016d86:	6006      	str	r6, [r0, #0]
 8016d88:	f880 8004 	strb.w	r8, [r0, #4]
 8016d8c:	ac01      	add	r4, sp, #4
 8016d8e:	f107 0c08 	add.w	ip, r7, #8
 8016d92:	2500      	movs	r5, #0
 8016d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016d96:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016d9a:	6823      	ldr	r3, [r4, #0]
 8016d9c:	f8cc 3000 	str.w	r3, [ip]
 8016da0:	e000      	b.n	8016da4 <rcl_guard_condition_init_from_rmw+0x7c>
 8016da2:	2564      	movs	r5, #100	; 0x64
 8016da4:	4628      	mov	r0, r5
 8016da6:	b006      	add	sp, #24
 8016da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016dac:	b002      	add	sp, #8
 8016dae:	4770      	bx	lr
 8016db0:	250b      	movs	r5, #11
 8016db2:	e7f7      	b.n	8016da4 <rcl_guard_condition_init_from_rmw+0x7c>
 8016db4:	2565      	movs	r5, #101	; 0x65
 8016db6:	e7f5      	b.n	8016da4 <rcl_guard_condition_init_from_rmw+0x7c>
 8016db8:	6828      	ldr	r0, [r5, #0]
 8016dba:	3028      	adds	r0, #40	; 0x28
 8016dbc:	f002 fd56 	bl	801986c <rmw_create_guard_condition>
 8016dc0:	6038      	str	r0, [r7, #0]
 8016dc2:	6867      	ldr	r7, [r4, #4]
 8016dc4:	683e      	ldr	r6, [r7, #0]
 8016dc6:	b126      	cbz	r6, 8016dd2 <rcl_guard_condition_init_from_rmw+0xaa>
 8016dc8:	2301      	movs	r3, #1
 8016dca:	713b      	strb	r3, [r7, #4]
 8016dcc:	e7de      	b.n	8016d8c <rcl_guard_condition_init_from_rmw+0x64>
 8016dce:	250a      	movs	r5, #10
 8016dd0:	e7e8      	b.n	8016da4 <rcl_guard_condition_init_from_rmw+0x7c>
 8016dd2:	9b02      	ldr	r3, [sp, #8]
 8016dd4:	4638      	mov	r0, r7
 8016dd6:	9905      	ldr	r1, [sp, #20]
 8016dd8:	2501      	movs	r5, #1
 8016dda:	4798      	blx	r3
 8016ddc:	6066      	str	r6, [r4, #4]
 8016dde:	e7e1      	b.n	8016da4 <rcl_guard_condition_init_from_rmw+0x7c>

08016de0 <rcl_guard_condition_fini>:
 8016de0:	b570      	push	{r4, r5, r6, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	b1f0      	cbz	r0, 8016e24 <rcl_guard_condition_fini+0x44>
 8016de6:	6843      	ldr	r3, [r0, #4]
 8016de8:	4604      	mov	r4, r0
 8016dea:	b163      	cbz	r3, 8016e06 <rcl_guard_condition_fini+0x26>
 8016dec:	6818      	ldr	r0, [r3, #0]
 8016dee:	68de      	ldr	r6, [r3, #12]
 8016df0:	6999      	ldr	r1, [r3, #24]
 8016df2:	b160      	cbz	r0, 8016e0e <rcl_guard_condition_fini+0x2e>
 8016df4:	791d      	ldrb	r5, [r3, #4]
 8016df6:	b965      	cbnz	r5, 8016e12 <rcl_guard_condition_fini+0x32>
 8016df8:	4618      	mov	r0, r3
 8016dfa:	47b0      	blx	r6
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	4628      	mov	r0, r5
 8016e00:	6063      	str	r3, [r4, #4]
 8016e02:	b002      	add	sp, #8
 8016e04:	bd70      	pop	{r4, r5, r6, pc}
 8016e06:	461d      	mov	r5, r3
 8016e08:	4628      	mov	r0, r5
 8016e0a:	b002      	add	sp, #8
 8016e0c:	bd70      	pop	{r4, r5, r6, pc}
 8016e0e:	4605      	mov	r5, r0
 8016e10:	e7f2      	b.n	8016df8 <rcl_guard_condition_fini+0x18>
 8016e12:	9101      	str	r1, [sp, #4]
 8016e14:	f002 fd40 	bl	8019898 <rmw_destroy_guard_condition>
 8016e18:	1e05      	subs	r5, r0, #0
 8016e1a:	6863      	ldr	r3, [r4, #4]
 8016e1c:	9901      	ldr	r1, [sp, #4]
 8016e1e:	bf18      	it	ne
 8016e20:	2501      	movne	r5, #1
 8016e22:	e7e9      	b.n	8016df8 <rcl_guard_condition_fini+0x18>
 8016e24:	250b      	movs	r5, #11
 8016e26:	4628      	mov	r0, r5
 8016e28:	b002      	add	sp, #8
 8016e2a:	bd70      	pop	{r4, r5, r6, pc}

08016e2c <rcl_guard_condition_get_default_options>:
 8016e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e2e:	b087      	sub	sp, #28
 8016e30:	4606      	mov	r6, r0
 8016e32:	4c0b      	ldr	r4, [pc, #44]	; (8016e60 <rcl_guard_condition_get_default_options+0x34>)
 8016e34:	4668      	mov	r0, sp
 8016e36:	f7f9 fd13 	bl	8010860 <rcutils_get_default_allocator>
 8016e3a:	46ee      	mov	lr, sp
 8016e3c:	46a4      	mov	ip, r4
 8016e3e:	4625      	mov	r5, r4
 8016e40:	4634      	mov	r4, r6
 8016e42:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016e46:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016e4c:	f8de 7000 	ldr.w	r7, [lr]
 8016e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016e52:	4630      	mov	r0, r6
 8016e54:	f8cc 7000 	str.w	r7, [ip]
 8016e58:	6027      	str	r7, [r4, #0]
 8016e5a:	b007      	add	sp, #28
 8016e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016e5e:	bf00      	nop
 8016e60:	20011458 	.word	0x20011458

08016e64 <rcl_guard_condition_get_rmw_handle>:
 8016e64:	b110      	cbz	r0, 8016e6c <rcl_guard_condition_get_rmw_handle+0x8>
 8016e66:	6840      	ldr	r0, [r0, #4]
 8016e68:	b100      	cbz	r0, 8016e6c <rcl_guard_condition_get_rmw_handle+0x8>
 8016e6a:	6800      	ldr	r0, [r0, #0]
 8016e6c:	4770      	bx	lr
 8016e6e:	bf00      	nop

08016e70 <rcl_init>:
 8016e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e74:	1e05      	subs	r5, r0, #0
 8016e76:	b09e      	sub	sp, #120	; 0x78
 8016e78:	460e      	mov	r6, r1
 8016e7a:	4690      	mov	r8, r2
 8016e7c:	461f      	mov	r7, r3
 8016e7e:	f340 809f 	ble.w	8016fc0 <rcl_init+0x150>
 8016e82:	2900      	cmp	r1, #0
 8016e84:	f000 809f 	beq.w	8016fc6 <rcl_init+0x156>
 8016e88:	f1a1 0e04 	sub.w	lr, r1, #4
 8016e8c:	f04f 0c00 	mov.w	ip, #0
 8016e90:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8016e94:	f10c 0c01 	add.w	ip, ip, #1
 8016e98:	2c00      	cmp	r4, #0
 8016e9a:	f000 8094 	beq.w	8016fc6 <rcl_init+0x156>
 8016e9e:	4565      	cmp	r5, ip
 8016ea0:	d1f6      	bne.n	8016e90 <rcl_init+0x20>
 8016ea2:	f1b8 0f00 	cmp.w	r8, #0
 8016ea6:	f000 808e 	beq.w	8016fc6 <rcl_init+0x156>
 8016eaa:	f8d8 4000 	ldr.w	r4, [r8]
 8016eae:	2c00      	cmp	r4, #0
 8016eb0:	f000 8089 	beq.w	8016fc6 <rcl_init+0x156>
 8016eb4:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 8016eb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016eba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016ebe:	6823      	ldr	r3, [r4, #0]
 8016ec0:	a819      	add	r0, sp, #100	; 0x64
 8016ec2:	f8cc 3000 	str.w	r3, [ip]
 8016ec6:	f7f9 fcd9 	bl	801087c <rcutils_allocator_is_valid>
 8016eca:	f080 0001 	eor.w	r0, r0, #1
 8016ece:	b2c0      	uxtb	r0, r0
 8016ed0:	2800      	cmp	r0, #0
 8016ed2:	d178      	bne.n	8016fc6 <rcl_init+0x156>
 8016ed4:	2f00      	cmp	r7, #0
 8016ed6:	d076      	beq.n	8016fc6 <rcl_init+0x156>
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d178      	bne.n	8016fd0 <rcl_init+0x160>
 8016ede:	2178      	movs	r1, #120	; 0x78
 8016ee0:	2001      	movs	r0, #1
 8016ee2:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8016ee6:	4798      	blx	r3
 8016ee8:	4604      	mov	r4, r0
 8016eea:	6038      	str	r0, [r7, #0]
 8016eec:	2800      	cmp	r0, #0
 8016eee:	f000 80b6 	beq.w	801705e <rcl_init+0x1ee>
 8016ef2:	a802      	add	r0, sp, #8
 8016ef4:	f002 fa4c 	bl	8019390 <rmw_get_zero_initialized_context>
 8016ef8:	a902      	add	r1, sp, #8
 8016efa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016efe:	2250      	movs	r2, #80	; 0x50
 8016f00:	f004 fd9d 	bl	801ba3e <memcpy>
 8016f04:	ac19      	add	r4, sp, #100	; 0x64
 8016f06:	f8d7 e000 	ldr.w	lr, [r7]
 8016f0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f0c:	46f4      	mov	ip, lr
 8016f0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016f12:	6823      	ldr	r3, [r4, #0]
 8016f14:	f10e 0114 	add.w	r1, lr, #20
 8016f18:	4640      	mov	r0, r8
 8016f1a:	f8cc 3000 	str.w	r3, [ip]
 8016f1e:	f7f7 ff35 	bl	800ed8c <rcl_init_options_copy>
 8016f22:	4604      	mov	r4, r0
 8016f24:	2800      	cmp	r0, #0
 8016f26:	d144      	bne.n	8016fb2 <rcl_init+0x142>
 8016f28:	f8d7 9000 	ldr.w	r9, [r7]
 8016f2c:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8016f30:	f8c9 0020 	str.w	r0, [r9, #32]
 8016f34:	f8c9 5018 	str.w	r5, [r9, #24]
 8016f38:	f8c9 801c 	str.w	r8, [r9, #28]
 8016f3c:	2d00      	cmp	r5, #0
 8016f3e:	d04e      	beq.n	8016fde <rcl_init+0x16e>
 8016f40:	2e00      	cmp	r6, #0
 8016f42:	d04c      	beq.n	8016fde <rcl_init+0x16e>
 8016f44:	2104      	movs	r1, #4
 8016f46:	4628      	mov	r0, r5
 8016f48:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 8016f4c:	4798      	blx	r3
 8016f4e:	f8c9 0020 	str.w	r0, [r9, #32]
 8016f52:	f8d7 9000 	ldr.w	r9, [r7]
 8016f56:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8016f5a:	46ca      	mov	sl, r9
 8016f5c:	b343      	cbz	r3, 8016fb0 <rcl_init+0x140>
 8016f5e:	2d01      	cmp	r5, #1
 8016f60:	f178 0300 	sbcs.w	r3, r8, #0
 8016f64:	db3b      	blt.n	8016fde <rcl_init+0x16e>
 8016f66:	2400      	movs	r4, #0
 8016f68:	3e04      	subs	r6, #4
 8016f6a:	46a1      	mov	r9, r4
 8016f6c:	e00b      	b.n	8016f86 <rcl_init+0x116>
 8016f6e:	6831      	ldr	r1, [r6, #0]
 8016f70:	f004 fd65 	bl	801ba3e <memcpy>
 8016f74:	3401      	adds	r4, #1
 8016f76:	f149 0900 	adc.w	r9, r9, #0
 8016f7a:	45c8      	cmp	r8, r9
 8016f7c:	bf08      	it	eq
 8016f7e:	42a5      	cmpeq	r5, r4
 8016f80:	d02b      	beq.n	8016fda <rcl_init+0x16a>
 8016f82:	f8d7 a000 	ldr.w	sl, [r7]
 8016f86:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8016f8a:	f7e9 f963 	bl	8000254 <strlen>
 8016f8e:	1c42      	adds	r2, r0, #1
 8016f90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016f92:	4610      	mov	r0, r2
 8016f94:	991d      	ldr	r1, [sp, #116]	; 0x74
 8016f96:	f8da a020 	ldr.w	sl, [sl, #32]
 8016f9a:	9201      	str	r2, [sp, #4]
 8016f9c:	4798      	blx	r3
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8016fa4:	6a1b      	ldr	r3, [r3, #32]
 8016fa6:	9a01      	ldr	r2, [sp, #4]
 8016fa8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8016fac:	2800      	cmp	r0, #0
 8016fae:	d1de      	bne.n	8016f6e <rcl_init+0xfe>
 8016fb0:	240a      	movs	r4, #10
 8016fb2:	4638      	mov	r0, r7
 8016fb4:	f7ff fe4e 	bl	8016c54 <__cleanup_context>
 8016fb8:	4620      	mov	r0, r4
 8016fba:	b01e      	add	sp, #120	; 0x78
 8016fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fc0:	2900      	cmp	r1, #0
 8016fc2:	f43f af6e 	beq.w	8016ea2 <rcl_init+0x32>
 8016fc6:	240b      	movs	r4, #11
 8016fc8:	4620      	mov	r0, r4
 8016fca:	b01e      	add	sp, #120	; 0x78
 8016fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fd0:	2464      	movs	r4, #100	; 0x64
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	b01e      	add	sp, #120	; 0x78
 8016fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016fda:	f8d7 9000 	ldr.w	r9, [r7]
 8016fde:	4926      	ldr	r1, [pc, #152]	; (8017078 <rcl_init+0x208>)
 8016fe0:	680b      	ldr	r3, [r1, #0]
 8016fe2:	3301      	adds	r3, #1
 8016fe4:	d036      	beq.n	8017054 <rcl_init+0x1e4>
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	2400      	movs	r4, #0
 8016fea:	600b      	str	r3, [r1, #0]
 8016fec:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8016ff0:	607b      	str	r3, [r7, #4]
 8016ff2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016ff4:	3301      	adds	r3, #1
 8016ff6:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8016ffa:	d034      	beq.n	8017066 <rcl_init+0x1f6>
 8016ffc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8017000:	b93b      	cbnz	r3, 8017012 <rcl_init+0x1a2>
 8017002:	3030      	adds	r0, #48	; 0x30
 8017004:	f000 f83a 	bl	801707c <rcl_get_localhost_only>
 8017008:	4604      	mov	r4, r0
 801700a:	2800      	cmp	r0, #0
 801700c:	d1d1      	bne.n	8016fb2 <rcl_init+0x142>
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	6958      	ldr	r0, [r3, #20]
 8017012:	aa18      	add	r2, sp, #96	; 0x60
 8017014:	a917      	add	r1, sp, #92	; 0x5c
 8017016:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017018:	f000 fc38 	bl	801788c <rcl_validate_enclave_name>
 801701c:	4604      	mov	r4, r0
 801701e:	2800      	cmp	r0, #0
 8017020:	d1c7      	bne.n	8016fb2 <rcl_init+0x142>
 8017022:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8017024:	b9eb      	cbnz	r3, 8017062 <rcl_init+0x1f2>
 8017026:	6839      	ldr	r1, [r7, #0]
 8017028:	694b      	ldr	r3, [r1, #20]
 801702a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 801702e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8017030:	f000 f9c8 	bl	80173c4 <rcl_get_security_options_from_environment>
 8017034:	4604      	mov	r4, r0
 8017036:	2800      	cmp	r0, #0
 8017038:	d1bb      	bne.n	8016fb2 <rcl_init+0x142>
 801703a:	6839      	ldr	r1, [r7, #0]
 801703c:	6948      	ldr	r0, [r1, #20]
 801703e:	3128      	adds	r1, #40	; 0x28
 8017040:	3018      	adds	r0, #24
 8017042:	f7fa f85f 	bl	8011104 <rmw_init>
 8017046:	4604      	mov	r4, r0
 8017048:	2800      	cmp	r0, #0
 801704a:	d0bd      	beq.n	8016fc8 <rcl_init+0x158>
 801704c:	f7ff fdde 	bl	8016c0c <rcl_convert_rmw_ret_to_rcl_ret>
 8017050:	4604      	mov	r4, r0
 8017052:	e7ae      	b.n	8016fb2 <rcl_init+0x142>
 8017054:	2201      	movs	r2, #1
 8017056:	461c      	mov	r4, r3
 8017058:	600a      	str	r2, [r1, #0]
 801705a:	4613      	mov	r3, r2
 801705c:	e7c6      	b.n	8016fec <rcl_init+0x17c>
 801705e:	240a      	movs	r4, #10
 8017060:	e7b2      	b.n	8016fc8 <rcl_init+0x158>
 8017062:	2401      	movs	r4, #1
 8017064:	e7a5      	b.n	8016fb2 <rcl_init+0x142>
 8017066:	3024      	adds	r0, #36	; 0x24
 8017068:	f003 fbc6 	bl	801a7f8 <rcl_get_default_domain_id>
 801706c:	4604      	mov	r4, r0
 801706e:	2800      	cmp	r0, #0
 8017070:	d19f      	bne.n	8016fb2 <rcl_init+0x142>
 8017072:	683b      	ldr	r3, [r7, #0]
 8017074:	6958      	ldr	r0, [r3, #20]
 8017076:	e7c1      	b.n	8016ffc <rcl_init+0x18c>
 8017078:	2001146c 	.word	0x2001146c

0801707c <rcl_get_localhost_only>:
 801707c:	b510      	push	{r4, lr}
 801707e:	2300      	movs	r3, #0
 8017080:	b082      	sub	sp, #8
 8017082:	9301      	str	r3, [sp, #4]
 8017084:	b1b8      	cbz	r0, 80170b6 <rcl_get_localhost_only+0x3a>
 8017086:	4604      	mov	r4, r0
 8017088:	a901      	add	r1, sp, #4
 801708a:	480c      	ldr	r0, [pc, #48]	; (80170bc <rcl_get_localhost_only+0x40>)
 801708c:	f7f9 fc04 	bl	8010898 <rcutils_get_env>
 8017090:	b110      	cbz	r0, 8017098 <rcl_get_localhost_only+0x1c>
 8017092:	2001      	movs	r0, #1
 8017094:	b002      	add	sp, #8
 8017096:	bd10      	pop	{r4, pc}
 8017098:	9b01      	ldr	r3, [sp, #4]
 801709a:	b113      	cbz	r3, 80170a2 <rcl_get_localhost_only+0x26>
 801709c:	781a      	ldrb	r2, [r3, #0]
 801709e:	2a31      	cmp	r2, #49	; 0x31
 80170a0:	d004      	beq.n	80170ac <rcl_get_localhost_only+0x30>
 80170a2:	2302      	movs	r3, #2
 80170a4:	2000      	movs	r0, #0
 80170a6:	7023      	strb	r3, [r4, #0]
 80170a8:	b002      	add	sp, #8
 80170aa:	bd10      	pop	{r4, pc}
 80170ac:	785b      	ldrb	r3, [r3, #1]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d1f7      	bne.n	80170a2 <rcl_get_localhost_only+0x26>
 80170b2:	2301      	movs	r3, #1
 80170b4:	e7f6      	b.n	80170a4 <rcl_get_localhost_only+0x28>
 80170b6:	200b      	movs	r0, #11
 80170b8:	b002      	add	sp, #8
 80170ba:	bd10      	pop	{r4, pc}
 80170bc:	0801d81c 	.word	0x0801d81c

080170c0 <rcl_node_resolve_name>:
 80170c0:	b082      	sub	sp, #8
 80170c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170c6:	b091      	sub	sp, #68	; 0x44
 80170c8:	ac1a      	add	r4, sp, #104	; 0x68
 80170ca:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 80170ce:	e884 000c 	stmia.w	r4, {r2, r3}
 80170d2:	2800      	cmp	r0, #0
 80170d4:	d03d      	beq.n	8017152 <rcl_node_resolve_name+0x92>
 80170d6:	460c      	mov	r4, r1
 80170d8:	4605      	mov	r5, r0
 80170da:	f7f8 f839 	bl	800f150 <rcl_node_get_options>
 80170de:	2800      	cmp	r0, #0
 80170e0:	d03a      	beq.n	8017158 <rcl_node_resolve_name+0x98>
 80170e2:	4628      	mov	r0, r5
 80170e4:	f7f8 f824 	bl	800f130 <rcl_node_get_name>
 80170e8:	4606      	mov	r6, r0
 80170ea:	4628      	mov	r0, r5
 80170ec:	ad0b      	add	r5, sp, #44	; 0x2c
 80170ee:	f7f8 f827 	bl	800f140 <rcl_node_get_namespace>
 80170f2:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 80170f6:	4607      	mov	r7, r0
 80170f8:	46ac      	mov	ip, r5
 80170fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80170fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017102:	f8de 3000 	ldr.w	r3, [lr]
 8017106:	f8cc 3000 	str.w	r3, [ip]
 801710a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801710c:	b30b      	cbz	r3, 8017152 <rcl_node_resolve_name+0x92>
 801710e:	4689      	mov	r9, r1
 8017110:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8017114:	f002 f80e 	bl	8019134 <rcutils_get_zero_initialized_string_map>
 8017118:	ab10      	add	r3, sp, #64	; 0x40
 801711a:	9008      	str	r0, [sp, #32]
 801711c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8017120:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017124:	2100      	movs	r1, #0
 8017126:	a808      	add	r0, sp, #32
 8017128:	e895 000c 	ldmia.w	r5, {r2, r3}
 801712c:	f002 f878 	bl	8019220 <rcutils_string_map_init>
 8017130:	4683      	mov	fp, r0
 8017132:	b1a0      	cbz	r0, 801715e <rcl_node_resolve_name+0x9e>
 8017134:	f7f9 fbc8 	bl	80108c8 <rcutils_get_error_string>
 8017138:	f7f9 fbde 	bl	80108f8 <rcutils_reset_error>
 801713c:	f1bb 0f0a 	cmp.w	fp, #10
 8017140:	bf18      	it	ne
 8017142:	f04f 0b01 	movne.w	fp, #1
 8017146:	4658      	mov	r0, fp
 8017148:	b011      	add	sp, #68	; 0x44
 801714a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801714e:	b002      	add	sp, #8
 8017150:	4770      	bx	lr
 8017152:	f04f 0b0b 	mov.w	fp, #11
 8017156:	e7f6      	b.n	8017146 <rcl_node_resolve_name+0x86>
 8017158:	f04f 0b01 	mov.w	fp, #1
 801715c:	e7f3      	b.n	8017146 <rcl_node_resolve_name+0x86>
 801715e:	9009      	str	r0, [sp, #36]	; 0x24
 8017160:	9007      	str	r0, [sp, #28]
 8017162:	a808      	add	r0, sp, #32
 8017164:	f003 fcdc 	bl	801ab20 <rcl_get_default_topic_name_substitutions>
 8017168:	4683      	mov	fp, r0
 801716a:	b180      	cbz	r0, 801718e <rcl_node_resolve_name+0xce>
 801716c:	280a      	cmp	r0, #10
 801716e:	a808      	add	r0, sp, #32
 8017170:	bf18      	it	ne
 8017172:	f04f 0b01 	movne.w	fp, #1
 8017176:	f002 f893 	bl	80192a0 <rcutils_string_map_fini>
 801717a:	4604      	mov	r4, r0
 801717c:	2800      	cmp	r0, #0
 801717e:	d15b      	bne.n	8017238 <rcl_node_resolve_name+0x178>
 8017180:	4651      	mov	r1, sl
 8017182:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017184:	47c8      	blx	r9
 8017186:	4651      	mov	r1, sl
 8017188:	4620      	mov	r0, r4
 801718a:	47c8      	blx	r9
 801718c:	e7db      	b.n	8017146 <rcl_node_resolve_name+0x86>
 801718e:	ab09      	add	r3, sp, #36	; 0x24
 8017190:	46ec      	mov	ip, sp
 8017192:	9305      	str	r3, [sp, #20]
 8017194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017196:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801719a:	682b      	ldr	r3, [r5, #0]
 801719c:	463a      	mov	r2, r7
 801719e:	4631      	mov	r1, r6
 80171a0:	4620      	mov	r0, r4
 80171a2:	f8cc 3000 	str.w	r3, [ip]
 80171a6:	ab08      	add	r3, sp, #32
 80171a8:	f003 fb5a 	bl	801a860 <rcl_expand_topic_name>
 80171ac:	4683      	mov	fp, r0
 80171ae:	b9d8      	cbnz	r0, 80171e8 <rcl_node_resolve_name+0x128>
 80171b0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80171b2:	4602      	mov	r2, r0
 80171b4:	9009      	str	r0, [sp, #36]	; 0x24
 80171b6:	a90a      	add	r1, sp, #40	; 0x28
 80171b8:	4620      	mov	r0, r4
 80171ba:	f002 f985 	bl	80194c8 <rmw_validate_full_topic_name>
 80171be:	bb50      	cbnz	r0, 8017216 <rcl_node_resolve_name+0x156>
 80171c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80171c2:	2d00      	cmp	r5, #0
 80171c4:	d140      	bne.n	8017248 <rcl_node_resolve_name+0x188>
 80171c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80171c8:	a808      	add	r0, sp, #32
 80171ca:	601c      	str	r4, [r3, #0]
 80171cc:	f002 f868 	bl	80192a0 <rcutils_string_map_fini>
 80171d0:	4683      	mov	fp, r0
 80171d2:	2800      	cmp	r0, #0
 80171d4:	d043      	beq.n	801725e <rcl_node_resolve_name+0x19e>
 80171d6:	f7f9 fb77 	bl	80108c8 <rcutils_get_error_string>
 80171da:	46a8      	mov	r8, r5
 80171dc:	f04f 0b01 	mov.w	fp, #1
 80171e0:	462c      	mov	r4, r5
 80171e2:	f7f9 fb89 	bl	80108f8 <rcutils_reset_error>
 80171e6:	e00a      	b.n	80171fe <rcl_node_resolve_name+0x13e>
 80171e8:	2867      	cmp	r0, #103	; 0x67
 80171ea:	bf14      	ite	ne
 80171ec:	f04f 0800 	movne.w	r8, #0
 80171f0:	f008 0801 	andeq.w	r8, r8, #1
 80171f4:	9c07      	ldr	r4, [sp, #28]
 80171f6:	a808      	add	r0, sp, #32
 80171f8:	f002 f852 	bl	80192a0 <rcutils_string_map_fini>
 80171fc:	bb50      	cbnz	r0, 8017254 <rcl_node_resolve_name+0x194>
 80171fe:	4651      	mov	r1, sl
 8017200:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017202:	47c8      	blx	r9
 8017204:	4651      	mov	r1, sl
 8017206:	4620      	mov	r0, r4
 8017208:	47c8      	blx	r9
 801720a:	f1b8 0f00 	cmp.w	r8, #0
 801720e:	bf18      	it	ne
 8017210:	f04f 0b68 	movne.w	fp, #104	; 0x68
 8017214:	e797      	b.n	8017146 <rcl_node_resolve_name+0x86>
 8017216:	f7f9 fb57 	bl	80108c8 <rcutils_get_error_string>
 801721a:	f7f9 fb6d 	bl	80108f8 <rcutils_reset_error>
 801721e:	a808      	add	r0, sp, #32
 8017220:	f002 f83e 	bl	80192a0 <rcutils_string_map_fini>
 8017224:	b998      	cbnz	r0, 801724e <rcl_node_resolve_name+0x18e>
 8017226:	4651      	mov	r1, sl
 8017228:	9809      	ldr	r0, [sp, #36]	; 0x24
 801722a:	47c8      	blx	r9
 801722c:	4651      	mov	r1, sl
 801722e:	4620      	mov	r0, r4
 8017230:	f04f 0b01 	mov.w	fp, #1
 8017234:	47c8      	blx	r9
 8017236:	e786      	b.n	8017146 <rcl_node_resolve_name+0x86>
 8017238:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801723c:	f7f9 fb44 	bl	80108c8 <rcutils_get_error_string>
 8017240:	f7f9 fb5a 	bl	80108f8 <rcutils_reset_error>
 8017244:	4644      	mov	r4, r8
 8017246:	e7da      	b.n	80171fe <rcl_node_resolve_name+0x13e>
 8017248:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801724c:	e7d3      	b.n	80171f6 <rcl_node_resolve_name+0x136>
 801724e:	46d8      	mov	r8, fp
 8017250:	f04f 0b01 	mov.w	fp, #1
 8017254:	f7f9 fb38 	bl	80108c8 <rcutils_get_error_string>
 8017258:	f7f9 fb4e 	bl	80108f8 <rcutils_reset_error>
 801725c:	e7cf      	b.n	80171fe <rcl_node_resolve_name+0x13e>
 801725e:	4651      	mov	r1, sl
 8017260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017262:	47c8      	blx	r9
 8017264:	4651      	mov	r1, sl
 8017266:	4658      	mov	r0, fp
 8017268:	47c8      	blx	r9
 801726a:	e76c      	b.n	8017146 <rcl_node_resolve_name+0x86>

0801726c <exact_match_lookup>:
 801726c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801726e:	f102 0708 	add.w	r7, r2, #8
 8017272:	460b      	mov	r3, r1
 8017274:	b085      	sub	sp, #20
 8017276:	4614      	mov	r4, r2
 8017278:	4606      	mov	r6, r0
 801727a:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 801727e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8017282:	4618      	mov	r0, r3
 8017284:	4919      	ldr	r1, [pc, #100]	; (80172ec <exact_match_lookup+0x80>)
 8017286:	e894 000c 	ldmia.w	r4, {r2, r3}
 801728a:	f001 ff1b 	bl	80190c4 <rcutils_join_path>
 801728e:	7833      	ldrb	r3, [r6, #0]
 8017290:	4605      	mov	r5, r0
 8017292:	2b2f      	cmp	r3, #47	; 0x2f
 8017294:	d023      	beq.n	80172de <exact_match_lookup+0x72>
 8017296:	f104 030c 	add.w	r3, r4, #12
 801729a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801729e:	e88d 0003 	stmia.w	sp, {r0, r1}
 80172a2:	1c70      	adds	r0, r6, #1
 80172a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80172a8:	f001 ff12 	bl	80190d0 <rcutils_to_native_path>
 80172ac:	4606      	mov	r6, r0
 80172ae:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80172b2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80172b6:	4631      	mov	r1, r6
 80172b8:	4628      	mov	r0, r5
 80172ba:	e894 000c 	ldmia.w	r4, {r2, r3}
 80172be:	f001 ff01 	bl	80190c4 <rcutils_join_path>
 80172c2:	4603      	mov	r3, r0
 80172c4:	4630      	mov	r0, r6
 80172c6:	6862      	ldr	r2, [r4, #4]
 80172c8:	461e      	mov	r6, r3
 80172ca:	6921      	ldr	r1, [r4, #16]
 80172cc:	4790      	blx	r2
 80172ce:	4628      	mov	r0, r5
 80172d0:	4635      	mov	r5, r6
 80172d2:	6863      	ldr	r3, [r4, #4]
 80172d4:	6921      	ldr	r1, [r4, #16]
 80172d6:	4798      	blx	r3
 80172d8:	4628      	mov	r0, r5
 80172da:	b005      	add	sp, #20
 80172dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172de:	7873      	ldrb	r3, [r6, #1]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d1d8      	bne.n	8017296 <exact_match_lookup+0x2a>
 80172e4:	4628      	mov	r0, r5
 80172e6:	b005      	add	sp, #20
 80172e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172ea:	bf00      	nop
 80172ec:	0801d86c 	.word	0x0801d86c

080172f0 <rcl_get_secure_root>:
 80172f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80172f4:	b085      	sub	sp, #20
 80172f6:	b168      	cbz	r0, 8017314 <rcl_get_secure_root+0x24>
 80172f8:	4607      	mov	r7, r0
 80172fa:	4608      	mov	r0, r1
 80172fc:	460c      	mov	r4, r1
 80172fe:	f7f9 fabd 	bl	801087c <rcutils_allocator_is_valid>
 8017302:	b138      	cbz	r0, 8017314 <rcl_get_secure_root+0x24>
 8017304:	2300      	movs	r3, #0
 8017306:	482d      	ldr	r0, [pc, #180]	; (80173bc <rcl_get_secure_root+0xcc>)
 8017308:	a903      	add	r1, sp, #12
 801730a:	9303      	str	r3, [sp, #12]
 801730c:	f7f9 fac4 	bl	8010898 <rcutils_get_env>
 8017310:	4605      	mov	r5, r0
 8017312:	b120      	cbz	r0, 801731e <rcl_get_secure_root+0x2e>
 8017314:	2500      	movs	r5, #0
 8017316:	4628      	mov	r0, r5
 8017318:	b005      	add	sp, #20
 801731a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801731e:	9b03      	ldr	r3, [sp, #12]
 8017320:	781a      	ldrb	r2, [r3, #0]
 8017322:	2a00      	cmp	r2, #0
 8017324:	d0f6      	beq.n	8017314 <rcl_get_secure_root+0x24>
 8017326:	f104 090c 	add.w	r9, r4, #12
 801732a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801732e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017332:	4618      	mov	r0, r3
 8017334:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8017338:	f7f9 fc34 	bl	8010ba4 <rcutils_strdup>
 801733c:	4680      	mov	r8, r0
 801733e:	2800      	cmp	r0, #0
 8017340:	d0e8      	beq.n	8017314 <rcl_get_secure_root+0x24>
 8017342:	a903      	add	r1, sp, #12
 8017344:	481e      	ldr	r0, [pc, #120]	; (80173c0 <rcl_get_secure_root+0xd0>)
 8017346:	9503      	str	r5, [sp, #12]
 8017348:	f7f9 faa6 	bl	8010898 <rcutils_get_env>
 801734c:	b160      	cbz	r0, 8017368 <rcl_get_secure_root+0x78>
 801734e:	2600      	movs	r6, #0
 8017350:	4630      	mov	r0, r6
 8017352:	6863      	ldr	r3, [r4, #4]
 8017354:	6921      	ldr	r1, [r4, #16]
 8017356:	4798      	blx	r3
 8017358:	4640      	mov	r0, r8
 801735a:	6863      	ldr	r3, [r4, #4]
 801735c:	6921      	ldr	r1, [r4, #16]
 801735e:	4798      	blx	r3
 8017360:	4628      	mov	r0, r5
 8017362:	b005      	add	sp, #20
 8017364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017368:	9b03      	ldr	r3, [sp, #12]
 801736a:	781e      	ldrb	r6, [r3, #0]
 801736c:	b1f6      	cbz	r6, 80173ac <rcl_get_secure_root+0xbc>
 801736e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8017372:	e88d 0003 	stmia.w	sp, {r0, r1}
 8017376:	4618      	mov	r0, r3
 8017378:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801737c:	f7f9 fc12 	bl	8010ba4 <rcutils_strdup>
 8017380:	4606      	mov	r6, r0
 8017382:	2800      	cmp	r0, #0
 8017384:	d0e3      	beq.n	801734e <rcl_get_secure_root+0x5e>
 8017386:	4622      	mov	r2, r4
 8017388:	4641      	mov	r1, r8
 801738a:	f7ff ff6f 	bl	801726c <exact_match_lookup>
 801738e:	4605      	mov	r5, r0
 8017390:	2d00      	cmp	r5, #0
 8017392:	d0dd      	beq.n	8017350 <rcl_get_secure_root+0x60>
 8017394:	4628      	mov	r0, r5
 8017396:	f001 fe93 	bl	80190c0 <rcutils_is_directory>
 801739a:	4603      	mov	r3, r0
 801739c:	2800      	cmp	r0, #0
 801739e:	d1d7      	bne.n	8017350 <rcl_get_secure_root+0x60>
 80173a0:	4628      	mov	r0, r5
 80173a2:	6921      	ldr	r1, [r4, #16]
 80173a4:	461d      	mov	r5, r3
 80173a6:	6863      	ldr	r3, [r4, #4]
 80173a8:	4798      	blx	r3
 80173aa:	e7d1      	b.n	8017350 <rcl_get_secure_root+0x60>
 80173ac:	4622      	mov	r2, r4
 80173ae:	4638      	mov	r0, r7
 80173b0:	4641      	mov	r1, r8
 80173b2:	f7ff ff5b 	bl	801726c <exact_match_lookup>
 80173b6:	4605      	mov	r5, r0
 80173b8:	e7ea      	b.n	8017390 <rcl_get_secure_root+0xa0>
 80173ba:	bf00      	nop
 80173bc:	0801d878 	.word	0x0801d878
 80173c0:	0801d890 	.word	0x0801d890

080173c4 <rcl_get_security_options_from_environment>:
 80173c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80173c8:	b082      	sub	sp, #8
 80173ca:	2300      	movs	r3, #0
 80173cc:	4606      	mov	r6, r0
 80173ce:	460f      	mov	r7, r1
 80173d0:	4821      	ldr	r0, [pc, #132]	; (8017458 <rcl_get_security_options_from_environment+0x94>)
 80173d2:	a901      	add	r1, sp, #4
 80173d4:	4690      	mov	r8, r2
 80173d6:	9301      	str	r3, [sp, #4]
 80173d8:	f7f9 fa5e 	bl	8010898 <rcutils_get_env>
 80173dc:	b120      	cbz	r0, 80173e8 <rcl_get_security_options_from_environment+0x24>
 80173de:	2501      	movs	r5, #1
 80173e0:	4628      	mov	r0, r5
 80173e2:	b002      	add	sp, #8
 80173e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173e8:	4604      	mov	r4, r0
 80173ea:	491c      	ldr	r1, [pc, #112]	; (801745c <rcl_get_security_options_from_environment+0x98>)
 80173ec:	9801      	ldr	r0, [sp, #4]
 80173ee:	f7e8 ff27 	bl	8000240 <strcmp>
 80173f2:	4605      	mov	r5, r0
 80173f4:	b9f0      	cbnz	r0, 8017434 <rcl_get_security_options_from_environment+0x70>
 80173f6:	9001      	str	r0, [sp, #4]
 80173f8:	f1b8 0f00 	cmp.w	r8, #0
 80173fc:	d021      	beq.n	8017442 <rcl_get_security_options_from_environment+0x7e>
 80173fe:	a901      	add	r1, sp, #4
 8017400:	4817      	ldr	r0, [pc, #92]	; (8017460 <rcl_get_security_options_from_environment+0x9c>)
 8017402:	f7f9 fa49 	bl	8010898 <rcutils_get_env>
 8017406:	2800      	cmp	r0, #0
 8017408:	d1e9      	bne.n	80173de <rcl_get_security_options_from_environment+0x1a>
 801740a:	4916      	ldr	r1, [pc, #88]	; (8017464 <rcl_get_security_options_from_environment+0xa0>)
 801740c:	9801      	ldr	r0, [sp, #4]
 801740e:	f7e8 ff17 	bl	8000240 <strcmp>
 8017412:	4603      	mov	r3, r0
 8017414:	4639      	mov	r1, r7
 8017416:	4630      	mov	r0, r6
 8017418:	fab3 f383 	clz	r3, r3
 801741c:	095b      	lsrs	r3, r3, #5
 801741e:	f888 3000 	strb.w	r3, [r8]
 8017422:	f7ff ff65 	bl	80172f0 <rcl_get_secure_root>
 8017426:	b170      	cbz	r0, 8017446 <rcl_get_security_options_from_environment+0x82>
 8017428:	f8c8 0004 	str.w	r0, [r8, #4]
 801742c:	4628      	mov	r0, r5
 801742e:	b002      	add	sp, #8
 8017430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017434:	4625      	mov	r5, r4
 8017436:	f888 4000 	strb.w	r4, [r8]
 801743a:	4628      	mov	r0, r5
 801743c:	b002      	add	sp, #8
 801743e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017442:	250b      	movs	r5, #11
 8017444:	e7cc      	b.n	80173e0 <rcl_get_security_options_from_environment+0x1c>
 8017446:	f898 5000 	ldrb.w	r5, [r8]
 801744a:	f1a5 0501 	sub.w	r5, r5, #1
 801744e:	fab5 f585 	clz	r5, r5
 8017452:	096d      	lsrs	r5, r5, #5
 8017454:	e7c4      	b.n	80173e0 <rcl_get_security_options_from_environment+0x1c>
 8017456:	bf00      	nop
 8017458:	0801d830 	.word	0x0801d830
 801745c:	0801d844 	.word	0x0801d844
 8017460:	0801d84c 	.word	0x0801d84c
 8017464:	0801d864 	.word	0x0801d864

08017468 <rcl_get_system_time>:
 8017468:	4608      	mov	r0, r1
 801746a:	f7f9 bbd9 	b.w	8010c20 <rcutils_system_time_now>
 801746e:	bf00      	nop

08017470 <rcl_get_steady_time>:
 8017470:	4608      	mov	r0, r1
 8017472:	f7f9 bbfb 	b.w	8010c6c <rcutils_steady_time_now>
 8017476:	bf00      	nop

08017478 <rcl_get_ros_time>:
 8017478:	7a03      	ldrb	r3, [r0, #8]
 801747a:	b510      	push	{r4, lr}
 801747c:	460c      	mov	r4, r1
 801747e:	b143      	cbz	r3, 8017492 <rcl_get_ros_time+0x1a>
 8017480:	2105      	movs	r1, #5
 8017482:	f001 fd79 	bl	8018f78 <__atomic_load_8>
 8017486:	4602      	mov	r2, r0
 8017488:	460b      	mov	r3, r1
 801748a:	2000      	movs	r0, #0
 801748c:	e9c4 2300 	strd	r2, r3, [r4]
 8017490:	bd10      	pop	{r4, pc}
 8017492:	4608      	mov	r0, r1
 8017494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017498:	f7f9 bbc2 	b.w	8010c20 <rcutils_system_time_now>

0801749c <rcl_clock_init>:
 801749c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801749e:	4605      	mov	r5, r0
 80174a0:	4610      	mov	r0, r2
 80174a2:	4614      	mov	r4, r2
 80174a4:	460e      	mov	r6, r1
 80174a6:	f7f9 f9e9 	bl	801087c <rcutils_allocator_is_valid>
 80174aa:	b128      	cbz	r0, 80174b8 <rcl_clock_init+0x1c>
 80174ac:	2d03      	cmp	r5, #3
 80174ae:	d803      	bhi.n	80174b8 <rcl_clock_init+0x1c>
 80174b0:	e8df f005 	tbb	[pc, r5]
 80174b4:	0659301f 	.word	0x0659301f
 80174b8:	f04f 0c0b 	mov.w	ip, #11
 80174bc:	4660      	mov	r0, ip
 80174be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174c0:	2c00      	cmp	r4, #0
 80174c2:	d0f9      	beq.n	80174b8 <rcl_clock_init+0x1c>
 80174c4:	fab6 f386 	clz	r3, r6
 80174c8:	095b      	lsrs	r3, r3, #5
 80174ca:	2e00      	cmp	r6, #0
 80174cc:	d0f4      	beq.n	80174b8 <rcl_clock_init+0x1c>
 80174ce:	6133      	str	r3, [r6, #16]
 80174d0:	469c      	mov	ip, r3
 80174d2:	f106 0514 	add.w	r5, r6, #20
 80174d6:	4f32      	ldr	r7, [pc, #200]	; (80175a0 <rcl_clock_init+0x104>)
 80174d8:	f04f 0e03 	mov.w	lr, #3
 80174dc:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80174e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80174e4:	6823      	ldr	r3, [r4, #0]
 80174e6:	4660      	mov	r0, ip
 80174e8:	602b      	str	r3, [r5, #0]
 80174ea:	60f7      	str	r7, [r6, #12]
 80174ec:	f886 e000 	strb.w	lr, [r6]
 80174f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80174f2:	2e00      	cmp	r6, #0
 80174f4:	d0e0      	beq.n	80174b8 <rcl_clock_init+0x1c>
 80174f6:	2300      	movs	r3, #0
 80174f8:	f106 0514 	add.w	r5, r6, #20
 80174fc:	7033      	strb	r3, [r6, #0]
 80174fe:	469c      	mov	ip, r3
 8017500:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017504:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8017508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801750a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801750c:	6823      	ldr	r3, [r4, #0]
 801750e:	4660      	mov	r0, ip
 8017510:	602b      	str	r3, [r5, #0]
 8017512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017514:	2c00      	cmp	r4, #0
 8017516:	d0cf      	beq.n	80174b8 <rcl_clock_init+0x1c>
 8017518:	fab6 f586 	clz	r5, r6
 801751c:	096d      	lsrs	r5, r5, #5
 801751e:	2e00      	cmp	r6, #0
 8017520:	d0ca      	beq.n	80174b8 <rcl_clock_init+0x1c>
 8017522:	46a6      	mov	lr, r4
 8017524:	7035      	strb	r5, [r6, #0]
 8017526:	f106 0c14 	add.w	ip, r6, #20
 801752a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801752e:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8017532:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8017536:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801753a:	f8de 3000 	ldr.w	r3, [lr]
 801753e:	2010      	movs	r0, #16
 8017540:	f8cc 3000 	str.w	r3, [ip]
 8017544:	6823      	ldr	r3, [r4, #0]
 8017546:	6921      	ldr	r1, [r4, #16]
 8017548:	4798      	blx	r3
 801754a:	6130      	str	r0, [r6, #16]
 801754c:	b320      	cbz	r0, 8017598 <rcl_clock_init+0xfc>
 801754e:	2200      	movs	r2, #0
 8017550:	2300      	movs	r3, #0
 8017552:	46ac      	mov	ip, r5
 8017554:	7205      	strb	r5, [r0, #8]
 8017556:	e9c0 2300 	strd	r2, r3, [r0]
 801755a:	4a12      	ldr	r2, [pc, #72]	; (80175a4 <rcl_clock_init+0x108>)
 801755c:	2301      	movs	r3, #1
 801755e:	4660      	mov	r0, ip
 8017560:	60f2      	str	r2, [r6, #12]
 8017562:	7033      	strb	r3, [r6, #0]
 8017564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017566:	2c00      	cmp	r4, #0
 8017568:	d0a6      	beq.n	80174b8 <rcl_clock_init+0x1c>
 801756a:	fab6 f386 	clz	r3, r6
 801756e:	095b      	lsrs	r3, r3, #5
 8017570:	2e00      	cmp	r6, #0
 8017572:	d0a1      	beq.n	80174b8 <rcl_clock_init+0x1c>
 8017574:	6133      	str	r3, [r6, #16]
 8017576:	469c      	mov	ip, r3
 8017578:	f106 0514 	add.w	r5, r6, #20
 801757c:	f8df e028 	ldr.w	lr, [pc, #40]	; 80175a8 <rcl_clock_init+0x10c>
 8017580:	2702      	movs	r7, #2
 8017582:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8017586:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017588:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801758a:	6823      	ldr	r3, [r4, #0]
 801758c:	4660      	mov	r0, ip
 801758e:	602b      	str	r3, [r5, #0]
 8017590:	f8c6 e00c 	str.w	lr, [r6, #12]
 8017594:	7037      	strb	r7, [r6, #0]
 8017596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017598:	f04f 0c0a 	mov.w	ip, #10
 801759c:	e78e      	b.n	80174bc <rcl_clock_init+0x20>
 801759e:	bf00      	nop
 80175a0:	08017471 	.word	0x08017471
 80175a4:	08017479 	.word	0x08017479
 80175a8:	08017469 	.word	0x08017469

080175ac <rcl_clock_get_now>:
 80175ac:	b140      	cbz	r0, 80175c0 <rcl_clock_get_now+0x14>
 80175ae:	b139      	cbz	r1, 80175c0 <rcl_clock_get_now+0x14>
 80175b0:	7803      	ldrb	r3, [r0, #0]
 80175b2:	b11b      	cbz	r3, 80175bc <rcl_clock_get_now+0x10>
 80175b4:	68c3      	ldr	r3, [r0, #12]
 80175b6:	b10b      	cbz	r3, 80175bc <rcl_clock_get_now+0x10>
 80175b8:	6900      	ldr	r0, [r0, #16]
 80175ba:	4718      	bx	r3
 80175bc:	2001      	movs	r0, #1
 80175be:	4770      	bx	lr
 80175c0:	200b      	movs	r0, #11
 80175c2:	4770      	bx	lr

080175c4 <rcl_timer_call>:
 80175c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175c8:	b087      	sub	sp, #28
 80175ca:	2800      	cmp	r0, #0
 80175cc:	d06c      	beq.n	80176a8 <rcl_timer_call+0xe4>
 80175ce:	6803      	ldr	r3, [r0, #0]
 80175d0:	4604      	mov	r4, r0
 80175d2:	2b00      	cmp	r3, #0
 80175d4:	d062      	beq.n	801769c <rcl_timer_call+0xd8>
 80175d6:	f3bf 8f5b 	dmb	ish
 80175da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80175de:	f3bf 8f5b 	dmb	ish
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d14f      	bne.n	8017686 <rcl_timer_call+0xc2>
 80175e6:	6803      	ldr	r3, [r0, #0]
 80175e8:	a904      	add	r1, sp, #16
 80175ea:	6818      	ldr	r0, [r3, #0]
 80175ec:	f7ff ffde 	bl	80175ac <rcl_clock_get_now>
 80175f0:	4605      	mov	r5, r0
 80175f2:	2800      	cmp	r0, #0
 80175f4:	d149      	bne.n	801768a <rcl_timer_call+0xc6>
 80175f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	db49      	blt.n	8017692 <rcl_timer_call+0xce>
 80175fe:	2605      	movs	r6, #5
 8017600:	6820      	ldr	r0, [r4, #0]
 8017602:	9600      	str	r6, [sp, #0]
 8017604:	3020      	adds	r0, #32
 8017606:	f001 fd23 	bl	8019050 <__atomic_exchange_8>
 801760a:	6823      	ldr	r3, [r4, #0]
 801760c:	4680      	mov	r8, r0
 801760e:	f3bf 8f5b 	dmb	ish
 8017612:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8017616:	f3bf 8f5b 	dmb	ish
 801761a:	6820      	ldr	r0, [r4, #0]
 801761c:	4689      	mov	r9, r1
 801761e:	4631      	mov	r1, r6
 8017620:	3028      	adds	r0, #40	; 0x28
 8017622:	f001 fca9 	bl	8018f78 <__atomic_load_8>
 8017626:	460f      	mov	r7, r1
 8017628:	4631      	mov	r1, r6
 801762a:	4606      	mov	r6, r0
 801762c:	6820      	ldr	r0, [r4, #0]
 801762e:	3018      	adds	r0, #24
 8017630:	f001 fca2 	bl	8018f78 <__atomic_load_8>
 8017634:	4602      	mov	r2, r0
 8017636:	9804      	ldr	r0, [sp, #16]
 8017638:	460b      	mov	r3, r1
 801763a:	18b6      	adds	r6, r6, r2
 801763c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8017640:	4692      	mov	sl, r2
 8017642:	eb47 0701 	adc.w	r7, r7, r1
 8017646:	4286      	cmp	r6, r0
 8017648:	eb77 010c 	sbcs.w	r1, r7, ip
 801764c:	da04      	bge.n	8017658 <rcl_timer_call+0x94>
 801764e:	ea53 0102 	orrs.w	r1, r3, r2
 8017652:	d12e      	bne.n	80176b2 <rcl_timer_call+0xee>
 8017654:	4606      	mov	r6, r0
 8017656:	4667      	mov	r7, ip
 8017658:	6820      	ldr	r0, [r4, #0]
 801765a:	2105      	movs	r1, #5
 801765c:	4632      	mov	r2, r6
 801765e:	463b      	mov	r3, r7
 8017660:	3028      	adds	r0, #40	; 0x28
 8017662:	9100      	str	r1, [sp, #0]
 8017664:	f001 fcbe 	bl	8018fe4 <__atomic_store_8>
 8017668:	f1bb 0f00 	cmp.w	fp, #0
 801766c:	d00d      	beq.n	801768a <rcl_timer_call+0xc6>
 801766e:	9a04      	ldr	r2, [sp, #16]
 8017670:	4620      	mov	r0, r4
 8017672:	9b05      	ldr	r3, [sp, #20]
 8017674:	ebb2 0208 	subs.w	r2, r2, r8
 8017678:	eb63 0309 	sbc.w	r3, r3, r9
 801767c:	47d8      	blx	fp
 801767e:	4628      	mov	r0, r5
 8017680:	b007      	add	sp, #28
 8017682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017686:	f240 3521 	movw	r5, #801	; 0x321
 801768a:	4628      	mov	r0, r5
 801768c:	b007      	add	sp, #28
 801768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017692:	2501      	movs	r5, #1
 8017694:	4628      	mov	r0, r5
 8017696:	b007      	add	sp, #28
 8017698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801769c:	f44f 7548 	mov.w	r5, #800	; 0x320
 80176a0:	4628      	mov	r0, r5
 80176a2:	b007      	add	sp, #28
 80176a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176a8:	250b      	movs	r5, #11
 80176aa:	4628      	mov	r0, r5
 80176ac:	b007      	add	sp, #28
 80176ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176b2:	1b80      	subs	r0, r0, r6
 80176b4:	eb6c 0107 	sbc.w	r1, ip, r7
 80176b8:	3801      	subs	r0, #1
 80176ba:	f161 0100 	sbc.w	r1, r1, #0
 80176be:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80176c2:	f7e8 fe25 	bl	8000310 <__aeabi_ldivmod>
 80176c6:	9b02      	ldr	r3, [sp, #8]
 80176c8:	3001      	adds	r0, #1
 80176ca:	f141 0100 	adc.w	r1, r1, #0
 80176ce:	fb00 f303 	mul.w	r3, r0, r3
 80176d2:	fb01 330a 	mla	r3, r1, sl, r3
 80176d6:	fba0 0a0a 	umull	r0, sl, r0, sl
 80176da:	1986      	adds	r6, r0, r6
 80176dc:	4453      	add	r3, sl
 80176de:	eb43 0707 	adc.w	r7, r3, r7
 80176e2:	e7b9      	b.n	8017658 <rcl_timer_call+0x94>

080176e4 <rcl_timer_is_ready>:
 80176e4:	b570      	push	{r4, r5, r6, lr}
 80176e6:	b082      	sub	sp, #8
 80176e8:	b380      	cbz	r0, 801774c <rcl_timer_is_ready+0x68>
 80176ea:	6803      	ldr	r3, [r0, #0]
 80176ec:	4604      	mov	r4, r0
 80176ee:	b38b      	cbz	r3, 8017754 <rcl_timer_is_ready+0x70>
 80176f0:	460d      	mov	r5, r1
 80176f2:	b359      	cbz	r1, 801774c <rcl_timer_is_ready+0x68>
 80176f4:	f3bf 8f5b 	dmb	ish
 80176f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80176fc:	f3bf 8f5b 	dmb	ish
 8017700:	b953      	cbnz	r3, 8017718 <rcl_timer_is_ready+0x34>
 8017702:	6803      	ldr	r3, [r0, #0]
 8017704:	4669      	mov	r1, sp
 8017706:	6818      	ldr	r0, [r3, #0]
 8017708:	f7ff ff50 	bl	80175ac <rcl_clock_get_now>
 801770c:	4606      	mov	r6, r0
 801770e:	b148      	cbz	r0, 8017724 <rcl_timer_is_ready+0x40>
 8017710:	f240 3321 	movw	r3, #801	; 0x321
 8017714:	4298      	cmp	r0, r3
 8017716:	d102      	bne.n	801771e <rcl_timer_is_ready+0x3a>
 8017718:	2300      	movs	r3, #0
 801771a:	461e      	mov	r6, r3
 801771c:	702b      	strb	r3, [r5, #0]
 801771e:	4630      	mov	r0, r6
 8017720:	b002      	add	sp, #8
 8017722:	bd70      	pop	{r4, r5, r6, pc}
 8017724:	6820      	ldr	r0, [r4, #0]
 8017726:	2105      	movs	r1, #5
 8017728:	3028      	adds	r0, #40	; 0x28
 801772a:	f001 fc25 	bl	8018f78 <__atomic_load_8>
 801772e:	9b00      	ldr	r3, [sp, #0]
 8017730:	1ac0      	subs	r0, r0, r3
 8017732:	9b01      	ldr	r3, [sp, #4]
 8017734:	eb61 0103 	sbc.w	r1, r1, r3
 8017738:	2801      	cmp	r0, #1
 801773a:	4630      	mov	r0, r6
 801773c:	f171 0300 	sbcs.w	r3, r1, #0
 8017740:	bfb4      	ite	lt
 8017742:	2301      	movlt	r3, #1
 8017744:	2300      	movge	r3, #0
 8017746:	702b      	strb	r3, [r5, #0]
 8017748:	b002      	add	sp, #8
 801774a:	bd70      	pop	{r4, r5, r6, pc}
 801774c:	260b      	movs	r6, #11
 801774e:	4630      	mov	r0, r6
 8017750:	b002      	add	sp, #8
 8017752:	bd70      	pop	{r4, r5, r6, pc}
 8017754:	f44f 7648 	mov.w	r6, #800	; 0x320
 8017758:	e7e1      	b.n	801771e <rcl_timer_is_ready+0x3a>
 801775a:	bf00      	nop

0801775c <rcl_timer_get_time_until_next_call>:
 801775c:	b570      	push	{r4, r5, r6, lr}
 801775e:	b082      	sub	sp, #8
 8017760:	b330      	cbz	r0, 80177b0 <rcl_timer_get_time_until_next_call+0x54>
 8017762:	6803      	ldr	r3, [r0, #0]
 8017764:	4604      	mov	r4, r0
 8017766:	b33b      	cbz	r3, 80177b8 <rcl_timer_get_time_until_next_call+0x5c>
 8017768:	460d      	mov	r5, r1
 801776a:	b309      	cbz	r1, 80177b0 <rcl_timer_get_time_until_next_call+0x54>
 801776c:	f3bf 8f5b 	dmb	ish
 8017770:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017774:	f3bf 8f5b 	dmb	ish
 8017778:	b9ab      	cbnz	r3, 80177a6 <rcl_timer_get_time_until_next_call+0x4a>
 801777a:	6803      	ldr	r3, [r0, #0]
 801777c:	4669      	mov	r1, sp
 801777e:	6818      	ldr	r0, [r3, #0]
 8017780:	f7ff ff14 	bl	80175ac <rcl_clock_get_now>
 8017784:	4606      	mov	r6, r0
 8017786:	b958      	cbnz	r0, 80177a0 <rcl_timer_get_time_until_next_call+0x44>
 8017788:	6820      	ldr	r0, [r4, #0]
 801778a:	2105      	movs	r1, #5
 801778c:	3028      	adds	r0, #40	; 0x28
 801778e:	f001 fbf3 	bl	8018f78 <__atomic_load_8>
 8017792:	9b00      	ldr	r3, [sp, #0]
 8017794:	1ac0      	subs	r0, r0, r3
 8017796:	9b01      	ldr	r3, [sp, #4]
 8017798:	eb61 0103 	sbc.w	r1, r1, r3
 801779c:	6028      	str	r0, [r5, #0]
 801779e:	6069      	str	r1, [r5, #4]
 80177a0:	4630      	mov	r0, r6
 80177a2:	b002      	add	sp, #8
 80177a4:	bd70      	pop	{r4, r5, r6, pc}
 80177a6:	f240 3621 	movw	r6, #801	; 0x321
 80177aa:	4630      	mov	r0, r6
 80177ac:	b002      	add	sp, #8
 80177ae:	bd70      	pop	{r4, r5, r6, pc}
 80177b0:	260b      	movs	r6, #11
 80177b2:	4630      	mov	r0, r6
 80177b4:	b002      	add	sp, #8
 80177b6:	bd70      	pop	{r4, r5, r6, pc}
 80177b8:	f44f 7648 	mov.w	r6, #800	; 0x320
 80177bc:	e7f0      	b.n	80177a0 <rcl_timer_get_time_until_next_call+0x44>
 80177be:	bf00      	nop

080177c0 <rcl_timer_get_guard_condition>:
 80177c0:	b130      	cbz	r0, 80177d0 <rcl_timer_get_guard_condition+0x10>
 80177c2:	6800      	ldr	r0, [r0, #0]
 80177c4:	b120      	cbz	r0, 80177d0 <rcl_timer_get_guard_condition+0x10>
 80177c6:	68c3      	ldr	r3, [r0, #12]
 80177c8:	b10b      	cbz	r3, 80177ce <rcl_timer_get_guard_condition+0xe>
 80177ca:	3008      	adds	r0, #8
 80177cc:	4770      	bx	lr
 80177ce:	4618      	mov	r0, r3
 80177d0:	4770      	bx	lr
 80177d2:	bf00      	nop

080177d4 <rcl_validate_enclave_name_with_size>:
 80177d4:	2800      	cmp	r0, #0
 80177d6:	d049      	beq.n	801786c <rcl_validate_enclave_name_with_size+0x98>
 80177d8:	b570      	push	{r4, r5, r6, lr}
 80177da:	4615      	mov	r5, r2
 80177dc:	b0c2      	sub	sp, #264	; 0x108
 80177de:	b19a      	cbz	r2, 8017808 <rcl_validate_enclave_name_with_size+0x34>
 80177e0:	461e      	mov	r6, r3
 80177e2:	466a      	mov	r2, sp
 80177e4:	ab01      	add	r3, sp, #4
 80177e6:	460c      	mov	r4, r1
 80177e8:	f7f9 faa6 	bl	8010d38 <rmw_validate_namespace_with_size>
 80177ec:	4684      	mov	ip, r0
 80177ee:	b9b8      	cbnz	r0, 8017820 <rcl_validate_enclave_name_with_size+0x4c>
 80177f0:	9900      	ldr	r1, [sp, #0]
 80177f2:	b171      	cbz	r1, 8017812 <rcl_validate_enclave_name_with_size+0x3e>
 80177f4:	2907      	cmp	r1, #7
 80177f6:	d019      	beq.n	801782c <rcl_validate_enclave_name_with_size+0x58>
 80177f8:	1e4b      	subs	r3, r1, #1
 80177fa:	2b05      	cmp	r3, #5
 80177fc:	d83a      	bhi.n	8017874 <rcl_validate_enclave_name_with_size+0xa0>
 80177fe:	e8df f003 	tbb	[pc, r3]
 8017802:	2926      	.short	0x2926
 8017804:	1d322f2c 	.word	0x1d322f2c
 8017808:	f04f 0c0b 	mov.w	ip, #11
 801780c:	4660      	mov	r0, ip
 801780e:	b042      	add	sp, #264	; 0x108
 8017810:	bd70      	pop	{r4, r5, r6, pc}
 8017812:	2907      	cmp	r1, #7
 8017814:	d00a      	beq.n	801782c <rcl_validate_enclave_name_with_size+0x58>
 8017816:	2300      	movs	r3, #0
 8017818:	4660      	mov	r0, ip
 801781a:	602b      	str	r3, [r5, #0]
 801781c:	b042      	add	sp, #264	; 0x108
 801781e:	bd70      	pop	{r4, r5, r6, pc}
 8017820:	f7ff f9f4 	bl	8016c0c <rcl_convert_rmw_ret_to_rcl_ret>
 8017824:	4684      	mov	ip, r0
 8017826:	4660      	mov	r0, ip
 8017828:	b042      	add	sp, #264	; 0x108
 801782a:	bd70      	pop	{r4, r5, r6, pc}
 801782c:	2cff      	cmp	r4, #255	; 0xff
 801782e:	d9f2      	bls.n	8017816 <rcl_validate_enclave_name_with_size+0x42>
 8017830:	6029      	str	r1, [r5, #0]
 8017832:	2e00      	cmp	r6, #0
 8017834:	d0ea      	beq.n	801780c <rcl_validate_enclave_name_with_size+0x38>
 8017836:	23fe      	movs	r3, #254	; 0xfe
 8017838:	6033      	str	r3, [r6, #0]
 801783a:	e7e7      	b.n	801780c <rcl_validate_enclave_name_with_size+0x38>
 801783c:	2306      	movs	r3, #6
 801783e:	602b      	str	r3, [r5, #0]
 8017840:	2e00      	cmp	r6, #0
 8017842:	d0e3      	beq.n	801780c <rcl_validate_enclave_name_with_size+0x38>
 8017844:	9b01      	ldr	r3, [sp, #4]
 8017846:	4660      	mov	r0, ip
 8017848:	6033      	str	r3, [r6, #0]
 801784a:	b042      	add	sp, #264	; 0x108
 801784c:	bd70      	pop	{r4, r5, r6, pc}
 801784e:	2301      	movs	r3, #1
 8017850:	602b      	str	r3, [r5, #0]
 8017852:	e7f5      	b.n	8017840 <rcl_validate_enclave_name_with_size+0x6c>
 8017854:	2302      	movs	r3, #2
 8017856:	602b      	str	r3, [r5, #0]
 8017858:	e7f2      	b.n	8017840 <rcl_validate_enclave_name_with_size+0x6c>
 801785a:	2303      	movs	r3, #3
 801785c:	602b      	str	r3, [r5, #0]
 801785e:	e7ef      	b.n	8017840 <rcl_validate_enclave_name_with_size+0x6c>
 8017860:	2304      	movs	r3, #4
 8017862:	602b      	str	r3, [r5, #0]
 8017864:	e7ec      	b.n	8017840 <rcl_validate_enclave_name_with_size+0x6c>
 8017866:	2305      	movs	r3, #5
 8017868:	602b      	str	r3, [r5, #0]
 801786a:	e7e9      	b.n	8017840 <rcl_validate_enclave_name_with_size+0x6c>
 801786c:	f04f 0c0b 	mov.w	ip, #11
 8017870:	4660      	mov	r0, ip
 8017872:	4770      	bx	lr
 8017874:	460b      	mov	r3, r1
 8017876:	4a04      	ldr	r2, [pc, #16]	; (8017888 <rcl_validate_enclave_name_with_size+0xb4>)
 8017878:	f44f 7180 	mov.w	r1, #256	; 0x100
 801787c:	a802      	add	r0, sp, #8
 801787e:	f7f9 f943 	bl	8010b08 <rcutils_snprintf>
 8017882:	f04f 0c01 	mov.w	ip, #1
 8017886:	e7c1      	b.n	801780c <rcl_validate_enclave_name_with_size+0x38>
 8017888:	0801d8b0 	.word	0x0801d8b0

0801788c <rcl_validate_enclave_name>:
 801788c:	b168      	cbz	r0, 80178aa <rcl_validate_enclave_name+0x1e>
 801788e:	b570      	push	{r4, r5, r6, lr}
 8017890:	460d      	mov	r5, r1
 8017892:	4616      	mov	r6, r2
 8017894:	4604      	mov	r4, r0
 8017896:	f7e8 fcdd 	bl	8000254 <strlen>
 801789a:	4633      	mov	r3, r6
 801789c:	4601      	mov	r1, r0
 801789e:	462a      	mov	r2, r5
 80178a0:	4620      	mov	r0, r4
 80178a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80178a6:	f7ff bf95 	b.w	80177d4 <rcl_validate_enclave_name_with_size>
 80178aa:	200b      	movs	r0, #11
 80178ac:	4770      	bx	lr
 80178ae:	bf00      	nop

080178b0 <rcl_get_zero_initialized_wait_set>:
 80178b0:	b510      	push	{r4, lr}
 80178b2:	4c08      	ldr	r4, [pc, #32]	; (80178d4 <rcl_get_zero_initialized_wait_set+0x24>)
 80178b4:	4686      	mov	lr, r0
 80178b6:	4684      	mov	ip, r0
 80178b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80178c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80178ca:	6823      	ldr	r3, [r4, #0]
 80178cc:	4670      	mov	r0, lr
 80178ce:	f8cc 3000 	str.w	r3, [ip]
 80178d2:	bd10      	pop	{r4, pc}
 80178d4:	0801d910 	.word	0x0801d910

080178d8 <rcl_wait_set_is_valid>:
 80178d8:	b118      	cbz	r0, 80178e2 <rcl_wait_set_is_valid+0xa>
 80178da:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80178dc:	3800      	subs	r0, #0
 80178de:	bf18      	it	ne
 80178e0:	2001      	movne	r0, #1
 80178e2:	4770      	bx	lr

080178e4 <rcl_wait_set_fini>:
 80178e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178e8:	b082      	sub	sp, #8
 80178ea:	2800      	cmp	r0, #0
 80178ec:	f000 8095 	beq.w	8017a1a <rcl_wait_set_fini+0x136>
 80178f0:	6b06      	ldr	r6, [r0, #48]	; 0x30
 80178f2:	4604      	mov	r4, r0
 80178f4:	2e00      	cmp	r6, #0
 80178f6:	f000 808c 	beq.w	8017a12 <rcl_wait_set_fini+0x12e>
 80178fa:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
 80178fc:	f002 f9c0 	bl	8019c80 <rmw_destroy_wait_set>
 8017900:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017902:	1e06      	subs	r6, r0, #0
 8017904:	bf18      	it	ne
 8017906:	f44f 7661 	movne.w	r6, #900	; 0x384
 801790a:	2d00      	cmp	r5, #0
 801790c:	f000 8081 	beq.w	8017a12 <rcl_wait_set_fini+0x12e>
 8017910:	2700      	movs	r7, #0
 8017912:	6820      	ldr	r0, [r4, #0]
 8017914:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 8017918:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801791a:	6067      	str	r7, [r4, #4]
 801791c:	602f      	str	r7, [r5, #0]
 801791e:	b120      	cbz	r0, 801792a <rcl_wait_set_fini+0x46>
 8017920:	9101      	str	r1, [sp, #4]
 8017922:	47c0      	blx	r8
 8017924:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017926:	9901      	ldr	r1, [sp, #4]
 8017928:	6027      	str	r7, [r4, #0]
 801792a:	68a8      	ldr	r0, [r5, #8]
 801792c:	b120      	cbz	r0, 8017938 <rcl_wait_set_fini+0x54>
 801792e:	47c0      	blx	r8
 8017930:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017932:	2300      	movs	r3, #0
 8017934:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8017938:	f04f 0800 	mov.w	r8, #0
 801793c:	68a0      	ldr	r0, [r4, #8]
 801793e:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017940:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017942:	f8c4 800c 	str.w	r8, [r4, #12]
 8017946:	f8c5 800c 	str.w	r8, [r5, #12]
 801794a:	b128      	cbz	r0, 8017958 <rcl_wait_set_fini+0x74>
 801794c:	47b8      	blx	r7
 801794e:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017950:	f8c4 8008 	str.w	r8, [r4, #8]
 8017954:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 8017956:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017958:	f04f 0800 	mov.w	r8, #0
 801795c:	6968      	ldr	r0, [r5, #20]
 801795e:	f8c5 8010 	str.w	r8, [r5, #16]
 8017962:	b128      	cbz	r0, 8017970 <rcl_wait_set_fini+0x8c>
 8017964:	47b8      	blx	r7
 8017966:	f8c5 8014 	str.w	r8, [r5, #20]
 801796a:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801796c:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801796e:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017970:	f04f 0800 	mov.w	r8, #0
 8017974:	6920      	ldr	r0, [r4, #16]
 8017976:	f8c4 8014 	str.w	r8, [r4, #20]
 801797a:	f8c5 8040 	str.w	r8, [r5, #64]	; 0x40
 801797e:	b128      	cbz	r0, 801798c <rcl_wait_set_fini+0xa8>
 8017980:	47b8      	blx	r7
 8017982:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017984:	f8c4 8010 	str.w	r8, [r4, #16]
 8017988:	6cef      	ldr	r7, [r5, #76]	; 0x4c
 801798a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 801798c:	f04f 0800 	mov.w	r8, #0
 8017990:	69a0      	ldr	r0, [r4, #24]
 8017992:	f8c4 801c 	str.w	r8, [r4, #28]
 8017996:	f8c5 8018 	str.w	r8, [r5, #24]
 801799a:	b128      	cbz	r0, 80179a8 <rcl_wait_set_fini+0xc4>
 801799c:	9101      	str	r1, [sp, #4]
 801799e:	47b8      	blx	r7
 80179a0:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80179a2:	9901      	ldr	r1, [sp, #4]
 80179a4:	f8c4 8018 	str.w	r8, [r4, #24]
 80179a8:	6a28      	ldr	r0, [r5, #32]
 80179aa:	b120      	cbz	r0, 80179b6 <rcl_wait_set_fini+0xd2>
 80179ac:	47b8      	blx	r7
 80179ae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80179b0:	2300      	movs	r3, #0
 80179b2:	e9c5 3307 	strd	r3, r3, [r5, #28]
 80179b6:	2700      	movs	r7, #0
 80179b8:	6a20      	ldr	r0, [r4, #32]
 80179ba:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80179be:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80179c0:	6267      	str	r7, [r4, #36]	; 0x24
 80179c2:	626f      	str	r7, [r5, #36]	; 0x24
 80179c4:	b120      	cbz	r0, 80179d0 <rcl_wait_set_fini+0xec>
 80179c6:	9101      	str	r1, [sp, #4]
 80179c8:	47c0      	blx	r8
 80179ca:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80179cc:	9901      	ldr	r1, [sp, #4]
 80179ce:	6227      	str	r7, [r4, #32]
 80179d0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 80179d2:	b120      	cbz	r0, 80179de <rcl_wait_set_fini+0xfa>
 80179d4:	47c0      	blx	r8
 80179d6:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80179d8:	2300      	movs	r3, #0
 80179da:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 80179de:	2700      	movs	r7, #0
 80179e0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80179e2:	f8d5 804c 	ldr.w	r8, [r5, #76]	; 0x4c
 80179e6:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80179e8:	62e7      	str	r7, [r4, #44]	; 0x2c
 80179ea:	632f      	str	r7, [r5, #48]	; 0x30
 80179ec:	b120      	cbz	r0, 80179f8 <rcl_wait_set_fini+0x114>
 80179ee:	9101      	str	r1, [sp, #4]
 80179f0:	47c0      	blx	r8
 80179f2:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80179f4:	9901      	ldr	r1, [sp, #4]
 80179f6:	62a7      	str	r7, [r4, #40]	; 0x28
 80179f8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
 80179fa:	b120      	cbz	r0, 8017a06 <rcl_wait_set_fini+0x122>
 80179fc:	47c0      	blx	r8
 80179fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8017a00:	2300      	movs	r3, #0
 8017a02:	e9c5 330d 	strd	r3, r3, [r5, #52]	; 0x34
 8017a06:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8017a08:	4628      	mov	r0, r5
 8017a0a:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8017a0c:	4798      	blx	r3
 8017a0e:	2300      	movs	r3, #0
 8017a10:	6323      	str	r3, [r4, #48]	; 0x30
 8017a12:	4630      	mov	r0, r6
 8017a14:	b002      	add	sp, #8
 8017a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a1a:	260b      	movs	r6, #11
 8017a1c:	4630      	mov	r0, r6
 8017a1e:	b002      	add	sp, #8
 8017a20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a24 <rcl_wait_set_add_subscription>:
 8017a24:	b318      	cbz	r0, 8017a6e <rcl_wait_set_add_subscription+0x4a>
 8017a26:	b538      	push	{r3, r4, r5, lr}
 8017a28:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017a2a:	4604      	mov	r4, r0
 8017a2c:	b30b      	cbz	r3, 8017a72 <rcl_wait_set_add_subscription+0x4e>
 8017a2e:	b319      	cbz	r1, 8017a78 <rcl_wait_set_add_subscription+0x54>
 8017a30:	681d      	ldr	r5, [r3, #0]
 8017a32:	6840      	ldr	r0, [r0, #4]
 8017a34:	4285      	cmp	r5, r0
 8017a36:	d217      	bcs.n	8017a68 <rcl_wait_set_add_subscription+0x44>
 8017a38:	1c68      	adds	r0, r5, #1
 8017a3a:	6018      	str	r0, [r3, #0]
 8017a3c:	6823      	ldr	r3, [r4, #0]
 8017a3e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017a42:	b102      	cbz	r2, 8017a46 <rcl_wait_set_add_subscription+0x22>
 8017a44:	6015      	str	r5, [r2, #0]
 8017a46:	4608      	mov	r0, r1
 8017a48:	f7f7 ff30 	bl	800f8ac <rcl_subscription_get_rmw_handle>
 8017a4c:	b150      	cbz	r0, 8017a64 <rcl_wait_set_add_subscription+0x40>
 8017a4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017a50:	6842      	ldr	r2, [r0, #4]
 8017a52:	2000      	movs	r0, #0
 8017a54:	689b      	ldr	r3, [r3, #8]
 8017a56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017a5a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017a5c:	6853      	ldr	r3, [r2, #4]
 8017a5e:	3301      	adds	r3, #1
 8017a60:	6053      	str	r3, [r2, #4]
 8017a62:	bd38      	pop	{r3, r4, r5, pc}
 8017a64:	2001      	movs	r0, #1
 8017a66:	bd38      	pop	{r3, r4, r5, pc}
 8017a68:	f240 3086 	movw	r0, #902	; 0x386
 8017a6c:	bd38      	pop	{r3, r4, r5, pc}
 8017a6e:	200b      	movs	r0, #11
 8017a70:	4770      	bx	lr
 8017a72:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017a76:	bd38      	pop	{r3, r4, r5, pc}
 8017a78:	200b      	movs	r0, #11
 8017a7a:	bd38      	pop	{r3, r4, r5, pc}

08017a7c <rcl_wait_set_clear>:
 8017a7c:	2800      	cmp	r0, #0
 8017a7e:	d074      	beq.n	8017b6a <rcl_wait_set_clear+0xee>
 8017a80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017a82:	b510      	push	{r4, lr}
 8017a84:	4604      	mov	r4, r0
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d071      	beq.n	8017b6e <rcl_wait_set_clear+0xf2>
 8017a8a:	6800      	ldr	r0, [r0, #0]
 8017a8c:	b138      	cbz	r0, 8017a9e <rcl_wait_set_clear+0x22>
 8017a8e:	6862      	ldr	r2, [r4, #4]
 8017a90:	2100      	movs	r1, #0
 8017a92:	0092      	lsls	r2, r2, #2
 8017a94:	f003 ff0a 	bl	801b8ac <memset>
 8017a98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017a9a:	2200      	movs	r2, #0
 8017a9c:	601a      	str	r2, [r3, #0]
 8017a9e:	68a0      	ldr	r0, [r4, #8]
 8017aa0:	b138      	cbz	r0, 8017ab2 <rcl_wait_set_clear+0x36>
 8017aa2:	68e2      	ldr	r2, [r4, #12]
 8017aa4:	2100      	movs	r1, #0
 8017aa6:	0092      	lsls	r2, r2, #2
 8017aa8:	f003 ff00 	bl	801b8ac <memset>
 8017aac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017aae:	2200      	movs	r2, #0
 8017ab0:	60da      	str	r2, [r3, #12]
 8017ab2:	69a0      	ldr	r0, [r4, #24]
 8017ab4:	b138      	cbz	r0, 8017ac6 <rcl_wait_set_clear+0x4a>
 8017ab6:	69e2      	ldr	r2, [r4, #28]
 8017ab8:	2100      	movs	r1, #0
 8017aba:	0092      	lsls	r2, r2, #2
 8017abc:	f003 fef6 	bl	801b8ac <memset>
 8017ac0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	619a      	str	r2, [r3, #24]
 8017ac6:	6a20      	ldr	r0, [r4, #32]
 8017ac8:	b138      	cbz	r0, 8017ada <rcl_wait_set_clear+0x5e>
 8017aca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017acc:	2100      	movs	r1, #0
 8017ace:	0092      	lsls	r2, r2, #2
 8017ad0:	f003 feec 	bl	801b8ac <memset>
 8017ad4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	625a      	str	r2, [r3, #36]	; 0x24
 8017ada:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017adc:	b138      	cbz	r0, 8017aee <rcl_wait_set_clear+0x72>
 8017ade:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017ae0:	2100      	movs	r1, #0
 8017ae2:	0092      	lsls	r2, r2, #2
 8017ae4:	f003 fee2 	bl	801b8ac <memset>
 8017ae8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017aea:	2200      	movs	r2, #0
 8017aec:	631a      	str	r2, [r3, #48]	; 0x30
 8017aee:	6920      	ldr	r0, [r4, #16]
 8017af0:	b138      	cbz	r0, 8017b02 <rcl_wait_set_clear+0x86>
 8017af2:	6962      	ldr	r2, [r4, #20]
 8017af4:	2100      	movs	r1, #0
 8017af6:	0092      	lsls	r2, r2, #2
 8017af8:	f003 fed8 	bl	801b8ac <memset>
 8017afc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017afe:	2200      	movs	r2, #0
 8017b00:	641a      	str	r2, [r3, #64]	; 0x40
 8017b02:	6898      	ldr	r0, [r3, #8]
 8017b04:	b138      	cbz	r0, 8017b16 <rcl_wait_set_clear+0x9a>
 8017b06:	685a      	ldr	r2, [r3, #4]
 8017b08:	2100      	movs	r1, #0
 8017b0a:	0092      	lsls	r2, r2, #2
 8017b0c:	f003 fece 	bl	801b8ac <memset>
 8017b10:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b12:	2200      	movs	r2, #0
 8017b14:	605a      	str	r2, [r3, #4]
 8017b16:	6958      	ldr	r0, [r3, #20]
 8017b18:	b138      	cbz	r0, 8017b2a <rcl_wait_set_clear+0xae>
 8017b1a:	691a      	ldr	r2, [r3, #16]
 8017b1c:	2100      	movs	r1, #0
 8017b1e:	0092      	lsls	r2, r2, #2
 8017b20:	f003 fec4 	bl	801b8ac <memset>
 8017b24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b26:	2200      	movs	r2, #0
 8017b28:	611a      	str	r2, [r3, #16]
 8017b2a:	6a18      	ldr	r0, [r3, #32]
 8017b2c:	b138      	cbz	r0, 8017b3e <rcl_wait_set_clear+0xc2>
 8017b2e:	69da      	ldr	r2, [r3, #28]
 8017b30:	2100      	movs	r1, #0
 8017b32:	0092      	lsls	r2, r2, #2
 8017b34:	f003 feba 	bl	801b8ac <memset>
 8017b38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	61da      	str	r2, [r3, #28]
 8017b3e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8017b40:	b138      	cbz	r0, 8017b52 <rcl_wait_set_clear+0xd6>
 8017b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017b44:	2100      	movs	r1, #0
 8017b46:	0092      	lsls	r2, r2, #2
 8017b48:	f003 feb0 	bl	801b8ac <memset>
 8017b4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b4e:	2200      	movs	r2, #0
 8017b50:	629a      	str	r2, [r3, #40]	; 0x28
 8017b52:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8017b54:	b140      	cbz	r0, 8017b68 <rcl_wait_set_clear+0xec>
 8017b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017b58:	2100      	movs	r1, #0
 8017b5a:	0092      	lsls	r2, r2, #2
 8017b5c:	f003 fea6 	bl	801b8ac <memset>
 8017b60:	2300      	movs	r3, #0
 8017b62:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017b64:	4618      	mov	r0, r3
 8017b66:	6353      	str	r3, [r2, #52]	; 0x34
 8017b68:	bd10      	pop	{r4, pc}
 8017b6a:	200b      	movs	r0, #11
 8017b6c:	4770      	bx	lr
 8017b6e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017b72:	bd10      	pop	{r4, pc}

08017b74 <rcl_wait_set_resize>:
 8017b74:	2800      	cmp	r0, #0
 8017b76:	f000 8180 	beq.w	8017e7a <rcl_wait_set_resize+0x306>
 8017b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b7e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8017b80:	b083      	sub	sp, #12
 8017b82:	4605      	mov	r5, r0
 8017b84:	2c00      	cmp	r4, #0
 8017b86:	f000 817a 	beq.w	8017e7e <rcl_wait_set_resize+0x30a>
 8017b8a:	f04f 0900 	mov.w	r9, #0
 8017b8e:	461f      	mov	r7, r3
 8017b90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8017b94:	4688      	mov	r8, r1
 8017b96:	4616      	mov	r6, r2
 8017b98:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	; 0x4c
 8017b9c:	f8c0 9004 	str.w	r9, [r0, #4]
 8017ba0:	f8c4 9000 	str.w	r9, [r4]
 8017ba4:	2900      	cmp	r1, #0
 8017ba6:	f000 80bf 	beq.w	8017d28 <rcl_wait_set_resize+0x1b4>
 8017baa:	008c      	lsls	r4, r1, #2
 8017bac:	4652      	mov	r2, sl
 8017bae:	6800      	ldr	r0, [r0, #0]
 8017bb0:	4621      	mov	r1, r4
 8017bb2:	9301      	str	r3, [sp, #4]
 8017bb4:	4798      	blx	r3
 8017bb6:	9b01      	ldr	r3, [sp, #4]
 8017bb8:	6028      	str	r0, [r5, #0]
 8017bba:	2800      	cmp	r0, #0
 8017bbc:	f000 80f6 	beq.w	8017dac <rcl_wait_set_resize+0x238>
 8017bc0:	4622      	mov	r2, r4
 8017bc2:	4649      	mov	r1, r9
 8017bc4:	9301      	str	r3, [sp, #4]
 8017bc6:	f003 fe71 	bl	801b8ac <memset>
 8017bca:	f8c5 8004 	str.w	r8, [r5, #4]
 8017bce:	4652      	mov	r2, sl
 8017bd0:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8017bd4:	4621      	mov	r1, r4
 8017bd6:	9b01      	ldr	r3, [sp, #4]
 8017bd8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8017bdc:	f8c8 9004 	str.w	r9, [r8, #4]
 8017be0:	4798      	blx	r3
 8017be2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017be4:	f8c8 0008 	str.w	r0, [r8, #8]
 8017be8:	689b      	ldr	r3, [r3, #8]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	f000 814a 	beq.w	8017e84 <rcl_wait_set_resize+0x310>
 8017bf0:	4622      	mov	r2, r4
 8017bf2:	4649      	mov	r1, r9
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f003 fe59 	bl	801b8ac <memset>
 8017bfa:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017bfc:	f04f 0800 	mov.w	r8, #0
 8017c00:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017c04:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	; 0x4c
 8017c08:	f8c5 800c 	str.w	r8, [r5, #12]
 8017c0c:	f8c4 800c 	str.w	r8, [r4, #12]
 8017c10:	2e00      	cmp	r6, #0
 8017c12:	f040 809b 	bne.w	8017d4c <rcl_wait_set_resize+0x1d8>
 8017c16:	68a8      	ldr	r0, [r5, #8]
 8017c18:	b128      	cbz	r0, 8017c26 <rcl_wait_set_resize+0xb2>
 8017c1a:	4649      	mov	r1, r9
 8017c1c:	4790      	blx	r2
 8017c1e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017c20:	60ae      	str	r6, [r5, #8]
 8017c22:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017c26:	f04f 0800 	mov.w	r8, #0
 8017c2a:	19f6      	adds	r6, r6, r7
 8017c2c:	f8c4 8010 	str.w	r8, [r4, #16]
 8017c30:	f040 80a2 	bne.w	8017d78 <rcl_wait_set_resize+0x204>
 8017c34:	6960      	ldr	r0, [r4, #20]
 8017c36:	b130      	cbz	r0, 8017c46 <rcl_wait_set_resize+0xd2>
 8017c38:	4649      	mov	r1, r9
 8017c3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8017c3c:	4798      	blx	r3
 8017c3e:	6166      	str	r6, [r4, #20]
 8017c40:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017c42:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017c46:	2600      	movs	r6, #0
 8017c48:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017c4c:	616e      	str	r6, [r5, #20]
 8017c4e:	6426      	str	r6, [r4, #64]	; 0x40
 8017c50:	2f00      	cmp	r7, #0
 8017c52:	f040 80af 	bne.w	8017db4 <rcl_wait_set_resize+0x240>
 8017c56:	6928      	ldr	r0, [r5, #16]
 8017c58:	b138      	cbz	r0, 8017c6a <rcl_wait_set_resize+0xf6>
 8017c5a:	4649      	mov	r1, r9
 8017c5c:	47d0      	blx	sl
 8017c5e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017c60:	612f      	str	r7, [r5, #16]
 8017c62:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017c66:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017c6a:	2600      	movs	r6, #0
 8017c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c6e:	61ee      	str	r6, [r5, #28]
 8017c70:	61a6      	str	r6, [r4, #24]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	f040 8093 	bne.w	8017d9e <rcl_wait_set_resize+0x22a>
 8017c78:	69a8      	ldr	r0, [r5, #24]
 8017c7a:	b120      	cbz	r0, 8017c86 <rcl_wait_set_resize+0x112>
 8017c7c:	4649      	mov	r1, r9
 8017c7e:	47d0      	blx	sl
 8017c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017c82:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017c84:	61ab      	str	r3, [r5, #24]
 8017c86:	6a20      	ldr	r0, [r4, #32]
 8017c88:	b128      	cbz	r0, 8017c96 <rcl_wait_set_resize+0x122>
 8017c8a:	4649      	mov	r1, r9
 8017c8c:	47d0      	blx	sl
 8017c8e:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017c90:	2300      	movs	r3, #0
 8017c92:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8017c96:	2600      	movs	r6, #0
 8017c98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017c9a:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8017c9c:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8017ca0:	626e      	str	r6, [r5, #36]	; 0x24
 8017ca2:	6266      	str	r6, [r4, #36]	; 0x24
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	f000 8098 	beq.w	8017dda <rcl_wait_set_resize+0x266>
 8017caa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8017cae:	463a      	mov	r2, r7
 8017cb0:	6a28      	ldr	r0, [r5, #32]
 8017cb2:	4651      	mov	r1, sl
 8017cb4:	47c8      	blx	r9
 8017cb6:	6228      	str	r0, [r5, #32]
 8017cb8:	2800      	cmp	r0, #0
 8017cba:	d077      	beq.n	8017dac <rcl_wait_set_resize+0x238>
 8017cbc:	4652      	mov	r2, sl
 8017cbe:	4631      	mov	r1, r6
 8017cc0:	f003 fdf4 	bl	801b8ac <memset>
 8017cc4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cc8:	463a      	mov	r2, r7
 8017cca:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017ccc:	4651      	mov	r1, sl
 8017cce:	626b      	str	r3, [r5, #36]	; 0x24
 8017cd0:	62a6      	str	r6, [r4, #40]	; 0x28
 8017cd2:	47c8      	blx	r9
 8017cd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017cd6:	62e0      	str	r0, [r4, #44]	; 0x2c
 8017cd8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8017cda:	2c00      	cmp	r4, #0
 8017cdc:	f000 80f2 	beq.w	8017ec4 <rcl_wait_set_resize+0x350>
 8017ce0:	4620      	mov	r0, r4
 8017ce2:	4652      	mov	r2, sl
 8017ce4:	4631      	mov	r1, r6
 8017ce6:	f003 fde1 	bl	801b8ac <memset>
 8017cea:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017cec:	2600      	movs	r6, #0
 8017cee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017cf0:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8017cf2:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	; 0x4c
 8017cf6:	62ee      	str	r6, [r5, #44]	; 0x2c
 8017cf8:	6326      	str	r6, [r4, #48]	; 0x30
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	f040 8097 	bne.w	8017e2e <rcl_wait_set_resize+0x2ba>
 8017d00:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017d02:	b120      	cbz	r0, 8017d0e <rcl_wait_set_resize+0x19a>
 8017d04:	4639      	mov	r1, r7
 8017d06:	47c0      	blx	r8
 8017d08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d0a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017d0c:	62ab      	str	r3, [r5, #40]	; 0x28
 8017d0e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8017d10:	2800      	cmp	r0, #0
 8017d12:	d04c      	beq.n	8017dae <rcl_wait_set_resize+0x23a>
 8017d14:	4639      	mov	r1, r7
 8017d16:	47c0      	blx	r8
 8017d18:	2300      	movs	r3, #0
 8017d1a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	e9c2 330d 	strd	r3, r3, [r2, #52]	; 0x34
 8017d22:	b003      	add	sp, #12
 8017d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d28:	6800      	ldr	r0, [r0, #0]
 8017d2a:	b120      	cbz	r0, 8017d36 <rcl_wait_set_resize+0x1c2>
 8017d2c:	4651      	mov	r1, sl
 8017d2e:	47d8      	blx	fp
 8017d30:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017d32:	f8c5 8000 	str.w	r8, [r5]
 8017d36:	68a0      	ldr	r0, [r4, #8]
 8017d38:	2800      	cmp	r0, #0
 8017d3a:	f43f af5f 	beq.w	8017bfc <rcl_wait_set_resize+0x88>
 8017d3e:	4651      	mov	r1, sl
 8017d40:	47d8      	blx	fp
 8017d42:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017d44:	2300      	movs	r3, #0
 8017d46:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017d4a:	e757      	b.n	8017bfc <rcl_wait_set_resize+0x88>
 8017d4c:	00b4      	lsls	r4, r6, #2
 8017d4e:	464a      	mov	r2, r9
 8017d50:	68a8      	ldr	r0, [r5, #8]
 8017d52:	4621      	mov	r1, r4
 8017d54:	4798      	blx	r3
 8017d56:	60a8      	str	r0, [r5, #8]
 8017d58:	b340      	cbz	r0, 8017dac <rcl_wait_set_resize+0x238>
 8017d5a:	4622      	mov	r2, r4
 8017d5c:	4641      	mov	r1, r8
 8017d5e:	f003 fda5 	bl	801b8ac <memset>
 8017d62:	f04f 0800 	mov.w	r8, #0
 8017d66:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017d68:	60ee      	str	r6, [r5, #12]
 8017d6a:	19f6      	adds	r6, r6, r7
 8017d6c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017d70:	f8c4 8010 	str.w	r8, [r4, #16]
 8017d74:	f43f af5e 	beq.w	8017c34 <rcl_wait_set_resize+0xc0>
 8017d78:	00b6      	lsls	r6, r6, #2
 8017d7a:	464a      	mov	r2, r9
 8017d7c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8017d7e:	6960      	ldr	r0, [r4, #20]
 8017d80:	4631      	mov	r1, r6
 8017d82:	4798      	blx	r3
 8017d84:	4681      	mov	r9, r0
 8017d86:	6160      	str	r0, [r4, #20]
 8017d88:	2800      	cmp	r0, #0
 8017d8a:	f000 8084 	beq.w	8017e96 <rcl_wait_set_resize+0x322>
 8017d8e:	4632      	mov	r2, r6
 8017d90:	4641      	mov	r1, r8
 8017d92:	f003 fd8b 	bl	801b8ac <memset>
 8017d96:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017d98:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017d9c:	e753      	b.n	8017c46 <rcl_wait_set_resize+0xd2>
 8017d9e:	009c      	lsls	r4, r3, #2
 8017da0:	464a      	mov	r2, r9
 8017da2:	69a8      	ldr	r0, [r5, #24]
 8017da4:	4621      	mov	r1, r4
 8017da6:	47c0      	blx	r8
 8017da8:	61a8      	str	r0, [r5, #24]
 8017daa:	bb40      	cbnz	r0, 8017dfe <rcl_wait_set_resize+0x28a>
 8017dac:	200a      	movs	r0, #10
 8017dae:	b003      	add	sp, #12
 8017db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017db4:	00bc      	lsls	r4, r7, #2
 8017db6:	464a      	mov	r2, r9
 8017db8:	6928      	ldr	r0, [r5, #16]
 8017dba:	4621      	mov	r1, r4
 8017dbc:	47c0      	blx	r8
 8017dbe:	6128      	str	r0, [r5, #16]
 8017dc0:	2800      	cmp	r0, #0
 8017dc2:	d0f3      	beq.n	8017dac <rcl_wait_set_resize+0x238>
 8017dc4:	4622      	mov	r2, r4
 8017dc6:	4631      	mov	r1, r6
 8017dc8:	f003 fd70 	bl	801b8ac <memset>
 8017dcc:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017dce:	616f      	str	r7, [r5, #20]
 8017dd0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8017dd4:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	; 0x4c
 8017dd8:	e747      	b.n	8017c6a <rcl_wait_set_resize+0xf6>
 8017dda:	6a28      	ldr	r0, [r5, #32]
 8017ddc:	b120      	cbz	r0, 8017de8 <rcl_wait_set_resize+0x274>
 8017dde:	4639      	mov	r1, r7
 8017de0:	47c0      	blx	r8
 8017de2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017de4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017de6:	622b      	str	r3, [r5, #32]
 8017de8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017dea:	2800      	cmp	r0, #0
 8017dec:	f43f af7e 	beq.w	8017cec <rcl_wait_set_resize+0x178>
 8017df0:	4639      	mov	r1, r7
 8017df2:	47c0      	blx	r8
 8017df4:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017df6:	2300      	movs	r3, #0
 8017df8:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
 8017dfc:	e776      	b.n	8017cec <rcl_wait_set_resize+0x178>
 8017dfe:	4622      	mov	r2, r4
 8017e00:	4631      	mov	r1, r6
 8017e02:	f003 fd53 	bl	801b8ac <memset>
 8017e06:	6b2f      	ldr	r7, [r5, #48]	; 0x30
 8017e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017e0a:	464a      	mov	r2, r9
 8017e0c:	6a38      	ldr	r0, [r7, #32]
 8017e0e:	4621      	mov	r1, r4
 8017e10:	61eb      	str	r3, [r5, #28]
 8017e12:	61fe      	str	r6, [r7, #28]
 8017e14:	47c0      	blx	r8
 8017e16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e18:	6238      	str	r0, [r7, #32]
 8017e1a:	6a1f      	ldr	r7, [r3, #32]
 8017e1c:	2f00      	cmp	r7, #0
 8017e1e:	d04a      	beq.n	8017eb6 <rcl_wait_set_resize+0x342>
 8017e20:	4622      	mov	r2, r4
 8017e22:	4631      	mov	r1, r6
 8017e24:	4638      	mov	r0, r7
 8017e26:	f003 fd41 	bl	801b8ac <memset>
 8017e2a:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8017e2c:	e733      	b.n	8017c96 <rcl_wait_set_resize+0x122>
 8017e2e:	009c      	lsls	r4, r3, #2
 8017e30:	463a      	mov	r2, r7
 8017e32:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017e34:	4621      	mov	r1, r4
 8017e36:	47c8      	blx	r9
 8017e38:	62a8      	str	r0, [r5, #40]	; 0x28
 8017e3a:	2800      	cmp	r0, #0
 8017e3c:	d0b6      	beq.n	8017dac <rcl_wait_set_resize+0x238>
 8017e3e:	4622      	mov	r2, r4
 8017e40:	4631      	mov	r1, r6
 8017e42:	f003 fd33 	bl	801b8ac <memset>
 8017e46:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8017e4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017e4c:	463a      	mov	r2, r7
 8017e4e:	4621      	mov	r1, r4
 8017e50:	f8da 0038 	ldr.w	r0, [sl, #56]	; 0x38
 8017e54:	62eb      	str	r3, [r5, #44]	; 0x2c
 8017e56:	f8ca 6034 	str.w	r6, [sl, #52]	; 0x34
 8017e5a:	47c8      	blx	r9
 8017e5c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e5e:	f8ca 0038 	str.w	r0, [sl, #56]	; 0x38
 8017e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d034      	beq.n	8017ed2 <rcl_wait_set_resize+0x35e>
 8017e68:	4622      	mov	r2, r4
 8017e6a:	4631      	mov	r1, r6
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f003 fd1d 	bl	801b8ac <memset>
 8017e72:	4630      	mov	r0, r6
 8017e74:	b003      	add	sp, #12
 8017e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e7a:	200b      	movs	r0, #11
 8017e7c:	4770      	bx	lr
 8017e7e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8017e82:	e794      	b.n	8017dae <rcl_wait_set_resize+0x23a>
 8017e84:	6828      	ldr	r0, [r5, #0]
 8017e86:	4651      	mov	r1, sl
 8017e88:	9301      	str	r3, [sp, #4]
 8017e8a:	47d8      	blx	fp
 8017e8c:	9b01      	ldr	r3, [sp, #4]
 8017e8e:	200a      	movs	r0, #10
 8017e90:	e9c5 3300 	strd	r3, r3, [r5]
 8017e94:	e78b      	b.n	8017dae <rcl_wait_set_resize+0x23a>
 8017e96:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017e98:	68a8      	ldr	r0, [r5, #8]
 8017e9a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017e9e:	4798      	blx	r3
 8017ea0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017ea2:	6928      	ldr	r0, [r5, #16]
 8017ea4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017ea6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8017ea8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 8017eac:	4790      	blx	r2
 8017eae:	200a      	movs	r0, #10
 8017eb0:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017eb4:	e77b      	b.n	8017dae <rcl_wait_set_resize+0x23a>
 8017eb6:	69a8      	ldr	r0, [r5, #24]
 8017eb8:	4649      	mov	r1, r9
 8017eba:	47d0      	blx	sl
 8017ebc:	200a      	movs	r0, #10
 8017ebe:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017ec2:	e774      	b.n	8017dae <rcl_wait_set_resize+0x23a>
 8017ec4:	6a28      	ldr	r0, [r5, #32]
 8017ec6:	4639      	mov	r1, r7
 8017ec8:	47c0      	blx	r8
 8017eca:	200a      	movs	r0, #10
 8017ecc:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017ed0:	e76d      	b.n	8017dae <rcl_wait_set_resize+0x23a>
 8017ed2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8017ed4:	4639      	mov	r1, r7
 8017ed6:	9301      	str	r3, [sp, #4]
 8017ed8:	47c0      	blx	r8
 8017eda:	9b01      	ldr	r3, [sp, #4]
 8017edc:	200a      	movs	r0, #10
 8017ede:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
 8017ee2:	e764      	b.n	8017dae <rcl_wait_set_resize+0x23a>

08017ee4 <rcl_wait_set_init>:
 8017ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ee8:	b085      	sub	sp, #20
 8017eea:	4605      	mov	r5, r0
 8017eec:	460e      	mov	r6, r1
 8017eee:	4617      	mov	r7, r2
 8017ef0:	a812      	add	r0, sp, #72	; 0x48
 8017ef2:	4698      	mov	r8, r3
 8017ef4:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
 8017ef8:	f7f8 fcc0 	bl	801087c <rcutils_allocator_is_valid>
 8017efc:	2d00      	cmp	r5, #0
 8017efe:	d072      	beq.n	8017fe6 <rcl_wait_set_init+0x102>
 8017f00:	f080 0001 	eor.w	r0, r0, #1
 8017f04:	b2c0      	uxtb	r0, r0
 8017f06:	2800      	cmp	r0, #0
 8017f08:	d16d      	bne.n	8017fe6 <rcl_wait_set_init+0x102>
 8017f0a:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8017f0e:	f1ba 0f00 	cmp.w	sl, #0
 8017f12:	d004      	beq.n	8017f1e <rcl_wait_set_init+0x3a>
 8017f14:	2464      	movs	r4, #100	; 0x64
 8017f16:	4620      	mov	r0, r4
 8017f18:	b005      	add	sp, #20
 8017f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f1e:	f1b9 0f00 	cmp.w	r9, #0
 8017f22:	d060      	beq.n	8017fe6 <rcl_wait_set_init+0x102>
 8017f24:	4648      	mov	r0, r9
 8017f26:	f7fe fe8f 	bl	8016c48 <rcl_context_is_valid>
 8017f2a:	2800      	cmp	r0, #0
 8017f2c:	d068      	beq.n	8018000 <rcl_wait_set_init+0x11c>
 8017f2e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017f30:	205c      	movs	r0, #92	; 0x5c
 8017f32:	9916      	ldr	r1, [sp, #88]	; 0x58
 8017f34:	4798      	blx	r3
 8017f36:	6328      	str	r0, [r5, #48]	; 0x30
 8017f38:	2800      	cmp	r0, #0
 8017f3a:	d063      	beq.n	8018004 <rcl_wait_set_init+0x120>
 8017f3c:	225c      	movs	r2, #92	; 0x5c
 8017f3e:	4651      	mov	r1, sl
 8017f40:	f003 fcb4 	bl	801b8ac <memset>
 8017f44:	ac12      	add	r4, sp, #72	; 0x48
 8017f46:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
 8017f4a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8017f4e:	f10b 0c48 	add.w	ip, fp, #72	; 0x48
 8017f52:	f8cb 9044 	str.w	r9, [fp, #68]	; 0x44
 8017f56:	eb03 0e02 	add.w	lr, r3, r2
 8017f5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f5c:	f8d9 9000 	ldr.w	r9, [r9]
 8017f60:	449e      	add	lr, r3
 8017f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017f64:	e9cb aa01 	strd	sl, sl, [fp, #4]
 8017f68:	e9cb aa04 	strd	sl, sl, [fp, #16]
 8017f6c:	e9cb aa07 	strd	sl, sl, [fp, #28]
 8017f70:	e9cb aa0a 	strd	sl, sl, [fp, #40]	; 0x28
 8017f74:	e9cb aa0d 	strd	sl, sl, [fp, #52]	; 0x34
 8017f78:	44be      	add	lr, r7
 8017f7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017f7e:	6823      	ldr	r3, [r4, #0]
 8017f80:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 8017f84:	f109 0028 	add.w	r0, r9, #40	; 0x28
 8017f88:	f8cc 3000 	str.w	r3, [ip]
 8017f8c:	f001 fe6e 	bl	8019c6c <rmw_create_wait_set>
 8017f90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017f92:	f8cb 003c 	str.w	r0, [fp, #60]	; 0x3c
 8017f96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8017f98:	b350      	cbz	r0, 8017ff0 <rcl_wait_set_init+0x10c>
 8017f9a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8017f9c:	4643      	mov	r3, r8
 8017f9e:	463a      	mov	r2, r7
 8017fa0:	4631      	mov	r1, r6
 8017fa2:	9402      	str	r4, [sp, #8]
 8017fa4:	4628      	mov	r0, r5
 8017fa6:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8017fa8:	9401      	str	r4, [sp, #4]
 8017faa:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017fac:	9400      	str	r4, [sp, #0]
 8017fae:	f7ff fde1 	bl	8017b74 <rcl_wait_set_resize>
 8017fb2:	4604      	mov	r4, r0
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	d0ae      	beq.n	8017f16 <rcl_wait_set_init+0x32>
 8017fb8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8017fba:	bb2b      	cbnz	r3, 8018008 <rcl_wait_set_init+0x124>
 8017fbc:	2600      	movs	r6, #0
 8017fbe:	4628      	mov	r0, r5
 8017fc0:	4633      	mov	r3, r6
 8017fc2:	4632      	mov	r2, r6
 8017fc4:	4631      	mov	r1, r6
 8017fc6:	9600      	str	r6, [sp, #0]
 8017fc8:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8017fcc:	f7ff fdd2 	bl	8017b74 <rcl_wait_set_resize>
 8017fd0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8017fd2:	2800      	cmp	r0, #0
 8017fd4:	d09f      	beq.n	8017f16 <rcl_wait_set_init+0x32>
 8017fd6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8017fd8:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8017fda:	4798      	blx	r3
 8017fdc:	4620      	mov	r0, r4
 8017fde:	632e      	str	r6, [r5, #48]	; 0x30
 8017fe0:	b005      	add	sp, #20
 8017fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fe6:	240b      	movs	r4, #11
 8017fe8:	4620      	mov	r0, r4
 8017fea:	b005      	add	sp, #20
 8017fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ff0:	2401      	movs	r4, #1
 8017ff2:	f001 fe45 	bl	8019c80 <rmw_destroy_wait_set>
 8017ff6:	2800      	cmp	r0, #0
 8017ff8:	bf18      	it	ne
 8017ffa:	f44f 7461 	movne.w	r4, #900	; 0x384
 8017ffe:	e7dd      	b.n	8017fbc <rcl_wait_set_init+0xd8>
 8018000:	2465      	movs	r4, #101	; 0x65
 8018002:	e788      	b.n	8017f16 <rcl_wait_set_init+0x32>
 8018004:	240a      	movs	r4, #10
 8018006:	e786      	b.n	8017f16 <rcl_wait_set_init+0x32>
 8018008:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 801800a:	e7f2      	b.n	8017ff2 <rcl_wait_set_init+0x10e>

0801800c <rcl_wait_set_add_guard_condition>:
 801800c:	b318      	cbz	r0, 8018056 <rcl_wait_set_add_guard_condition+0x4a>
 801800e:	b538      	push	{r3, r4, r5, lr}
 8018010:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018012:	4604      	mov	r4, r0
 8018014:	b30b      	cbz	r3, 801805a <rcl_wait_set_add_guard_condition+0x4e>
 8018016:	b319      	cbz	r1, 8018060 <rcl_wait_set_add_guard_condition+0x54>
 8018018:	68dd      	ldr	r5, [r3, #12]
 801801a:	68c0      	ldr	r0, [r0, #12]
 801801c:	4285      	cmp	r5, r0
 801801e:	d217      	bcs.n	8018050 <rcl_wait_set_add_guard_condition+0x44>
 8018020:	1c68      	adds	r0, r5, #1
 8018022:	60d8      	str	r0, [r3, #12]
 8018024:	68a3      	ldr	r3, [r4, #8]
 8018026:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801802a:	b102      	cbz	r2, 801802e <rcl_wait_set_add_guard_condition+0x22>
 801802c:	6015      	str	r5, [r2, #0]
 801802e:	4608      	mov	r0, r1
 8018030:	f7fe ff18 	bl	8016e64 <rcl_guard_condition_get_rmw_handle>
 8018034:	b150      	cbz	r0, 801804c <rcl_wait_set_add_guard_condition+0x40>
 8018036:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018038:	6842      	ldr	r2, [r0, #4]
 801803a:	2000      	movs	r0, #0
 801803c:	695b      	ldr	r3, [r3, #20]
 801803e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018042:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018044:	6913      	ldr	r3, [r2, #16]
 8018046:	3301      	adds	r3, #1
 8018048:	6113      	str	r3, [r2, #16]
 801804a:	bd38      	pop	{r3, r4, r5, pc}
 801804c:	2001      	movs	r0, #1
 801804e:	bd38      	pop	{r3, r4, r5, pc}
 8018050:	f240 3086 	movw	r0, #902	; 0x386
 8018054:	bd38      	pop	{r3, r4, r5, pc}
 8018056:	200b      	movs	r0, #11
 8018058:	4770      	bx	lr
 801805a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801805e:	bd38      	pop	{r3, r4, r5, pc}
 8018060:	200b      	movs	r0, #11
 8018062:	bd38      	pop	{r3, r4, r5, pc}

08018064 <rcl_wait_set_add_timer>:
 8018064:	b328      	cbz	r0, 80180b2 <rcl_wait_set_add_timer+0x4e>
 8018066:	b538      	push	{r3, r4, r5, lr}
 8018068:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801806a:	4604      	mov	r4, r0
 801806c:	b31b      	cbz	r3, 80180b6 <rcl_wait_set_add_timer+0x52>
 801806e:	b329      	cbz	r1, 80180bc <rcl_wait_set_add_timer+0x58>
 8018070:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8018072:	6965      	ldr	r5, [r4, #20]
 8018074:	42a8      	cmp	r0, r5
 8018076:	d219      	bcs.n	80180ac <rcl_wait_set_add_timer+0x48>
 8018078:	1c45      	adds	r5, r0, #1
 801807a:	641d      	str	r5, [r3, #64]	; 0x40
 801807c:	6923      	ldr	r3, [r4, #16]
 801807e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 8018082:	b102      	cbz	r2, 8018086 <rcl_wait_set_add_timer+0x22>
 8018084:	6010      	str	r0, [r2, #0]
 8018086:	4608      	mov	r0, r1
 8018088:	f7ff fb9a 	bl	80177c0 <rcl_timer_get_guard_condition>
 801808c:	b168      	cbz	r0, 80180aa <rcl_wait_set_add_timer+0x46>
 801808e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018090:	68e3      	ldr	r3, [r4, #12]
 8018092:	6c15      	ldr	r5, [r2, #64]	; 0x40
 8018094:	3b01      	subs	r3, #1
 8018096:	441d      	add	r5, r3
 8018098:	f7fe fee4 	bl	8016e64 <rcl_guard_condition_get_rmw_handle>
 801809c:	b180      	cbz	r0, 80180c0 <rcl_wait_set_add_timer+0x5c>
 801809e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80180a0:	6842      	ldr	r2, [r0, #4]
 80180a2:	2000      	movs	r0, #0
 80180a4:	695b      	ldr	r3, [r3, #20]
 80180a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80180aa:	bd38      	pop	{r3, r4, r5, pc}
 80180ac:	f240 3086 	movw	r0, #902	; 0x386
 80180b0:	bd38      	pop	{r3, r4, r5, pc}
 80180b2:	200b      	movs	r0, #11
 80180b4:	4770      	bx	lr
 80180b6:	f44f 7061 	mov.w	r0, #900	; 0x384
 80180ba:	bd38      	pop	{r3, r4, r5, pc}
 80180bc:	200b      	movs	r0, #11
 80180be:	bd38      	pop	{r3, r4, r5, pc}
 80180c0:	2001      	movs	r0, #1
 80180c2:	bd38      	pop	{r3, r4, r5, pc}

080180c4 <rcl_wait_set_add_client>:
 80180c4:	b318      	cbz	r0, 801810e <rcl_wait_set_add_client+0x4a>
 80180c6:	b538      	push	{r3, r4, r5, lr}
 80180c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80180ca:	4604      	mov	r4, r0
 80180cc:	b30b      	cbz	r3, 8018112 <rcl_wait_set_add_client+0x4e>
 80180ce:	b319      	cbz	r1, 8018118 <rcl_wait_set_add_client+0x54>
 80180d0:	699d      	ldr	r5, [r3, #24]
 80180d2:	69c0      	ldr	r0, [r0, #28]
 80180d4:	4285      	cmp	r5, r0
 80180d6:	d217      	bcs.n	8018108 <rcl_wait_set_add_client+0x44>
 80180d8:	1c68      	adds	r0, r5, #1
 80180da:	6198      	str	r0, [r3, #24]
 80180dc:	69a3      	ldr	r3, [r4, #24]
 80180de:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 80180e2:	b102      	cbz	r2, 80180e6 <rcl_wait_set_add_client+0x22>
 80180e4:	6015      	str	r5, [r2, #0]
 80180e6:	4608      	mov	r0, r1
 80180e8:	f7fe fd00 	bl	8016aec <rcl_client_get_rmw_handle>
 80180ec:	b150      	cbz	r0, 8018104 <rcl_wait_set_add_client+0x40>
 80180ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80180f0:	6842      	ldr	r2, [r0, #4]
 80180f2:	2000      	movs	r0, #0
 80180f4:	6a1b      	ldr	r3, [r3, #32]
 80180f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80180fa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80180fc:	69d3      	ldr	r3, [r2, #28]
 80180fe:	3301      	adds	r3, #1
 8018100:	61d3      	str	r3, [r2, #28]
 8018102:	bd38      	pop	{r3, r4, r5, pc}
 8018104:	2001      	movs	r0, #1
 8018106:	bd38      	pop	{r3, r4, r5, pc}
 8018108:	f240 3086 	movw	r0, #902	; 0x386
 801810c:	bd38      	pop	{r3, r4, r5, pc}
 801810e:	200b      	movs	r0, #11
 8018110:	4770      	bx	lr
 8018112:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018116:	bd38      	pop	{r3, r4, r5, pc}
 8018118:	200b      	movs	r0, #11
 801811a:	bd38      	pop	{r3, r4, r5, pc}

0801811c <rcl_wait_set_add_service>:
 801811c:	b318      	cbz	r0, 8018166 <rcl_wait_set_add_service+0x4a>
 801811e:	b538      	push	{r3, r4, r5, lr}
 8018120:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8018122:	4604      	mov	r4, r0
 8018124:	b30b      	cbz	r3, 801816a <rcl_wait_set_add_service+0x4e>
 8018126:	b319      	cbz	r1, 8018170 <rcl_wait_set_add_service+0x54>
 8018128:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801812a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801812c:	4285      	cmp	r5, r0
 801812e:	d217      	bcs.n	8018160 <rcl_wait_set_add_service+0x44>
 8018130:	1c68      	adds	r0, r5, #1
 8018132:	6258      	str	r0, [r3, #36]	; 0x24
 8018134:	6a23      	ldr	r3, [r4, #32]
 8018136:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801813a:	b102      	cbz	r2, 801813e <rcl_wait_set_add_service+0x22>
 801813c:	6015      	str	r5, [r2, #0]
 801813e:	4608      	mov	r0, r1
 8018140:	f7f7 fa14 	bl	800f56c <rcl_service_get_rmw_handle>
 8018144:	b150      	cbz	r0, 801815c <rcl_wait_set_add_service+0x40>
 8018146:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018148:	6842      	ldr	r2, [r0, #4]
 801814a:	2000      	movs	r0, #0
 801814c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801814e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018152:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8018154:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8018156:	3301      	adds	r3, #1
 8018158:	6293      	str	r3, [r2, #40]	; 0x28
 801815a:	bd38      	pop	{r3, r4, r5, pc}
 801815c:	2001      	movs	r0, #1
 801815e:	bd38      	pop	{r3, r4, r5, pc}
 8018160:	f240 3086 	movw	r0, #902	; 0x386
 8018164:	bd38      	pop	{r3, r4, r5, pc}
 8018166:	200b      	movs	r0, #11
 8018168:	4770      	bx	lr
 801816a:	f44f 7061 	mov.w	r0, #900	; 0x384
 801816e:	bd38      	pop	{r3, r4, r5, pc}
 8018170:	200b      	movs	r0, #11
 8018172:	bd38      	pop	{r3, r4, r5, pc}
 8018174:	0000      	movs	r0, r0
	...

08018178 <rcl_wait>:
 8018178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801817c:	ed2d 8b02 	vpush	{d8}
 8018180:	b08d      	sub	sp, #52	; 0x34
 8018182:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018186:	2800      	cmp	r0, #0
 8018188:	f000 814f 	beq.w	801842a <rcl_wait+0x2b2>
 801818c:	6b06      	ldr	r6, [r0, #48]	; 0x30
 801818e:	4605      	mov	r5, r0
 8018190:	2e00      	cmp	r6, #0
 8018192:	f000 811a 	beq.w	80183ca <rcl_wait+0x252>
 8018196:	6843      	ldr	r3, [r0, #4]
 8018198:	b983      	cbnz	r3, 80181bc <rcl_wait+0x44>
 801819a:	68eb      	ldr	r3, [r5, #12]
 801819c:	b973      	cbnz	r3, 80181bc <rcl_wait+0x44>
 801819e:	696b      	ldr	r3, [r5, #20]
 80181a0:	b963      	cbnz	r3, 80181bc <rcl_wait+0x44>
 80181a2:	69eb      	ldr	r3, [r5, #28]
 80181a4:	b953      	cbnz	r3, 80181bc <rcl_wait+0x44>
 80181a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80181a8:	b943      	cbnz	r3, 80181bc <rcl_wait+0x44>
 80181aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80181ac:	b933      	cbnz	r3, 80181bc <rcl_wait+0x44>
 80181ae:	f240 3085 	movw	r0, #901	; 0x385
 80181b2:	b00d      	add	sp, #52	; 0x34
 80181b4:	ecbd 8b02 	vpop	{d8}
 80181b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181bc:	9b04      	ldr	r3, [sp, #16]
 80181be:	6c32      	ldr	r2, [r6, #64]	; 0x40
 80181c0:	2b01      	cmp	r3, #1
 80181c2:	9b05      	ldr	r3, [sp, #20]
 80181c4:	f173 0300 	sbcs.w	r3, r3, #0
 80181c8:	f2c0 80f8 	blt.w	80183bc <rcl_wait+0x244>
 80181cc:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 80181d0:	2a00      	cmp	r2, #0
 80181d2:	f000 810f 	beq.w	80183f4 <rcl_wait+0x27c>
 80181d6:	2400      	movs	r4, #0
 80181d8:	4613      	mov	r3, r2
 80181da:	f240 3921 	movw	r9, #801	; 0x321
 80181de:	4632      	mov	r2, r6
 80181e0:	46a2      	mov	sl, r4
 80181e2:	46a3      	mov	fp, r4
 80181e4:	ed9f 8b98 	vldr	d8, [pc, #608]	; 8018448 <rcl_wait+0x2d0>
 80181e8:	e014      	b.n	8018214 <rcl_wait+0x9c>
 80181ea:	2800      	cmp	r0, #0
 80181ec:	d1e1      	bne.n	80181b2 <rcl_wait+0x3a>
 80181ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80181f2:	4542      	cmp	r2, r8
 80181f4:	eb73 0107 	sbcs.w	r1, r3, r7
 80181f8:	da03      	bge.n	8018202 <rcl_wait+0x8a>
 80181fa:	4690      	mov	r8, r2
 80181fc:	461f      	mov	r7, r3
 80181fe:	f04f 0b01 	mov.w	fp, #1
 8018202:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8018204:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8018206:	3401      	adds	r4, #1
 8018208:	f14a 0a00 	adc.w	sl, sl, #0
 801820c:	429c      	cmp	r4, r3
 801820e:	f17a 0100 	sbcs.w	r1, sl, #0
 8018212:	d228      	bcs.n	8018266 <rcl_wait+0xee>
 8018214:	6928      	ldr	r0, [r5, #16]
 8018216:	a908      	add	r1, sp, #32
 8018218:	00a6      	lsls	r6, r4, #2
 801821a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801821e:	2800      	cmp	r0, #0
 8018220:	d0f1      	beq.n	8018206 <rcl_wait+0x8e>
 8018222:	68eb      	ldr	r3, [r5, #12]
 8018224:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8018228:	4423      	add	r3, r4
 801822a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801822e:	f1be 0f00 	cmp.w	lr, #0
 8018232:	d006      	beq.n	8018242 <rcl_wait+0xca>
 8018234:	6913      	ldr	r3, [r2, #16]
 8018236:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801823a:	3301      	adds	r3, #1
 801823c:	6113      	str	r3, [r2, #16]
 801823e:	692b      	ldr	r3, [r5, #16]
 8018240:	5998      	ldr	r0, [r3, r6]
 8018242:	ed8d 8b08 	vstr	d8, [sp, #32]
 8018246:	f7ff fa89 	bl	801775c <rcl_timer_get_time_until_next_call>
 801824a:	4548      	cmp	r0, r9
 801824c:	d1cd      	bne.n	80181ea <rcl_wait+0x72>
 801824e:	692b      	ldr	r3, [r5, #16]
 8018250:	2200      	movs	r2, #0
 8018252:	3401      	adds	r4, #1
 8018254:	519a      	str	r2, [r3, r6]
 8018256:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8018258:	f14a 0a00 	adc.w	sl, sl, #0
 801825c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 801825e:	429c      	cmp	r4, r3
 8018260:	f17a 0100 	sbcs.w	r1, sl, #0
 8018264:	d3d6      	bcc.n	8018214 <rcl_wait+0x9c>
 8018266:	4659      	mov	r1, fp
 8018268:	4616      	mov	r6, r2
 801826a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801826e:	4313      	orrs	r3, r2
 8018270:	f040 80b4 	bne.w	80183dc <rcl_wait+0x264>
 8018274:	2300      	movs	r3, #0
 8018276:	2200      	movs	r2, #0
 8018278:	460c      	mov	r4, r1
 801827a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801827e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018282:	ab08      	add	r3, sp, #32
 8018284:	9302      	str	r3, [sp, #8]
 8018286:	f106 0334 	add.w	r3, r6, #52	; 0x34
 801828a:	6bf2      	ldr	r2, [r6, #60]	; 0x3c
 801828c:	f106 0110 	add.w	r1, r6, #16
 8018290:	9300      	str	r3, [sp, #0]
 8018292:	1d30      	adds	r0, r6, #4
 8018294:	f106 031c 	add.w	r3, r6, #28
 8018298:	9201      	str	r2, [sp, #4]
 801829a:	f106 0228 	add.w	r2, r6, #40	; 0x28
 801829e:	f001 fb81 	bl	80199a4 <rmw_wait>
 80182a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80182a4:	4680      	mov	r8, r0
 80182a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80182a8:	b1e2      	cbz	r2, 80182e4 <rcl_wait+0x16c>
 80182aa:	f04f 0900 	mov.w	r9, #0
 80182ae:	464f      	mov	r7, r9
 80182b0:	692a      	ldr	r2, [r5, #16]
 80182b2:	f10d 011f 	add.w	r1, sp, #31
 80182b6:	ea4f 0689 	mov.w	r6, r9, lsl #2
 80182ba:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 80182be:	b160      	cbz	r0, 80182da <rcl_wait+0x162>
 80182c0:	f88d 701f 	strb.w	r7, [sp, #31]
 80182c4:	f7ff fa0e 	bl	80176e4 <rcl_timer_is_ready>
 80182c8:	2800      	cmp	r0, #0
 80182ca:	f47f af72 	bne.w	80181b2 <rcl_wait+0x3a>
 80182ce:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80182d2:	b90b      	cbnz	r3, 80182d8 <rcl_wait+0x160>
 80182d4:	692a      	ldr	r2, [r5, #16]
 80182d6:	5193      	str	r3, [r2, r6]
 80182d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80182da:	f109 0901 	add.w	r9, r9, #1
 80182de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80182e0:	454a      	cmp	r2, r9
 80182e2:	d8e5      	bhi.n	80182b0 <rcl_wait+0x138>
 80182e4:	f038 0002 	bics.w	r0, r8, #2
 80182e8:	d176      	bne.n	80183d8 <rcl_wait+0x260>
 80182ea:	686f      	ldr	r7, [r5, #4]
 80182ec:	b17f      	cbz	r7, 801830e <rcl_wait+0x196>
 80182ee:	4602      	mov	r2, r0
 80182f0:	e002      	b.n	80182f8 <rcl_wait+0x180>
 80182f2:	3201      	adds	r2, #1
 80182f4:	42ba      	cmp	r2, r7
 80182f6:	d00a      	beq.n	801830e <rcl_wait+0x196>
 80182f8:	6899      	ldr	r1, [r3, #8]
 80182fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80182fe:	2900      	cmp	r1, #0
 8018300:	d1f7      	bne.n	80182f2 <rcl_wait+0x17a>
 8018302:	682e      	ldr	r6, [r5, #0]
 8018304:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018308:	3201      	adds	r2, #1
 801830a:	42ba      	cmp	r2, r7
 801830c:	d1f4      	bne.n	80182f8 <rcl_wait+0x180>
 801830e:	68ef      	ldr	r7, [r5, #12]
 8018310:	b17f      	cbz	r7, 8018332 <rcl_wait+0x1ba>
 8018312:	2200      	movs	r2, #0
 8018314:	e002      	b.n	801831c <rcl_wait+0x1a4>
 8018316:	3201      	adds	r2, #1
 8018318:	42ba      	cmp	r2, r7
 801831a:	d00a      	beq.n	8018332 <rcl_wait+0x1ba>
 801831c:	6959      	ldr	r1, [r3, #20]
 801831e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018322:	2900      	cmp	r1, #0
 8018324:	d1f7      	bne.n	8018316 <rcl_wait+0x19e>
 8018326:	68ae      	ldr	r6, [r5, #8]
 8018328:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801832c:	3201      	adds	r2, #1
 801832e:	42ba      	cmp	r2, r7
 8018330:	d1f4      	bne.n	801831c <rcl_wait+0x1a4>
 8018332:	69ef      	ldr	r7, [r5, #28]
 8018334:	b17f      	cbz	r7, 8018356 <rcl_wait+0x1de>
 8018336:	2200      	movs	r2, #0
 8018338:	e002      	b.n	8018340 <rcl_wait+0x1c8>
 801833a:	3201      	adds	r2, #1
 801833c:	42ba      	cmp	r2, r7
 801833e:	d00a      	beq.n	8018356 <rcl_wait+0x1de>
 8018340:	6a19      	ldr	r1, [r3, #32]
 8018342:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8018346:	2900      	cmp	r1, #0
 8018348:	d1f7      	bne.n	801833a <rcl_wait+0x1c2>
 801834a:	69ae      	ldr	r6, [r5, #24]
 801834c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018350:	3201      	adds	r2, #1
 8018352:	42ba      	cmp	r2, r7
 8018354:	d1f4      	bne.n	8018340 <rcl_wait+0x1c8>
 8018356:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8018358:	b17f      	cbz	r7, 801837a <rcl_wait+0x202>
 801835a:	2200      	movs	r2, #0
 801835c:	e002      	b.n	8018364 <rcl_wait+0x1ec>
 801835e:	3201      	adds	r2, #1
 8018360:	42ba      	cmp	r2, r7
 8018362:	d00a      	beq.n	801837a <rcl_wait+0x202>
 8018364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8018366:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801836a:	2900      	cmp	r1, #0
 801836c:	d1f7      	bne.n	801835e <rcl_wait+0x1e6>
 801836e:	6a2e      	ldr	r6, [r5, #32]
 8018370:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018374:	3201      	adds	r2, #1
 8018376:	42ba      	cmp	r2, r7
 8018378:	d1f4      	bne.n	8018364 <rcl_wait+0x1ec>
 801837a:	6aef      	ldr	r7, [r5, #44]	; 0x2c
 801837c:	b17f      	cbz	r7, 801839e <rcl_wait+0x226>
 801837e:	2200      	movs	r2, #0
 8018380:	e002      	b.n	8018388 <rcl_wait+0x210>
 8018382:	3201      	adds	r2, #1
 8018384:	42ba      	cmp	r2, r7
 8018386:	d00a      	beq.n	801839e <rcl_wait+0x226>
 8018388:	6b99      	ldr	r1, [r3, #56]	; 0x38
 801838a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801838e:	2900      	cmp	r1, #0
 8018390:	d1f7      	bne.n	8018382 <rcl_wait+0x20a>
 8018392:	6aae      	ldr	r6, [r5, #40]	; 0x28
 8018394:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8018398:	3201      	adds	r2, #1
 801839a:	42ba      	cmp	r2, r7
 801839c:	d1f4      	bne.n	8018388 <rcl_wait+0x210>
 801839e:	f1b8 0f02 	cmp.w	r8, #2
 80183a2:	f47f af06 	bne.w	80181b2 <rcl_wait+0x3a>
 80183a6:	f084 0301 	eor.w	r3, r4, #1
 80183aa:	b2db      	uxtb	r3, r3
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	bf18      	it	ne
 80183b0:	2002      	movne	r0, #2
 80183b2:	b00d      	add	sp, #52	; 0x34
 80183b4:	ecbd 8b02 	vpop	{d8}
 80183b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183bc:	2a00      	cmp	r2, #0
 80183be:	d03a      	beq.n	8018436 <rcl_wait+0x2be>
 80183c0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80183c4:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 80183c8:	e705      	b.n	80181d6 <rcl_wait+0x5e>
 80183ca:	f44f 7061 	mov.w	r0, #900	; 0x384
 80183ce:	b00d      	add	sp, #52	; 0x34
 80183d0:	ecbd 8b02 	vpop	{d8}
 80183d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183d8:	2001      	movs	r0, #1
 80183da:	e6ea      	b.n	80181b2 <rcl_wait+0x3a>
 80183dc:	9b04      	ldr	r3, [sp, #16]
 80183de:	460c      	mov	r4, r1
 80183e0:	2b01      	cmp	r3, #1
 80183e2:	9b05      	ldr	r3, [sp, #20]
 80183e4:	f173 0300 	sbcs.w	r3, r3, #0
 80183e8:	bfa8      	it	ge
 80183ea:	f044 0401 	orrge.w	r4, r4, #1
 80183ee:	b914      	cbnz	r4, 80183f6 <rcl_wait+0x27e>
 80183f0:	4623      	mov	r3, r4
 80183f2:	e747      	b.n	8018284 <rcl_wait+0x10c>
 80183f4:	4611      	mov	r1, r2
 80183f6:	2f00      	cmp	r7, #0
 80183f8:	da02      	bge.n	8018400 <rcl_wait+0x288>
 80183fa:	f04f 0800 	mov.w	r8, #0
 80183fe:	4647      	mov	r7, r8
 8018400:	460c      	mov	r4, r1
 8018402:	4640      	mov	r0, r8
 8018404:	4639      	mov	r1, r7
 8018406:	a312      	add	r3, pc, #72	; (adr r3, 8018450 <rcl_wait+0x2d8>)
 8018408:	e9d3 2300 	ldrd	r2, r3, [r3]
 801840c:	f7e7 ff80 	bl	8000310 <__aeabi_ldivmod>
 8018410:	a30f      	add	r3, pc, #60	; (adr r3, 8018450 <rcl_wait+0x2d8>)
 8018412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018416:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801841a:	4640      	mov	r0, r8
 801841c:	4639      	mov	r1, r7
 801841e:	f7e7 ff77 	bl	8000310 <__aeabi_ldivmod>
 8018422:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8018426:	ab08      	add	r3, sp, #32
 8018428:	e72c      	b.n	8018284 <rcl_wait+0x10c>
 801842a:	200b      	movs	r0, #11
 801842c:	b00d      	add	sp, #52	; 0x34
 801842e:	ecbd 8b02 	vpop	{d8}
 8018432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018436:	4611      	mov	r1, r2
 8018438:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801843c:	f06f 4700 	mvn.w	r7, #2147483648	; 0x80000000
 8018440:	e713      	b.n	801826a <rcl_wait+0xf2>
 8018442:	bf00      	nop
 8018444:	f3af 8000 	nop.w
 8018448:	ffffffff 	.word	0xffffffff
 801844c:	7fffffff 	.word	0x7fffffff
 8018450:	3b9aca00 	.word	0x3b9aca00
 8018454:	00000000 	.word	0x00000000

08018458 <rcl_action_take_goal_response>:
 8018458:	2800      	cmp	r0, #0
 801845a:	d039      	beq.n	80184d0 <rcl_action_take_goal_response+0x78>
 801845c:	b570      	push	{r4, r5, r6, lr}
 801845e:	4604      	mov	r4, r0
 8018460:	6800      	ldr	r0, [r0, #0]
 8018462:	b380      	cbz	r0, 80184c6 <rcl_action_take_goal_response+0x6e>
 8018464:	460e      	mov	r6, r1
 8018466:	4615      	mov	r5, r2
 8018468:	f7fe fbc6 	bl	8016bf8 <rcl_client_is_valid>
 801846c:	b330      	cbz	r0, 80184bc <rcl_action_take_goal_response+0x64>
 801846e:	6820      	ldr	r0, [r4, #0]
 8018470:	3004      	adds	r0, #4
 8018472:	f7fe fbc1 	bl	8016bf8 <rcl_client_is_valid>
 8018476:	b308      	cbz	r0, 80184bc <rcl_action_take_goal_response+0x64>
 8018478:	6820      	ldr	r0, [r4, #0]
 801847a:	3008      	adds	r0, #8
 801847c:	f7fe fbbc 	bl	8016bf8 <rcl_client_is_valid>
 8018480:	b1e0      	cbz	r0, 80184bc <rcl_action_take_goal_response+0x64>
 8018482:	6820      	ldr	r0, [r4, #0]
 8018484:	300c      	adds	r0, #12
 8018486:	f7f7 fa17 	bl	800f8b8 <rcl_subscription_is_valid>
 801848a:	b1b8      	cbz	r0, 80184bc <rcl_action_take_goal_response+0x64>
 801848c:	6820      	ldr	r0, [r4, #0]
 801848e:	3010      	adds	r0, #16
 8018490:	f7f7 fa12 	bl	800f8b8 <rcl_subscription_is_valid>
 8018494:	b190      	cbz	r0, 80184bc <rcl_action_take_goal_response+0x64>
 8018496:	b1cd      	cbz	r5, 80184cc <rcl_action_take_goal_response+0x74>
 8018498:	b1c6      	cbz	r6, 80184cc <rcl_action_take_goal_response+0x74>
 801849a:	462a      	mov	r2, r5
 801849c:	4631      	mov	r1, r6
 801849e:	6820      	ldr	r0, [r4, #0]
 80184a0:	f7fe fb62 	bl	8016b68 <rcl_take_response>
 80184a4:	b148      	cbz	r0, 80184ba <rcl_action_take_goal_response+0x62>
 80184a6:	280a      	cmp	r0, #10
 80184a8:	d007      	beq.n	80184ba <rcl_action_take_goal_response+0x62>
 80184aa:	f240 12f5 	movw	r2, #501	; 0x1f5
 80184ae:	f640 0337 	movw	r3, #2103	; 0x837
 80184b2:	4290      	cmp	r0, r2
 80184b4:	bf0c      	ite	eq
 80184b6:	4618      	moveq	r0, r3
 80184b8:	2001      	movne	r0, #1
 80184ba:	bd70      	pop	{r4, r5, r6, pc}
 80184bc:	f7f8 fa1c 	bl	80108f8 <rcutils_reset_error>
 80184c0:	f640 0036 	movw	r0, #2102	; 0x836
 80184c4:	bd70      	pop	{r4, r5, r6, pc}
 80184c6:	f640 0036 	movw	r0, #2102	; 0x836
 80184ca:	bd70      	pop	{r4, r5, r6, pc}
 80184cc:	200b      	movs	r0, #11
 80184ce:	bd70      	pop	{r4, r5, r6, pc}
 80184d0:	f640 0036 	movw	r0, #2102	; 0x836
 80184d4:	4770      	bx	lr
 80184d6:	bf00      	nop

080184d8 <rcl_action_send_result_request>:
 80184d8:	b390      	cbz	r0, 8018540 <rcl_action_send_result_request+0x68>
 80184da:	b570      	push	{r4, r5, r6, lr}
 80184dc:	4604      	mov	r4, r0
 80184de:	6800      	ldr	r0, [r0, #0]
 80184e0:	b348      	cbz	r0, 8018536 <rcl_action_send_result_request+0x5e>
 80184e2:	460e      	mov	r6, r1
 80184e4:	4615      	mov	r5, r2
 80184e6:	f7fe fb87 	bl	8016bf8 <rcl_client_is_valid>
 80184ea:	b1f8      	cbz	r0, 801852c <rcl_action_send_result_request+0x54>
 80184ec:	6820      	ldr	r0, [r4, #0]
 80184ee:	3004      	adds	r0, #4
 80184f0:	f7fe fb82 	bl	8016bf8 <rcl_client_is_valid>
 80184f4:	b1d0      	cbz	r0, 801852c <rcl_action_send_result_request+0x54>
 80184f6:	6820      	ldr	r0, [r4, #0]
 80184f8:	3008      	adds	r0, #8
 80184fa:	f7fe fb7d 	bl	8016bf8 <rcl_client_is_valid>
 80184fe:	b1a8      	cbz	r0, 801852c <rcl_action_send_result_request+0x54>
 8018500:	6820      	ldr	r0, [r4, #0]
 8018502:	300c      	adds	r0, #12
 8018504:	f7f7 f9d8 	bl	800f8b8 <rcl_subscription_is_valid>
 8018508:	b180      	cbz	r0, 801852c <rcl_action_send_result_request+0x54>
 801850a:	6820      	ldr	r0, [r4, #0]
 801850c:	3010      	adds	r0, #16
 801850e:	f7f7 f9d3 	bl	800f8b8 <rcl_subscription_is_valid>
 8018512:	b158      	cbz	r0, 801852c <rcl_action_send_result_request+0x54>
 8018514:	b195      	cbz	r5, 801853c <rcl_action_send_result_request+0x64>
 8018516:	b18e      	cbz	r6, 801853c <rcl_action_send_result_request+0x64>
 8018518:	6820      	ldr	r0, [r4, #0]
 801851a:	462a      	mov	r2, r5
 801851c:	4631      	mov	r1, r6
 801851e:	3008      	adds	r0, #8
 8018520:	f7fe faea 	bl	8016af8 <rcl_send_request>
 8018524:	3800      	subs	r0, #0
 8018526:	bf18      	it	ne
 8018528:	2001      	movne	r0, #1
 801852a:	bd70      	pop	{r4, r5, r6, pc}
 801852c:	f7f8 f9e4 	bl	80108f8 <rcutils_reset_error>
 8018530:	f640 0036 	movw	r0, #2102	; 0x836
 8018534:	bd70      	pop	{r4, r5, r6, pc}
 8018536:	f640 0036 	movw	r0, #2102	; 0x836
 801853a:	bd70      	pop	{r4, r5, r6, pc}
 801853c:	200b      	movs	r0, #11
 801853e:	bd70      	pop	{r4, r5, r6, pc}
 8018540:	f640 0036 	movw	r0, #2102	; 0x836
 8018544:	4770      	bx	lr
 8018546:	bf00      	nop

08018548 <rcl_action_take_result_response>:
 8018548:	2800      	cmp	r0, #0
 801854a:	d03a      	beq.n	80185c2 <rcl_action_take_result_response+0x7a>
 801854c:	b570      	push	{r4, r5, r6, lr}
 801854e:	4604      	mov	r4, r0
 8018550:	6800      	ldr	r0, [r0, #0]
 8018552:	b388      	cbz	r0, 80185b8 <rcl_action_take_result_response+0x70>
 8018554:	460e      	mov	r6, r1
 8018556:	4615      	mov	r5, r2
 8018558:	f7fe fb4e 	bl	8016bf8 <rcl_client_is_valid>
 801855c:	b338      	cbz	r0, 80185ae <rcl_action_take_result_response+0x66>
 801855e:	6820      	ldr	r0, [r4, #0]
 8018560:	3004      	adds	r0, #4
 8018562:	f7fe fb49 	bl	8016bf8 <rcl_client_is_valid>
 8018566:	b310      	cbz	r0, 80185ae <rcl_action_take_result_response+0x66>
 8018568:	6820      	ldr	r0, [r4, #0]
 801856a:	3008      	adds	r0, #8
 801856c:	f7fe fb44 	bl	8016bf8 <rcl_client_is_valid>
 8018570:	b1e8      	cbz	r0, 80185ae <rcl_action_take_result_response+0x66>
 8018572:	6820      	ldr	r0, [r4, #0]
 8018574:	300c      	adds	r0, #12
 8018576:	f7f7 f99f 	bl	800f8b8 <rcl_subscription_is_valid>
 801857a:	b1c0      	cbz	r0, 80185ae <rcl_action_take_result_response+0x66>
 801857c:	6820      	ldr	r0, [r4, #0]
 801857e:	3010      	adds	r0, #16
 8018580:	f7f7 f99a 	bl	800f8b8 <rcl_subscription_is_valid>
 8018584:	b198      	cbz	r0, 80185ae <rcl_action_take_result_response+0x66>
 8018586:	b1d5      	cbz	r5, 80185be <rcl_action_take_result_response+0x76>
 8018588:	b1ce      	cbz	r6, 80185be <rcl_action_take_result_response+0x76>
 801858a:	6820      	ldr	r0, [r4, #0]
 801858c:	462a      	mov	r2, r5
 801858e:	4631      	mov	r1, r6
 8018590:	3008      	adds	r0, #8
 8018592:	f7fe fae9 	bl	8016b68 <rcl_take_response>
 8018596:	b148      	cbz	r0, 80185ac <rcl_action_take_result_response+0x64>
 8018598:	280a      	cmp	r0, #10
 801859a:	d007      	beq.n	80185ac <rcl_action_take_result_response+0x64>
 801859c:	f240 12f5 	movw	r2, #501	; 0x1f5
 80185a0:	f640 0337 	movw	r3, #2103	; 0x837
 80185a4:	4290      	cmp	r0, r2
 80185a6:	bf0c      	ite	eq
 80185a8:	4618      	moveq	r0, r3
 80185aa:	2001      	movne	r0, #1
 80185ac:	bd70      	pop	{r4, r5, r6, pc}
 80185ae:	f7f8 f9a3 	bl	80108f8 <rcutils_reset_error>
 80185b2:	f640 0036 	movw	r0, #2102	; 0x836
 80185b6:	bd70      	pop	{r4, r5, r6, pc}
 80185b8:	f640 0036 	movw	r0, #2102	; 0x836
 80185bc:	bd70      	pop	{r4, r5, r6, pc}
 80185be:	200b      	movs	r0, #11
 80185c0:	bd70      	pop	{r4, r5, r6, pc}
 80185c2:	f640 0036 	movw	r0, #2102	; 0x836
 80185c6:	4770      	bx	lr

080185c8 <rcl_action_take_cancel_response>:
 80185c8:	2800      	cmp	r0, #0
 80185ca:	d03a      	beq.n	8018642 <rcl_action_take_cancel_response+0x7a>
 80185cc:	b570      	push	{r4, r5, r6, lr}
 80185ce:	4604      	mov	r4, r0
 80185d0:	6800      	ldr	r0, [r0, #0]
 80185d2:	b388      	cbz	r0, 8018638 <rcl_action_take_cancel_response+0x70>
 80185d4:	460e      	mov	r6, r1
 80185d6:	4615      	mov	r5, r2
 80185d8:	f7fe fb0e 	bl	8016bf8 <rcl_client_is_valid>
 80185dc:	b338      	cbz	r0, 801862e <rcl_action_take_cancel_response+0x66>
 80185de:	6820      	ldr	r0, [r4, #0]
 80185e0:	3004      	adds	r0, #4
 80185e2:	f7fe fb09 	bl	8016bf8 <rcl_client_is_valid>
 80185e6:	b310      	cbz	r0, 801862e <rcl_action_take_cancel_response+0x66>
 80185e8:	6820      	ldr	r0, [r4, #0]
 80185ea:	3008      	adds	r0, #8
 80185ec:	f7fe fb04 	bl	8016bf8 <rcl_client_is_valid>
 80185f0:	b1e8      	cbz	r0, 801862e <rcl_action_take_cancel_response+0x66>
 80185f2:	6820      	ldr	r0, [r4, #0]
 80185f4:	300c      	adds	r0, #12
 80185f6:	f7f7 f95f 	bl	800f8b8 <rcl_subscription_is_valid>
 80185fa:	b1c0      	cbz	r0, 801862e <rcl_action_take_cancel_response+0x66>
 80185fc:	6820      	ldr	r0, [r4, #0]
 80185fe:	3010      	adds	r0, #16
 8018600:	f7f7 f95a 	bl	800f8b8 <rcl_subscription_is_valid>
 8018604:	b198      	cbz	r0, 801862e <rcl_action_take_cancel_response+0x66>
 8018606:	b1d5      	cbz	r5, 801863e <rcl_action_take_cancel_response+0x76>
 8018608:	b1ce      	cbz	r6, 801863e <rcl_action_take_cancel_response+0x76>
 801860a:	6820      	ldr	r0, [r4, #0]
 801860c:	462a      	mov	r2, r5
 801860e:	4631      	mov	r1, r6
 8018610:	3004      	adds	r0, #4
 8018612:	f7fe faa9 	bl	8016b68 <rcl_take_response>
 8018616:	b148      	cbz	r0, 801862c <rcl_action_take_cancel_response+0x64>
 8018618:	280a      	cmp	r0, #10
 801861a:	d007      	beq.n	801862c <rcl_action_take_cancel_response+0x64>
 801861c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8018620:	f640 0337 	movw	r3, #2103	; 0x837
 8018624:	4290      	cmp	r0, r2
 8018626:	bf0c      	ite	eq
 8018628:	4618      	moveq	r0, r3
 801862a:	2001      	movne	r0, #1
 801862c:	bd70      	pop	{r4, r5, r6, pc}
 801862e:	f7f8 f963 	bl	80108f8 <rcutils_reset_error>
 8018632:	f640 0036 	movw	r0, #2102	; 0x836
 8018636:	bd70      	pop	{r4, r5, r6, pc}
 8018638:	f640 0036 	movw	r0, #2102	; 0x836
 801863c:	bd70      	pop	{r4, r5, r6, pc}
 801863e:	200b      	movs	r0, #11
 8018640:	bd70      	pop	{r4, r5, r6, pc}
 8018642:	f640 0036 	movw	r0, #2102	; 0x836
 8018646:	4770      	bx	lr

08018648 <rcl_action_take_feedback>:
 8018648:	2800      	cmp	r0, #0
 801864a:	d038      	beq.n	80186be <rcl_action_take_feedback+0x76>
 801864c:	b530      	push	{r4, r5, lr}
 801864e:	4604      	mov	r4, r0
 8018650:	6800      	ldr	r0, [r0, #0]
 8018652:	b091      	sub	sp, #68	; 0x44
 8018654:	b378      	cbz	r0, 80186b6 <rcl_action_take_feedback+0x6e>
 8018656:	460d      	mov	r5, r1
 8018658:	f7fe face 	bl	8016bf8 <rcl_client_is_valid>
 801865c:	b328      	cbz	r0, 80186aa <rcl_action_take_feedback+0x62>
 801865e:	6820      	ldr	r0, [r4, #0]
 8018660:	3004      	adds	r0, #4
 8018662:	f7fe fac9 	bl	8016bf8 <rcl_client_is_valid>
 8018666:	b300      	cbz	r0, 80186aa <rcl_action_take_feedback+0x62>
 8018668:	6820      	ldr	r0, [r4, #0]
 801866a:	3008      	adds	r0, #8
 801866c:	f7fe fac4 	bl	8016bf8 <rcl_client_is_valid>
 8018670:	b1d8      	cbz	r0, 80186aa <rcl_action_take_feedback+0x62>
 8018672:	6820      	ldr	r0, [r4, #0]
 8018674:	300c      	adds	r0, #12
 8018676:	f7f7 f91f 	bl	800f8b8 <rcl_subscription_is_valid>
 801867a:	b1b0      	cbz	r0, 80186aa <rcl_action_take_feedback+0x62>
 801867c:	6820      	ldr	r0, [r4, #0]
 801867e:	3010      	adds	r0, #16
 8018680:	f7f7 f91a 	bl	800f8b8 <rcl_subscription_is_valid>
 8018684:	b188      	cbz	r0, 80186aa <rcl_action_take_feedback+0x62>
 8018686:	b1ed      	cbz	r5, 80186c4 <rcl_action_take_feedback+0x7c>
 8018688:	6820      	ldr	r0, [r4, #0]
 801868a:	2300      	movs	r3, #0
 801868c:	466a      	mov	r2, sp
 801868e:	4629      	mov	r1, r5
 8018690:	300c      	adds	r0, #12
 8018692:	f7f7 f8b5 	bl	800f800 <rcl_take>
 8018696:	b160      	cbz	r0, 80186b2 <rcl_action_take_feedback+0x6a>
 8018698:	f240 1391 	movw	r3, #401	; 0x191
 801869c:	4298      	cmp	r0, r3
 801869e:	d014      	beq.n	80186ca <rcl_action_take_feedback+0x82>
 80186a0:	280a      	cmp	r0, #10
 80186a2:	bf18      	it	ne
 80186a4:	2001      	movne	r0, #1
 80186a6:	b011      	add	sp, #68	; 0x44
 80186a8:	bd30      	pop	{r4, r5, pc}
 80186aa:	f7f8 f925 	bl	80108f8 <rcutils_reset_error>
 80186ae:	f640 0036 	movw	r0, #2102	; 0x836
 80186b2:	b011      	add	sp, #68	; 0x44
 80186b4:	bd30      	pop	{r4, r5, pc}
 80186b6:	f640 0036 	movw	r0, #2102	; 0x836
 80186ba:	b011      	add	sp, #68	; 0x44
 80186bc:	bd30      	pop	{r4, r5, pc}
 80186be:	f640 0036 	movw	r0, #2102	; 0x836
 80186c2:	4770      	bx	lr
 80186c4:	200b      	movs	r0, #11
 80186c6:	b011      	add	sp, #68	; 0x44
 80186c8:	bd30      	pop	{r4, r5, pc}
 80186ca:	f640 0037 	movw	r0, #2103	; 0x837
 80186ce:	e7f0      	b.n	80186b2 <rcl_action_take_feedback+0x6a>

080186d0 <rcl_action_wait_set_add_action_client>:
 80186d0:	2800      	cmp	r0, #0
 80186d2:	d048      	beq.n	8018766 <rcl_action_wait_set_add_action_client+0x96>
 80186d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186d6:	460c      	mov	r4, r1
 80186d8:	2900      	cmp	r1, #0
 80186da:	d03c      	beq.n	8018756 <rcl_action_wait_set_add_action_client+0x86>
 80186dc:	4605      	mov	r5, r0
 80186de:	6808      	ldr	r0, [r1, #0]
 80186e0:	2800      	cmp	r0, #0
 80186e2:	d038      	beq.n	8018756 <rcl_action_wait_set_add_action_client+0x86>
 80186e4:	4617      	mov	r7, r2
 80186e6:	461e      	mov	r6, r3
 80186e8:	f7fe fa86 	bl	8016bf8 <rcl_client_is_valid>
 80186ec:	b3b0      	cbz	r0, 801875c <rcl_action_wait_set_add_action_client+0x8c>
 80186ee:	6820      	ldr	r0, [r4, #0]
 80186f0:	3004      	adds	r0, #4
 80186f2:	f7fe fa81 	bl	8016bf8 <rcl_client_is_valid>
 80186f6:	b388      	cbz	r0, 801875c <rcl_action_wait_set_add_action_client+0x8c>
 80186f8:	6820      	ldr	r0, [r4, #0]
 80186fa:	3008      	adds	r0, #8
 80186fc:	f7fe fa7c 	bl	8016bf8 <rcl_client_is_valid>
 8018700:	b360      	cbz	r0, 801875c <rcl_action_wait_set_add_action_client+0x8c>
 8018702:	6820      	ldr	r0, [r4, #0]
 8018704:	300c      	adds	r0, #12
 8018706:	f7f7 f8d7 	bl	800f8b8 <rcl_subscription_is_valid>
 801870a:	b338      	cbz	r0, 801875c <rcl_action_wait_set_add_action_client+0x8c>
 801870c:	6820      	ldr	r0, [r4, #0]
 801870e:	3010      	adds	r0, #16
 8018710:	f7f7 f8d2 	bl	800f8b8 <rcl_subscription_is_valid>
 8018714:	b310      	cbz	r0, 801875c <rcl_action_wait_set_add_action_client+0x8c>
 8018716:	6821      	ldr	r1, [r4, #0]
 8018718:	4628      	mov	r0, r5
 801871a:	f501 72e2 	add.w	r2, r1, #452	; 0x1c4
 801871e:	f7ff fcd1 	bl	80180c4 <rcl_wait_set_add_client>
 8018722:	b9b8      	cbnz	r0, 8018754 <rcl_action_wait_set_add_action_client+0x84>
 8018724:	6821      	ldr	r1, [r4, #0]
 8018726:	4628      	mov	r0, r5
 8018728:	f501 72e4 	add.w	r2, r1, #456	; 0x1c8
 801872c:	3104      	adds	r1, #4
 801872e:	f7ff fcc9 	bl	80180c4 <rcl_wait_set_add_client>
 8018732:	b978      	cbnz	r0, 8018754 <rcl_action_wait_set_add_action_client+0x84>
 8018734:	6821      	ldr	r1, [r4, #0]
 8018736:	4628      	mov	r0, r5
 8018738:	f501 72e6 	add.w	r2, r1, #460	; 0x1cc
 801873c:	3108      	adds	r1, #8
 801873e:	f7ff fcc1 	bl	80180c4 <rcl_wait_set_add_client>
 8018742:	b938      	cbnz	r0, 8018754 <rcl_action_wait_set_add_action_client+0x84>
 8018744:	6821      	ldr	r1, [r4, #0]
 8018746:	4628      	mov	r0, r5
 8018748:	f501 72e8 	add.w	r2, r1, #464	; 0x1d0
 801874c:	310c      	adds	r1, #12
 801874e:	f7ff f969 	bl	8017a24 <rcl_wait_set_add_subscription>
 8018752:	b158      	cbz	r0, 801876c <rcl_action_wait_set_add_action_client+0x9c>
 8018754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018756:	f640 0036 	movw	r0, #2102	; 0x836
 801875a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801875c:	f7f8 f8cc 	bl	80108f8 <rcutils_reset_error>
 8018760:	f640 0036 	movw	r0, #2102	; 0x836
 8018764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018766:	f44f 7061 	mov.w	r0, #900	; 0x384
 801876a:	4770      	bx	lr
 801876c:	6821      	ldr	r1, [r4, #0]
 801876e:	4628      	mov	r0, r5
 8018770:	f501 72ea 	add.w	r2, r1, #468	; 0x1d4
 8018774:	3110      	adds	r1, #16
 8018776:	f7ff f955 	bl	8017a24 <rcl_wait_set_add_subscription>
 801877a:	2800      	cmp	r0, #0
 801877c:	d1ea      	bne.n	8018754 <rcl_action_wait_set_add_action_client+0x84>
 801877e:	b11f      	cbz	r7, 8018788 <rcl_action_wait_set_add_action_client+0xb8>
 8018780:	6823      	ldr	r3, [r4, #0]
 8018782:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8018786:	603b      	str	r3, [r7, #0]
 8018788:	2e00      	cmp	r6, #0
 801878a:	d0e3      	beq.n	8018754 <rcl_action_wait_set_add_action_client+0x84>
 801878c:	6823      	ldr	r3, [r4, #0]
 801878e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8018792:	6033      	str	r3, [r6, #0]
 8018794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018796:	bf00      	nop

08018798 <rcl_action_client_wait_set_get_entities_ready>:
 8018798:	2800      	cmp	r0, #0
 801879a:	d050      	beq.n	801883e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 801879c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80187a0:	460c      	mov	r4, r1
 80187a2:	2900      	cmp	r1, #0
 80187a4:	d03e      	beq.n	8018824 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80187a6:	4605      	mov	r5, r0
 80187a8:	6808      	ldr	r0, [r1, #0]
 80187aa:	2800      	cmp	r0, #0
 80187ac:	d03a      	beq.n	8018824 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 80187ae:	4616      	mov	r6, r2
 80187b0:	461f      	mov	r7, r3
 80187b2:	f7fe fa21 	bl	8016bf8 <rcl_client_is_valid>
 80187b6:	2800      	cmp	r0, #0
 80187b8:	d038      	beq.n	801882c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80187ba:	6820      	ldr	r0, [r4, #0]
 80187bc:	3004      	adds	r0, #4
 80187be:	f7fe fa1b 	bl	8016bf8 <rcl_client_is_valid>
 80187c2:	2800      	cmp	r0, #0
 80187c4:	d032      	beq.n	801882c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80187c6:	6820      	ldr	r0, [r4, #0]
 80187c8:	3008      	adds	r0, #8
 80187ca:	f7fe fa15 	bl	8016bf8 <rcl_client_is_valid>
 80187ce:	b368      	cbz	r0, 801882c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80187d0:	6820      	ldr	r0, [r4, #0]
 80187d2:	300c      	adds	r0, #12
 80187d4:	f7f7 f870 	bl	800f8b8 <rcl_subscription_is_valid>
 80187d8:	b340      	cbz	r0, 801882c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80187da:	6820      	ldr	r0, [r4, #0]
 80187dc:	3010      	adds	r0, #16
 80187de:	f7f7 f86b 	bl	800f8b8 <rcl_subscription_is_valid>
 80187e2:	b318      	cbz	r0, 801882c <rcl_action_client_wait_set_get_entities_ready+0x94>
 80187e4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80187e8:	2a00      	cmp	r2, #0
 80187ea:	bf18      	it	ne
 80187ec:	2b00      	cmpne	r3, #0
 80187ee:	9b08      	ldr	r3, [sp, #32]
 80187f0:	bf0c      	ite	eq
 80187f2:	2101      	moveq	r1, #1
 80187f4:	2100      	movne	r1, #0
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	bf08      	it	eq
 80187fa:	f041 0101 	orreq.w	r1, r1, #1
 80187fe:	2f00      	cmp	r7, #0
 8018800:	bf08      	it	eq
 8018802:	f041 0101 	orreq.w	r1, r1, #1
 8018806:	b9b9      	cbnz	r1, 8018838 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8018808:	b1b6      	cbz	r6, 8018838 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 801880a:	6823      	ldr	r3, [r4, #0]
 801880c:	686c      	ldr	r4, [r5, #4]
 801880e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	; 0x1d0
 8018812:	428a      	cmp	r2, r1
 8018814:	4610      	mov	r0, r2
 8018816:	bf38      	it	cc
 8018818:	4608      	movcc	r0, r1
 801881a:	4284      	cmp	r4, r0
 801881c:	d812      	bhi.n	8018844 <rcl_action_client_wait_set_get_entities_ready+0xac>
 801881e:	2001      	movs	r0, #1
 8018820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018824:	f640 0036 	movw	r0, #2102	; 0x836
 8018828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801882c:	f7f8 f864 	bl	80108f8 <rcutils_reset_error>
 8018830:	f640 0036 	movw	r0, #2102	; 0x836
 8018834:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018838:	200b      	movs	r0, #11
 801883a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801883e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018842:	4770      	bx	lr
 8018844:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	; 0x1c4
 8018848:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	; 0x1cc
 801884c:	45f0      	cmp	r8, lr
 801884e:	4640      	mov	r0, r8
 8018850:	69ec      	ldr	r4, [r5, #28]
 8018852:	bf38      	it	cc
 8018854:	4670      	movcc	r0, lr
 8018856:	4560      	cmp	r0, ip
 8018858:	bf38      	it	cc
 801885a:	4660      	movcc	r0, ip
 801885c:	4284      	cmp	r4, r0
 801885e:	d9de      	bls.n	801881e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8018860:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8018864:	682d      	ldr	r5, [r5, #0]
 8018866:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 801886a:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 801886e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8018872:	1a18      	subs	r0, r3, r0
 8018874:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8018878:	f103 0c0c 	add.w	ip, r3, #12
 801887c:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8018880:	fab0 f080 	clz	r0, r0
 8018884:	eba5 050c 	sub.w	r5, r5, ip
 8018888:	0940      	lsrs	r0, r0, #5
 801888a:	fab5 f585 	clz	r5, r5
 801888e:	096d      	lsrs	r5, r5, #5
 8018890:	7035      	strb	r5, [r6, #0]
 8018892:	f103 0510 	add.w	r5, r3, #16
 8018896:	1b64      	subs	r4, r4, r5
 8018898:	9d08      	ldr	r5, [sp, #32]
 801889a:	fab4 f484 	clz	r4, r4
 801889e:	0964      	lsrs	r4, r4, #5
 80188a0:	703c      	strb	r4, [r7, #0]
 80188a2:	1d1c      	adds	r4, r3, #4
 80188a4:	3308      	adds	r3, #8
 80188a6:	7028      	strb	r0, [r5, #0]
 80188a8:	1b09      	subs	r1, r1, r4
 80188aa:	2000      	movs	r0, #0
 80188ac:	1ad3      	subs	r3, r2, r3
 80188ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188b0:	fab1 f181 	clz	r1, r1
 80188b4:	fab3 f383 	clz	r3, r3
 80188b8:	0949      	lsrs	r1, r1, #5
 80188ba:	095b      	lsrs	r3, r3, #5
 80188bc:	7011      	strb	r1, [r2, #0]
 80188be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80188c0:	7013      	strb	r3, [r2, #0]
 80188c2:	e7b1      	b.n	8018828 <rcl_action_client_wait_set_get_entities_ready+0x90>

080188c4 <rcl_action_take_goal_request>:
 80188c4:	2800      	cmp	r0, #0
 80188c6:	d039      	beq.n	801893c <rcl_action_take_goal_request+0x78>
 80188c8:	b570      	push	{r4, r5, r6, lr}
 80188ca:	4604      	mov	r4, r0
 80188cc:	6800      	ldr	r0, [r0, #0]
 80188ce:	b380      	cbz	r0, 8018932 <rcl_action_take_goal_request+0x6e>
 80188d0:	460e      	mov	r6, r1
 80188d2:	4615      	mov	r5, r2
 80188d4:	f7f6 fea8 	bl	800f628 <rcl_service_is_valid>
 80188d8:	b330      	cbz	r0, 8018928 <rcl_action_take_goal_request+0x64>
 80188da:	6820      	ldr	r0, [r4, #0]
 80188dc:	3004      	adds	r0, #4
 80188de:	f7f6 fea3 	bl	800f628 <rcl_service_is_valid>
 80188e2:	b308      	cbz	r0, 8018928 <rcl_action_take_goal_request+0x64>
 80188e4:	6820      	ldr	r0, [r4, #0]
 80188e6:	3008      	adds	r0, #8
 80188e8:	f7f6 fe9e 	bl	800f628 <rcl_service_is_valid>
 80188ec:	b1e0      	cbz	r0, 8018928 <rcl_action_take_goal_request+0x64>
 80188ee:	6820      	ldr	r0, [r4, #0]
 80188f0:	300c      	adds	r0, #12
 80188f2:	f7f6 fd5d 	bl	800f3b0 <rcl_publisher_is_valid>
 80188f6:	b1b8      	cbz	r0, 8018928 <rcl_action_take_goal_request+0x64>
 80188f8:	6820      	ldr	r0, [r4, #0]
 80188fa:	3010      	adds	r0, #16
 80188fc:	f7f6 fd58 	bl	800f3b0 <rcl_publisher_is_valid>
 8018900:	b190      	cbz	r0, 8018928 <rcl_action_take_goal_request+0x64>
 8018902:	b1cd      	cbz	r5, 8018938 <rcl_action_take_goal_request+0x74>
 8018904:	b1c6      	cbz	r6, 8018938 <rcl_action_take_goal_request+0x74>
 8018906:	462a      	mov	r2, r5
 8018908:	4631      	mov	r1, r6
 801890a:	6820      	ldr	r0, [r4, #0]
 801890c:	f7f6 fe34 	bl	800f578 <rcl_take_request>
 8018910:	b148      	cbz	r0, 8018926 <rcl_action_take_goal_request+0x62>
 8018912:	280a      	cmp	r0, #10
 8018914:	d007      	beq.n	8018926 <rcl_action_take_goal_request+0x62>
 8018916:	f240 2259 	movw	r2, #601	; 0x259
 801891a:	f640 0399 	movw	r3, #2201	; 0x899
 801891e:	4290      	cmp	r0, r2
 8018920:	bf0c      	ite	eq
 8018922:	4618      	moveq	r0, r3
 8018924:	2001      	movne	r0, #1
 8018926:	bd70      	pop	{r4, r5, r6, pc}
 8018928:	f7f7 ffe6 	bl	80108f8 <rcutils_reset_error>
 801892c:	f640 0098 	movw	r0, #2200	; 0x898
 8018930:	bd70      	pop	{r4, r5, r6, pc}
 8018932:	f640 0098 	movw	r0, #2200	; 0x898
 8018936:	bd70      	pop	{r4, r5, r6, pc}
 8018938:	200b      	movs	r0, #11
 801893a:	bd70      	pop	{r4, r5, r6, pc}
 801893c:	f640 0098 	movw	r0, #2200	; 0x898
 8018940:	4770      	bx	lr
 8018942:	bf00      	nop

08018944 <rcl_action_send_goal_response>:
 8018944:	b388      	cbz	r0, 80189aa <rcl_action_send_goal_response+0x66>
 8018946:	b570      	push	{r4, r5, r6, lr}
 8018948:	4604      	mov	r4, r0
 801894a:	6800      	ldr	r0, [r0, #0]
 801894c:	b340      	cbz	r0, 80189a0 <rcl_action_send_goal_response+0x5c>
 801894e:	460e      	mov	r6, r1
 8018950:	4615      	mov	r5, r2
 8018952:	f7f6 fe69 	bl	800f628 <rcl_service_is_valid>
 8018956:	b1f0      	cbz	r0, 8018996 <rcl_action_send_goal_response+0x52>
 8018958:	6820      	ldr	r0, [r4, #0]
 801895a:	3004      	adds	r0, #4
 801895c:	f7f6 fe64 	bl	800f628 <rcl_service_is_valid>
 8018960:	b1c8      	cbz	r0, 8018996 <rcl_action_send_goal_response+0x52>
 8018962:	6820      	ldr	r0, [r4, #0]
 8018964:	3008      	adds	r0, #8
 8018966:	f7f6 fe5f 	bl	800f628 <rcl_service_is_valid>
 801896a:	b1a0      	cbz	r0, 8018996 <rcl_action_send_goal_response+0x52>
 801896c:	6820      	ldr	r0, [r4, #0]
 801896e:	300c      	adds	r0, #12
 8018970:	f7f6 fd1e 	bl	800f3b0 <rcl_publisher_is_valid>
 8018974:	b178      	cbz	r0, 8018996 <rcl_action_send_goal_response+0x52>
 8018976:	6820      	ldr	r0, [r4, #0]
 8018978:	3010      	adds	r0, #16
 801897a:	f7f6 fd19 	bl	800f3b0 <rcl_publisher_is_valid>
 801897e:	b150      	cbz	r0, 8018996 <rcl_action_send_goal_response+0x52>
 8018980:	b18d      	cbz	r5, 80189a6 <rcl_action_send_goal_response+0x62>
 8018982:	b186      	cbz	r6, 80189a6 <rcl_action_send_goal_response+0x62>
 8018984:	462a      	mov	r2, r5
 8018986:	4631      	mov	r1, r6
 8018988:	6820      	ldr	r0, [r4, #0]
 801898a:	f7f6 fe35 	bl	800f5f8 <rcl_send_response>
 801898e:	3800      	subs	r0, #0
 8018990:	bf18      	it	ne
 8018992:	2001      	movne	r0, #1
 8018994:	bd70      	pop	{r4, r5, r6, pc}
 8018996:	f7f7 ffaf 	bl	80108f8 <rcutils_reset_error>
 801899a:	f640 0098 	movw	r0, #2200	; 0x898
 801899e:	bd70      	pop	{r4, r5, r6, pc}
 80189a0:	f640 0098 	movw	r0, #2200	; 0x898
 80189a4:	bd70      	pop	{r4, r5, r6, pc}
 80189a6:	200b      	movs	r0, #11
 80189a8:	bd70      	pop	{r4, r5, r6, pc}
 80189aa:	f640 0098 	movw	r0, #2200	; 0x898
 80189ae:	4770      	bx	lr

080189b0 <rcl_action_take_result_request>:
 80189b0:	2800      	cmp	r0, #0
 80189b2:	d03a      	beq.n	8018a2a <rcl_action_take_result_request+0x7a>
 80189b4:	b570      	push	{r4, r5, r6, lr}
 80189b6:	4604      	mov	r4, r0
 80189b8:	6800      	ldr	r0, [r0, #0]
 80189ba:	b388      	cbz	r0, 8018a20 <rcl_action_take_result_request+0x70>
 80189bc:	460e      	mov	r6, r1
 80189be:	4615      	mov	r5, r2
 80189c0:	f7f6 fe32 	bl	800f628 <rcl_service_is_valid>
 80189c4:	b338      	cbz	r0, 8018a16 <rcl_action_take_result_request+0x66>
 80189c6:	6820      	ldr	r0, [r4, #0]
 80189c8:	3004      	adds	r0, #4
 80189ca:	f7f6 fe2d 	bl	800f628 <rcl_service_is_valid>
 80189ce:	b310      	cbz	r0, 8018a16 <rcl_action_take_result_request+0x66>
 80189d0:	6820      	ldr	r0, [r4, #0]
 80189d2:	3008      	adds	r0, #8
 80189d4:	f7f6 fe28 	bl	800f628 <rcl_service_is_valid>
 80189d8:	b1e8      	cbz	r0, 8018a16 <rcl_action_take_result_request+0x66>
 80189da:	6820      	ldr	r0, [r4, #0]
 80189dc:	300c      	adds	r0, #12
 80189de:	f7f6 fce7 	bl	800f3b0 <rcl_publisher_is_valid>
 80189e2:	b1c0      	cbz	r0, 8018a16 <rcl_action_take_result_request+0x66>
 80189e4:	6820      	ldr	r0, [r4, #0]
 80189e6:	3010      	adds	r0, #16
 80189e8:	f7f6 fce2 	bl	800f3b0 <rcl_publisher_is_valid>
 80189ec:	b198      	cbz	r0, 8018a16 <rcl_action_take_result_request+0x66>
 80189ee:	b1d5      	cbz	r5, 8018a26 <rcl_action_take_result_request+0x76>
 80189f0:	b1ce      	cbz	r6, 8018a26 <rcl_action_take_result_request+0x76>
 80189f2:	6820      	ldr	r0, [r4, #0]
 80189f4:	462a      	mov	r2, r5
 80189f6:	4631      	mov	r1, r6
 80189f8:	3008      	adds	r0, #8
 80189fa:	f7f6 fdbd 	bl	800f578 <rcl_take_request>
 80189fe:	b148      	cbz	r0, 8018a14 <rcl_action_take_result_request+0x64>
 8018a00:	280a      	cmp	r0, #10
 8018a02:	d007      	beq.n	8018a14 <rcl_action_take_result_request+0x64>
 8018a04:	f240 2259 	movw	r2, #601	; 0x259
 8018a08:	f640 0399 	movw	r3, #2201	; 0x899
 8018a0c:	4290      	cmp	r0, r2
 8018a0e:	bf0c      	ite	eq
 8018a10:	4618      	moveq	r0, r3
 8018a12:	2001      	movne	r0, #1
 8018a14:	bd70      	pop	{r4, r5, r6, pc}
 8018a16:	f7f7 ff6f 	bl	80108f8 <rcutils_reset_error>
 8018a1a:	f640 0098 	movw	r0, #2200	; 0x898
 8018a1e:	bd70      	pop	{r4, r5, r6, pc}
 8018a20:	f640 0098 	movw	r0, #2200	; 0x898
 8018a24:	bd70      	pop	{r4, r5, r6, pc}
 8018a26:	200b      	movs	r0, #11
 8018a28:	bd70      	pop	{r4, r5, r6, pc}
 8018a2a:	f640 0098 	movw	r0, #2200	; 0x898
 8018a2e:	4770      	bx	lr

08018a30 <rcl_action_take_cancel_request>:
 8018a30:	2800      	cmp	r0, #0
 8018a32:	d03a      	beq.n	8018aaa <rcl_action_take_cancel_request+0x7a>
 8018a34:	b570      	push	{r4, r5, r6, lr}
 8018a36:	4604      	mov	r4, r0
 8018a38:	6800      	ldr	r0, [r0, #0]
 8018a3a:	b388      	cbz	r0, 8018aa0 <rcl_action_take_cancel_request+0x70>
 8018a3c:	460e      	mov	r6, r1
 8018a3e:	4615      	mov	r5, r2
 8018a40:	f7f6 fdf2 	bl	800f628 <rcl_service_is_valid>
 8018a44:	b338      	cbz	r0, 8018a96 <rcl_action_take_cancel_request+0x66>
 8018a46:	6820      	ldr	r0, [r4, #0]
 8018a48:	3004      	adds	r0, #4
 8018a4a:	f7f6 fded 	bl	800f628 <rcl_service_is_valid>
 8018a4e:	b310      	cbz	r0, 8018a96 <rcl_action_take_cancel_request+0x66>
 8018a50:	6820      	ldr	r0, [r4, #0]
 8018a52:	3008      	adds	r0, #8
 8018a54:	f7f6 fde8 	bl	800f628 <rcl_service_is_valid>
 8018a58:	b1e8      	cbz	r0, 8018a96 <rcl_action_take_cancel_request+0x66>
 8018a5a:	6820      	ldr	r0, [r4, #0]
 8018a5c:	300c      	adds	r0, #12
 8018a5e:	f7f6 fca7 	bl	800f3b0 <rcl_publisher_is_valid>
 8018a62:	b1c0      	cbz	r0, 8018a96 <rcl_action_take_cancel_request+0x66>
 8018a64:	6820      	ldr	r0, [r4, #0]
 8018a66:	3010      	adds	r0, #16
 8018a68:	f7f6 fca2 	bl	800f3b0 <rcl_publisher_is_valid>
 8018a6c:	b198      	cbz	r0, 8018a96 <rcl_action_take_cancel_request+0x66>
 8018a6e:	b1d5      	cbz	r5, 8018aa6 <rcl_action_take_cancel_request+0x76>
 8018a70:	b1ce      	cbz	r6, 8018aa6 <rcl_action_take_cancel_request+0x76>
 8018a72:	6820      	ldr	r0, [r4, #0]
 8018a74:	462a      	mov	r2, r5
 8018a76:	4631      	mov	r1, r6
 8018a78:	3004      	adds	r0, #4
 8018a7a:	f7f6 fd7d 	bl	800f578 <rcl_take_request>
 8018a7e:	b148      	cbz	r0, 8018a94 <rcl_action_take_cancel_request+0x64>
 8018a80:	280a      	cmp	r0, #10
 8018a82:	d007      	beq.n	8018a94 <rcl_action_take_cancel_request+0x64>
 8018a84:	f240 2259 	movw	r2, #601	; 0x259
 8018a88:	f640 0399 	movw	r3, #2201	; 0x899
 8018a8c:	4290      	cmp	r0, r2
 8018a8e:	bf0c      	ite	eq
 8018a90:	4618      	moveq	r0, r3
 8018a92:	2001      	movne	r0, #1
 8018a94:	bd70      	pop	{r4, r5, r6, pc}
 8018a96:	f7f7 ff2f 	bl	80108f8 <rcutils_reset_error>
 8018a9a:	f640 0098 	movw	r0, #2200	; 0x898
 8018a9e:	bd70      	pop	{r4, r5, r6, pc}
 8018aa0:	f640 0098 	movw	r0, #2200	; 0x898
 8018aa4:	bd70      	pop	{r4, r5, r6, pc}
 8018aa6:	200b      	movs	r0, #11
 8018aa8:	bd70      	pop	{r4, r5, r6, pc}
 8018aaa:	f640 0098 	movw	r0, #2200	; 0x898
 8018aae:	4770      	bx	lr

08018ab0 <rcl_action_send_cancel_response>:
 8018ab0:	b390      	cbz	r0, 8018b18 <rcl_action_send_cancel_response+0x68>
 8018ab2:	b570      	push	{r4, r5, r6, lr}
 8018ab4:	4604      	mov	r4, r0
 8018ab6:	6800      	ldr	r0, [r0, #0]
 8018ab8:	b348      	cbz	r0, 8018b0e <rcl_action_send_cancel_response+0x5e>
 8018aba:	460e      	mov	r6, r1
 8018abc:	4615      	mov	r5, r2
 8018abe:	f7f6 fdb3 	bl	800f628 <rcl_service_is_valid>
 8018ac2:	b1f8      	cbz	r0, 8018b04 <rcl_action_send_cancel_response+0x54>
 8018ac4:	6820      	ldr	r0, [r4, #0]
 8018ac6:	3004      	adds	r0, #4
 8018ac8:	f7f6 fdae 	bl	800f628 <rcl_service_is_valid>
 8018acc:	b1d0      	cbz	r0, 8018b04 <rcl_action_send_cancel_response+0x54>
 8018ace:	6820      	ldr	r0, [r4, #0]
 8018ad0:	3008      	adds	r0, #8
 8018ad2:	f7f6 fda9 	bl	800f628 <rcl_service_is_valid>
 8018ad6:	b1a8      	cbz	r0, 8018b04 <rcl_action_send_cancel_response+0x54>
 8018ad8:	6820      	ldr	r0, [r4, #0]
 8018ada:	300c      	adds	r0, #12
 8018adc:	f7f6 fc68 	bl	800f3b0 <rcl_publisher_is_valid>
 8018ae0:	b180      	cbz	r0, 8018b04 <rcl_action_send_cancel_response+0x54>
 8018ae2:	6820      	ldr	r0, [r4, #0]
 8018ae4:	3010      	adds	r0, #16
 8018ae6:	f7f6 fc63 	bl	800f3b0 <rcl_publisher_is_valid>
 8018aea:	b158      	cbz	r0, 8018b04 <rcl_action_send_cancel_response+0x54>
 8018aec:	b195      	cbz	r5, 8018b14 <rcl_action_send_cancel_response+0x64>
 8018aee:	b18e      	cbz	r6, 8018b14 <rcl_action_send_cancel_response+0x64>
 8018af0:	6820      	ldr	r0, [r4, #0]
 8018af2:	462a      	mov	r2, r5
 8018af4:	4631      	mov	r1, r6
 8018af6:	3004      	adds	r0, #4
 8018af8:	f7f6 fd7e 	bl	800f5f8 <rcl_send_response>
 8018afc:	3800      	subs	r0, #0
 8018afe:	bf18      	it	ne
 8018b00:	2001      	movne	r0, #1
 8018b02:	bd70      	pop	{r4, r5, r6, pc}
 8018b04:	f7f7 fef8 	bl	80108f8 <rcutils_reset_error>
 8018b08:	f640 0098 	movw	r0, #2200	; 0x898
 8018b0c:	bd70      	pop	{r4, r5, r6, pc}
 8018b0e:	f640 0098 	movw	r0, #2200	; 0x898
 8018b12:	bd70      	pop	{r4, r5, r6, pc}
 8018b14:	200b      	movs	r0, #11
 8018b16:	bd70      	pop	{r4, r5, r6, pc}
 8018b18:	f640 0098 	movw	r0, #2200	; 0x898
 8018b1c:	4770      	bx	lr
 8018b1e:	bf00      	nop

08018b20 <rcl_action_wait_set_add_action_server>:
 8018b20:	2800      	cmp	r0, #0
 8018b22:	d04d      	beq.n	8018bc0 <rcl_action_wait_set_add_action_server+0xa0>
 8018b24:	b570      	push	{r4, r5, r6, lr}
 8018b26:	460c      	mov	r4, r1
 8018b28:	b159      	cbz	r1, 8018b42 <rcl_action_wait_set_add_action_server+0x22>
 8018b2a:	4605      	mov	r5, r0
 8018b2c:	6808      	ldr	r0, [r1, #0]
 8018b2e:	b140      	cbz	r0, 8018b42 <rcl_action_wait_set_add_action_server+0x22>
 8018b30:	4616      	mov	r6, r2
 8018b32:	f7f6 fd79 	bl	800f628 <rcl_service_is_valid>
 8018b36:	b120      	cbz	r0, 8018b42 <rcl_action_wait_set_add_action_server+0x22>
 8018b38:	6820      	ldr	r0, [r4, #0]
 8018b3a:	3004      	adds	r0, #4
 8018b3c:	f7f6 fd74 	bl	800f628 <rcl_service_is_valid>
 8018b40:	b910      	cbnz	r0, 8018b48 <rcl_action_wait_set_add_action_server+0x28>
 8018b42:	f640 0098 	movw	r0, #2200	; 0x898
 8018b46:	bd70      	pop	{r4, r5, r6, pc}
 8018b48:	6820      	ldr	r0, [r4, #0]
 8018b4a:	3008      	adds	r0, #8
 8018b4c:	f7f6 fd6c 	bl	800f628 <rcl_service_is_valid>
 8018b50:	2800      	cmp	r0, #0
 8018b52:	d0f6      	beq.n	8018b42 <rcl_action_wait_set_add_action_server+0x22>
 8018b54:	6820      	ldr	r0, [r4, #0]
 8018b56:	300c      	adds	r0, #12
 8018b58:	f7f6 fc42 	bl	800f3e0 <rcl_publisher_is_valid_except_context>
 8018b5c:	2800      	cmp	r0, #0
 8018b5e:	d0f0      	beq.n	8018b42 <rcl_action_wait_set_add_action_server+0x22>
 8018b60:	6820      	ldr	r0, [r4, #0]
 8018b62:	3010      	adds	r0, #16
 8018b64:	f7f6 fc3c 	bl	800f3e0 <rcl_publisher_is_valid_except_context>
 8018b68:	2800      	cmp	r0, #0
 8018b6a:	d0ea      	beq.n	8018b42 <rcl_action_wait_set_add_action_server+0x22>
 8018b6c:	6821      	ldr	r1, [r4, #0]
 8018b6e:	4628      	mov	r0, r5
 8018b70:	f501 72ee 	add.w	r2, r1, #476	; 0x1dc
 8018b74:	f7ff fad2 	bl	801811c <rcl_wait_set_add_service>
 8018b78:	2800      	cmp	r0, #0
 8018b7a:	d1e4      	bne.n	8018b46 <rcl_action_wait_set_add_action_server+0x26>
 8018b7c:	6821      	ldr	r1, [r4, #0]
 8018b7e:	4628      	mov	r0, r5
 8018b80:	f501 72f0 	add.w	r2, r1, #480	; 0x1e0
 8018b84:	3104      	adds	r1, #4
 8018b86:	f7ff fac9 	bl	801811c <rcl_wait_set_add_service>
 8018b8a:	2800      	cmp	r0, #0
 8018b8c:	d1db      	bne.n	8018b46 <rcl_action_wait_set_add_action_server+0x26>
 8018b8e:	6821      	ldr	r1, [r4, #0]
 8018b90:	4628      	mov	r0, r5
 8018b92:	f501 72f2 	add.w	r2, r1, #484	; 0x1e4
 8018b96:	3108      	adds	r1, #8
 8018b98:	f7ff fac0 	bl	801811c <rcl_wait_set_add_service>
 8018b9c:	2800      	cmp	r0, #0
 8018b9e:	d1d2      	bne.n	8018b46 <rcl_action_wait_set_add_action_server+0x26>
 8018ba0:	6821      	ldr	r1, [r4, #0]
 8018ba2:	4628      	mov	r0, r5
 8018ba4:	f501 72f4 	add.w	r2, r1, #488	; 0x1e8
 8018ba8:	3114      	adds	r1, #20
 8018baa:	f7ff fa5b 	bl	8018064 <rcl_wait_set_add_timer>
 8018bae:	2800      	cmp	r0, #0
 8018bb0:	d1c9      	bne.n	8018b46 <rcl_action_wait_set_add_action_server+0x26>
 8018bb2:	2e00      	cmp	r6, #0
 8018bb4:	d0c7      	beq.n	8018b46 <rcl_action_wait_set_add_action_server+0x26>
 8018bb6:	6823      	ldr	r3, [r4, #0]
 8018bb8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8018bbc:	6033      	str	r3, [r6, #0]
 8018bbe:	bd70      	pop	{r4, r5, r6, pc}
 8018bc0:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018bc4:	4770      	bx	lr
 8018bc6:	bf00      	nop

08018bc8 <rcl_action_server_wait_set_get_entities_ready>:
 8018bc8:	2800      	cmp	r0, #0
 8018bca:	d067      	beq.n	8018c9c <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8018bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018bd0:	460c      	mov	r4, r1
 8018bd2:	b161      	cbz	r1, 8018bee <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018bd4:	4605      	mov	r5, r0
 8018bd6:	6808      	ldr	r0, [r1, #0]
 8018bd8:	b148      	cbz	r0, 8018bee <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018bda:	4616      	mov	r6, r2
 8018bdc:	4698      	mov	r8, r3
 8018bde:	f7f6 fd23 	bl	800f628 <rcl_service_is_valid>
 8018be2:	b120      	cbz	r0, 8018bee <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018be4:	6820      	ldr	r0, [r4, #0]
 8018be6:	3004      	adds	r0, #4
 8018be8:	f7f6 fd1e 	bl	800f628 <rcl_service_is_valid>
 8018bec:	b918      	cbnz	r0, 8018bf6 <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8018bee:	f640 0098 	movw	r0, #2200	; 0x898
 8018bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018bf6:	6820      	ldr	r0, [r4, #0]
 8018bf8:	3008      	adds	r0, #8
 8018bfa:	f7f6 fd15 	bl	800f628 <rcl_service_is_valid>
 8018bfe:	2800      	cmp	r0, #0
 8018c00:	d0f5      	beq.n	8018bee <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018c02:	6820      	ldr	r0, [r4, #0]
 8018c04:	300c      	adds	r0, #12
 8018c06:	f7f6 fbeb 	bl	800f3e0 <rcl_publisher_is_valid_except_context>
 8018c0a:	2800      	cmp	r0, #0
 8018c0c:	d0ef      	beq.n	8018bee <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018c0e:	6820      	ldr	r0, [r4, #0]
 8018c10:	3010      	adds	r0, #16
 8018c12:	f7f6 fbe5 	bl	800f3e0 <rcl_publisher_is_valid_except_context>
 8018c16:	2800      	cmp	r0, #0
 8018c18:	d0e9      	beq.n	8018bee <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018c1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018c1e:	2a00      	cmp	r2, #0
 8018c20:	bf18      	it	ne
 8018c22:	2b00      	cmpne	r3, #0
 8018c24:	bf0c      	ite	eq
 8018c26:	2101      	moveq	r1, #1
 8018c28:	2100      	movne	r1, #0
 8018c2a:	f1b8 0f00 	cmp.w	r8, #0
 8018c2e:	bf08      	it	eq
 8018c30:	f041 0101 	orreq.w	r1, r1, #1
 8018c34:	bba9      	cbnz	r1, 8018ca2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8018c36:	b3a6      	cbz	r6, 8018ca2 <rcl_action_server_wait_set_get_entities_ready+0xda>
 8018c38:	6821      	ldr	r1, [r4, #0]
 8018c3a:	2000      	movs	r0, #0
 8018c3c:	692c      	ldr	r4, [r5, #16]
 8018c3e:	f8d1 21e8 	ldr.w	r2, [r1, #488]	; 0x1e8
 8018c42:	6a2f      	ldr	r7, [r5, #32]
 8018c44:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018c48:	f8d1 41dc 	ldr.w	r4, [r1, #476]	; 0x1dc
 8018c4c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	; 0x1e0
 8018c50:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 8018c54:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 8018c58:	1a64      	subs	r4, r4, r1
 8018c5a:	f8d1 31e4 	ldr.w	r3, [r1, #484]	; 0x1e4
 8018c5e:	fab4 f484 	clz	r4, r4
 8018c62:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8018c66:	0964      	lsrs	r4, r4, #5
 8018c68:	7034      	strb	r4, [r6, #0]
 8018c6a:	1d0c      	adds	r4, r1, #4
 8018c6c:	1b2c      	subs	r4, r5, r4
 8018c6e:	fab4 f484 	clz	r4, r4
 8018c72:	0964      	lsrs	r4, r4, #5
 8018c74:	f888 4000 	strb.w	r4, [r8]
 8018c78:	f101 0408 	add.w	r4, r1, #8
 8018c7c:	1b1b      	subs	r3, r3, r4
 8018c7e:	9c06      	ldr	r4, [sp, #24]
 8018c80:	fab3 f383 	clz	r3, r3
 8018c84:	095b      	lsrs	r3, r3, #5
 8018c86:	7023      	strb	r3, [r4, #0]
 8018c88:	f101 0314 	add.w	r3, r1, #20
 8018c8c:	1ad3      	subs	r3, r2, r3
 8018c8e:	9a07      	ldr	r2, [sp, #28]
 8018c90:	fab3 f383 	clz	r3, r3
 8018c94:	095b      	lsrs	r3, r3, #5
 8018c96:	7013      	strb	r3, [r2, #0]
 8018c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018c9c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8018ca0:	4770      	bx	lr
 8018ca2:	200b      	movs	r0, #11
 8018ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ca8 <_execute_event_handler>:
 8018ca8:	2002      	movs	r0, #2
 8018caa:	4770      	bx	lr

08018cac <_cancel_goal_event_handler>:
 8018cac:	2003      	movs	r0, #3
 8018cae:	4770      	bx	lr

08018cb0 <_succeed_event_handler>:
 8018cb0:	2004      	movs	r0, #4
 8018cb2:	4770      	bx	lr

08018cb4 <_abort_event_handler>:
 8018cb4:	2006      	movs	r0, #6
 8018cb6:	4770      	bx	lr

08018cb8 <_canceled_event_handler>:
 8018cb8:	2005      	movs	r0, #5
 8018cba:	4770      	bx	lr

08018cbc <rcl_action_transition_goal_state>:
 8018cbc:	b2c2      	uxtb	r2, r0
 8018cbe:	2a06      	cmp	r2, #6
 8018cc0:	d810      	bhi.n	8018ce4 <rcl_action_transition_goal_state+0x28>
 8018cc2:	2904      	cmp	r1, #4
 8018cc4:	d80e      	bhi.n	8018ce4 <rcl_action_transition_goal_state+0x28>
 8018cc6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8018cca:	b410      	push	{r4}
 8018ccc:	1853      	adds	r3, r2, r1
 8018cce:	4c06      	ldr	r4, [pc, #24]	; (8018ce8 <rcl_action_transition_goal_state+0x2c>)
 8018cd0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018cd4:	b113      	cbz	r3, 8018cdc <rcl_action_transition_goal_state+0x20>
 8018cd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018cda:	4718      	bx	r3
 8018cdc:	2000      	movs	r0, #0
 8018cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018ce2:	4770      	bx	lr
 8018ce4:	2000      	movs	r0, #0
 8018ce6:	4770      	bx	lr
 8018ce8:	0801d944 	.word	0x0801d944

08018cec <rcl_action_get_zero_initialized_cancel_response>:
 8018cec:	b510      	push	{r4, lr}
 8018cee:	4c07      	ldr	r4, [pc, #28]	; (8018d0c <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8018cf0:	4686      	mov	lr, r0
 8018cf2:	4684      	mov	ip, r0
 8018cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018cf6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018cfc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018d00:	6823      	ldr	r3, [r4, #0]
 8018d02:	4670      	mov	r0, lr
 8018d04:	f8cc 3000 	str.w	r3, [ip]
 8018d08:	bd10      	pop	{r4, pc}
 8018d0a:	bf00      	nop
 8018d0c:	0801d9d0 	.word	0x0801d9d0

08018d10 <rclc_action_send_result_request>:
 8018d10:	b1d0      	cbz	r0, 8018d48 <rclc_action_send_result_request+0x38>
 8018d12:	4684      	mov	ip, r0
 8018d14:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8018d18:	b500      	push	{lr}
 8018d1a:	b087      	sub	sp, #28
 8018d1c:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8018d20:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018d24:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8018d28:	f10d 0e08 	add.w	lr, sp, #8
 8018d2c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018d30:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8018d34:	f10c 0240 	add.w	r2, ip, #64	; 0x40
 8018d38:	a902      	add	r1, sp, #8
 8018d3a:	3010      	adds	r0, #16
 8018d3c:	f7ff fbcc 	bl	80184d8 <rcl_action_send_result_request>
 8018d40:	b920      	cbnz	r0, 8018d4c <rclc_action_send_result_request+0x3c>
 8018d42:	b007      	add	sp, #28
 8018d44:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d48:	200b      	movs	r0, #11
 8018d4a:	4770      	bx	lr
 8018d4c:	9001      	str	r0, [sp, #4]
 8018d4e:	f7f7 fdd3 	bl	80108f8 <rcutils_reset_error>
 8018d52:	9801      	ldr	r0, [sp, #4]
 8018d54:	b007      	add	sp, #28
 8018d56:	f85d fb04 	ldr.w	pc, [sp], #4
 8018d5a:	bf00      	nop

08018d5c <rclc_action_take_goal_handle>:
 8018d5c:	b160      	cbz	r0, 8018d78 <rclc_action_take_goal_handle+0x1c>
 8018d5e:	6883      	ldr	r3, [r0, #8]
 8018d60:	b143      	cbz	r3, 8018d74 <rclc_action_take_goal_handle+0x18>
 8018d62:	6819      	ldr	r1, [r3, #0]
 8018d64:	2200      	movs	r2, #0
 8018d66:	6081      	str	r1, [r0, #8]
 8018d68:	721a      	strb	r2, [r3, #8]
 8018d6a:	68c1      	ldr	r1, [r0, #12]
 8018d6c:	621a      	str	r2, [r3, #32]
 8018d6e:	849a      	strh	r2, [r3, #36]	; 0x24
 8018d70:	6019      	str	r1, [r3, #0]
 8018d72:	60c3      	str	r3, [r0, #12]
 8018d74:	4618      	mov	r0, r3
 8018d76:	4770      	bx	lr
 8018d78:	4603      	mov	r3, r0
 8018d7a:	e7fb      	b.n	8018d74 <rclc_action_take_goal_handle+0x18>

08018d7c <rclc_action_remove_used_goal_handle>:
 8018d7c:	b180      	cbz	r0, 8018da0 <rclc_action_remove_used_goal_handle+0x24>
 8018d7e:	b179      	cbz	r1, 8018da0 <rclc_action_remove_used_goal_handle+0x24>
 8018d80:	68c3      	ldr	r3, [r0, #12]
 8018d82:	4299      	cmp	r1, r3
 8018d84:	d00d      	beq.n	8018da2 <rclc_action_remove_used_goal_handle+0x26>
 8018d86:	b12b      	cbz	r3, 8018d94 <rclc_action_remove_used_goal_handle+0x18>
 8018d88:	681a      	ldr	r2, [r3, #0]
 8018d8a:	4291      	cmp	r1, r2
 8018d8c:	d003      	beq.n	8018d96 <rclc_action_remove_used_goal_handle+0x1a>
 8018d8e:	4613      	mov	r3, r2
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d1f9      	bne.n	8018d88 <rclc_action_remove_used_goal_handle+0xc>
 8018d94:	4770      	bx	lr
 8018d96:	680a      	ldr	r2, [r1, #0]
 8018d98:	601a      	str	r2, [r3, #0]
 8018d9a:	6883      	ldr	r3, [r0, #8]
 8018d9c:	600b      	str	r3, [r1, #0]
 8018d9e:	6081      	str	r1, [r0, #8]
 8018da0:	4770      	bx	lr
 8018da2:	680b      	ldr	r3, [r1, #0]
 8018da4:	60c3      	str	r3, [r0, #12]
 8018da6:	e7f8      	b.n	8018d9a <rclc_action_remove_used_goal_handle+0x1e>

08018da8 <rclc_action_find_goal_handle_by_uuid>:
 8018da8:	b538      	push	{r3, r4, r5, lr}
 8018daa:	b181      	cbz	r1, 8018dce <rclc_action_find_goal_handle_by_uuid+0x26>
 8018dac:	b178      	cbz	r0, 8018dce <rclc_action_find_goal_handle_by_uuid+0x26>
 8018dae:	68c4      	ldr	r4, [r0, #12]
 8018db0:	460d      	mov	r5, r1
 8018db2:	b914      	cbnz	r4, 8018dba <rclc_action_find_goal_handle_by_uuid+0x12>
 8018db4:	e009      	b.n	8018dca <rclc_action_find_goal_handle_by_uuid+0x22>
 8018db6:	6824      	ldr	r4, [r4, #0]
 8018db8:	b13c      	cbz	r4, 8018dca <rclc_action_find_goal_handle_by_uuid+0x22>
 8018dba:	f104 0009 	add.w	r0, r4, #9
 8018dbe:	2210      	movs	r2, #16
 8018dc0:	4629      	mov	r1, r5
 8018dc2:	f002 fd49 	bl	801b858 <memcmp>
 8018dc6:	2800      	cmp	r0, #0
 8018dc8:	d1f5      	bne.n	8018db6 <rclc_action_find_goal_handle_by_uuid+0xe>
 8018dca:	4620      	mov	r0, r4
 8018dcc:	bd38      	pop	{r3, r4, r5, pc}
 8018dce:	2400      	movs	r4, #0
 8018dd0:	4620      	mov	r0, r4
 8018dd2:	bd38      	pop	{r3, r4, r5, pc}

08018dd4 <rclc_action_find_first_handle_by_status>:
 8018dd4:	b140      	cbz	r0, 8018de8 <rclc_action_find_first_handle_by_status+0x14>
 8018dd6:	68c0      	ldr	r0, [r0, #12]
 8018dd8:	b910      	cbnz	r0, 8018de0 <rclc_action_find_first_handle_by_status+0xc>
 8018dda:	e005      	b.n	8018de8 <rclc_action_find_first_handle_by_status+0x14>
 8018ddc:	6800      	ldr	r0, [r0, #0]
 8018dde:	b118      	cbz	r0, 8018de8 <rclc_action_find_first_handle_by_status+0x14>
 8018de0:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018de4:	428b      	cmp	r3, r1
 8018de6:	d1f9      	bne.n	8018ddc <rclc_action_find_first_handle_by_status+0x8>
 8018de8:	4770      	bx	lr
 8018dea:	bf00      	nop

08018dec <rclc_action_find_first_terminated_handle>:
 8018dec:	b140      	cbz	r0, 8018e00 <rclc_action_find_first_terminated_handle+0x14>
 8018dee:	68c0      	ldr	r0, [r0, #12]
 8018df0:	b910      	cbnz	r0, 8018df8 <rclc_action_find_first_terminated_handle+0xc>
 8018df2:	e005      	b.n	8018e00 <rclc_action_find_first_terminated_handle+0x14>
 8018df4:	6800      	ldr	r0, [r0, #0]
 8018df6:	b118      	cbz	r0, 8018e00 <rclc_action_find_first_terminated_handle+0x14>
 8018df8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018dfc:	2b03      	cmp	r3, #3
 8018dfe:	ddf9      	ble.n	8018df4 <rclc_action_find_first_terminated_handle+0x8>
 8018e00:	4770      	bx	lr
 8018e02:	bf00      	nop

08018e04 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018e04:	b170      	cbz	r0, 8018e24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018e06:	68c0      	ldr	r0, [r0, #12]
 8018e08:	b160      	cbz	r0, 8018e24 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8018e0a:	b410      	push	{r4}
 8018e0c:	e001      	b.n	8018e12 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018e0e:	6800      	ldr	r0, [r0, #0]
 8018e10:	b128      	cbz	r0, 8018e1e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018e12:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	; 0x28
 8018e16:	4299      	cmp	r1, r3
 8018e18:	bf08      	it	eq
 8018e1a:	4294      	cmpeq	r4, r2
 8018e1c:	d1f7      	bne.n	8018e0e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e22:	4770      	bx	lr
 8018e24:	4770      	bx	lr
 8018e26:	bf00      	nop

08018e28 <rclc_action_find_handle_by_result_request_sequence_number>:
 8018e28:	b170      	cbz	r0, 8018e48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018e2a:	68c0      	ldr	r0, [r0, #12]
 8018e2c:	b160      	cbz	r0, 8018e48 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018e2e:	b410      	push	{r4}
 8018e30:	e001      	b.n	8018e36 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018e32:	6800      	ldr	r0, [r0, #0]
 8018e34:	b128      	cbz	r0, 8018e42 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8018e36:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	; 0x40
 8018e3a:	4299      	cmp	r1, r3
 8018e3c:	bf08      	it	eq
 8018e3e:	4294      	cmpeq	r4, r2
 8018e40:	d1f7      	bne.n	8018e32 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018e42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e46:	4770      	bx	lr
 8018e48:	4770      	bx	lr
 8018e4a:	bf00      	nop

08018e4c <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8018e4c:	b170      	cbz	r0, 8018e6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018e4e:	68c0      	ldr	r0, [r0, #12]
 8018e50:	b160      	cbz	r0, 8018e6c <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8018e52:	b410      	push	{r4}
 8018e54:	e001      	b.n	8018e5a <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8018e56:	6800      	ldr	r0, [r0, #0]
 8018e58:	b128      	cbz	r0, 8018e66 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8018e5a:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	; 0x58
 8018e5e:	4299      	cmp	r1, r3
 8018e60:	bf08      	it	eq
 8018e62:	4294      	cmpeq	r4, r2
 8018e64:	d1f7      	bne.n	8018e56 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8018e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e6a:	4770      	bx	lr
 8018e6c:	4770      	bx	lr
 8018e6e:	bf00      	nop

08018e70 <rclc_action_find_first_handle_with_goal_response>:
 8018e70:	b140      	cbz	r0, 8018e84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018e72:	68c0      	ldr	r0, [r0, #12]
 8018e74:	b910      	cbnz	r0, 8018e7c <rclc_action_find_first_handle_with_goal_response+0xc>
 8018e76:	e005      	b.n	8018e84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018e78:	6800      	ldr	r0, [r0, #0]
 8018e7a:	b118      	cbz	r0, 8018e84 <rclc_action_find_first_handle_with_goal_response+0x14>
 8018e7c:	f890 3020 	ldrb.w	r3, [r0, #32]
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	d0f9      	beq.n	8018e78 <rclc_action_find_first_handle_with_goal_response+0x8>
 8018e84:	4770      	bx	lr
 8018e86:	bf00      	nop

08018e88 <rclc_action_find_first_handle_with_result_response>:
 8018e88:	b140      	cbz	r0, 8018e9c <rclc_action_find_first_handle_with_result_response+0x14>
 8018e8a:	68c0      	ldr	r0, [r0, #12]
 8018e8c:	b910      	cbnz	r0, 8018e94 <rclc_action_find_first_handle_with_result_response+0xc>
 8018e8e:	e005      	b.n	8018e9c <rclc_action_find_first_handle_with_result_response+0x14>
 8018e90:	6800      	ldr	r0, [r0, #0]
 8018e92:	b118      	cbz	r0, 8018e9c <rclc_action_find_first_handle_with_result_response+0x14>
 8018e94:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d0f9      	beq.n	8018e90 <rclc_action_find_first_handle_with_result_response+0x8>
 8018e9c:	4770      	bx	lr
 8018e9e:	bf00      	nop

08018ea0 <rclc_action_server_response_goal_request>:
 8018ea0:	b198      	cbz	r0, 8018eca <rclc_action_server_response_goal_request+0x2a>
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	460b      	mov	r3, r1
 8018ea6:	f100 0128 	add.w	r1, r0, #40	; 0x28
 8018eaa:	b510      	push	{r4, lr}
 8018eac:	6844      	ldr	r4, [r0, #4]
 8018eae:	b086      	sub	sp, #24
 8018eb0:	f104 0010 	add.w	r0, r4, #16
 8018eb4:	9205      	str	r2, [sp, #20]
 8018eb6:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8018eba:	aa03      	add	r2, sp, #12
 8018ebc:	f88d 300c 	strb.w	r3, [sp, #12]
 8018ec0:	f7ff fd40 	bl	8018944 <rcl_action_send_goal_response>
 8018ec4:	b918      	cbnz	r0, 8018ece <rclc_action_server_response_goal_request+0x2e>
 8018ec6:	b006      	add	sp, #24
 8018ec8:	bd10      	pop	{r4, pc}
 8018eca:	200b      	movs	r0, #11
 8018ecc:	4770      	bx	lr
 8018ece:	9001      	str	r0, [sp, #4]
 8018ed0:	f7f7 fd12 	bl	80108f8 <rcutils_reset_error>
 8018ed4:	9801      	ldr	r0, [sp, #4]
 8018ed6:	b006      	add	sp, #24
 8018ed8:	bd10      	pop	{r4, pc}
 8018eda:	bf00      	nop
 8018edc:	0000      	movs	r0, r0
	...

08018ee0 <rclc_action_server_goal_cancel_accept>:
 8018ee0:	b310      	cbz	r0, 8018f28 <rclc_action_server_goal_cancel_accept+0x48>
 8018ee2:	b510      	push	{r4, lr}
 8018ee4:	b090      	sub	sp, #64	; 0x40
 8018ee6:	4604      	mov	r4, r0
 8018ee8:	a806      	add	r0, sp, #24
 8018eea:	f7ff feff 	bl	8018cec <rcl_action_get_zero_initialized_cancel_response>
 8018eee:	2300      	movs	r3, #0
 8018ef0:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018ef4:	46ec      	mov	ip, sp
 8018ef6:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8018efa:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8018efe:	f88d 3018 	strb.w	r3, [sp, #24]
 8018f02:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018f06:	f8cd d01c 	str.w	sp, [sp, #28]
 8018f0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018f0e:	ed9f 7b08 	vldr	d7, [pc, #32]	; 8018f30 <rclc_action_server_goal_cancel_accept+0x50>
 8018f12:	6860      	ldr	r0, [r4, #4]
 8018f14:	aa06      	add	r2, sp, #24
 8018f16:	f104 0158 	add.w	r1, r4, #88	; 0x58
 8018f1a:	3010      	adds	r0, #16
 8018f1c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018f20:	f7ff fdc6 	bl	8018ab0 <rcl_action_send_cancel_response>
 8018f24:	b010      	add	sp, #64	; 0x40
 8018f26:	bd10      	pop	{r4, pc}
 8018f28:	200b      	movs	r0, #11
 8018f2a:	4770      	bx	lr
 8018f2c:	f3af 8000 	nop.w
 8018f30:	00000001 	.word	0x00000001
 8018f34:	00000001 	.word	0x00000001

08018f38 <rclc_action_server_goal_cancel_reject>:
 8018f38:	b082      	sub	sp, #8
 8018f3a:	b530      	push	{r4, r5, lr}
 8018f3c:	b08b      	sub	sp, #44	; 0x2c
 8018f3e:	ac0e      	add	r4, sp, #56	; 0x38
 8018f40:	e884 000c 	stmia.w	r4, {r2, r3}
 8018f44:	b188      	cbz	r0, 8018f6a <rclc_action_server_goal_cancel_reject+0x32>
 8018f46:	4604      	mov	r4, r0
 8018f48:	a801      	add	r0, sp, #4
 8018f4a:	460d      	mov	r5, r1
 8018f4c:	f7ff fece 	bl	8018cec <rcl_action_get_zero_initialized_cancel_response>
 8018f50:	aa01      	add	r2, sp, #4
 8018f52:	a90e      	add	r1, sp, #56	; 0x38
 8018f54:	f104 0010 	add.w	r0, r4, #16
 8018f58:	f88d 5004 	strb.w	r5, [sp, #4]
 8018f5c:	f7ff fda8 	bl	8018ab0 <rcl_action_send_cancel_response>
 8018f60:	b00b      	add	sp, #44	; 0x2c
 8018f62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018f66:	b002      	add	sp, #8
 8018f68:	4770      	bx	lr
 8018f6a:	200b      	movs	r0, #11
 8018f6c:	b00b      	add	sp, #44	; 0x2c
 8018f6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018f72:	b002      	add	sp, #8
 8018f74:	4770      	bx	lr
 8018f76:	bf00      	nop

08018f78 <__atomic_load_8>:
 8018f78:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8018f7c:	4a16      	ldr	r2, [pc, #88]	; (8018fd8 <__atomic_load_8+0x60>)
 8018f7e:	4b17      	ldr	r3, [pc, #92]	; (8018fdc <__atomic_load_8+0x64>)
 8018f80:	f04f 0c01 	mov.w	ip, #1
 8018f84:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 8018f88:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8018f8c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8018f90:	fb02 f101 	mul.w	r1, r2, r1
 8018f94:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8018f98:	fba3 2301 	umull	r2, r3, r3, r1
 8018f9c:	091b      	lsrs	r3, r3, #4
 8018f9e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8018fa2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8018fa6:	b4d0      	push	{r4, r6, r7}
 8018fa8:	1ac9      	subs	r1, r1, r3
 8018faa:	4c0d      	ldr	r4, [pc, #52]	; (8018fe0 <__atomic_load_8+0x68>)
 8018fac:	1862      	adds	r2, r4, r1
 8018fae:	e8d2 3f4f 	ldrexb	r3, [r2]
 8018fb2:	e8c2 cf46 	strexb	r6, ip, [r2]
 8018fb6:	2e00      	cmp	r6, #0
 8018fb8:	d1f9      	bne.n	8018fae <__atomic_load_8+0x36>
 8018fba:	b2db      	uxtb	r3, r3
 8018fbc:	f3bf 8f5b 	dmb	ish
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d1f4      	bne.n	8018fae <__atomic_load_8+0x36>
 8018fc4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018fc8:	f3bf 8f5b 	dmb	ish
 8018fcc:	5463      	strb	r3, [r4, r1]
 8018fce:	4630      	mov	r0, r6
 8018fd0:	4639      	mov	r1, r7
 8018fd2:	bcd0      	pop	{r4, r6, r7}
 8018fd4:	4770      	bx	lr
 8018fd6:	bf00      	nop
 8018fd8:	27d4eb2d 	.word	0x27d4eb2d
 8018fdc:	b21642c9 	.word	0xb21642c9
 8018fe0:	20011470 	.word	0x20011470

08018fe4 <__atomic_store_8>:
 8018fe4:	b570      	push	{r4, r5, r6, lr}
 8018fe6:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 8018fea:	4916      	ldr	r1, [pc, #88]	; (8019044 <__atomic_store_8+0x60>)
 8018fec:	4c16      	ldr	r4, [pc, #88]	; (8019048 <__atomic_store_8+0x64>)
 8018fee:	f08e 0e3d 	eor.w	lr, lr, #61	; 0x3d
 8018ff2:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8018ff6:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 8018ffa:	fb01 fe0e 	mul.w	lr, r1, lr
 8018ffe:	4913      	ldr	r1, [pc, #76]	; (801904c <__atomic_store_8+0x68>)
 8019000:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8019004:	fba1 510e 	umull	r5, r1, r1, lr
 8019008:	f04f 0501 	mov.w	r5, #1
 801900c:	0909      	lsrs	r1, r1, #4
 801900e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8019012:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8019016:	ebae 0e01 	sub.w	lr, lr, r1
 801901a:	eb04 0c0e 	add.w	ip, r4, lr
 801901e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8019022:	e8cc 5f46 	strexb	r6, r5, [ip]
 8019026:	2e00      	cmp	r6, #0
 8019028:	d1f9      	bne.n	801901e <__atomic_store_8+0x3a>
 801902a:	b2c9      	uxtb	r1, r1
 801902c:	f3bf 8f5b 	dmb	ish
 8019030:	2900      	cmp	r1, #0
 8019032:	d1f4      	bne.n	801901e <__atomic_store_8+0x3a>
 8019034:	e9c0 2300 	strd	r2, r3, [r0]
 8019038:	f3bf 8f5b 	dmb	ish
 801903c:	f804 100e 	strb.w	r1, [r4, lr]
 8019040:	bd70      	pop	{r4, r5, r6, pc}
 8019042:	bf00      	nop
 8019044:	27d4eb2d 	.word	0x27d4eb2d
 8019048:	20011470 	.word	0x20011470
 801904c:	b21642c9 	.word	0xb21642c9

08019050 <__atomic_exchange_8>:
 8019050:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8019054:	4917      	ldr	r1, [pc, #92]	; (80190b4 <__atomic_exchange_8+0x64>)
 8019056:	f08c 0c3d 	eor.w	ip, ip, #61	; 0x3d
 801905a:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 801905e:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8019062:	fb01 fc0c 	mul.w	ip, r1, ip
 8019066:	4914      	ldr	r1, [pc, #80]	; (80190b8 <__atomic_exchange_8+0x68>)
 8019068:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 801906c:	b570      	push	{r4, r5, r6, lr}
 801906e:	4686      	mov	lr, r0
 8019070:	fba1 010c 	umull	r0, r1, r1, ip
 8019074:	4d11      	ldr	r5, [pc, #68]	; (80190bc <__atomic_exchange_8+0x6c>)
 8019076:	f04f 0001 	mov.w	r0, #1
 801907a:	0909      	lsrs	r1, r1, #4
 801907c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8019080:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 8019084:	ebac 0c01 	sub.w	ip, ip, r1
 8019088:	eb05 010c 	add.w	r1, r5, ip
 801908c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8019090:	e8c1 0f46 	strexb	r6, r0, [r1]
 8019094:	2e00      	cmp	r6, #0
 8019096:	d1f9      	bne.n	801908c <__atomic_exchange_8+0x3c>
 8019098:	b2e4      	uxtb	r4, r4
 801909a:	f3bf 8f5b 	dmb	ish
 801909e:	2c00      	cmp	r4, #0
 80190a0:	d1f4      	bne.n	801908c <__atomic_exchange_8+0x3c>
 80190a2:	e9de 0100 	ldrd	r0, r1, [lr]
 80190a6:	e9ce 2300 	strd	r2, r3, [lr]
 80190aa:	f3bf 8f5b 	dmb	ish
 80190ae:	f805 400c 	strb.w	r4, [r5, ip]
 80190b2:	bd70      	pop	{r4, r5, r6, pc}
 80190b4:	27d4eb2d 	.word	0x27d4eb2d
 80190b8:	b21642c9 	.word	0xb21642c9
 80190bc:	20011470 	.word	0x20011470

080190c0 <rcutils_is_directory>:
 80190c0:	2000      	movs	r0, #0
 80190c2:	4770      	bx	lr

080190c4 <rcutils_join_path>:
 80190c4:	b082      	sub	sp, #8
 80190c6:	2000      	movs	r0, #0
 80190c8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80190cc:	b002      	add	sp, #8
 80190ce:	4770      	bx	lr

080190d0 <rcutils_to_native_path>:
 80190d0:	b084      	sub	sp, #16
 80190d2:	2000      	movs	r0, #0
 80190d4:	f10d 0c04 	add.w	ip, sp, #4
 80190d8:	b004      	add	sp, #16
 80190da:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 80190de:	4770      	bx	lr

080190e0 <rcutils_string_array_fini>:
 80190e0:	b328      	cbz	r0, 801912e <rcutils_string_array_fini+0x4e>
 80190e2:	b570      	push	{r4, r5, r6, lr}
 80190e4:	4604      	mov	r4, r0
 80190e6:	6840      	ldr	r0, [r0, #4]
 80190e8:	b1e0      	cbz	r0, 8019124 <rcutils_string_array_fini+0x44>
 80190ea:	f104 0008 	add.w	r0, r4, #8
 80190ee:	f7f7 fbc5 	bl	801087c <rcutils_allocator_is_valid>
 80190f2:	b1c0      	cbz	r0, 8019126 <rcutils_string_array_fini+0x46>
 80190f4:	6823      	ldr	r3, [r4, #0]
 80190f6:	b1c3      	cbz	r3, 801912a <rcutils_string_array_fini+0x4a>
 80190f8:	2500      	movs	r5, #0
 80190fa:	6860      	ldr	r0, [r4, #4]
 80190fc:	462e      	mov	r6, r5
 80190fe:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019102:	68e3      	ldr	r3, [r4, #12]
 8019104:	69a1      	ldr	r1, [r4, #24]
 8019106:	4798      	blx	r3
 8019108:	e9d4 3000 	ldrd	r3, r0, [r4]
 801910c:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
 8019110:	3501      	adds	r5, #1
 8019112:	429d      	cmp	r5, r3
 8019114:	d3f3      	bcc.n	80190fe <rcutils_string_array_fini+0x1e>
 8019116:	68e3      	ldr	r3, [r4, #12]
 8019118:	69a1      	ldr	r1, [r4, #24]
 801911a:	4798      	blx	r3
 801911c:	2300      	movs	r3, #0
 801911e:	4618      	mov	r0, r3
 8019120:	e9c4 3300 	strd	r3, r3, [r4]
 8019124:	bd70      	pop	{r4, r5, r6, pc}
 8019126:	200b      	movs	r0, #11
 8019128:	bd70      	pop	{r4, r5, r6, pc}
 801912a:	6860      	ldr	r0, [r4, #4]
 801912c:	e7f3      	b.n	8019116 <rcutils_string_array_fini+0x36>
 801912e:	200b      	movs	r0, #11
 8019130:	4770      	bx	lr
 8019132:	bf00      	nop

08019134 <rcutils_get_zero_initialized_string_map>:
 8019134:	2000      	movs	r0, #0
 8019136:	4b01      	ldr	r3, [pc, #4]	; (801913c <rcutils_get_zero_initialized_string_map+0x8>)
 8019138:	6018      	str	r0, [r3, #0]
 801913a:	4770      	bx	lr
 801913c:	20011488 	.word	0x20011488

08019140 <rcutils_string_map_reserve>:
 8019140:	2800      	cmp	r0, #0
 8019142:	d05e      	beq.n	8019202 <rcutils_string_map_reserve+0xc2>
 8019144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019148:	460c      	mov	r4, r1
 801914a:	6801      	ldr	r1, [r0, #0]
 801914c:	b082      	sub	sp, #8
 801914e:	4605      	mov	r5, r0
 8019150:	b129      	cbz	r1, 801915e <rcutils_string_map_reserve+0x1e>
 8019152:	68cb      	ldr	r3, [r1, #12]
 8019154:	42a3      	cmp	r3, r4
 8019156:	d906      	bls.n	8019166 <rcutils_string_map_reserve+0x26>
 8019158:	461c      	mov	r4, r3
 801915a:	2900      	cmp	r1, #0
 801915c:	d1f9      	bne.n	8019152 <rcutils_string_map_reserve+0x12>
 801915e:	201f      	movs	r0, #31
 8019160:	b002      	add	sp, #8
 8019162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019166:	688b      	ldr	r3, [r1, #8]
 8019168:	42a3      	cmp	r3, r4
 801916a:	d046      	beq.n	80191fa <rcutils_string_map_reserve+0xba>
 801916c:	6a0e      	ldr	r6, [r1, #32]
 801916e:	2c00      	cmp	r4, #0
 8019170:	d033      	beq.n	80191da <rcutils_string_map_reserve+0x9a>
 8019172:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8019176:	d242      	bcs.n	80191fe <rcutils_string_map_reserve+0xbe>
 8019178:	00a7      	lsls	r7, r4, #2
 801917a:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801917e:	6808      	ldr	r0, [r1, #0]
 8019180:	4632      	mov	r2, r6
 8019182:	4639      	mov	r1, r7
 8019184:	47c0      	blx	r8
 8019186:	2800      	cmp	r0, #0
 8019188:	d039      	beq.n	80191fe <rcutils_string_map_reserve+0xbe>
 801918a:	682b      	ldr	r3, [r5, #0]
 801918c:	4632      	mov	r2, r6
 801918e:	4639      	mov	r1, r7
 8019190:	6018      	str	r0, [r3, #0]
 8019192:	6858      	ldr	r0, [r3, #4]
 8019194:	47c0      	blx	r8
 8019196:	2800      	cmp	r0, #0
 8019198:	d031      	beq.n	80191fe <rcutils_string_map_reserve+0xbe>
 801919a:	682d      	ldr	r5, [r5, #0]
 801919c:	68ab      	ldr	r3, [r5, #8]
 801919e:	6068      	str	r0, [r5, #4]
 80191a0:	42a3      	cmp	r3, r4
 80191a2:	d225      	bcs.n	80191f0 <rcutils_string_map_reserve+0xb0>
 80191a4:	682a      	ldr	r2, [r5, #0]
 80191a6:	eb00 0c07 	add.w	ip, r0, r7
 80191aa:	0099      	lsls	r1, r3, #2
 80191ac:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80191b0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80191b4:	45e6      	cmp	lr, ip
 80191b6:	d203      	bcs.n	80191c0 <rcutils_string_map_reserve+0x80>
 80191b8:	eb02 0c07 	add.w	ip, r2, r7
 80191bc:	4566      	cmp	r6, ip
 80191be:	d322      	bcc.n	8019206 <rcutils_string_map_reserve+0xc6>
 80191c0:	1ae3      	subs	r3, r4, r3
 80191c2:	4670      	mov	r0, lr
 80191c4:	2100      	movs	r1, #0
 80191c6:	009a      	lsls	r2, r3, #2
 80191c8:	9201      	str	r2, [sp, #4]
 80191ca:	f002 fb6f 	bl	801b8ac <memset>
 80191ce:	9a01      	ldr	r2, [sp, #4]
 80191d0:	2100      	movs	r1, #0
 80191d2:	4630      	mov	r0, r6
 80191d4:	f002 fb6a 	bl	801b8ac <memset>
 80191d8:	e00a      	b.n	80191f0 <rcutils_string_map_reserve+0xb0>
 80191da:	694f      	ldr	r7, [r1, #20]
 80191dc:	6808      	ldr	r0, [r1, #0]
 80191de:	4631      	mov	r1, r6
 80191e0:	47b8      	blx	r7
 80191e2:	682b      	ldr	r3, [r5, #0]
 80191e4:	4631      	mov	r1, r6
 80191e6:	6858      	ldr	r0, [r3, #4]
 80191e8:	601c      	str	r4, [r3, #0]
 80191ea:	47b8      	blx	r7
 80191ec:	682d      	ldr	r5, [r5, #0]
 80191ee:	606c      	str	r4, [r5, #4]
 80191f0:	2000      	movs	r0, #0
 80191f2:	60ac      	str	r4, [r5, #8]
 80191f4:	b002      	add	sp, #8
 80191f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191fa:	2000      	movs	r0, #0
 80191fc:	e7b0      	b.n	8019160 <rcutils_string_map_reserve+0x20>
 80191fe:	200a      	movs	r0, #10
 8019200:	e7ae      	b.n	8019160 <rcutils_string_map_reserve+0x20>
 8019202:	200b      	movs	r0, #11
 8019204:	4770      	bx	lr
 8019206:	1f0b      	subs	r3, r1, #4
 8019208:	4418      	add	r0, r3
 801920a:	4413      	add	r3, r2
 801920c:	3a04      	subs	r2, #4
 801920e:	4417      	add	r7, r2
 8019210:	2200      	movs	r2, #0
 8019212:	f843 2f04 	str.w	r2, [r3, #4]!
 8019216:	42bb      	cmp	r3, r7
 8019218:	f840 2f04 	str.w	r2, [r0, #4]!
 801921c:	d1f9      	bne.n	8019212 <rcutils_string_map_reserve+0xd2>
 801921e:	e7e7      	b.n	80191f0 <rcutils_string_map_reserve+0xb0>

08019220 <rcutils_string_map_init>:
 8019220:	b082      	sub	sp, #8
 8019222:	b570      	push	{r4, r5, r6, lr}
 8019224:	ac04      	add	r4, sp, #16
 8019226:	e884 000c 	stmia.w	r4, {r2, r3}
 801922a:	b380      	cbz	r0, 801928e <rcutils_string_map_init+0x6e>
 801922c:	6806      	ldr	r6, [r0, #0]
 801922e:	4604      	mov	r4, r0
 8019230:	b12e      	cbz	r6, 801923e <rcutils_string_map_init+0x1e>
 8019232:	251e      	movs	r5, #30
 8019234:	4628      	mov	r0, r5
 8019236:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801923a:	b002      	add	sp, #8
 801923c:	4770      	bx	lr
 801923e:	a804      	add	r0, sp, #16
 8019240:	460d      	mov	r5, r1
 8019242:	f7f7 fb1b 	bl	801087c <rcutils_allocator_is_valid>
 8019246:	b310      	cbz	r0, 801928e <rcutils_string_map_init+0x6e>
 8019248:	9b04      	ldr	r3, [sp, #16]
 801924a:	2024      	movs	r0, #36	; 0x24
 801924c:	9908      	ldr	r1, [sp, #32]
 801924e:	4798      	blx	r3
 8019250:	6020      	str	r0, [r4, #0]
 8019252:	b310      	cbz	r0, 801929a <rcutils_string_map_init+0x7a>
 8019254:	f10d 0e10 	add.w	lr, sp, #16
 8019258:	f100 0c10 	add.w	ip, r0, #16
 801925c:	e9c0 6600 	strd	r6, r6, [r0]
 8019260:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8019264:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019268:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801926c:	f8de 3000 	ldr.w	r3, [lr]
 8019270:	4629      	mov	r1, r5
 8019272:	4620      	mov	r0, r4
 8019274:	f8cc 3000 	str.w	r3, [ip]
 8019278:	f7ff ff62 	bl	8019140 <rcutils_string_map_reserve>
 801927c:	4605      	mov	r5, r0
 801927e:	2800      	cmp	r0, #0
 8019280:	d0d8      	beq.n	8019234 <rcutils_string_map_init+0x14>
 8019282:	9b05      	ldr	r3, [sp, #20]
 8019284:	9908      	ldr	r1, [sp, #32]
 8019286:	6820      	ldr	r0, [r4, #0]
 8019288:	4798      	blx	r3
 801928a:	6026      	str	r6, [r4, #0]
 801928c:	e7d2      	b.n	8019234 <rcutils_string_map_init+0x14>
 801928e:	250b      	movs	r5, #11
 8019290:	4628      	mov	r0, r5
 8019292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019296:	b002      	add	sp, #8
 8019298:	4770      	bx	lr
 801929a:	250a      	movs	r5, #10
 801929c:	e7ca      	b.n	8019234 <rcutils_string_map_init+0x14>
 801929e:	bf00      	nop

080192a0 <rcutils_string_map_fini>:
 80192a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80192a4:	b082      	sub	sp, #8
 80192a6:	2800      	cmp	r0, #0
 80192a8:	d03a      	beq.n	8019320 <rcutils_string_map_fini+0x80>
 80192aa:	6804      	ldr	r4, [r0, #0]
 80192ac:	4606      	mov	r6, r0
 80192ae:	2c00      	cmp	r4, #0
 80192b0:	d032      	beq.n	8019318 <rcutils_string_map_fini+0x78>
 80192b2:	68a3      	ldr	r3, [r4, #8]
 80192b4:	b32b      	cbz	r3, 8019302 <rcutils_string_map_fini+0x62>
 80192b6:	2500      	movs	r5, #0
 80192b8:	6822      	ldr	r2, [r4, #0]
 80192ba:	462f      	mov	r7, r5
 80192bc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80192c0:	b1e0      	cbz	r0, 80192fc <rcutils_string_map_fini+0x5c>
 80192c2:	6a21      	ldr	r1, [r4, #32]
 80192c4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80192c8:	9101      	str	r1, [sp, #4]
 80192ca:	47c0      	blx	r8
 80192cc:	9901      	ldr	r1, [sp, #4]
 80192ce:	e9d4 3200 	ldrd	r3, r2, [r4]
 80192d2:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 80192d6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80192da:	47c0      	blx	r8
 80192dc:	68e3      	ldr	r3, [r4, #12]
 80192de:	6862      	ldr	r2, [r4, #4]
 80192e0:	3b01      	subs	r3, #1
 80192e2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80192e6:	3501      	adds	r5, #1
 80192e8:	60e3      	str	r3, [r4, #12]
 80192ea:	6834      	ldr	r4, [r6, #0]
 80192ec:	68a3      	ldr	r3, [r4, #8]
 80192ee:	429d      	cmp	r5, r3
 80192f0:	d207      	bcs.n	8019302 <rcutils_string_map_fini+0x62>
 80192f2:	6822      	ldr	r2, [r4, #0]
 80192f4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80192f8:	2800      	cmp	r0, #0
 80192fa:	d1e2      	bne.n	80192c2 <rcutils_string_map_fini+0x22>
 80192fc:	3501      	adds	r5, #1
 80192fe:	429d      	cmp	r5, r3
 8019300:	d3dc      	bcc.n	80192bc <rcutils_string_map_fini+0x1c>
 8019302:	2100      	movs	r1, #0
 8019304:	4630      	mov	r0, r6
 8019306:	f7ff ff1b 	bl	8019140 <rcutils_string_map_reserve>
 801930a:	4604      	mov	r4, r0
 801930c:	b920      	cbnz	r0, 8019318 <rcutils_string_map_fini+0x78>
 801930e:	6830      	ldr	r0, [r6, #0]
 8019310:	6943      	ldr	r3, [r0, #20]
 8019312:	6a01      	ldr	r1, [r0, #32]
 8019314:	4798      	blx	r3
 8019316:	6034      	str	r4, [r6, #0]
 8019318:	4620      	mov	r0, r4
 801931a:	b002      	add	sp, #8
 801931c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019320:	240b      	movs	r4, #11
 8019322:	4620      	mov	r0, r4
 8019324:	b002      	add	sp, #8
 8019326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801932a:	bf00      	nop

0801932c <rcutils_string_map_getn>:
 801932c:	b378      	cbz	r0, 801938e <rcutils_string_map_getn+0x62>
 801932e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019332:	f8d0 b000 	ldr.w	fp, [r0]
 8019336:	f1bb 0f00 	cmp.w	fp, #0
 801933a:	d01f      	beq.n	801937c <rcutils_string_map_getn+0x50>
 801933c:	fab1 f481 	clz	r4, r1
 8019340:	4688      	mov	r8, r1
 8019342:	0964      	lsrs	r4, r4, #5
 8019344:	b1d1      	cbz	r1, 801937c <rcutils_string_map_getn+0x50>
 8019346:	f8db 7008 	ldr.w	r7, [fp, #8]
 801934a:	f8db 6000 	ldr.w	r6, [fp]
 801934e:	b1af      	cbz	r7, 801937c <rcutils_string_map_getn+0x50>
 8019350:	4691      	mov	r9, r2
 8019352:	3e04      	subs	r6, #4
 8019354:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8019358:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801935c:	3401      	adds	r4, #1
 801935e:	4628      	mov	r0, r5
 8019360:	b155      	cbz	r5, 8019378 <rcutils_string_map_getn+0x4c>
 8019362:	f7e6 ff77 	bl	8000254 <strlen>
 8019366:	4602      	mov	r2, r0
 8019368:	4629      	mov	r1, r5
 801936a:	4640      	mov	r0, r8
 801936c:	454a      	cmp	r2, r9
 801936e:	bf38      	it	cc
 8019370:	464a      	movcc	r2, r9
 8019372:	f002 fab0 	bl	801b8d6 <strncmp>
 8019376:	b120      	cbz	r0, 8019382 <rcutils_string_map_getn+0x56>
 8019378:	42a7      	cmp	r7, r4
 801937a:	d1eb      	bne.n	8019354 <rcutils_string_map_getn+0x28>
 801937c:	2000      	movs	r0, #0
 801937e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019382:	f8db 3004 	ldr.w	r3, [fp, #4]
 8019386:	f853 000a 	ldr.w	r0, [r3, sl]
 801938a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801938e:	4770      	bx	lr

08019390 <rmw_get_zero_initialized_context>:
 8019390:	b510      	push	{r4, lr}
 8019392:	4604      	mov	r4, r0
 8019394:	3010      	adds	r0, #16
 8019396:	f7f7 fc8f 	bl	8010cb8 <rmw_get_zero_initialized_init_options>
 801939a:	2300      	movs	r3, #0
 801939c:	4620      	mov	r0, r4
 801939e:	60a3      	str	r3, [r4, #8]
 80193a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80193a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80193a4:	ed9f 7b02 	vldr	d7, [pc, #8]	; 80193b0 <rmw_get_zero_initialized_context+0x20>
 80193a8:	ed84 7b00 	vstr	d7, [r4]
 80193ac:	bd10      	pop	{r4, pc}
 80193ae:	bf00      	nop
	...

080193b8 <rmw_time_equal>:
 80193b8:	b4f0      	push	{r4, r5, r6, r7}
 80193ba:	b084      	sub	sp, #16
 80193bc:	ac04      	add	r4, sp, #16
 80193be:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80193c2:	4603      	mov	r3, r0
 80193c4:	4925      	ldr	r1, [pc, #148]	; (801945c <rmw_time_equal+0xa4>)
 80193c6:	9d01      	ldr	r5, [sp, #4]
 80193c8:	4610      	mov	r0, r2
 80193ca:	4299      	cmp	r1, r3
 80193cc:	f04f 0202 	mov.w	r2, #2
 80193d0:	9e03      	ldr	r6, [sp, #12]
 80193d2:	41aa      	sbcs	r2, r5
 80193d4:	d330      	bcc.n	8019438 <rmw_time_equal+0x80>
 80193d6:	4c22      	ldr	r4, [pc, #136]	; (8019460 <rmw_time_equal+0xa8>)
 80193d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80193dc:	fba3 3204 	umull	r3, r2, r3, r4
 80193e0:	fb04 2205 	mla	r2, r4, r5, r2
 80193e4:	43dd      	mvns	r5, r3
 80193e6:	1a8c      	subs	r4, r1, r2
 80193e8:	4285      	cmp	r5, r0
 80193ea:	41b4      	sbcs	r4, r6
 80193ec:	d332      	bcc.n	8019454 <rmw_time_equal+0x9c>
 80193ee:	eb10 0c03 	adds.w	ip, r0, r3
 80193f2:	eb42 0106 	adc.w	r1, r2, r6
 80193f6:	4819      	ldr	r0, [pc, #100]	; (801945c <rmw_time_equal+0xa4>)
 80193f8:	2202      	movs	r2, #2
 80193fa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80193fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80193fe:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8019402:	4298      	cmp	r0, r3
 8019404:	41b2      	sbcs	r2, r6
 8019406:	d31c      	bcc.n	8019442 <rmw_time_equal+0x8a>
 8019408:	4c15      	ldr	r4, [pc, #84]	; (8019460 <rmw_time_equal+0xa8>)
 801940a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801940e:	fba3 3204 	umull	r3, r2, r3, r4
 8019412:	fb04 2206 	mla	r2, r4, r6, r2
 8019416:	43de      	mvns	r6, r3
 8019418:	1a84      	subs	r4, r0, r2
 801941a:	42ae      	cmp	r6, r5
 801941c:	41bc      	sbcs	r4, r7
 801941e:	d315      	bcc.n	801944c <rmw_time_equal+0x94>
 8019420:	195b      	adds	r3, r3, r5
 8019422:	eb42 0207 	adc.w	r2, r2, r7
 8019426:	428a      	cmp	r2, r1
 8019428:	bf08      	it	eq
 801942a:	4563      	cmpeq	r3, ip
 801942c:	bf0c      	ite	eq
 801942e:	2001      	moveq	r0, #1
 8019430:	2000      	movne	r0, #0
 8019432:	b004      	add	sp, #16
 8019434:	bcf0      	pop	{r4, r5, r6, r7}
 8019436:	4770      	bx	lr
 8019438:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 801943c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019440:	e7d9      	b.n	80193f6 <rmw_time_equal+0x3e>
 8019442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019446:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801944a:	e7ec      	b.n	8019426 <rmw_time_equal+0x6e>
 801944c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019450:	4602      	mov	r2, r0
 8019452:	e7e8      	b.n	8019426 <rmw_time_equal+0x6e>
 8019454:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8019458:	e7cd      	b.n	80193f6 <rmw_time_equal+0x3e>
 801945a:	bf00      	nop
 801945c:	25c17d04 	.word	0x25c17d04
 8019460:	3b9aca00 	.word	0x3b9aca00

08019464 <rmw_time_total_nsec>:
 8019464:	b470      	push	{r4, r5, r6}
 8019466:	b085      	sub	sp, #20
 8019468:	ac04      	add	r4, sp, #16
 801946a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801946e:	4603      	mov	r3, r0
 8019470:	4913      	ldr	r1, [pc, #76]	; (80194c0 <rmw_time_total_nsec+0x5c>)
 8019472:	9d01      	ldr	r5, [sp, #4]
 8019474:	4610      	mov	r0, r2
 8019476:	4299      	cmp	r1, r3
 8019478:	f04f 0202 	mov.w	r2, #2
 801947c:	9e03      	ldr	r6, [sp, #12]
 801947e:	41aa      	sbcs	r2, r5
 8019480:	d311      	bcc.n	80194a6 <rmw_time_total_nsec+0x42>
 8019482:	4c10      	ldr	r4, [pc, #64]	; (80194c4 <rmw_time_total_nsec+0x60>)
 8019484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019488:	fba3 3204 	umull	r3, r2, r3, r4
 801948c:	fb04 2205 	mla	r2, r4, r5, r2
 8019490:	43dd      	mvns	r5, r3
 8019492:	1a8c      	subs	r4, r1, r2
 8019494:	4285      	cmp	r5, r0
 8019496:	41b4      	sbcs	r4, r6
 8019498:	d30c      	bcc.n	80194b4 <rmw_time_total_nsec+0x50>
 801949a:	1818      	adds	r0, r3, r0
 801949c:	eb42 0106 	adc.w	r1, r2, r6
 80194a0:	b005      	add	sp, #20
 80194a2:	bc70      	pop	{r4, r5, r6}
 80194a4:	4770      	bx	lr
 80194a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80194ae:	b005      	add	sp, #20
 80194b0:	bc70      	pop	{r4, r5, r6}
 80194b2:	4770      	bx	lr
 80194b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194b8:	b005      	add	sp, #20
 80194ba:	bc70      	pop	{r4, r5, r6}
 80194bc:	4770      	bx	lr
 80194be:	bf00      	nop
 80194c0:	25c17d04 	.word	0x25c17d04
 80194c4:	3b9aca00 	.word	0x3b9aca00

080194c8 <rmw_validate_full_topic_name>:
 80194c8:	2800      	cmp	r0, #0
 80194ca:	d05d      	beq.n	8019588 <rmw_validate_full_topic_name+0xc0>
 80194cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194d0:	460d      	mov	r5, r1
 80194d2:	2900      	cmp	r1, #0
 80194d4:	d05a      	beq.n	801958c <rmw_validate_full_topic_name+0xc4>
 80194d6:	4604      	mov	r4, r0
 80194d8:	4616      	mov	r6, r2
 80194da:	f7e6 febb 	bl	8000254 <strlen>
 80194de:	b150      	cbz	r0, 80194f6 <rmw_validate_full_topic_name+0x2e>
 80194e0:	7823      	ldrb	r3, [r4, #0]
 80194e2:	2b2f      	cmp	r3, #47	; 0x2f
 80194e4:	d00e      	beq.n	8019504 <rmw_validate_full_topic_name+0x3c>
 80194e6:	2302      	movs	r3, #2
 80194e8:	602b      	str	r3, [r5, #0]
 80194ea:	b146      	cbz	r6, 80194fe <rmw_validate_full_topic_name+0x36>
 80194ec:	2300      	movs	r3, #0
 80194ee:	4618      	mov	r0, r3
 80194f0:	6033      	str	r3, [r6, #0]
 80194f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194f6:	2301      	movs	r3, #1
 80194f8:	602b      	str	r3, [r5, #0]
 80194fa:	2e00      	cmp	r6, #0
 80194fc:	d1f6      	bne.n	80194ec <rmw_validate_full_topic_name+0x24>
 80194fe:	2000      	movs	r0, #0
 8019500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019504:	1e43      	subs	r3, r0, #1
 8019506:	5ce2      	ldrb	r2, [r4, r3]
 8019508:	2a2f      	cmp	r2, #47	; 0x2f
 801950a:	d041      	beq.n	8019590 <rmw_validate_full_topic_name+0xc8>
 801950c:	1e62      	subs	r2, r4, #1
 801950e:	f1c4 0e01 	rsb	lr, r4, #1
 8019512:	eb02 0800 	add.w	r8, r2, r0
 8019516:	eb0e 0702 	add.w	r7, lr, r2
 801951a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 801951e:	f023 0120 	bic.w	r1, r3, #32
 8019522:	f1a3 0c2f 	sub.w	ip, r3, #47	; 0x2f
 8019526:	3941      	subs	r1, #65	; 0x41
 8019528:	2919      	cmp	r1, #25
 801952a:	d90f      	bls.n	801954c <rmw_validate_full_topic_name+0x84>
 801952c:	f1bc 0f0a 	cmp.w	ip, #10
 8019530:	d90c      	bls.n	801954c <rmw_validate_full_topic_name+0x84>
 8019532:	f1a3 035f 	sub.w	r3, r3, #95	; 0x5f
 8019536:	fab3 f383 	clz	r3, r3
 801953a:	095b      	lsrs	r3, r3, #5
 801953c:	b933      	cbnz	r3, 801954c <rmw_validate_full_topic_name+0x84>
 801953e:	2204      	movs	r2, #4
 8019540:	602a      	str	r2, [r5, #0]
 8019542:	2e00      	cmp	r6, #0
 8019544:	d0db      	beq.n	80194fe <rmw_validate_full_topic_name+0x36>
 8019546:	4618      	mov	r0, r3
 8019548:	6037      	str	r7, [r6, #0]
 801954a:	e7d2      	b.n	80194f2 <rmw_validate_full_topic_name+0x2a>
 801954c:	4542      	cmp	r2, r8
 801954e:	d1e2      	bne.n	8019516 <rmw_validate_full_topic_name+0x4e>
 8019550:	2301      	movs	r3, #1
 8019552:	4f1a      	ldr	r7, [pc, #104]	; (80195bc <rmw_validate_full_topic_name+0xf4>)
 8019554:	e004      	b.n	8019560 <rmw_validate_full_topic_name+0x98>
 8019556:	4298      	cmp	r0, r3
 8019558:	f104 0401 	add.w	r4, r4, #1
 801955c:	4613      	mov	r3, r2
 801955e:	d91c      	bls.n	801959a <rmw_validate_full_topic_name+0xd2>
 8019560:	4298      	cmp	r0, r3
 8019562:	f103 0201 	add.w	r2, r3, #1
 8019566:	d0f6      	beq.n	8019556 <rmw_validate_full_topic_name+0x8e>
 8019568:	7821      	ldrb	r1, [r4, #0]
 801956a:	292f      	cmp	r1, #47	; 0x2f
 801956c:	d1f3      	bne.n	8019556 <rmw_validate_full_topic_name+0x8e>
 801956e:	7861      	ldrb	r1, [r4, #1]
 8019570:	292f      	cmp	r1, #47	; 0x2f
 8019572:	d01e      	beq.n	80195b2 <rmw_validate_full_topic_name+0xea>
 8019574:	5dc9      	ldrb	r1, [r1, r7]
 8019576:	0749      	lsls	r1, r1, #29
 8019578:	d5ed      	bpl.n	8019556 <rmw_validate_full_topic_name+0x8e>
 801957a:	2206      	movs	r2, #6
 801957c:	602a      	str	r2, [r5, #0]
 801957e:	2e00      	cmp	r6, #0
 8019580:	d0bd      	beq.n	80194fe <rmw_validate_full_topic_name+0x36>
 8019582:	2000      	movs	r0, #0
 8019584:	6033      	str	r3, [r6, #0]
 8019586:	e7b4      	b.n	80194f2 <rmw_validate_full_topic_name+0x2a>
 8019588:	200b      	movs	r0, #11
 801958a:	4770      	bx	lr
 801958c:	200b      	movs	r0, #11
 801958e:	e7b0      	b.n	80194f2 <rmw_validate_full_topic_name+0x2a>
 8019590:	2203      	movs	r2, #3
 8019592:	602a      	str	r2, [r5, #0]
 8019594:	2e00      	cmp	r6, #0
 8019596:	d1f4      	bne.n	8019582 <rmw_validate_full_topic_name+0xba>
 8019598:	e7b1      	b.n	80194fe <rmw_validate_full_topic_name+0x36>
 801959a:	28f7      	cmp	r0, #247	; 0xf7
 801959c:	d803      	bhi.n	80195a6 <rmw_validate_full_topic_name+0xde>
 801959e:	2300      	movs	r3, #0
 80195a0:	4618      	mov	r0, r3
 80195a2:	602b      	str	r3, [r5, #0]
 80195a4:	e7a5      	b.n	80194f2 <rmw_validate_full_topic_name+0x2a>
 80195a6:	2307      	movs	r3, #7
 80195a8:	602b      	str	r3, [r5, #0]
 80195aa:	2e00      	cmp	r6, #0
 80195ac:	d0a7      	beq.n	80194fe <rmw_validate_full_topic_name+0x36>
 80195ae:	23f6      	movs	r3, #246	; 0xf6
 80195b0:	e7e7      	b.n	8019582 <rmw_validate_full_topic_name+0xba>
 80195b2:	2205      	movs	r2, #5
 80195b4:	602a      	str	r2, [r5, #0]
 80195b6:	2e00      	cmp	r6, #0
 80195b8:	d1e3      	bne.n	8019582 <rmw_validate_full_topic_name+0xba>
 80195ba:	e7a0      	b.n	80194fe <rmw_validate_full_topic_name+0x36>
 80195bc:	0801dab4 	.word	0x0801dab4

080195c0 <on_status>:
 80195c0:	b082      	sub	sp, #8
 80195c2:	b002      	add	sp, #8
 80195c4:	4770      	bx	lr
 80195c6:	bf00      	nop

080195c8 <on_topic>:
 80195c8:	4a23      	ldr	r2, [pc, #140]	; (8019658 <on_topic+0x90>)
 80195ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195ce:	6812      	ldr	r2, [r2, #0]
 80195d0:	b094      	sub	sp, #80	; 0x50
 80195d2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80195d4:	f8bd 506c 	ldrh.w	r5, [sp, #108]	; 0x6c
 80195d8:	9113      	str	r1, [sp, #76]	; 0x4c
 80195da:	9312      	str	r3, [sp, #72]	; 0x48
 80195dc:	b3c2      	cbz	r2, 8019650 <on_topic+0x88>
 80195de:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80195e2:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 80195e6:	e001      	b.n	80195ec <on_topic+0x24>
 80195e8:	6852      	ldr	r2, [r2, #4]
 80195ea:	b38a      	cbz	r2, 8019650 <on_topic+0x88>
 80195ec:	6894      	ldr	r4, [r2, #8]
 80195ee:	8aa3      	ldrh	r3, [r4, #20]
 80195f0:	428b      	cmp	r3, r1
 80195f2:	d1f9      	bne.n	80195e8 <on_topic+0x20>
 80195f4:	7da3      	ldrb	r3, [r4, #22]
 80195f6:	4283      	cmp	r3, r0
 80195f8:	d1f6      	bne.n	80195e8 <on_topic+0x20>
 80195fa:	2248      	movs	r2, #72	; 0x48
 80195fc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8019600:	4668      	mov	r0, sp
 8019602:	f002 fa1c 	bl	801ba3e <memcpy>
 8019606:	f104 0328 	add.w	r3, r4, #40	; 0x28
 801960a:	4620      	mov	r0, r4
 801960c:	cb0c      	ldmia	r3, {r2, r3}
 801960e:	f7f8 fff7 	bl	8012600 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019612:	4607      	mov	r7, r0
 8019614:	b1e0      	cbz	r0, 8019650 <on_topic+0x88>
 8019616:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801961a:	462a      	mov	r2, r5
 801961c:	4630      	mov	r0, r6
 801961e:	f108 0110 	add.w	r1, r8, #16
 8019622:	f7f9 fc91 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 8019626:	b930      	cbnz	r0, 8019636 <on_topic+0x6e>
 8019628:	4639      	mov	r1, r7
 801962a:	480c      	ldr	r0, [pc, #48]	; (801965c <on_topic+0x94>)
 801962c:	b014      	add	sp, #80	; 0x50
 801962e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019632:	f000 b8bd 	b.w	80197b0 <put_memory>
 8019636:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 801963a:	f8c8 5810 	str.w	r5, [r8, #2064]	; 0x810
 801963e:	f000 fb33 	bl	8019ca8 <rmw_uros_epoch_nanos>
 8019642:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8019646:	2305      	movs	r3, #5
 8019648:	e942 0102 	strd	r0, r1, [r2, #-8]
 801964c:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8019650:	b014      	add	sp, #80	; 0x50
 8019652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019656:	bf00      	nop
 8019658:	20011424 	.word	0x20011424
 801965c:	20011414 	.word	0x20011414

08019660 <on_request>:
 8019660:	4824      	ldr	r0, [pc, #144]	; (80196f4 <on_request+0x94>)
 8019662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019666:	6800      	ldr	r0, [r0, #0]
 8019668:	b094      	sub	sp, #80	; 0x50
 801966a:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 801966c:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8019670:	9113      	str	r1, [sp, #76]	; 0x4c
 8019672:	2800      	cmp	r0, #0
 8019674:	d03b      	beq.n	80196ee <on_request+0x8e>
 8019676:	461d      	mov	r5, r3
 8019678:	e001      	b.n	801967e <on_request+0x1e>
 801967a:	6840      	ldr	r0, [r0, #4]
 801967c:	b3b8      	cbz	r0, 80196ee <on_request+0x8e>
 801967e:	6884      	ldr	r4, [r0, #8]
 8019680:	8b21      	ldrh	r1, [r4, #24]
 8019682:	4291      	cmp	r1, r2
 8019684:	d1f9      	bne.n	801967a <on_request+0x1a>
 8019686:	2248      	movs	r2, #72	; 0x48
 8019688:	f104 0128 	add.w	r1, r4, #40	; 0x28
 801968c:	4668      	mov	r0, sp
 801968e:	f002 f9d6 	bl	801ba3e <memcpy>
 8019692:	f104 0320 	add.w	r3, r4, #32
 8019696:	4620      	mov	r0, r4
 8019698:	cb0c      	ldmia	r3, {r2, r3}
 801969a:	f7f8 ffb1 	bl	8012600 <rmw_uxrce_get_static_input_buffer_for_entity>
 801969e:	4680      	mov	r8, r0
 80196a0:	b328      	cbz	r0, 80196ee <on_request+0x8e>
 80196a2:	4630      	mov	r0, r6
 80196a4:	f8d8 6008 	ldr.w	r6, [r8, #8]
 80196a8:	463a      	mov	r2, r7
 80196aa:	f106 0110 	add.w	r1, r6, #16
 80196ae:	f7f9 fc4b 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 80196b2:	b930      	cbnz	r0, 80196c2 <on_request+0x62>
 80196b4:	4641      	mov	r1, r8
 80196b6:	4810      	ldr	r0, [pc, #64]	; (80196f8 <on_request+0x98>)
 80196b8:	b014      	add	sp, #80	; 0x50
 80196ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80196be:	f000 b877 	b.w	80197b0 <put_memory>
 80196c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80196c4:	f606 0c28 	addw	ip, r6, #2088	; 0x828
 80196c8:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 80196cc:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 80196d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80196d8:	e88c 0003 	stmia.w	ip, {r0, r1}
 80196dc:	f000 fae4 	bl	8019ca8 <rmw_uros_epoch_nanos>
 80196e0:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 80196e4:	2303      	movs	r3, #3
 80196e6:	e942 0102 	strd	r0, r1, [r2, #-8]
 80196ea:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 80196ee:	b014      	add	sp, #80	; 0x50
 80196f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80196f4:	200113f4 	.word	0x200113f4
 80196f8:	20011414 	.word	0x20011414

080196fc <on_reply>:
 80196fc:	4822      	ldr	r0, [pc, #136]	; (8019788 <on_reply+0x8c>)
 80196fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019702:	6800      	ldr	r0, [r0, #0]
 8019704:	b094      	sub	sp, #80	; 0x50
 8019706:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8019708:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 801970c:	9113      	str	r1, [sp, #76]	; 0x4c
 801970e:	b3b8      	cbz	r0, 8019780 <on_reply+0x84>
 8019710:	461d      	mov	r5, r3
 8019712:	e001      	b.n	8019718 <on_reply+0x1c>
 8019714:	6840      	ldr	r0, [r0, #4]
 8019716:	b398      	cbz	r0, 8019780 <on_reply+0x84>
 8019718:	6884      	ldr	r4, [r0, #8]
 801971a:	8b21      	ldrh	r1, [r4, #24]
 801971c:	4291      	cmp	r1, r2
 801971e:	d1f9      	bne.n	8019714 <on_reply+0x18>
 8019720:	2248      	movs	r2, #72	; 0x48
 8019722:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8019726:	4668      	mov	r0, sp
 8019728:	f002 f989 	bl	801ba3e <memcpy>
 801972c:	f104 0320 	add.w	r3, r4, #32
 8019730:	4620      	mov	r0, r4
 8019732:	cb0c      	ldmia	r3, {r2, r3}
 8019734:	f7f8 ff64 	bl	8012600 <rmw_uxrce_get_static_input_buffer_for_entity>
 8019738:	4680      	mov	r8, r0
 801973a:	b308      	cbz	r0, 8019780 <on_reply+0x84>
 801973c:	4630      	mov	r0, r6
 801973e:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8019742:	463a      	mov	r2, r7
 8019744:	f106 0110 	add.w	r1, r6, #16
 8019748:	f7f9 fbfe 	bl	8012f48 <ucdr_deserialize_array_uint8_t>
 801974c:	b930      	cbnz	r0, 801975c <on_reply+0x60>
 801974e:	4641      	mov	r1, r8
 8019750:	480e      	ldr	r0, [pc, #56]	; (801978c <on_reply+0x90>)
 8019752:	b014      	add	sp, #80	; 0x50
 8019754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019758:	f000 b82a 	b.w	80197b0 <put_memory>
 801975c:	2200      	movs	r2, #0
 801975e:	f8c6 4814 	str.w	r4, [r6, #2068]	; 0x814
 8019762:	f8c6 7810 	str.w	r7, [r6, #2064]	; 0x810
 8019766:	f8c6 282c 	str.w	r2, [r6, #2092]	; 0x82c
 801976a:	f8c6 5828 	str.w	r5, [r6, #2088]	; 0x828
 801976e:	f000 fa9b 	bl	8019ca8 <rmw_uros_epoch_nanos>
 8019772:	f506 6202 	add.w	r2, r6, #2080	; 0x820
 8019776:	2304      	movs	r3, #4
 8019778:	e942 0102 	strd	r0, r1, [r2, #-8]
 801977c:	f886 3820 	strb.w	r3, [r6, #2080]	; 0x820
 8019780:	b014      	add	sp, #80	; 0x50
 8019782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019786:	bf00      	nop
 8019788:	2000cb04 	.word	0x2000cb04
 801978c:	20011414 	.word	0x20011414

08019790 <get_memory>:
 8019790:	4603      	mov	r3, r0
 8019792:	6840      	ldr	r0, [r0, #4]
 8019794:	b158      	cbz	r0, 80197ae <get_memory+0x1e>
 8019796:	6842      	ldr	r2, [r0, #4]
 8019798:	605a      	str	r2, [r3, #4]
 801979a:	b10a      	cbz	r2, 80197a0 <get_memory+0x10>
 801979c:	2100      	movs	r1, #0
 801979e:	6011      	str	r1, [r2, #0]
 80197a0:	681a      	ldr	r2, [r3, #0]
 80197a2:	6042      	str	r2, [r0, #4]
 80197a4:	b102      	cbz	r2, 80197a8 <get_memory+0x18>
 80197a6:	6010      	str	r0, [r2, #0]
 80197a8:	2200      	movs	r2, #0
 80197aa:	6002      	str	r2, [r0, #0]
 80197ac:	6018      	str	r0, [r3, #0]
 80197ae:	4770      	bx	lr

080197b0 <put_memory>:
 80197b0:	680b      	ldr	r3, [r1, #0]
 80197b2:	b10b      	cbz	r3, 80197b8 <put_memory+0x8>
 80197b4:	684a      	ldr	r2, [r1, #4]
 80197b6:	605a      	str	r2, [r3, #4]
 80197b8:	684a      	ldr	r2, [r1, #4]
 80197ba:	b102      	cbz	r2, 80197be <put_memory+0xe>
 80197bc:	6013      	str	r3, [r2, #0]
 80197be:	6803      	ldr	r3, [r0, #0]
 80197c0:	428b      	cmp	r3, r1
 80197c2:	6843      	ldr	r3, [r0, #4]
 80197c4:	bf08      	it	eq
 80197c6:	6002      	streq	r2, [r0, #0]
 80197c8:	604b      	str	r3, [r1, #4]
 80197ca:	b103      	cbz	r3, 80197ce <put_memory+0x1e>
 80197cc:	6019      	str	r1, [r3, #0]
 80197ce:	2300      	movs	r3, #0
 80197d0:	600b      	str	r3, [r1, #0]
 80197d2:	6041      	str	r1, [r0, #4]
 80197d4:	4770      	bx	lr
 80197d6:	bf00      	nop

080197d8 <rmw_destroy_client>:
 80197d8:	b570      	push	{r4, r5, r6, lr}
 80197da:	b128      	cbz	r0, 80197e8 <rmw_destroy_client+0x10>
 80197dc:	4604      	mov	r4, r0
 80197de:	6800      	ldr	r0, [r0, #0]
 80197e0:	460d      	mov	r5, r1
 80197e2:	f7f9 f921 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 80197e6:	b910      	cbnz	r0, 80197ee <rmw_destroy_client+0x16>
 80197e8:	2401      	movs	r4, #1
 80197ea:	4620      	mov	r0, r4
 80197ec:	bd70      	pop	{r4, r5, r6, pc}
 80197ee:	6863      	ldr	r3, [r4, #4]
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d0f9      	beq.n	80197e8 <rmw_destroy_client+0x10>
 80197f4:	2d00      	cmp	r5, #0
 80197f6:	d0f7      	beq.n	80197e8 <rmw_destroy_client+0x10>
 80197f8:	6828      	ldr	r0, [r5, #0]
 80197fa:	f7f9 f915 	bl	8012a28 <is_uxrce_rmw_identifier_valid>
 80197fe:	2800      	cmp	r0, #0
 8019800:	d0f2      	beq.n	80197e8 <rmw_destroy_client+0x10>
 8019802:	686e      	ldr	r6, [r5, #4]
 8019804:	2e00      	cmp	r6, #0
 8019806:	d0ef      	beq.n	80197e8 <rmw_destroy_client+0x10>
 8019808:	6864      	ldr	r4, [r4, #4]
 801980a:	6932      	ldr	r2, [r6, #16]
 801980c:	6920      	ldr	r0, [r4, #16]
 801980e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019812:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019816:	6819      	ldr	r1, [r3, #0]
 8019818:	f7f9 ff62 	bl	80136e0 <uxr_buffer_cancel_data>
 801981c:	4602      	mov	r2, r0
 801981e:	6920      	ldr	r0, [r4, #16]
 8019820:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019824:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019828:	f7f8 ffec 	bl	8012804 <run_xrce_session>
 801982c:	6920      	ldr	r0, [r4, #16]
 801982e:	6932      	ldr	r2, [r6, #16]
 8019830:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8019834:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019838:	6819      	ldr	r1, [r3, #0]
 801983a:	f7f9 fbed 	bl	8013018 <uxr_buffer_delete_entity>
 801983e:	4602      	mov	r2, r0
 8019840:	6920      	ldr	r0, [r4, #16]
 8019842:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019846:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 801984a:	f7f8 ffdb 	bl	8012804 <run_xrce_session>
 801984e:	4603      	mov	r3, r0
 8019850:	4628      	mov	r0, r5
 8019852:	2b00      	cmp	r3, #0
 8019854:	bf14      	ite	ne
 8019856:	2400      	movne	r4, #0
 8019858:	2402      	moveq	r4, #2
 801985a:	f7f8 feaf 	bl	80125bc <rmw_uxrce_fini_client_memory>
 801985e:	e7c4      	b.n	80197ea <rmw_destroy_client+0x12>

08019860 <rmw_get_implementation_identifier>:
 8019860:	4b01      	ldr	r3, [pc, #4]	; (8019868 <rmw_get_implementation_identifier+0x8>)
 8019862:	6818      	ldr	r0, [r3, #0]
 8019864:	4770      	bx	lr
 8019866:	bf00      	nop
 8019868:	0801da0c 	.word	0x0801da0c

0801986c <rmw_create_guard_condition>:
 801986c:	b538      	push	{r3, r4, r5, lr}
 801986e:	4605      	mov	r5, r0
 8019870:	4808      	ldr	r0, [pc, #32]	; (8019894 <rmw_create_guard_condition+0x28>)
 8019872:	f7ff ff8d 	bl	8019790 <get_memory>
 8019876:	4603      	mov	r3, r0
 8019878:	b148      	cbz	r0, 801988e <rmw_create_guard_condition+0x22>
 801987a:	6884      	ldr	r4, [r0, #8]
 801987c:	2300      	movs	r3, #0
 801987e:	61e5      	str	r5, [r4, #28]
 8019880:	7423      	strb	r3, [r4, #16]
 8019882:	f7ff ffed 	bl	8019860 <rmw_get_implementation_identifier>
 8019886:	f104 0314 	add.w	r3, r4, #20
 801988a:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801988e:	4618      	mov	r0, r3
 8019890:	bd38      	pop	{r3, r4, r5, pc}
 8019892:	bf00      	nop
 8019894:	200113b4 	.word	0x200113b4

08019898 <rmw_destroy_guard_condition>:
 8019898:	b508      	push	{r3, lr}
 801989a:	4b08      	ldr	r3, [pc, #32]	; (80198bc <rmw_destroy_guard_condition+0x24>)
 801989c:	6819      	ldr	r1, [r3, #0]
 801989e:	b911      	cbnz	r1, 80198a6 <rmw_destroy_guard_condition+0xe>
 80198a0:	e00a      	b.n	80198b8 <rmw_destroy_guard_condition+0x20>
 80198a2:	6849      	ldr	r1, [r1, #4]
 80198a4:	b141      	cbz	r1, 80198b8 <rmw_destroy_guard_condition+0x20>
 80198a6:	688b      	ldr	r3, [r1, #8]
 80198a8:	3314      	adds	r3, #20
 80198aa:	4298      	cmp	r0, r3
 80198ac:	d1f9      	bne.n	80198a2 <rmw_destroy_guard_condition+0xa>
 80198ae:	4803      	ldr	r0, [pc, #12]	; (80198bc <rmw_destroy_guard_condition+0x24>)
 80198b0:	f7ff ff7e 	bl	80197b0 <put_memory>
 80198b4:	2000      	movs	r0, #0
 80198b6:	bd08      	pop	{r3, pc}
 80198b8:	2001      	movs	r0, #1
 80198ba:	bd08      	pop	{r3, pc}
 80198bc:	200113b4 	.word	0x200113b4

080198c0 <create_topic>:
 80198c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198c4:	4605      	mov	r5, r0
 80198c6:	b084      	sub	sp, #16
 80198c8:	4822      	ldr	r0, [pc, #136]	; (8019954 <create_topic+0x94>)
 80198ca:	460f      	mov	r7, r1
 80198cc:	4616      	mov	r6, r2
 80198ce:	f7ff ff5f 	bl	8019790 <get_memory>
 80198d2:	4604      	mov	r4, r0
 80198d4:	2800      	cmp	r0, #0
 80198d6:	d039      	beq.n	801994c <create_topic+0x8c>
 80198d8:	692b      	ldr	r3, [r5, #16]
 80198da:	2102      	movs	r1, #2
 80198dc:	6884      	ldr	r4, [r0, #8]
 80198de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80198e2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 801995c <create_topic+0x9c>
 80198e6:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 80198ea:	1c42      	adds	r2, r0, #1
 80198ec:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80198f0:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 80198f4:	f7f9 fe8a 	bl	801360c <uxr_object_id>
 80198f8:	223c      	movs	r2, #60	; 0x3c
 80198fa:	6120      	str	r0, [r4, #16]
 80198fc:	4641      	mov	r1, r8
 80198fe:	4638      	mov	r0, r7
 8019900:	f7f9 f87a 	bl	80129f8 <generate_topic_name>
 8019904:	b1f0      	cbz	r0, 8019944 <create_topic+0x84>
 8019906:	4f14      	ldr	r7, [pc, #80]	; (8019958 <create_topic+0x98>)
 8019908:	4630      	mov	r0, r6
 801990a:	2264      	movs	r2, #100	; 0x64
 801990c:	4639      	mov	r1, r7
 801990e:	f7f9 f845 	bl	801299c <generate_type_name>
 8019912:	b1b8      	cbz	r0, 8019944 <create_topic+0x84>
 8019914:	6928      	ldr	r0, [r5, #16]
 8019916:	2106      	movs	r1, #6
 8019918:	696b      	ldr	r3, [r5, #20]
 801991a:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 801991e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019922:	f8cd 8000 	str.w	r8, [sp]
 8019926:	e9cd 7101 	strd	r7, r1, [sp, #4]
 801992a:	6811      	ldr	r1, [r2, #0]
 801992c:	6922      	ldr	r2, [r4, #16]
 801992e:	f7f9 fbf1 	bl	8013114 <uxr_buffer_create_topic_bin>
 8019932:	4602      	mov	r2, r0
 8019934:	6928      	ldr	r0, [r5, #16]
 8019936:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 801993a:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 801993e:	f7f8 ff61 	bl	8012804 <run_xrce_session>
 8019942:	b918      	cbnz	r0, 801994c <create_topic+0x8c>
 8019944:	4620      	mov	r0, r4
 8019946:	2400      	movs	r4, #0
 8019948:	f7f8 fe4e 	bl	80125e8 <rmw_uxrce_fini_topic_memory>
 801994c:	4620      	mov	r0, r4
 801994e:	b004      	add	sp, #16
 8019950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019954:	20011434 	.word	0x20011434
 8019958:	200114c8 	.word	0x200114c8
 801995c:	2001148c 	.word	0x2001148c

08019960 <destroy_topic>:
 8019960:	b538      	push	{r3, r4, r5, lr}
 8019962:	6985      	ldr	r5, [r0, #24]
 8019964:	b1dd      	cbz	r5, 801999e <destroy_topic+0x3e>
 8019966:	4604      	mov	r4, r0
 8019968:	6928      	ldr	r0, [r5, #16]
 801996a:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801996e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019972:	6922      	ldr	r2, [r4, #16]
 8019974:	6819      	ldr	r1, [r3, #0]
 8019976:	f7f9 fb4f 	bl	8013018 <uxr_buffer_delete_entity>
 801997a:	4602      	mov	r2, r0
 801997c:	6928      	ldr	r0, [r5, #16]
 801997e:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8019982:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8019986:	f7f8 ff3d 	bl	8012804 <run_xrce_session>
 801998a:	4603      	mov	r3, r0
 801998c:	4620      	mov	r0, r4
 801998e:	2b00      	cmp	r3, #0
 8019990:	bf14      	ite	ne
 8019992:	2400      	movne	r4, #0
 8019994:	2402      	moveq	r4, #2
 8019996:	f7f8 fe27 	bl	80125e8 <rmw_uxrce_fini_topic_memory>
 801999a:	4620      	mov	r0, r4
 801999c:	bd38      	pop	{r3, r4, r5, pc}
 801999e:	2401      	movs	r4, #1
 80199a0:	4620      	mov	r0, r4
 80199a2:	bd38      	pop	{r3, r4, r5, pc}

080199a4 <rmw_wait>:
 80199a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80199a8:	4698      	mov	r8, r3
 80199aa:	ea40 0301 	orr.w	r3, r0, r1
 80199ae:	b089      	sub	sp, #36	; 0x24
 80199b0:	ea48 0303 	orr.w	r3, r8, r3
 80199b4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80199b6:	4313      	orrs	r3, r2
 80199b8:	f000 8106 	beq.w	8019bc8 <rmw_wait+0x224>
 80199bc:	4605      	mov	r5, r0
 80199be:	460e      	mov	r6, r1
 80199c0:	4691      	mov	r9, r2
 80199c2:	b16c      	cbz	r4, 80199e0 <rmw_wait+0x3c>
 80199c4:	4ba6      	ldr	r3, [pc, #664]	; (8019c60 <rmw_wait+0x2bc>)
 80199c6:	af04      	add	r7, sp, #16
 80199c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80199ca:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 80199ce:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80199d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80199d6:	f7ff fcef 	bl	80193b8 <rmw_time_equal>
 80199da:	2800      	cmp	r0, #0
 80199dc:	f000 810b 	beq.w	8019bf6 <rmw_wait+0x252>
 80199e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80199e4:	f7f8 fe90 	bl	8012708 <rmw_uxrce_clean_expired_static_input_buffer>
 80199e8:	4b9e      	ldr	r3, [pc, #632]	; (8019c64 <rmw_wait+0x2c0>)
 80199ea:	681c      	ldr	r4, [r3, #0]
 80199ec:	b14c      	cbz	r4, 8019a02 <rmw_wait+0x5e>
 80199ee:	4623      	mov	r3, r4
 80199f0:	2100      	movs	r1, #0
 80199f2:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80199f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80199fa:	f882 15a4 	strb.w	r1, [r2, #1444]	; 0x5a4
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d1f7      	bne.n	80199f2 <rmw_wait+0x4e>
 8019a02:	f1b9 0f00 	cmp.w	r9, #0
 8019a06:	d011      	beq.n	8019a2c <rmw_wait+0x88>
 8019a08:	f8d9 1000 	ldr.w	r1, [r9]
 8019a0c:	b171      	cbz	r1, 8019a2c <rmw_wait+0x88>
 8019a0e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8019a12:	2300      	movs	r3, #0
 8019a14:	2001      	movs	r0, #1
 8019a16:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019a1a:	3301      	adds	r3, #1
 8019a1c:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8019a1e:	4299      	cmp	r1, r3
 8019a20:	6912      	ldr	r2, [r2, #16]
 8019a22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019a26:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8019a2a:	d1f4      	bne.n	8019a16 <rmw_wait+0x72>
 8019a2c:	f1b8 0f00 	cmp.w	r8, #0
 8019a30:	d011      	beq.n	8019a56 <rmw_wait+0xb2>
 8019a32:	f8d8 1000 	ldr.w	r1, [r8]
 8019a36:	b171      	cbz	r1, 8019a56 <rmw_wait+0xb2>
 8019a38:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	2001      	movs	r0, #1
 8019a40:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019a44:	3301      	adds	r3, #1
 8019a46:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8019a48:	4299      	cmp	r1, r3
 8019a4a:	6912      	ldr	r2, [r2, #16]
 8019a4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019a50:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8019a54:	d1f4      	bne.n	8019a40 <rmw_wait+0x9c>
 8019a56:	b185      	cbz	r5, 8019a7a <rmw_wait+0xd6>
 8019a58:	6829      	ldr	r1, [r5, #0]
 8019a5a:	b171      	cbz	r1, 8019a7a <rmw_wait+0xd6>
 8019a5c:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019a60:	2300      	movs	r3, #0
 8019a62:	2001      	movs	r0, #1
 8019a64:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019a68:	3301      	adds	r3, #1
 8019a6a:	6a12      	ldr	r2, [r2, #32]
 8019a6c:	4299      	cmp	r1, r3
 8019a6e:	6912      	ldr	r2, [r2, #16]
 8019a70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019a74:	f882 05a4 	strb.w	r0, [r2, #1444]	; 0x5a4
 8019a78:	d1f4      	bne.n	8019a64 <rmw_wait+0xc0>
 8019a7a:	b344      	cbz	r4, 8019ace <rmw_wait+0x12a>
 8019a7c:	4622      	mov	r2, r4
 8019a7e:	2300      	movs	r3, #0
 8019a80:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8019a84:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8019a88:	f891 15a4 	ldrb.w	r1, [r1, #1444]	; 0x5a4
 8019a8c:	440b      	add	r3, r1
 8019a8e:	b2db      	uxtb	r3, r3
 8019a90:	2a00      	cmp	r2, #0
 8019a92:	d1f5      	bne.n	8019a80 <rmw_wait+0xdc>
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d05f      	beq.n	8019b58 <rmw_wait+0x1b4>
 8019a98:	1c7a      	adds	r2, r7, #1
 8019a9a:	d00d      	beq.n	8019ab8 <rmw_wait+0x114>
 8019a9c:	ee07 7a90 	vmov	s15, r7
 8019aa0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8019aa4:	ee07 3a90 	vmov	s15, r3
 8019aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019aac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019ab0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8019ab4:	ee17 7a90 	vmov	r7, s15
 8019ab8:	68a0      	ldr	r0, [r4, #8]
 8019aba:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8019abe:	f893 35a4 	ldrb.w	r3, [r3, #1444]	; 0x5a4
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	f040 808d 	bne.w	8019be2 <rmw_wait+0x23e>
 8019ac8:	6864      	ldr	r4, [r4, #4]
 8019aca:	2c00      	cmp	r4, #0
 8019acc:	d1f4      	bne.n	8019ab8 <rmw_wait+0x114>
 8019ace:	f1b9 0f00 	cmp.w	r9, #0
 8019ad2:	f000 80a1 	beq.w	8019c18 <rmw_wait+0x274>
 8019ad6:	f8d9 7000 	ldr.w	r7, [r9]
 8019ada:	2f00      	cmp	r7, #0
 8019adc:	f000 80a4 	beq.w	8019c28 <rmw_wait+0x284>
 8019ae0:	2400      	movs	r4, #0
 8019ae2:	4627      	mov	r7, r4
 8019ae4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019ae8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019aec:	f7f8 fde2 	bl	80126b4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019af0:	2800      	cmp	r0, #0
 8019af2:	d03b      	beq.n	8019b6c <rmw_wait+0x1c8>
 8019af4:	3401      	adds	r4, #1
 8019af6:	f8d9 3000 	ldr.w	r3, [r9]
 8019afa:	2701      	movs	r7, #1
 8019afc:	42a3      	cmp	r3, r4
 8019afe:	d8f1      	bhi.n	8019ae4 <rmw_wait+0x140>
 8019b00:	2701      	movs	r7, #1
 8019b02:	f1b8 0f00 	cmp.w	r8, #0
 8019b06:	d010      	beq.n	8019b2a <rmw_wait+0x186>
 8019b08:	f8d8 3000 	ldr.w	r3, [r8]
 8019b0c:	b16b      	cbz	r3, 8019b2a <rmw_wait+0x186>
 8019b0e:	2400      	movs	r4, #0
 8019b10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8019b14:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019b18:	f7f8 fdcc 	bl	80126b4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019b1c:	b370      	cbz	r0, 8019b7c <rmw_wait+0x1d8>
 8019b1e:	3401      	adds	r4, #1
 8019b20:	f8d8 3000 	ldr.w	r3, [r8]
 8019b24:	2701      	movs	r7, #1
 8019b26:	42a3      	cmp	r3, r4
 8019b28:	d8f2      	bhi.n	8019b10 <rmw_wait+0x16c>
 8019b2a:	2d00      	cmp	r5, #0
 8019b2c:	d035      	beq.n	8019b9a <rmw_wait+0x1f6>
 8019b2e:	682b      	ldr	r3, [r5, #0]
 8019b30:	b39b      	cbz	r3, 8019b9a <rmw_wait+0x1f6>
 8019b32:	2400      	movs	r4, #0
 8019b34:	686b      	ldr	r3, [r5, #4]
 8019b36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019b3a:	f7f8 fdbb 	bl	80126b4 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019b3e:	b328      	cbz	r0, 8019b8c <rmw_wait+0x1e8>
 8019b40:	3401      	adds	r4, #1
 8019b42:	682b      	ldr	r3, [r5, #0]
 8019b44:	2701      	movs	r7, #1
 8019b46:	42a3      	cmp	r3, r4
 8019b48:	d8f4      	bhi.n	8019b34 <rmw_wait+0x190>
 8019b4a:	2e00      	cmp	r6, #0
 8019b4c:	d03c      	beq.n	8019bc8 <rmw_wait+0x224>
 8019b4e:	6834      	ldr	r4, [r6, #0]
 8019b50:	2c00      	cmp	r4, #0
 8019b52:	d039      	beq.n	8019bc8 <rmw_wait+0x224>
 8019b54:	2701      	movs	r7, #1
 8019b56:	e023      	b.n	8019ba0 <rmw_wait+0x1fc>
 8019b58:	68a0      	ldr	r0, [r4, #8]
 8019b5a:	2100      	movs	r1, #0
 8019b5c:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019b60:	f7fa fb54 	bl	801420c <uxr_run_session_timeout>
 8019b64:	6864      	ldr	r4, [r4, #4]
 8019b66:	2c00      	cmp	r4, #0
 8019b68:	d1f6      	bne.n	8019b58 <rmw_wait+0x1b4>
 8019b6a:	e7b0      	b.n	8019ace <rmw_wait+0x12a>
 8019b6c:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019b70:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019b74:	3401      	adds	r4, #1
 8019b76:	42a3      	cmp	r3, r4
 8019b78:	d8b4      	bhi.n	8019ae4 <rmw_wait+0x140>
 8019b7a:	e7c2      	b.n	8019b02 <rmw_wait+0x15e>
 8019b7c:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019b80:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019b84:	3401      	adds	r4, #1
 8019b86:	429c      	cmp	r4, r3
 8019b88:	d3c2      	bcc.n	8019b10 <rmw_wait+0x16c>
 8019b8a:	e7ce      	b.n	8019b2a <rmw_wait+0x186>
 8019b8c:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019b90:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8019b94:	3401      	adds	r4, #1
 8019b96:	42a3      	cmp	r3, r4
 8019b98:	d8cc      	bhi.n	8019b34 <rmw_wait+0x190>
 8019b9a:	b1a6      	cbz	r6, 8019bc6 <rmw_wait+0x222>
 8019b9c:	6834      	ldr	r4, [r6, #0]
 8019b9e:	b194      	cbz	r4, 8019bc6 <rmw_wait+0x222>
 8019ba0:	2300      	movs	r3, #0
 8019ba2:	461d      	mov	r5, r3
 8019ba4:	e004      	b.n	8019bb0 <rmw_wait+0x20c>
 8019ba6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8019baa:	3301      	adds	r3, #1
 8019bac:	42a3      	cmp	r3, r4
 8019bae:	d00a      	beq.n	8019bc6 <rmw_wait+0x222>
 8019bb0:	6870      	ldr	r0, [r6, #4]
 8019bb2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8019bb6:	7c0a      	ldrb	r2, [r1, #16]
 8019bb8:	2a00      	cmp	r2, #0
 8019bba:	d0f4      	beq.n	8019ba6 <rmw_wait+0x202>
 8019bbc:	3301      	adds	r3, #1
 8019bbe:	4617      	mov	r7, r2
 8019bc0:	740d      	strb	r5, [r1, #16]
 8019bc2:	42a3      	cmp	r3, r4
 8019bc4:	d1f4      	bne.n	8019bb0 <rmw_wait+0x20c>
 8019bc6:	b147      	cbz	r7, 8019bda <rmw_wait+0x236>
 8019bc8:	2000      	movs	r0, #0
 8019bca:	b009      	add	sp, #36	; 0x24
 8019bcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019bd0:	b11e      	cbz	r6, 8019bda <rmw_wait+0x236>
 8019bd2:	6834      	ldr	r4, [r6, #0]
 8019bd4:	462f      	mov	r7, r5
 8019bd6:	2c00      	cmp	r4, #0
 8019bd8:	d1e2      	bne.n	8019ba0 <rmw_wait+0x1fc>
 8019bda:	2002      	movs	r0, #2
 8019bdc:	b009      	add	sp, #36	; 0x24
 8019bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019be2:	4639      	mov	r1, r7
 8019be4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019be8:	f7fa fb2a 	bl	8014240 <uxr_run_session_until_data>
 8019bec:	6864      	ldr	r4, [r4, #4]
 8019bee:	2c00      	cmp	r4, #0
 8019bf0:	f47f af62 	bne.w	8019ab8 <rmw_wait+0x114>
 8019bf4:	e76b      	b.n	8019ace <rmw_wait+0x12a>
 8019bf6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019bfa:	f7ff fc33 	bl	8019464 <rmw_time_total_nsec>
 8019bfe:	2300      	movs	r3, #0
 8019c00:	4a19      	ldr	r2, [pc, #100]	; (8019c68 <rmw_wait+0x2c4>)
 8019c02:	f7e6 fbd5 	bl	80003b0 <__aeabi_uldivmod>
 8019c06:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8019c0a:	4607      	mov	r7, r0
 8019c0c:	f171 0300 	sbcs.w	r3, r1, #0
 8019c10:	bfa8      	it	ge
 8019c12:	f06f 4700 	mvnge.w	r7, #2147483648	; 0x80000000
 8019c16:	e6e5      	b.n	80199e4 <rmw_wait+0x40>
 8019c18:	f1b8 0f00 	cmp.w	r8, #0
 8019c1c:	d00f      	beq.n	8019c3e <rmw_wait+0x29a>
 8019c1e:	f8d8 3000 	ldr.w	r3, [r8]
 8019c22:	b193      	cbz	r3, 8019c4a <rmw_wait+0x2a6>
 8019c24:	464f      	mov	r7, r9
 8019c26:	e772      	b.n	8019b0e <rmw_wait+0x16a>
 8019c28:	f1b8 0f00 	cmp.w	r8, #0
 8019c2c:	d007      	beq.n	8019c3e <rmw_wait+0x29a>
 8019c2e:	f8d8 3000 	ldr.w	r3, [r8]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	f47f af6b 	bne.w	8019b0e <rmw_wait+0x16a>
 8019c38:	b155      	cbz	r5, 8019c50 <rmw_wait+0x2ac>
 8019c3a:	461f      	mov	r7, r3
 8019c3c:	e777      	b.n	8019b2e <rmw_wait+0x18a>
 8019c3e:	2d00      	cmp	r5, #0
 8019c40:	d0c6      	beq.n	8019bd0 <rmw_wait+0x22c>
 8019c42:	682b      	ldr	r3, [r5, #0]
 8019c44:	b143      	cbz	r3, 8019c58 <rmw_wait+0x2b4>
 8019c46:	4647      	mov	r7, r8
 8019c48:	e773      	b.n	8019b32 <rmw_wait+0x18e>
 8019c4a:	b10d      	cbz	r5, 8019c50 <rmw_wait+0x2ac>
 8019c4c:	464f      	mov	r7, r9
 8019c4e:	e76e      	b.n	8019b2e <rmw_wait+0x18a>
 8019c50:	462f      	mov	r7, r5
 8019c52:	2e00      	cmp	r6, #0
 8019c54:	d1a2      	bne.n	8019b9c <rmw_wait+0x1f8>
 8019c56:	e7c0      	b.n	8019bda <rmw_wait+0x236>
 8019c58:	4647      	mov	r7, r8
 8019c5a:	2e00      	cmp	r6, #0
 8019c5c:	d19e      	bne.n	8019b9c <rmw_wait+0x1f8>
 8019c5e:	e7bc      	b.n	8019bda <rmw_wait+0x236>
 8019c60:	0801c820 	.word	0x0801c820
 8019c64:	20011404 	.word	0x20011404
 8019c68:	000f4240 	.word	0x000f4240

08019c6c <rmw_create_wait_set>:
 8019c6c:	b508      	push	{r3, lr}
 8019c6e:	4803      	ldr	r0, [pc, #12]	; (8019c7c <rmw_create_wait_set+0x10>)
 8019c70:	f7ff fd8e 	bl	8019790 <get_memory>
 8019c74:	b108      	cbz	r0, 8019c7a <rmw_create_wait_set+0xe>
 8019c76:	6880      	ldr	r0, [r0, #8]
 8019c78:	3010      	adds	r0, #16
 8019c7a:	bd08      	pop	{r3, pc}
 8019c7c:	20011444 	.word	0x20011444

08019c80 <rmw_destroy_wait_set>:
 8019c80:	b508      	push	{r3, lr}
 8019c82:	4b08      	ldr	r3, [pc, #32]	; (8019ca4 <rmw_destroy_wait_set+0x24>)
 8019c84:	6819      	ldr	r1, [r3, #0]
 8019c86:	b911      	cbnz	r1, 8019c8e <rmw_destroy_wait_set+0xe>
 8019c88:	e00a      	b.n	8019ca0 <rmw_destroy_wait_set+0x20>
 8019c8a:	6849      	ldr	r1, [r1, #4]
 8019c8c:	b141      	cbz	r1, 8019ca0 <rmw_destroy_wait_set+0x20>
 8019c8e:	688b      	ldr	r3, [r1, #8]
 8019c90:	3310      	adds	r3, #16
 8019c92:	4298      	cmp	r0, r3
 8019c94:	d1f9      	bne.n	8019c8a <rmw_destroy_wait_set+0xa>
 8019c96:	4803      	ldr	r0, [pc, #12]	; (8019ca4 <rmw_destroy_wait_set+0x24>)
 8019c98:	f7ff fd8a 	bl	80197b0 <put_memory>
 8019c9c:	2000      	movs	r0, #0
 8019c9e:	bd08      	pop	{r3, pc}
 8019ca0:	2001      	movs	r0, #1
 8019ca2:	bd08      	pop	{r3, pc}
 8019ca4:	20011444 	.word	0x20011444

08019ca8 <rmw_uros_epoch_nanos>:
 8019ca8:	4b05      	ldr	r3, [pc, #20]	; (8019cc0 <rmw_uros_epoch_nanos+0x18>)
 8019caa:	681b      	ldr	r3, [r3, #0]
 8019cac:	b123      	cbz	r3, 8019cb8 <rmw_uros_epoch_nanos+0x10>
 8019cae:	6898      	ldr	r0, [r3, #8]
 8019cb0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8019cb4:	f7f9 bf20 	b.w	8013af8 <uxr_epoch_nanos>
 8019cb8:	2000      	movs	r0, #0
 8019cba:	2100      	movs	r1, #0
 8019cbc:	4770      	bx	lr
 8019cbe:	bf00      	nop
 8019cc0:	20011404 	.word	0x20011404

08019cc4 <std_msgs__msg__String__init>:
 8019cc4:	b538      	push	{r3, r4, r5, lr}
 8019cc6:	4604      	mov	r4, r0
 8019cc8:	b128      	cbz	r0, 8019cd6 <std_msgs__msg__String__init+0x12>
 8019cca:	f7f8 fed3 	bl	8012a74 <rosidl_runtime_c__String__init>
 8019cce:	4605      	mov	r5, r0
 8019cd0:	b120      	cbz	r0, 8019cdc <std_msgs__msg__String__init+0x18>
 8019cd2:	4628      	mov	r0, r5
 8019cd4:	bd38      	pop	{r3, r4, r5, pc}
 8019cd6:	4605      	mov	r5, r0
 8019cd8:	4628      	mov	r0, r5
 8019cda:	bd38      	pop	{r3, r4, r5, pc}
 8019cdc:	4620      	mov	r0, r4
 8019cde:	f7f8 fedf 	bl	8012aa0 <rosidl_runtime_c__String__fini>
 8019ce2:	4628      	mov	r0, r5
 8019ce4:	bd38      	pop	{r3, r4, r5, pc}
 8019ce6:	bf00      	nop

08019ce8 <std_msgs__msg__String__fini>:
 8019ce8:	b108      	cbz	r0, 8019cee <std_msgs__msg__String__fini+0x6>
 8019cea:	f7f8 bed9 	b.w	8012aa0 <rosidl_runtime_c__String__fini>
 8019cee:	4770      	bx	lr

08019cf0 <ucdr_serialize_string>:
 8019cf0:	b510      	push	{r4, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	4604      	mov	r4, r0
 8019cf6:	4608      	mov	r0, r1
 8019cf8:	9101      	str	r1, [sp, #4]
 8019cfa:	f7e6 faab 	bl	8000254 <strlen>
 8019cfe:	4602      	mov	r2, r0
 8019d00:	9901      	ldr	r1, [sp, #4]
 8019d02:	4620      	mov	r0, r4
 8019d04:	3201      	adds	r2, #1
 8019d06:	b002      	add	sp, #8
 8019d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d0c:	f7f4 bf54 	b.w	800ebb8 <ucdr_serialize_sequence_char>

08019d10 <ucdr_deserialize_string>:
 8019d10:	b500      	push	{lr}
 8019d12:	b083      	sub	sp, #12
 8019d14:	ab01      	add	r3, sp, #4
 8019d16:	f7f4 ff61 	bl	800ebdc <ucdr_deserialize_sequence_char>
 8019d1a:	b003      	add	sp, #12
 8019d1c:	f85d fb04 	ldr.w	pc, [sp], #4

08019d20 <uxr_init_input_best_effort_stream>:
 8019d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d24:	8003      	strh	r3, [r0, #0]
 8019d26:	4770      	bx	lr

08019d28 <uxr_reset_input_best_effort_stream>:
 8019d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8019d2c:	8003      	strh	r3, [r0, #0]
 8019d2e:	4770      	bx	lr

08019d30 <uxr_receive_best_effort_message>:
 8019d30:	b538      	push	{r3, r4, r5, lr}
 8019d32:	4604      	mov	r4, r0
 8019d34:	8800      	ldrh	r0, [r0, #0]
 8019d36:	460d      	mov	r5, r1
 8019d38:	f000 fd46 	bl	801a7c8 <uxr_seq_num_cmp>
 8019d3c:	4603      	mov	r3, r0
 8019d3e:	0fc0      	lsrs	r0, r0, #31
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	bfb8      	it	lt
 8019d44:	8025      	strhlt	r5, [r4, #0]
 8019d46:	bd38      	pop	{r3, r4, r5, pc}

08019d48 <on_full_input_buffer>:
 8019d48:	b570      	push	{r4, r5, r6, lr}
 8019d4a:	460c      	mov	r4, r1
 8019d4c:	4605      	mov	r5, r0
 8019d4e:	8908      	ldrh	r0, [r1, #8]
 8019d50:	682b      	ldr	r3, [r5, #0]
 8019d52:	7d26      	ldrb	r6, [r4, #20]
 8019d54:	e9d1 1200 	ldrd	r1, r2, [r1]
 8019d58:	fbb2 f2f0 	udiv	r2, r2, r0
 8019d5c:	eba3 0c01 	sub.w	ip, r3, r1
 8019d60:	fbbc fcf2 	udiv	ip, ip, r2
 8019d64:	f10c 0c01 	add.w	ip, ip, #1
 8019d68:	fa1f f38c 	uxth.w	r3, ip
 8019d6c:	fbb3 fcf0 	udiv	ip, r3, r0
 8019d70:	fb00 331c 	mls	r3, r0, ip, r3
 8019d74:	b29b      	uxth	r3, r3
 8019d76:	fb02 f303 	mul.w	r3, r2, r3
 8019d7a:	1d18      	adds	r0, r3, #4
 8019d7c:	4408      	add	r0, r1
 8019d7e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019d82:	b116      	cbz	r6, 8019d8a <on_full_input_buffer+0x42>
 8019d84:	2600      	movs	r6, #0
 8019d86:	f840 6c04 	str.w	r6, [r0, #-4]
 8019d8a:	2a03      	cmp	r2, #3
 8019d8c:	d801      	bhi.n	8019d92 <on_full_input_buffer+0x4a>
 8019d8e:	2001      	movs	r0, #1
 8019d90:	bd70      	pop	{r4, r5, r6, pc}
 8019d92:	3308      	adds	r3, #8
 8019d94:	4628      	mov	r0, r5
 8019d96:	3a04      	subs	r2, #4
 8019d98:	4419      	add	r1, r3
 8019d9a:	692b      	ldr	r3, [r5, #16]
 8019d9c:	f7f4 fe90 	bl	800eac0 <ucdr_init_buffer_origin>
 8019da0:	4628      	mov	r0, r5
 8019da2:	4622      	mov	r2, r4
 8019da4:	4902      	ldr	r1, [pc, #8]	; (8019db0 <on_full_input_buffer+0x68>)
 8019da6:	f7f4 fe67 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 8019daa:	2000      	movs	r0, #0
 8019dac:	bd70      	pop	{r4, r5, r6, pc}
 8019dae:	bf00      	nop
 8019db0:	08019d49 	.word	0x08019d49

08019db4 <uxr_init_input_reliable_stream>:
 8019db4:	b510      	push	{r4, lr}
 8019db6:	e9c0 1200 	strd	r1, r2, [r0]
 8019dba:	2400      	movs	r4, #0
 8019dbc:	9a02      	ldr	r2, [sp, #8]
 8019dbe:	8103      	strh	r3, [r0, #8]
 8019dc0:	6102      	str	r2, [r0, #16]
 8019dc2:	7504      	strb	r4, [r0, #20]
 8019dc4:	b1c3      	cbz	r3, 8019df8 <uxr_init_input_reliable_stream+0x44>
 8019dc6:	600c      	str	r4, [r1, #0]
 8019dc8:	8901      	ldrh	r1, [r0, #8]
 8019dca:	2901      	cmp	r1, #1
 8019dcc:	d914      	bls.n	8019df8 <uxr_init_input_reliable_stream+0x44>
 8019dce:	f04f 0c01 	mov.w	ip, #1
 8019dd2:	6843      	ldr	r3, [r0, #4]
 8019dd4:	f10c 0e01 	add.w	lr, ip, #1
 8019dd8:	fbbc f2f1 	udiv	r2, ip, r1
 8019ddc:	fbb3 f3f1 	udiv	r3, r3, r1
 8019de0:	fb01 c212 	mls	r2, r1, r2, ip
 8019de4:	fa1f fc8e 	uxth.w	ip, lr
 8019de8:	b292      	uxth	r2, r2
 8019dea:	fb02 f303 	mul.w	r3, r2, r3
 8019dee:	6802      	ldr	r2, [r0, #0]
 8019df0:	50d4      	str	r4, [r2, r3]
 8019df2:	8901      	ldrh	r1, [r0, #8]
 8019df4:	4561      	cmp	r1, ip
 8019df6:	d8ec      	bhi.n	8019dd2 <uxr_init_input_reliable_stream+0x1e>
 8019df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019dfc:	60c3      	str	r3, [r0, #12]
 8019dfe:	bd10      	pop	{r4, pc}

08019e00 <uxr_reset_input_reliable_stream>:
 8019e00:	8901      	ldrh	r1, [r0, #8]
 8019e02:	b1d9      	cbz	r1, 8019e3c <uxr_reset_input_reliable_stream+0x3c>
 8019e04:	b510      	push	{r4, lr}
 8019e06:	f04f 0e00 	mov.w	lr, #0
 8019e0a:	46f4      	mov	ip, lr
 8019e0c:	4674      	mov	r4, lr
 8019e0e:	6843      	ldr	r3, [r0, #4]
 8019e10:	f10e 0e01 	add.w	lr, lr, #1
 8019e14:	fbbc f2f1 	udiv	r2, ip, r1
 8019e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e1c:	fb01 c212 	mls	r2, r1, r2, ip
 8019e20:	fa1f fc8e 	uxth.w	ip, lr
 8019e24:	b292      	uxth	r2, r2
 8019e26:	fb02 f303 	mul.w	r3, r2, r3
 8019e2a:	6802      	ldr	r2, [r0, #0]
 8019e2c:	50d4      	str	r4, [r2, r3]
 8019e2e:	8901      	ldrh	r1, [r0, #8]
 8019e30:	4561      	cmp	r1, ip
 8019e32:	d8ec      	bhi.n	8019e0e <uxr_reset_input_reliable_stream+0xe>
 8019e34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e38:	60c3      	str	r3, [r0, #12]
 8019e3a:	bd10      	pop	{r4, pc}
 8019e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e40:	60c3      	str	r3, [r0, #12]
 8019e42:	4770      	bx	lr

08019e44 <uxr_receive_reliable_message>:
 8019e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019e48:	4604      	mov	r4, r0
 8019e4a:	460d      	mov	r5, r1
 8019e4c:	8901      	ldrh	r1, [r0, #8]
 8019e4e:	4617      	mov	r7, r2
 8019e50:	8980      	ldrh	r0, [r0, #12]
 8019e52:	4698      	mov	r8, r3
 8019e54:	f000 fcb0 	bl	801a7b8 <uxr_seq_num_add>
 8019e58:	4629      	mov	r1, r5
 8019e5a:	4606      	mov	r6, r0
 8019e5c:	89a0      	ldrh	r0, [r4, #12]
 8019e5e:	f000 fcb3 	bl	801a7c8 <uxr_seq_num_cmp>
 8019e62:	2800      	cmp	r0, #0
 8019e64:	db0a      	blt.n	8019e7c <uxr_receive_reliable_message+0x38>
 8019e66:	2600      	movs	r6, #0
 8019e68:	4629      	mov	r1, r5
 8019e6a:	89e0      	ldrh	r0, [r4, #14]
 8019e6c:	f000 fcac 	bl	801a7c8 <uxr_seq_num_cmp>
 8019e70:	2800      	cmp	r0, #0
 8019e72:	da00      	bge.n	8019e76 <uxr_receive_reliable_message+0x32>
 8019e74:	81e5      	strh	r5, [r4, #14]
 8019e76:	4630      	mov	r0, r6
 8019e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019e7c:	4630      	mov	r0, r6
 8019e7e:	4629      	mov	r1, r5
 8019e80:	f000 fca2 	bl	801a7c8 <uxr_seq_num_cmp>
 8019e84:	2800      	cmp	r0, #0
 8019e86:	dbee      	blt.n	8019e66 <uxr_receive_reliable_message+0x22>
 8019e88:	6923      	ldr	r3, [r4, #16]
 8019e8a:	4638      	mov	r0, r7
 8019e8c:	4798      	blx	r3
 8019e8e:	4681      	mov	r9, r0
 8019e90:	2101      	movs	r1, #1
 8019e92:	89a0      	ldrh	r0, [r4, #12]
 8019e94:	f000 fc90 	bl	801a7b8 <uxr_seq_num_add>
 8019e98:	f1b9 0f00 	cmp.w	r9, #0
 8019e9c:	bf08      	it	eq
 8019e9e:	4285      	cmpeq	r5, r0
 8019ea0:	bf0c      	ite	eq
 8019ea2:	2601      	moveq	r6, #1
 8019ea4:	2600      	movne	r6, #0
 8019ea6:	d104      	bne.n	8019eb2 <uxr_receive_reliable_message+0x6e>
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	9a08      	ldr	r2, [sp, #32]
 8019eac:	81a0      	strh	r0, [r4, #12]
 8019eae:	7013      	strb	r3, [r2, #0]
 8019eb0:	e7da      	b.n	8019e68 <uxr_receive_reliable_message+0x24>
 8019eb2:	8922      	ldrh	r2, [r4, #8]
 8019eb4:	6863      	ldr	r3, [r4, #4]
 8019eb6:	fbb5 f0f2 	udiv	r0, r5, r2
 8019eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8019ebe:	fb02 5010 	mls	r0, r2, r0, r5
 8019ec2:	b280      	uxth	r0, r0
 8019ec4:	fb03 f000 	mul.w	r0, r3, r0
 8019ec8:	6823      	ldr	r3, [r4, #0]
 8019eca:	3004      	adds	r0, #4
 8019ecc:	4418      	add	r0, r3
 8019ece:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019ed2:	2b00      	cmp	r3, #0
 8019ed4:	d1c7      	bne.n	8019e66 <uxr_receive_reliable_message+0x22>
 8019ed6:	4639      	mov	r1, r7
 8019ed8:	4642      	mov	r2, r8
 8019eda:	f001 fdb0 	bl	801ba3e <memcpy>
 8019ede:	8921      	ldrh	r1, [r4, #8]
 8019ee0:	6863      	ldr	r3, [r4, #4]
 8019ee2:	fbb5 f2f1 	udiv	r2, r5, r1
 8019ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8019eea:	fb01 5212 	mls	r2, r1, r2, r5
 8019eee:	b292      	uxth	r2, r2
 8019ef0:	fb02 f303 	mul.w	r3, r2, r3
 8019ef4:	6822      	ldr	r2, [r4, #0]
 8019ef6:	f842 8003 	str.w	r8, [r2, r3]
 8019efa:	2301      	movs	r3, #1
 8019efc:	9a08      	ldr	r2, [sp, #32]
 8019efe:	7013      	strb	r3, [r2, #0]
 8019f00:	f1b9 0f00 	cmp.w	r9, #0
 8019f04:	d0af      	beq.n	8019e66 <uxr_receive_reliable_message+0x22>
 8019f06:	89a6      	ldrh	r6, [r4, #12]
 8019f08:	2101      	movs	r1, #1
 8019f0a:	4630      	mov	r0, r6
 8019f0c:	f000 fc54 	bl	801a7b8 <uxr_seq_num_add>
 8019f10:	8921      	ldrh	r1, [r4, #8]
 8019f12:	6863      	ldr	r3, [r4, #4]
 8019f14:	4606      	mov	r6, r0
 8019f16:	fbb0 f2f1 	udiv	r2, r0, r1
 8019f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8019f1e:	fb01 0212 	mls	r2, r1, r2, r0
 8019f22:	6820      	ldr	r0, [r4, #0]
 8019f24:	b292      	uxth	r2, r2
 8019f26:	fb02 f303 	mul.w	r3, r2, r3
 8019f2a:	3304      	adds	r3, #4
 8019f2c:	4418      	add	r0, r3
 8019f2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d097      	beq.n	8019e66 <uxr_receive_reliable_message+0x22>
 8019f36:	6923      	ldr	r3, [r4, #16]
 8019f38:	4798      	blx	r3
 8019f3a:	2802      	cmp	r0, #2
 8019f3c:	d002      	beq.n	8019f44 <uxr_receive_reliable_message+0x100>
 8019f3e:	2801      	cmp	r0, #1
 8019f40:	d0e2      	beq.n	8019f08 <uxr_receive_reliable_message+0xc4>
 8019f42:	e790      	b.n	8019e66 <uxr_receive_reliable_message+0x22>
 8019f44:	2601      	movs	r6, #1
 8019f46:	e78f      	b.n	8019e68 <uxr_receive_reliable_message+0x24>

08019f48 <uxr_next_input_reliable_buffer_available>:
 8019f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f4c:	4604      	mov	r4, r0
 8019f4e:	460f      	mov	r7, r1
 8019f50:	8980      	ldrh	r0, [r0, #12]
 8019f52:	2101      	movs	r1, #1
 8019f54:	4690      	mov	r8, r2
 8019f56:	f000 fc2f 	bl	801a7b8 <uxr_seq_num_add>
 8019f5a:	8922      	ldrh	r2, [r4, #8]
 8019f5c:	6866      	ldr	r6, [r4, #4]
 8019f5e:	fbb0 f3f2 	udiv	r3, r0, r2
 8019f62:	fbb6 f6f2 	udiv	r6, r6, r2
 8019f66:	fb02 0313 	mls	r3, r2, r3, r0
 8019f6a:	b29b      	uxth	r3, r3
 8019f6c:	fb03 f606 	mul.w	r6, r3, r6
 8019f70:	6823      	ldr	r3, [r4, #0]
 8019f72:	3604      	adds	r6, #4
 8019f74:	441e      	add	r6, r3
 8019f76:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8019f7a:	f1b9 0f00 	cmp.w	r9, #0
 8019f7e:	d023      	beq.n	8019fc8 <uxr_next_input_reliable_buffer_available+0x80>
 8019f80:	4605      	mov	r5, r0
 8019f82:	6923      	ldr	r3, [r4, #16]
 8019f84:	4630      	mov	r0, r6
 8019f86:	4798      	blx	r3
 8019f88:	4682      	mov	sl, r0
 8019f8a:	b300      	cbz	r0, 8019fce <uxr_next_input_reliable_buffer_available+0x86>
 8019f8c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8019f90:	2101      	movs	r1, #1
 8019f92:	4650      	mov	r0, sl
 8019f94:	f000 fc10 	bl	801a7b8 <uxr_seq_num_add>
 8019f98:	8921      	ldrh	r1, [r4, #8]
 8019f9a:	4682      	mov	sl, r0
 8019f9c:	6863      	ldr	r3, [r4, #4]
 8019f9e:	6820      	ldr	r0, [r4, #0]
 8019fa0:	fbba f2f1 	udiv	r2, sl, r1
 8019fa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8019fa8:	fb01 a212 	mls	r2, r1, r2, sl
 8019fac:	b292      	uxth	r2, r2
 8019fae:	fb02 f303 	mul.w	r3, r2, r3
 8019fb2:	3304      	adds	r3, #4
 8019fb4:	4418      	add	r0, r3
 8019fb6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8019fba:	b12b      	cbz	r3, 8019fc8 <uxr_next_input_reliable_buffer_available+0x80>
 8019fbc:	6923      	ldr	r3, [r4, #16]
 8019fbe:	4798      	blx	r3
 8019fc0:	2802      	cmp	r0, #2
 8019fc2:	d01b      	beq.n	8019ffc <uxr_next_input_reliable_buffer_available+0xb4>
 8019fc4:	2801      	cmp	r0, #1
 8019fc6:	d0e3      	beq.n	8019f90 <uxr_next_input_reliable_buffer_available+0x48>
 8019fc8:	2000      	movs	r0, #0
 8019fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019fce:	464a      	mov	r2, r9
 8019fd0:	4631      	mov	r1, r6
 8019fd2:	4638      	mov	r0, r7
 8019fd4:	f7f4 fd7c 	bl	800ead0 <ucdr_init_buffer>
 8019fd8:	8921      	ldrh	r1, [r4, #8]
 8019fda:	6863      	ldr	r3, [r4, #4]
 8019fdc:	2001      	movs	r0, #1
 8019fde:	fbb5 f2f1 	udiv	r2, r5, r1
 8019fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8019fe6:	fb01 5212 	mls	r2, r1, r2, r5
 8019fea:	b292      	uxth	r2, r2
 8019fec:	fb02 f303 	mul.w	r3, r2, r3
 8019ff0:	6822      	ldr	r2, [r4, #0]
 8019ff2:	f842 a003 	str.w	sl, [r2, r3]
 8019ff6:	81a5      	strh	r5, [r4, #12]
 8019ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ffc:	8920      	ldrh	r0, [r4, #8]
 8019ffe:	eb06 0108 	add.w	r1, r6, r8
 801a002:	6863      	ldr	r3, [r4, #4]
 801a004:	eba9 0208 	sub.w	r2, r9, r8
 801a008:	fbb5 f6f0 	udiv	r6, r5, r0
 801a00c:	fbb3 f3f0 	udiv	r3, r3, r0
 801a010:	fb00 5516 	mls	r5, r0, r6, r5
 801a014:	2000      	movs	r0, #0
 801a016:	b2ad      	uxth	r5, r5
 801a018:	fb03 f505 	mul.w	r5, r3, r5
 801a01c:	6823      	ldr	r3, [r4, #0]
 801a01e:	5158      	str	r0, [r3, r5]
 801a020:	4638      	mov	r0, r7
 801a022:	f7f4 fd55 	bl	800ead0 <ucdr_init_buffer>
 801a026:	4638      	mov	r0, r7
 801a028:	4622      	mov	r2, r4
 801a02a:	4903      	ldr	r1, [pc, #12]	; (801a038 <uxr_next_input_reliable_buffer_available+0xf0>)
 801a02c:	f7f4 fd24 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 801a030:	2001      	movs	r0, #1
 801a032:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a036:	e7c8      	b.n	8019fca <uxr_next_input_reliable_buffer_available+0x82>
 801a038:	08019d49 	.word	0x08019d49

0801a03c <uxr_process_heartbeat>:
 801a03c:	b538      	push	{r3, r4, r5, lr}
 801a03e:	4611      	mov	r1, r2
 801a040:	4604      	mov	r4, r0
 801a042:	89c0      	ldrh	r0, [r0, #14]
 801a044:	4615      	mov	r5, r2
 801a046:	f000 fbbf 	bl	801a7c8 <uxr_seq_num_cmp>
 801a04a:	2800      	cmp	r0, #0
 801a04c:	bfb8      	it	lt
 801a04e:	81e5      	strhlt	r5, [r4, #14]
 801a050:	bd38      	pop	{r3, r4, r5, pc}
 801a052:	bf00      	nop

0801a054 <uxr_compute_acknack>:
 801a054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a058:	8903      	ldrh	r3, [r0, #8]
 801a05a:	4604      	mov	r4, r0
 801a05c:	460f      	mov	r7, r1
 801a05e:	8985      	ldrh	r5, [r0, #12]
 801a060:	b1db      	cbz	r3, 801a09a <uxr_compute_acknack+0x46>
 801a062:	4628      	mov	r0, r5
 801a064:	2601      	movs	r6, #1
 801a066:	e004      	b.n	801a072 <uxr_compute_acknack+0x1e>
 801a068:	4566      	cmp	r6, ip
 801a06a:	f106 0601 	add.w	r6, r6, #1
 801a06e:	d214      	bcs.n	801a09a <uxr_compute_acknack+0x46>
 801a070:	89a0      	ldrh	r0, [r4, #12]
 801a072:	b2b1      	uxth	r1, r6
 801a074:	f000 fba0 	bl	801a7b8 <uxr_seq_num_add>
 801a078:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a07c:	fbb0 f2fc 	udiv	r2, r0, ip
 801a080:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a084:	fb0c 0212 	mls	r2, ip, r2, r0
 801a088:	fbb3 f3fc 	udiv	r3, r3, ip
 801a08c:	b292      	uxth	r2, r2
 801a08e:	fb02 f303 	mul.w	r3, r2, r3
 801a092:	58cb      	ldr	r3, [r1, r3]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d1e7      	bne.n	801a068 <uxr_compute_acknack+0x14>
 801a098:	4605      	mov	r5, r0
 801a09a:	803d      	strh	r5, [r7, #0]
 801a09c:	2101      	movs	r1, #1
 801a09e:	89e6      	ldrh	r6, [r4, #14]
 801a0a0:	4628      	mov	r0, r5
 801a0a2:	f000 fb8d 	bl	801a7c0 <uxr_seq_num_sub>
 801a0a6:	4601      	mov	r1, r0
 801a0a8:	4630      	mov	r0, r6
 801a0aa:	f000 fb89 	bl	801a7c0 <uxr_seq_num_sub>
 801a0ae:	4606      	mov	r6, r0
 801a0b0:	b328      	cbz	r0, 801a0fe <uxr_compute_acknack+0xaa>
 801a0b2:	f04f 0900 	mov.w	r9, #0
 801a0b6:	f04f 0801 	mov.w	r8, #1
 801a0ba:	464d      	mov	r5, r9
 801a0bc:	fa1f f189 	uxth.w	r1, r9
 801a0c0:	8838      	ldrh	r0, [r7, #0]
 801a0c2:	f000 fb79 	bl	801a7b8 <uxr_seq_num_add>
 801a0c6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a0ca:	6861      	ldr	r1, [r4, #4]
 801a0cc:	fa08 fe09 	lsl.w	lr, r8, r9
 801a0d0:	6822      	ldr	r2, [r4, #0]
 801a0d2:	f109 0901 	add.w	r9, r9, #1
 801a0d6:	ea4e 0e05 	orr.w	lr, lr, r5
 801a0da:	fbb0 f3fc 	udiv	r3, r0, ip
 801a0de:	fbb1 f1fc 	udiv	r1, r1, ip
 801a0e2:	fb03 001c 	mls	r0, r3, ip, r0
 801a0e6:	b283      	uxth	r3, r0
 801a0e8:	fb01 f303 	mul.w	r3, r1, r3
 801a0ec:	58d3      	ldr	r3, [r2, r3]
 801a0ee:	b90b      	cbnz	r3, 801a0f4 <uxr_compute_acknack+0xa0>
 801a0f0:	fa1f f58e 	uxth.w	r5, lr
 801a0f4:	454e      	cmp	r6, r9
 801a0f6:	d1e1      	bne.n	801a0bc <uxr_compute_acknack+0x68>
 801a0f8:	4628      	mov	r0, r5
 801a0fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a0fe:	4605      	mov	r5, r0
 801a100:	4628      	mov	r0, r5
 801a102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a106:	bf00      	nop

0801a108 <uxr_init_output_best_effort_stream>:
 801a108:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801a10c:	6001      	str	r1, [r0, #0]
 801a10e:	7303      	strb	r3, [r0, #12]
 801a110:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a114:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a118:	4770      	bx	lr
 801a11a:	bf00      	nop

0801a11c <uxr_reset_output_best_effort_stream>:
 801a11c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a120:	7b03      	ldrb	r3, [r0, #12]
 801a122:	81c2      	strh	r2, [r0, #14]
 801a124:	6043      	str	r3, [r0, #4]
 801a126:	4770      	bx	lr

0801a128 <uxr_prepare_best_effort_buffer_to_write>:
 801a128:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a12a:	4604      	mov	r4, r0
 801a12c:	b083      	sub	sp, #12
 801a12e:	6840      	ldr	r0, [r0, #4]
 801a130:	460d      	mov	r5, r1
 801a132:	4616      	mov	r6, r2
 801a134:	f7fb fa5c 	bl	80155f0 <uxr_submessage_padding>
 801a138:	6863      	ldr	r3, [r4, #4]
 801a13a:	4418      	add	r0, r3
 801a13c:	68a3      	ldr	r3, [r4, #8]
 801a13e:	1942      	adds	r2, r0, r5
 801a140:	4293      	cmp	r3, r2
 801a142:	bf2c      	ite	cs
 801a144:	2701      	movcs	r7, #1
 801a146:	2700      	movcc	r7, #0
 801a148:	d202      	bcs.n	801a150 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a14a:	4638      	mov	r0, r7
 801a14c:	b003      	add	sp, #12
 801a14e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a150:	9000      	str	r0, [sp, #0]
 801a152:	2300      	movs	r3, #0
 801a154:	4630      	mov	r0, r6
 801a156:	6821      	ldr	r1, [r4, #0]
 801a158:	f7f4 fca8 	bl	800eaac <ucdr_init_buffer_origin_offset>
 801a15c:	6861      	ldr	r1, [r4, #4]
 801a15e:	4638      	mov	r0, r7
 801a160:	4429      	add	r1, r5
 801a162:	6061      	str	r1, [r4, #4]
 801a164:	b003      	add	sp, #12
 801a166:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a168 <uxr_prepare_best_effort_buffer_to_send>:
 801a168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a16c:	4604      	mov	r4, r0
 801a16e:	461d      	mov	r5, r3
 801a170:	6840      	ldr	r0, [r0, #4]
 801a172:	7b23      	ldrb	r3, [r4, #12]
 801a174:	4298      	cmp	r0, r3
 801a176:	bf8c      	ite	hi
 801a178:	2601      	movhi	r6, #1
 801a17a:	2600      	movls	r6, #0
 801a17c:	d802      	bhi.n	801a184 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a17e:	4630      	mov	r0, r6
 801a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a184:	4688      	mov	r8, r1
 801a186:	89e0      	ldrh	r0, [r4, #14]
 801a188:	2101      	movs	r1, #1
 801a18a:	4617      	mov	r7, r2
 801a18c:	f000 fb14 	bl	801a7b8 <uxr_seq_num_add>
 801a190:	6823      	ldr	r3, [r4, #0]
 801a192:	81e0      	strh	r0, [r4, #14]
 801a194:	8028      	strh	r0, [r5, #0]
 801a196:	4630      	mov	r0, r6
 801a198:	f8c8 3000 	str.w	r3, [r8]
 801a19c:	6863      	ldr	r3, [r4, #4]
 801a19e:	603b      	str	r3, [r7, #0]
 801a1a0:	7b23      	ldrb	r3, [r4, #12]
 801a1a2:	6063      	str	r3, [r4, #4]
 801a1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a1a8 <on_full_output_buffer>:
 801a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1aa:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801a1ae:	460c      	mov	r4, r1
 801a1b0:	6803      	ldr	r3, [r0, #0]
 801a1b2:	4605      	mov	r5, r0
 801a1b4:	7b26      	ldrb	r6, [r4, #12]
 801a1b6:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a1ba:	fbb2 f2fc 	udiv	r2, r2, ip
 801a1be:	eba3 0e01 	sub.w	lr, r3, r1
 801a1c2:	6903      	ldr	r3, [r0, #16]
 801a1c4:	fbbe fef2 	udiv	lr, lr, r2
 801a1c8:	f10e 0e01 	add.w	lr, lr, #1
 801a1cc:	fa1f fe8e 	uxth.w	lr, lr
 801a1d0:	fbbe f7fc 	udiv	r7, lr, ip
 801a1d4:	fb0c ec17 	mls	ip, ip, r7, lr
 801a1d8:	fa1f fc8c 	uxth.w	ip, ip
 801a1dc:	fb02 fc0c 	mul.w	ip, r2, ip
 801a1e0:	f851 200c 	ldr.w	r2, [r1, ip]
 801a1e4:	44b4      	add	ip, r6
 801a1e6:	1b92      	subs	r2, r2, r6
 801a1e8:	f10c 0c08 	add.w	ip, ip, #8
 801a1ec:	3a04      	subs	r2, #4
 801a1ee:	4461      	add	r1, ip
 801a1f0:	f7f4 fc66 	bl	800eac0 <ucdr_init_buffer_origin>
 801a1f4:	4628      	mov	r0, r5
 801a1f6:	4622      	mov	r2, r4
 801a1f8:	4902      	ldr	r1, [pc, #8]	; (801a204 <on_full_output_buffer+0x5c>)
 801a1fa:	f7f4 fc3d 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 801a1fe:	2000      	movs	r0, #0
 801a200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a202:	bf00      	nop
 801a204:	0801a1a9 	.word	0x0801a1a9

0801a208 <uxr_init_output_reliable_stream>:
 801a208:	b530      	push	{r4, r5, lr}
 801a20a:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a20e:	8103      	strh	r3, [r0, #8]
 801a210:	7304      	strb	r4, [r0, #12]
 801a212:	e9c0 1200 	strd	r1, r2, [r0]
 801a216:	b1e3      	cbz	r3, 801a252 <uxr_init_output_reliable_stream+0x4a>
 801a218:	600c      	str	r4, [r1, #0]
 801a21a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a21e:	f1bc 0f01 	cmp.w	ip, #1
 801a222:	d916      	bls.n	801a252 <uxr_init_output_reliable_stream+0x4a>
 801a224:	f04f 0e01 	mov.w	lr, #1
 801a228:	6843      	ldr	r3, [r0, #4]
 801a22a:	f10e 0501 	add.w	r5, lr, #1
 801a22e:	7b04      	ldrb	r4, [r0, #12]
 801a230:	6801      	ldr	r1, [r0, #0]
 801a232:	fbbe f2fc 	udiv	r2, lr, ip
 801a236:	fbb3 f3fc 	udiv	r3, r3, ip
 801a23a:	fb0c e212 	mls	r2, ip, r2, lr
 801a23e:	fa1f fe85 	uxth.w	lr, r5
 801a242:	b292      	uxth	r2, r2
 801a244:	fb02 f303 	mul.w	r3, r2, r3
 801a248:	50cc      	str	r4, [r1, r3]
 801a24a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a24e:	45f4      	cmp	ip, lr
 801a250:	d8ea      	bhi.n	801a228 <uxr_init_output_reliable_stream+0x20>
 801a252:	4b07      	ldr	r3, [pc, #28]	; (801a270 <uxr_init_output_reliable_stream+0x68>)
 801a254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a258:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801a25c:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 801a260:	f8c0 300e 	str.w	r3, [r0, #14]
 801a264:	2300      	movs	r3, #0
 801a266:	8242      	strh	r2, [r0, #18]
 801a268:	8403      	strh	r3, [r0, #32]
 801a26a:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801a26e:	bd30      	pop	{r4, r5, pc}
 801a270:	ffff0000 	.word	0xffff0000
 801a274:	00000000 	.word	0x00000000

0801a278 <uxr_reset_output_reliable_stream>:
 801a278:	8901      	ldrh	r1, [r0, #8]
 801a27a:	b510      	push	{r4, lr}
 801a27c:	b1b1      	cbz	r1, 801a2ac <uxr_reset_output_reliable_stream+0x34>
 801a27e:	f04f 0e00 	mov.w	lr, #0
 801a282:	46f4      	mov	ip, lr
 801a284:	6843      	ldr	r3, [r0, #4]
 801a286:	f10e 0e01 	add.w	lr, lr, #1
 801a28a:	7b04      	ldrb	r4, [r0, #12]
 801a28c:	fbbc f2f1 	udiv	r2, ip, r1
 801a290:	fbb3 f3f1 	udiv	r3, r3, r1
 801a294:	fb01 c212 	mls	r2, r1, r2, ip
 801a298:	fa1f fc8e 	uxth.w	ip, lr
 801a29c:	b292      	uxth	r2, r2
 801a29e:	fb02 f303 	mul.w	r3, r2, r3
 801a2a2:	6802      	ldr	r2, [r0, #0]
 801a2a4:	50d4      	str	r4, [r2, r3]
 801a2a6:	8901      	ldrh	r1, [r0, #8]
 801a2a8:	4561      	cmp	r1, ip
 801a2aa:	d8eb      	bhi.n	801a284 <uxr_reset_output_reliable_stream+0xc>
 801a2ac:	4b08      	ldr	r3, [pc, #32]	; (801a2d0 <uxr_reset_output_reliable_stream+0x58>)
 801a2ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a2b2:	ed9f 7b05 	vldr	d7, [pc, #20]	; 801a2c8 <uxr_reset_output_reliable_stream+0x50>
 801a2b6:	f8c0 300e 	str.w	r3, [r0, #14]
 801a2ba:	2300      	movs	r3, #0
 801a2bc:	8242      	strh	r2, [r0, #18]
 801a2be:	8403      	strh	r3, [r0, #32]
 801a2c0:	ed80 7b06 	vstr	d7, [r0, #24]
 801a2c4:	bd10      	pop	{r4, pc}
 801a2c6:	bf00      	nop
 801a2c8:	ffffffff 	.word	0xffffffff
 801a2cc:	7fffffff 	.word	0x7fffffff
 801a2d0:	ffff0000 	.word	0xffff0000

0801a2d4 <uxr_prepare_reliable_buffer_to_write>:
 801a2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2d8:	4604      	mov	r4, r0
 801a2da:	b091      	sub	sp, #68	; 0x44
 801a2dc:	8900      	ldrh	r0, [r0, #8]
 801a2de:	468b      	mov	fp, r1
 801a2e0:	89e6      	ldrh	r6, [r4, #14]
 801a2e2:	9204      	str	r2, [sp, #16]
 801a2e4:	6865      	ldr	r5, [r4, #4]
 801a2e6:	6823      	ldr	r3, [r4, #0]
 801a2e8:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a2ec:	fbb6 f2f0 	udiv	r2, r6, r0
 801a2f0:	fbb5 f5f0 	udiv	r5, r5, r0
 801a2f4:	fb00 6212 	mls	r2, r0, r2, r6
 801a2f8:	1f2f      	subs	r7, r5, #4
 801a2fa:	b292      	uxth	r2, r2
 801a2fc:	fb05 3202 	mla	r2, r5, r2, r3
 801a300:	1d11      	adds	r1, r2, #4
 801a302:	f8d2 8000 	ldr.w	r8, [r2]
 801a306:	9103      	str	r1, [sp, #12]
 801a308:	2800      	cmp	r0, #0
 801a30a:	f000 814a 	beq.w	801a5a2 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a30e:	f04f 0c00 	mov.w	ip, #0
 801a312:	46e2      	mov	sl, ip
 801a314:	4661      	mov	r1, ip
 801a316:	f10c 0c01 	add.w	ip, ip, #1
 801a31a:	fbb1 f2f0 	udiv	r2, r1, r0
 801a31e:	fb00 1212 	mls	r2, r0, r2, r1
 801a322:	fa1f f18c 	uxth.w	r1, ip
 801a326:	b292      	uxth	r2, r2
 801a328:	fb05 f202 	mul.w	r2, r5, r2
 801a32c:	589a      	ldr	r2, [r3, r2]
 801a32e:	454a      	cmp	r2, r9
 801a330:	d103      	bne.n	801a33a <uxr_prepare_reliable_buffer_to_write+0x66>
 801a332:	f10a 0a01 	add.w	sl, sl, #1
 801a336:	fa1f fa8a 	uxth.w	sl, sl
 801a33a:	4281      	cmp	r1, r0
 801a33c:	d3eb      	bcc.n	801a316 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a33e:	4640      	mov	r0, r8
 801a340:	2104      	movs	r1, #4
 801a342:	f8cd a014 	str.w	sl, [sp, #20]
 801a346:	f7f4 fbc7 	bl	800ead8 <ucdr_alignment>
 801a34a:	4480      	add	r8, r0
 801a34c:	eb08 020b 	add.w	r2, r8, fp
 801a350:	42ba      	cmp	r2, r7
 801a352:	f240 80ca 	bls.w	801a4ea <uxr_prepare_reliable_buffer_to_write+0x216>
 801a356:	7b22      	ldrb	r2, [r4, #12]
 801a358:	445a      	add	r2, fp
 801a35a:	42ba      	cmp	r2, r7
 801a35c:	f240 80b2 	bls.w	801a4c4 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a360:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801a364:	b2bb      	uxth	r3, r7
 801a366:	eba2 0209 	sub.w	r2, r2, r9
 801a36a:	441a      	add	r2, r3
 801a36c:	b292      	uxth	r2, r2
 801a36e:	fb0a f902 	mul.w	r9, sl, r2
 801a372:	9205      	str	r2, [sp, #20]
 801a374:	45d9      	cmp	r9, fp
 801a376:	9206      	str	r2, [sp, #24]
 801a378:	f0c0 80b3 	bcc.w	801a4e2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a37c:	f108 0204 	add.w	r2, r8, #4
 801a380:	42ba      	cmp	r2, r7
 801a382:	f080 80da 	bcs.w	801a53a <uxr_prepare_reliable_buffer_to_write+0x266>
 801a386:	f1a3 0904 	sub.w	r9, r3, #4
 801a38a:	9b05      	ldr	r3, [sp, #20]
 801a38c:	eba9 0908 	sub.w	r9, r9, r8
 801a390:	fa1f f989 	uxth.w	r9, r9
 801a394:	ebab 0b09 	sub.w	fp, fp, r9
 801a398:	fbbb f2f3 	udiv	r2, fp, r3
 801a39c:	fb03 b312 	mls	r3, r3, r2, fp
 801a3a0:	2b00      	cmp	r3, #0
 801a3a2:	f040 80c4 	bne.w	801a52e <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a3a6:	b293      	uxth	r3, r2
 801a3a8:	4553      	cmp	r3, sl
 801a3aa:	f200 809a 	bhi.w	801a4e2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	f000 80f9 	beq.w	801a5a6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a3b4:	f8cd 801c 	str.w	r8, [sp, #28]
 801a3b8:	f04f 0a00 	mov.w	sl, #0
 801a3bc:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a3c0:	f10d 0b20 	add.w	fp, sp, #32
 801a3c4:	9505      	str	r5, [sp, #20]
 801a3c6:	461d      	mov	r5, r3
 801a3c8:	e000      	b.n	801a3cc <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a3ca:	46c1      	mov	r9, r8
 801a3cc:	8922      	ldrh	r2, [r4, #8]
 801a3ce:	4658      	mov	r0, fp
 801a3d0:	6863      	ldr	r3, [r4, #4]
 801a3d2:	f10a 0a01 	add.w	sl, sl, #1
 801a3d6:	fbb6 f1f2 	udiv	r1, r6, r2
 801a3da:	fbb3 f3f2 	udiv	r3, r3, r2
 801a3de:	fb02 6111 	mls	r1, r2, r1, r6
 801a3e2:	463a      	mov	r2, r7
 801a3e4:	b289      	uxth	r1, r1
 801a3e6:	fb03 f101 	mul.w	r1, r3, r1
 801a3ea:	6823      	ldr	r3, [r4, #0]
 801a3ec:	3104      	adds	r1, #4
 801a3ee:	4419      	add	r1, r3
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a3f6:	f8cd c000 	str.w	ip, [sp]
 801a3fa:	f7f4 fb57 	bl	800eaac <ucdr_init_buffer_origin_offset>
 801a3fe:	464a      	mov	r2, r9
 801a400:	2300      	movs	r3, #0
 801a402:	210d      	movs	r1, #13
 801a404:	4658      	mov	r0, fp
 801a406:	f7fb f8b3 	bl	8015570 <uxr_buffer_submessage_header>
 801a40a:	8921      	ldrh	r1, [r4, #8]
 801a40c:	6863      	ldr	r3, [r4, #4]
 801a40e:	4630      	mov	r0, r6
 801a410:	fbb6 f2f1 	udiv	r2, r6, r1
 801a414:	fbb3 f3f1 	udiv	r3, r3, r1
 801a418:	fb01 6212 	mls	r2, r1, r2, r6
 801a41c:	2101      	movs	r1, #1
 801a41e:	b292      	uxth	r2, r2
 801a420:	fb02 f303 	mul.w	r3, r2, r3
 801a424:	6822      	ldr	r2, [r4, #0]
 801a426:	50d7      	str	r7, [r2, r3]
 801a428:	f000 f9c6 	bl	801a7b8 <uxr_seq_num_add>
 801a42c:	4606      	mov	r6, r0
 801a42e:	fa1f f38a 	uxth.w	r3, sl
 801a432:	429d      	cmp	r5, r3
 801a434:	d8c9      	bhi.n	801a3ca <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a436:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a43a:	9d05      	ldr	r5, [sp, #20]
 801a43c:	8920      	ldrh	r0, [r4, #8]
 801a43e:	463a      	mov	r2, r7
 801a440:	6863      	ldr	r3, [r4, #4]
 801a442:	fbb6 f1f0 	udiv	r1, r6, r0
 801a446:	fbb3 f3f0 	udiv	r3, r3, r0
 801a44a:	fb00 6111 	mls	r1, r0, r1, r6
 801a44e:	4658      	mov	r0, fp
 801a450:	b289      	uxth	r1, r1
 801a452:	fb01 f303 	mul.w	r3, r1, r3
 801a456:	6821      	ldr	r1, [r4, #0]
 801a458:	3304      	adds	r3, #4
 801a45a:	4419      	add	r1, r3
 801a45c:	2300      	movs	r3, #0
 801a45e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a462:	9700      	str	r7, [sp, #0]
 801a464:	f7f4 fb22 	bl	800eaac <ucdr_init_buffer_origin_offset>
 801a468:	9f06      	ldr	r7, [sp, #24]
 801a46a:	4658      	mov	r0, fp
 801a46c:	2302      	movs	r3, #2
 801a46e:	b2ba      	uxth	r2, r7
 801a470:	210d      	movs	r1, #13
 801a472:	f7fb f87d 	bl	8015570 <uxr_buffer_submessage_header>
 801a476:	f108 0104 	add.w	r1, r8, #4
 801a47a:	9b03      	ldr	r3, [sp, #12]
 801a47c:	f1a5 0208 	sub.w	r2, r5, #8
 801a480:	8925      	ldrh	r5, [r4, #8]
 801a482:	440b      	add	r3, r1
 801a484:	eba2 0208 	sub.w	r2, r2, r8
 801a488:	fbb6 f0f5 	udiv	r0, r6, r5
 801a48c:	4619      	mov	r1, r3
 801a48e:	6863      	ldr	r3, [r4, #4]
 801a490:	fb05 6010 	mls	r0, r5, r0, r6
 801a494:	fbb3 f3f5 	udiv	r3, r3, r5
 801a498:	b280      	uxth	r0, r0
 801a49a:	6825      	ldr	r5, [r4, #0]
 801a49c:	fb00 f303 	mul.w	r3, r0, r3
 801a4a0:	7b20      	ldrb	r0, [r4, #12]
 801a4a2:	3004      	adds	r0, #4
 801a4a4:	4438      	add	r0, r7
 801a4a6:	50e8      	str	r0, [r5, r3]
 801a4a8:	9d04      	ldr	r5, [sp, #16]
 801a4aa:	4628      	mov	r0, r5
 801a4ac:	f7f4 fb10 	bl	800ead0 <ucdr_init_buffer>
 801a4b0:	4628      	mov	r0, r5
 801a4b2:	4622      	mov	r2, r4
 801a4b4:	493d      	ldr	r1, [pc, #244]	; (801a5ac <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a4b6:	f7f4 fadf 	bl	800ea78 <ucdr_set_on_full_buffer_callback>
 801a4ba:	2001      	movs	r0, #1
 801a4bc:	81e6      	strh	r6, [r4, #14]
 801a4be:	b011      	add	sp, #68	; 0x44
 801a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4c4:	2101      	movs	r1, #1
 801a4c6:	89e0      	ldrh	r0, [r4, #14]
 801a4c8:	f000 f976 	bl	801a7b8 <uxr_seq_num_add>
 801a4cc:	4605      	mov	r5, r0
 801a4ce:	8921      	ldrh	r1, [r4, #8]
 801a4d0:	8a60      	ldrh	r0, [r4, #18]
 801a4d2:	f000 f971 	bl	801a7b8 <uxr_seq_num_add>
 801a4d6:	4601      	mov	r1, r0
 801a4d8:	4628      	mov	r0, r5
 801a4da:	f000 f975 	bl	801a7c8 <uxr_seq_num_cmp>
 801a4de:	2800      	cmp	r0, #0
 801a4e0:	dd44      	ble.n	801a56c <uxr_prepare_reliable_buffer_to_write+0x298>
 801a4e2:	2000      	movs	r0, #0
 801a4e4:	b011      	add	sp, #68	; 0x44
 801a4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4ea:	8921      	ldrh	r1, [r4, #8]
 801a4ec:	8a60      	ldrh	r0, [r4, #18]
 801a4ee:	9205      	str	r2, [sp, #20]
 801a4f0:	f000 f962 	bl	801a7b8 <uxr_seq_num_add>
 801a4f4:	4601      	mov	r1, r0
 801a4f6:	4630      	mov	r0, r6
 801a4f8:	f000 f966 	bl	801a7c8 <uxr_seq_num_cmp>
 801a4fc:	2800      	cmp	r0, #0
 801a4fe:	9a05      	ldr	r2, [sp, #20]
 801a500:	dcef      	bgt.n	801a4e2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a502:	8925      	ldrh	r5, [r4, #8]
 801a504:	e9d4 7300 	ldrd	r7, r3, [r4]
 801a508:	fbb6 f4f5 	udiv	r4, r6, r5
 801a50c:	fbb3 f3f5 	udiv	r3, r3, r5
 801a510:	fb05 6414 	mls	r4, r5, r4, r6
 801a514:	b2a4      	uxth	r4, r4
 801a516:	fb04 f303 	mul.w	r3, r4, r3
 801a51a:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a51e:	50fa      	str	r2, [r7, r3]
 801a520:	2300      	movs	r3, #0
 801a522:	f8cd 8000 	str.w	r8, [sp]
 801a526:	f7f4 fac1 	bl	800eaac <ucdr_init_buffer_origin_offset>
 801a52a:	2001      	movs	r0, #1
 801a52c:	e7da      	b.n	801a4e4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a52e:	3201      	adds	r2, #1
 801a530:	9306      	str	r3, [sp, #24]
 801a532:	b293      	uxth	r3, r2
 801a534:	4553      	cmp	r3, sl
 801a536:	d8d4      	bhi.n	801a4e2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a538:	e739      	b.n	801a3ae <uxr_prepare_reliable_buffer_to_write+0xda>
 801a53a:	4630      	mov	r0, r6
 801a53c:	2101      	movs	r1, #1
 801a53e:	9307      	str	r3, [sp, #28]
 801a540:	f000 f93a 	bl	801a7b8 <uxr_seq_num_add>
 801a544:	4606      	mov	r6, r0
 801a546:	8920      	ldrh	r0, [r4, #8]
 801a548:	6862      	ldr	r2, [r4, #4]
 801a54a:	fbb6 f1f0 	udiv	r1, r6, r0
 801a54e:	fbb2 f2f0 	udiv	r2, r2, r0
 801a552:	fb00 6111 	mls	r1, r0, r1, r6
 801a556:	b289      	uxth	r1, r1
 801a558:	fb01 f202 	mul.w	r2, r1, r2
 801a55c:	6821      	ldr	r1, [r4, #0]
 801a55e:	3204      	adds	r2, #4
 801a560:	188b      	adds	r3, r1, r2
 801a562:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a566:	9303      	str	r3, [sp, #12]
 801a568:	9b07      	ldr	r3, [sp, #28]
 801a56a:	e70c      	b.n	801a386 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a56c:	8921      	ldrh	r1, [r4, #8]
 801a56e:	6863      	ldr	r3, [r4, #4]
 801a570:	9804      	ldr	r0, [sp, #16]
 801a572:	fbb5 f2f1 	udiv	r2, r5, r1
 801a576:	fbb3 f3f1 	udiv	r3, r3, r1
 801a57a:	fb01 5212 	mls	r2, r1, r2, r5
 801a57e:	6821      	ldr	r1, [r4, #0]
 801a580:	b292      	uxth	r2, r2
 801a582:	fb02 f303 	mul.w	r3, r2, r3
 801a586:	7b22      	ldrb	r2, [r4, #12]
 801a588:	3304      	adds	r3, #4
 801a58a:	445a      	add	r2, fp
 801a58c:	4419      	add	r1, r3
 801a58e:	f841 2c04 	str.w	r2, [r1, #-4]
 801a592:	7b23      	ldrb	r3, [r4, #12]
 801a594:	9300      	str	r3, [sp, #0]
 801a596:	2300      	movs	r3, #0
 801a598:	f7f4 fa88 	bl	800eaac <ucdr_init_buffer_origin_offset>
 801a59c:	2001      	movs	r0, #1
 801a59e:	81e5      	strh	r5, [r4, #14]
 801a5a0:	e7a0      	b.n	801a4e4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a5a2:	4682      	mov	sl, r0
 801a5a4:	e6cb      	b.n	801a33e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801a5a6:	f10d 0b20 	add.w	fp, sp, #32
 801a5aa:	e747      	b.n	801a43c <uxr_prepare_reliable_buffer_to_write+0x168>
 801a5ac:	0801a1a9 	.word	0x0801a1a9

0801a5b0 <uxr_prepare_next_reliable_buffer_to_send>:
 801a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5b2:	4604      	mov	r4, r0
 801a5b4:	461d      	mov	r5, r3
 801a5b6:	460f      	mov	r7, r1
 801a5b8:	8a00      	ldrh	r0, [r0, #16]
 801a5ba:	2101      	movs	r1, #1
 801a5bc:	4616      	mov	r6, r2
 801a5be:	f000 f8fb 	bl	801a7b8 <uxr_seq_num_add>
 801a5c2:	8028      	strh	r0, [r5, #0]
 801a5c4:	8922      	ldrh	r2, [r4, #8]
 801a5c6:	6863      	ldr	r3, [r4, #4]
 801a5c8:	fbb0 f1f2 	udiv	r1, r0, r2
 801a5cc:	fbb3 f3f2 	udiv	r3, r3, r2
 801a5d0:	fb02 0c11 	mls	ip, r2, r1, r0
 801a5d4:	89e1      	ldrh	r1, [r4, #14]
 801a5d6:	fa1f fc8c 	uxth.w	ip, ip
 801a5da:	fb0c fc03 	mul.w	ip, ip, r3
 801a5de:	6823      	ldr	r3, [r4, #0]
 801a5e0:	f10c 0c04 	add.w	ip, ip, #4
 801a5e4:	4463      	add	r3, ip
 801a5e6:	603b      	str	r3, [r7, #0]
 801a5e8:	6823      	ldr	r3, [r4, #0]
 801a5ea:	449c      	add	ip, r3
 801a5ec:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a5f0:	6033      	str	r3, [r6, #0]
 801a5f2:	f000 f8e9 	bl	801a7c8 <uxr_seq_num_cmp>
 801a5f6:	2800      	cmp	r0, #0
 801a5f8:	dd01      	ble.n	801a5fe <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a5fa:	2000      	movs	r0, #0
 801a5fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5fe:	7b23      	ldrb	r3, [r4, #12]
 801a600:	6832      	ldr	r2, [r6, #0]
 801a602:	429a      	cmp	r2, r3
 801a604:	d9f9      	bls.n	801a5fa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a606:	8a61      	ldrh	r1, [r4, #18]
 801a608:	8a20      	ldrh	r0, [r4, #16]
 801a60a:	f000 f8d9 	bl	801a7c0 <uxr_seq_num_sub>
 801a60e:	8923      	ldrh	r3, [r4, #8]
 801a610:	4283      	cmp	r3, r0
 801a612:	d0f2      	beq.n	801a5fa <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a614:	8828      	ldrh	r0, [r5, #0]
 801a616:	89e3      	ldrh	r3, [r4, #14]
 801a618:	8220      	strh	r0, [r4, #16]
 801a61a:	4298      	cmp	r0, r3
 801a61c:	d001      	beq.n	801a622 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a61e:	2001      	movs	r0, #1
 801a620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a622:	2101      	movs	r1, #1
 801a624:	f000 f8c8 	bl	801a7b8 <uxr_seq_num_add>
 801a628:	4603      	mov	r3, r0
 801a62a:	2001      	movs	r0, #1
 801a62c:	81e3      	strh	r3, [r4, #14]
 801a62e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801a630 <uxr_update_output_stream_heartbeat_timestamp>:
 801a630:	b570      	push	{r4, r5, r6, lr}
 801a632:	8a01      	ldrh	r1, [r0, #16]
 801a634:	4604      	mov	r4, r0
 801a636:	8a40      	ldrh	r0, [r0, #18]
 801a638:	4615      	mov	r5, r2
 801a63a:	461e      	mov	r6, r3
 801a63c:	f000 f8c4 	bl	801a7c8 <uxr_seq_num_cmp>
 801a640:	2800      	cmp	r0, #0
 801a642:	db07      	blt.n	801a654 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801a644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a648:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801a64c:	2000      	movs	r0, #0
 801a64e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801a652:	bd70      	pop	{r4, r5, r6, pc}
 801a654:	f894 0020 	ldrb.w	r0, [r4, #32]
 801a658:	b940      	cbnz	r0, 801a66c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801a65a:	2301      	movs	r3, #1
 801a65c:	f884 3020 	strb.w	r3, [r4, #32]
 801a660:	3564      	adds	r5, #100	; 0x64
 801a662:	f146 0600 	adc.w	r6, r6, #0
 801a666:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801a66a:	bd70      	pop	{r4, r5, r6, pc}
 801a66c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801a670:	4295      	cmp	r5, r2
 801a672:	eb76 0303 	sbcs.w	r3, r6, r3
 801a676:	db04      	blt.n	801a682 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801a678:	1c43      	adds	r3, r0, #1
 801a67a:	2001      	movs	r0, #1
 801a67c:	f884 3020 	strb.w	r3, [r4, #32]
 801a680:	e7ee      	b.n	801a660 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a682:	2000      	movs	r0, #0
 801a684:	e7ec      	b.n	801a660 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801a686:	bf00      	nop

0801a688 <uxr_begin_output_nack_buffer_it>:
 801a688:	8a40      	ldrh	r0, [r0, #18]
 801a68a:	4770      	bx	lr

0801a68c <uxr_next_reliable_nack_buffer_to_send>:
 801a68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a690:	f890 7021 	ldrb.w	r7, [r0, #33]	; 0x21
 801a694:	b197      	cbz	r7, 801a6bc <uxr_next_reliable_nack_buffer_to_send+0x30>
 801a696:	4680      	mov	r8, r0
 801a698:	460d      	mov	r5, r1
 801a69a:	4616      	mov	r6, r2
 801a69c:	461c      	mov	r4, r3
 801a69e:	8818      	ldrh	r0, [r3, #0]
 801a6a0:	2101      	movs	r1, #1
 801a6a2:	f000 f889 	bl	801a7b8 <uxr_seq_num_add>
 801a6a6:	8020      	strh	r0, [r4, #0]
 801a6a8:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801a6ac:	f000 f88c 	bl	801a7c8 <uxr_seq_num_cmp>
 801a6b0:	2800      	cmp	r0, #0
 801a6b2:	dd06      	ble.n	801a6c2 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801a6b4:	2300      	movs	r3, #0
 801a6b6:	461f      	mov	r7, r3
 801a6b8:	f888 3021 	strb.w	r3, [r8, #33]	; 0x21
 801a6bc:	4638      	mov	r0, r7
 801a6be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a6c2:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801a6c6:	8820      	ldrh	r0, [r4, #0]
 801a6c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a6cc:	fbb0 f3f2 	udiv	r3, r0, r2
 801a6d0:	fbb1 fcf2 	udiv	ip, r1, r2
 801a6d4:	fb02 0313 	mls	r3, r2, r3, r0
 801a6d8:	b29b      	uxth	r3, r3
 801a6da:	fb03 fc0c 	mul.w	ip, r3, ip
 801a6de:	f8d8 3000 	ldr.w	r3, [r8]
 801a6e2:	f10c 0c04 	add.w	ip, ip, #4
 801a6e6:	4463      	add	r3, ip
 801a6e8:	602b      	str	r3, [r5, #0]
 801a6ea:	f8d8 3000 	ldr.w	r3, [r8]
 801a6ee:	4463      	add	r3, ip
 801a6f0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801a6f4:	6033      	str	r3, [r6, #0]
 801a6f6:	f898 200c 	ldrb.w	r2, [r8, #12]
 801a6fa:	429a      	cmp	r2, r3
 801a6fc:	d0d0      	beq.n	801a6a0 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801a6fe:	e7dd      	b.n	801a6bc <uxr_next_reliable_nack_buffer_to_send+0x30>

0801a700 <uxr_process_acknack>:
 801a700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a702:	4604      	mov	r4, r0
 801a704:	460e      	mov	r6, r1
 801a706:	4610      	mov	r0, r2
 801a708:	2101      	movs	r1, #1
 801a70a:	f000 f859 	bl	801a7c0 <uxr_seq_num_sub>
 801a70e:	8a61      	ldrh	r1, [r4, #18]
 801a710:	f000 f856 	bl	801a7c0 <uxr_seq_num_sub>
 801a714:	b1c8      	cbz	r0, 801a74a <uxr_process_acknack+0x4a>
 801a716:	4605      	mov	r5, r0
 801a718:	2700      	movs	r7, #0
 801a71a:	2101      	movs	r1, #1
 801a71c:	8a60      	ldrh	r0, [r4, #18]
 801a71e:	f000 f84b 	bl	801a7b8 <uxr_seq_num_add>
 801a722:	8923      	ldrh	r3, [r4, #8]
 801a724:	6862      	ldr	r2, [r4, #4]
 801a726:	3701      	adds	r7, #1
 801a728:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801a72c:	6821      	ldr	r1, [r4, #0]
 801a72e:	42bd      	cmp	r5, r7
 801a730:	8260      	strh	r0, [r4, #18]
 801a732:	fbb0 fef3 	udiv	lr, r0, r3
 801a736:	fbb2 f2f3 	udiv	r2, r2, r3
 801a73a:	fb03 031e 	mls	r3, r3, lr, r0
 801a73e:	b29b      	uxth	r3, r3
 801a740:	fb02 f303 	mul.w	r3, r2, r3
 801a744:	f841 c003 	str.w	ip, [r1, r3]
 801a748:	d1e7      	bne.n	801a71a <uxr_process_acknack+0x1a>
 801a74a:	3e00      	subs	r6, #0
 801a74c:	f04f 0300 	mov.w	r3, #0
 801a750:	bf18      	it	ne
 801a752:	2601      	movne	r6, #1
 801a754:	f884 3020 	strb.w	r3, [r4, #32]
 801a758:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801a75c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a75e:	bf00      	nop

0801a760 <uxr_is_output_up_to_date>:
 801a760:	8a01      	ldrh	r1, [r0, #16]
 801a762:	8a40      	ldrh	r0, [r0, #18]
 801a764:	b508      	push	{r3, lr}
 801a766:	f000 f82f 	bl	801a7c8 <uxr_seq_num_cmp>
 801a76a:	fab0 f080 	clz	r0, r0
 801a76e:	0940      	lsrs	r0, r0, #5
 801a770:	bd08      	pop	{r3, pc}
 801a772:	bf00      	nop

0801a774 <get_available_free_slots>:
 801a774:	8901      	ldrh	r1, [r0, #8]
 801a776:	b1e1      	cbz	r1, 801a7b2 <get_available_free_slots+0x3e>
 801a778:	6843      	ldr	r3, [r0, #4]
 801a77a:	f04f 0c00 	mov.w	ip, #0
 801a77e:	b530      	push	{r4, r5, lr}
 801a780:	fbb3 fef1 	udiv	lr, r3, r1
 801a784:	6805      	ldr	r5, [r0, #0]
 801a786:	4662      	mov	r2, ip
 801a788:	7b04      	ldrb	r4, [r0, #12]
 801a78a:	4660      	mov	r0, ip
 801a78c:	f10c 0c01 	add.w	ip, ip, #1
 801a790:	fbb2 f3f1 	udiv	r3, r2, r1
 801a794:	fb01 2313 	mls	r3, r1, r3, r2
 801a798:	fa1f f28c 	uxth.w	r2, ip
 801a79c:	b29b      	uxth	r3, r3
 801a79e:	fb0e f303 	mul.w	r3, lr, r3
 801a7a2:	58eb      	ldr	r3, [r5, r3]
 801a7a4:	429c      	cmp	r4, r3
 801a7a6:	d101      	bne.n	801a7ac <get_available_free_slots+0x38>
 801a7a8:	3001      	adds	r0, #1
 801a7aa:	b280      	uxth	r0, r0
 801a7ac:	428a      	cmp	r2, r1
 801a7ae:	d3ed      	bcc.n	801a78c <get_available_free_slots+0x18>
 801a7b0:	bd30      	pop	{r4, r5, pc}
 801a7b2:	4608      	mov	r0, r1
 801a7b4:	4770      	bx	lr
 801a7b6:	bf00      	nop

0801a7b8 <uxr_seq_num_add>:
 801a7b8:	4408      	add	r0, r1
 801a7ba:	b280      	uxth	r0, r0
 801a7bc:	4770      	bx	lr
 801a7be:	bf00      	nop

0801a7c0 <uxr_seq_num_sub>:
 801a7c0:	1a40      	subs	r0, r0, r1
 801a7c2:	b280      	uxth	r0, r0
 801a7c4:	4770      	bx	lr
 801a7c6:	bf00      	nop

0801a7c8 <uxr_seq_num_cmp>:
 801a7c8:	4288      	cmp	r0, r1
 801a7ca:	d011      	beq.n	801a7f0 <uxr_seq_num_cmp+0x28>
 801a7cc:	d309      	bcc.n	801a7e2 <uxr_seq_num_cmp+0x1a>
 801a7ce:	4288      	cmp	r0, r1
 801a7d0:	d910      	bls.n	801a7f4 <uxr_seq_num_cmp+0x2c>
 801a7d2:	1a40      	subs	r0, r0, r1
 801a7d4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801a7d8:	bfd4      	ite	le
 801a7da:	2001      	movle	r0, #1
 801a7dc:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 801a7e0:	4770      	bx	lr
 801a7e2:	1a0b      	subs	r3, r1, r0
 801a7e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a7e8:	daf1      	bge.n	801a7ce <uxr_seq_num_cmp+0x6>
 801a7ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a7ee:	4770      	bx	lr
 801a7f0:	2000      	movs	r0, #0
 801a7f2:	4770      	bx	lr
 801a7f4:	2001      	movs	r0, #1
 801a7f6:	4770      	bx	lr

0801a7f8 <rcl_get_default_domain_id>:
 801a7f8:	b530      	push	{r4, r5, lr}
 801a7fa:	2300      	movs	r3, #0
 801a7fc:	b083      	sub	sp, #12
 801a7fe:	9300      	str	r3, [sp, #0]
 801a800:	b1d0      	cbz	r0, 801a838 <rcl_get_default_domain_id+0x40>
 801a802:	4604      	mov	r4, r0
 801a804:	4669      	mov	r1, sp
 801a806:	4815      	ldr	r0, [pc, #84]	; (801a85c <rcl_get_default_domain_id+0x64>)
 801a808:	f7f6 f846 	bl	8010898 <rcutils_get_env>
 801a80c:	4602      	mov	r2, r0
 801a80e:	b110      	cbz	r0, 801a816 <rcl_get_default_domain_id+0x1e>
 801a810:	2001      	movs	r0, #1
 801a812:	b003      	add	sp, #12
 801a814:	bd30      	pop	{r4, r5, pc}
 801a816:	9b00      	ldr	r3, [sp, #0]
 801a818:	b18b      	cbz	r3, 801a83e <rcl_get_default_domain_id+0x46>
 801a81a:	7818      	ldrb	r0, [r3, #0]
 801a81c:	2800      	cmp	r0, #0
 801a81e:	d0f8      	beq.n	801a812 <rcl_get_default_domain_id+0x1a>
 801a820:	a901      	add	r1, sp, #4
 801a822:	4618      	mov	r0, r3
 801a824:	9201      	str	r2, [sp, #4]
 801a826:	f000 fc8f 	bl	801b148 <strtoul>
 801a82a:	4605      	mov	r5, r0
 801a82c:	b150      	cbz	r0, 801a844 <rcl_get_default_domain_id+0x4c>
 801a82e:	1c43      	adds	r3, r0, #1
 801a830:	d00d      	beq.n	801a84e <rcl_get_default_domain_id+0x56>
 801a832:	2000      	movs	r0, #0
 801a834:	6025      	str	r5, [r4, #0]
 801a836:	e7ec      	b.n	801a812 <rcl_get_default_domain_id+0x1a>
 801a838:	200b      	movs	r0, #11
 801a83a:	b003      	add	sp, #12
 801a83c:	bd30      	pop	{r4, r5, pc}
 801a83e:	4618      	mov	r0, r3
 801a840:	b003      	add	sp, #12
 801a842:	bd30      	pop	{r4, r5, pc}
 801a844:	9b01      	ldr	r3, [sp, #4]
 801a846:	781b      	ldrb	r3, [r3, #0]
 801a848:	2b00      	cmp	r3, #0
 801a84a:	d0f2      	beq.n	801a832 <rcl_get_default_domain_id+0x3a>
 801a84c:	e7e0      	b.n	801a810 <rcl_get_default_domain_id+0x18>
 801a84e:	f001 f8c1 	bl	801b9d4 <__errno>
 801a852:	6803      	ldr	r3, [r0, #0]
 801a854:	2b22      	cmp	r3, #34	; 0x22
 801a856:	d1ec      	bne.n	801a832 <rcl_get_default_domain_id+0x3a>
 801a858:	e7da      	b.n	801a810 <rcl_get_default_domain_id+0x18>
 801a85a:	bf00      	nop
 801a85c:	0801da10 	.word	0x0801da10

0801a860 <rcl_expand_topic_name>:
 801a860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a864:	b08d      	sub	sp, #52	; 0x34
 801a866:	4698      	mov	r8, r3
 801a868:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a86a:	9207      	str	r2, [sp, #28]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	bf18      	it	ne
 801a870:	f1b8 0f00 	cmpne.w	r8, #0
 801a874:	bf0c      	ite	eq
 801a876:	2301      	moveq	r3, #1
 801a878:	2300      	movne	r3, #0
 801a87a:	2a00      	cmp	r2, #0
 801a87c:	bf08      	it	eq
 801a87e:	f043 0301 	orreq.w	r3, r3, #1
 801a882:	2900      	cmp	r1, #0
 801a884:	bf08      	it	eq
 801a886:	f043 0301 	orreq.w	r3, r3, #1
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d13d      	bne.n	801a90a <rcl_expand_topic_name+0xaa>
 801a88e:	fab0 f280 	clz	r2, r0
 801a892:	4604      	mov	r4, r0
 801a894:	0952      	lsrs	r2, r2, #5
 801a896:	2800      	cmp	r0, #0
 801a898:	d037      	beq.n	801a90a <rcl_expand_topic_name+0xaa>
 801a89a:	460f      	mov	r7, r1
 801a89c:	a90b      	add	r1, sp, #44	; 0x2c
 801a89e:	f000 f945 	bl	801ab2c <rcl_validate_topic_name>
 801a8a2:	4605      	mov	r5, r0
 801a8a4:	bb68      	cbnz	r0, 801a902 <rcl_expand_topic_name+0xa2>
 801a8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d137      	bne.n	801a91c <rcl_expand_topic_name+0xbc>
 801a8ac:	4602      	mov	r2, r0
 801a8ae:	a90b      	add	r1, sp, #44	; 0x2c
 801a8b0:	4638      	mov	r0, r7
 801a8b2:	f7f6 fab3 	bl	8010e1c <rmw_validate_node_name>
 801a8b6:	bb68      	cbnz	r0, 801a914 <rcl_expand_topic_name+0xb4>
 801a8b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d133      	bne.n	801a926 <rcl_expand_topic_name+0xc6>
 801a8be:	462a      	mov	r2, r5
 801a8c0:	a90b      	add	r1, sp, #44	; 0x2c
 801a8c2:	9807      	ldr	r0, [sp, #28]
 801a8c4:	f7f6 fa8c 	bl	8010de0 <rmw_validate_namespace>
 801a8c8:	bb20      	cbnz	r0, 801a914 <rcl_expand_topic_name+0xb4>
 801a8ca:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801a8cc:	2d00      	cmp	r5, #0
 801a8ce:	f040 80a2 	bne.w	801aa16 <rcl_expand_topic_name+0x1b6>
 801a8d2:	217b      	movs	r1, #123	; 0x7b
 801a8d4:	4620      	mov	r0, r4
 801a8d6:	f000 fff1 	bl	801b8bc <strchr>
 801a8da:	7823      	ldrb	r3, [r4, #0]
 801a8dc:	4681      	mov	r9, r0
 801a8de:	bb20      	cbnz	r0, 801a92a <rcl_expand_topic_name+0xca>
 801a8e0:	2b2f      	cmp	r3, #47	; 0x2f
 801a8e2:	d122      	bne.n	801a92a <rcl_expand_topic_name+0xca>
 801a8e4:	ab19      	add	r3, sp, #100	; 0x64
 801a8e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a8ea:	ab16      	add	r3, sp, #88	; 0x58
 801a8ec:	e88d 0003 	stmia.w	sp, {r0, r1}
 801a8f0:	4620      	mov	r0, r4
 801a8f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 801a8f4:	f7f6 f956 	bl	8010ba4 <rcutils_strdup>
 801a8f8:	2800      	cmp	r0, #0
 801a8fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a8fc:	bf08      	it	eq
 801a8fe:	250a      	moveq	r5, #10
 801a900:	6018      	str	r0, [r3, #0]
 801a902:	4628      	mov	r0, r5
 801a904:	b00d      	add	sp, #52	; 0x34
 801a906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a90a:	250b      	movs	r5, #11
 801a90c:	4628      	mov	r0, r5
 801a90e:	b00d      	add	sp, #52	; 0x34
 801a910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a914:	f7fc f97a 	bl	8016c0c <rcl_convert_rmw_ret_to_rcl_ret>
 801a918:	4605      	mov	r5, r0
 801a91a:	e7f2      	b.n	801a902 <rcl_expand_topic_name+0xa2>
 801a91c:	2567      	movs	r5, #103	; 0x67
 801a91e:	4628      	mov	r0, r5
 801a920:	b00d      	add	sp, #52	; 0x34
 801a922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a926:	25c9      	movs	r5, #201	; 0xc9
 801a928:	e7eb      	b.n	801a902 <rcl_expand_topic_name+0xa2>
 801a92a:	2b7e      	cmp	r3, #126	; 0x7e
 801a92c:	d075      	beq.n	801aa1a <rcl_expand_topic_name+0x1ba>
 801a92e:	f1b9 0f00 	cmp.w	r9, #0
 801a932:	f000 80c2 	beq.w	801aaba <rcl_expand_topic_name+0x25a>
 801a936:	2300      	movs	r3, #0
 801a938:	46a2      	mov	sl, r4
 801a93a:	461e      	mov	r6, r3
 801a93c:	9508      	str	r5, [sp, #32]
 801a93e:	4655      	mov	r5, sl
 801a940:	9409      	str	r4, [sp, #36]	; 0x24
 801a942:	46b2      	mov	sl, r6
 801a944:	464c      	mov	r4, r9
 801a946:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801a94a:	2c00      	cmp	r4, #0
 801a94c:	f000 80ae 	beq.w	801aaac <rcl_expand_topic_name+0x24c>
 801a950:	217d      	movs	r1, #125	; 0x7d
 801a952:	4628      	mov	r0, r5
 801a954:	f000 ffb2 	bl	801b8bc <strchr>
 801a958:	eba0 0904 	sub.w	r9, r0, r4
 801a95c:	4621      	mov	r1, r4
 801a95e:	4869      	ldr	r0, [pc, #420]	; (801ab04 <rcl_expand_topic_name+0x2a4>)
 801a960:	f109 0601 	add.w	r6, r9, #1
 801a964:	4632      	mov	r2, r6
 801a966:	f000 ffb6 	bl	801b8d6 <strncmp>
 801a96a:	2800      	cmp	r0, #0
 801a96c:	d051      	beq.n	801aa12 <rcl_expand_topic_name+0x1b2>
 801a96e:	4632      	mov	r2, r6
 801a970:	4621      	mov	r1, r4
 801a972:	4865      	ldr	r0, [pc, #404]	; (801ab08 <rcl_expand_topic_name+0x2a8>)
 801a974:	f000 ffaf 	bl	801b8d6 <strncmp>
 801a978:	b128      	cbz	r0, 801a986 <rcl_expand_topic_name+0x126>
 801a97a:	4632      	mov	r2, r6
 801a97c:	4621      	mov	r1, r4
 801a97e:	4863      	ldr	r0, [pc, #396]	; (801ab0c <rcl_expand_topic_name+0x2ac>)
 801a980:	f000 ffa9 	bl	801b8d6 <strncmp>
 801a984:	bb38      	cbnz	r0, 801a9d6 <rcl_expand_topic_name+0x176>
 801a986:	46d9      	mov	r9, fp
 801a988:	ab18      	add	r3, sp, #96	; 0x60
 801a98a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801a98e:	ab16      	add	r3, sp, #88	; 0x58
 801a990:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a994:	4620      	mov	r0, r4
 801a996:	4631      	mov	r1, r6
 801a998:	cb0c      	ldmia	r3, {r2, r3}
 801a99a:	f7f6 f925 	bl	8010be8 <rcutils_strndup>
 801a99e:	4604      	mov	r4, r0
 801a9a0:	2800      	cmp	r0, #0
 801a9a2:	f000 80a3 	beq.w	801aaec <rcl_expand_topic_name+0x28c>
 801a9a6:	464a      	mov	r2, r9
 801a9a8:	4628      	mov	r0, r5
 801a9aa:	ab16      	add	r3, sp, #88	; 0x58
 801a9ac:	4621      	mov	r1, r4
 801a9ae:	f7f5 fff9 	bl	80109a4 <rcutils_repl_str>
 801a9b2:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a9b4:	4605      	mov	r5, r0
 801a9b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9b8:	4620      	mov	r0, r4
 801a9ba:	4798      	blx	r3
 801a9bc:	4650      	mov	r0, sl
 801a9be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a9c2:	4798      	blx	r3
 801a9c4:	2d00      	cmp	r5, #0
 801a9c6:	d06c      	beq.n	801aaa2 <rcl_expand_topic_name+0x242>
 801a9c8:	217b      	movs	r1, #123	; 0x7b
 801a9ca:	4628      	mov	r0, r5
 801a9cc:	f000 ff76 	bl	801b8bc <strchr>
 801a9d0:	46aa      	mov	sl, r5
 801a9d2:	4604      	mov	r4, r0
 801a9d4:	e7b9      	b.n	801a94a <rcl_expand_topic_name+0xea>
 801a9d6:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 801a9da:	1c61      	adds	r1, r4, #1
 801a9dc:	4640      	mov	r0, r8
 801a9de:	f7fe fca5 	bl	801932c <rcutils_string_map_getn>
 801a9e2:	4681      	mov	r9, r0
 801a9e4:	2800      	cmp	r0, #0
 801a9e6:	d1cf      	bne.n	801a988 <rcl_expand_topic_name+0x128>
 801a9e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a9ea:	aa18      	add	r2, sp, #96	; 0x60
 801a9ec:	2569      	movs	r5, #105	; 0x69
 801a9ee:	6018      	str	r0, [r3, #0]
 801a9f0:	ab16      	add	r3, sp, #88	; 0x58
 801a9f2:	ca07      	ldmia	r2, {r0, r1, r2}
 801a9f4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801a9f8:	4631      	mov	r1, r6
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	cb0c      	ldmia	r3, {r2, r3}
 801a9fe:	f7f6 f8f3 	bl	8010be8 <rcutils_strndup>
 801aa02:	991a      	ldr	r1, [sp, #104]	; 0x68
 801aa04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa06:	4798      	blx	r3
 801aa08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aa0a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801aa0c:	4650      	mov	r0, sl
 801aa0e:	4798      	blx	r3
 801aa10:	e777      	b.n	801a902 <rcl_expand_topic_name+0xa2>
 801aa12:	46b9      	mov	r9, r7
 801aa14:	e7b8      	b.n	801a988 <rcl_expand_topic_name+0x128>
 801aa16:	25ca      	movs	r5, #202	; 0xca
 801aa18:	e773      	b.n	801a902 <rcl_expand_topic_name+0xa2>
 801aa1a:	9e07      	ldr	r6, [sp, #28]
 801aa1c:	4630      	mov	r0, r6
 801aa1e:	f7e5 fc19 	bl	8000254 <strlen>
 801aa22:	4a3b      	ldr	r2, [pc, #236]	; (801ab10 <rcl_expand_topic_name+0x2b0>)
 801aa24:	4b3b      	ldr	r3, [pc, #236]	; (801ab14 <rcl_expand_topic_name+0x2b4>)
 801aa26:	9603      	str	r6, [sp, #12]
 801aa28:	2801      	cmp	r0, #1
 801aa2a:	bf18      	it	ne
 801aa2c:	4613      	movne	r3, r2
 801aa2e:	9704      	str	r7, [sp, #16]
 801aa30:	9302      	str	r3, [sp, #8]
 801aa32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801aa34:	9300      	str	r3, [sp, #0]
 801aa36:	1c63      	adds	r3, r4, #1
 801aa38:	9305      	str	r3, [sp, #20]
 801aa3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801aa3e:	9301      	str	r3, [sp, #4]
 801aa40:	ab16      	add	r3, sp, #88	; 0x58
 801aa42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aa44:	f7f5 ff74 	bl	8010930 <rcutils_format_string_limit>
 801aa48:	4606      	mov	r6, r0
 801aa4a:	b350      	cbz	r0, 801aaa2 <rcl_expand_topic_name+0x242>
 801aa4c:	f1b9 0f00 	cmp.w	r9, #0
 801aa50:	d005      	beq.n	801aa5e <rcl_expand_topic_name+0x1fe>
 801aa52:	217b      	movs	r1, #123	; 0x7b
 801aa54:	46b2      	mov	sl, r6
 801aa56:	f000 ff31 	bl	801b8bc <strchr>
 801aa5a:	4681      	mov	r9, r0
 801aa5c:	e76e      	b.n	801a93c <rcl_expand_topic_name+0xdc>
 801aa5e:	7833      	ldrb	r3, [r6, #0]
 801aa60:	2b2f      	cmp	r3, #47	; 0x2f
 801aa62:	d01b      	beq.n	801aa9c <rcl_expand_topic_name+0x23c>
 801aa64:	9c07      	ldr	r4, [sp, #28]
 801aa66:	4620      	mov	r0, r4
 801aa68:	f7e5 fbf4 	bl	8000254 <strlen>
 801aa6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801aa70:	4a29      	ldr	r2, [pc, #164]	; (801ab18 <rcl_expand_topic_name+0x2b8>)
 801aa72:	9301      	str	r3, [sp, #4]
 801aa74:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801aa76:	9604      	str	r6, [sp, #16]
 801aa78:	9300      	str	r3, [sp, #0]
 801aa7a:	4b28      	ldr	r3, [pc, #160]	; (801ab1c <rcl_expand_topic_name+0x2bc>)
 801aa7c:	9403      	str	r4, [sp, #12]
 801aa7e:	2801      	cmp	r0, #1
 801aa80:	bf18      	it	ne
 801aa82:	4613      	movne	r3, r2
 801aa84:	9302      	str	r3, [sp, #8]
 801aa86:	ab16      	add	r3, sp, #88	; 0x58
 801aa88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aa8a:	f7f5 ff51 	bl	8010930 <rcutils_format_string_limit>
 801aa8e:	4603      	mov	r3, r0
 801aa90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801aa92:	4630      	mov	r0, r6
 801aa94:	991a      	ldr	r1, [sp, #104]	; 0x68
 801aa96:	461e      	mov	r6, r3
 801aa98:	4790      	blx	r2
 801aa9a:	b116      	cbz	r6, 801aaa2 <rcl_expand_topic_name+0x242>
 801aa9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aa9e:	601e      	str	r6, [r3, #0]
 801aaa0:	e72f      	b.n	801a902 <rcl_expand_topic_name+0xa2>
 801aaa2:	2300      	movs	r3, #0
 801aaa4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801aaa6:	250a      	movs	r5, #10
 801aaa8:	6013      	str	r3, [r2, #0]
 801aaaa:	e72a      	b.n	801a902 <rcl_expand_topic_name+0xa2>
 801aaac:	4653      	mov	r3, sl
 801aaae:	4656      	mov	r6, sl
 801aab0:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d1d2      	bne.n	801aa5e <rcl_expand_topic_name+0x1fe>
 801aab8:	7823      	ldrb	r3, [r4, #0]
 801aaba:	2b2f      	cmp	r3, #47	; 0x2f
 801aabc:	d01e      	beq.n	801aafc <rcl_expand_topic_name+0x29c>
 801aabe:	9e07      	ldr	r6, [sp, #28]
 801aac0:	4630      	mov	r0, r6
 801aac2:	f7e5 fbc7 	bl	8000254 <strlen>
 801aac6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801aac8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801aacc:	9603      	str	r6, [sp, #12]
 801aace:	9404      	str	r4, [sp, #16]
 801aad0:	e9cd 2300 	strd	r2, r3, [sp]
 801aad4:	4a10      	ldr	r2, [pc, #64]	; (801ab18 <rcl_expand_topic_name+0x2b8>)
 801aad6:	4b11      	ldr	r3, [pc, #68]	; (801ab1c <rcl_expand_topic_name+0x2bc>)
 801aad8:	2801      	cmp	r0, #1
 801aada:	bf18      	it	ne
 801aadc:	4613      	movne	r3, r2
 801aade:	9302      	str	r3, [sp, #8]
 801aae0:	ab16      	add	r3, sp, #88	; 0x58
 801aae2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aae4:	f7f5 ff24 	bl	8010930 <rcutils_format_string_limit>
 801aae8:	4606      	mov	r6, r0
 801aaea:	e7d6      	b.n	801aa9a <rcl_expand_topic_name+0x23a>
 801aaec:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 801aaf0:	4650      	mov	r0, sl
 801aaf2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801aaf4:	6014      	str	r4, [r2, #0]
 801aaf6:	250a      	movs	r5, #10
 801aaf8:	4798      	blx	r3
 801aafa:	e702      	b.n	801a902 <rcl_expand_topic_name+0xa2>
 801aafc:	2300      	movs	r3, #0
 801aafe:	461e      	mov	r6, r3
 801ab00:	e7cc      	b.n	801aa9c <rcl_expand_topic_name+0x23c>
 801ab02:	bf00      	nop
 801ab04:	0801da28 	.word	0x0801da28
 801ab08:	0801da30 	.word	0x0801da30
 801ab0c:	0801da38 	.word	0x0801da38
 801ab10:	0801da20 	.word	0x0801da20
 801ab14:	0801d3a8 	.word	0x0801d3a8
 801ab18:	0801cdac 	.word	0x0801cdac
 801ab1c:	0801cda4 	.word	0x0801cda4

0801ab20 <rcl_get_default_topic_name_substitutions>:
 801ab20:	2800      	cmp	r0, #0
 801ab22:	bf0c      	ite	eq
 801ab24:	200b      	moveq	r0, #11
 801ab26:	2000      	movne	r0, #0
 801ab28:	4770      	bx	lr
 801ab2a:	bf00      	nop

0801ab2c <rcl_validate_topic_name>:
 801ab2c:	2800      	cmp	r0, #0
 801ab2e:	f000 8089 	beq.w	801ac44 <rcl_validate_topic_name+0x118>
 801ab32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab36:	460e      	mov	r6, r1
 801ab38:	2900      	cmp	r1, #0
 801ab3a:	f000 8085 	beq.w	801ac48 <rcl_validate_topic_name+0x11c>
 801ab3e:	4604      	mov	r4, r0
 801ab40:	4617      	mov	r7, r2
 801ab42:	f7e5 fb87 	bl	8000254 <strlen>
 801ab46:	b1b0      	cbz	r0, 801ab76 <rcl_validate_topic_name+0x4a>
 801ab48:	f894 e000 	ldrb.w	lr, [r4]
 801ab4c:	f8df c160 	ldr.w	ip, [pc, #352]	; 801acb0 <rcl_validate_topic_name+0x184>
 801ab50:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801ab54:	f013 0304 	ands.w	r3, r3, #4
 801ab58:	d139      	bne.n	801abce <rcl_validate_topic_name+0xa2>
 801ab5a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 801ab5e:	f814 2008 	ldrb.w	r2, [r4, r8]
 801ab62:	2a2f      	cmp	r2, #47	; 0x2f
 801ab64:	d10f      	bne.n	801ab86 <rcl_validate_topic_name+0x5a>
 801ab66:	2202      	movs	r2, #2
 801ab68:	6032      	str	r2, [r6, #0]
 801ab6a:	b3a7      	cbz	r7, 801abd6 <rcl_validate_topic_name+0xaa>
 801ab6c:	4618      	mov	r0, r3
 801ab6e:	f8c7 8000 	str.w	r8, [r7]
 801ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab76:	2301      	movs	r3, #1
 801ab78:	6033      	str	r3, [r6, #0]
 801ab7a:	b367      	cbz	r7, 801abd6 <rcl_validate_topic_name+0xaa>
 801ab7c:	2300      	movs	r3, #0
 801ab7e:	4618      	mov	r0, r3
 801ab80:	603b      	str	r3, [r7, #0]
 801ab82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab86:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 801ab8a:	461d      	mov	r5, r3
 801ab8c:	4619      	mov	r1, r3
 801ab8e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801ab92:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 801ab96:	f1b9 0f09 	cmp.w	r9, #9
 801ab9a:	d91f      	bls.n	801abdc <rcl_validate_topic_name+0xb0>
 801ab9c:	f022 0920 	bic.w	r9, r2, #32
 801aba0:	f1a9 0941 	sub.w	r9, r9, #65	; 0x41
 801aba4:	f1b9 0f19 	cmp.w	r9, #25
 801aba8:	d918      	bls.n	801abdc <rcl_validate_topic_name+0xb0>
 801abaa:	2a5f      	cmp	r2, #95	; 0x5f
 801abac:	d024      	beq.n	801abf8 <rcl_validate_topic_name+0xcc>
 801abae:	2a2f      	cmp	r2, #47	; 0x2f
 801abb0:	d058      	beq.n	801ac64 <rcl_validate_topic_name+0x138>
 801abb2:	2a7e      	cmp	r2, #126	; 0x7e
 801abb4:	d04a      	beq.n	801ac4c <rcl_validate_topic_name+0x120>
 801abb6:	2a7b      	cmp	r2, #123	; 0x7b
 801abb8:	d05b      	beq.n	801ac72 <rcl_validate_topic_name+0x146>
 801abba:	2a7d      	cmp	r2, #125	; 0x7d
 801abbc:	d169      	bne.n	801ac92 <rcl_validate_topic_name+0x166>
 801abbe:	2d00      	cmp	r5, #0
 801abc0:	d15c      	bne.n	801ac7c <rcl_validate_topic_name+0x150>
 801abc2:	2305      	movs	r3, #5
 801abc4:	6033      	str	r3, [r6, #0]
 801abc6:	b137      	cbz	r7, 801abd6 <rcl_validate_topic_name+0xaa>
 801abc8:	2000      	movs	r0, #0
 801abca:	6039      	str	r1, [r7, #0]
 801abcc:	e7d9      	b.n	801ab82 <rcl_validate_topic_name+0x56>
 801abce:	2304      	movs	r3, #4
 801abd0:	6033      	str	r3, [r6, #0]
 801abd2:	2f00      	cmp	r7, #0
 801abd4:	d1d2      	bne.n	801ab7c <rcl_validate_topic_name+0x50>
 801abd6:	2000      	movs	r0, #0
 801abd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abdc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801abe0:	0752      	lsls	r2, r2, #29
 801abe2:	d509      	bpl.n	801abf8 <rcl_validate_topic_name+0xcc>
 801abe4:	2900      	cmp	r1, #0
 801abe6:	bf0c      	ite	eq
 801abe8:	2200      	moveq	r2, #0
 801abea:	f005 0201 	andne.w	r2, r5, #1
 801abee:	b11a      	cbz	r2, 801abf8 <rcl_validate_topic_name+0xcc>
 801abf0:	1e4d      	subs	r5, r1, #1
 801abf2:	429d      	cmp	r5, r3
 801abf4:	d031      	beq.n	801ac5a <rcl_validate_topic_name+0x12e>
 801abf6:	4615      	mov	r5, r2
 801abf8:	3101      	adds	r1, #1
 801abfa:	4288      	cmp	r0, r1
 801abfc:	d1c7      	bne.n	801ab8e <rcl_validate_topic_name+0x62>
 801abfe:	2d00      	cmp	r5, #0
 801ac00:	d142      	bne.n	801ac88 <rcl_validate_topic_name+0x15c>
 801ac02:	4628      	mov	r0, r5
 801ac04:	2301      	movs	r3, #1
 801ac06:	e00c      	b.n	801ac22 <rcl_validate_topic_name+0xf6>
 801ac08:	f1be 0f7e 	cmp.w	lr, #126	; 0x7e
 801ac0c:	d101      	bne.n	801ac12 <rcl_validate_topic_name+0xe6>
 801ac0e:	2801      	cmp	r0, #1
 801ac10:	d047      	beq.n	801aca2 <rcl_validate_topic_name+0x176>
 801ac12:	1c5a      	adds	r2, r3, #1
 801ac14:	428b      	cmp	r3, r1
 801ac16:	f100 0001 	add.w	r0, r0, #1
 801ac1a:	f104 0401 	add.w	r4, r4, #1
 801ac1e:	4613      	mov	r3, r2
 801ac20:	d22e      	bcs.n	801ac80 <rcl_validate_topic_name+0x154>
 801ac22:	4580      	cmp	r8, r0
 801ac24:	d0f5      	beq.n	801ac12 <rcl_validate_topic_name+0xe6>
 801ac26:	7822      	ldrb	r2, [r4, #0]
 801ac28:	2a2f      	cmp	r2, #47	; 0x2f
 801ac2a:	d1ed      	bne.n	801ac08 <rcl_validate_topic_name+0xdc>
 801ac2c:	7862      	ldrb	r2, [r4, #1]
 801ac2e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ac32:	0752      	lsls	r2, r2, #29
 801ac34:	d5ed      	bpl.n	801ac12 <rcl_validate_topic_name+0xe6>
 801ac36:	2204      	movs	r2, #4
 801ac38:	6032      	str	r2, [r6, #0]
 801ac3a:	2f00      	cmp	r7, #0
 801ac3c:	d0cb      	beq.n	801abd6 <rcl_validate_topic_name+0xaa>
 801ac3e:	2000      	movs	r0, #0
 801ac40:	603b      	str	r3, [r7, #0]
 801ac42:	e79e      	b.n	801ab82 <rcl_validate_topic_name+0x56>
 801ac44:	200b      	movs	r0, #11
 801ac46:	4770      	bx	lr
 801ac48:	200b      	movs	r0, #11
 801ac4a:	e79a      	b.n	801ab82 <rcl_validate_topic_name+0x56>
 801ac4c:	2900      	cmp	r1, #0
 801ac4e:	d0d3      	beq.n	801abf8 <rcl_validate_topic_name+0xcc>
 801ac50:	2306      	movs	r3, #6
 801ac52:	6033      	str	r3, [r6, #0]
 801ac54:	2f00      	cmp	r7, #0
 801ac56:	d1b7      	bne.n	801abc8 <rcl_validate_topic_name+0x9c>
 801ac58:	e7bd      	b.n	801abd6 <rcl_validate_topic_name+0xaa>
 801ac5a:	2309      	movs	r3, #9
 801ac5c:	6033      	str	r3, [r6, #0]
 801ac5e:	2f00      	cmp	r7, #0
 801ac60:	d1b2      	bne.n	801abc8 <rcl_validate_topic_name+0x9c>
 801ac62:	e7b8      	b.n	801abd6 <rcl_validate_topic_name+0xaa>
 801ac64:	2d00      	cmp	r5, #0
 801ac66:	d0c7      	beq.n	801abf8 <rcl_validate_topic_name+0xcc>
 801ac68:	2308      	movs	r3, #8
 801ac6a:	6033      	str	r3, [r6, #0]
 801ac6c:	2f00      	cmp	r7, #0
 801ac6e:	d1ab      	bne.n	801abc8 <rcl_validate_topic_name+0x9c>
 801ac70:	e7b1      	b.n	801abd6 <rcl_validate_topic_name+0xaa>
 801ac72:	2d00      	cmp	r5, #0
 801ac74:	d1f8      	bne.n	801ac68 <rcl_validate_topic_name+0x13c>
 801ac76:	460b      	mov	r3, r1
 801ac78:	2501      	movs	r5, #1
 801ac7a:	e7bd      	b.n	801abf8 <rcl_validate_topic_name+0xcc>
 801ac7c:	2500      	movs	r5, #0
 801ac7e:	e7bb      	b.n	801abf8 <rcl_validate_topic_name+0xcc>
 801ac80:	2300      	movs	r3, #0
 801ac82:	4618      	mov	r0, r3
 801ac84:	6033      	str	r3, [r6, #0]
 801ac86:	e77c      	b.n	801ab82 <rcl_validate_topic_name+0x56>
 801ac88:	2205      	movs	r2, #5
 801ac8a:	6032      	str	r2, [r6, #0]
 801ac8c:	2f00      	cmp	r7, #0
 801ac8e:	d1d6      	bne.n	801ac3e <rcl_validate_topic_name+0x112>
 801ac90:	e7a1      	b.n	801abd6 <rcl_validate_topic_name+0xaa>
 801ac92:	2d00      	cmp	r5, #0
 801ac94:	bf14      	ite	ne
 801ac96:	2308      	movne	r3, #8
 801ac98:	2303      	moveq	r3, #3
 801ac9a:	6033      	str	r3, [r6, #0]
 801ac9c:	2f00      	cmp	r7, #0
 801ac9e:	d193      	bne.n	801abc8 <rcl_validate_topic_name+0x9c>
 801aca0:	e799      	b.n	801abd6 <rcl_validate_topic_name+0xaa>
 801aca2:	2307      	movs	r3, #7
 801aca4:	6033      	str	r3, [r6, #0]
 801aca6:	2f00      	cmp	r7, #0
 801aca8:	d095      	beq.n	801abd6 <rcl_validate_topic_name+0xaa>
 801acaa:	2301      	movs	r3, #1
 801acac:	e7c7      	b.n	801ac3e <rcl_validate_topic_name+0x112>
 801acae:	bf00      	nop
 801acb0:	0801dab4 	.word	0x0801dab4

0801acb4 <calloc>:
 801acb4:	4b02      	ldr	r3, [pc, #8]	; (801acc0 <calloc+0xc>)
 801acb6:	460a      	mov	r2, r1
 801acb8:	4601      	mov	r1, r0
 801acba:	6818      	ldr	r0, [r3, #0]
 801acbc:	f000 b802 	b.w	801acc4 <_calloc_r>
 801acc0:	200003dc 	.word	0x200003dc

0801acc4 <_calloc_r>:
 801acc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801acc6:	fba1 2402 	umull	r2, r4, r1, r2
 801acca:	b94c      	cbnz	r4, 801ace0 <_calloc_r+0x1c>
 801accc:	4611      	mov	r1, r2
 801acce:	9201      	str	r2, [sp, #4]
 801acd0:	f000 f898 	bl	801ae04 <_malloc_r>
 801acd4:	9a01      	ldr	r2, [sp, #4]
 801acd6:	4605      	mov	r5, r0
 801acd8:	b930      	cbnz	r0, 801ace8 <_calloc_r+0x24>
 801acda:	4628      	mov	r0, r5
 801acdc:	b003      	add	sp, #12
 801acde:	bd30      	pop	{r4, r5, pc}
 801ace0:	220c      	movs	r2, #12
 801ace2:	6002      	str	r2, [r0, #0]
 801ace4:	2500      	movs	r5, #0
 801ace6:	e7f8      	b.n	801acda <_calloc_r+0x16>
 801ace8:	4621      	mov	r1, r4
 801acea:	f000 fddf 	bl	801b8ac <memset>
 801acee:	e7f4      	b.n	801acda <_calloc_r+0x16>

0801acf0 <exit>:
 801acf0:	b508      	push	{r3, lr}
 801acf2:	4b06      	ldr	r3, [pc, #24]	; (801ad0c <exit+0x1c>)
 801acf4:	4604      	mov	r4, r0
 801acf6:	b113      	cbz	r3, 801acfe <exit+0xe>
 801acf8:	2100      	movs	r1, #0
 801acfa:	f3af 8000 	nop.w
 801acfe:	4b04      	ldr	r3, [pc, #16]	; (801ad10 <exit+0x20>)
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	b103      	cbz	r3, 801ad06 <exit+0x16>
 801ad04:	4798      	blx	r3
 801ad06:	4620      	mov	r0, r4
 801ad08:	f7e6 fec0 	bl	8001a8c <_exit>
 801ad0c:	00000000 	.word	0x00000000
 801ad10:	2001166c 	.word	0x2001166c

0801ad14 <getenv>:
 801ad14:	b507      	push	{r0, r1, r2, lr}
 801ad16:	4b04      	ldr	r3, [pc, #16]	; (801ad28 <getenv+0x14>)
 801ad18:	4601      	mov	r1, r0
 801ad1a:	aa01      	add	r2, sp, #4
 801ad1c:	6818      	ldr	r0, [r3, #0]
 801ad1e:	f000 f805 	bl	801ad2c <_findenv_r>
 801ad22:	b003      	add	sp, #12
 801ad24:	f85d fb04 	ldr.w	pc, [sp], #4
 801ad28:	200003dc 	.word	0x200003dc

0801ad2c <_findenv_r>:
 801ad2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad30:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801ada0 <_findenv_r+0x74>
 801ad34:	4607      	mov	r7, r0
 801ad36:	4689      	mov	r9, r1
 801ad38:	4616      	mov	r6, r2
 801ad3a:	f000 fead 	bl	801ba98 <__env_lock>
 801ad3e:	f8da 4000 	ldr.w	r4, [sl]
 801ad42:	b134      	cbz	r4, 801ad52 <_findenv_r+0x26>
 801ad44:	464b      	mov	r3, r9
 801ad46:	4698      	mov	r8, r3
 801ad48:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ad4c:	b13a      	cbz	r2, 801ad5e <_findenv_r+0x32>
 801ad4e:	2a3d      	cmp	r2, #61	; 0x3d
 801ad50:	d1f9      	bne.n	801ad46 <_findenv_r+0x1a>
 801ad52:	4638      	mov	r0, r7
 801ad54:	f000 fea6 	bl	801baa4 <__env_unlock>
 801ad58:	2000      	movs	r0, #0
 801ad5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad5e:	eba8 0809 	sub.w	r8, r8, r9
 801ad62:	46a3      	mov	fp, r4
 801ad64:	f854 0b04 	ldr.w	r0, [r4], #4
 801ad68:	2800      	cmp	r0, #0
 801ad6a:	d0f2      	beq.n	801ad52 <_findenv_r+0x26>
 801ad6c:	4642      	mov	r2, r8
 801ad6e:	4649      	mov	r1, r9
 801ad70:	f000 fdb1 	bl	801b8d6 <strncmp>
 801ad74:	2800      	cmp	r0, #0
 801ad76:	d1f4      	bne.n	801ad62 <_findenv_r+0x36>
 801ad78:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801ad7c:	eb03 0508 	add.w	r5, r3, r8
 801ad80:	f813 3008 	ldrb.w	r3, [r3, r8]
 801ad84:	2b3d      	cmp	r3, #61	; 0x3d
 801ad86:	d1ec      	bne.n	801ad62 <_findenv_r+0x36>
 801ad88:	f8da 3000 	ldr.w	r3, [sl]
 801ad8c:	ebab 0303 	sub.w	r3, fp, r3
 801ad90:	109b      	asrs	r3, r3, #2
 801ad92:	4638      	mov	r0, r7
 801ad94:	6033      	str	r3, [r6, #0]
 801ad96:	f000 fe85 	bl	801baa4 <__env_unlock>
 801ad9a:	1c68      	adds	r0, r5, #1
 801ad9c:	e7dd      	b.n	801ad5a <_findenv_r+0x2e>
 801ad9e:	bf00      	nop
 801ada0:	20000008 	.word	0x20000008

0801ada4 <malloc>:
 801ada4:	4b02      	ldr	r3, [pc, #8]	; (801adb0 <malloc+0xc>)
 801ada6:	4601      	mov	r1, r0
 801ada8:	6818      	ldr	r0, [r3, #0]
 801adaa:	f000 b82b 	b.w	801ae04 <_malloc_r>
 801adae:	bf00      	nop
 801adb0:	200003dc 	.word	0x200003dc

0801adb4 <free>:
 801adb4:	4b02      	ldr	r3, [pc, #8]	; (801adc0 <free+0xc>)
 801adb6:	4601      	mov	r1, r0
 801adb8:	6818      	ldr	r0, [r3, #0]
 801adba:	f000 be79 	b.w	801bab0 <_free_r>
 801adbe:	bf00      	nop
 801adc0:	200003dc 	.word	0x200003dc

0801adc4 <sbrk_aligned>:
 801adc4:	b570      	push	{r4, r5, r6, lr}
 801adc6:	4e0e      	ldr	r6, [pc, #56]	; (801ae00 <sbrk_aligned+0x3c>)
 801adc8:	460c      	mov	r4, r1
 801adca:	6831      	ldr	r1, [r6, #0]
 801adcc:	4605      	mov	r5, r0
 801adce:	b911      	cbnz	r1, 801add6 <sbrk_aligned+0x12>
 801add0:	f000 fdde 	bl	801b990 <_sbrk_r>
 801add4:	6030      	str	r0, [r6, #0]
 801add6:	4621      	mov	r1, r4
 801add8:	4628      	mov	r0, r5
 801adda:	f000 fdd9 	bl	801b990 <_sbrk_r>
 801adde:	1c43      	adds	r3, r0, #1
 801ade0:	d00a      	beq.n	801adf8 <sbrk_aligned+0x34>
 801ade2:	1cc4      	adds	r4, r0, #3
 801ade4:	f024 0403 	bic.w	r4, r4, #3
 801ade8:	42a0      	cmp	r0, r4
 801adea:	d007      	beq.n	801adfc <sbrk_aligned+0x38>
 801adec:	1a21      	subs	r1, r4, r0
 801adee:	4628      	mov	r0, r5
 801adf0:	f000 fdce 	bl	801b990 <_sbrk_r>
 801adf4:	3001      	adds	r0, #1
 801adf6:	d101      	bne.n	801adfc <sbrk_aligned+0x38>
 801adf8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801adfc:	4620      	mov	r0, r4
 801adfe:	bd70      	pop	{r4, r5, r6, pc}
 801ae00:	20011530 	.word	0x20011530

0801ae04 <_malloc_r>:
 801ae04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae08:	1ccd      	adds	r5, r1, #3
 801ae0a:	f025 0503 	bic.w	r5, r5, #3
 801ae0e:	3508      	adds	r5, #8
 801ae10:	2d0c      	cmp	r5, #12
 801ae12:	bf38      	it	cc
 801ae14:	250c      	movcc	r5, #12
 801ae16:	2d00      	cmp	r5, #0
 801ae18:	4607      	mov	r7, r0
 801ae1a:	db01      	blt.n	801ae20 <_malloc_r+0x1c>
 801ae1c:	42a9      	cmp	r1, r5
 801ae1e:	d905      	bls.n	801ae2c <_malloc_r+0x28>
 801ae20:	230c      	movs	r3, #12
 801ae22:	603b      	str	r3, [r7, #0]
 801ae24:	2600      	movs	r6, #0
 801ae26:	4630      	mov	r0, r6
 801ae28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801af00 <_malloc_r+0xfc>
 801ae30:	f000 f868 	bl	801af04 <__malloc_lock>
 801ae34:	f8d8 3000 	ldr.w	r3, [r8]
 801ae38:	461c      	mov	r4, r3
 801ae3a:	bb5c      	cbnz	r4, 801ae94 <_malloc_r+0x90>
 801ae3c:	4629      	mov	r1, r5
 801ae3e:	4638      	mov	r0, r7
 801ae40:	f7ff ffc0 	bl	801adc4 <sbrk_aligned>
 801ae44:	1c43      	adds	r3, r0, #1
 801ae46:	4604      	mov	r4, r0
 801ae48:	d155      	bne.n	801aef6 <_malloc_r+0xf2>
 801ae4a:	f8d8 4000 	ldr.w	r4, [r8]
 801ae4e:	4626      	mov	r6, r4
 801ae50:	2e00      	cmp	r6, #0
 801ae52:	d145      	bne.n	801aee0 <_malloc_r+0xdc>
 801ae54:	2c00      	cmp	r4, #0
 801ae56:	d048      	beq.n	801aeea <_malloc_r+0xe6>
 801ae58:	6823      	ldr	r3, [r4, #0]
 801ae5a:	4631      	mov	r1, r6
 801ae5c:	4638      	mov	r0, r7
 801ae5e:	eb04 0903 	add.w	r9, r4, r3
 801ae62:	f000 fd95 	bl	801b990 <_sbrk_r>
 801ae66:	4581      	cmp	r9, r0
 801ae68:	d13f      	bne.n	801aeea <_malloc_r+0xe6>
 801ae6a:	6821      	ldr	r1, [r4, #0]
 801ae6c:	1a6d      	subs	r5, r5, r1
 801ae6e:	4629      	mov	r1, r5
 801ae70:	4638      	mov	r0, r7
 801ae72:	f7ff ffa7 	bl	801adc4 <sbrk_aligned>
 801ae76:	3001      	adds	r0, #1
 801ae78:	d037      	beq.n	801aeea <_malloc_r+0xe6>
 801ae7a:	6823      	ldr	r3, [r4, #0]
 801ae7c:	442b      	add	r3, r5
 801ae7e:	6023      	str	r3, [r4, #0]
 801ae80:	f8d8 3000 	ldr.w	r3, [r8]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d038      	beq.n	801aefa <_malloc_r+0xf6>
 801ae88:	685a      	ldr	r2, [r3, #4]
 801ae8a:	42a2      	cmp	r2, r4
 801ae8c:	d12b      	bne.n	801aee6 <_malloc_r+0xe2>
 801ae8e:	2200      	movs	r2, #0
 801ae90:	605a      	str	r2, [r3, #4]
 801ae92:	e00f      	b.n	801aeb4 <_malloc_r+0xb0>
 801ae94:	6822      	ldr	r2, [r4, #0]
 801ae96:	1b52      	subs	r2, r2, r5
 801ae98:	d41f      	bmi.n	801aeda <_malloc_r+0xd6>
 801ae9a:	2a0b      	cmp	r2, #11
 801ae9c:	d917      	bls.n	801aece <_malloc_r+0xca>
 801ae9e:	1961      	adds	r1, r4, r5
 801aea0:	42a3      	cmp	r3, r4
 801aea2:	6025      	str	r5, [r4, #0]
 801aea4:	bf18      	it	ne
 801aea6:	6059      	strne	r1, [r3, #4]
 801aea8:	6863      	ldr	r3, [r4, #4]
 801aeaa:	bf08      	it	eq
 801aeac:	f8c8 1000 	streq.w	r1, [r8]
 801aeb0:	5162      	str	r2, [r4, r5]
 801aeb2:	604b      	str	r3, [r1, #4]
 801aeb4:	4638      	mov	r0, r7
 801aeb6:	f104 060b 	add.w	r6, r4, #11
 801aeba:	f000 f829 	bl	801af10 <__malloc_unlock>
 801aebe:	f026 0607 	bic.w	r6, r6, #7
 801aec2:	1d23      	adds	r3, r4, #4
 801aec4:	1af2      	subs	r2, r6, r3
 801aec6:	d0ae      	beq.n	801ae26 <_malloc_r+0x22>
 801aec8:	1b9b      	subs	r3, r3, r6
 801aeca:	50a3      	str	r3, [r4, r2]
 801aecc:	e7ab      	b.n	801ae26 <_malloc_r+0x22>
 801aece:	42a3      	cmp	r3, r4
 801aed0:	6862      	ldr	r2, [r4, #4]
 801aed2:	d1dd      	bne.n	801ae90 <_malloc_r+0x8c>
 801aed4:	f8c8 2000 	str.w	r2, [r8]
 801aed8:	e7ec      	b.n	801aeb4 <_malloc_r+0xb0>
 801aeda:	4623      	mov	r3, r4
 801aedc:	6864      	ldr	r4, [r4, #4]
 801aede:	e7ac      	b.n	801ae3a <_malloc_r+0x36>
 801aee0:	4634      	mov	r4, r6
 801aee2:	6876      	ldr	r6, [r6, #4]
 801aee4:	e7b4      	b.n	801ae50 <_malloc_r+0x4c>
 801aee6:	4613      	mov	r3, r2
 801aee8:	e7cc      	b.n	801ae84 <_malloc_r+0x80>
 801aeea:	230c      	movs	r3, #12
 801aeec:	603b      	str	r3, [r7, #0]
 801aeee:	4638      	mov	r0, r7
 801aef0:	f000 f80e 	bl	801af10 <__malloc_unlock>
 801aef4:	e797      	b.n	801ae26 <_malloc_r+0x22>
 801aef6:	6025      	str	r5, [r4, #0]
 801aef8:	e7dc      	b.n	801aeb4 <_malloc_r+0xb0>
 801aefa:	605b      	str	r3, [r3, #4]
 801aefc:	deff      	udf	#255	; 0xff
 801aefe:	bf00      	nop
 801af00:	2001152c 	.word	0x2001152c

0801af04 <__malloc_lock>:
 801af04:	4801      	ldr	r0, [pc, #4]	; (801af0c <__malloc_lock+0x8>)
 801af06:	f000 bd90 	b.w	801ba2a <__retarget_lock_acquire_recursive>
 801af0a:	bf00      	nop
 801af0c:	20011675 	.word	0x20011675

0801af10 <__malloc_unlock>:
 801af10:	4801      	ldr	r0, [pc, #4]	; (801af18 <__malloc_unlock+0x8>)
 801af12:	f000 bd8b 	b.w	801ba2c <__retarget_lock_release_recursive>
 801af16:	bf00      	nop
 801af18:	20011675 	.word	0x20011675

0801af1c <srand>:
 801af1c:	b538      	push	{r3, r4, r5, lr}
 801af1e:	4b10      	ldr	r3, [pc, #64]	; (801af60 <srand+0x44>)
 801af20:	681d      	ldr	r5, [r3, #0]
 801af22:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801af24:	4604      	mov	r4, r0
 801af26:	b9b3      	cbnz	r3, 801af56 <srand+0x3a>
 801af28:	2018      	movs	r0, #24
 801af2a:	f7ff ff3b 	bl	801ada4 <malloc>
 801af2e:	4602      	mov	r2, r0
 801af30:	6328      	str	r0, [r5, #48]	; 0x30
 801af32:	b920      	cbnz	r0, 801af3e <srand+0x22>
 801af34:	4b0b      	ldr	r3, [pc, #44]	; (801af64 <srand+0x48>)
 801af36:	480c      	ldr	r0, [pc, #48]	; (801af68 <srand+0x4c>)
 801af38:	2146      	movs	r1, #70	; 0x46
 801af3a:	f000 fd8f 	bl	801ba5c <__assert_func>
 801af3e:	490b      	ldr	r1, [pc, #44]	; (801af6c <srand+0x50>)
 801af40:	4b0b      	ldr	r3, [pc, #44]	; (801af70 <srand+0x54>)
 801af42:	e9c0 1300 	strd	r1, r3, [r0]
 801af46:	4b0b      	ldr	r3, [pc, #44]	; (801af74 <srand+0x58>)
 801af48:	6083      	str	r3, [r0, #8]
 801af4a:	230b      	movs	r3, #11
 801af4c:	8183      	strh	r3, [r0, #12]
 801af4e:	2100      	movs	r1, #0
 801af50:	2001      	movs	r0, #1
 801af52:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801af56:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 801af58:	2200      	movs	r2, #0
 801af5a:	611c      	str	r4, [r3, #16]
 801af5c:	615a      	str	r2, [r3, #20]
 801af5e:	bd38      	pop	{r3, r4, r5, pc}
 801af60:	200003dc 	.word	0x200003dc
 801af64:	0801da44 	.word	0x0801da44
 801af68:	0801da5b 	.word	0x0801da5b
 801af6c:	abcd330e 	.word	0xabcd330e
 801af70:	e66d1234 	.word	0xe66d1234
 801af74:	0005deec 	.word	0x0005deec

0801af78 <rand>:
 801af78:	4b16      	ldr	r3, [pc, #88]	; (801afd4 <rand+0x5c>)
 801af7a:	b510      	push	{r4, lr}
 801af7c:	681c      	ldr	r4, [r3, #0]
 801af7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801af80:	b9b3      	cbnz	r3, 801afb0 <rand+0x38>
 801af82:	2018      	movs	r0, #24
 801af84:	f7ff ff0e 	bl	801ada4 <malloc>
 801af88:	4602      	mov	r2, r0
 801af8a:	6320      	str	r0, [r4, #48]	; 0x30
 801af8c:	b920      	cbnz	r0, 801af98 <rand+0x20>
 801af8e:	4b12      	ldr	r3, [pc, #72]	; (801afd8 <rand+0x60>)
 801af90:	4812      	ldr	r0, [pc, #72]	; (801afdc <rand+0x64>)
 801af92:	2152      	movs	r1, #82	; 0x52
 801af94:	f000 fd62 	bl	801ba5c <__assert_func>
 801af98:	4911      	ldr	r1, [pc, #68]	; (801afe0 <rand+0x68>)
 801af9a:	4b12      	ldr	r3, [pc, #72]	; (801afe4 <rand+0x6c>)
 801af9c:	e9c0 1300 	strd	r1, r3, [r0]
 801afa0:	4b11      	ldr	r3, [pc, #68]	; (801afe8 <rand+0x70>)
 801afa2:	6083      	str	r3, [r0, #8]
 801afa4:	230b      	movs	r3, #11
 801afa6:	8183      	strh	r3, [r0, #12]
 801afa8:	2100      	movs	r1, #0
 801afaa:	2001      	movs	r0, #1
 801afac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801afb0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801afb2:	480e      	ldr	r0, [pc, #56]	; (801afec <rand+0x74>)
 801afb4:	690b      	ldr	r3, [r1, #16]
 801afb6:	694c      	ldr	r4, [r1, #20]
 801afb8:	4a0d      	ldr	r2, [pc, #52]	; (801aff0 <rand+0x78>)
 801afba:	4358      	muls	r0, r3
 801afbc:	fb02 0004 	mla	r0, r2, r4, r0
 801afc0:	fba3 3202 	umull	r3, r2, r3, r2
 801afc4:	3301      	adds	r3, #1
 801afc6:	eb40 0002 	adc.w	r0, r0, r2
 801afca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801afce:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801afd2:	bd10      	pop	{r4, pc}
 801afd4:	200003dc 	.word	0x200003dc
 801afd8:	0801da44 	.word	0x0801da44
 801afdc:	0801da5b 	.word	0x0801da5b
 801afe0:	abcd330e 	.word	0xabcd330e
 801afe4:	e66d1234 	.word	0xe66d1234
 801afe8:	0005deec 	.word	0x0005deec
 801afec:	5851f42d 	.word	0x5851f42d
 801aff0:	4c957f2d 	.word	0x4c957f2d

0801aff4 <realloc>:
 801aff4:	4b02      	ldr	r3, [pc, #8]	; (801b000 <realloc+0xc>)
 801aff6:	460a      	mov	r2, r1
 801aff8:	4601      	mov	r1, r0
 801affa:	6818      	ldr	r0, [r3, #0]
 801affc:	f000 b802 	b.w	801b004 <_realloc_r>
 801b000:	200003dc 	.word	0x200003dc

0801b004 <_realloc_r>:
 801b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b008:	4680      	mov	r8, r0
 801b00a:	4614      	mov	r4, r2
 801b00c:	460e      	mov	r6, r1
 801b00e:	b921      	cbnz	r1, 801b01a <_realloc_r+0x16>
 801b010:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b014:	4611      	mov	r1, r2
 801b016:	f7ff bef5 	b.w	801ae04 <_malloc_r>
 801b01a:	b92a      	cbnz	r2, 801b028 <_realloc_r+0x24>
 801b01c:	f000 fd48 	bl	801bab0 <_free_r>
 801b020:	4625      	mov	r5, r4
 801b022:	4628      	mov	r0, r5
 801b024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b028:	f000 fd8e 	bl	801bb48 <_malloc_usable_size_r>
 801b02c:	4284      	cmp	r4, r0
 801b02e:	4607      	mov	r7, r0
 801b030:	d802      	bhi.n	801b038 <_realloc_r+0x34>
 801b032:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801b036:	d812      	bhi.n	801b05e <_realloc_r+0x5a>
 801b038:	4621      	mov	r1, r4
 801b03a:	4640      	mov	r0, r8
 801b03c:	f7ff fee2 	bl	801ae04 <_malloc_r>
 801b040:	4605      	mov	r5, r0
 801b042:	2800      	cmp	r0, #0
 801b044:	d0ed      	beq.n	801b022 <_realloc_r+0x1e>
 801b046:	42bc      	cmp	r4, r7
 801b048:	4622      	mov	r2, r4
 801b04a:	4631      	mov	r1, r6
 801b04c:	bf28      	it	cs
 801b04e:	463a      	movcs	r2, r7
 801b050:	f000 fcf5 	bl	801ba3e <memcpy>
 801b054:	4631      	mov	r1, r6
 801b056:	4640      	mov	r0, r8
 801b058:	f000 fd2a 	bl	801bab0 <_free_r>
 801b05c:	e7e1      	b.n	801b022 <_realloc_r+0x1e>
 801b05e:	4635      	mov	r5, r6
 801b060:	e7df      	b.n	801b022 <_realloc_r+0x1e>
	...

0801b064 <_strtoul_l.constprop.0>:
 801b064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b068:	4f36      	ldr	r7, [pc, #216]	; (801b144 <_strtoul_l.constprop.0+0xe0>)
 801b06a:	4686      	mov	lr, r0
 801b06c:	460d      	mov	r5, r1
 801b06e:	4628      	mov	r0, r5
 801b070:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b074:	5d3e      	ldrb	r6, [r7, r4]
 801b076:	f016 0608 	ands.w	r6, r6, #8
 801b07a:	d1f8      	bne.n	801b06e <_strtoul_l.constprop.0+0xa>
 801b07c:	2c2d      	cmp	r4, #45	; 0x2d
 801b07e:	d130      	bne.n	801b0e2 <_strtoul_l.constprop.0+0x7e>
 801b080:	782c      	ldrb	r4, [r5, #0]
 801b082:	2601      	movs	r6, #1
 801b084:	1c85      	adds	r5, r0, #2
 801b086:	2b00      	cmp	r3, #0
 801b088:	d057      	beq.n	801b13a <_strtoul_l.constprop.0+0xd6>
 801b08a:	2b10      	cmp	r3, #16
 801b08c:	d109      	bne.n	801b0a2 <_strtoul_l.constprop.0+0x3e>
 801b08e:	2c30      	cmp	r4, #48	; 0x30
 801b090:	d107      	bne.n	801b0a2 <_strtoul_l.constprop.0+0x3e>
 801b092:	7828      	ldrb	r0, [r5, #0]
 801b094:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801b098:	2858      	cmp	r0, #88	; 0x58
 801b09a:	d149      	bne.n	801b130 <_strtoul_l.constprop.0+0xcc>
 801b09c:	786c      	ldrb	r4, [r5, #1]
 801b09e:	2310      	movs	r3, #16
 801b0a0:	3502      	adds	r5, #2
 801b0a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 801b0a6:	2700      	movs	r7, #0
 801b0a8:	fbb8 f8f3 	udiv	r8, r8, r3
 801b0ac:	fb03 f908 	mul.w	r9, r3, r8
 801b0b0:	ea6f 0909 	mvn.w	r9, r9
 801b0b4:	4638      	mov	r0, r7
 801b0b6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801b0ba:	f1bc 0f09 	cmp.w	ip, #9
 801b0be:	d815      	bhi.n	801b0ec <_strtoul_l.constprop.0+0x88>
 801b0c0:	4664      	mov	r4, ip
 801b0c2:	42a3      	cmp	r3, r4
 801b0c4:	dd23      	ble.n	801b10e <_strtoul_l.constprop.0+0xaa>
 801b0c6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 801b0ca:	d007      	beq.n	801b0dc <_strtoul_l.constprop.0+0x78>
 801b0cc:	4580      	cmp	r8, r0
 801b0ce:	d31b      	bcc.n	801b108 <_strtoul_l.constprop.0+0xa4>
 801b0d0:	d101      	bne.n	801b0d6 <_strtoul_l.constprop.0+0x72>
 801b0d2:	45a1      	cmp	r9, r4
 801b0d4:	db18      	blt.n	801b108 <_strtoul_l.constprop.0+0xa4>
 801b0d6:	fb00 4003 	mla	r0, r0, r3, r4
 801b0da:	2701      	movs	r7, #1
 801b0dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b0e0:	e7e9      	b.n	801b0b6 <_strtoul_l.constprop.0+0x52>
 801b0e2:	2c2b      	cmp	r4, #43	; 0x2b
 801b0e4:	bf04      	itt	eq
 801b0e6:	782c      	ldrbeq	r4, [r5, #0]
 801b0e8:	1c85      	addeq	r5, r0, #2
 801b0ea:	e7cc      	b.n	801b086 <_strtoul_l.constprop.0+0x22>
 801b0ec:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801b0f0:	f1bc 0f19 	cmp.w	ip, #25
 801b0f4:	d801      	bhi.n	801b0fa <_strtoul_l.constprop.0+0x96>
 801b0f6:	3c37      	subs	r4, #55	; 0x37
 801b0f8:	e7e3      	b.n	801b0c2 <_strtoul_l.constprop.0+0x5e>
 801b0fa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801b0fe:	f1bc 0f19 	cmp.w	ip, #25
 801b102:	d804      	bhi.n	801b10e <_strtoul_l.constprop.0+0xaa>
 801b104:	3c57      	subs	r4, #87	; 0x57
 801b106:	e7dc      	b.n	801b0c2 <_strtoul_l.constprop.0+0x5e>
 801b108:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b10c:	e7e6      	b.n	801b0dc <_strtoul_l.constprop.0+0x78>
 801b10e:	1c7b      	adds	r3, r7, #1
 801b110:	d106      	bne.n	801b120 <_strtoul_l.constprop.0+0xbc>
 801b112:	2322      	movs	r3, #34	; 0x22
 801b114:	f8ce 3000 	str.w	r3, [lr]
 801b118:	4638      	mov	r0, r7
 801b11a:	b932      	cbnz	r2, 801b12a <_strtoul_l.constprop.0+0xc6>
 801b11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b120:	b106      	cbz	r6, 801b124 <_strtoul_l.constprop.0+0xc0>
 801b122:	4240      	negs	r0, r0
 801b124:	2a00      	cmp	r2, #0
 801b126:	d0f9      	beq.n	801b11c <_strtoul_l.constprop.0+0xb8>
 801b128:	b107      	cbz	r7, 801b12c <_strtoul_l.constprop.0+0xc8>
 801b12a:	1e69      	subs	r1, r5, #1
 801b12c:	6011      	str	r1, [r2, #0]
 801b12e:	e7f5      	b.n	801b11c <_strtoul_l.constprop.0+0xb8>
 801b130:	2430      	movs	r4, #48	; 0x30
 801b132:	2b00      	cmp	r3, #0
 801b134:	d1b5      	bne.n	801b0a2 <_strtoul_l.constprop.0+0x3e>
 801b136:	2308      	movs	r3, #8
 801b138:	e7b3      	b.n	801b0a2 <_strtoul_l.constprop.0+0x3e>
 801b13a:	2c30      	cmp	r4, #48	; 0x30
 801b13c:	d0a9      	beq.n	801b092 <_strtoul_l.constprop.0+0x2e>
 801b13e:	230a      	movs	r3, #10
 801b140:	e7af      	b.n	801b0a2 <_strtoul_l.constprop.0+0x3e>
 801b142:	bf00      	nop
 801b144:	0801dab4 	.word	0x0801dab4

0801b148 <strtoul>:
 801b148:	4613      	mov	r3, r2
 801b14a:	460a      	mov	r2, r1
 801b14c:	4601      	mov	r1, r0
 801b14e:	4802      	ldr	r0, [pc, #8]	; (801b158 <strtoul+0x10>)
 801b150:	6800      	ldr	r0, [r0, #0]
 801b152:	f7ff bf87 	b.w	801b064 <_strtoul_l.constprop.0>
 801b156:	bf00      	nop
 801b158:	200003dc 	.word	0x200003dc

0801b15c <std>:
 801b15c:	2300      	movs	r3, #0
 801b15e:	b510      	push	{r4, lr}
 801b160:	4604      	mov	r4, r0
 801b162:	e9c0 3300 	strd	r3, r3, [r0]
 801b166:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b16a:	6083      	str	r3, [r0, #8]
 801b16c:	8181      	strh	r1, [r0, #12]
 801b16e:	6643      	str	r3, [r0, #100]	; 0x64
 801b170:	81c2      	strh	r2, [r0, #14]
 801b172:	6183      	str	r3, [r0, #24]
 801b174:	4619      	mov	r1, r3
 801b176:	2208      	movs	r2, #8
 801b178:	305c      	adds	r0, #92	; 0x5c
 801b17a:	f000 fb97 	bl	801b8ac <memset>
 801b17e:	4b0d      	ldr	r3, [pc, #52]	; (801b1b4 <std+0x58>)
 801b180:	6263      	str	r3, [r4, #36]	; 0x24
 801b182:	4b0d      	ldr	r3, [pc, #52]	; (801b1b8 <std+0x5c>)
 801b184:	62a3      	str	r3, [r4, #40]	; 0x28
 801b186:	4b0d      	ldr	r3, [pc, #52]	; (801b1bc <std+0x60>)
 801b188:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b18a:	4b0d      	ldr	r3, [pc, #52]	; (801b1c0 <std+0x64>)
 801b18c:	6323      	str	r3, [r4, #48]	; 0x30
 801b18e:	4b0d      	ldr	r3, [pc, #52]	; (801b1c4 <std+0x68>)
 801b190:	6224      	str	r4, [r4, #32]
 801b192:	429c      	cmp	r4, r3
 801b194:	d006      	beq.n	801b1a4 <std+0x48>
 801b196:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b19a:	4294      	cmp	r4, r2
 801b19c:	d002      	beq.n	801b1a4 <std+0x48>
 801b19e:	33d0      	adds	r3, #208	; 0xd0
 801b1a0:	429c      	cmp	r4, r3
 801b1a2:	d105      	bne.n	801b1b0 <std+0x54>
 801b1a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1ac:	f000 bc3c 	b.w	801ba28 <__retarget_lock_init_recursive>
 801b1b0:	bd10      	pop	{r4, pc}
 801b1b2:	bf00      	nop
 801b1b4:	0801b635 	.word	0x0801b635
 801b1b8:	0801b657 	.word	0x0801b657
 801b1bc:	0801b68f 	.word	0x0801b68f
 801b1c0:	0801b6b3 	.word	0x0801b6b3
 801b1c4:	20011534 	.word	0x20011534

0801b1c8 <stdio_exit_handler>:
 801b1c8:	4a02      	ldr	r2, [pc, #8]	; (801b1d4 <stdio_exit_handler+0xc>)
 801b1ca:	4903      	ldr	r1, [pc, #12]	; (801b1d8 <stdio_exit_handler+0x10>)
 801b1cc:	4803      	ldr	r0, [pc, #12]	; (801b1dc <stdio_exit_handler+0x14>)
 801b1ce:	f000 b869 	b.w	801b2a4 <_fwalk_sglue>
 801b1d2:	bf00      	nop
 801b1d4:	20000384 	.word	0x20000384
 801b1d8:	0801c4bd 	.word	0x0801c4bd
 801b1dc:	20000390 	.word	0x20000390

0801b1e0 <cleanup_stdio>:
 801b1e0:	6841      	ldr	r1, [r0, #4]
 801b1e2:	4b0c      	ldr	r3, [pc, #48]	; (801b214 <cleanup_stdio+0x34>)
 801b1e4:	4299      	cmp	r1, r3
 801b1e6:	b510      	push	{r4, lr}
 801b1e8:	4604      	mov	r4, r0
 801b1ea:	d001      	beq.n	801b1f0 <cleanup_stdio+0x10>
 801b1ec:	f001 f966 	bl	801c4bc <_fflush_r>
 801b1f0:	68a1      	ldr	r1, [r4, #8]
 801b1f2:	4b09      	ldr	r3, [pc, #36]	; (801b218 <cleanup_stdio+0x38>)
 801b1f4:	4299      	cmp	r1, r3
 801b1f6:	d002      	beq.n	801b1fe <cleanup_stdio+0x1e>
 801b1f8:	4620      	mov	r0, r4
 801b1fa:	f001 f95f 	bl	801c4bc <_fflush_r>
 801b1fe:	68e1      	ldr	r1, [r4, #12]
 801b200:	4b06      	ldr	r3, [pc, #24]	; (801b21c <cleanup_stdio+0x3c>)
 801b202:	4299      	cmp	r1, r3
 801b204:	d004      	beq.n	801b210 <cleanup_stdio+0x30>
 801b206:	4620      	mov	r0, r4
 801b208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b20c:	f001 b956 	b.w	801c4bc <_fflush_r>
 801b210:	bd10      	pop	{r4, pc}
 801b212:	bf00      	nop
 801b214:	20011534 	.word	0x20011534
 801b218:	2001159c 	.word	0x2001159c
 801b21c:	20011604 	.word	0x20011604

0801b220 <global_stdio_init.part.0>:
 801b220:	b510      	push	{r4, lr}
 801b222:	4b0b      	ldr	r3, [pc, #44]	; (801b250 <global_stdio_init.part.0+0x30>)
 801b224:	4c0b      	ldr	r4, [pc, #44]	; (801b254 <global_stdio_init.part.0+0x34>)
 801b226:	4a0c      	ldr	r2, [pc, #48]	; (801b258 <global_stdio_init.part.0+0x38>)
 801b228:	601a      	str	r2, [r3, #0]
 801b22a:	4620      	mov	r0, r4
 801b22c:	2200      	movs	r2, #0
 801b22e:	2104      	movs	r1, #4
 801b230:	f7ff ff94 	bl	801b15c <std>
 801b234:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b238:	2201      	movs	r2, #1
 801b23a:	2109      	movs	r1, #9
 801b23c:	f7ff ff8e 	bl	801b15c <std>
 801b240:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b244:	2202      	movs	r2, #2
 801b246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b24a:	2112      	movs	r1, #18
 801b24c:	f7ff bf86 	b.w	801b15c <std>
 801b250:	2001166c 	.word	0x2001166c
 801b254:	20011534 	.word	0x20011534
 801b258:	0801b1c9 	.word	0x0801b1c9

0801b25c <__sfp_lock_acquire>:
 801b25c:	4801      	ldr	r0, [pc, #4]	; (801b264 <__sfp_lock_acquire+0x8>)
 801b25e:	f000 bbe4 	b.w	801ba2a <__retarget_lock_acquire_recursive>
 801b262:	bf00      	nop
 801b264:	20011676 	.word	0x20011676

0801b268 <__sfp_lock_release>:
 801b268:	4801      	ldr	r0, [pc, #4]	; (801b270 <__sfp_lock_release+0x8>)
 801b26a:	f000 bbdf 	b.w	801ba2c <__retarget_lock_release_recursive>
 801b26e:	bf00      	nop
 801b270:	20011676 	.word	0x20011676

0801b274 <__sinit>:
 801b274:	b510      	push	{r4, lr}
 801b276:	4604      	mov	r4, r0
 801b278:	f7ff fff0 	bl	801b25c <__sfp_lock_acquire>
 801b27c:	6a23      	ldr	r3, [r4, #32]
 801b27e:	b11b      	cbz	r3, 801b288 <__sinit+0x14>
 801b280:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b284:	f7ff bff0 	b.w	801b268 <__sfp_lock_release>
 801b288:	4b04      	ldr	r3, [pc, #16]	; (801b29c <__sinit+0x28>)
 801b28a:	6223      	str	r3, [r4, #32]
 801b28c:	4b04      	ldr	r3, [pc, #16]	; (801b2a0 <__sinit+0x2c>)
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	2b00      	cmp	r3, #0
 801b292:	d1f5      	bne.n	801b280 <__sinit+0xc>
 801b294:	f7ff ffc4 	bl	801b220 <global_stdio_init.part.0>
 801b298:	e7f2      	b.n	801b280 <__sinit+0xc>
 801b29a:	bf00      	nop
 801b29c:	0801b1e1 	.word	0x0801b1e1
 801b2a0:	2001166c 	.word	0x2001166c

0801b2a4 <_fwalk_sglue>:
 801b2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b2a8:	4607      	mov	r7, r0
 801b2aa:	4688      	mov	r8, r1
 801b2ac:	4614      	mov	r4, r2
 801b2ae:	2600      	movs	r6, #0
 801b2b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b2b4:	f1b9 0901 	subs.w	r9, r9, #1
 801b2b8:	d505      	bpl.n	801b2c6 <_fwalk_sglue+0x22>
 801b2ba:	6824      	ldr	r4, [r4, #0]
 801b2bc:	2c00      	cmp	r4, #0
 801b2be:	d1f7      	bne.n	801b2b0 <_fwalk_sglue+0xc>
 801b2c0:	4630      	mov	r0, r6
 801b2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b2c6:	89ab      	ldrh	r3, [r5, #12]
 801b2c8:	2b01      	cmp	r3, #1
 801b2ca:	d907      	bls.n	801b2dc <_fwalk_sglue+0x38>
 801b2cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b2d0:	3301      	adds	r3, #1
 801b2d2:	d003      	beq.n	801b2dc <_fwalk_sglue+0x38>
 801b2d4:	4629      	mov	r1, r5
 801b2d6:	4638      	mov	r0, r7
 801b2d8:	47c0      	blx	r8
 801b2da:	4306      	orrs	r6, r0
 801b2dc:	3568      	adds	r5, #104	; 0x68
 801b2de:	e7e9      	b.n	801b2b4 <_fwalk_sglue+0x10>

0801b2e0 <_fwrite_r>:
 801b2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2e4:	9c08      	ldr	r4, [sp, #32]
 801b2e6:	468a      	mov	sl, r1
 801b2e8:	4690      	mov	r8, r2
 801b2ea:	fb02 f903 	mul.w	r9, r2, r3
 801b2ee:	4606      	mov	r6, r0
 801b2f0:	b118      	cbz	r0, 801b2fa <_fwrite_r+0x1a>
 801b2f2:	6a03      	ldr	r3, [r0, #32]
 801b2f4:	b90b      	cbnz	r3, 801b2fa <_fwrite_r+0x1a>
 801b2f6:	f7ff ffbd 	bl	801b274 <__sinit>
 801b2fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2fc:	07dd      	lsls	r5, r3, #31
 801b2fe:	d405      	bmi.n	801b30c <_fwrite_r+0x2c>
 801b300:	89a3      	ldrh	r3, [r4, #12]
 801b302:	0598      	lsls	r0, r3, #22
 801b304:	d402      	bmi.n	801b30c <_fwrite_r+0x2c>
 801b306:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b308:	f000 fb8f 	bl	801ba2a <__retarget_lock_acquire_recursive>
 801b30c:	89a3      	ldrh	r3, [r4, #12]
 801b30e:	0719      	lsls	r1, r3, #28
 801b310:	d516      	bpl.n	801b340 <_fwrite_r+0x60>
 801b312:	6923      	ldr	r3, [r4, #16]
 801b314:	b1a3      	cbz	r3, 801b340 <_fwrite_r+0x60>
 801b316:	2500      	movs	r5, #0
 801b318:	454d      	cmp	r5, r9
 801b31a:	d01f      	beq.n	801b35c <_fwrite_r+0x7c>
 801b31c:	68a7      	ldr	r7, [r4, #8]
 801b31e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801b322:	3f01      	subs	r7, #1
 801b324:	2f00      	cmp	r7, #0
 801b326:	60a7      	str	r7, [r4, #8]
 801b328:	da04      	bge.n	801b334 <_fwrite_r+0x54>
 801b32a:	69a3      	ldr	r3, [r4, #24]
 801b32c:	429f      	cmp	r7, r3
 801b32e:	db0f      	blt.n	801b350 <_fwrite_r+0x70>
 801b330:	290a      	cmp	r1, #10
 801b332:	d00d      	beq.n	801b350 <_fwrite_r+0x70>
 801b334:	6823      	ldr	r3, [r4, #0]
 801b336:	1c5a      	adds	r2, r3, #1
 801b338:	6022      	str	r2, [r4, #0]
 801b33a:	7019      	strb	r1, [r3, #0]
 801b33c:	3501      	adds	r5, #1
 801b33e:	e7eb      	b.n	801b318 <_fwrite_r+0x38>
 801b340:	4621      	mov	r1, r4
 801b342:	4630      	mov	r0, r6
 801b344:	f000 fa30 	bl	801b7a8 <__swsetup_r>
 801b348:	2800      	cmp	r0, #0
 801b34a:	d0e4      	beq.n	801b316 <_fwrite_r+0x36>
 801b34c:	2500      	movs	r5, #0
 801b34e:	e005      	b.n	801b35c <_fwrite_r+0x7c>
 801b350:	4622      	mov	r2, r4
 801b352:	4630      	mov	r0, r6
 801b354:	f000 f9ea 	bl	801b72c <__swbuf_r>
 801b358:	3001      	adds	r0, #1
 801b35a:	d1ef      	bne.n	801b33c <_fwrite_r+0x5c>
 801b35c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b35e:	07da      	lsls	r2, r3, #31
 801b360:	d405      	bmi.n	801b36e <_fwrite_r+0x8e>
 801b362:	89a3      	ldrh	r3, [r4, #12]
 801b364:	059b      	lsls	r3, r3, #22
 801b366:	d402      	bmi.n	801b36e <_fwrite_r+0x8e>
 801b368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b36a:	f000 fb5f 	bl	801ba2c <__retarget_lock_release_recursive>
 801b36e:	fbb5 f0f8 	udiv	r0, r5, r8
 801b372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801b378 <fwrite>:
 801b378:	b507      	push	{r0, r1, r2, lr}
 801b37a:	9300      	str	r3, [sp, #0]
 801b37c:	4613      	mov	r3, r2
 801b37e:	460a      	mov	r2, r1
 801b380:	4601      	mov	r1, r0
 801b382:	4803      	ldr	r0, [pc, #12]	; (801b390 <fwrite+0x18>)
 801b384:	6800      	ldr	r0, [r0, #0]
 801b386:	f7ff ffab 	bl	801b2e0 <_fwrite_r>
 801b38a:	b003      	add	sp, #12
 801b38c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b390:	200003dc 	.word	0x200003dc

0801b394 <iprintf>:
 801b394:	b40f      	push	{r0, r1, r2, r3}
 801b396:	b507      	push	{r0, r1, r2, lr}
 801b398:	4906      	ldr	r1, [pc, #24]	; (801b3b4 <iprintf+0x20>)
 801b39a:	ab04      	add	r3, sp, #16
 801b39c:	6808      	ldr	r0, [r1, #0]
 801b39e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3a2:	6881      	ldr	r1, [r0, #8]
 801b3a4:	9301      	str	r3, [sp, #4]
 801b3a6:	f000 fd59 	bl	801be5c <_vfiprintf_r>
 801b3aa:	b003      	add	sp, #12
 801b3ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3b0:	b004      	add	sp, #16
 801b3b2:	4770      	bx	lr
 801b3b4:	200003dc 	.word	0x200003dc

0801b3b8 <_puts_r>:
 801b3b8:	6a03      	ldr	r3, [r0, #32]
 801b3ba:	b570      	push	{r4, r5, r6, lr}
 801b3bc:	6884      	ldr	r4, [r0, #8]
 801b3be:	4605      	mov	r5, r0
 801b3c0:	460e      	mov	r6, r1
 801b3c2:	b90b      	cbnz	r3, 801b3c8 <_puts_r+0x10>
 801b3c4:	f7ff ff56 	bl	801b274 <__sinit>
 801b3c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b3ca:	07db      	lsls	r3, r3, #31
 801b3cc:	d405      	bmi.n	801b3da <_puts_r+0x22>
 801b3ce:	89a3      	ldrh	r3, [r4, #12]
 801b3d0:	0598      	lsls	r0, r3, #22
 801b3d2:	d402      	bmi.n	801b3da <_puts_r+0x22>
 801b3d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b3d6:	f000 fb28 	bl	801ba2a <__retarget_lock_acquire_recursive>
 801b3da:	89a3      	ldrh	r3, [r4, #12]
 801b3dc:	0719      	lsls	r1, r3, #28
 801b3de:	d513      	bpl.n	801b408 <_puts_r+0x50>
 801b3e0:	6923      	ldr	r3, [r4, #16]
 801b3e2:	b18b      	cbz	r3, 801b408 <_puts_r+0x50>
 801b3e4:	3e01      	subs	r6, #1
 801b3e6:	68a3      	ldr	r3, [r4, #8]
 801b3e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b3ec:	3b01      	subs	r3, #1
 801b3ee:	60a3      	str	r3, [r4, #8]
 801b3f0:	b9e9      	cbnz	r1, 801b42e <_puts_r+0x76>
 801b3f2:	2b00      	cmp	r3, #0
 801b3f4:	da2e      	bge.n	801b454 <_puts_r+0x9c>
 801b3f6:	4622      	mov	r2, r4
 801b3f8:	210a      	movs	r1, #10
 801b3fa:	4628      	mov	r0, r5
 801b3fc:	f000 f996 	bl	801b72c <__swbuf_r>
 801b400:	3001      	adds	r0, #1
 801b402:	d007      	beq.n	801b414 <_puts_r+0x5c>
 801b404:	250a      	movs	r5, #10
 801b406:	e007      	b.n	801b418 <_puts_r+0x60>
 801b408:	4621      	mov	r1, r4
 801b40a:	4628      	mov	r0, r5
 801b40c:	f000 f9cc 	bl	801b7a8 <__swsetup_r>
 801b410:	2800      	cmp	r0, #0
 801b412:	d0e7      	beq.n	801b3e4 <_puts_r+0x2c>
 801b414:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b418:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b41a:	07da      	lsls	r2, r3, #31
 801b41c:	d405      	bmi.n	801b42a <_puts_r+0x72>
 801b41e:	89a3      	ldrh	r3, [r4, #12]
 801b420:	059b      	lsls	r3, r3, #22
 801b422:	d402      	bmi.n	801b42a <_puts_r+0x72>
 801b424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b426:	f000 fb01 	bl	801ba2c <__retarget_lock_release_recursive>
 801b42a:	4628      	mov	r0, r5
 801b42c:	bd70      	pop	{r4, r5, r6, pc}
 801b42e:	2b00      	cmp	r3, #0
 801b430:	da04      	bge.n	801b43c <_puts_r+0x84>
 801b432:	69a2      	ldr	r2, [r4, #24]
 801b434:	429a      	cmp	r2, r3
 801b436:	dc06      	bgt.n	801b446 <_puts_r+0x8e>
 801b438:	290a      	cmp	r1, #10
 801b43a:	d004      	beq.n	801b446 <_puts_r+0x8e>
 801b43c:	6823      	ldr	r3, [r4, #0]
 801b43e:	1c5a      	adds	r2, r3, #1
 801b440:	6022      	str	r2, [r4, #0]
 801b442:	7019      	strb	r1, [r3, #0]
 801b444:	e7cf      	b.n	801b3e6 <_puts_r+0x2e>
 801b446:	4622      	mov	r2, r4
 801b448:	4628      	mov	r0, r5
 801b44a:	f000 f96f 	bl	801b72c <__swbuf_r>
 801b44e:	3001      	adds	r0, #1
 801b450:	d1c9      	bne.n	801b3e6 <_puts_r+0x2e>
 801b452:	e7df      	b.n	801b414 <_puts_r+0x5c>
 801b454:	6823      	ldr	r3, [r4, #0]
 801b456:	250a      	movs	r5, #10
 801b458:	1c5a      	adds	r2, r3, #1
 801b45a:	6022      	str	r2, [r4, #0]
 801b45c:	701d      	strb	r5, [r3, #0]
 801b45e:	e7db      	b.n	801b418 <_puts_r+0x60>

0801b460 <puts>:
 801b460:	4b02      	ldr	r3, [pc, #8]	; (801b46c <puts+0xc>)
 801b462:	4601      	mov	r1, r0
 801b464:	6818      	ldr	r0, [r3, #0]
 801b466:	f7ff bfa7 	b.w	801b3b8 <_puts_r>
 801b46a:	bf00      	nop
 801b46c:	200003dc 	.word	0x200003dc

0801b470 <setvbuf>:
 801b470:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b474:	461d      	mov	r5, r3
 801b476:	4b54      	ldr	r3, [pc, #336]	; (801b5c8 <setvbuf+0x158>)
 801b478:	681f      	ldr	r7, [r3, #0]
 801b47a:	4604      	mov	r4, r0
 801b47c:	460e      	mov	r6, r1
 801b47e:	4690      	mov	r8, r2
 801b480:	b127      	cbz	r7, 801b48c <setvbuf+0x1c>
 801b482:	6a3b      	ldr	r3, [r7, #32]
 801b484:	b913      	cbnz	r3, 801b48c <setvbuf+0x1c>
 801b486:	4638      	mov	r0, r7
 801b488:	f7ff fef4 	bl	801b274 <__sinit>
 801b48c:	f1b8 0f02 	cmp.w	r8, #2
 801b490:	d006      	beq.n	801b4a0 <setvbuf+0x30>
 801b492:	f1b8 0f01 	cmp.w	r8, #1
 801b496:	f200 8094 	bhi.w	801b5c2 <setvbuf+0x152>
 801b49a:	2d00      	cmp	r5, #0
 801b49c:	f2c0 8091 	blt.w	801b5c2 <setvbuf+0x152>
 801b4a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b4a2:	07da      	lsls	r2, r3, #31
 801b4a4:	d405      	bmi.n	801b4b2 <setvbuf+0x42>
 801b4a6:	89a3      	ldrh	r3, [r4, #12]
 801b4a8:	059b      	lsls	r3, r3, #22
 801b4aa:	d402      	bmi.n	801b4b2 <setvbuf+0x42>
 801b4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b4ae:	f000 fabc 	bl	801ba2a <__retarget_lock_acquire_recursive>
 801b4b2:	4621      	mov	r1, r4
 801b4b4:	4638      	mov	r0, r7
 801b4b6:	f001 f801 	bl	801c4bc <_fflush_r>
 801b4ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b4bc:	b141      	cbz	r1, 801b4d0 <setvbuf+0x60>
 801b4be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b4c2:	4299      	cmp	r1, r3
 801b4c4:	d002      	beq.n	801b4cc <setvbuf+0x5c>
 801b4c6:	4638      	mov	r0, r7
 801b4c8:	f000 faf2 	bl	801bab0 <_free_r>
 801b4cc:	2300      	movs	r3, #0
 801b4ce:	6363      	str	r3, [r4, #52]	; 0x34
 801b4d0:	2300      	movs	r3, #0
 801b4d2:	61a3      	str	r3, [r4, #24]
 801b4d4:	6063      	str	r3, [r4, #4]
 801b4d6:	89a3      	ldrh	r3, [r4, #12]
 801b4d8:	0618      	lsls	r0, r3, #24
 801b4da:	d503      	bpl.n	801b4e4 <setvbuf+0x74>
 801b4dc:	6921      	ldr	r1, [r4, #16]
 801b4de:	4638      	mov	r0, r7
 801b4e0:	f000 fae6 	bl	801bab0 <_free_r>
 801b4e4:	89a3      	ldrh	r3, [r4, #12]
 801b4e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801b4ea:	f023 0303 	bic.w	r3, r3, #3
 801b4ee:	f1b8 0f02 	cmp.w	r8, #2
 801b4f2:	81a3      	strh	r3, [r4, #12]
 801b4f4:	d05f      	beq.n	801b5b6 <setvbuf+0x146>
 801b4f6:	ab01      	add	r3, sp, #4
 801b4f8:	466a      	mov	r2, sp
 801b4fa:	4621      	mov	r1, r4
 801b4fc:	4638      	mov	r0, r7
 801b4fe:	f001 f817 	bl	801c530 <__swhatbuf_r>
 801b502:	89a3      	ldrh	r3, [r4, #12]
 801b504:	4318      	orrs	r0, r3
 801b506:	81a0      	strh	r0, [r4, #12]
 801b508:	bb2d      	cbnz	r5, 801b556 <setvbuf+0xe6>
 801b50a:	9d00      	ldr	r5, [sp, #0]
 801b50c:	4628      	mov	r0, r5
 801b50e:	f7ff fc49 	bl	801ada4 <malloc>
 801b512:	4606      	mov	r6, r0
 801b514:	2800      	cmp	r0, #0
 801b516:	d150      	bne.n	801b5ba <setvbuf+0x14a>
 801b518:	f8dd 9000 	ldr.w	r9, [sp]
 801b51c:	45a9      	cmp	r9, r5
 801b51e:	d13e      	bne.n	801b59e <setvbuf+0x12e>
 801b520:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b524:	2200      	movs	r2, #0
 801b526:	60a2      	str	r2, [r4, #8]
 801b528:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801b52c:	6022      	str	r2, [r4, #0]
 801b52e:	6122      	str	r2, [r4, #16]
 801b530:	2201      	movs	r2, #1
 801b532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b536:	6162      	str	r2, [r4, #20]
 801b538:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b53a:	f043 0302 	orr.w	r3, r3, #2
 801b53e:	07d1      	lsls	r1, r2, #31
 801b540:	81a3      	strh	r3, [r4, #12]
 801b542:	d404      	bmi.n	801b54e <setvbuf+0xde>
 801b544:	059b      	lsls	r3, r3, #22
 801b546:	d402      	bmi.n	801b54e <setvbuf+0xde>
 801b548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b54a:	f000 fa6f 	bl	801ba2c <__retarget_lock_release_recursive>
 801b54e:	4628      	mov	r0, r5
 801b550:	b003      	add	sp, #12
 801b552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b556:	2e00      	cmp	r6, #0
 801b558:	d0d8      	beq.n	801b50c <setvbuf+0x9c>
 801b55a:	6a3b      	ldr	r3, [r7, #32]
 801b55c:	b913      	cbnz	r3, 801b564 <setvbuf+0xf4>
 801b55e:	4638      	mov	r0, r7
 801b560:	f7ff fe88 	bl	801b274 <__sinit>
 801b564:	f1b8 0f01 	cmp.w	r8, #1
 801b568:	bf08      	it	eq
 801b56a:	89a3      	ldrheq	r3, [r4, #12]
 801b56c:	6026      	str	r6, [r4, #0]
 801b56e:	bf04      	itt	eq
 801b570:	f043 0301 	orreq.w	r3, r3, #1
 801b574:	81a3      	strheq	r3, [r4, #12]
 801b576:	89a3      	ldrh	r3, [r4, #12]
 801b578:	f013 0208 	ands.w	r2, r3, #8
 801b57c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801b580:	d01d      	beq.n	801b5be <setvbuf+0x14e>
 801b582:	07da      	lsls	r2, r3, #31
 801b584:	bf41      	itttt	mi
 801b586:	2200      	movmi	r2, #0
 801b588:	426d      	negmi	r5, r5
 801b58a:	60a2      	strmi	r2, [r4, #8]
 801b58c:	61a5      	strmi	r5, [r4, #24]
 801b58e:	bf58      	it	pl
 801b590:	60a5      	strpl	r5, [r4, #8]
 801b592:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801b594:	f015 0501 	ands.w	r5, r5, #1
 801b598:	d0d4      	beq.n	801b544 <setvbuf+0xd4>
 801b59a:	2500      	movs	r5, #0
 801b59c:	e7d7      	b.n	801b54e <setvbuf+0xde>
 801b59e:	4648      	mov	r0, r9
 801b5a0:	f7ff fc00 	bl	801ada4 <malloc>
 801b5a4:	4606      	mov	r6, r0
 801b5a6:	2800      	cmp	r0, #0
 801b5a8:	d0ba      	beq.n	801b520 <setvbuf+0xb0>
 801b5aa:	89a3      	ldrh	r3, [r4, #12]
 801b5ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b5b0:	81a3      	strh	r3, [r4, #12]
 801b5b2:	464d      	mov	r5, r9
 801b5b4:	e7d1      	b.n	801b55a <setvbuf+0xea>
 801b5b6:	2500      	movs	r5, #0
 801b5b8:	e7b4      	b.n	801b524 <setvbuf+0xb4>
 801b5ba:	46a9      	mov	r9, r5
 801b5bc:	e7f5      	b.n	801b5aa <setvbuf+0x13a>
 801b5be:	60a2      	str	r2, [r4, #8]
 801b5c0:	e7e7      	b.n	801b592 <setvbuf+0x122>
 801b5c2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b5c6:	e7c2      	b.n	801b54e <setvbuf+0xde>
 801b5c8:	200003dc 	.word	0x200003dc

0801b5cc <sniprintf>:
 801b5cc:	b40c      	push	{r2, r3}
 801b5ce:	b530      	push	{r4, r5, lr}
 801b5d0:	4b17      	ldr	r3, [pc, #92]	; (801b630 <sniprintf+0x64>)
 801b5d2:	1e0c      	subs	r4, r1, #0
 801b5d4:	681d      	ldr	r5, [r3, #0]
 801b5d6:	b09d      	sub	sp, #116	; 0x74
 801b5d8:	da08      	bge.n	801b5ec <sniprintf+0x20>
 801b5da:	238b      	movs	r3, #139	; 0x8b
 801b5dc:	602b      	str	r3, [r5, #0]
 801b5de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5e2:	b01d      	add	sp, #116	; 0x74
 801b5e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b5e8:	b002      	add	sp, #8
 801b5ea:	4770      	bx	lr
 801b5ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b5f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b5f4:	bf14      	ite	ne
 801b5f6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b5fa:	4623      	moveq	r3, r4
 801b5fc:	9304      	str	r3, [sp, #16]
 801b5fe:	9307      	str	r3, [sp, #28]
 801b600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b604:	9002      	str	r0, [sp, #8]
 801b606:	9006      	str	r0, [sp, #24]
 801b608:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b60c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b60e:	ab21      	add	r3, sp, #132	; 0x84
 801b610:	a902      	add	r1, sp, #8
 801b612:	4628      	mov	r0, r5
 801b614:	9301      	str	r3, [sp, #4]
 801b616:	f000 faf9 	bl	801bc0c <_svfiprintf_r>
 801b61a:	1c43      	adds	r3, r0, #1
 801b61c:	bfbc      	itt	lt
 801b61e:	238b      	movlt	r3, #139	; 0x8b
 801b620:	602b      	strlt	r3, [r5, #0]
 801b622:	2c00      	cmp	r4, #0
 801b624:	d0dd      	beq.n	801b5e2 <sniprintf+0x16>
 801b626:	9b02      	ldr	r3, [sp, #8]
 801b628:	2200      	movs	r2, #0
 801b62a:	701a      	strb	r2, [r3, #0]
 801b62c:	e7d9      	b.n	801b5e2 <sniprintf+0x16>
 801b62e:	bf00      	nop
 801b630:	200003dc 	.word	0x200003dc

0801b634 <__sread>:
 801b634:	b510      	push	{r4, lr}
 801b636:	460c      	mov	r4, r1
 801b638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b63c:	f000 f996 	bl	801b96c <_read_r>
 801b640:	2800      	cmp	r0, #0
 801b642:	bfab      	itete	ge
 801b644:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b646:	89a3      	ldrhlt	r3, [r4, #12]
 801b648:	181b      	addge	r3, r3, r0
 801b64a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b64e:	bfac      	ite	ge
 801b650:	6563      	strge	r3, [r4, #84]	; 0x54
 801b652:	81a3      	strhlt	r3, [r4, #12]
 801b654:	bd10      	pop	{r4, pc}

0801b656 <__swrite>:
 801b656:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b65a:	461f      	mov	r7, r3
 801b65c:	898b      	ldrh	r3, [r1, #12]
 801b65e:	05db      	lsls	r3, r3, #23
 801b660:	4605      	mov	r5, r0
 801b662:	460c      	mov	r4, r1
 801b664:	4616      	mov	r6, r2
 801b666:	d505      	bpl.n	801b674 <__swrite+0x1e>
 801b668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b66c:	2302      	movs	r3, #2
 801b66e:	2200      	movs	r2, #0
 801b670:	f000 f96a 	bl	801b948 <_lseek_r>
 801b674:	89a3      	ldrh	r3, [r4, #12]
 801b676:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b67a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b67e:	81a3      	strh	r3, [r4, #12]
 801b680:	4632      	mov	r2, r6
 801b682:	463b      	mov	r3, r7
 801b684:	4628      	mov	r0, r5
 801b686:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b68a:	f000 b991 	b.w	801b9b0 <_write_r>

0801b68e <__sseek>:
 801b68e:	b510      	push	{r4, lr}
 801b690:	460c      	mov	r4, r1
 801b692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b696:	f000 f957 	bl	801b948 <_lseek_r>
 801b69a:	1c43      	adds	r3, r0, #1
 801b69c:	89a3      	ldrh	r3, [r4, #12]
 801b69e:	bf15      	itete	ne
 801b6a0:	6560      	strne	r0, [r4, #84]	; 0x54
 801b6a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b6a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b6aa:	81a3      	strheq	r3, [r4, #12]
 801b6ac:	bf18      	it	ne
 801b6ae:	81a3      	strhne	r3, [r4, #12]
 801b6b0:	bd10      	pop	{r4, pc}

0801b6b2 <__sclose>:
 801b6b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6b6:	f000 b937 	b.w	801b928 <_close_r>

0801b6ba <_vsniprintf_r>:
 801b6ba:	b530      	push	{r4, r5, lr}
 801b6bc:	4614      	mov	r4, r2
 801b6be:	2c00      	cmp	r4, #0
 801b6c0:	b09b      	sub	sp, #108	; 0x6c
 801b6c2:	4605      	mov	r5, r0
 801b6c4:	461a      	mov	r2, r3
 801b6c6:	da05      	bge.n	801b6d4 <_vsniprintf_r+0x1a>
 801b6c8:	238b      	movs	r3, #139	; 0x8b
 801b6ca:	6003      	str	r3, [r0, #0]
 801b6cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b6d0:	b01b      	add	sp, #108	; 0x6c
 801b6d2:	bd30      	pop	{r4, r5, pc}
 801b6d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 801b6d8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b6dc:	bf14      	ite	ne
 801b6de:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801b6e2:	4623      	moveq	r3, r4
 801b6e4:	9302      	str	r3, [sp, #8]
 801b6e6:	9305      	str	r3, [sp, #20]
 801b6e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b6ec:	9100      	str	r1, [sp, #0]
 801b6ee:	9104      	str	r1, [sp, #16]
 801b6f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b6f4:	4669      	mov	r1, sp
 801b6f6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801b6f8:	f000 fa88 	bl	801bc0c <_svfiprintf_r>
 801b6fc:	1c43      	adds	r3, r0, #1
 801b6fe:	bfbc      	itt	lt
 801b700:	238b      	movlt	r3, #139	; 0x8b
 801b702:	602b      	strlt	r3, [r5, #0]
 801b704:	2c00      	cmp	r4, #0
 801b706:	d0e3      	beq.n	801b6d0 <_vsniprintf_r+0x16>
 801b708:	9b00      	ldr	r3, [sp, #0]
 801b70a:	2200      	movs	r2, #0
 801b70c:	701a      	strb	r2, [r3, #0]
 801b70e:	e7df      	b.n	801b6d0 <_vsniprintf_r+0x16>

0801b710 <vsniprintf>:
 801b710:	b507      	push	{r0, r1, r2, lr}
 801b712:	9300      	str	r3, [sp, #0]
 801b714:	4613      	mov	r3, r2
 801b716:	460a      	mov	r2, r1
 801b718:	4601      	mov	r1, r0
 801b71a:	4803      	ldr	r0, [pc, #12]	; (801b728 <vsniprintf+0x18>)
 801b71c:	6800      	ldr	r0, [r0, #0]
 801b71e:	f7ff ffcc 	bl	801b6ba <_vsniprintf_r>
 801b722:	b003      	add	sp, #12
 801b724:	f85d fb04 	ldr.w	pc, [sp], #4
 801b728:	200003dc 	.word	0x200003dc

0801b72c <__swbuf_r>:
 801b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b72e:	460e      	mov	r6, r1
 801b730:	4614      	mov	r4, r2
 801b732:	4605      	mov	r5, r0
 801b734:	b118      	cbz	r0, 801b73e <__swbuf_r+0x12>
 801b736:	6a03      	ldr	r3, [r0, #32]
 801b738:	b90b      	cbnz	r3, 801b73e <__swbuf_r+0x12>
 801b73a:	f7ff fd9b 	bl	801b274 <__sinit>
 801b73e:	69a3      	ldr	r3, [r4, #24]
 801b740:	60a3      	str	r3, [r4, #8]
 801b742:	89a3      	ldrh	r3, [r4, #12]
 801b744:	071a      	lsls	r2, r3, #28
 801b746:	d525      	bpl.n	801b794 <__swbuf_r+0x68>
 801b748:	6923      	ldr	r3, [r4, #16]
 801b74a:	b31b      	cbz	r3, 801b794 <__swbuf_r+0x68>
 801b74c:	6823      	ldr	r3, [r4, #0]
 801b74e:	6922      	ldr	r2, [r4, #16]
 801b750:	1a98      	subs	r0, r3, r2
 801b752:	6963      	ldr	r3, [r4, #20]
 801b754:	b2f6      	uxtb	r6, r6
 801b756:	4283      	cmp	r3, r0
 801b758:	4637      	mov	r7, r6
 801b75a:	dc04      	bgt.n	801b766 <__swbuf_r+0x3a>
 801b75c:	4621      	mov	r1, r4
 801b75e:	4628      	mov	r0, r5
 801b760:	f000 feac 	bl	801c4bc <_fflush_r>
 801b764:	b9e0      	cbnz	r0, 801b7a0 <__swbuf_r+0x74>
 801b766:	68a3      	ldr	r3, [r4, #8]
 801b768:	3b01      	subs	r3, #1
 801b76a:	60a3      	str	r3, [r4, #8]
 801b76c:	6823      	ldr	r3, [r4, #0]
 801b76e:	1c5a      	adds	r2, r3, #1
 801b770:	6022      	str	r2, [r4, #0]
 801b772:	701e      	strb	r6, [r3, #0]
 801b774:	6962      	ldr	r2, [r4, #20]
 801b776:	1c43      	adds	r3, r0, #1
 801b778:	429a      	cmp	r2, r3
 801b77a:	d004      	beq.n	801b786 <__swbuf_r+0x5a>
 801b77c:	89a3      	ldrh	r3, [r4, #12]
 801b77e:	07db      	lsls	r3, r3, #31
 801b780:	d506      	bpl.n	801b790 <__swbuf_r+0x64>
 801b782:	2e0a      	cmp	r6, #10
 801b784:	d104      	bne.n	801b790 <__swbuf_r+0x64>
 801b786:	4621      	mov	r1, r4
 801b788:	4628      	mov	r0, r5
 801b78a:	f000 fe97 	bl	801c4bc <_fflush_r>
 801b78e:	b938      	cbnz	r0, 801b7a0 <__swbuf_r+0x74>
 801b790:	4638      	mov	r0, r7
 801b792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b794:	4621      	mov	r1, r4
 801b796:	4628      	mov	r0, r5
 801b798:	f000 f806 	bl	801b7a8 <__swsetup_r>
 801b79c:	2800      	cmp	r0, #0
 801b79e:	d0d5      	beq.n	801b74c <__swbuf_r+0x20>
 801b7a0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b7a4:	e7f4      	b.n	801b790 <__swbuf_r+0x64>
	...

0801b7a8 <__swsetup_r>:
 801b7a8:	b538      	push	{r3, r4, r5, lr}
 801b7aa:	4b2a      	ldr	r3, [pc, #168]	; (801b854 <__swsetup_r+0xac>)
 801b7ac:	4605      	mov	r5, r0
 801b7ae:	6818      	ldr	r0, [r3, #0]
 801b7b0:	460c      	mov	r4, r1
 801b7b2:	b118      	cbz	r0, 801b7bc <__swsetup_r+0x14>
 801b7b4:	6a03      	ldr	r3, [r0, #32]
 801b7b6:	b90b      	cbnz	r3, 801b7bc <__swsetup_r+0x14>
 801b7b8:	f7ff fd5c 	bl	801b274 <__sinit>
 801b7bc:	89a3      	ldrh	r3, [r4, #12]
 801b7be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b7c2:	0718      	lsls	r0, r3, #28
 801b7c4:	d422      	bmi.n	801b80c <__swsetup_r+0x64>
 801b7c6:	06d9      	lsls	r1, r3, #27
 801b7c8:	d407      	bmi.n	801b7da <__swsetup_r+0x32>
 801b7ca:	2309      	movs	r3, #9
 801b7cc:	602b      	str	r3, [r5, #0]
 801b7ce:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b7d2:	81a3      	strh	r3, [r4, #12]
 801b7d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b7d8:	e034      	b.n	801b844 <__swsetup_r+0x9c>
 801b7da:	0758      	lsls	r0, r3, #29
 801b7dc:	d512      	bpl.n	801b804 <__swsetup_r+0x5c>
 801b7de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b7e0:	b141      	cbz	r1, 801b7f4 <__swsetup_r+0x4c>
 801b7e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b7e6:	4299      	cmp	r1, r3
 801b7e8:	d002      	beq.n	801b7f0 <__swsetup_r+0x48>
 801b7ea:	4628      	mov	r0, r5
 801b7ec:	f000 f960 	bl	801bab0 <_free_r>
 801b7f0:	2300      	movs	r3, #0
 801b7f2:	6363      	str	r3, [r4, #52]	; 0x34
 801b7f4:	89a3      	ldrh	r3, [r4, #12]
 801b7f6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b7fa:	81a3      	strh	r3, [r4, #12]
 801b7fc:	2300      	movs	r3, #0
 801b7fe:	6063      	str	r3, [r4, #4]
 801b800:	6923      	ldr	r3, [r4, #16]
 801b802:	6023      	str	r3, [r4, #0]
 801b804:	89a3      	ldrh	r3, [r4, #12]
 801b806:	f043 0308 	orr.w	r3, r3, #8
 801b80a:	81a3      	strh	r3, [r4, #12]
 801b80c:	6923      	ldr	r3, [r4, #16]
 801b80e:	b94b      	cbnz	r3, 801b824 <__swsetup_r+0x7c>
 801b810:	89a3      	ldrh	r3, [r4, #12]
 801b812:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b81a:	d003      	beq.n	801b824 <__swsetup_r+0x7c>
 801b81c:	4621      	mov	r1, r4
 801b81e:	4628      	mov	r0, r5
 801b820:	f000 feac 	bl	801c57c <__smakebuf_r>
 801b824:	89a0      	ldrh	r0, [r4, #12]
 801b826:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b82a:	f010 0301 	ands.w	r3, r0, #1
 801b82e:	d00a      	beq.n	801b846 <__swsetup_r+0x9e>
 801b830:	2300      	movs	r3, #0
 801b832:	60a3      	str	r3, [r4, #8]
 801b834:	6963      	ldr	r3, [r4, #20]
 801b836:	425b      	negs	r3, r3
 801b838:	61a3      	str	r3, [r4, #24]
 801b83a:	6923      	ldr	r3, [r4, #16]
 801b83c:	b943      	cbnz	r3, 801b850 <__swsetup_r+0xa8>
 801b83e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b842:	d1c4      	bne.n	801b7ce <__swsetup_r+0x26>
 801b844:	bd38      	pop	{r3, r4, r5, pc}
 801b846:	0781      	lsls	r1, r0, #30
 801b848:	bf58      	it	pl
 801b84a:	6963      	ldrpl	r3, [r4, #20]
 801b84c:	60a3      	str	r3, [r4, #8]
 801b84e:	e7f4      	b.n	801b83a <__swsetup_r+0x92>
 801b850:	2000      	movs	r0, #0
 801b852:	e7f7      	b.n	801b844 <__swsetup_r+0x9c>
 801b854:	200003dc 	.word	0x200003dc

0801b858 <memcmp>:
 801b858:	b510      	push	{r4, lr}
 801b85a:	3901      	subs	r1, #1
 801b85c:	4402      	add	r2, r0
 801b85e:	4290      	cmp	r0, r2
 801b860:	d101      	bne.n	801b866 <memcmp+0xe>
 801b862:	2000      	movs	r0, #0
 801b864:	e005      	b.n	801b872 <memcmp+0x1a>
 801b866:	7803      	ldrb	r3, [r0, #0]
 801b868:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b86c:	42a3      	cmp	r3, r4
 801b86e:	d001      	beq.n	801b874 <memcmp+0x1c>
 801b870:	1b18      	subs	r0, r3, r4
 801b872:	bd10      	pop	{r4, pc}
 801b874:	3001      	adds	r0, #1
 801b876:	e7f2      	b.n	801b85e <memcmp+0x6>

0801b878 <memmove>:
 801b878:	4288      	cmp	r0, r1
 801b87a:	b510      	push	{r4, lr}
 801b87c:	eb01 0402 	add.w	r4, r1, r2
 801b880:	d902      	bls.n	801b888 <memmove+0x10>
 801b882:	4284      	cmp	r4, r0
 801b884:	4623      	mov	r3, r4
 801b886:	d807      	bhi.n	801b898 <memmove+0x20>
 801b888:	1e43      	subs	r3, r0, #1
 801b88a:	42a1      	cmp	r1, r4
 801b88c:	d008      	beq.n	801b8a0 <memmove+0x28>
 801b88e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b892:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b896:	e7f8      	b.n	801b88a <memmove+0x12>
 801b898:	4402      	add	r2, r0
 801b89a:	4601      	mov	r1, r0
 801b89c:	428a      	cmp	r2, r1
 801b89e:	d100      	bne.n	801b8a2 <memmove+0x2a>
 801b8a0:	bd10      	pop	{r4, pc}
 801b8a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b8a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b8aa:	e7f7      	b.n	801b89c <memmove+0x24>

0801b8ac <memset>:
 801b8ac:	4402      	add	r2, r0
 801b8ae:	4603      	mov	r3, r0
 801b8b0:	4293      	cmp	r3, r2
 801b8b2:	d100      	bne.n	801b8b6 <memset+0xa>
 801b8b4:	4770      	bx	lr
 801b8b6:	f803 1b01 	strb.w	r1, [r3], #1
 801b8ba:	e7f9      	b.n	801b8b0 <memset+0x4>

0801b8bc <strchr>:
 801b8bc:	b2c9      	uxtb	r1, r1
 801b8be:	4603      	mov	r3, r0
 801b8c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8c4:	b11a      	cbz	r2, 801b8ce <strchr+0x12>
 801b8c6:	428a      	cmp	r2, r1
 801b8c8:	d1f9      	bne.n	801b8be <strchr+0x2>
 801b8ca:	4618      	mov	r0, r3
 801b8cc:	4770      	bx	lr
 801b8ce:	2900      	cmp	r1, #0
 801b8d0:	bf18      	it	ne
 801b8d2:	2300      	movne	r3, #0
 801b8d4:	e7f9      	b.n	801b8ca <strchr+0xe>

0801b8d6 <strncmp>:
 801b8d6:	b510      	push	{r4, lr}
 801b8d8:	b16a      	cbz	r2, 801b8f6 <strncmp+0x20>
 801b8da:	3901      	subs	r1, #1
 801b8dc:	1884      	adds	r4, r0, r2
 801b8de:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b8e2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b8e6:	429a      	cmp	r2, r3
 801b8e8:	d103      	bne.n	801b8f2 <strncmp+0x1c>
 801b8ea:	42a0      	cmp	r0, r4
 801b8ec:	d001      	beq.n	801b8f2 <strncmp+0x1c>
 801b8ee:	2a00      	cmp	r2, #0
 801b8f0:	d1f5      	bne.n	801b8de <strncmp+0x8>
 801b8f2:	1ad0      	subs	r0, r2, r3
 801b8f4:	bd10      	pop	{r4, pc}
 801b8f6:	4610      	mov	r0, r2
 801b8f8:	e7fc      	b.n	801b8f4 <strncmp+0x1e>

0801b8fa <strstr>:
 801b8fa:	780a      	ldrb	r2, [r1, #0]
 801b8fc:	b570      	push	{r4, r5, r6, lr}
 801b8fe:	b96a      	cbnz	r2, 801b91c <strstr+0x22>
 801b900:	bd70      	pop	{r4, r5, r6, pc}
 801b902:	429a      	cmp	r2, r3
 801b904:	d109      	bne.n	801b91a <strstr+0x20>
 801b906:	460c      	mov	r4, r1
 801b908:	4605      	mov	r5, r0
 801b90a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d0f6      	beq.n	801b900 <strstr+0x6>
 801b912:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801b916:	429e      	cmp	r6, r3
 801b918:	d0f7      	beq.n	801b90a <strstr+0x10>
 801b91a:	3001      	adds	r0, #1
 801b91c:	7803      	ldrb	r3, [r0, #0]
 801b91e:	2b00      	cmp	r3, #0
 801b920:	d1ef      	bne.n	801b902 <strstr+0x8>
 801b922:	4618      	mov	r0, r3
 801b924:	e7ec      	b.n	801b900 <strstr+0x6>
	...

0801b928 <_close_r>:
 801b928:	b538      	push	{r3, r4, r5, lr}
 801b92a:	4d06      	ldr	r5, [pc, #24]	; (801b944 <_close_r+0x1c>)
 801b92c:	2300      	movs	r3, #0
 801b92e:	4604      	mov	r4, r0
 801b930:	4608      	mov	r0, r1
 801b932:	602b      	str	r3, [r5, #0]
 801b934:	f7e6 f8ed 	bl	8001b12 <_close>
 801b938:	1c43      	adds	r3, r0, #1
 801b93a:	d102      	bne.n	801b942 <_close_r+0x1a>
 801b93c:	682b      	ldr	r3, [r5, #0]
 801b93e:	b103      	cbz	r3, 801b942 <_close_r+0x1a>
 801b940:	6023      	str	r3, [r4, #0]
 801b942:	bd38      	pop	{r3, r4, r5, pc}
 801b944:	20011670 	.word	0x20011670

0801b948 <_lseek_r>:
 801b948:	b538      	push	{r3, r4, r5, lr}
 801b94a:	4d07      	ldr	r5, [pc, #28]	; (801b968 <_lseek_r+0x20>)
 801b94c:	4604      	mov	r4, r0
 801b94e:	4608      	mov	r0, r1
 801b950:	4611      	mov	r1, r2
 801b952:	2200      	movs	r2, #0
 801b954:	602a      	str	r2, [r5, #0]
 801b956:	461a      	mov	r2, r3
 801b958:	f7e6 f902 	bl	8001b60 <_lseek>
 801b95c:	1c43      	adds	r3, r0, #1
 801b95e:	d102      	bne.n	801b966 <_lseek_r+0x1e>
 801b960:	682b      	ldr	r3, [r5, #0]
 801b962:	b103      	cbz	r3, 801b966 <_lseek_r+0x1e>
 801b964:	6023      	str	r3, [r4, #0]
 801b966:	bd38      	pop	{r3, r4, r5, pc}
 801b968:	20011670 	.word	0x20011670

0801b96c <_read_r>:
 801b96c:	b538      	push	{r3, r4, r5, lr}
 801b96e:	4d07      	ldr	r5, [pc, #28]	; (801b98c <_read_r+0x20>)
 801b970:	4604      	mov	r4, r0
 801b972:	4608      	mov	r0, r1
 801b974:	4611      	mov	r1, r2
 801b976:	2200      	movs	r2, #0
 801b978:	602a      	str	r2, [r5, #0]
 801b97a:	461a      	mov	r2, r3
 801b97c:	f7e6 f890 	bl	8001aa0 <_read>
 801b980:	1c43      	adds	r3, r0, #1
 801b982:	d102      	bne.n	801b98a <_read_r+0x1e>
 801b984:	682b      	ldr	r3, [r5, #0]
 801b986:	b103      	cbz	r3, 801b98a <_read_r+0x1e>
 801b988:	6023      	str	r3, [r4, #0]
 801b98a:	bd38      	pop	{r3, r4, r5, pc}
 801b98c:	20011670 	.word	0x20011670

0801b990 <_sbrk_r>:
 801b990:	b538      	push	{r3, r4, r5, lr}
 801b992:	4d06      	ldr	r5, [pc, #24]	; (801b9ac <_sbrk_r+0x1c>)
 801b994:	2300      	movs	r3, #0
 801b996:	4604      	mov	r4, r0
 801b998:	4608      	mov	r0, r1
 801b99a:	602b      	str	r3, [r5, #0]
 801b99c:	f7e6 f8ee 	bl	8001b7c <_sbrk>
 801b9a0:	1c43      	adds	r3, r0, #1
 801b9a2:	d102      	bne.n	801b9aa <_sbrk_r+0x1a>
 801b9a4:	682b      	ldr	r3, [r5, #0]
 801b9a6:	b103      	cbz	r3, 801b9aa <_sbrk_r+0x1a>
 801b9a8:	6023      	str	r3, [r4, #0]
 801b9aa:	bd38      	pop	{r3, r4, r5, pc}
 801b9ac:	20011670 	.word	0x20011670

0801b9b0 <_write_r>:
 801b9b0:	b538      	push	{r3, r4, r5, lr}
 801b9b2:	4d07      	ldr	r5, [pc, #28]	; (801b9d0 <_write_r+0x20>)
 801b9b4:	4604      	mov	r4, r0
 801b9b6:	4608      	mov	r0, r1
 801b9b8:	4611      	mov	r1, r2
 801b9ba:	2200      	movs	r2, #0
 801b9bc:	602a      	str	r2, [r5, #0]
 801b9be:	461a      	mov	r2, r3
 801b9c0:	f7e6 f88b 	bl	8001ada <_write>
 801b9c4:	1c43      	adds	r3, r0, #1
 801b9c6:	d102      	bne.n	801b9ce <_write_r+0x1e>
 801b9c8:	682b      	ldr	r3, [r5, #0]
 801b9ca:	b103      	cbz	r3, 801b9ce <_write_r+0x1e>
 801b9cc:	6023      	str	r3, [r4, #0]
 801b9ce:	bd38      	pop	{r3, r4, r5, pc}
 801b9d0:	20011670 	.word	0x20011670

0801b9d4 <__errno>:
 801b9d4:	4b01      	ldr	r3, [pc, #4]	; (801b9dc <__errno+0x8>)
 801b9d6:	6818      	ldr	r0, [r3, #0]
 801b9d8:	4770      	bx	lr
 801b9da:	bf00      	nop
 801b9dc:	200003dc 	.word	0x200003dc

0801b9e0 <__libc_init_array>:
 801b9e0:	b570      	push	{r4, r5, r6, lr}
 801b9e2:	4d0d      	ldr	r5, [pc, #52]	; (801ba18 <__libc_init_array+0x38>)
 801b9e4:	4c0d      	ldr	r4, [pc, #52]	; (801ba1c <__libc_init_array+0x3c>)
 801b9e6:	1b64      	subs	r4, r4, r5
 801b9e8:	10a4      	asrs	r4, r4, #2
 801b9ea:	2600      	movs	r6, #0
 801b9ec:	42a6      	cmp	r6, r4
 801b9ee:	d109      	bne.n	801ba04 <__libc_init_array+0x24>
 801b9f0:	4d0b      	ldr	r5, [pc, #44]	; (801ba20 <__libc_init_array+0x40>)
 801b9f2:	4c0c      	ldr	r4, [pc, #48]	; (801ba24 <__libc_init_array+0x44>)
 801b9f4:	f000 fe6c 	bl	801c6d0 <_init>
 801b9f8:	1b64      	subs	r4, r4, r5
 801b9fa:	10a4      	asrs	r4, r4, #2
 801b9fc:	2600      	movs	r6, #0
 801b9fe:	42a6      	cmp	r6, r4
 801ba00:	d105      	bne.n	801ba0e <__libc_init_array+0x2e>
 801ba02:	bd70      	pop	{r4, r5, r6, pc}
 801ba04:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba08:	4798      	blx	r3
 801ba0a:	3601      	adds	r6, #1
 801ba0c:	e7ee      	b.n	801b9ec <__libc_init_array+0xc>
 801ba0e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ba12:	4798      	blx	r3
 801ba14:	3601      	adds	r6, #1
 801ba16:	e7f2      	b.n	801b9fe <__libc_init_array+0x1e>
 801ba18:	0801dc2c 	.word	0x0801dc2c
 801ba1c:	0801dc2c 	.word	0x0801dc2c
 801ba20:	0801dc2c 	.word	0x0801dc2c
 801ba24:	0801dc3c 	.word	0x0801dc3c

0801ba28 <__retarget_lock_init_recursive>:
 801ba28:	4770      	bx	lr

0801ba2a <__retarget_lock_acquire_recursive>:
 801ba2a:	4770      	bx	lr

0801ba2c <__retarget_lock_release_recursive>:
 801ba2c:	4770      	bx	lr

0801ba2e <strcpy>:
 801ba2e:	4603      	mov	r3, r0
 801ba30:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ba34:	f803 2b01 	strb.w	r2, [r3], #1
 801ba38:	2a00      	cmp	r2, #0
 801ba3a:	d1f9      	bne.n	801ba30 <strcpy+0x2>
 801ba3c:	4770      	bx	lr

0801ba3e <memcpy>:
 801ba3e:	440a      	add	r2, r1
 801ba40:	4291      	cmp	r1, r2
 801ba42:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801ba46:	d100      	bne.n	801ba4a <memcpy+0xc>
 801ba48:	4770      	bx	lr
 801ba4a:	b510      	push	{r4, lr}
 801ba4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ba50:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ba54:	4291      	cmp	r1, r2
 801ba56:	d1f9      	bne.n	801ba4c <memcpy+0xe>
 801ba58:	bd10      	pop	{r4, pc}
	...

0801ba5c <__assert_func>:
 801ba5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ba5e:	4614      	mov	r4, r2
 801ba60:	461a      	mov	r2, r3
 801ba62:	4b09      	ldr	r3, [pc, #36]	; (801ba88 <__assert_func+0x2c>)
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	4605      	mov	r5, r0
 801ba68:	68d8      	ldr	r0, [r3, #12]
 801ba6a:	b14c      	cbz	r4, 801ba80 <__assert_func+0x24>
 801ba6c:	4b07      	ldr	r3, [pc, #28]	; (801ba8c <__assert_func+0x30>)
 801ba6e:	9100      	str	r1, [sp, #0]
 801ba70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ba74:	4906      	ldr	r1, [pc, #24]	; (801ba90 <__assert_func+0x34>)
 801ba76:	462b      	mov	r3, r5
 801ba78:	f000 fd48 	bl	801c50c <fiprintf>
 801ba7c:	f000 fddc 	bl	801c638 <abort>
 801ba80:	4b04      	ldr	r3, [pc, #16]	; (801ba94 <__assert_func+0x38>)
 801ba82:	461c      	mov	r4, r3
 801ba84:	e7f3      	b.n	801ba6e <__assert_func+0x12>
 801ba86:	bf00      	nop
 801ba88:	200003dc 	.word	0x200003dc
 801ba8c:	0801dbb4 	.word	0x0801dbb4
 801ba90:	0801dbc1 	.word	0x0801dbc1
 801ba94:	0801dbef 	.word	0x0801dbef

0801ba98 <__env_lock>:
 801ba98:	4801      	ldr	r0, [pc, #4]	; (801baa0 <__env_lock+0x8>)
 801ba9a:	f7ff bfc6 	b.w	801ba2a <__retarget_lock_acquire_recursive>
 801ba9e:	bf00      	nop
 801baa0:	20011674 	.word	0x20011674

0801baa4 <__env_unlock>:
 801baa4:	4801      	ldr	r0, [pc, #4]	; (801baac <__env_unlock+0x8>)
 801baa6:	f7ff bfc1 	b.w	801ba2c <__retarget_lock_release_recursive>
 801baaa:	bf00      	nop
 801baac:	20011674 	.word	0x20011674

0801bab0 <_free_r>:
 801bab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bab2:	2900      	cmp	r1, #0
 801bab4:	d044      	beq.n	801bb40 <_free_r+0x90>
 801bab6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801baba:	9001      	str	r0, [sp, #4]
 801babc:	2b00      	cmp	r3, #0
 801babe:	f1a1 0404 	sub.w	r4, r1, #4
 801bac2:	bfb8      	it	lt
 801bac4:	18e4      	addlt	r4, r4, r3
 801bac6:	f7ff fa1d 	bl	801af04 <__malloc_lock>
 801baca:	4a1e      	ldr	r2, [pc, #120]	; (801bb44 <_free_r+0x94>)
 801bacc:	9801      	ldr	r0, [sp, #4]
 801bace:	6813      	ldr	r3, [r2, #0]
 801bad0:	b933      	cbnz	r3, 801bae0 <_free_r+0x30>
 801bad2:	6063      	str	r3, [r4, #4]
 801bad4:	6014      	str	r4, [r2, #0]
 801bad6:	b003      	add	sp, #12
 801bad8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801badc:	f7ff ba18 	b.w	801af10 <__malloc_unlock>
 801bae0:	42a3      	cmp	r3, r4
 801bae2:	d908      	bls.n	801baf6 <_free_r+0x46>
 801bae4:	6825      	ldr	r5, [r4, #0]
 801bae6:	1961      	adds	r1, r4, r5
 801bae8:	428b      	cmp	r3, r1
 801baea:	bf01      	itttt	eq
 801baec:	6819      	ldreq	r1, [r3, #0]
 801baee:	685b      	ldreq	r3, [r3, #4]
 801baf0:	1949      	addeq	r1, r1, r5
 801baf2:	6021      	streq	r1, [r4, #0]
 801baf4:	e7ed      	b.n	801bad2 <_free_r+0x22>
 801baf6:	461a      	mov	r2, r3
 801baf8:	685b      	ldr	r3, [r3, #4]
 801bafa:	b10b      	cbz	r3, 801bb00 <_free_r+0x50>
 801bafc:	42a3      	cmp	r3, r4
 801bafe:	d9fa      	bls.n	801baf6 <_free_r+0x46>
 801bb00:	6811      	ldr	r1, [r2, #0]
 801bb02:	1855      	adds	r5, r2, r1
 801bb04:	42a5      	cmp	r5, r4
 801bb06:	d10b      	bne.n	801bb20 <_free_r+0x70>
 801bb08:	6824      	ldr	r4, [r4, #0]
 801bb0a:	4421      	add	r1, r4
 801bb0c:	1854      	adds	r4, r2, r1
 801bb0e:	42a3      	cmp	r3, r4
 801bb10:	6011      	str	r1, [r2, #0]
 801bb12:	d1e0      	bne.n	801bad6 <_free_r+0x26>
 801bb14:	681c      	ldr	r4, [r3, #0]
 801bb16:	685b      	ldr	r3, [r3, #4]
 801bb18:	6053      	str	r3, [r2, #4]
 801bb1a:	440c      	add	r4, r1
 801bb1c:	6014      	str	r4, [r2, #0]
 801bb1e:	e7da      	b.n	801bad6 <_free_r+0x26>
 801bb20:	d902      	bls.n	801bb28 <_free_r+0x78>
 801bb22:	230c      	movs	r3, #12
 801bb24:	6003      	str	r3, [r0, #0]
 801bb26:	e7d6      	b.n	801bad6 <_free_r+0x26>
 801bb28:	6825      	ldr	r5, [r4, #0]
 801bb2a:	1961      	adds	r1, r4, r5
 801bb2c:	428b      	cmp	r3, r1
 801bb2e:	bf04      	itt	eq
 801bb30:	6819      	ldreq	r1, [r3, #0]
 801bb32:	685b      	ldreq	r3, [r3, #4]
 801bb34:	6063      	str	r3, [r4, #4]
 801bb36:	bf04      	itt	eq
 801bb38:	1949      	addeq	r1, r1, r5
 801bb3a:	6021      	streq	r1, [r4, #0]
 801bb3c:	6054      	str	r4, [r2, #4]
 801bb3e:	e7ca      	b.n	801bad6 <_free_r+0x26>
 801bb40:	b003      	add	sp, #12
 801bb42:	bd30      	pop	{r4, r5, pc}
 801bb44:	2001152c 	.word	0x2001152c

0801bb48 <_malloc_usable_size_r>:
 801bb48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bb4c:	1f18      	subs	r0, r3, #4
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	bfbc      	itt	lt
 801bb52:	580b      	ldrlt	r3, [r1, r0]
 801bb54:	18c0      	addlt	r0, r0, r3
 801bb56:	4770      	bx	lr

0801bb58 <__ssputs_r>:
 801bb58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bb5c:	688e      	ldr	r6, [r1, #8]
 801bb5e:	461f      	mov	r7, r3
 801bb60:	42be      	cmp	r6, r7
 801bb62:	680b      	ldr	r3, [r1, #0]
 801bb64:	4682      	mov	sl, r0
 801bb66:	460c      	mov	r4, r1
 801bb68:	4690      	mov	r8, r2
 801bb6a:	d82c      	bhi.n	801bbc6 <__ssputs_r+0x6e>
 801bb6c:	898a      	ldrh	r2, [r1, #12]
 801bb6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801bb72:	d026      	beq.n	801bbc2 <__ssputs_r+0x6a>
 801bb74:	6965      	ldr	r5, [r4, #20]
 801bb76:	6909      	ldr	r1, [r1, #16]
 801bb78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bb7c:	eba3 0901 	sub.w	r9, r3, r1
 801bb80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801bb84:	1c7b      	adds	r3, r7, #1
 801bb86:	444b      	add	r3, r9
 801bb88:	106d      	asrs	r5, r5, #1
 801bb8a:	429d      	cmp	r5, r3
 801bb8c:	bf38      	it	cc
 801bb8e:	461d      	movcc	r5, r3
 801bb90:	0553      	lsls	r3, r2, #21
 801bb92:	d527      	bpl.n	801bbe4 <__ssputs_r+0x8c>
 801bb94:	4629      	mov	r1, r5
 801bb96:	f7ff f935 	bl	801ae04 <_malloc_r>
 801bb9a:	4606      	mov	r6, r0
 801bb9c:	b360      	cbz	r0, 801bbf8 <__ssputs_r+0xa0>
 801bb9e:	6921      	ldr	r1, [r4, #16]
 801bba0:	464a      	mov	r2, r9
 801bba2:	f7ff ff4c 	bl	801ba3e <memcpy>
 801bba6:	89a3      	ldrh	r3, [r4, #12]
 801bba8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801bbac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bbb0:	81a3      	strh	r3, [r4, #12]
 801bbb2:	6126      	str	r6, [r4, #16]
 801bbb4:	6165      	str	r5, [r4, #20]
 801bbb6:	444e      	add	r6, r9
 801bbb8:	eba5 0509 	sub.w	r5, r5, r9
 801bbbc:	6026      	str	r6, [r4, #0]
 801bbbe:	60a5      	str	r5, [r4, #8]
 801bbc0:	463e      	mov	r6, r7
 801bbc2:	42be      	cmp	r6, r7
 801bbc4:	d900      	bls.n	801bbc8 <__ssputs_r+0x70>
 801bbc6:	463e      	mov	r6, r7
 801bbc8:	6820      	ldr	r0, [r4, #0]
 801bbca:	4632      	mov	r2, r6
 801bbcc:	4641      	mov	r1, r8
 801bbce:	f7ff fe53 	bl	801b878 <memmove>
 801bbd2:	68a3      	ldr	r3, [r4, #8]
 801bbd4:	1b9b      	subs	r3, r3, r6
 801bbd6:	60a3      	str	r3, [r4, #8]
 801bbd8:	6823      	ldr	r3, [r4, #0]
 801bbda:	4433      	add	r3, r6
 801bbdc:	6023      	str	r3, [r4, #0]
 801bbde:	2000      	movs	r0, #0
 801bbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbe4:	462a      	mov	r2, r5
 801bbe6:	f7ff fa0d 	bl	801b004 <_realloc_r>
 801bbea:	4606      	mov	r6, r0
 801bbec:	2800      	cmp	r0, #0
 801bbee:	d1e0      	bne.n	801bbb2 <__ssputs_r+0x5a>
 801bbf0:	6921      	ldr	r1, [r4, #16]
 801bbf2:	4650      	mov	r0, sl
 801bbf4:	f7ff ff5c 	bl	801bab0 <_free_r>
 801bbf8:	230c      	movs	r3, #12
 801bbfa:	f8ca 3000 	str.w	r3, [sl]
 801bbfe:	89a3      	ldrh	r3, [r4, #12]
 801bc00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc04:	81a3      	strh	r3, [r4, #12]
 801bc06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc0a:	e7e9      	b.n	801bbe0 <__ssputs_r+0x88>

0801bc0c <_svfiprintf_r>:
 801bc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc10:	4698      	mov	r8, r3
 801bc12:	898b      	ldrh	r3, [r1, #12]
 801bc14:	061b      	lsls	r3, r3, #24
 801bc16:	b09d      	sub	sp, #116	; 0x74
 801bc18:	4607      	mov	r7, r0
 801bc1a:	460d      	mov	r5, r1
 801bc1c:	4614      	mov	r4, r2
 801bc1e:	d50e      	bpl.n	801bc3e <_svfiprintf_r+0x32>
 801bc20:	690b      	ldr	r3, [r1, #16]
 801bc22:	b963      	cbnz	r3, 801bc3e <_svfiprintf_r+0x32>
 801bc24:	2140      	movs	r1, #64	; 0x40
 801bc26:	f7ff f8ed 	bl	801ae04 <_malloc_r>
 801bc2a:	6028      	str	r0, [r5, #0]
 801bc2c:	6128      	str	r0, [r5, #16]
 801bc2e:	b920      	cbnz	r0, 801bc3a <_svfiprintf_r+0x2e>
 801bc30:	230c      	movs	r3, #12
 801bc32:	603b      	str	r3, [r7, #0]
 801bc34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc38:	e0d0      	b.n	801bddc <_svfiprintf_r+0x1d0>
 801bc3a:	2340      	movs	r3, #64	; 0x40
 801bc3c:	616b      	str	r3, [r5, #20]
 801bc3e:	2300      	movs	r3, #0
 801bc40:	9309      	str	r3, [sp, #36]	; 0x24
 801bc42:	2320      	movs	r3, #32
 801bc44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bc48:	f8cd 800c 	str.w	r8, [sp, #12]
 801bc4c:	2330      	movs	r3, #48	; 0x30
 801bc4e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801bdf4 <_svfiprintf_r+0x1e8>
 801bc52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bc56:	f04f 0901 	mov.w	r9, #1
 801bc5a:	4623      	mov	r3, r4
 801bc5c:	469a      	mov	sl, r3
 801bc5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bc62:	b10a      	cbz	r2, 801bc68 <_svfiprintf_r+0x5c>
 801bc64:	2a25      	cmp	r2, #37	; 0x25
 801bc66:	d1f9      	bne.n	801bc5c <_svfiprintf_r+0x50>
 801bc68:	ebba 0b04 	subs.w	fp, sl, r4
 801bc6c:	d00b      	beq.n	801bc86 <_svfiprintf_r+0x7a>
 801bc6e:	465b      	mov	r3, fp
 801bc70:	4622      	mov	r2, r4
 801bc72:	4629      	mov	r1, r5
 801bc74:	4638      	mov	r0, r7
 801bc76:	f7ff ff6f 	bl	801bb58 <__ssputs_r>
 801bc7a:	3001      	adds	r0, #1
 801bc7c:	f000 80a9 	beq.w	801bdd2 <_svfiprintf_r+0x1c6>
 801bc80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bc82:	445a      	add	r2, fp
 801bc84:	9209      	str	r2, [sp, #36]	; 0x24
 801bc86:	f89a 3000 	ldrb.w	r3, [sl]
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	f000 80a1 	beq.w	801bdd2 <_svfiprintf_r+0x1c6>
 801bc90:	2300      	movs	r3, #0
 801bc92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bc96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bc9a:	f10a 0a01 	add.w	sl, sl, #1
 801bc9e:	9304      	str	r3, [sp, #16]
 801bca0:	9307      	str	r3, [sp, #28]
 801bca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bca6:	931a      	str	r3, [sp, #104]	; 0x68
 801bca8:	4654      	mov	r4, sl
 801bcaa:	2205      	movs	r2, #5
 801bcac:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bcb0:	4850      	ldr	r0, [pc, #320]	; (801bdf4 <_svfiprintf_r+0x1e8>)
 801bcb2:	f7e4 fadd 	bl	8000270 <memchr>
 801bcb6:	9a04      	ldr	r2, [sp, #16]
 801bcb8:	b9d8      	cbnz	r0, 801bcf2 <_svfiprintf_r+0xe6>
 801bcba:	06d0      	lsls	r0, r2, #27
 801bcbc:	bf44      	itt	mi
 801bcbe:	2320      	movmi	r3, #32
 801bcc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bcc4:	0711      	lsls	r1, r2, #28
 801bcc6:	bf44      	itt	mi
 801bcc8:	232b      	movmi	r3, #43	; 0x2b
 801bcca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bcce:	f89a 3000 	ldrb.w	r3, [sl]
 801bcd2:	2b2a      	cmp	r3, #42	; 0x2a
 801bcd4:	d015      	beq.n	801bd02 <_svfiprintf_r+0xf6>
 801bcd6:	9a07      	ldr	r2, [sp, #28]
 801bcd8:	4654      	mov	r4, sl
 801bcda:	2000      	movs	r0, #0
 801bcdc:	f04f 0c0a 	mov.w	ip, #10
 801bce0:	4621      	mov	r1, r4
 801bce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bce6:	3b30      	subs	r3, #48	; 0x30
 801bce8:	2b09      	cmp	r3, #9
 801bcea:	d94d      	bls.n	801bd88 <_svfiprintf_r+0x17c>
 801bcec:	b1b0      	cbz	r0, 801bd1c <_svfiprintf_r+0x110>
 801bcee:	9207      	str	r2, [sp, #28]
 801bcf0:	e014      	b.n	801bd1c <_svfiprintf_r+0x110>
 801bcf2:	eba0 0308 	sub.w	r3, r0, r8
 801bcf6:	fa09 f303 	lsl.w	r3, r9, r3
 801bcfa:	4313      	orrs	r3, r2
 801bcfc:	9304      	str	r3, [sp, #16]
 801bcfe:	46a2      	mov	sl, r4
 801bd00:	e7d2      	b.n	801bca8 <_svfiprintf_r+0x9c>
 801bd02:	9b03      	ldr	r3, [sp, #12]
 801bd04:	1d19      	adds	r1, r3, #4
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	9103      	str	r1, [sp, #12]
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	bfbb      	ittet	lt
 801bd0e:	425b      	neglt	r3, r3
 801bd10:	f042 0202 	orrlt.w	r2, r2, #2
 801bd14:	9307      	strge	r3, [sp, #28]
 801bd16:	9307      	strlt	r3, [sp, #28]
 801bd18:	bfb8      	it	lt
 801bd1a:	9204      	strlt	r2, [sp, #16]
 801bd1c:	7823      	ldrb	r3, [r4, #0]
 801bd1e:	2b2e      	cmp	r3, #46	; 0x2e
 801bd20:	d10c      	bne.n	801bd3c <_svfiprintf_r+0x130>
 801bd22:	7863      	ldrb	r3, [r4, #1]
 801bd24:	2b2a      	cmp	r3, #42	; 0x2a
 801bd26:	d134      	bne.n	801bd92 <_svfiprintf_r+0x186>
 801bd28:	9b03      	ldr	r3, [sp, #12]
 801bd2a:	1d1a      	adds	r2, r3, #4
 801bd2c:	681b      	ldr	r3, [r3, #0]
 801bd2e:	9203      	str	r2, [sp, #12]
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	bfb8      	it	lt
 801bd34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801bd38:	3402      	adds	r4, #2
 801bd3a:	9305      	str	r3, [sp, #20]
 801bd3c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801be04 <_svfiprintf_r+0x1f8>
 801bd40:	7821      	ldrb	r1, [r4, #0]
 801bd42:	2203      	movs	r2, #3
 801bd44:	4650      	mov	r0, sl
 801bd46:	f7e4 fa93 	bl	8000270 <memchr>
 801bd4a:	b138      	cbz	r0, 801bd5c <_svfiprintf_r+0x150>
 801bd4c:	9b04      	ldr	r3, [sp, #16]
 801bd4e:	eba0 000a 	sub.w	r0, r0, sl
 801bd52:	2240      	movs	r2, #64	; 0x40
 801bd54:	4082      	lsls	r2, r0
 801bd56:	4313      	orrs	r3, r2
 801bd58:	3401      	adds	r4, #1
 801bd5a:	9304      	str	r3, [sp, #16]
 801bd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd60:	4825      	ldr	r0, [pc, #148]	; (801bdf8 <_svfiprintf_r+0x1ec>)
 801bd62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bd66:	2206      	movs	r2, #6
 801bd68:	f7e4 fa82 	bl	8000270 <memchr>
 801bd6c:	2800      	cmp	r0, #0
 801bd6e:	d038      	beq.n	801bde2 <_svfiprintf_r+0x1d6>
 801bd70:	4b22      	ldr	r3, [pc, #136]	; (801bdfc <_svfiprintf_r+0x1f0>)
 801bd72:	bb1b      	cbnz	r3, 801bdbc <_svfiprintf_r+0x1b0>
 801bd74:	9b03      	ldr	r3, [sp, #12]
 801bd76:	3307      	adds	r3, #7
 801bd78:	f023 0307 	bic.w	r3, r3, #7
 801bd7c:	3308      	adds	r3, #8
 801bd7e:	9303      	str	r3, [sp, #12]
 801bd80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd82:	4433      	add	r3, r6
 801bd84:	9309      	str	r3, [sp, #36]	; 0x24
 801bd86:	e768      	b.n	801bc5a <_svfiprintf_r+0x4e>
 801bd88:	fb0c 3202 	mla	r2, ip, r2, r3
 801bd8c:	460c      	mov	r4, r1
 801bd8e:	2001      	movs	r0, #1
 801bd90:	e7a6      	b.n	801bce0 <_svfiprintf_r+0xd4>
 801bd92:	2300      	movs	r3, #0
 801bd94:	3401      	adds	r4, #1
 801bd96:	9305      	str	r3, [sp, #20]
 801bd98:	4619      	mov	r1, r3
 801bd9a:	f04f 0c0a 	mov.w	ip, #10
 801bd9e:	4620      	mov	r0, r4
 801bda0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bda4:	3a30      	subs	r2, #48	; 0x30
 801bda6:	2a09      	cmp	r2, #9
 801bda8:	d903      	bls.n	801bdb2 <_svfiprintf_r+0x1a6>
 801bdaa:	2b00      	cmp	r3, #0
 801bdac:	d0c6      	beq.n	801bd3c <_svfiprintf_r+0x130>
 801bdae:	9105      	str	r1, [sp, #20]
 801bdb0:	e7c4      	b.n	801bd3c <_svfiprintf_r+0x130>
 801bdb2:	fb0c 2101 	mla	r1, ip, r1, r2
 801bdb6:	4604      	mov	r4, r0
 801bdb8:	2301      	movs	r3, #1
 801bdba:	e7f0      	b.n	801bd9e <_svfiprintf_r+0x192>
 801bdbc:	ab03      	add	r3, sp, #12
 801bdbe:	9300      	str	r3, [sp, #0]
 801bdc0:	462a      	mov	r2, r5
 801bdc2:	4b0f      	ldr	r3, [pc, #60]	; (801be00 <_svfiprintf_r+0x1f4>)
 801bdc4:	a904      	add	r1, sp, #16
 801bdc6:	4638      	mov	r0, r7
 801bdc8:	f3af 8000 	nop.w
 801bdcc:	1c42      	adds	r2, r0, #1
 801bdce:	4606      	mov	r6, r0
 801bdd0:	d1d6      	bne.n	801bd80 <_svfiprintf_r+0x174>
 801bdd2:	89ab      	ldrh	r3, [r5, #12]
 801bdd4:	065b      	lsls	r3, r3, #25
 801bdd6:	f53f af2d 	bmi.w	801bc34 <_svfiprintf_r+0x28>
 801bdda:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bddc:	b01d      	add	sp, #116	; 0x74
 801bdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bde2:	ab03      	add	r3, sp, #12
 801bde4:	9300      	str	r3, [sp, #0]
 801bde6:	462a      	mov	r2, r5
 801bde8:	4b05      	ldr	r3, [pc, #20]	; (801be00 <_svfiprintf_r+0x1f4>)
 801bdea:	a904      	add	r1, sp, #16
 801bdec:	4638      	mov	r0, r7
 801bdee:	f000 f9bd 	bl	801c16c <_printf_i>
 801bdf2:	e7eb      	b.n	801bdcc <_svfiprintf_r+0x1c0>
 801bdf4:	0801dbf0 	.word	0x0801dbf0
 801bdf8:	0801dbfa 	.word	0x0801dbfa
 801bdfc:	00000000 	.word	0x00000000
 801be00:	0801bb59 	.word	0x0801bb59
 801be04:	0801dbf6 	.word	0x0801dbf6

0801be08 <__sfputc_r>:
 801be08:	6893      	ldr	r3, [r2, #8]
 801be0a:	3b01      	subs	r3, #1
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	b410      	push	{r4}
 801be10:	6093      	str	r3, [r2, #8]
 801be12:	da08      	bge.n	801be26 <__sfputc_r+0x1e>
 801be14:	6994      	ldr	r4, [r2, #24]
 801be16:	42a3      	cmp	r3, r4
 801be18:	db01      	blt.n	801be1e <__sfputc_r+0x16>
 801be1a:	290a      	cmp	r1, #10
 801be1c:	d103      	bne.n	801be26 <__sfputc_r+0x1e>
 801be1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be22:	f7ff bc83 	b.w	801b72c <__swbuf_r>
 801be26:	6813      	ldr	r3, [r2, #0]
 801be28:	1c58      	adds	r0, r3, #1
 801be2a:	6010      	str	r0, [r2, #0]
 801be2c:	7019      	strb	r1, [r3, #0]
 801be2e:	4608      	mov	r0, r1
 801be30:	f85d 4b04 	ldr.w	r4, [sp], #4
 801be34:	4770      	bx	lr

0801be36 <__sfputs_r>:
 801be36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be38:	4606      	mov	r6, r0
 801be3a:	460f      	mov	r7, r1
 801be3c:	4614      	mov	r4, r2
 801be3e:	18d5      	adds	r5, r2, r3
 801be40:	42ac      	cmp	r4, r5
 801be42:	d101      	bne.n	801be48 <__sfputs_r+0x12>
 801be44:	2000      	movs	r0, #0
 801be46:	e007      	b.n	801be58 <__sfputs_r+0x22>
 801be48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be4c:	463a      	mov	r2, r7
 801be4e:	4630      	mov	r0, r6
 801be50:	f7ff ffda 	bl	801be08 <__sfputc_r>
 801be54:	1c43      	adds	r3, r0, #1
 801be56:	d1f3      	bne.n	801be40 <__sfputs_r+0xa>
 801be58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801be5c <_vfiprintf_r>:
 801be5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be60:	460d      	mov	r5, r1
 801be62:	b09d      	sub	sp, #116	; 0x74
 801be64:	4614      	mov	r4, r2
 801be66:	4698      	mov	r8, r3
 801be68:	4606      	mov	r6, r0
 801be6a:	b118      	cbz	r0, 801be74 <_vfiprintf_r+0x18>
 801be6c:	6a03      	ldr	r3, [r0, #32]
 801be6e:	b90b      	cbnz	r3, 801be74 <_vfiprintf_r+0x18>
 801be70:	f7ff fa00 	bl	801b274 <__sinit>
 801be74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be76:	07d9      	lsls	r1, r3, #31
 801be78:	d405      	bmi.n	801be86 <_vfiprintf_r+0x2a>
 801be7a:	89ab      	ldrh	r3, [r5, #12]
 801be7c:	059a      	lsls	r2, r3, #22
 801be7e:	d402      	bmi.n	801be86 <_vfiprintf_r+0x2a>
 801be80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801be82:	f7ff fdd2 	bl	801ba2a <__retarget_lock_acquire_recursive>
 801be86:	89ab      	ldrh	r3, [r5, #12]
 801be88:	071b      	lsls	r3, r3, #28
 801be8a:	d501      	bpl.n	801be90 <_vfiprintf_r+0x34>
 801be8c:	692b      	ldr	r3, [r5, #16]
 801be8e:	b99b      	cbnz	r3, 801beb8 <_vfiprintf_r+0x5c>
 801be90:	4629      	mov	r1, r5
 801be92:	4630      	mov	r0, r6
 801be94:	f7ff fc88 	bl	801b7a8 <__swsetup_r>
 801be98:	b170      	cbz	r0, 801beb8 <_vfiprintf_r+0x5c>
 801be9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801be9c:	07dc      	lsls	r4, r3, #31
 801be9e:	d504      	bpl.n	801beaa <_vfiprintf_r+0x4e>
 801bea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bea4:	b01d      	add	sp, #116	; 0x74
 801bea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801beaa:	89ab      	ldrh	r3, [r5, #12]
 801beac:	0598      	lsls	r0, r3, #22
 801beae:	d4f7      	bmi.n	801bea0 <_vfiprintf_r+0x44>
 801beb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801beb2:	f7ff fdbb 	bl	801ba2c <__retarget_lock_release_recursive>
 801beb6:	e7f3      	b.n	801bea0 <_vfiprintf_r+0x44>
 801beb8:	2300      	movs	r3, #0
 801beba:	9309      	str	r3, [sp, #36]	; 0x24
 801bebc:	2320      	movs	r3, #32
 801bebe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bec2:	f8cd 800c 	str.w	r8, [sp, #12]
 801bec6:	2330      	movs	r3, #48	; 0x30
 801bec8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801c07c <_vfiprintf_r+0x220>
 801becc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bed0:	f04f 0901 	mov.w	r9, #1
 801bed4:	4623      	mov	r3, r4
 801bed6:	469a      	mov	sl, r3
 801bed8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bedc:	b10a      	cbz	r2, 801bee2 <_vfiprintf_r+0x86>
 801bede:	2a25      	cmp	r2, #37	; 0x25
 801bee0:	d1f9      	bne.n	801bed6 <_vfiprintf_r+0x7a>
 801bee2:	ebba 0b04 	subs.w	fp, sl, r4
 801bee6:	d00b      	beq.n	801bf00 <_vfiprintf_r+0xa4>
 801bee8:	465b      	mov	r3, fp
 801beea:	4622      	mov	r2, r4
 801beec:	4629      	mov	r1, r5
 801beee:	4630      	mov	r0, r6
 801bef0:	f7ff ffa1 	bl	801be36 <__sfputs_r>
 801bef4:	3001      	adds	r0, #1
 801bef6:	f000 80a9 	beq.w	801c04c <_vfiprintf_r+0x1f0>
 801befa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801befc:	445a      	add	r2, fp
 801befe:	9209      	str	r2, [sp, #36]	; 0x24
 801bf00:	f89a 3000 	ldrb.w	r3, [sl]
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	f000 80a1 	beq.w	801c04c <_vfiprintf_r+0x1f0>
 801bf0a:	2300      	movs	r3, #0
 801bf0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bf10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bf14:	f10a 0a01 	add.w	sl, sl, #1
 801bf18:	9304      	str	r3, [sp, #16]
 801bf1a:	9307      	str	r3, [sp, #28]
 801bf1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bf20:	931a      	str	r3, [sp, #104]	; 0x68
 801bf22:	4654      	mov	r4, sl
 801bf24:	2205      	movs	r2, #5
 801bf26:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf2a:	4854      	ldr	r0, [pc, #336]	; (801c07c <_vfiprintf_r+0x220>)
 801bf2c:	f7e4 f9a0 	bl	8000270 <memchr>
 801bf30:	9a04      	ldr	r2, [sp, #16]
 801bf32:	b9d8      	cbnz	r0, 801bf6c <_vfiprintf_r+0x110>
 801bf34:	06d1      	lsls	r1, r2, #27
 801bf36:	bf44      	itt	mi
 801bf38:	2320      	movmi	r3, #32
 801bf3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf3e:	0713      	lsls	r3, r2, #28
 801bf40:	bf44      	itt	mi
 801bf42:	232b      	movmi	r3, #43	; 0x2b
 801bf44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bf48:	f89a 3000 	ldrb.w	r3, [sl]
 801bf4c:	2b2a      	cmp	r3, #42	; 0x2a
 801bf4e:	d015      	beq.n	801bf7c <_vfiprintf_r+0x120>
 801bf50:	9a07      	ldr	r2, [sp, #28]
 801bf52:	4654      	mov	r4, sl
 801bf54:	2000      	movs	r0, #0
 801bf56:	f04f 0c0a 	mov.w	ip, #10
 801bf5a:	4621      	mov	r1, r4
 801bf5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bf60:	3b30      	subs	r3, #48	; 0x30
 801bf62:	2b09      	cmp	r3, #9
 801bf64:	d94d      	bls.n	801c002 <_vfiprintf_r+0x1a6>
 801bf66:	b1b0      	cbz	r0, 801bf96 <_vfiprintf_r+0x13a>
 801bf68:	9207      	str	r2, [sp, #28]
 801bf6a:	e014      	b.n	801bf96 <_vfiprintf_r+0x13a>
 801bf6c:	eba0 0308 	sub.w	r3, r0, r8
 801bf70:	fa09 f303 	lsl.w	r3, r9, r3
 801bf74:	4313      	orrs	r3, r2
 801bf76:	9304      	str	r3, [sp, #16]
 801bf78:	46a2      	mov	sl, r4
 801bf7a:	e7d2      	b.n	801bf22 <_vfiprintf_r+0xc6>
 801bf7c:	9b03      	ldr	r3, [sp, #12]
 801bf7e:	1d19      	adds	r1, r3, #4
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	9103      	str	r1, [sp, #12]
 801bf84:	2b00      	cmp	r3, #0
 801bf86:	bfbb      	ittet	lt
 801bf88:	425b      	neglt	r3, r3
 801bf8a:	f042 0202 	orrlt.w	r2, r2, #2
 801bf8e:	9307      	strge	r3, [sp, #28]
 801bf90:	9307      	strlt	r3, [sp, #28]
 801bf92:	bfb8      	it	lt
 801bf94:	9204      	strlt	r2, [sp, #16]
 801bf96:	7823      	ldrb	r3, [r4, #0]
 801bf98:	2b2e      	cmp	r3, #46	; 0x2e
 801bf9a:	d10c      	bne.n	801bfb6 <_vfiprintf_r+0x15a>
 801bf9c:	7863      	ldrb	r3, [r4, #1]
 801bf9e:	2b2a      	cmp	r3, #42	; 0x2a
 801bfa0:	d134      	bne.n	801c00c <_vfiprintf_r+0x1b0>
 801bfa2:	9b03      	ldr	r3, [sp, #12]
 801bfa4:	1d1a      	adds	r2, r3, #4
 801bfa6:	681b      	ldr	r3, [r3, #0]
 801bfa8:	9203      	str	r2, [sp, #12]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	bfb8      	it	lt
 801bfae:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801bfb2:	3402      	adds	r4, #2
 801bfb4:	9305      	str	r3, [sp, #20]
 801bfb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801c08c <_vfiprintf_r+0x230>
 801bfba:	7821      	ldrb	r1, [r4, #0]
 801bfbc:	2203      	movs	r2, #3
 801bfbe:	4650      	mov	r0, sl
 801bfc0:	f7e4 f956 	bl	8000270 <memchr>
 801bfc4:	b138      	cbz	r0, 801bfd6 <_vfiprintf_r+0x17a>
 801bfc6:	9b04      	ldr	r3, [sp, #16]
 801bfc8:	eba0 000a 	sub.w	r0, r0, sl
 801bfcc:	2240      	movs	r2, #64	; 0x40
 801bfce:	4082      	lsls	r2, r0
 801bfd0:	4313      	orrs	r3, r2
 801bfd2:	3401      	adds	r4, #1
 801bfd4:	9304      	str	r3, [sp, #16]
 801bfd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bfda:	4829      	ldr	r0, [pc, #164]	; (801c080 <_vfiprintf_r+0x224>)
 801bfdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801bfe0:	2206      	movs	r2, #6
 801bfe2:	f7e4 f945 	bl	8000270 <memchr>
 801bfe6:	2800      	cmp	r0, #0
 801bfe8:	d03f      	beq.n	801c06a <_vfiprintf_r+0x20e>
 801bfea:	4b26      	ldr	r3, [pc, #152]	; (801c084 <_vfiprintf_r+0x228>)
 801bfec:	bb1b      	cbnz	r3, 801c036 <_vfiprintf_r+0x1da>
 801bfee:	9b03      	ldr	r3, [sp, #12]
 801bff0:	3307      	adds	r3, #7
 801bff2:	f023 0307 	bic.w	r3, r3, #7
 801bff6:	3308      	adds	r3, #8
 801bff8:	9303      	str	r3, [sp, #12]
 801bffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bffc:	443b      	add	r3, r7
 801bffe:	9309      	str	r3, [sp, #36]	; 0x24
 801c000:	e768      	b.n	801bed4 <_vfiprintf_r+0x78>
 801c002:	fb0c 3202 	mla	r2, ip, r2, r3
 801c006:	460c      	mov	r4, r1
 801c008:	2001      	movs	r0, #1
 801c00a:	e7a6      	b.n	801bf5a <_vfiprintf_r+0xfe>
 801c00c:	2300      	movs	r3, #0
 801c00e:	3401      	adds	r4, #1
 801c010:	9305      	str	r3, [sp, #20]
 801c012:	4619      	mov	r1, r3
 801c014:	f04f 0c0a 	mov.w	ip, #10
 801c018:	4620      	mov	r0, r4
 801c01a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c01e:	3a30      	subs	r2, #48	; 0x30
 801c020:	2a09      	cmp	r2, #9
 801c022:	d903      	bls.n	801c02c <_vfiprintf_r+0x1d0>
 801c024:	2b00      	cmp	r3, #0
 801c026:	d0c6      	beq.n	801bfb6 <_vfiprintf_r+0x15a>
 801c028:	9105      	str	r1, [sp, #20]
 801c02a:	e7c4      	b.n	801bfb6 <_vfiprintf_r+0x15a>
 801c02c:	fb0c 2101 	mla	r1, ip, r1, r2
 801c030:	4604      	mov	r4, r0
 801c032:	2301      	movs	r3, #1
 801c034:	e7f0      	b.n	801c018 <_vfiprintf_r+0x1bc>
 801c036:	ab03      	add	r3, sp, #12
 801c038:	9300      	str	r3, [sp, #0]
 801c03a:	462a      	mov	r2, r5
 801c03c:	4b12      	ldr	r3, [pc, #72]	; (801c088 <_vfiprintf_r+0x22c>)
 801c03e:	a904      	add	r1, sp, #16
 801c040:	4630      	mov	r0, r6
 801c042:	f3af 8000 	nop.w
 801c046:	4607      	mov	r7, r0
 801c048:	1c78      	adds	r0, r7, #1
 801c04a:	d1d6      	bne.n	801bffa <_vfiprintf_r+0x19e>
 801c04c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c04e:	07d9      	lsls	r1, r3, #31
 801c050:	d405      	bmi.n	801c05e <_vfiprintf_r+0x202>
 801c052:	89ab      	ldrh	r3, [r5, #12]
 801c054:	059a      	lsls	r2, r3, #22
 801c056:	d402      	bmi.n	801c05e <_vfiprintf_r+0x202>
 801c058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c05a:	f7ff fce7 	bl	801ba2c <__retarget_lock_release_recursive>
 801c05e:	89ab      	ldrh	r3, [r5, #12]
 801c060:	065b      	lsls	r3, r3, #25
 801c062:	f53f af1d 	bmi.w	801bea0 <_vfiprintf_r+0x44>
 801c066:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c068:	e71c      	b.n	801bea4 <_vfiprintf_r+0x48>
 801c06a:	ab03      	add	r3, sp, #12
 801c06c:	9300      	str	r3, [sp, #0]
 801c06e:	462a      	mov	r2, r5
 801c070:	4b05      	ldr	r3, [pc, #20]	; (801c088 <_vfiprintf_r+0x22c>)
 801c072:	a904      	add	r1, sp, #16
 801c074:	4630      	mov	r0, r6
 801c076:	f000 f879 	bl	801c16c <_printf_i>
 801c07a:	e7e4      	b.n	801c046 <_vfiprintf_r+0x1ea>
 801c07c:	0801dbf0 	.word	0x0801dbf0
 801c080:	0801dbfa 	.word	0x0801dbfa
 801c084:	00000000 	.word	0x00000000
 801c088:	0801be37 	.word	0x0801be37
 801c08c:	0801dbf6 	.word	0x0801dbf6

0801c090 <_printf_common>:
 801c090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c094:	4616      	mov	r6, r2
 801c096:	4699      	mov	r9, r3
 801c098:	688a      	ldr	r2, [r1, #8]
 801c09a:	690b      	ldr	r3, [r1, #16]
 801c09c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c0a0:	4293      	cmp	r3, r2
 801c0a2:	bfb8      	it	lt
 801c0a4:	4613      	movlt	r3, r2
 801c0a6:	6033      	str	r3, [r6, #0]
 801c0a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c0ac:	4607      	mov	r7, r0
 801c0ae:	460c      	mov	r4, r1
 801c0b0:	b10a      	cbz	r2, 801c0b6 <_printf_common+0x26>
 801c0b2:	3301      	adds	r3, #1
 801c0b4:	6033      	str	r3, [r6, #0]
 801c0b6:	6823      	ldr	r3, [r4, #0]
 801c0b8:	0699      	lsls	r1, r3, #26
 801c0ba:	bf42      	ittt	mi
 801c0bc:	6833      	ldrmi	r3, [r6, #0]
 801c0be:	3302      	addmi	r3, #2
 801c0c0:	6033      	strmi	r3, [r6, #0]
 801c0c2:	6825      	ldr	r5, [r4, #0]
 801c0c4:	f015 0506 	ands.w	r5, r5, #6
 801c0c8:	d106      	bne.n	801c0d8 <_printf_common+0x48>
 801c0ca:	f104 0a19 	add.w	sl, r4, #25
 801c0ce:	68e3      	ldr	r3, [r4, #12]
 801c0d0:	6832      	ldr	r2, [r6, #0]
 801c0d2:	1a9b      	subs	r3, r3, r2
 801c0d4:	42ab      	cmp	r3, r5
 801c0d6:	dc26      	bgt.n	801c126 <_printf_common+0x96>
 801c0d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c0dc:	1e13      	subs	r3, r2, #0
 801c0de:	6822      	ldr	r2, [r4, #0]
 801c0e0:	bf18      	it	ne
 801c0e2:	2301      	movne	r3, #1
 801c0e4:	0692      	lsls	r2, r2, #26
 801c0e6:	d42b      	bmi.n	801c140 <_printf_common+0xb0>
 801c0e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c0ec:	4649      	mov	r1, r9
 801c0ee:	4638      	mov	r0, r7
 801c0f0:	47c0      	blx	r8
 801c0f2:	3001      	adds	r0, #1
 801c0f4:	d01e      	beq.n	801c134 <_printf_common+0xa4>
 801c0f6:	6823      	ldr	r3, [r4, #0]
 801c0f8:	6922      	ldr	r2, [r4, #16]
 801c0fa:	f003 0306 	and.w	r3, r3, #6
 801c0fe:	2b04      	cmp	r3, #4
 801c100:	bf02      	ittt	eq
 801c102:	68e5      	ldreq	r5, [r4, #12]
 801c104:	6833      	ldreq	r3, [r6, #0]
 801c106:	1aed      	subeq	r5, r5, r3
 801c108:	68a3      	ldr	r3, [r4, #8]
 801c10a:	bf0c      	ite	eq
 801c10c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c110:	2500      	movne	r5, #0
 801c112:	4293      	cmp	r3, r2
 801c114:	bfc4      	itt	gt
 801c116:	1a9b      	subgt	r3, r3, r2
 801c118:	18ed      	addgt	r5, r5, r3
 801c11a:	2600      	movs	r6, #0
 801c11c:	341a      	adds	r4, #26
 801c11e:	42b5      	cmp	r5, r6
 801c120:	d11a      	bne.n	801c158 <_printf_common+0xc8>
 801c122:	2000      	movs	r0, #0
 801c124:	e008      	b.n	801c138 <_printf_common+0xa8>
 801c126:	2301      	movs	r3, #1
 801c128:	4652      	mov	r2, sl
 801c12a:	4649      	mov	r1, r9
 801c12c:	4638      	mov	r0, r7
 801c12e:	47c0      	blx	r8
 801c130:	3001      	adds	r0, #1
 801c132:	d103      	bne.n	801c13c <_printf_common+0xac>
 801c134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c13c:	3501      	adds	r5, #1
 801c13e:	e7c6      	b.n	801c0ce <_printf_common+0x3e>
 801c140:	18e1      	adds	r1, r4, r3
 801c142:	1c5a      	adds	r2, r3, #1
 801c144:	2030      	movs	r0, #48	; 0x30
 801c146:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c14a:	4422      	add	r2, r4
 801c14c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c154:	3302      	adds	r3, #2
 801c156:	e7c7      	b.n	801c0e8 <_printf_common+0x58>
 801c158:	2301      	movs	r3, #1
 801c15a:	4622      	mov	r2, r4
 801c15c:	4649      	mov	r1, r9
 801c15e:	4638      	mov	r0, r7
 801c160:	47c0      	blx	r8
 801c162:	3001      	adds	r0, #1
 801c164:	d0e6      	beq.n	801c134 <_printf_common+0xa4>
 801c166:	3601      	adds	r6, #1
 801c168:	e7d9      	b.n	801c11e <_printf_common+0x8e>
	...

0801c16c <_printf_i>:
 801c16c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c170:	7e0f      	ldrb	r7, [r1, #24]
 801c172:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c174:	2f78      	cmp	r7, #120	; 0x78
 801c176:	4691      	mov	r9, r2
 801c178:	4680      	mov	r8, r0
 801c17a:	460c      	mov	r4, r1
 801c17c:	469a      	mov	sl, r3
 801c17e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c182:	d807      	bhi.n	801c194 <_printf_i+0x28>
 801c184:	2f62      	cmp	r7, #98	; 0x62
 801c186:	d80a      	bhi.n	801c19e <_printf_i+0x32>
 801c188:	2f00      	cmp	r7, #0
 801c18a:	f000 80d4 	beq.w	801c336 <_printf_i+0x1ca>
 801c18e:	2f58      	cmp	r7, #88	; 0x58
 801c190:	f000 80c0 	beq.w	801c314 <_printf_i+0x1a8>
 801c194:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c198:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c19c:	e03a      	b.n	801c214 <_printf_i+0xa8>
 801c19e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c1a2:	2b15      	cmp	r3, #21
 801c1a4:	d8f6      	bhi.n	801c194 <_printf_i+0x28>
 801c1a6:	a101      	add	r1, pc, #4	; (adr r1, 801c1ac <_printf_i+0x40>)
 801c1a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c1ac:	0801c205 	.word	0x0801c205
 801c1b0:	0801c219 	.word	0x0801c219
 801c1b4:	0801c195 	.word	0x0801c195
 801c1b8:	0801c195 	.word	0x0801c195
 801c1bc:	0801c195 	.word	0x0801c195
 801c1c0:	0801c195 	.word	0x0801c195
 801c1c4:	0801c219 	.word	0x0801c219
 801c1c8:	0801c195 	.word	0x0801c195
 801c1cc:	0801c195 	.word	0x0801c195
 801c1d0:	0801c195 	.word	0x0801c195
 801c1d4:	0801c195 	.word	0x0801c195
 801c1d8:	0801c31d 	.word	0x0801c31d
 801c1dc:	0801c245 	.word	0x0801c245
 801c1e0:	0801c2d7 	.word	0x0801c2d7
 801c1e4:	0801c195 	.word	0x0801c195
 801c1e8:	0801c195 	.word	0x0801c195
 801c1ec:	0801c33f 	.word	0x0801c33f
 801c1f0:	0801c195 	.word	0x0801c195
 801c1f4:	0801c245 	.word	0x0801c245
 801c1f8:	0801c195 	.word	0x0801c195
 801c1fc:	0801c195 	.word	0x0801c195
 801c200:	0801c2df 	.word	0x0801c2df
 801c204:	682b      	ldr	r3, [r5, #0]
 801c206:	1d1a      	adds	r2, r3, #4
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	602a      	str	r2, [r5, #0]
 801c20c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c210:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c214:	2301      	movs	r3, #1
 801c216:	e09f      	b.n	801c358 <_printf_i+0x1ec>
 801c218:	6820      	ldr	r0, [r4, #0]
 801c21a:	682b      	ldr	r3, [r5, #0]
 801c21c:	0607      	lsls	r7, r0, #24
 801c21e:	f103 0104 	add.w	r1, r3, #4
 801c222:	6029      	str	r1, [r5, #0]
 801c224:	d501      	bpl.n	801c22a <_printf_i+0xbe>
 801c226:	681e      	ldr	r6, [r3, #0]
 801c228:	e003      	b.n	801c232 <_printf_i+0xc6>
 801c22a:	0646      	lsls	r6, r0, #25
 801c22c:	d5fb      	bpl.n	801c226 <_printf_i+0xba>
 801c22e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c232:	2e00      	cmp	r6, #0
 801c234:	da03      	bge.n	801c23e <_printf_i+0xd2>
 801c236:	232d      	movs	r3, #45	; 0x2d
 801c238:	4276      	negs	r6, r6
 801c23a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c23e:	485a      	ldr	r0, [pc, #360]	; (801c3a8 <_printf_i+0x23c>)
 801c240:	230a      	movs	r3, #10
 801c242:	e012      	b.n	801c26a <_printf_i+0xfe>
 801c244:	682b      	ldr	r3, [r5, #0]
 801c246:	6820      	ldr	r0, [r4, #0]
 801c248:	1d19      	adds	r1, r3, #4
 801c24a:	6029      	str	r1, [r5, #0]
 801c24c:	0605      	lsls	r5, r0, #24
 801c24e:	d501      	bpl.n	801c254 <_printf_i+0xe8>
 801c250:	681e      	ldr	r6, [r3, #0]
 801c252:	e002      	b.n	801c25a <_printf_i+0xee>
 801c254:	0641      	lsls	r1, r0, #25
 801c256:	d5fb      	bpl.n	801c250 <_printf_i+0xe4>
 801c258:	881e      	ldrh	r6, [r3, #0]
 801c25a:	4853      	ldr	r0, [pc, #332]	; (801c3a8 <_printf_i+0x23c>)
 801c25c:	2f6f      	cmp	r7, #111	; 0x6f
 801c25e:	bf0c      	ite	eq
 801c260:	2308      	moveq	r3, #8
 801c262:	230a      	movne	r3, #10
 801c264:	2100      	movs	r1, #0
 801c266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c26a:	6865      	ldr	r5, [r4, #4]
 801c26c:	60a5      	str	r5, [r4, #8]
 801c26e:	2d00      	cmp	r5, #0
 801c270:	bfa2      	ittt	ge
 801c272:	6821      	ldrge	r1, [r4, #0]
 801c274:	f021 0104 	bicge.w	r1, r1, #4
 801c278:	6021      	strge	r1, [r4, #0]
 801c27a:	b90e      	cbnz	r6, 801c280 <_printf_i+0x114>
 801c27c:	2d00      	cmp	r5, #0
 801c27e:	d04b      	beq.n	801c318 <_printf_i+0x1ac>
 801c280:	4615      	mov	r5, r2
 801c282:	fbb6 f1f3 	udiv	r1, r6, r3
 801c286:	fb03 6711 	mls	r7, r3, r1, r6
 801c28a:	5dc7      	ldrb	r7, [r0, r7]
 801c28c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801c290:	4637      	mov	r7, r6
 801c292:	42bb      	cmp	r3, r7
 801c294:	460e      	mov	r6, r1
 801c296:	d9f4      	bls.n	801c282 <_printf_i+0x116>
 801c298:	2b08      	cmp	r3, #8
 801c29a:	d10b      	bne.n	801c2b4 <_printf_i+0x148>
 801c29c:	6823      	ldr	r3, [r4, #0]
 801c29e:	07de      	lsls	r6, r3, #31
 801c2a0:	d508      	bpl.n	801c2b4 <_printf_i+0x148>
 801c2a2:	6923      	ldr	r3, [r4, #16]
 801c2a4:	6861      	ldr	r1, [r4, #4]
 801c2a6:	4299      	cmp	r1, r3
 801c2a8:	bfde      	ittt	le
 801c2aa:	2330      	movle	r3, #48	; 0x30
 801c2ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 801c2b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801c2b4:	1b52      	subs	r2, r2, r5
 801c2b6:	6122      	str	r2, [r4, #16]
 801c2b8:	f8cd a000 	str.w	sl, [sp]
 801c2bc:	464b      	mov	r3, r9
 801c2be:	aa03      	add	r2, sp, #12
 801c2c0:	4621      	mov	r1, r4
 801c2c2:	4640      	mov	r0, r8
 801c2c4:	f7ff fee4 	bl	801c090 <_printf_common>
 801c2c8:	3001      	adds	r0, #1
 801c2ca:	d14a      	bne.n	801c362 <_printf_i+0x1f6>
 801c2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c2d0:	b004      	add	sp, #16
 801c2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c2d6:	6823      	ldr	r3, [r4, #0]
 801c2d8:	f043 0320 	orr.w	r3, r3, #32
 801c2dc:	6023      	str	r3, [r4, #0]
 801c2de:	4833      	ldr	r0, [pc, #204]	; (801c3ac <_printf_i+0x240>)
 801c2e0:	2778      	movs	r7, #120	; 0x78
 801c2e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c2e6:	6823      	ldr	r3, [r4, #0]
 801c2e8:	6829      	ldr	r1, [r5, #0]
 801c2ea:	061f      	lsls	r7, r3, #24
 801c2ec:	f851 6b04 	ldr.w	r6, [r1], #4
 801c2f0:	d402      	bmi.n	801c2f8 <_printf_i+0x18c>
 801c2f2:	065f      	lsls	r7, r3, #25
 801c2f4:	bf48      	it	mi
 801c2f6:	b2b6      	uxthmi	r6, r6
 801c2f8:	07df      	lsls	r7, r3, #31
 801c2fa:	bf48      	it	mi
 801c2fc:	f043 0320 	orrmi.w	r3, r3, #32
 801c300:	6029      	str	r1, [r5, #0]
 801c302:	bf48      	it	mi
 801c304:	6023      	strmi	r3, [r4, #0]
 801c306:	b91e      	cbnz	r6, 801c310 <_printf_i+0x1a4>
 801c308:	6823      	ldr	r3, [r4, #0]
 801c30a:	f023 0320 	bic.w	r3, r3, #32
 801c30e:	6023      	str	r3, [r4, #0]
 801c310:	2310      	movs	r3, #16
 801c312:	e7a7      	b.n	801c264 <_printf_i+0xf8>
 801c314:	4824      	ldr	r0, [pc, #144]	; (801c3a8 <_printf_i+0x23c>)
 801c316:	e7e4      	b.n	801c2e2 <_printf_i+0x176>
 801c318:	4615      	mov	r5, r2
 801c31a:	e7bd      	b.n	801c298 <_printf_i+0x12c>
 801c31c:	682b      	ldr	r3, [r5, #0]
 801c31e:	6826      	ldr	r6, [r4, #0]
 801c320:	6961      	ldr	r1, [r4, #20]
 801c322:	1d18      	adds	r0, r3, #4
 801c324:	6028      	str	r0, [r5, #0]
 801c326:	0635      	lsls	r5, r6, #24
 801c328:	681b      	ldr	r3, [r3, #0]
 801c32a:	d501      	bpl.n	801c330 <_printf_i+0x1c4>
 801c32c:	6019      	str	r1, [r3, #0]
 801c32e:	e002      	b.n	801c336 <_printf_i+0x1ca>
 801c330:	0670      	lsls	r0, r6, #25
 801c332:	d5fb      	bpl.n	801c32c <_printf_i+0x1c0>
 801c334:	8019      	strh	r1, [r3, #0]
 801c336:	2300      	movs	r3, #0
 801c338:	6123      	str	r3, [r4, #16]
 801c33a:	4615      	mov	r5, r2
 801c33c:	e7bc      	b.n	801c2b8 <_printf_i+0x14c>
 801c33e:	682b      	ldr	r3, [r5, #0]
 801c340:	1d1a      	adds	r2, r3, #4
 801c342:	602a      	str	r2, [r5, #0]
 801c344:	681d      	ldr	r5, [r3, #0]
 801c346:	6862      	ldr	r2, [r4, #4]
 801c348:	2100      	movs	r1, #0
 801c34a:	4628      	mov	r0, r5
 801c34c:	f7e3 ff90 	bl	8000270 <memchr>
 801c350:	b108      	cbz	r0, 801c356 <_printf_i+0x1ea>
 801c352:	1b40      	subs	r0, r0, r5
 801c354:	6060      	str	r0, [r4, #4]
 801c356:	6863      	ldr	r3, [r4, #4]
 801c358:	6123      	str	r3, [r4, #16]
 801c35a:	2300      	movs	r3, #0
 801c35c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c360:	e7aa      	b.n	801c2b8 <_printf_i+0x14c>
 801c362:	6923      	ldr	r3, [r4, #16]
 801c364:	462a      	mov	r2, r5
 801c366:	4649      	mov	r1, r9
 801c368:	4640      	mov	r0, r8
 801c36a:	47d0      	blx	sl
 801c36c:	3001      	adds	r0, #1
 801c36e:	d0ad      	beq.n	801c2cc <_printf_i+0x160>
 801c370:	6823      	ldr	r3, [r4, #0]
 801c372:	079b      	lsls	r3, r3, #30
 801c374:	d413      	bmi.n	801c39e <_printf_i+0x232>
 801c376:	68e0      	ldr	r0, [r4, #12]
 801c378:	9b03      	ldr	r3, [sp, #12]
 801c37a:	4298      	cmp	r0, r3
 801c37c:	bfb8      	it	lt
 801c37e:	4618      	movlt	r0, r3
 801c380:	e7a6      	b.n	801c2d0 <_printf_i+0x164>
 801c382:	2301      	movs	r3, #1
 801c384:	4632      	mov	r2, r6
 801c386:	4649      	mov	r1, r9
 801c388:	4640      	mov	r0, r8
 801c38a:	47d0      	blx	sl
 801c38c:	3001      	adds	r0, #1
 801c38e:	d09d      	beq.n	801c2cc <_printf_i+0x160>
 801c390:	3501      	adds	r5, #1
 801c392:	68e3      	ldr	r3, [r4, #12]
 801c394:	9903      	ldr	r1, [sp, #12]
 801c396:	1a5b      	subs	r3, r3, r1
 801c398:	42ab      	cmp	r3, r5
 801c39a:	dcf2      	bgt.n	801c382 <_printf_i+0x216>
 801c39c:	e7eb      	b.n	801c376 <_printf_i+0x20a>
 801c39e:	2500      	movs	r5, #0
 801c3a0:	f104 0619 	add.w	r6, r4, #25
 801c3a4:	e7f5      	b.n	801c392 <_printf_i+0x226>
 801c3a6:	bf00      	nop
 801c3a8:	0801dc01 	.word	0x0801dc01
 801c3ac:	0801dc12 	.word	0x0801dc12

0801c3b0 <__sflush_r>:
 801c3b0:	898a      	ldrh	r2, [r1, #12]
 801c3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c3b6:	4605      	mov	r5, r0
 801c3b8:	0710      	lsls	r0, r2, #28
 801c3ba:	460c      	mov	r4, r1
 801c3bc:	d458      	bmi.n	801c470 <__sflush_r+0xc0>
 801c3be:	684b      	ldr	r3, [r1, #4]
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	dc05      	bgt.n	801c3d0 <__sflush_r+0x20>
 801c3c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	dc02      	bgt.n	801c3d0 <__sflush_r+0x20>
 801c3ca:	2000      	movs	r0, #0
 801c3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c3d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c3d2:	2e00      	cmp	r6, #0
 801c3d4:	d0f9      	beq.n	801c3ca <__sflush_r+0x1a>
 801c3d6:	2300      	movs	r3, #0
 801c3d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c3dc:	682f      	ldr	r7, [r5, #0]
 801c3de:	6a21      	ldr	r1, [r4, #32]
 801c3e0:	602b      	str	r3, [r5, #0]
 801c3e2:	d032      	beq.n	801c44a <__sflush_r+0x9a>
 801c3e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c3e6:	89a3      	ldrh	r3, [r4, #12]
 801c3e8:	075a      	lsls	r2, r3, #29
 801c3ea:	d505      	bpl.n	801c3f8 <__sflush_r+0x48>
 801c3ec:	6863      	ldr	r3, [r4, #4]
 801c3ee:	1ac0      	subs	r0, r0, r3
 801c3f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c3f2:	b10b      	cbz	r3, 801c3f8 <__sflush_r+0x48>
 801c3f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c3f6:	1ac0      	subs	r0, r0, r3
 801c3f8:	2300      	movs	r3, #0
 801c3fa:	4602      	mov	r2, r0
 801c3fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c3fe:	6a21      	ldr	r1, [r4, #32]
 801c400:	4628      	mov	r0, r5
 801c402:	47b0      	blx	r6
 801c404:	1c43      	adds	r3, r0, #1
 801c406:	89a3      	ldrh	r3, [r4, #12]
 801c408:	d106      	bne.n	801c418 <__sflush_r+0x68>
 801c40a:	6829      	ldr	r1, [r5, #0]
 801c40c:	291d      	cmp	r1, #29
 801c40e:	d82b      	bhi.n	801c468 <__sflush_r+0xb8>
 801c410:	4a29      	ldr	r2, [pc, #164]	; (801c4b8 <__sflush_r+0x108>)
 801c412:	410a      	asrs	r2, r1
 801c414:	07d6      	lsls	r6, r2, #31
 801c416:	d427      	bmi.n	801c468 <__sflush_r+0xb8>
 801c418:	2200      	movs	r2, #0
 801c41a:	6062      	str	r2, [r4, #4]
 801c41c:	04d9      	lsls	r1, r3, #19
 801c41e:	6922      	ldr	r2, [r4, #16]
 801c420:	6022      	str	r2, [r4, #0]
 801c422:	d504      	bpl.n	801c42e <__sflush_r+0x7e>
 801c424:	1c42      	adds	r2, r0, #1
 801c426:	d101      	bne.n	801c42c <__sflush_r+0x7c>
 801c428:	682b      	ldr	r3, [r5, #0]
 801c42a:	b903      	cbnz	r3, 801c42e <__sflush_r+0x7e>
 801c42c:	6560      	str	r0, [r4, #84]	; 0x54
 801c42e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c430:	602f      	str	r7, [r5, #0]
 801c432:	2900      	cmp	r1, #0
 801c434:	d0c9      	beq.n	801c3ca <__sflush_r+0x1a>
 801c436:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c43a:	4299      	cmp	r1, r3
 801c43c:	d002      	beq.n	801c444 <__sflush_r+0x94>
 801c43e:	4628      	mov	r0, r5
 801c440:	f7ff fb36 	bl	801bab0 <_free_r>
 801c444:	2000      	movs	r0, #0
 801c446:	6360      	str	r0, [r4, #52]	; 0x34
 801c448:	e7c0      	b.n	801c3cc <__sflush_r+0x1c>
 801c44a:	2301      	movs	r3, #1
 801c44c:	4628      	mov	r0, r5
 801c44e:	47b0      	blx	r6
 801c450:	1c41      	adds	r1, r0, #1
 801c452:	d1c8      	bne.n	801c3e6 <__sflush_r+0x36>
 801c454:	682b      	ldr	r3, [r5, #0]
 801c456:	2b00      	cmp	r3, #0
 801c458:	d0c5      	beq.n	801c3e6 <__sflush_r+0x36>
 801c45a:	2b1d      	cmp	r3, #29
 801c45c:	d001      	beq.n	801c462 <__sflush_r+0xb2>
 801c45e:	2b16      	cmp	r3, #22
 801c460:	d101      	bne.n	801c466 <__sflush_r+0xb6>
 801c462:	602f      	str	r7, [r5, #0]
 801c464:	e7b1      	b.n	801c3ca <__sflush_r+0x1a>
 801c466:	89a3      	ldrh	r3, [r4, #12]
 801c468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c46c:	81a3      	strh	r3, [r4, #12]
 801c46e:	e7ad      	b.n	801c3cc <__sflush_r+0x1c>
 801c470:	690f      	ldr	r7, [r1, #16]
 801c472:	2f00      	cmp	r7, #0
 801c474:	d0a9      	beq.n	801c3ca <__sflush_r+0x1a>
 801c476:	0793      	lsls	r3, r2, #30
 801c478:	680e      	ldr	r6, [r1, #0]
 801c47a:	bf08      	it	eq
 801c47c:	694b      	ldreq	r3, [r1, #20]
 801c47e:	600f      	str	r7, [r1, #0]
 801c480:	bf18      	it	ne
 801c482:	2300      	movne	r3, #0
 801c484:	eba6 0807 	sub.w	r8, r6, r7
 801c488:	608b      	str	r3, [r1, #8]
 801c48a:	f1b8 0f00 	cmp.w	r8, #0
 801c48e:	dd9c      	ble.n	801c3ca <__sflush_r+0x1a>
 801c490:	6a21      	ldr	r1, [r4, #32]
 801c492:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c494:	4643      	mov	r3, r8
 801c496:	463a      	mov	r2, r7
 801c498:	4628      	mov	r0, r5
 801c49a:	47b0      	blx	r6
 801c49c:	2800      	cmp	r0, #0
 801c49e:	dc06      	bgt.n	801c4ae <__sflush_r+0xfe>
 801c4a0:	89a3      	ldrh	r3, [r4, #12]
 801c4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c4a6:	81a3      	strh	r3, [r4, #12]
 801c4a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c4ac:	e78e      	b.n	801c3cc <__sflush_r+0x1c>
 801c4ae:	4407      	add	r7, r0
 801c4b0:	eba8 0800 	sub.w	r8, r8, r0
 801c4b4:	e7e9      	b.n	801c48a <__sflush_r+0xda>
 801c4b6:	bf00      	nop
 801c4b8:	dfbffffe 	.word	0xdfbffffe

0801c4bc <_fflush_r>:
 801c4bc:	b538      	push	{r3, r4, r5, lr}
 801c4be:	690b      	ldr	r3, [r1, #16]
 801c4c0:	4605      	mov	r5, r0
 801c4c2:	460c      	mov	r4, r1
 801c4c4:	b913      	cbnz	r3, 801c4cc <_fflush_r+0x10>
 801c4c6:	2500      	movs	r5, #0
 801c4c8:	4628      	mov	r0, r5
 801c4ca:	bd38      	pop	{r3, r4, r5, pc}
 801c4cc:	b118      	cbz	r0, 801c4d6 <_fflush_r+0x1a>
 801c4ce:	6a03      	ldr	r3, [r0, #32]
 801c4d0:	b90b      	cbnz	r3, 801c4d6 <_fflush_r+0x1a>
 801c4d2:	f7fe fecf 	bl	801b274 <__sinit>
 801c4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	d0f3      	beq.n	801c4c6 <_fflush_r+0xa>
 801c4de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c4e0:	07d0      	lsls	r0, r2, #31
 801c4e2:	d404      	bmi.n	801c4ee <_fflush_r+0x32>
 801c4e4:	0599      	lsls	r1, r3, #22
 801c4e6:	d402      	bmi.n	801c4ee <_fflush_r+0x32>
 801c4e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c4ea:	f7ff fa9e 	bl	801ba2a <__retarget_lock_acquire_recursive>
 801c4ee:	4628      	mov	r0, r5
 801c4f0:	4621      	mov	r1, r4
 801c4f2:	f7ff ff5d 	bl	801c3b0 <__sflush_r>
 801c4f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c4f8:	07da      	lsls	r2, r3, #31
 801c4fa:	4605      	mov	r5, r0
 801c4fc:	d4e4      	bmi.n	801c4c8 <_fflush_r+0xc>
 801c4fe:	89a3      	ldrh	r3, [r4, #12]
 801c500:	059b      	lsls	r3, r3, #22
 801c502:	d4e1      	bmi.n	801c4c8 <_fflush_r+0xc>
 801c504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c506:	f7ff fa91 	bl	801ba2c <__retarget_lock_release_recursive>
 801c50a:	e7dd      	b.n	801c4c8 <_fflush_r+0xc>

0801c50c <fiprintf>:
 801c50c:	b40e      	push	{r1, r2, r3}
 801c50e:	b503      	push	{r0, r1, lr}
 801c510:	4601      	mov	r1, r0
 801c512:	ab03      	add	r3, sp, #12
 801c514:	4805      	ldr	r0, [pc, #20]	; (801c52c <fiprintf+0x20>)
 801c516:	f853 2b04 	ldr.w	r2, [r3], #4
 801c51a:	6800      	ldr	r0, [r0, #0]
 801c51c:	9301      	str	r3, [sp, #4]
 801c51e:	f7ff fc9d 	bl	801be5c <_vfiprintf_r>
 801c522:	b002      	add	sp, #8
 801c524:	f85d eb04 	ldr.w	lr, [sp], #4
 801c528:	b003      	add	sp, #12
 801c52a:	4770      	bx	lr
 801c52c:	200003dc 	.word	0x200003dc

0801c530 <__swhatbuf_r>:
 801c530:	b570      	push	{r4, r5, r6, lr}
 801c532:	460c      	mov	r4, r1
 801c534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c538:	2900      	cmp	r1, #0
 801c53a:	b096      	sub	sp, #88	; 0x58
 801c53c:	4615      	mov	r5, r2
 801c53e:	461e      	mov	r6, r3
 801c540:	da0d      	bge.n	801c55e <__swhatbuf_r+0x2e>
 801c542:	89a3      	ldrh	r3, [r4, #12]
 801c544:	f013 0f80 	tst.w	r3, #128	; 0x80
 801c548:	f04f 0100 	mov.w	r1, #0
 801c54c:	bf0c      	ite	eq
 801c54e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801c552:	2340      	movne	r3, #64	; 0x40
 801c554:	2000      	movs	r0, #0
 801c556:	6031      	str	r1, [r6, #0]
 801c558:	602b      	str	r3, [r5, #0]
 801c55a:	b016      	add	sp, #88	; 0x58
 801c55c:	bd70      	pop	{r4, r5, r6, pc}
 801c55e:	466a      	mov	r2, sp
 801c560:	f000 f848 	bl	801c5f4 <_fstat_r>
 801c564:	2800      	cmp	r0, #0
 801c566:	dbec      	blt.n	801c542 <__swhatbuf_r+0x12>
 801c568:	9901      	ldr	r1, [sp, #4]
 801c56a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801c56e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801c572:	4259      	negs	r1, r3
 801c574:	4159      	adcs	r1, r3
 801c576:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c57a:	e7eb      	b.n	801c554 <__swhatbuf_r+0x24>

0801c57c <__smakebuf_r>:
 801c57c:	898b      	ldrh	r3, [r1, #12]
 801c57e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c580:	079d      	lsls	r5, r3, #30
 801c582:	4606      	mov	r6, r0
 801c584:	460c      	mov	r4, r1
 801c586:	d507      	bpl.n	801c598 <__smakebuf_r+0x1c>
 801c588:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c58c:	6023      	str	r3, [r4, #0]
 801c58e:	6123      	str	r3, [r4, #16]
 801c590:	2301      	movs	r3, #1
 801c592:	6163      	str	r3, [r4, #20]
 801c594:	b002      	add	sp, #8
 801c596:	bd70      	pop	{r4, r5, r6, pc}
 801c598:	ab01      	add	r3, sp, #4
 801c59a:	466a      	mov	r2, sp
 801c59c:	f7ff ffc8 	bl	801c530 <__swhatbuf_r>
 801c5a0:	9900      	ldr	r1, [sp, #0]
 801c5a2:	4605      	mov	r5, r0
 801c5a4:	4630      	mov	r0, r6
 801c5a6:	f7fe fc2d 	bl	801ae04 <_malloc_r>
 801c5aa:	b948      	cbnz	r0, 801c5c0 <__smakebuf_r+0x44>
 801c5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c5b0:	059a      	lsls	r2, r3, #22
 801c5b2:	d4ef      	bmi.n	801c594 <__smakebuf_r+0x18>
 801c5b4:	f023 0303 	bic.w	r3, r3, #3
 801c5b8:	f043 0302 	orr.w	r3, r3, #2
 801c5bc:	81a3      	strh	r3, [r4, #12]
 801c5be:	e7e3      	b.n	801c588 <__smakebuf_r+0xc>
 801c5c0:	89a3      	ldrh	r3, [r4, #12]
 801c5c2:	6020      	str	r0, [r4, #0]
 801c5c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c5c8:	81a3      	strh	r3, [r4, #12]
 801c5ca:	9b00      	ldr	r3, [sp, #0]
 801c5cc:	6163      	str	r3, [r4, #20]
 801c5ce:	9b01      	ldr	r3, [sp, #4]
 801c5d0:	6120      	str	r0, [r4, #16]
 801c5d2:	b15b      	cbz	r3, 801c5ec <__smakebuf_r+0x70>
 801c5d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c5d8:	4630      	mov	r0, r6
 801c5da:	f000 f81d 	bl	801c618 <_isatty_r>
 801c5de:	b128      	cbz	r0, 801c5ec <__smakebuf_r+0x70>
 801c5e0:	89a3      	ldrh	r3, [r4, #12]
 801c5e2:	f023 0303 	bic.w	r3, r3, #3
 801c5e6:	f043 0301 	orr.w	r3, r3, #1
 801c5ea:	81a3      	strh	r3, [r4, #12]
 801c5ec:	89a3      	ldrh	r3, [r4, #12]
 801c5ee:	431d      	orrs	r5, r3
 801c5f0:	81a5      	strh	r5, [r4, #12]
 801c5f2:	e7cf      	b.n	801c594 <__smakebuf_r+0x18>

0801c5f4 <_fstat_r>:
 801c5f4:	b538      	push	{r3, r4, r5, lr}
 801c5f6:	4d07      	ldr	r5, [pc, #28]	; (801c614 <_fstat_r+0x20>)
 801c5f8:	2300      	movs	r3, #0
 801c5fa:	4604      	mov	r4, r0
 801c5fc:	4608      	mov	r0, r1
 801c5fe:	4611      	mov	r1, r2
 801c600:	602b      	str	r3, [r5, #0]
 801c602:	f7e5 fa92 	bl	8001b2a <_fstat>
 801c606:	1c43      	adds	r3, r0, #1
 801c608:	d102      	bne.n	801c610 <_fstat_r+0x1c>
 801c60a:	682b      	ldr	r3, [r5, #0]
 801c60c:	b103      	cbz	r3, 801c610 <_fstat_r+0x1c>
 801c60e:	6023      	str	r3, [r4, #0]
 801c610:	bd38      	pop	{r3, r4, r5, pc}
 801c612:	bf00      	nop
 801c614:	20011670 	.word	0x20011670

0801c618 <_isatty_r>:
 801c618:	b538      	push	{r3, r4, r5, lr}
 801c61a:	4d06      	ldr	r5, [pc, #24]	; (801c634 <_isatty_r+0x1c>)
 801c61c:	2300      	movs	r3, #0
 801c61e:	4604      	mov	r4, r0
 801c620:	4608      	mov	r0, r1
 801c622:	602b      	str	r3, [r5, #0]
 801c624:	f7e5 fa91 	bl	8001b4a <_isatty>
 801c628:	1c43      	adds	r3, r0, #1
 801c62a:	d102      	bne.n	801c632 <_isatty_r+0x1a>
 801c62c:	682b      	ldr	r3, [r5, #0]
 801c62e:	b103      	cbz	r3, 801c632 <_isatty_r+0x1a>
 801c630:	6023      	str	r3, [r4, #0]
 801c632:	bd38      	pop	{r3, r4, r5, pc}
 801c634:	20011670 	.word	0x20011670

0801c638 <abort>:
 801c638:	b508      	push	{r3, lr}
 801c63a:	2006      	movs	r0, #6
 801c63c:	f000 f82c 	bl	801c698 <raise>
 801c640:	2001      	movs	r0, #1
 801c642:	f7e5 fa23 	bl	8001a8c <_exit>

0801c646 <_raise_r>:
 801c646:	291f      	cmp	r1, #31
 801c648:	b538      	push	{r3, r4, r5, lr}
 801c64a:	4604      	mov	r4, r0
 801c64c:	460d      	mov	r5, r1
 801c64e:	d904      	bls.n	801c65a <_raise_r+0x14>
 801c650:	2316      	movs	r3, #22
 801c652:	6003      	str	r3, [r0, #0]
 801c654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c658:	bd38      	pop	{r3, r4, r5, pc}
 801c65a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c65c:	b112      	cbz	r2, 801c664 <_raise_r+0x1e>
 801c65e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c662:	b94b      	cbnz	r3, 801c678 <_raise_r+0x32>
 801c664:	4620      	mov	r0, r4
 801c666:	f000 f831 	bl	801c6cc <_getpid_r>
 801c66a:	462a      	mov	r2, r5
 801c66c:	4601      	mov	r1, r0
 801c66e:	4620      	mov	r0, r4
 801c670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c674:	f000 b818 	b.w	801c6a8 <_kill_r>
 801c678:	2b01      	cmp	r3, #1
 801c67a:	d00a      	beq.n	801c692 <_raise_r+0x4c>
 801c67c:	1c59      	adds	r1, r3, #1
 801c67e:	d103      	bne.n	801c688 <_raise_r+0x42>
 801c680:	2316      	movs	r3, #22
 801c682:	6003      	str	r3, [r0, #0]
 801c684:	2001      	movs	r0, #1
 801c686:	e7e7      	b.n	801c658 <_raise_r+0x12>
 801c688:	2400      	movs	r4, #0
 801c68a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c68e:	4628      	mov	r0, r5
 801c690:	4798      	blx	r3
 801c692:	2000      	movs	r0, #0
 801c694:	e7e0      	b.n	801c658 <_raise_r+0x12>
	...

0801c698 <raise>:
 801c698:	4b02      	ldr	r3, [pc, #8]	; (801c6a4 <raise+0xc>)
 801c69a:	4601      	mov	r1, r0
 801c69c:	6818      	ldr	r0, [r3, #0]
 801c69e:	f7ff bfd2 	b.w	801c646 <_raise_r>
 801c6a2:	bf00      	nop
 801c6a4:	200003dc 	.word	0x200003dc

0801c6a8 <_kill_r>:
 801c6a8:	b538      	push	{r3, r4, r5, lr}
 801c6aa:	4d07      	ldr	r5, [pc, #28]	; (801c6c8 <_kill_r+0x20>)
 801c6ac:	2300      	movs	r3, #0
 801c6ae:	4604      	mov	r4, r0
 801c6b0:	4608      	mov	r0, r1
 801c6b2:	4611      	mov	r1, r2
 801c6b4:	602b      	str	r3, [r5, #0]
 801c6b6:	f7e5 f9d9 	bl	8001a6c <_kill>
 801c6ba:	1c43      	adds	r3, r0, #1
 801c6bc:	d102      	bne.n	801c6c4 <_kill_r+0x1c>
 801c6be:	682b      	ldr	r3, [r5, #0]
 801c6c0:	b103      	cbz	r3, 801c6c4 <_kill_r+0x1c>
 801c6c2:	6023      	str	r3, [r4, #0]
 801c6c4:	bd38      	pop	{r3, r4, r5, pc}
 801c6c6:	bf00      	nop
 801c6c8:	20011670 	.word	0x20011670

0801c6cc <_getpid_r>:
 801c6cc:	f7e5 b9c6 	b.w	8001a5c <_getpid>

0801c6d0 <_init>:
 801c6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6d2:	bf00      	nop
 801c6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6d6:	bc08      	pop	{r3}
 801c6d8:	469e      	mov	lr, r3
 801c6da:	4770      	bx	lr

0801c6dc <_fini>:
 801c6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6de:	bf00      	nop
 801c6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c6e2:	bc08      	pop	{r3}
 801c6e4:	469e      	mov	lr, r3
 801c6e6:	4770      	bx	lr
